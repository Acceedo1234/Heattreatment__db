
heattreatment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010014  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  080101a4  080101a4  000201a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080106f8  080106f8  00030070  2**0
                  CONTENTS
  4 .ARM          00000008  080106f8  080106f8  000206f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010700  08010700  00030070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08010700  08010700  00020700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08010708  08010708  00020708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08010710  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000754  20000070  08010780  00030070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007c4  08010780  000307c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001edd9  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004820  00000000  00000000  0004ee79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d8  00000000  00000000  000536a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001748  00000000  00000000  00054f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006b9a  00000000  00000000  000566c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021a84  00000000  00000000  0005d25a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df3b2  00000000  00000000  0007ecde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015e090  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cc0  00000000  00000000  0015e0e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801018c 	.word	0x0801018c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0801018c 	.word	0x0801018c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ESPRxDecoder>:
	productionhysNegSetOL   = FlashReadOLdata[9];
}


void ESPRxDecoder(unsigned char Rxwifi_data,unsigned char Rxseqdecoder)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	460a      	mov	r2, r1
 800057e:	71fb      	strb	r3, [r7, #7]
 8000580:	4613      	mov	r3, r2
 8000582:	71bb      	strb	r3, [r7, #6]

   static unsigned char Error_Retry;
	 switch(Rxseqdecoder)
 8000584:	79bb      	ldrb	r3, [r7, #6]
 8000586:	3b01      	subs	r3, #1
 8000588:	2b07      	cmp	r3, #7
 800058a:	f201 82eb 	bhi.w	8001b64 <ESPRxDecoder+0x15f0>
 800058e:	a201      	add	r2, pc, #4	; (adr r2, 8000594 <ESPRxDecoder+0x20>)
 8000590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000594:	080005b5 	.word	0x080005b5
 8000598:	080006d1 	.word	0x080006d1
 800059c:	0800070f 	.word	0x0800070f
 80005a0:	08000905 	.word	0x08000905
 80005a4:	08000943 	.word	0x08000943
 80005a8:	08000b55 	.word	0x08000b55
 80005ac:	08000b81 	.word	0x08000b81
 80005b0:	08001b2f 	.word	0x08001b2f
	   {
	   	case 1:
			 if((Rxwifi_data=='O')&&(bufferptr==0))
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	2b4f      	cmp	r3, #79	; 0x4f
 80005b8:	d107      	bne.n	80005ca <ESPRxDecoder+0x56>
 80005ba:	4b91      	ldr	r3, [pc, #580]	; (8000800 <ESPRxDecoder+0x28c>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d103      	bne.n	80005ca <ESPRxDecoder+0x56>
			 {
			 	bufferptr=1;
 80005c2:	4b8f      	ldr	r3, [pc, #572]	; (8000800 <ESPRxDecoder+0x28c>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	701a      	strb	r2, [r3, #0]
 80005c8:	e014      	b.n	80005f4 <ESPRxDecoder+0x80>
			 }
			 else if((Rxwifi_data=='K')&&(bufferptr==1))
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	2b4b      	cmp	r3, #75	; 0x4b
 80005ce:	d111      	bne.n	80005f4 <ESPRxDecoder+0x80>
 80005d0:	4b8b      	ldr	r3, [pc, #556]	; (8000800 <ESPRxDecoder+0x28c>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d10d      	bne.n	80005f4 <ESPRxDecoder+0x80>
			 {
			 	bufferptr=0;
 80005d8:	4b89      	ldr	r3, [pc, #548]	; (8000800 <ESPRxDecoder+0x28c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	701a      	strb	r2, [r3, #0]
			 	wifi_command=30;
 80005de:	4b89      	ldr	r3, [pc, #548]	; (8000804 <ESPRxDecoder+0x290>)
 80005e0:	221e      	movs	r2, #30
 80005e2:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	71bb      	strb	r3, [r7, #6]
				wifi_command=30;
 80005e8:	4b86      	ldr	r3, [pc, #536]	; (8000804 <ESPRxDecoder+0x290>)
 80005ea:	221e      	movs	r2, #30
 80005ec:	701a      	strb	r2, [r3, #0]
//				WifiStatusVar = 1;
				Check_CWMODE_For_Hang=0;
 80005ee:	4b86      	ldr	r3, [pc, #536]	; (8000808 <ESPRxDecoder+0x294>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]
			 }
			 else{;}

			 if((Rxwifi_data=='n')&&(bufferptr==0))
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	2b6e      	cmp	r3, #110	; 0x6e
 80005f8:	d107      	bne.n	800060a <ESPRxDecoder+0x96>
 80005fa:	4b81      	ldr	r3, [pc, #516]	; (8000800 <ESPRxDecoder+0x28c>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d103      	bne.n	800060a <ESPRxDecoder+0x96>
			 {
			 	bufferptr=1;
 8000602:	4b7f      	ldr	r3, [pc, #508]	; (8000800 <ESPRxDecoder+0x28c>)
 8000604:	2201      	movs	r2, #1
 8000606:	701a      	strb	r2, [r3, #0]
 8000608:	e060      	b.n	80006cc <ESPRxDecoder+0x158>
			 }
			 else if((Rxwifi_data=='o')&&(bufferptr==1))
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	2b6f      	cmp	r3, #111	; 0x6f
 800060e:	d107      	bne.n	8000620 <ESPRxDecoder+0xac>
 8000610:	4b7b      	ldr	r3, [pc, #492]	; (8000800 <ESPRxDecoder+0x28c>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d103      	bne.n	8000620 <ESPRxDecoder+0xac>
			 {
			 	bufferptr=2;
 8000618:	4b79      	ldr	r3, [pc, #484]	; (8000800 <ESPRxDecoder+0x28c>)
 800061a:	2202      	movs	r2, #2
 800061c:	701a      	strb	r2, [r3, #0]
 800061e:	e055      	b.n	80006cc <ESPRxDecoder+0x158>
			 }
			 else if(bufferptr==2)
 8000620:	4b77      	ldr	r3, [pc, #476]	; (8000800 <ESPRxDecoder+0x28c>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b02      	cmp	r3, #2
 8000626:	d104      	bne.n	8000632 <ESPRxDecoder+0xbe>
			 {
			 	bufferptr=3;
 8000628:	4b75      	ldr	r3, [pc, #468]	; (8000800 <ESPRxDecoder+0x28c>)
 800062a:	2203      	movs	r2, #3
 800062c:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
				wifi_command=30;
				Check_CWMODE_For_Hang=0;
			 }
			 else{;}
		break;
 800062e:	f001 ba9b 	b.w	8001b68 <ESPRxDecoder+0x15f4>
			 else if((Rxwifi_data=='c')&&(bufferptr==3))
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	2b63      	cmp	r3, #99	; 0x63
 8000636:	d107      	bne.n	8000648 <ESPRxDecoder+0xd4>
 8000638:	4b71      	ldr	r3, [pc, #452]	; (8000800 <ESPRxDecoder+0x28c>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b03      	cmp	r3, #3
 800063e:	d103      	bne.n	8000648 <ESPRxDecoder+0xd4>
			 	bufferptr=4;
 8000640:	4b6f      	ldr	r3, [pc, #444]	; (8000800 <ESPRxDecoder+0x28c>)
 8000642:	2204      	movs	r2, #4
 8000644:	701a      	strb	r2, [r3, #0]
 8000646:	e041      	b.n	80006cc <ESPRxDecoder+0x158>
			 else if((Rxwifi_data=='h')&&(bufferptr==4))
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	2b68      	cmp	r3, #104	; 0x68
 800064c:	d107      	bne.n	800065e <ESPRxDecoder+0xea>
 800064e:	4b6c      	ldr	r3, [pc, #432]	; (8000800 <ESPRxDecoder+0x28c>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b04      	cmp	r3, #4
 8000654:	d103      	bne.n	800065e <ESPRxDecoder+0xea>
			 	bufferptr=5;
 8000656:	4b6a      	ldr	r3, [pc, #424]	; (8000800 <ESPRxDecoder+0x28c>)
 8000658:	2205      	movs	r2, #5
 800065a:	701a      	strb	r2, [r3, #0]
 800065c:	e036      	b.n	80006cc <ESPRxDecoder+0x158>
			 else if((Rxwifi_data=='a')&&(bufferptr==5))
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	2b61      	cmp	r3, #97	; 0x61
 8000662:	d107      	bne.n	8000674 <ESPRxDecoder+0x100>
 8000664:	4b66      	ldr	r3, [pc, #408]	; (8000800 <ESPRxDecoder+0x28c>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b05      	cmp	r3, #5
 800066a:	d103      	bne.n	8000674 <ESPRxDecoder+0x100>
			 	bufferptr=6;
 800066c:	4b64      	ldr	r3, [pc, #400]	; (8000800 <ESPRxDecoder+0x28c>)
 800066e:	2206      	movs	r2, #6
 8000670:	701a      	strb	r2, [r3, #0]
 8000672:	e02b      	b.n	80006cc <ESPRxDecoder+0x158>
			 else if((Rxwifi_data=='n')&&(bufferptr==6))
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	2b6e      	cmp	r3, #110	; 0x6e
 8000678:	d107      	bne.n	800068a <ESPRxDecoder+0x116>
 800067a:	4b61      	ldr	r3, [pc, #388]	; (8000800 <ESPRxDecoder+0x28c>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b06      	cmp	r3, #6
 8000680:	d103      	bne.n	800068a <ESPRxDecoder+0x116>
			 	bufferptr=7;
 8000682:	4b5f      	ldr	r3, [pc, #380]	; (8000800 <ESPRxDecoder+0x28c>)
 8000684:	2207      	movs	r2, #7
 8000686:	701a      	strb	r2, [r3, #0]
 8000688:	e020      	b.n	80006cc <ESPRxDecoder+0x158>
			 else if((Rxwifi_data=='g')&&(bufferptr==7))
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	2b67      	cmp	r3, #103	; 0x67
 800068e:	d107      	bne.n	80006a0 <ESPRxDecoder+0x12c>
 8000690:	4b5b      	ldr	r3, [pc, #364]	; (8000800 <ESPRxDecoder+0x28c>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b07      	cmp	r3, #7
 8000696:	d103      	bne.n	80006a0 <ESPRxDecoder+0x12c>
			 	bufferptr=8;
 8000698:	4b59      	ldr	r3, [pc, #356]	; (8000800 <ESPRxDecoder+0x28c>)
 800069a:	2208      	movs	r2, #8
 800069c:	701a      	strb	r2, [r3, #0]
 800069e:	e015      	b.n	80006cc <ESPRxDecoder+0x158>
			 else if((Rxwifi_data=='e')&&(bufferptr==8))
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	2b65      	cmp	r3, #101	; 0x65
 80006a4:	f041 8260 	bne.w	8001b68 <ESPRxDecoder+0x15f4>
 80006a8:	4b55      	ldr	r3, [pc, #340]	; (8000800 <ESPRxDecoder+0x28c>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b08      	cmp	r3, #8
 80006ae:	f041 825b 	bne.w	8001b68 <ESPRxDecoder+0x15f4>
			 	bufferptr=0;
 80006b2:	4b53      	ldr	r3, [pc, #332]	; (8000800 <ESPRxDecoder+0x28c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	71bb      	strb	r3, [r7, #6]
				wifi_command=30;
 80006bc:	4b51      	ldr	r3, [pc, #324]	; (8000804 <ESPRxDecoder+0x290>)
 80006be:	221e      	movs	r2, #30
 80006c0:	701a      	strb	r2, [r3, #0]
				Check_CWMODE_For_Hang=0;
 80006c2:	4b51      	ldr	r3, [pc, #324]	; (8000808 <ESPRxDecoder+0x294>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
		break;
 80006c8:	f001 ba4e 	b.w	8001b68 <ESPRxDecoder+0x15f4>
 80006cc:	f001 ba4c 	b.w	8001b68 <ESPRxDecoder+0x15f4>
		case 2:
			if((Rxwifi_data=='O')&&(bufferptr==0))
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	2b4f      	cmp	r3, #79	; 0x4f
 80006d4:	d108      	bne.n	80006e8 <ESPRxDecoder+0x174>
 80006d6:	4b4a      	ldr	r3, [pc, #296]	; (8000800 <ESPRxDecoder+0x28c>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d104      	bne.n	80006e8 <ESPRxDecoder+0x174>
			 {
			 	bufferptr=1;
 80006de:	4b48      	ldr	r3, [pc, #288]	; (8000800 <ESPRxDecoder+0x28c>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	701a      	strb	r2, [r3, #0]
			 {
			 	bufferptr=0;
				Rxseqdecoder=0;
				wifi_command=49;
			 }
		break;
 80006e4:	f001 ba42 	b.w	8001b6c <ESPRxDecoder+0x15f8>
			 else if((Rxwifi_data=='K')&&(bufferptr==1))
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	2b4b      	cmp	r3, #75	; 0x4b
 80006ec:	f041 823e 	bne.w	8001b6c <ESPRxDecoder+0x15f8>
 80006f0:	4b43      	ldr	r3, [pc, #268]	; (8000800 <ESPRxDecoder+0x28c>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	f041 8239 	bne.w	8001b6c <ESPRxDecoder+0x15f8>
			 	bufferptr=0;
 80006fa:	4b41      	ldr	r3, [pc, #260]	; (8000800 <ESPRxDecoder+0x28c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000700:	2300      	movs	r3, #0
 8000702:	71bb      	strb	r3, [r7, #6]
				wifi_command=49;
 8000704:	4b3f      	ldr	r3, [pc, #252]	; (8000804 <ESPRxDecoder+0x290>)
 8000706:	2231      	movs	r2, #49	; 0x31
 8000708:	701a      	strb	r2, [r3, #0]
		break;
 800070a:	f001 ba2f 	b.w	8001b6c <ESPRxDecoder+0x15f8>
		case 3:
			if((Rxwifi_data=='A')&&(bufferptr==0))
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	2b41      	cmp	r3, #65	; 0x41
 8000712:	d107      	bne.n	8000724 <ESPRxDecoder+0x1b0>
 8000714:	4b3a      	ldr	r3, [pc, #232]	; (8000800 <ESPRxDecoder+0x28c>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d103      	bne.n	8000724 <ESPRxDecoder+0x1b0>
			 {
			 	bufferptr=1;
 800071c:	4b38      	ldr	r3, [pc, #224]	; (8000800 <ESPRxDecoder+0x28c>)
 800071e:	2201      	movs	r2, #1
 8000720:	701a      	strb	r2, [r3, #0]
 8000722:	e0a1      	b.n	8000868 <ESPRxDecoder+0x2f4>
			 }
			 else if((Rxwifi_data=='C')&&(bufferptr==1))
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	2b43      	cmp	r3, #67	; 0x43
 8000728:	d107      	bne.n	800073a <ESPRxDecoder+0x1c6>
 800072a:	4b35      	ldr	r3, [pc, #212]	; (8000800 <ESPRxDecoder+0x28c>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d103      	bne.n	800073a <ESPRxDecoder+0x1c6>
			 {
			 	bufferptr=2;
 8000732:	4b33      	ldr	r3, [pc, #204]	; (8000800 <ESPRxDecoder+0x28c>)
 8000734:	2202      	movs	r2, #2
 8000736:	701a      	strb	r2, [r3, #0]
 8000738:	e096      	b.n	8000868 <ESPRxDecoder+0x2f4>
			 }
			 else if((Rxwifi_data=='C')&&(bufferptr==2))
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	2b43      	cmp	r3, #67	; 0x43
 800073e:	d107      	bne.n	8000750 <ESPRxDecoder+0x1dc>
 8000740:	4b2f      	ldr	r3, [pc, #188]	; (8000800 <ESPRxDecoder+0x28c>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b02      	cmp	r3, #2
 8000746:	d103      	bne.n	8000750 <ESPRxDecoder+0x1dc>
			 {
			 	bufferptr=3;
 8000748:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <ESPRxDecoder+0x28c>)
 800074a:	2203      	movs	r2, #3
 800074c:	701a      	strb	r2, [r3, #0]
 800074e:	e08b      	b.n	8000868 <ESPRxDecoder+0x2f4>
			 }

			 else if((Rxwifi_data=='E')&&(bufferptr==3))
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	2b45      	cmp	r3, #69	; 0x45
 8000754:	d107      	bne.n	8000766 <ESPRxDecoder+0x1f2>
 8000756:	4b2a      	ldr	r3, [pc, #168]	; (8000800 <ESPRxDecoder+0x28c>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b03      	cmp	r3, #3
 800075c:	d103      	bne.n	8000766 <ESPRxDecoder+0x1f2>
			 {
			 	bufferptr=4;
 800075e:	4b28      	ldr	r3, [pc, #160]	; (8000800 <ESPRxDecoder+0x28c>)
 8000760:	2204      	movs	r2, #4
 8000762:	701a      	strb	r2, [r3, #0]
 8000764:	e080      	b.n	8000868 <ESPRxDecoder+0x2f4>
			 }
			 else if((Rxwifi_data=='E')&&(bufferptr==4))
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	2b45      	cmp	r3, #69	; 0x45
 800076a:	d107      	bne.n	800077c <ESPRxDecoder+0x208>
 800076c:	4b24      	ldr	r3, [pc, #144]	; (8000800 <ESPRxDecoder+0x28c>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b04      	cmp	r3, #4
 8000772:	d103      	bne.n	800077c <ESPRxDecoder+0x208>
			 {
			 	bufferptr=5;
 8000774:	4b22      	ldr	r3, [pc, #136]	; (8000800 <ESPRxDecoder+0x28c>)
 8000776:	2205      	movs	r2, #5
 8000778:	701a      	strb	r2, [r3, #0]
 800077a:	e075      	b.n	8000868 <ESPRxDecoder+0x2f4>
			 }
			 else if((Rxwifi_data=='D')&&(bufferptr==5))
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2b44      	cmp	r3, #68	; 0x44
 8000780:	d107      	bne.n	8000792 <ESPRxDecoder+0x21e>
 8000782:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <ESPRxDecoder+0x28c>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b05      	cmp	r3, #5
 8000788:	d103      	bne.n	8000792 <ESPRxDecoder+0x21e>
			 {
			 	bufferptr=6;
 800078a:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <ESPRxDecoder+0x28c>)
 800078c:	2206      	movs	r2, #6
 800078e:	701a      	strb	r2, [r3, #0]
 8000790:	e06a      	b.n	8000868 <ESPRxDecoder+0x2f4>
			 }
			 else if((Rxwifi_data=='O')&&(bufferptr==6))
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	2b4f      	cmp	r3, #79	; 0x4f
 8000796:	d107      	bne.n	80007a8 <ESPRxDecoder+0x234>
 8000798:	4b19      	ldr	r3, [pc, #100]	; (8000800 <ESPRxDecoder+0x28c>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b06      	cmp	r3, #6
 800079e:	d103      	bne.n	80007a8 <ESPRxDecoder+0x234>
			 {
			 	bufferptr=7;
 80007a0:	4b17      	ldr	r3, [pc, #92]	; (8000800 <ESPRxDecoder+0x28c>)
 80007a2:	2207      	movs	r2, #7
 80007a4:	701a      	strb	r2, [r3, #0]
 80007a6:	e05f      	b.n	8000868 <ESPRxDecoder+0x2f4>
			 }
			 else if((Rxwifi_data=='_')&&(bufferptr==7))
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	2b5f      	cmp	r3, #95	; 0x5f
 80007ac:	d107      	bne.n	80007be <ESPRxDecoder+0x24a>
 80007ae:	4b14      	ldr	r3, [pc, #80]	; (8000800 <ESPRxDecoder+0x28c>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b07      	cmp	r3, #7
 80007b4:	d103      	bne.n	80007be <ESPRxDecoder+0x24a>
			 {
			 	bufferptr=8;
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <ESPRxDecoder+0x28c>)
 80007b8:	2208      	movs	r2, #8
 80007ba:	701a      	strb	r2, [r3, #0]
 80007bc:	e054      	b.n	8000868 <ESPRxDecoder+0x2f4>
			 }
			 else if((Rxwifi_data=='E')&&(bufferptr==8))
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	2b45      	cmp	r3, #69	; 0x45
 80007c2:	d107      	bne.n	80007d4 <ESPRxDecoder+0x260>
 80007c4:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <ESPRxDecoder+0x28c>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b08      	cmp	r3, #8
 80007ca:	d103      	bne.n	80007d4 <ESPRxDecoder+0x260>
			 {
			 	bufferptr=9;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <ESPRxDecoder+0x28c>)
 80007ce:	2209      	movs	r2, #9
 80007d0:	701a      	strb	r2, [r3, #0]
 80007d2:	e049      	b.n	8000868 <ESPRxDecoder+0x2f4>
			 }
			 else if((Rxwifi_data=='D')&&(bufferptr==9))
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	2b44      	cmp	r3, #68	; 0x44
 80007d8:	d107      	bne.n	80007ea <ESPRxDecoder+0x276>
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <ESPRxDecoder+0x28c>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b09      	cmp	r3, #9
 80007e0:	d103      	bne.n	80007ea <ESPRxDecoder+0x276>
			 {
			 	bufferptr=10;
 80007e2:	4b07      	ldr	r3, [pc, #28]	; (8000800 <ESPRxDecoder+0x28c>)
 80007e4:	220a      	movs	r2, #10
 80007e6:	701a      	strb	r2, [r3, #0]
 80007e8:	e03e      	b.n	8000868 <ESPRxDecoder+0x2f4>
			 }
			 else if((Rxwifi_data=='I')&&(bufferptr==10))
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	2b49      	cmp	r3, #73	; 0x49
 80007ee:	d10d      	bne.n	800080c <ESPRxDecoder+0x298>
 80007f0:	4b03      	ldr	r3, [pc, #12]	; (8000800 <ESPRxDecoder+0x28c>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b0a      	cmp	r3, #10
 80007f6:	d109      	bne.n	800080c <ESPRxDecoder+0x298>
			 {
			 	bufferptr=11;
 80007f8:	4b01      	ldr	r3, [pc, #4]	; (8000800 <ESPRxDecoder+0x28c>)
 80007fa:	220b      	movs	r2, #11
 80007fc:	701a      	strb	r2, [r3, #0]
 80007fe:	e033      	b.n	8000868 <ESPRxDecoder+0x2f4>
 8000800:	20000796 	.word	0x20000796
 8000804:	20000698 	.word	0x20000698
 8000808:	20000798 	.word	0x20000798
			 }
			 else if((Rxwifi_data=='M')&&(bufferptr==11))
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	2b4d      	cmp	r3, #77	; 0x4d
 8000810:	d107      	bne.n	8000822 <ESPRxDecoder+0x2ae>
 8000812:	4b94      	ldr	r3, [pc, #592]	; (8000a64 <ESPRxDecoder+0x4f0>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b0b      	cmp	r3, #11
 8000818:	d103      	bne.n	8000822 <ESPRxDecoder+0x2ae>
			 {
			 	bufferptr=12;
 800081a:	4b92      	ldr	r3, [pc, #584]	; (8000a64 <ESPRxDecoder+0x4f0>)
 800081c:	220c      	movs	r2, #12
 800081e:	701a      	strb	r2, [r3, #0]
 8000820:	e022      	b.n	8000868 <ESPRxDecoder+0x2f4>
			 }
			 else if((Rxwifi_data=='A')&&(bufferptr==12))
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	2b41      	cmp	r3, #65	; 0x41
 8000826:	d107      	bne.n	8000838 <ESPRxDecoder+0x2c4>
 8000828:	4b8e      	ldr	r3, [pc, #568]	; (8000a64 <ESPRxDecoder+0x4f0>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b0c      	cmp	r3, #12
 800082e:	d103      	bne.n	8000838 <ESPRxDecoder+0x2c4>
			 {
			 	bufferptr=13;
 8000830:	4b8c      	ldr	r3, [pc, #560]	; (8000a64 <ESPRxDecoder+0x4f0>)
 8000832:	220d      	movs	r2, #13
 8000834:	701a      	strb	r2, [r3, #0]
 8000836:	e017      	b.n	8000868 <ESPRxDecoder+0x2f4>
			 }
			 else if((Rxwifi_data=='X')&&(bufferptr==13))
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	2b58      	cmp	r3, #88	; 0x58
 800083c:	d114      	bne.n	8000868 <ESPRxDecoder+0x2f4>
 800083e:	4b89      	ldr	r3, [pc, #548]	; (8000a64 <ESPRxDecoder+0x4f0>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b0d      	cmp	r3, #13
 8000844:	d110      	bne.n	8000868 <ESPRxDecoder+0x2f4>
				 {
			 	bufferptr=0;
 8000846:	4b87      	ldr	r3, [pc, #540]	; (8000a64 <ESPRxDecoder+0x4f0>)
 8000848:	2200      	movs	r2, #0
 800084a:	701a      	strb	r2, [r3, #0]
				Err_bufferptr=0;
 800084c:	4b86      	ldr	r3, [pc, #536]	; (8000a68 <ESPRxDecoder+0x4f4>)
 800084e:	2200      	movs	r2, #0
 8000850:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000852:	2300      	movs	r3, #0
 8000854:	71bb      	strb	r3, [r7, #6]
				wifi_command=70;
 8000856:	4b85      	ldr	r3, [pc, #532]	; (8000a6c <ESPRxDecoder+0x4f8>)
 8000858:	2246      	movs	r2, #70	; 0x46
 800085a:	701a      	strb	r2, [r3, #0]
				Error_Retry=0;
 800085c:	4b84      	ldr	r3, [pc, #528]	; (8000a70 <ESPRxDecoder+0x4fc>)
 800085e:	2200      	movs	r2, #0
 8000860:	701a      	strb	r2, [r3, #0]
				WifiDisplay = 1;
 8000862:	4b84      	ldr	r3, [pc, #528]	; (8000a74 <ESPRxDecoder+0x500>)
 8000864:	2201      	movs	r2, #1
 8000866:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
				wifi_command=70;
				Error_Retry=0;
			 }	*/

			 if((Rxwifi_data=='N')&&(Err_bufferptr==0))
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	2b4e      	cmp	r3, #78	; 0x4e
 800086c:	d107      	bne.n	800087e <ESPRxDecoder+0x30a>
 800086e:	4b7e      	ldr	r3, [pc, #504]	; (8000a68 <ESPRxDecoder+0x4f4>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d103      	bne.n	800087e <ESPRxDecoder+0x30a>
			 {
			 	Err_bufferptr=1;
 8000876:	4b7c      	ldr	r3, [pc, #496]	; (8000a68 <ESPRxDecoder+0x4f4>)
 8000878:	2201      	movs	r2, #1
 800087a:	701a      	strb	r2, [r3, #0]
 800087c:	e040      	b.n	8000900 <ESPRxDecoder+0x38c>
			 }
			 else if((Rxwifi_data=='o')&&(Err_bufferptr==1))
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	2b6f      	cmp	r3, #111	; 0x6f
 8000882:	d107      	bne.n	8000894 <ESPRxDecoder+0x320>
 8000884:	4b78      	ldr	r3, [pc, #480]	; (8000a68 <ESPRxDecoder+0x4f4>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d103      	bne.n	8000894 <ESPRxDecoder+0x320>
			 {
			 	Err_bufferptr=2;
 800088c:	4b76      	ldr	r3, [pc, #472]	; (8000a68 <ESPRxDecoder+0x4f4>)
 800088e:	2202      	movs	r2, #2
 8000890:	701a      	strb	r2, [r3, #0]
 8000892:	e035      	b.n	8000900 <ESPRxDecoder+0x38c>
			 }
			 else if((Rxwifi_data=='A')&&(Err_bufferptr==2))
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	2b41      	cmp	r3, #65	; 0x41
 8000898:	d107      	bne.n	80008aa <ESPRxDecoder+0x336>
 800089a:	4b73      	ldr	r3, [pc, #460]	; (8000a68 <ESPRxDecoder+0x4f4>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b02      	cmp	r3, #2
 80008a0:	d103      	bne.n	80008aa <ESPRxDecoder+0x336>
			 {
			 	Err_bufferptr=3;
 80008a2:	4b71      	ldr	r3, [pc, #452]	; (8000a68 <ESPRxDecoder+0x4f4>)
 80008a4:	2203      	movs	r2, #3
 80008a6:	701a      	strb	r2, [r3, #0]
 80008a8:	e02a      	b.n	8000900 <ESPRxDecoder+0x38c>
			 }
			 else if((Rxwifi_data=='P')&&(Err_bufferptr==3))
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2b50      	cmp	r3, #80	; 0x50
 80008ae:	f041 815f 	bne.w	8001b70 <ESPRxDecoder+0x15fc>
 80008b2:	4b6d      	ldr	r3, [pc, #436]	; (8000a68 <ESPRxDecoder+0x4f4>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b03      	cmp	r3, #3
 80008b8:	f041 815a 	bne.w	8001b70 <ESPRxDecoder+0x15fc>
			 {
			 	Err_bufferptr=0;
 80008bc:	4b6a      	ldr	r3, [pc, #424]	; (8000a68 <ESPRxDecoder+0x4f4>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
				bufferptr=0;
 80008c2:	4b68      	ldr	r3, [pc, #416]	; (8000a64 <ESPRxDecoder+0x4f0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	71bb      	strb	r3, [r7, #6]
				WifiDisplay = 3;
 80008cc:	4b69      	ldr	r3, [pc, #420]	; (8000a74 <ESPRxDecoder+0x500>)
 80008ce:	2203      	movs	r2, #3
 80008d0:	701a      	strb	r2, [r3, #0]
				if(++Error_Retry<3)		//retry for error
 80008d2:	4b67      	ldr	r3, [pc, #412]	; (8000a70 <ESPRxDecoder+0x4fc>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	3301      	adds	r3, #1
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	4b65      	ldr	r3, [pc, #404]	; (8000a70 <ESPRxDecoder+0x4fc>)
 80008dc:	701a      	strb	r2, [r3, #0]
 80008de:	4b64      	ldr	r3, [pc, #400]	; (8000a70 <ESPRxDecoder+0x4fc>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d804      	bhi.n	80008f0 <ESPRxDecoder+0x37c>
				{
				   wifi_command=50;
 80008e6:	4b61      	ldr	r3, [pc, #388]	; (8000a6c <ESPRxDecoder+0x4f8>)
 80008e8:	2232      	movs	r2, #50	; 0x32
 80008ea:	701a      	strb	r2, [r3, #0]
				{
				   wifi_command=10;
				   Error_Retry=0;
				}
			 }
		break;
 80008ec:	f001 b940 	b.w	8001b70 <ESPRxDecoder+0x15fc>
				   wifi_command=10;
 80008f0:	4b5e      	ldr	r3, [pc, #376]	; (8000a6c <ESPRxDecoder+0x4f8>)
 80008f2:	220a      	movs	r2, #10
 80008f4:	701a      	strb	r2, [r3, #0]
				   Error_Retry=0;
 80008f6:	4b5e      	ldr	r3, [pc, #376]	; (8000a70 <ESPRxDecoder+0x4fc>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
		break;
 80008fc:	f001 b938 	b.w	8001b70 <ESPRxDecoder+0x15fc>
 8000900:	f001 b936 	b.w	8001b70 <ESPRxDecoder+0x15fc>
		case 4:	   //retry need to be added
			 if((Rxwifi_data=='O')&&(bufferptr==0))
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	2b4f      	cmp	r3, #79	; 0x4f
 8000908:	d108      	bne.n	800091c <ESPRxDecoder+0x3a8>
 800090a:	4b56      	ldr	r3, [pc, #344]	; (8000a64 <ESPRxDecoder+0x4f0>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d104      	bne.n	800091c <ESPRxDecoder+0x3a8>
			 {
			 	bufferptr=1;
 8000912:	4b54      	ldr	r3, [pc, #336]	; (8000a64 <ESPRxDecoder+0x4f0>)
 8000914:	2201      	movs	r2, #1
 8000916:	701a      	strb	r2, [r3, #0]
			 {
			 	bufferptr=0;
				Rxseqdecoder=0;
				wifi_command=80;
			 }
		break;
 8000918:	f001 b92c 	b.w	8001b74 <ESPRxDecoder+0x1600>
			 else if((Rxwifi_data=='K')&&(bufferptr==1))
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	2b4b      	cmp	r3, #75	; 0x4b
 8000920:	f041 8128 	bne.w	8001b74 <ESPRxDecoder+0x1600>
 8000924:	4b4f      	ldr	r3, [pc, #316]	; (8000a64 <ESPRxDecoder+0x4f0>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b01      	cmp	r3, #1
 800092a:	f041 8123 	bne.w	8001b74 <ESPRxDecoder+0x1600>
			 	bufferptr=0;
 800092e:	4b4d      	ldr	r3, [pc, #308]	; (8000a64 <ESPRxDecoder+0x4f0>)
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000934:	2300      	movs	r3, #0
 8000936:	71bb      	strb	r3, [r7, #6]
				wifi_command=80;
 8000938:	4b4c      	ldr	r3, [pc, #304]	; (8000a6c <ESPRxDecoder+0x4f8>)
 800093a:	2250      	movs	r2, #80	; 0x50
 800093c:	701a      	strb	r2, [r3, #0]
		break;
 800093e:	f001 b919 	b.w	8001b74 <ESPRxDecoder+0x1600>
		case 5:

			if((Rxwifi_data=='C')&&(bufferptr==0))
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	2b43      	cmp	r3, #67	; 0x43
 8000946:	d107      	bne.n	8000958 <ESPRxDecoder+0x3e4>
 8000948:	4b46      	ldr	r3, [pc, #280]	; (8000a64 <ESPRxDecoder+0x4f0>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d103      	bne.n	8000958 <ESPRxDecoder+0x3e4>
			 {
			 	bufferptr=1;
 8000950:	4b44      	ldr	r3, [pc, #272]	; (8000a64 <ESPRxDecoder+0x4f0>)
 8000952:	2201      	movs	r2, #1
 8000954:	701a      	strb	r2, [r3, #0]
 8000956:	e04e      	b.n	80009f6 <ESPRxDecoder+0x482>
			 }
			 else if((Rxwifi_data=='O')&&(bufferptr==1))
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	2b4f      	cmp	r3, #79	; 0x4f
 800095c:	d107      	bne.n	800096e <ESPRxDecoder+0x3fa>
 800095e:	4b41      	ldr	r3, [pc, #260]	; (8000a64 <ESPRxDecoder+0x4f0>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d103      	bne.n	800096e <ESPRxDecoder+0x3fa>
			 {
			 	bufferptr=2;
 8000966:	4b3f      	ldr	r3, [pc, #252]	; (8000a64 <ESPRxDecoder+0x4f0>)
 8000968:	2202      	movs	r2, #2
 800096a:	701a      	strb	r2, [r3, #0]
 800096c:	e043      	b.n	80009f6 <ESPRxDecoder+0x482>
			 }
			 else if((Rxwifi_data=='N')&&(bufferptr==2))
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	2b4e      	cmp	r3, #78	; 0x4e
 8000972:	d107      	bne.n	8000984 <ESPRxDecoder+0x410>
 8000974:	4b3b      	ldr	r3, [pc, #236]	; (8000a64 <ESPRxDecoder+0x4f0>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b02      	cmp	r3, #2
 800097a:	d103      	bne.n	8000984 <ESPRxDecoder+0x410>
			 {
			 	bufferptr=3;
 800097c:	4b39      	ldr	r3, [pc, #228]	; (8000a64 <ESPRxDecoder+0x4f0>)
 800097e:	2203      	movs	r2, #3
 8000980:	701a      	strb	r2, [r3, #0]
 8000982:	e038      	b.n	80009f6 <ESPRxDecoder+0x482>
			 }
			 else if((Rxwifi_data=='N')&&(bufferptr==3))
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	2b4e      	cmp	r3, #78	; 0x4e
 8000988:	d107      	bne.n	800099a <ESPRxDecoder+0x426>
 800098a:	4b36      	ldr	r3, [pc, #216]	; (8000a64 <ESPRxDecoder+0x4f0>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b03      	cmp	r3, #3
 8000990:	d103      	bne.n	800099a <ESPRxDecoder+0x426>
			 {
			 	bufferptr=4;
 8000992:	4b34      	ldr	r3, [pc, #208]	; (8000a64 <ESPRxDecoder+0x4f0>)
 8000994:	2204      	movs	r2, #4
 8000996:	701a      	strb	r2, [r3, #0]
 8000998:	e02d      	b.n	80009f6 <ESPRxDecoder+0x482>
			 }
			 else if((Rxwifi_data=='E')&&(bufferptr==4))
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	2b45      	cmp	r3, #69	; 0x45
 800099e:	d107      	bne.n	80009b0 <ESPRxDecoder+0x43c>
 80009a0:	4b30      	ldr	r3, [pc, #192]	; (8000a64 <ESPRxDecoder+0x4f0>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b04      	cmp	r3, #4
 80009a6:	d103      	bne.n	80009b0 <ESPRxDecoder+0x43c>
			 {
			 	bufferptr=5;
 80009a8:	4b2e      	ldr	r3, [pc, #184]	; (8000a64 <ESPRxDecoder+0x4f0>)
 80009aa:	2205      	movs	r2, #5
 80009ac:	701a      	strb	r2, [r3, #0]
 80009ae:	e022      	b.n	80009f6 <ESPRxDecoder+0x482>
			 }
			 else if((Rxwifi_data=='C')&&(bufferptr==5))
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	2b43      	cmp	r3, #67	; 0x43
 80009b4:	d107      	bne.n	80009c6 <ESPRxDecoder+0x452>
 80009b6:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <ESPRxDecoder+0x4f0>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b05      	cmp	r3, #5
 80009bc:	d103      	bne.n	80009c6 <ESPRxDecoder+0x452>
			 {
			 	bufferptr=6;
 80009be:	4b29      	ldr	r3, [pc, #164]	; (8000a64 <ESPRxDecoder+0x4f0>)
 80009c0:	2206      	movs	r2, #6
 80009c2:	701a      	strb	r2, [r3, #0]
 80009c4:	e017      	b.n	80009f6 <ESPRxDecoder+0x482>
			 }
			 else if((Rxwifi_data=='T')&&(bufferptr==6))
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	2b54      	cmp	r3, #84	; 0x54
 80009ca:	d114      	bne.n	80009f6 <ESPRxDecoder+0x482>
 80009cc:	4b25      	ldr	r3, [pc, #148]	; (8000a64 <ESPRxDecoder+0x4f0>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b06      	cmp	r3, #6
 80009d2:	d110      	bne.n	80009f6 <ESPRxDecoder+0x482>
			 {
			 	Rxseqdecoder=0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	71bb      	strb	r3, [r7, #6]
				wifi_command=90;
 80009d8:	4b24      	ldr	r3, [pc, #144]	; (8000a6c <ESPRxDecoder+0x4f8>)
 80009da:	225a      	movs	r2, #90	; 0x5a
 80009dc:	701a      	strb	r2, [r3, #0]
				bufferptr=0;
 80009de:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <ESPRxDecoder+0x4f0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
				Error_Retry=0;
 80009e4:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <ESPRxDecoder+0x4fc>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
				Err_bufferptr=0; //wifi connected
 80009ea:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <ESPRxDecoder+0x4f4>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]
			   WifiDisplay = 2;
 80009f0:	4b20      	ldr	r3, [pc, #128]	; (8000a74 <ESPRxDecoder+0x500>)
 80009f2:	2202      	movs	r2, #2
 80009f4:	701a      	strb	r2, [r3, #0]
			 }
			 	if((Rxwifi_data=='L')&&(bufferptr==0))	  //linked
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	2b4c      	cmp	r3, #76	; 0x4c
 80009fa:	d107      	bne.n	8000a0c <ESPRxDecoder+0x498>
 80009fc:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <ESPRxDecoder+0x4f0>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d103      	bne.n	8000a0c <ESPRxDecoder+0x498>
			 {
			 	bufferptr=1;
 8000a04:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <ESPRxDecoder+0x4f0>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	701a      	strb	r2, [r3, #0]
 8000a0a:	e04a      	b.n	8000aa2 <ESPRxDecoder+0x52e>
			 }
			 else if((Rxwifi_data=='i')&&(bufferptr==1))
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	2b69      	cmp	r3, #105	; 0x69
 8000a10:	d107      	bne.n	8000a22 <ESPRxDecoder+0x4ae>
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <ESPRxDecoder+0x4f0>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d103      	bne.n	8000a22 <ESPRxDecoder+0x4ae>
			 {
			 	bufferptr=2;
 8000a1a:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <ESPRxDecoder+0x4f0>)
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	701a      	strb	r2, [r3, #0]
 8000a20:	e03f      	b.n	8000aa2 <ESPRxDecoder+0x52e>
			 }
			 else if((Rxwifi_data=='n')&&(bufferptr==2))
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	2b6e      	cmp	r3, #110	; 0x6e
 8000a26:	d107      	bne.n	8000a38 <ESPRxDecoder+0x4c4>
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <ESPRxDecoder+0x4f0>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b02      	cmp	r3, #2
 8000a2e:	d103      	bne.n	8000a38 <ESPRxDecoder+0x4c4>
			 {
			 	bufferptr=3;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <ESPRxDecoder+0x4f0>)
 8000a32:	2203      	movs	r2, #3
 8000a34:	701a      	strb	r2, [r3, #0]
 8000a36:	e034      	b.n	8000aa2 <ESPRxDecoder+0x52e>
			 }
			 else if((Rxwifi_data=='k')&&(bufferptr==3))
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	2b6b      	cmp	r3, #107	; 0x6b
 8000a3c:	d107      	bne.n	8000a4e <ESPRxDecoder+0x4da>
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <ESPRxDecoder+0x4f0>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b03      	cmp	r3, #3
 8000a44:	d103      	bne.n	8000a4e <ESPRxDecoder+0x4da>
			 {
			 	bufferptr=4;
 8000a46:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <ESPRxDecoder+0x4f0>)
 8000a48:	2204      	movs	r2, #4
 8000a4a:	701a      	strb	r2, [r3, #0]
 8000a4c:	e029      	b.n	8000aa2 <ESPRxDecoder+0x52e>
			 }
			 else if((Rxwifi_data=='e')&&(bufferptr==4))
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	2b65      	cmp	r3, #101	; 0x65
 8000a52:	d111      	bne.n	8000a78 <ESPRxDecoder+0x504>
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <ESPRxDecoder+0x4f0>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b04      	cmp	r3, #4
 8000a5a:	d10d      	bne.n	8000a78 <ESPRxDecoder+0x504>
			 {
			 	bufferptr=5;
 8000a5c:	4b01      	ldr	r3, [pc, #4]	; (8000a64 <ESPRxDecoder+0x4f0>)
 8000a5e:	2205      	movs	r2, #5
 8000a60:	701a      	strb	r2, [r3, #0]
 8000a62:	e01e      	b.n	8000aa2 <ESPRxDecoder+0x52e>
 8000a64:	20000796 	.word	0x20000796
 8000a68:	200000d3 	.word	0x200000d3
 8000a6c:	20000698 	.word	0x20000698
 8000a70:	200000f4 	.word	0x200000f4
 8000a74:	200000d4 	.word	0x200000d4
			 }
			 else if((Rxwifi_data=='d')&&(bufferptr==5))
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	2b64      	cmp	r3, #100	; 0x64
 8000a7c:	d111      	bne.n	8000aa2 <ESPRxDecoder+0x52e>
 8000a7e:	4ba5      	ldr	r3, [pc, #660]	; (8000d14 <ESPRxDecoder+0x7a0>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b05      	cmp	r3, #5
 8000a84:	d10d      	bne.n	8000aa2 <ESPRxDecoder+0x52e>
			 {
			 	Rxseqdecoder=0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	71bb      	strb	r3, [r7, #6]
				wifi_command=90;
 8000a8a:	4ba3      	ldr	r3, [pc, #652]	; (8000d18 <ESPRxDecoder+0x7a4>)
 8000a8c:	225a      	movs	r2, #90	; 0x5a
 8000a8e:	701a      	strb	r2, [r3, #0]
				bufferptr=0;
 8000a90:	4ba0      	ldr	r3, [pc, #640]	; (8000d14 <ESPRxDecoder+0x7a0>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	701a      	strb	r2, [r3, #0]
				Error_Retry=0;
 8000a96:	4ba1      	ldr	r3, [pc, #644]	; (8000d1c <ESPRxDecoder+0x7a8>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]
				Err_bufferptr=0;
 8000a9c:	4ba0      	ldr	r3, [pc, #640]	; (8000d20 <ESPRxDecoder+0x7ac>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
			 }
			 if((Rxwifi_data=='E')&&(Err_bufferptr==0))
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	2b45      	cmp	r3, #69	; 0x45
 8000aa6:	d107      	bne.n	8000ab8 <ESPRxDecoder+0x544>
 8000aa8:	4b9d      	ldr	r3, [pc, #628]	; (8000d20 <ESPRxDecoder+0x7ac>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d103      	bne.n	8000ab8 <ESPRxDecoder+0x544>
			 {
			 	Err_bufferptr=1;
 8000ab0:	4b9b      	ldr	r3, [pc, #620]	; (8000d20 <ESPRxDecoder+0x7ac>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	701a      	strb	r2, [r3, #0]
 8000ab6:	e04b      	b.n	8000b50 <ESPRxDecoder+0x5dc>
			 }
			 else if((Rxwifi_data=='R')&&(Err_bufferptr==1))
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	2b52      	cmp	r3, #82	; 0x52
 8000abc:	d107      	bne.n	8000ace <ESPRxDecoder+0x55a>
 8000abe:	4b98      	ldr	r3, [pc, #608]	; (8000d20 <ESPRxDecoder+0x7ac>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d103      	bne.n	8000ace <ESPRxDecoder+0x55a>
			 {
			 	Err_bufferptr=2;
 8000ac6:	4b96      	ldr	r3, [pc, #600]	; (8000d20 <ESPRxDecoder+0x7ac>)
 8000ac8:	2202      	movs	r2, #2
 8000aca:	701a      	strb	r2, [r3, #0]
 8000acc:	e040      	b.n	8000b50 <ESPRxDecoder+0x5dc>
			 }
			 else if((Rxwifi_data=='R')&&(Err_bufferptr==2))
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	2b52      	cmp	r3, #82	; 0x52
 8000ad2:	d107      	bne.n	8000ae4 <ESPRxDecoder+0x570>
 8000ad4:	4b92      	ldr	r3, [pc, #584]	; (8000d20 <ESPRxDecoder+0x7ac>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d103      	bne.n	8000ae4 <ESPRxDecoder+0x570>
			 {
			 	Err_bufferptr=3;
 8000adc:	4b90      	ldr	r3, [pc, #576]	; (8000d20 <ESPRxDecoder+0x7ac>)
 8000ade:	2203      	movs	r2, #3
 8000ae0:	701a      	strb	r2, [r3, #0]
 8000ae2:	e035      	b.n	8000b50 <ESPRxDecoder+0x5dc>
			 }
			 else if((Rxwifi_data=='O')&&(Err_bufferptr==3))
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	2b4f      	cmp	r3, #79	; 0x4f
 8000ae8:	d107      	bne.n	8000afa <ESPRxDecoder+0x586>
 8000aea:	4b8d      	ldr	r3, [pc, #564]	; (8000d20 <ESPRxDecoder+0x7ac>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b03      	cmp	r3, #3
 8000af0:	d103      	bne.n	8000afa <ESPRxDecoder+0x586>
			 {
			 	Err_bufferptr=4;
 8000af2:	4b8b      	ldr	r3, [pc, #556]	; (8000d20 <ESPRxDecoder+0x7ac>)
 8000af4:	2204      	movs	r2, #4
 8000af6:	701a      	strb	r2, [r3, #0]
 8000af8:	e02a      	b.n	8000b50 <ESPRxDecoder+0x5dc>
			 }
			 else if((Rxwifi_data=='R')&&(Err_bufferptr==4))
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	2b52      	cmp	r3, #82	; 0x52
 8000afe:	f041 803b 	bne.w	8001b78 <ESPRxDecoder+0x1604>
 8000b02:	4b87      	ldr	r3, [pc, #540]	; (8000d20 <ESPRxDecoder+0x7ac>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b04      	cmp	r3, #4
 8000b08:	f041 8036 	bne.w	8001b78 <ESPRxDecoder+0x1604>
			 {
			   	Err_bufferptr=0;
 8000b0c:	4b84      	ldr	r3, [pc, #528]	; (8000d20 <ESPRxDecoder+0x7ac>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	701a      	strb	r2, [r3, #0]
				bufferptr=0;
 8000b12:	4b80      	ldr	r3, [pc, #512]	; (8000d14 <ESPRxDecoder+0x7a0>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	71bb      	strb	r3, [r7, #6]
				WifiDisplay = 4;
 8000b1c:	4b81      	ldr	r3, [pc, #516]	; (8000d24 <ESPRxDecoder+0x7b0>)
 8000b1e:	2204      	movs	r2, #4
 8000b20:	701a      	strb	r2, [r3, #0]
				if(++Error_Retry<3)		//retry for error
 8000b22:	4b7e      	ldr	r3, [pc, #504]	; (8000d1c <ESPRxDecoder+0x7a8>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	3301      	adds	r3, #1
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4b7c      	ldr	r3, [pc, #496]	; (8000d1c <ESPRxDecoder+0x7a8>)
 8000b2c:	701a      	strb	r2, [r3, #0]
 8000b2e:	4b7b      	ldr	r3, [pc, #492]	; (8000d1c <ESPRxDecoder+0x7a8>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b02      	cmp	r3, #2
 8000b34:	d804      	bhi.n	8000b40 <ESPRxDecoder+0x5cc>
				{
				   wifi_command=80;
 8000b36:	4b78      	ldr	r3, [pc, #480]	; (8000d18 <ESPRxDecoder+0x7a4>)
 8000b38:	2250      	movs	r2, #80	; 0x50
 8000b3a:	701a      	strb	r2, [r3, #0]
				{
				   wifi_command=50;	 // modified by satheesh
				   Error_Retry=0;
				}
			 }
		break;
 8000b3c:	f001 b81c 	b.w	8001b78 <ESPRxDecoder+0x1604>
				   wifi_command=50;	 // modified by satheesh
 8000b40:	4b75      	ldr	r3, [pc, #468]	; (8000d18 <ESPRxDecoder+0x7a4>)
 8000b42:	2232      	movs	r2, #50	; 0x32
 8000b44:	701a      	strb	r2, [r3, #0]
				   Error_Retry=0;
 8000b46:	4b75      	ldr	r3, [pc, #468]	; (8000d1c <ESPRxDecoder+0x7a8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]
		break;
 8000b4c:	f001 b814 	b.w	8001b78 <ESPRxDecoder+0x1604>
 8000b50:	f001 b812 	b.w	8001b78 <ESPRxDecoder+0x1604>
		case 6:
			 if((Rxwifi_data=='>')&&(bufferptr==0))
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	2b3e      	cmp	r3, #62	; 0x3e
 8000b58:	f041 8010 	bne.w	8001b7c <ESPRxDecoder+0x1608>
 8000b5c:	4b6d      	ldr	r3, [pc, #436]	; (8000d14 <ESPRxDecoder+0x7a0>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	f041 800b 	bne.w	8001b7c <ESPRxDecoder+0x1608>
			 {
			 	bufferptr=0;
 8000b66:	4b6b      	ldr	r3, [pc, #428]	; (8000d14 <ESPRxDecoder+0x7a0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	71bb      	strb	r3, [r7, #6]
				refinc=0;
 8000b70:	4b6d      	ldr	r3, [pc, #436]	; (8000d28 <ESPRxDecoder+0x7b4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	701a      	strb	r2, [r3, #0]
				wifi_command=100;
 8000b76:	4b68      	ldr	r3, [pc, #416]	; (8000d18 <ESPRxDecoder+0x7a4>)
 8000b78:	2264      	movs	r2, #100	; 0x64
 8000b7a:	701a      	strb	r2, [r3, #0]
			 }
		break;
 8000b7c:	f000 bffe 	b.w	8001b7c <ESPRxDecoder+0x1608>
		case 7:
			checkbuff[refinc]= Rxwifi_data;
 8000b80:	4b69      	ldr	r3, [pc, #420]	; (8000d28 <ESPRxDecoder+0x7b4>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	4619      	mov	r1, r3
 8000b86:	4a69      	ldr	r2, [pc, #420]	; (8000d2c <ESPRxDecoder+0x7b8>)
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	5453      	strb	r3, [r2, r1]
			refinc++;
 8000b8c:	4b66      	ldr	r3, [pc, #408]	; (8000d28 <ESPRxDecoder+0x7b4>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	3301      	adds	r3, #1
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	4b64      	ldr	r3, [pc, #400]	; (8000d28 <ESPRxDecoder+0x7b4>)
 8000b96:	701a      	strb	r2, [r3, #0]
			if((Rxwifi_data=='$')&&(Data_bufferptr==0))
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	2b24      	cmp	r3, #36	; 0x24
 8000b9c:	d10b      	bne.n	8000bb6 <ESPRxDecoder+0x642>
 8000b9e:	4b64      	ldr	r3, [pc, #400]	; (8000d30 <ESPRxDecoder+0x7bc>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d107      	bne.n	8000bb6 <ESPRxDecoder+0x642>
			 {
				Data_bufferptr=1;
 8000ba6:	4b62      	ldr	r3, [pc, #392]	; (8000d30 <ESPRxDecoder+0x7bc>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	701a      	strb	r2, [r3, #0]
				Valid_DataWifi1= 1;
 8000bac:	4b61      	ldr	r3, [pc, #388]	; (8000d34 <ESPRxDecoder+0x7c0>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	701a      	strb	r2, [r3, #0]
 8000bb2:	f000 be60 	b.w	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==1)	 //unit id
 8000bb6:	4b5e      	ldr	r3, [pc, #376]	; (8000d30 <ESPRxDecoder+0x7bc>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d10c      	bne.n	8000bd8 <ESPRxDecoder+0x664>
			 {
				 Uart_rx_buffer[0] = DecToASCIIFun(Rxwifi_data); Data_bufferptr=2;
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f000 ffed 	bl	8001ba0 <DecToASCIIFun>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4b5b      	ldr	r3, [pc, #364]	; (8000d38 <ESPRxDecoder+0x7c4>)
 8000bcc:	701a      	strb	r2, [r3, #0]
 8000bce:	4b58      	ldr	r3, [pc, #352]	; (8000d30 <ESPRxDecoder+0x7bc>)
 8000bd0:	2202      	movs	r2, #2
 8000bd2:	701a      	strb	r2, [r3, #0]
 8000bd4:	f000 be4f 	b.w	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==2)
 8000bd8:	4b55      	ldr	r3, [pc, #340]	; (8000d30 <ESPRxDecoder+0x7bc>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	d119      	bne.n	8000c14 <ESPRxDecoder+0x6a0>
			 {
				 Uart_rx_buffer[1] = DecToASCIIFun(Rxwifi_data);
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 ffdc 	bl	8001ba0 <DecToASCIIFun>
 8000be8:	4603      	mov	r3, r0
 8000bea:	461a      	mov	r2, r3
 8000bec:	4b52      	ldr	r3, [pc, #328]	; (8000d38 <ESPRxDecoder+0x7c4>)
 8000bee:	705a      	strb	r2, [r3, #1]
				 UnitId_Http = Uart_rx_buffer[1]+Uart_rx_buffer[0]*10;
 8000bf0:	4b51      	ldr	r3, [pc, #324]	; (8000d38 <ESPRxDecoder+0x7c4>)
 8000bf2:	785a      	ldrb	r2, [r3, #1]
 8000bf4:	4b50      	ldr	r3, [pc, #320]	; (8000d38 <ESPRxDecoder+0x7c4>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	0089      	lsls	r1, r1, #2
 8000bfc:	440b      	add	r3, r1
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	4413      	add	r3, r2
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	4b4d      	ldr	r3, [pc, #308]	; (8000d3c <ESPRxDecoder+0x7c8>)
 8000c08:	701a      	strb	r2, [r3, #0]
				 Data_bufferptr=3;
 8000c0a:	4b49      	ldr	r3, [pc, #292]	; (8000d30 <ESPRxDecoder+0x7bc>)
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	701a      	strb	r2, [r3, #0]
 8000c10:	f000 be31 	b.w	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==3)	 //,
 8000c14:	4b46      	ldr	r3, [pc, #280]	; (8000d30 <ESPRxDecoder+0x7bc>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b03      	cmp	r3, #3
 8000c1a:	d104      	bne.n	8000c26 <ESPRxDecoder+0x6b2>
			 {
				 Data_bufferptr=4;
 8000c1c:	4b44      	ldr	r3, [pc, #272]	; (8000d30 <ESPRxDecoder+0x7bc>)
 8000c1e:	2204      	movs	r2, #4
 8000c20:	701a      	strb	r2, [r3, #0]
 8000c22:	f000 be28 	b.w	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==4)	 //process id
 8000c26:	4b42      	ldr	r3, [pc, #264]	; (8000d30 <ESPRxDecoder+0x7bc>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	d10c      	bne.n	8000c48 <ESPRxDecoder+0x6d4>
			 {
				 Data_bufferptr=5;
 8000c2e:	4b40      	ldr	r3, [pc, #256]	; (8000d30 <ESPRxDecoder+0x7bc>)
 8000c30:	2205      	movs	r2, #5
 8000c32:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[2] = DecToASCIIFun(Rxwifi_data);
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 ffb2 	bl	8001ba0 <DecToASCIIFun>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	461a      	mov	r2, r3
 8000c40:	4b3d      	ldr	r3, [pc, #244]	; (8000d38 <ESPRxDecoder+0x7c4>)
 8000c42:	709a      	strb	r2, [r3, #2]
 8000c44:	f000 be17 	b.w	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==5)
 8000c48:	4b39      	ldr	r3, [pc, #228]	; (8000d30 <ESPRxDecoder+0x7bc>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b05      	cmp	r3, #5
 8000c4e:	d10c      	bne.n	8000c6a <ESPRxDecoder+0x6f6>
			 {
				 Data_bufferptr=6;
 8000c50:	4b37      	ldr	r3, [pc, #220]	; (8000d30 <ESPRxDecoder+0x7bc>)
 8000c52:	2206      	movs	r2, #6
 8000c54:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[3] = DecToASCIIFun(Rxwifi_data);
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 ffa1 	bl	8001ba0 <DecToASCIIFun>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b35      	ldr	r3, [pc, #212]	; (8000d38 <ESPRxDecoder+0x7c4>)
 8000c64:	70da      	strb	r2, [r3, #3]
 8000c66:	f000 be06 	b.w	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==6)
 8000c6a:	4b31      	ldr	r3, [pc, #196]	; (8000d30 <ESPRxDecoder+0x7bc>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b06      	cmp	r3, #6
 8000c70:	d10c      	bne.n	8000c8c <ESPRxDecoder+0x718>
			 {
				 Data_bufferptr=7;
 8000c72:	4b2f      	ldr	r3, [pc, #188]	; (8000d30 <ESPRxDecoder+0x7bc>)
 8000c74:	2207      	movs	r2, #7
 8000c76:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[4] = DecToASCIIFun(Rxwifi_data);
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 ff90 	bl	8001ba0 <DecToASCIIFun>
 8000c80:	4603      	mov	r3, r0
 8000c82:	461a      	mov	r2, r3
 8000c84:	4b2c      	ldr	r3, [pc, #176]	; (8000d38 <ESPRxDecoder+0x7c4>)
 8000c86:	711a      	strb	r2, [r3, #4]
 8000c88:	f000 bdf5 	b.w	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==7)
 8000c8c:	4b28      	ldr	r3, [pc, #160]	; (8000d30 <ESPRxDecoder+0x7bc>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b07      	cmp	r3, #7
 8000c92:	d10c      	bne.n	8000cae <ESPRxDecoder+0x73a>
			 {
				 Data_bufferptr=8;
 8000c94:	4b26      	ldr	r3, [pc, #152]	; (8000d30 <ESPRxDecoder+0x7bc>)
 8000c96:	2208      	movs	r2, #8
 8000c98:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[5] = DecToASCIIFun(Rxwifi_data);
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f000 ff7f 	bl	8001ba0 <DecToASCIIFun>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b24      	ldr	r3, [pc, #144]	; (8000d38 <ESPRxDecoder+0x7c4>)
 8000ca8:	715a      	strb	r2, [r3, #5]
 8000caa:	f000 bde4 	b.w	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==8)
 8000cae:	4b20      	ldr	r3, [pc, #128]	; (8000d30 <ESPRxDecoder+0x7bc>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b08      	cmp	r3, #8
 8000cb4:	d10c      	bne.n	8000cd0 <ESPRxDecoder+0x75c>
			 {
				 Data_bufferptr=9;
 8000cb6:	4b1e      	ldr	r3, [pc, #120]	; (8000d30 <ESPRxDecoder+0x7bc>)
 8000cb8:	2209      	movs	r2, #9
 8000cba:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[6] = DecToASCIIFun(Rxwifi_data);
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 ff6e 	bl	8001ba0 <DecToASCIIFun>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <ESPRxDecoder+0x7c4>)
 8000cca:	719a      	strb	r2, [r3, #6]
 8000ccc:	f000 bdd3 	b.w	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==9)
 8000cd0:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <ESPRxDecoder+0x7bc>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b09      	cmp	r3, #9
 8000cd6:	d10c      	bne.n	8000cf2 <ESPRxDecoder+0x77e>
			 {
				 Data_bufferptr=10;
 8000cd8:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <ESPRxDecoder+0x7bc>)
 8000cda:	220a      	movs	r2, #10
 8000cdc:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[7] = DecToASCIIFun(Rxwifi_data);
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f000 ff5d 	bl	8001ba0 <DecToASCIIFun>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <ESPRxDecoder+0x7c4>)
 8000cec:	71da      	strb	r2, [r3, #7]
 8000cee:	f000 bdc2 	b.w	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==10)
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <ESPRxDecoder+0x7bc>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b0a      	cmp	r3, #10
 8000cf8:	d122      	bne.n	8000d40 <ESPRxDecoder+0x7cc>
			 {
				 Data_bufferptr=11;
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <ESPRxDecoder+0x7bc>)
 8000cfc:	220b      	movs	r2, #11
 8000cfe:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[8] = DecToASCIIFun(Rxwifi_data);
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 ff4c 	bl	8001ba0 <DecToASCIIFun>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <ESPRxDecoder+0x7c4>)
 8000d0e:	721a      	strb	r2, [r3, #8]
 8000d10:	f000 bdb1 	b.w	8001876 <ESPRxDecoder+0x1302>
 8000d14:	20000796 	.word	0x20000796
 8000d18:	20000698 	.word	0x20000698
 8000d1c:	200000f4 	.word	0x200000f4
 8000d20:	200000d3 	.word	0x200000d3
 8000d24:	200000d4 	.word	0x200000d4
 8000d28:	20000240 	.word	0x20000240
 8000d2c:	20000114 	.word	0x20000114
 8000d30:	200000d2 	.word	0x200000d2
 8000d34:	200000d8 	.word	0x200000d8
 8000d38:	2000008c 	.word	0x2000008c
 8000d3c:	200000d9 	.word	0x200000d9
			 }
			 else if(Data_bufferptr==11)
 8000d40:	4b9c      	ldr	r3, [pc, #624]	; (8000fb4 <ESPRxDecoder+0xa40>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b0b      	cmp	r3, #11
 8000d46:	d10c      	bne.n	8000d62 <ESPRxDecoder+0x7ee>
			 {
				 Data_bufferptr=12;
 8000d48:	4b9a      	ldr	r3, [pc, #616]	; (8000fb4 <ESPRxDecoder+0xa40>)
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[9] = DecToASCIIFun(Rxwifi_data);
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 ff25 	bl	8001ba0 <DecToASCIIFun>
 8000d56:	4603      	mov	r3, r0
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b97      	ldr	r3, [pc, #604]	; (8000fb8 <ESPRxDecoder+0xa44>)
 8000d5c:	725a      	strb	r2, [r3, #9]
 8000d5e:	f000 bd8a 	b.w	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==12)
 8000d62:	4b94      	ldr	r3, [pc, #592]	; (8000fb4 <ESPRxDecoder+0xa40>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b0c      	cmp	r3, #12
 8000d68:	d10c      	bne.n	8000d84 <ESPRxDecoder+0x810>
			 {
				 Data_bufferptr=13;
 8000d6a:	4b92      	ldr	r3, [pc, #584]	; (8000fb4 <ESPRxDecoder+0xa40>)
 8000d6c:	220d      	movs	r2, #13
 8000d6e:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[10] = DecToASCIIFun(Rxwifi_data);
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 ff14 	bl	8001ba0 <DecToASCIIFun>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	4b8e      	ldr	r3, [pc, #568]	; (8000fb8 <ESPRxDecoder+0xa44>)
 8000d7e:	729a      	strb	r2, [r3, #10]
 8000d80:	f000 bd79 	b.w	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==13)
 8000d84:	4b8b      	ldr	r3, [pc, #556]	; (8000fb4 <ESPRxDecoder+0xa40>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b0d      	cmp	r3, #13
 8000d8a:	d160      	bne.n	8000e4e <ESPRxDecoder+0x8da>
			 {
				 Data_bufferptr=14;
 8000d8c:	4b89      	ldr	r3, [pc, #548]	; (8000fb4 <ESPRxDecoder+0xa40>)
 8000d8e:	220e      	movs	r2, #14
 8000d90:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[11] = DecToASCIIFun(Rxwifi_data);
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 ff03 	bl	8001ba0 <DecToASCIIFun>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b86      	ldr	r3, [pc, #536]	; (8000fb8 <ESPRxDecoder+0xa44>)
 8000da0:	72da      	strb	r2, [r3, #11]
				 ProcessId_Http_Msb = Uart_rx_buffer[5]+ (Uart_rx_buffer[4]*10)+(Uart_rx_buffer[3]*100)+(Uart_rx_buffer[2]*1000);
 8000da2:	4b85      	ldr	r3, [pc, #532]	; (8000fb8 <ESPRxDecoder+0xa44>)
 8000da4:	795b      	ldrb	r3, [r3, #5]
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	4b83      	ldr	r3, [pc, #524]	; (8000fb8 <ESPRxDecoder+0xa44>)
 8000daa:	78db      	ldrb	r3, [r3, #3]
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	4619      	mov	r1, r3
 8000db0:	0089      	lsls	r1, r1, #2
 8000db2:	440b      	add	r3, r1
 8000db4:	4619      	mov	r1, r3
 8000db6:	0088      	lsls	r0, r1, #2
 8000db8:	4619      	mov	r1, r3
 8000dba:	4603      	mov	r3, r0
 8000dbc:	440b      	add	r3, r1
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	b299      	uxth	r1, r3
 8000dc2:	4b7d      	ldr	r3, [pc, #500]	; (8000fb8 <ESPRxDecoder+0xa44>)
 8000dc4:	791b      	ldrb	r3, [r3, #4]
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	4618      	mov	r0, r3
 8000dca:	0080      	lsls	r0, r0, #2
 8000dcc:	4403      	add	r3, r0
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	440b      	add	r3, r1
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	4413      	add	r3, r2
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	4b77      	ldr	r3, [pc, #476]	; (8000fb8 <ESPRxDecoder+0xa44>)
 8000ddc:	789b      	ldrb	r3, [r3, #2]
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	4619      	mov	r1, r3
 8000de2:	0149      	lsls	r1, r1, #5
 8000de4:	1ac9      	subs	r1, r1, r3
 8000de6:	0089      	lsls	r1, r1, #2
 8000de8:	440b      	add	r3, r1
 8000dea:	00db      	lsls	r3, r3, #3
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	4413      	add	r3, r2
 8000df0:	b29a      	uxth	r2, r3
 8000df2:	4b72      	ldr	r3, [pc, #456]	; (8000fbc <ESPRxDecoder+0xa48>)
 8000df4:	801a      	strh	r2, [r3, #0]
				 ProcessId_Http_LSB = Uart_rx_buffer[9]+(Uart_rx_buffer[8]*10)+(Uart_rx_buffer[7]*100)+(Uart_rx_buffer[6]*1000);
 8000df6:	4b70      	ldr	r3, [pc, #448]	; (8000fb8 <ESPRxDecoder+0xa44>)
 8000df8:	7a5b      	ldrb	r3, [r3, #9]
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	4b6e      	ldr	r3, [pc, #440]	; (8000fb8 <ESPRxDecoder+0xa44>)
 8000dfe:	79db      	ldrb	r3, [r3, #7]
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	4619      	mov	r1, r3
 8000e04:	0089      	lsls	r1, r1, #2
 8000e06:	440b      	add	r3, r1
 8000e08:	4619      	mov	r1, r3
 8000e0a:	0088      	lsls	r0, r1, #2
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4603      	mov	r3, r0
 8000e10:	440b      	add	r3, r1
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	b299      	uxth	r1, r3
 8000e16:	4b68      	ldr	r3, [pc, #416]	; (8000fb8 <ESPRxDecoder+0xa44>)
 8000e18:	7a1b      	ldrb	r3, [r3, #8]
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	0080      	lsls	r0, r0, #2
 8000e20:	4403      	add	r3, r0
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	440b      	add	r3, r1
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	4413      	add	r3, r2
 8000e2c:	b29a      	uxth	r2, r3
 8000e2e:	4b62      	ldr	r3, [pc, #392]	; (8000fb8 <ESPRxDecoder+0xa44>)
 8000e30:	799b      	ldrb	r3, [r3, #6]
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	4619      	mov	r1, r3
 8000e36:	0149      	lsls	r1, r1, #5
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	0089      	lsls	r1, r1, #2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	4413      	add	r3, r2
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	4b5e      	ldr	r3, [pc, #376]	; (8000fc0 <ESPRxDecoder+0xa4c>)
 8000e48:	801a      	strh	r2, [r3, #0]
 8000e4a:	f000 bd14 	b.w	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==14)	//,
 8000e4e:	4b59      	ldr	r3, [pc, #356]	; (8000fb4 <ESPRxDecoder+0xa40>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b0e      	cmp	r3, #14
 8000e54:	d104      	bne.n	8000e60 <ESPRxDecoder+0x8ec>
			 {
				 Data_bufferptr=15;
 8000e56:	4b57      	ldr	r3, [pc, #348]	; (8000fb4 <ESPRxDecoder+0xa40>)
 8000e58:	220f      	movs	r2, #15
 8000e5a:	701a      	strb	r2, [r3, #0]
 8000e5c:	f000 bd0b 	b.w	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==15)   //Rising_Temperature_High_Http
 8000e60:	4b54      	ldr	r3, [pc, #336]	; (8000fb4 <ESPRxDecoder+0xa40>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b0f      	cmp	r3, #15
 8000e66:	d10c      	bne.n	8000e82 <ESPRxDecoder+0x90e>
			 {
				 Data_bufferptr=16;
 8000e68:	4b52      	ldr	r3, [pc, #328]	; (8000fb4 <ESPRxDecoder+0xa40>)
 8000e6a:	2210      	movs	r2, #16
 8000e6c:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[12] = DecToASCIIFun(Rxwifi_data);
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 fe95 	bl	8001ba0 <DecToASCIIFun>
 8000e76:	4603      	mov	r3, r0
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b4f      	ldr	r3, [pc, #316]	; (8000fb8 <ESPRxDecoder+0xa44>)
 8000e7c:	731a      	strb	r2, [r3, #12]
 8000e7e:	f000 bcfa 	b.w	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==16)
 8000e82:	4b4c      	ldr	r3, [pc, #304]	; (8000fb4 <ESPRxDecoder+0xa40>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b10      	cmp	r3, #16
 8000e88:	d10c      	bne.n	8000ea4 <ESPRxDecoder+0x930>
			 {
				 Data_bufferptr=17;
 8000e8a:	4b4a      	ldr	r3, [pc, #296]	; (8000fb4 <ESPRxDecoder+0xa40>)
 8000e8c:	2211      	movs	r2, #17
 8000e8e:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[13] = DecToASCIIFun(Rxwifi_data);
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 fe84 	bl	8001ba0 <DecToASCIIFun>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	4b46      	ldr	r3, [pc, #280]	; (8000fb8 <ESPRxDecoder+0xa44>)
 8000e9e:	735a      	strb	r2, [r3, #13]
 8000ea0:	f000 bce9 	b.w	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==17)
 8000ea4:	4b43      	ldr	r3, [pc, #268]	; (8000fb4 <ESPRxDecoder+0xa40>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b11      	cmp	r3, #17
 8000eaa:	d10c      	bne.n	8000ec6 <ESPRxDecoder+0x952>
			 {
				 Data_bufferptr=18;
 8000eac:	4b41      	ldr	r3, [pc, #260]	; (8000fb4 <ESPRxDecoder+0xa40>)
 8000eae:	2212      	movs	r2, #18
 8000eb0:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[14] = DecToASCIIFun(Rxwifi_data);
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f000 fe73 	bl	8001ba0 <DecToASCIIFun>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b3e      	ldr	r3, [pc, #248]	; (8000fb8 <ESPRxDecoder+0xa44>)
 8000ec0:	739a      	strb	r2, [r3, #14]
 8000ec2:	f000 bcd8 	b.w	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==18)
 8000ec6:	4b3b      	ldr	r3, [pc, #236]	; (8000fb4 <ESPRxDecoder+0xa40>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b12      	cmp	r3, #18
 8000ecc:	d136      	bne.n	8000f3c <ESPRxDecoder+0x9c8>
			 {
				 Data_bufferptr=19;
 8000ece:	4b39      	ldr	r3, [pc, #228]	; (8000fb4 <ESPRxDecoder+0xa40>)
 8000ed0:	2213      	movs	r2, #19
 8000ed2:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[15] = DecToASCIIFun(Rxwifi_data);
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 fe62 	bl	8001ba0 <DecToASCIIFun>
 8000edc:	4603      	mov	r3, r0
 8000ede:	461a      	mov	r2, r3
 8000ee0:	4b35      	ldr	r3, [pc, #212]	; (8000fb8 <ESPRxDecoder+0xa44>)
 8000ee2:	73da      	strb	r2, [r3, #15]
				 R_Temperature_High_Http = Uart_rx_buffer[15]+ (Uart_rx_buffer[14]*10)+(Uart_rx_buffer[13]*100)+(Uart_rx_buffer[12]*1000);
 8000ee4:	4b34      	ldr	r3, [pc, #208]	; (8000fb8 <ESPRxDecoder+0xa44>)
 8000ee6:	7bdb      	ldrb	r3, [r3, #15]
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	4b33      	ldr	r3, [pc, #204]	; (8000fb8 <ESPRxDecoder+0xa44>)
 8000eec:	7b5b      	ldrb	r3, [r3, #13]
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	0089      	lsls	r1, r1, #2
 8000ef4:	440b      	add	r3, r1
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	0088      	lsls	r0, r1, #2
 8000efa:	4619      	mov	r1, r3
 8000efc:	4603      	mov	r3, r0
 8000efe:	440b      	add	r3, r1
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	b299      	uxth	r1, r3
 8000f04:	4b2c      	ldr	r3, [pc, #176]	; (8000fb8 <ESPRxDecoder+0xa44>)
 8000f06:	7b9b      	ldrb	r3, [r3, #14]
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	0080      	lsls	r0, r0, #2
 8000f0e:	4403      	add	r3, r0
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	440b      	add	r3, r1
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	4413      	add	r3, r2
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	4b26      	ldr	r3, [pc, #152]	; (8000fb8 <ESPRxDecoder+0xa44>)
 8000f1e:	7b1b      	ldrb	r3, [r3, #12]
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	4619      	mov	r1, r3
 8000f24:	0149      	lsls	r1, r1, #5
 8000f26:	1ac9      	subs	r1, r1, r3
 8000f28:	0089      	lsls	r1, r1, #2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	4413      	add	r3, r2
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	4b23      	ldr	r3, [pc, #140]	; (8000fc4 <ESPRxDecoder+0xa50>)
 8000f36:	801a      	strh	r2, [r3, #0]
 8000f38:	f000 bc9d 	b.w	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==19)	//,
 8000f3c:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <ESPRxDecoder+0xa40>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b13      	cmp	r3, #19
 8000f42:	d104      	bne.n	8000f4e <ESPRxDecoder+0x9da>
			 {
				 Data_bufferptr=20;
 8000f44:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <ESPRxDecoder+0xa40>)
 8000f46:	2214      	movs	r2, #20
 8000f48:	701a      	strb	r2, [r3, #0]
 8000f4a:	f000 bc94 	b.w	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==20)   //Temperature_High_Http
 8000f4e:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <ESPRxDecoder+0xa40>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b14      	cmp	r3, #20
 8000f54:	d10c      	bne.n	8000f70 <ESPRxDecoder+0x9fc>
			 {
				 Data_bufferptr=21;
 8000f56:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <ESPRxDecoder+0xa40>)
 8000f58:	2215      	movs	r2, #21
 8000f5a:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[16] = DecToASCIIFun(Rxwifi_data);
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 fe1e 	bl	8001ba0 <DecToASCIIFun>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461a      	mov	r2, r3
 8000f68:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <ESPRxDecoder+0xa44>)
 8000f6a:	741a      	strb	r2, [r3, #16]
 8000f6c:	f000 bc83 	b.w	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==21)
 8000f70:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <ESPRxDecoder+0xa40>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b15      	cmp	r3, #21
 8000f76:	d10c      	bne.n	8000f92 <ESPRxDecoder+0xa1e>
			 {
				 Data_bufferptr=22;
 8000f78:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <ESPRxDecoder+0xa40>)
 8000f7a:	2216      	movs	r2, #22
 8000f7c:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[17] = DecToASCIIFun(Rxwifi_data);
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 fe0d 	bl	8001ba0 <DecToASCIIFun>
 8000f86:	4603      	mov	r3, r0
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <ESPRxDecoder+0xa44>)
 8000f8c:	745a      	strb	r2, [r3, #17]
 8000f8e:	f000 bc72 	b.w	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==22)
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <ESPRxDecoder+0xa40>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b16      	cmp	r3, #22
 8000f98:	d116      	bne.n	8000fc8 <ESPRxDecoder+0xa54>
			 {
				 Data_bufferptr=23;
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <ESPRxDecoder+0xa40>)
 8000f9c:	2217      	movs	r2, #23
 8000f9e:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[18] = DecToASCIIFun(Rxwifi_data);
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 fdfc 	bl	8001ba0 <DecToASCIIFun>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	461a      	mov	r2, r3
 8000fac:	4b02      	ldr	r3, [pc, #8]	; (8000fb8 <ESPRxDecoder+0xa44>)
 8000fae:	749a      	strb	r2, [r3, #18]
 8000fb0:	f000 bc61 	b.w	8001876 <ESPRxDecoder+0x1302>
 8000fb4:	200000d2 	.word	0x200000d2
 8000fb8:	2000008c 	.word	0x2000008c
 8000fbc:	200000da 	.word	0x200000da
 8000fc0:	200000dc 	.word	0x200000dc
 8000fc4:	200000de 	.word	0x200000de
			 }
			 else if(Data_bufferptr==23)
 8000fc8:	4b9c      	ldr	r3, [pc, #624]	; (800123c <ESPRxDecoder+0xcc8>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b17      	cmp	r3, #23
 8000fce:	d136      	bne.n	800103e <ESPRxDecoder+0xaca>
			 {
				 Data_bufferptr=24;
 8000fd0:	4b9a      	ldr	r3, [pc, #616]	; (800123c <ESPRxDecoder+0xcc8>)
 8000fd2:	2218      	movs	r2, #24
 8000fd4:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[19] = DecToASCIIFun(Rxwifi_data);
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 fde1 	bl	8001ba0 <DecToASCIIFun>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b97      	ldr	r3, [pc, #604]	; (8001240 <ESPRxDecoder+0xccc>)
 8000fe4:	74da      	strb	r2, [r3, #19]
				 Temperature_High_Http = Uart_rx_buffer[19]+ (Uart_rx_buffer[18]*10)+(Uart_rx_buffer[17]*100)+(Uart_rx_buffer[16]*1000);
 8000fe6:	4b96      	ldr	r3, [pc, #600]	; (8001240 <ESPRxDecoder+0xccc>)
 8000fe8:	7cdb      	ldrb	r3, [r3, #19]
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	4b94      	ldr	r3, [pc, #592]	; (8001240 <ESPRxDecoder+0xccc>)
 8000fee:	7c5b      	ldrb	r3, [r3, #17]
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	0089      	lsls	r1, r1, #2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	0088      	lsls	r0, r1, #2
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4603      	mov	r3, r0
 8001000:	440b      	add	r3, r1
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	b299      	uxth	r1, r3
 8001006:	4b8e      	ldr	r3, [pc, #568]	; (8001240 <ESPRxDecoder+0xccc>)
 8001008:	7c9b      	ldrb	r3, [r3, #18]
 800100a:	b29b      	uxth	r3, r3
 800100c:	4618      	mov	r0, r3
 800100e:	0080      	lsls	r0, r0, #2
 8001010:	4403      	add	r3, r0
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	b29b      	uxth	r3, r3
 8001016:	440b      	add	r3, r1
 8001018:	b29b      	uxth	r3, r3
 800101a:	4413      	add	r3, r2
 800101c:	b29a      	uxth	r2, r3
 800101e:	4b88      	ldr	r3, [pc, #544]	; (8001240 <ESPRxDecoder+0xccc>)
 8001020:	7c1b      	ldrb	r3, [r3, #16]
 8001022:	b29b      	uxth	r3, r3
 8001024:	4619      	mov	r1, r3
 8001026:	0149      	lsls	r1, r1, #5
 8001028:	1ac9      	subs	r1, r1, r3
 800102a:	0089      	lsls	r1, r1, #2
 800102c:	440b      	add	r3, r1
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	b29b      	uxth	r3, r3
 8001032:	4413      	add	r3, r2
 8001034:	b29a      	uxth	r2, r3
 8001036:	4b83      	ldr	r3, [pc, #524]	; (8001244 <ESPRxDecoder+0xcd0>)
 8001038:	801a      	strh	r2, [r3, #0]
 800103a:	f000 bc1c 	b.w	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==24)   //,
 800103e:	4b7f      	ldr	r3, [pc, #508]	; (800123c <ESPRxDecoder+0xcc8>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b18      	cmp	r3, #24
 8001044:	d104      	bne.n	8001050 <ESPRxDecoder+0xadc>
			 {
				 Data_bufferptr=25;
 8001046:	4b7d      	ldr	r3, [pc, #500]	; (800123c <ESPRxDecoder+0xcc8>)
 8001048:	2219      	movs	r2, #25
 800104a:	701a      	strb	r2, [r3, #0]
 800104c:	f000 bc13 	b.w	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==25)  //Temperature_Low_Http
 8001050:	4b7a      	ldr	r3, [pc, #488]	; (800123c <ESPRxDecoder+0xcc8>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b19      	cmp	r3, #25
 8001056:	d10c      	bne.n	8001072 <ESPRxDecoder+0xafe>
			 {
				 Data_bufferptr=26;
 8001058:	4b78      	ldr	r3, [pc, #480]	; (800123c <ESPRxDecoder+0xcc8>)
 800105a:	221a      	movs	r2, #26
 800105c:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[20] = DecToASCIIFun(Rxwifi_data);
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	4618      	mov	r0, r3
 8001062:	f000 fd9d 	bl	8001ba0 <DecToASCIIFun>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b75      	ldr	r3, [pc, #468]	; (8001240 <ESPRxDecoder+0xccc>)
 800106c:	751a      	strb	r2, [r3, #20]
 800106e:	f000 bc02 	b.w	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==26)
 8001072:	4b72      	ldr	r3, [pc, #456]	; (800123c <ESPRxDecoder+0xcc8>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b1a      	cmp	r3, #26
 8001078:	d10b      	bne.n	8001092 <ESPRxDecoder+0xb1e>
			 {
				 Data_bufferptr=27;
 800107a:	4b70      	ldr	r3, [pc, #448]	; (800123c <ESPRxDecoder+0xcc8>)
 800107c:	221b      	movs	r2, #27
 800107e:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[21] = DecToASCIIFun(Rxwifi_data);
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	4618      	mov	r0, r3
 8001084:	f000 fd8c 	bl	8001ba0 <DecToASCIIFun>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	4b6c      	ldr	r3, [pc, #432]	; (8001240 <ESPRxDecoder+0xccc>)
 800108e:	755a      	strb	r2, [r3, #21]
 8001090:	e3f1      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==27)
 8001092:	4b6a      	ldr	r3, [pc, #424]	; (800123c <ESPRxDecoder+0xcc8>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b1b      	cmp	r3, #27
 8001098:	d10b      	bne.n	80010b2 <ESPRxDecoder+0xb3e>
			 {
				 Data_bufferptr=28;
 800109a:	4b68      	ldr	r3, [pc, #416]	; (800123c <ESPRxDecoder+0xcc8>)
 800109c:	221c      	movs	r2, #28
 800109e:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[22] = DecToASCIIFun(Rxwifi_data);
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 fd7c 	bl	8001ba0 <DecToASCIIFun>
 80010a8:	4603      	mov	r3, r0
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b64      	ldr	r3, [pc, #400]	; (8001240 <ESPRxDecoder+0xccc>)
 80010ae:	759a      	strb	r2, [r3, #22]
 80010b0:	e3e1      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==28)
 80010b2:	4b62      	ldr	r3, [pc, #392]	; (800123c <ESPRxDecoder+0xcc8>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b1c      	cmp	r3, #28
 80010b8:	d135      	bne.n	8001126 <ESPRxDecoder+0xbb2>
			 {
				 Data_bufferptr=29;
 80010ba:	4b60      	ldr	r3, [pc, #384]	; (800123c <ESPRxDecoder+0xcc8>)
 80010bc:	221d      	movs	r2, #29
 80010be:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[23] = DecToASCIIFun(Rxwifi_data);
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 fd6c 	bl	8001ba0 <DecToASCIIFun>
 80010c8:	4603      	mov	r3, r0
 80010ca:	461a      	mov	r2, r3
 80010cc:	4b5c      	ldr	r3, [pc, #368]	; (8001240 <ESPRxDecoder+0xccc>)
 80010ce:	75da      	strb	r2, [r3, #23]
				 R_Temperature_Low_Http = Uart_rx_buffer[23]+ (Uart_rx_buffer[22]*10)+(Uart_rx_buffer[21]*100)+(Uart_rx_buffer[20]*1000);
 80010d0:	4b5b      	ldr	r3, [pc, #364]	; (8001240 <ESPRxDecoder+0xccc>)
 80010d2:	7ddb      	ldrb	r3, [r3, #23]
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	4b5a      	ldr	r3, [pc, #360]	; (8001240 <ESPRxDecoder+0xccc>)
 80010d8:	7d5b      	ldrb	r3, [r3, #21]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	4619      	mov	r1, r3
 80010de:	0089      	lsls	r1, r1, #2
 80010e0:	440b      	add	r3, r1
 80010e2:	4619      	mov	r1, r3
 80010e4:	0088      	lsls	r0, r1, #2
 80010e6:	4619      	mov	r1, r3
 80010e8:	4603      	mov	r3, r0
 80010ea:	440b      	add	r3, r1
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	b299      	uxth	r1, r3
 80010f0:	4b53      	ldr	r3, [pc, #332]	; (8001240 <ESPRxDecoder+0xccc>)
 80010f2:	7d9b      	ldrb	r3, [r3, #22]
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	0080      	lsls	r0, r0, #2
 80010fa:	4403      	add	r3, r0
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	b29b      	uxth	r3, r3
 8001100:	440b      	add	r3, r1
 8001102:	b29b      	uxth	r3, r3
 8001104:	4413      	add	r3, r2
 8001106:	b29a      	uxth	r2, r3
 8001108:	4b4d      	ldr	r3, [pc, #308]	; (8001240 <ESPRxDecoder+0xccc>)
 800110a:	7d1b      	ldrb	r3, [r3, #20]
 800110c:	b29b      	uxth	r3, r3
 800110e:	4619      	mov	r1, r3
 8001110:	0149      	lsls	r1, r1, #5
 8001112:	1ac9      	subs	r1, r1, r3
 8001114:	0089      	lsls	r1, r1, #2
 8001116:	440b      	add	r3, r1
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	b29b      	uxth	r3, r3
 800111c:	4413      	add	r3, r2
 800111e:	b29a      	uxth	r2, r3
 8001120:	4b49      	ldr	r3, [pc, #292]	; (8001248 <ESPRxDecoder+0xcd4>)
 8001122:	801a      	strh	r2, [r3, #0]
 8001124:	e3a7      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==29)  //,
 8001126:	4b45      	ldr	r3, [pc, #276]	; (800123c <ESPRxDecoder+0xcc8>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b1d      	cmp	r3, #29
 800112c:	d103      	bne.n	8001136 <ESPRxDecoder+0xbc2>
			 {
				 Data_bufferptr=30;
 800112e:	4b43      	ldr	r3, [pc, #268]	; (800123c <ESPRxDecoder+0xcc8>)
 8001130:	221e      	movs	r2, #30
 8001132:	701a      	strb	r2, [r3, #0]
 8001134:	e39f      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			else if(Data_bufferptr==30)  //Temperature_Low_Http
 8001136:	4b41      	ldr	r3, [pc, #260]	; (800123c <ESPRxDecoder+0xcc8>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b1e      	cmp	r3, #30
 800113c:	d10b      	bne.n	8001156 <ESPRxDecoder+0xbe2>
			 {
				 Data_bufferptr=32;
 800113e:	4b3f      	ldr	r3, [pc, #252]	; (800123c <ESPRxDecoder+0xcc8>)
 8001140:	2220      	movs	r2, #32
 8001142:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[24] = DecToASCIIFun(Rxwifi_data);
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	4618      	mov	r0, r3
 8001148:	f000 fd2a 	bl	8001ba0 <DecToASCIIFun>
 800114c:	4603      	mov	r3, r0
 800114e:	461a      	mov	r2, r3
 8001150:	4b3b      	ldr	r3, [pc, #236]	; (8001240 <ESPRxDecoder+0xccc>)
 8001152:	761a      	strb	r2, [r3, #24]
 8001154:	e38f      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==32)
 8001156:	4b39      	ldr	r3, [pc, #228]	; (800123c <ESPRxDecoder+0xcc8>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b20      	cmp	r3, #32
 800115c:	d10b      	bne.n	8001176 <ESPRxDecoder+0xc02>
			 {
				 Data_bufferptr=33;
 800115e:	4b37      	ldr	r3, [pc, #220]	; (800123c <ESPRxDecoder+0xcc8>)
 8001160:	2221      	movs	r2, #33	; 0x21
 8001162:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[25] = DecToASCIIFun(Rxwifi_data);
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	4618      	mov	r0, r3
 8001168:	f000 fd1a 	bl	8001ba0 <DecToASCIIFun>
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	4b33      	ldr	r3, [pc, #204]	; (8001240 <ESPRxDecoder+0xccc>)
 8001172:	765a      	strb	r2, [r3, #25]
 8001174:	e37f      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==33)
 8001176:	4b31      	ldr	r3, [pc, #196]	; (800123c <ESPRxDecoder+0xcc8>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b21      	cmp	r3, #33	; 0x21
 800117c:	d10b      	bne.n	8001196 <ESPRxDecoder+0xc22>
			 {
				 Data_bufferptr=34;
 800117e:	4b2f      	ldr	r3, [pc, #188]	; (800123c <ESPRxDecoder+0xcc8>)
 8001180:	2222      	movs	r2, #34	; 0x22
 8001182:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[26] = DecToASCIIFun(Rxwifi_data);
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	4618      	mov	r0, r3
 8001188:	f000 fd0a 	bl	8001ba0 <DecToASCIIFun>
 800118c:	4603      	mov	r3, r0
 800118e:	461a      	mov	r2, r3
 8001190:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <ESPRxDecoder+0xccc>)
 8001192:	769a      	strb	r2, [r3, #26]
 8001194:	e36f      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==34)
 8001196:	4b29      	ldr	r3, [pc, #164]	; (800123c <ESPRxDecoder+0xcc8>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b22      	cmp	r3, #34	; 0x22
 800119c:	d135      	bne.n	800120a <ESPRxDecoder+0xc96>
			 {
				 Data_bufferptr=35;
 800119e:	4b27      	ldr	r3, [pc, #156]	; (800123c <ESPRxDecoder+0xcc8>)
 80011a0:	2223      	movs	r2, #35	; 0x23
 80011a2:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[27] = DecToASCIIFun(Rxwifi_data);
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 fcfa 	bl	8001ba0 <DecToASCIIFun>
 80011ac:	4603      	mov	r3, r0
 80011ae:	461a      	mov	r2, r3
 80011b0:	4b23      	ldr	r3, [pc, #140]	; (8001240 <ESPRxDecoder+0xccc>)
 80011b2:	76da      	strb	r2, [r3, #27]
				 Temperature_Low_Http = Uart_rx_buffer[27]+ (Uart_rx_buffer[26]*10)+(Uart_rx_buffer[25]*100)+(Uart_rx_buffer[24]*1000);
 80011b4:	4b22      	ldr	r3, [pc, #136]	; (8001240 <ESPRxDecoder+0xccc>)
 80011b6:	7edb      	ldrb	r3, [r3, #27]
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	4b21      	ldr	r3, [pc, #132]	; (8001240 <ESPRxDecoder+0xccc>)
 80011bc:	7e5b      	ldrb	r3, [r3, #25]
 80011be:	b29b      	uxth	r3, r3
 80011c0:	4619      	mov	r1, r3
 80011c2:	0089      	lsls	r1, r1, #2
 80011c4:	440b      	add	r3, r1
 80011c6:	4619      	mov	r1, r3
 80011c8:	0088      	lsls	r0, r1, #2
 80011ca:	4619      	mov	r1, r3
 80011cc:	4603      	mov	r3, r0
 80011ce:	440b      	add	r3, r1
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	b299      	uxth	r1, r3
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <ESPRxDecoder+0xccc>)
 80011d6:	7e9b      	ldrb	r3, [r3, #26]
 80011d8:	b29b      	uxth	r3, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	0080      	lsls	r0, r0, #2
 80011de:	4403      	add	r3, r0
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	440b      	add	r3, r1
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	4413      	add	r3, r2
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <ESPRxDecoder+0xccc>)
 80011ee:	7e1b      	ldrb	r3, [r3, #24]
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	4619      	mov	r1, r3
 80011f4:	0149      	lsls	r1, r1, #5
 80011f6:	1ac9      	subs	r1, r1, r3
 80011f8:	0089      	lsls	r1, r1, #2
 80011fa:	440b      	add	r3, r1
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	b29b      	uxth	r3, r3
 8001200:	4413      	add	r3, r2
 8001202:	b29a      	uxth	r2, r3
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <ESPRxDecoder+0xcd8>)
 8001206:	801a      	strh	r2, [r3, #0]
 8001208:	e335      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==35)  //,
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <ESPRxDecoder+0xcc8>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b23      	cmp	r3, #35	; 0x23
 8001210:	d103      	bne.n	800121a <ESPRxDecoder+0xca6>
			 {
				 Data_bufferptr=36;
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <ESPRxDecoder+0xcc8>)
 8001214:	2224      	movs	r2, #36	; 0x24
 8001216:	701a      	strb	r2, [r3, #0]
 8001218:	e32d      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==36)  //R_seq1_hour
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <ESPRxDecoder+0xcc8>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b24      	cmp	r3, #36	; 0x24
 8001220:	d116      	bne.n	8001250 <ESPRxDecoder+0xcdc>
			 {
				 Data_bufferptr=37;
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <ESPRxDecoder+0xcc8>)
 8001224:	2225      	movs	r2, #37	; 0x25
 8001226:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[28] = DecToASCIIFun(Rxwifi_data);
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	4618      	mov	r0, r3
 800122c:	f000 fcb8 	bl	8001ba0 <DecToASCIIFun>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	4b02      	ldr	r3, [pc, #8]	; (8001240 <ESPRxDecoder+0xccc>)
 8001236:	771a      	strb	r2, [r3, #28]
 8001238:	e31d      	b.n	8001876 <ESPRxDecoder+0x1302>
 800123a:	bf00      	nop
 800123c:	200000d2 	.word	0x200000d2
 8001240:	2000008c 	.word	0x2000008c
 8001244:	200000e0 	.word	0x200000e0
 8001248:	200000e2 	.word	0x200000e2
 800124c:	200000e4 	.word	0x200000e4
			 }
			 else if(Data_bufferptr==37)
 8001250:	4bab      	ldr	r3, [pc, #684]	; (8001500 <ESPRxDecoder+0xf8c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b25      	cmp	r3, #37	; 0x25
 8001256:	d118      	bne.n	800128a <ESPRxDecoder+0xd16>
			 {
				 Data_bufferptr=38;
 8001258:	4ba9      	ldr	r3, [pc, #676]	; (8001500 <ESPRxDecoder+0xf8c>)
 800125a:	2226      	movs	r2, #38	; 0x26
 800125c:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[29] = DecToASCIIFun(Rxwifi_data);
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	4618      	mov	r0, r3
 8001262:	f000 fc9d 	bl	8001ba0 <DecToASCIIFun>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	4ba6      	ldr	r3, [pc, #664]	; (8001504 <ESPRxDecoder+0xf90>)
 800126c:	775a      	strb	r2, [r3, #29]
				 R_Sequence1_hour_http = Uart_rx_buffer[29]+(Uart_rx_buffer[28]*10);
 800126e:	4ba5      	ldr	r3, [pc, #660]	; (8001504 <ESPRxDecoder+0xf90>)
 8001270:	7f5a      	ldrb	r2, [r3, #29]
 8001272:	4ba4      	ldr	r3, [pc, #656]	; (8001504 <ESPRxDecoder+0xf90>)
 8001274:	7f1b      	ldrb	r3, [r3, #28]
 8001276:	4619      	mov	r1, r3
 8001278:	0089      	lsls	r1, r1, #2
 800127a:	440b      	add	r3, r1
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	b2db      	uxtb	r3, r3
 8001280:	4413      	add	r3, r2
 8001282:	b2da      	uxtb	r2, r3
 8001284:	4ba0      	ldr	r3, [pc, #640]	; (8001508 <ESPRxDecoder+0xf94>)
 8001286:	701a      	strb	r2, [r3, #0]
 8001288:	e2f5      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==38)  //R_seq1_min
 800128a:	4b9d      	ldr	r3, [pc, #628]	; (8001500 <ESPRxDecoder+0xf8c>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b26      	cmp	r3, #38	; 0x26
 8001290:	d10b      	bne.n	80012aa <ESPRxDecoder+0xd36>
			 {
				 Data_bufferptr=39;
 8001292:	4b9b      	ldr	r3, [pc, #620]	; (8001500 <ESPRxDecoder+0xf8c>)
 8001294:	2227      	movs	r2, #39	; 0x27
 8001296:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[30] = DecToASCIIFun(Rxwifi_data);
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	4618      	mov	r0, r3
 800129c:	f000 fc80 	bl	8001ba0 <DecToASCIIFun>
 80012a0:	4603      	mov	r3, r0
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b97      	ldr	r3, [pc, #604]	; (8001504 <ESPRxDecoder+0xf90>)
 80012a6:	779a      	strb	r2, [r3, #30]
 80012a8:	e2e5      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==39)
 80012aa:	4b95      	ldr	r3, [pc, #596]	; (8001500 <ESPRxDecoder+0xf8c>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b27      	cmp	r3, #39	; 0x27
 80012b0:	d118      	bne.n	80012e4 <ESPRxDecoder+0xd70>
			 {
				 Data_bufferptr=40;
 80012b2:	4b93      	ldr	r3, [pc, #588]	; (8001500 <ESPRxDecoder+0xf8c>)
 80012b4:	2228      	movs	r2, #40	; 0x28
 80012b6:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[31] = DecToASCIIFun(Rxwifi_data);
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 fc70 	bl	8001ba0 <DecToASCIIFun>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b8f      	ldr	r3, [pc, #572]	; (8001504 <ESPRxDecoder+0xf90>)
 80012c6:	77da      	strb	r2, [r3, #31]
				 R_Sequence1_minute_http = Uart_rx_buffer[31]+(Uart_rx_buffer[30]*10);
 80012c8:	4b8e      	ldr	r3, [pc, #568]	; (8001504 <ESPRxDecoder+0xf90>)
 80012ca:	7fda      	ldrb	r2, [r3, #31]
 80012cc:	4b8d      	ldr	r3, [pc, #564]	; (8001504 <ESPRxDecoder+0xf90>)
 80012ce:	7f9b      	ldrb	r3, [r3, #30]
 80012d0:	4619      	mov	r1, r3
 80012d2:	0089      	lsls	r1, r1, #2
 80012d4:	440b      	add	r3, r1
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	4413      	add	r3, r2
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4b8b      	ldr	r3, [pc, #556]	; (800150c <ESPRxDecoder+0xf98>)
 80012e0:	701a      	strb	r2, [r3, #0]
 80012e2:	e2c8      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==40)  //,
 80012e4:	4b86      	ldr	r3, [pc, #536]	; (8001500 <ESPRxDecoder+0xf8c>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b28      	cmp	r3, #40	; 0x28
 80012ea:	d103      	bne.n	80012f4 <ESPRxDecoder+0xd80>
			 {
				 Data_bufferptr=41;
 80012ec:	4b84      	ldr	r3, [pc, #528]	; (8001500 <ESPRxDecoder+0xf8c>)
 80012ee:	2229      	movs	r2, #41	; 0x29
 80012f0:	701a      	strb	r2, [r3, #0]
 80012f2:	e2c0      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==41)  //seq1_hour
 80012f4:	4b82      	ldr	r3, [pc, #520]	; (8001500 <ESPRxDecoder+0xf8c>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b29      	cmp	r3, #41	; 0x29
 80012fa:	d10c      	bne.n	8001316 <ESPRxDecoder+0xda2>
			 {
				 Data_bufferptr=42;
 80012fc:	4b80      	ldr	r3, [pc, #512]	; (8001500 <ESPRxDecoder+0xf8c>)
 80012fe:	222a      	movs	r2, #42	; 0x2a
 8001300:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[32] = DecToASCIIFun(Rxwifi_data);
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	4618      	mov	r0, r3
 8001306:	f000 fc4b 	bl	8001ba0 <DecToASCIIFun>
 800130a:	4603      	mov	r3, r0
 800130c:	461a      	mov	r2, r3
 800130e:	4b7d      	ldr	r3, [pc, #500]	; (8001504 <ESPRxDecoder+0xf90>)
 8001310:	f883 2020 	strb.w	r2, [r3, #32]
 8001314:	e2af      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==42)
 8001316:	4b7a      	ldr	r3, [pc, #488]	; (8001500 <ESPRxDecoder+0xf8c>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b2a      	cmp	r3, #42	; 0x2a
 800131c:	d11b      	bne.n	8001356 <ESPRxDecoder+0xde2>
			 {
				 Data_bufferptr=43;
 800131e:	4b78      	ldr	r3, [pc, #480]	; (8001500 <ESPRxDecoder+0xf8c>)
 8001320:	222b      	movs	r2, #43	; 0x2b
 8001322:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[33] = DecToASCIIFun(Rxwifi_data);
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	4618      	mov	r0, r3
 8001328:	f000 fc3a 	bl	8001ba0 <DecToASCIIFun>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	4b74      	ldr	r3, [pc, #464]	; (8001504 <ESPRxDecoder+0xf90>)
 8001332:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				 Sequence1_hour_http = Uart_rx_buffer[33]+(Uart_rx_buffer[32]*10);
 8001336:	4b73      	ldr	r3, [pc, #460]	; (8001504 <ESPRxDecoder+0xf90>)
 8001338:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800133c:	4b71      	ldr	r3, [pc, #452]	; (8001504 <ESPRxDecoder+0xf90>)
 800133e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001342:	4619      	mov	r1, r3
 8001344:	0089      	lsls	r1, r1, #2
 8001346:	440b      	add	r3, r1
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	b2db      	uxtb	r3, r3
 800134c:	4413      	add	r3, r2
 800134e:	b2da      	uxtb	r2, r3
 8001350:	4b6f      	ldr	r3, [pc, #444]	; (8001510 <ESPRxDecoder+0xf9c>)
 8001352:	701a      	strb	r2, [r3, #0]
 8001354:	e28f      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==43)  //seq1_min
 8001356:	4b6a      	ldr	r3, [pc, #424]	; (8001500 <ESPRxDecoder+0xf8c>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b2b      	cmp	r3, #43	; 0x2b
 800135c:	d10c      	bne.n	8001378 <ESPRxDecoder+0xe04>
			 {
				 Data_bufferptr=44;
 800135e:	4b68      	ldr	r3, [pc, #416]	; (8001500 <ESPRxDecoder+0xf8c>)
 8001360:	222c      	movs	r2, #44	; 0x2c
 8001362:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[34] = DecToASCIIFun(Rxwifi_data);
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	4618      	mov	r0, r3
 8001368:	f000 fc1a 	bl	8001ba0 <DecToASCIIFun>
 800136c:	4603      	mov	r3, r0
 800136e:	461a      	mov	r2, r3
 8001370:	4b64      	ldr	r3, [pc, #400]	; (8001504 <ESPRxDecoder+0xf90>)
 8001372:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001376:	e27e      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==44)
 8001378:	4b61      	ldr	r3, [pc, #388]	; (8001500 <ESPRxDecoder+0xf8c>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b2c      	cmp	r3, #44	; 0x2c
 800137e:	d11b      	bne.n	80013b8 <ESPRxDecoder+0xe44>
			 {
				 Data_bufferptr=45;
 8001380:	4b5f      	ldr	r3, [pc, #380]	; (8001500 <ESPRxDecoder+0xf8c>)
 8001382:	222d      	movs	r2, #45	; 0x2d
 8001384:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[35] = DecToASCIIFun(Rxwifi_data);
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	4618      	mov	r0, r3
 800138a:	f000 fc09 	bl	8001ba0 <DecToASCIIFun>
 800138e:	4603      	mov	r3, r0
 8001390:	461a      	mov	r2, r3
 8001392:	4b5c      	ldr	r3, [pc, #368]	; (8001504 <ESPRxDecoder+0xf90>)
 8001394:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				 Sequence1_minute_http = Uart_rx_buffer[35]+(Uart_rx_buffer[34]*10);
 8001398:	4b5a      	ldr	r3, [pc, #360]	; (8001504 <ESPRxDecoder+0xf90>)
 800139a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800139e:	4b59      	ldr	r3, [pc, #356]	; (8001504 <ESPRxDecoder+0xf90>)
 80013a0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80013a4:	4619      	mov	r1, r3
 80013a6:	0089      	lsls	r1, r1, #2
 80013a8:	440b      	add	r3, r1
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	4413      	add	r3, r2
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b58      	ldr	r3, [pc, #352]	; (8001514 <ESPRxDecoder+0xfa0>)
 80013b4:	701a      	strb	r2, [r3, #0]
 80013b6:	e25e      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==45)  //,
 80013b8:	4b51      	ldr	r3, [pc, #324]	; (8001500 <ESPRxDecoder+0xf8c>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b2d      	cmp	r3, #45	; 0x2d
 80013be:	d103      	bne.n	80013c8 <ESPRxDecoder+0xe54>
			 {
				 Data_bufferptr=46;
 80013c0:	4b4f      	ldr	r3, [pc, #316]	; (8001500 <ESPRxDecoder+0xf8c>)
 80013c2:	222e      	movs	r2, #46	; 0x2e
 80013c4:	701a      	strb	r2, [r3, #0]
 80013c6:	e256      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==46)  //R_seq2_hour
 80013c8:	4b4d      	ldr	r3, [pc, #308]	; (8001500 <ESPRxDecoder+0xf8c>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b2e      	cmp	r3, #46	; 0x2e
 80013ce:	d10c      	bne.n	80013ea <ESPRxDecoder+0xe76>
			 {
				 Data_bufferptr=47;
 80013d0:	4b4b      	ldr	r3, [pc, #300]	; (8001500 <ESPRxDecoder+0xf8c>)
 80013d2:	222f      	movs	r2, #47	; 0x2f
 80013d4:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[36] = DecToASCIIFun(Rxwifi_data);
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 fbe1 	bl	8001ba0 <DecToASCIIFun>
 80013de:	4603      	mov	r3, r0
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b48      	ldr	r3, [pc, #288]	; (8001504 <ESPRxDecoder+0xf90>)
 80013e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80013e8:	e245      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==47)
 80013ea:	4b45      	ldr	r3, [pc, #276]	; (8001500 <ESPRxDecoder+0xf8c>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b2f      	cmp	r3, #47	; 0x2f
 80013f0:	d11b      	bne.n	800142a <ESPRxDecoder+0xeb6>
			 {
				 Data_bufferptr=48;
 80013f2:	4b43      	ldr	r3, [pc, #268]	; (8001500 <ESPRxDecoder+0xf8c>)
 80013f4:	2230      	movs	r2, #48	; 0x30
 80013f6:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[37] = DecToASCIIFun(Rxwifi_data);
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 fbd0 	bl	8001ba0 <DecToASCIIFun>
 8001400:	4603      	mov	r3, r0
 8001402:	461a      	mov	r2, r3
 8001404:	4b3f      	ldr	r3, [pc, #252]	; (8001504 <ESPRxDecoder+0xf90>)
 8001406:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				 R_Sequence2_hour_http = Uart_rx_buffer[37]+(Uart_rx_buffer[36]*10);
 800140a:	4b3e      	ldr	r3, [pc, #248]	; (8001504 <ESPRxDecoder+0xf90>)
 800140c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001410:	4b3c      	ldr	r3, [pc, #240]	; (8001504 <ESPRxDecoder+0xf90>)
 8001412:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001416:	4619      	mov	r1, r3
 8001418:	0089      	lsls	r1, r1, #2
 800141a:	440b      	add	r3, r1
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	b2db      	uxtb	r3, r3
 8001420:	4413      	add	r3, r2
 8001422:	b2da      	uxtb	r2, r3
 8001424:	4b3c      	ldr	r3, [pc, #240]	; (8001518 <ESPRxDecoder+0xfa4>)
 8001426:	701a      	strb	r2, [r3, #0]
 8001428:	e225      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==48)  //R_seq2_hour
 800142a:	4b35      	ldr	r3, [pc, #212]	; (8001500 <ESPRxDecoder+0xf8c>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b30      	cmp	r3, #48	; 0x30
 8001430:	d10c      	bne.n	800144c <ESPRxDecoder+0xed8>
			 {
				 Data_bufferptr=49;
 8001432:	4b33      	ldr	r3, [pc, #204]	; (8001500 <ESPRxDecoder+0xf8c>)
 8001434:	2231      	movs	r2, #49	; 0x31
 8001436:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[38] = DecToASCIIFun(Rxwifi_data);
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	4618      	mov	r0, r3
 800143c:	f000 fbb0 	bl	8001ba0 <DecToASCIIFun>
 8001440:	4603      	mov	r3, r0
 8001442:	461a      	mov	r2, r3
 8001444:	4b2f      	ldr	r3, [pc, #188]	; (8001504 <ESPRxDecoder+0xf90>)
 8001446:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800144a:	e214      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==49)
 800144c:	4b2c      	ldr	r3, [pc, #176]	; (8001500 <ESPRxDecoder+0xf8c>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b31      	cmp	r3, #49	; 0x31
 8001452:	d11b      	bne.n	800148c <ESPRxDecoder+0xf18>
			 {
				 Data_bufferptr=50;
 8001454:	4b2a      	ldr	r3, [pc, #168]	; (8001500 <ESPRxDecoder+0xf8c>)
 8001456:	2232      	movs	r2, #50	; 0x32
 8001458:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[39] = DecToASCIIFun(Rxwifi_data);
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	4618      	mov	r0, r3
 800145e:	f000 fb9f 	bl	8001ba0 <DecToASCIIFun>
 8001462:	4603      	mov	r3, r0
 8001464:	461a      	mov	r2, r3
 8001466:	4b27      	ldr	r3, [pc, #156]	; (8001504 <ESPRxDecoder+0xf90>)
 8001468:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				 R_Sequence2_minute_http = Uart_rx_buffer[39]+(Uart_rx_buffer[38]*10);
 800146c:	4b25      	ldr	r3, [pc, #148]	; (8001504 <ESPRxDecoder+0xf90>)
 800146e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8001472:	4b24      	ldr	r3, [pc, #144]	; (8001504 <ESPRxDecoder+0xf90>)
 8001474:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001478:	4619      	mov	r1, r3
 800147a:	0089      	lsls	r1, r1, #2
 800147c:	440b      	add	r3, r1
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	b2db      	uxtb	r3, r3
 8001482:	4413      	add	r3, r2
 8001484:	b2da      	uxtb	r2, r3
 8001486:	4b25      	ldr	r3, [pc, #148]	; (800151c <ESPRxDecoder+0xfa8>)
 8001488:	701a      	strb	r2, [r3, #0]
 800148a:	e1f4      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==50)  //seq1_minute
 800148c:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <ESPRxDecoder+0xf8c>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b32      	cmp	r3, #50	; 0x32
 8001492:	d103      	bne.n	800149c <ESPRxDecoder+0xf28>
			 {
				 Data_bufferptr=52;
 8001494:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <ESPRxDecoder+0xf8c>)
 8001496:	2234      	movs	r2, #52	; 0x34
 8001498:	701a      	strb	r2, [r3, #0]
 800149a:	e1ec      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==52)  //seq2_hour
 800149c:	4b18      	ldr	r3, [pc, #96]	; (8001500 <ESPRxDecoder+0xf8c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b34      	cmp	r3, #52	; 0x34
 80014a2:	d10c      	bne.n	80014be <ESPRxDecoder+0xf4a>
			 {
				 Data_bufferptr=53;
 80014a4:	4b16      	ldr	r3, [pc, #88]	; (8001500 <ESPRxDecoder+0xf8c>)
 80014a6:	2235      	movs	r2, #53	; 0x35
 80014a8:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[40] = DecToASCIIFun(Rxwifi_data);
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f000 fb77 	bl	8001ba0 <DecToASCIIFun>
 80014b2:	4603      	mov	r3, r0
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b13      	ldr	r3, [pc, #76]	; (8001504 <ESPRxDecoder+0xf90>)
 80014b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80014bc:	e1db      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==53)
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <ESPRxDecoder+0xf8c>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b35      	cmp	r3, #53	; 0x35
 80014c4:	d12e      	bne.n	8001524 <ESPRxDecoder+0xfb0>
			 {
				 Data_bufferptr=54;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <ESPRxDecoder+0xf8c>)
 80014c8:	2236      	movs	r2, #54	; 0x36
 80014ca:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[41] = DecToASCIIFun(Rxwifi_data);
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 fb66 	bl	8001ba0 <DecToASCIIFun>
 80014d4:	4603      	mov	r3, r0
 80014d6:	461a      	mov	r2, r3
 80014d8:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <ESPRxDecoder+0xf90>)
 80014da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				 Sequence2_hour_http = Uart_rx_buffer[41]+(Uart_rx_buffer[40]*10);
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <ESPRxDecoder+0xf90>)
 80014e0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80014e4:	4b07      	ldr	r3, [pc, #28]	; (8001504 <ESPRxDecoder+0xf90>)
 80014e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80014ea:	4619      	mov	r1, r3
 80014ec:	0089      	lsls	r1, r1, #2
 80014ee:	440b      	add	r3, r1
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	4413      	add	r3, r2
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	4b09      	ldr	r3, [pc, #36]	; (8001520 <ESPRxDecoder+0xfac>)
 80014fa:	701a      	strb	r2, [r3, #0]
 80014fc:	e1bb      	b.n	8001876 <ESPRxDecoder+0x1302>
 80014fe:	bf00      	nop
 8001500:	200000d2 	.word	0x200000d2
 8001504:	2000008c 	.word	0x2000008c
 8001508:	200000e8 	.word	0x200000e8
 800150c:	200000e9 	.word	0x200000e9
 8001510:	200000e6 	.word	0x200000e6
 8001514:	200000e7 	.word	0x200000e7
 8001518:	200000ea 	.word	0x200000ea
 800151c:	200000eb 	.word	0x200000eb
 8001520:	200000ec 	.word	0x200000ec

			 }
			 else if(Data_bufferptr==54)  //seq2_minute
 8001524:	4ba9      	ldr	r3, [pc, #676]	; (80017cc <ESPRxDecoder+0x1258>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b36      	cmp	r3, #54	; 0x36
 800152a:	d10c      	bne.n	8001546 <ESPRxDecoder+0xfd2>
			 {
				 Data_bufferptr=55;
 800152c:	4ba7      	ldr	r3, [pc, #668]	; (80017cc <ESPRxDecoder+0x1258>)
 800152e:	2237      	movs	r2, #55	; 0x37
 8001530:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[42] = DecToASCIIFun(Rxwifi_data);
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	4618      	mov	r0, r3
 8001536:	f000 fb33 	bl	8001ba0 <DecToASCIIFun>
 800153a:	4603      	mov	r3, r0
 800153c:	461a      	mov	r2, r3
 800153e:	4ba4      	ldr	r3, [pc, #656]	; (80017d0 <ESPRxDecoder+0x125c>)
 8001540:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8001544:	e197      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==55)
 8001546:	4ba1      	ldr	r3, [pc, #644]	; (80017cc <ESPRxDecoder+0x1258>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b37      	cmp	r3, #55	; 0x37
 800154c:	d11b      	bne.n	8001586 <ESPRxDecoder+0x1012>
			 {
				 Data_bufferptr=56;
 800154e:	4b9f      	ldr	r3, [pc, #636]	; (80017cc <ESPRxDecoder+0x1258>)
 8001550:	2238      	movs	r2, #56	; 0x38
 8001552:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[43] = DecToASCIIFun(Rxwifi_data);
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	4618      	mov	r0, r3
 8001558:	f000 fb22 	bl	8001ba0 <DecToASCIIFun>
 800155c:	4603      	mov	r3, r0
 800155e:	461a      	mov	r2, r3
 8001560:	4b9b      	ldr	r3, [pc, #620]	; (80017d0 <ESPRxDecoder+0x125c>)
 8001562:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				 Sequence2_minute_http = Uart_rx_buffer[43]+(Uart_rx_buffer[42]*10);
 8001566:	4b9a      	ldr	r3, [pc, #616]	; (80017d0 <ESPRxDecoder+0x125c>)
 8001568:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800156c:	4b98      	ldr	r3, [pc, #608]	; (80017d0 <ESPRxDecoder+0x125c>)
 800156e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001572:	4619      	mov	r1, r3
 8001574:	0089      	lsls	r1, r1, #2
 8001576:	440b      	add	r3, r1
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	b2db      	uxtb	r3, r3
 800157c:	4413      	add	r3, r2
 800157e:	b2da      	uxtb	r2, r3
 8001580:	4b94      	ldr	r3, [pc, #592]	; (80017d4 <ESPRxDecoder+0x1260>)
 8001582:	701a      	strb	r2, [r3, #0]
 8001584:	e177      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==56)  //,
 8001586:	4b91      	ldr	r3, [pc, #580]	; (80017cc <ESPRxDecoder+0x1258>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b38      	cmp	r3, #56	; 0x38
 800158c:	d103      	bne.n	8001596 <ESPRxDecoder+0x1022>
			 {
				 Data_bufferptr=57;
 800158e:	4b8f      	ldr	r3, [pc, #572]	; (80017cc <ESPRxDecoder+0x1258>)
 8001590:	2239      	movs	r2, #57	; 0x39
 8001592:	701a      	strb	r2, [r3, #0]
 8001594:	e16f      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==57)  //Type of process
 8001596:	4b8d      	ldr	r3, [pc, #564]	; (80017cc <ESPRxDecoder+0x1258>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b39      	cmp	r3, #57	; 0x39
 800159c:	d111      	bne.n	80015c2 <ESPRxDecoder+0x104e>
			 {
				 Data_bufferptr=58;
 800159e:	4b8b      	ldr	r3, [pc, #556]	; (80017cc <ESPRxDecoder+0x1258>)
 80015a0:	223a      	movs	r2, #58	; 0x3a
 80015a2:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[44] = DecToASCIIFun(Rxwifi_data);
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 fafa 	bl	8001ba0 <DecToASCIIFun>
 80015ac:	4603      	mov	r3, r0
 80015ae:	461a      	mov	r2, r3
 80015b0:	4b87      	ldr	r3, [pc, #540]	; (80017d0 <ESPRxDecoder+0x125c>)
 80015b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				 TypeofProcess = Uart_rx_buffer[44];
 80015b6:	4b86      	ldr	r3, [pc, #536]	; (80017d0 <ESPRxDecoder+0x125c>)
 80015b8:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80015bc:	4b86      	ldr	r3, [pc, #536]	; (80017d8 <ESPRxDecoder+0x1264>)
 80015be:	701a      	strb	r2, [r3, #0]
 80015c0:	e159      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==58)  //,
 80015c2:	4b82      	ldr	r3, [pc, #520]	; (80017cc <ESPRxDecoder+0x1258>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b3a      	cmp	r3, #58	; 0x3a
 80015c8:	d103      	bne.n	80015d2 <ESPRxDecoder+0x105e>
			 {
				 Data_bufferptr=59;
 80015ca:	4b80      	ldr	r3, [pc, #512]	; (80017cc <ESPRxDecoder+0x1258>)
 80015cc:	223b      	movs	r2, #59	; 0x3b
 80015ce:	701a      	strb	r2, [r3, #0]
 80015d0:	e151      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==59)  //Offset time before timer
 80015d2:	4b7e      	ldr	r3, [pc, #504]	; (80017cc <ESPRxDecoder+0x1258>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b3b      	cmp	r3, #59	; 0x3b
 80015d8:	d10c      	bne.n	80015f4 <ESPRxDecoder+0x1080>
			 {
				 Data_bufferptr=60;
 80015da:	4b7c      	ldr	r3, [pc, #496]	; (80017cc <ESPRxDecoder+0x1258>)
 80015dc:	223c      	movs	r2, #60	; 0x3c
 80015de:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[45] = DecToASCIIFun(Rxwifi_data);
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 fadc 	bl	8001ba0 <DecToASCIIFun>
 80015e8:	4603      	mov	r3, r0
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b78      	ldr	r3, [pc, #480]	; (80017d0 <ESPRxDecoder+0x125c>)
 80015ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 80015f2:	e140      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==60)
 80015f4:	4b75      	ldr	r3, [pc, #468]	; (80017cc <ESPRxDecoder+0x1258>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b3c      	cmp	r3, #60	; 0x3c
 80015fa:	d11b      	bne.n	8001634 <ESPRxDecoder+0x10c0>
			 {
				 Data_bufferptr=61;
 80015fc:	4b73      	ldr	r3, [pc, #460]	; (80017cc <ESPRxDecoder+0x1258>)
 80015fe:	223d      	movs	r2, #61	; 0x3d
 8001600:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[46] = DecToASCIIFun(Rxwifi_data);
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	4618      	mov	r0, r3
 8001606:	f000 facb 	bl	8001ba0 <DecToASCIIFun>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	4b70      	ldr	r3, [pc, #448]	; (80017d0 <ESPRxDecoder+0x125c>)
 8001610:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				 TypeofProcess = Uart_rx_buffer[46]+(Uart_rx_buffer[45]*10);
 8001614:	4b6e      	ldr	r3, [pc, #440]	; (80017d0 <ESPRxDecoder+0x125c>)
 8001616:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800161a:	4b6d      	ldr	r3, [pc, #436]	; (80017d0 <ESPRxDecoder+0x125c>)
 800161c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001620:	4619      	mov	r1, r3
 8001622:	0089      	lsls	r1, r1, #2
 8001624:	440b      	add	r3, r1
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	b2db      	uxtb	r3, r3
 800162a:	4413      	add	r3, r2
 800162c:	b2da      	uxtb	r2, r3
 800162e:	4b6a      	ldr	r3, [pc, #424]	; (80017d8 <ESPRxDecoder+0x1264>)
 8001630:	701a      	strb	r2, [r3, #0]
 8001632:	e120      	b.n	8001876 <ESPRxDecoder+0x1302>

			 }
			 else if(Data_bufferptr==61)  //,
 8001634:	4b65      	ldr	r3, [pc, #404]	; (80017cc <ESPRxDecoder+0x1258>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b3d      	cmp	r3, #61	; 0x3d
 800163a:	d103      	bne.n	8001644 <ESPRxDecoder+0x10d0>
			 {
				 Data_bufferptr=62;
 800163c:	4b63      	ldr	r3, [pc, #396]	; (80017cc <ESPRxDecoder+0x1258>)
 800163e:	223e      	movs	r2, #62	; 0x3e
 8001640:	701a      	strb	r2, [r3, #0]
 8001642:	e118      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==62)  //Offset time after timer
 8001644:	4b61      	ldr	r3, [pc, #388]	; (80017cc <ESPRxDecoder+0x1258>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b3e      	cmp	r3, #62	; 0x3e
 800164a:	d10c      	bne.n	8001666 <ESPRxDecoder+0x10f2>
			 {
				 Data_bufferptr=63;
 800164c:	4b5f      	ldr	r3, [pc, #380]	; (80017cc <ESPRxDecoder+0x1258>)
 800164e:	223f      	movs	r2, #63	; 0x3f
 8001650:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[47] = DecToASCIIFun(Rxwifi_data);
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	4618      	mov	r0, r3
 8001656:	f000 faa3 	bl	8001ba0 <DecToASCIIFun>
 800165a:	4603      	mov	r3, r0
 800165c:	461a      	mov	r2, r3
 800165e:	4b5c      	ldr	r3, [pc, #368]	; (80017d0 <ESPRxDecoder+0x125c>)
 8001660:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8001664:	e107      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==63)
 8001666:	4b59      	ldr	r3, [pc, #356]	; (80017cc <ESPRxDecoder+0x1258>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b3f      	cmp	r3, #63	; 0x3f
 800166c:	d11b      	bne.n	80016a6 <ESPRxDecoder+0x1132>
			 {
				 Data_bufferptr=64;
 800166e:	4b57      	ldr	r3, [pc, #348]	; (80017cc <ESPRxDecoder+0x1258>)
 8001670:	2240      	movs	r2, #64	; 0x40
 8001672:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[48] = DecToASCIIFun(Rxwifi_data);
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	4618      	mov	r0, r3
 8001678:	f000 fa92 	bl	8001ba0 <DecToASCIIFun>
 800167c:	4603      	mov	r3, r0
 800167e:	461a      	mov	r2, r3
 8001680:	4b53      	ldr	r3, [pc, #332]	; (80017d0 <ESPRxDecoder+0x125c>)
 8001682:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				 TypeofProcess = Uart_rx_buffer[48]+(Uart_rx_buffer[47]*10);
 8001686:	4b52      	ldr	r3, [pc, #328]	; (80017d0 <ESPRxDecoder+0x125c>)
 8001688:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800168c:	4b50      	ldr	r3, [pc, #320]	; (80017d0 <ESPRxDecoder+0x125c>)
 800168e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001692:	4619      	mov	r1, r3
 8001694:	0089      	lsls	r1, r1, #2
 8001696:	440b      	add	r3, r1
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	b2db      	uxtb	r3, r3
 800169c:	4413      	add	r3, r2
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	4b4d      	ldr	r3, [pc, #308]	; (80017d8 <ESPRxDecoder+0x1264>)
 80016a2:	701a      	strb	r2, [r3, #0]
 80016a4:	e0e7      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==64)  //No of temperture controller
 80016a6:	4b49      	ldr	r3, [pc, #292]	; (80017cc <ESPRxDecoder+0x1258>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b40      	cmp	r3, #64	; 0x40
 80016ac:	d103      	bne.n	80016b6 <ESPRxDecoder+0x1142>
			 {
				 Data_bufferptr=65;
 80016ae:	4b47      	ldr	r3, [pc, #284]	; (80017cc <ESPRxDecoder+0x1258>)
 80016b0:	2241      	movs	r2, #65	; 0x41
 80016b2:	701a      	strb	r2, [r3, #0]
 80016b4:	e0df      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==65)
 80016b6:	4b45      	ldr	r3, [pc, #276]	; (80017cc <ESPRxDecoder+0x1258>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b41      	cmp	r3, #65	; 0x41
 80016bc:	d111      	bne.n	80016e2 <ESPRxDecoder+0x116e>
			 {
				 Data_bufferptr=66;
 80016be:	4b43      	ldr	r3, [pc, #268]	; (80017cc <ESPRxDecoder+0x1258>)
 80016c0:	2242      	movs	r2, #66	; 0x42
 80016c2:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[49] = DecToASCIIFun(Rxwifi_data);
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 fa6a 	bl	8001ba0 <DecToASCIIFun>
 80016cc:	4603      	mov	r3, r0
 80016ce:	461a      	mov	r2, r3
 80016d0:	4b3f      	ldr	r3, [pc, #252]	; (80017d0 <ESPRxDecoder+0x125c>)
 80016d2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				 No_of_temp_Controller = Uart_rx_buffer[49];
 80016d6:	4b3e      	ldr	r3, [pc, #248]	; (80017d0 <ESPRxDecoder+0x125c>)
 80016d8:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80016dc:	4b3f      	ldr	r3, [pc, #252]	; (80017dc <ESPRxDecoder+0x1268>)
 80016de:	701a      	strb	r2, [r3, #0]
 80016e0:	e0c9      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==66)  //Type of temperture controller
 80016e2:	4b3a      	ldr	r3, [pc, #232]	; (80017cc <ESPRxDecoder+0x1258>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b42      	cmp	r3, #66	; 0x42
 80016e8:	d103      	bne.n	80016f2 <ESPRxDecoder+0x117e>
			 {
				 Data_bufferptr=67;
 80016ea:	4b38      	ldr	r3, [pc, #224]	; (80017cc <ESPRxDecoder+0x1258>)
 80016ec:	2243      	movs	r2, #67	; 0x43
 80016ee:	701a      	strb	r2, [r3, #0]
 80016f0:	e0c1      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==67)
 80016f2:	4b36      	ldr	r3, [pc, #216]	; (80017cc <ESPRxDecoder+0x1258>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b43      	cmp	r3, #67	; 0x43
 80016f8:	d111      	bne.n	800171e <ESPRxDecoder+0x11aa>
			 {
				 Data_bufferptr=68;
 80016fa:	4b34      	ldr	r3, [pc, #208]	; (80017cc <ESPRxDecoder+0x1258>)
 80016fc:	2244      	movs	r2, #68	; 0x44
 80016fe:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[50] = DecToASCIIFun(Rxwifi_data);
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	4618      	mov	r0, r3
 8001704:	f000 fa4c 	bl	8001ba0 <DecToASCIIFun>
 8001708:	4603      	mov	r3, r0
 800170a:	461a      	mov	r2, r3
 800170c:	4b30      	ldr	r3, [pc, #192]	; (80017d0 <ESPRxDecoder+0x125c>)
 800170e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				 Type_of_temp_Controller = Uart_rx_buffer[50];
 8001712:	4b2f      	ldr	r3, [pc, #188]	; (80017d0 <ESPRxDecoder+0x125c>)
 8001714:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8001718:	4b31      	ldr	r3, [pc, #196]	; (80017e0 <ESPRxDecoder+0x126c>)
 800171a:	701a      	strb	r2, [r3, #0]
 800171c:	e0ab      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==68)  //Type of power meter
 800171e:	4b2b      	ldr	r3, [pc, #172]	; (80017cc <ESPRxDecoder+0x1258>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b44      	cmp	r3, #68	; 0x44
 8001724:	d103      	bne.n	800172e <ESPRxDecoder+0x11ba>
			 {
				 Data_bufferptr=69;
 8001726:	4b29      	ldr	r3, [pc, #164]	; (80017cc <ESPRxDecoder+0x1258>)
 8001728:	2245      	movs	r2, #69	; 0x45
 800172a:	701a      	strb	r2, [r3, #0]
 800172c:	e0a3      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==69)
 800172e:	4b27      	ldr	r3, [pc, #156]	; (80017cc <ESPRxDecoder+0x1258>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b45      	cmp	r3, #69	; 0x45
 8001734:	d111      	bne.n	800175a <ESPRxDecoder+0x11e6>
			 {
				 Data_bufferptr=70;
 8001736:	4b25      	ldr	r3, [pc, #148]	; (80017cc <ESPRxDecoder+0x1258>)
 8001738:	2246      	movs	r2, #70	; 0x46
 800173a:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[51] = DecToASCIIFun(Rxwifi_data);
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	4618      	mov	r0, r3
 8001740:	f000 fa2e 	bl	8001ba0 <DecToASCIIFun>
 8001744:	4603      	mov	r3, r0
 8001746:	461a      	mov	r2, r3
 8001748:	4b21      	ldr	r3, [pc, #132]	; (80017d0 <ESPRxDecoder+0x125c>)
 800174a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
				 Type_of_powermeter = Uart_rx_buffer[51];
 800174e:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <ESPRxDecoder+0x125c>)
 8001750:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8001754:	4b23      	ldr	r3, [pc, #140]	; (80017e4 <ESPRxDecoder+0x1270>)
 8001756:	701a      	strb	r2, [r3, #0]
 8001758:	e08d      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==70)  //,
 800175a:	4b1c      	ldr	r3, [pc, #112]	; (80017cc <ESPRxDecoder+0x1258>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b46      	cmp	r3, #70	; 0x46
 8001760:	d103      	bne.n	800176a <ESPRxDecoder+0x11f6>
			 {
				 Data_bufferptr=71;
 8001762:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <ESPRxDecoder+0x1258>)
 8001764:	2247      	movs	r2, #71	; 0x47
 8001766:	701a      	strb	r2, [r3, #0]
 8001768:	e085      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==71)  //status
 800176a:	4b18      	ldr	r3, [pc, #96]	; (80017cc <ESPRxDecoder+0x1258>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b47      	cmp	r3, #71	; 0x47
 8001770:	d10c      	bne.n	800178c <ESPRxDecoder+0x1218>
			 {
				 Data_bufferptr=72;
 8001772:	4b16      	ldr	r3, [pc, #88]	; (80017cc <ESPRxDecoder+0x1258>)
 8001774:	2248      	movs	r2, #72	; 0x48
 8001776:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[52] = DecToASCIIFun(Rxwifi_data);
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	4618      	mov	r0, r3
 800177c:	f000 fa10 	bl	8001ba0 <DecToASCIIFun>
 8001780:	4603      	mov	r3, r0
 8001782:	461a      	mov	r2, r3
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <ESPRxDecoder+0x125c>)
 8001786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800178a:	e074      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==72)
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <ESPRxDecoder+0x1258>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b48      	cmp	r3, #72	; 0x48
 8001792:	d12b      	bne.n	80017ec <ESPRxDecoder+0x1278>
			 {
				 Data_bufferptr=73;
 8001794:	4b0d      	ldr	r3, [pc, #52]	; (80017cc <ESPRxDecoder+0x1258>)
 8001796:	2249      	movs	r2, #73	; 0x49
 8001798:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[53] = DecToASCIIFun(Rxwifi_data);
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	4618      	mov	r0, r3
 800179e:	f000 f9ff 	bl	8001ba0 <DecToASCIIFun>
 80017a2:	4603      	mov	r3, r0
 80017a4:	461a      	mov	r2, r3
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <ESPRxDecoder+0x125c>)
 80017a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				 Status_Http = Uart_rx_buffer[53]+(Uart_rx_buffer[52]*10);
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <ESPRxDecoder+0x125c>)
 80017ae:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80017b2:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <ESPRxDecoder+0x125c>)
 80017b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80017b8:	4619      	mov	r1, r3
 80017ba:	0089      	lsls	r1, r1, #2
 80017bc:	440b      	add	r3, r1
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	4413      	add	r3, r2
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <ESPRxDecoder+0x1274>)
 80017c8:	701a      	strb	r2, [r3, #0]
 80017ca:	e054      	b.n	8001876 <ESPRxDecoder+0x1302>
 80017cc:	200000d2 	.word	0x200000d2
 80017d0:	2000008c 	.word	0x2000008c
 80017d4:	200000ed 	.word	0x200000ed
 80017d8:	200000ee 	.word	0x200000ee
 80017dc:	200000ef 	.word	0x200000ef
 80017e0:	200000f0 	.word	0x200000f0
 80017e4:	200000f1 	.word	0x200000f1
 80017e8:	200000f2 	.word	0x200000f2
			 }
			  else if(Data_bufferptr==73)  //,
 80017ec:	4b8d      	ldr	r3, [pc, #564]	; (8001a24 <ESPRxDecoder+0x14b0>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b49      	cmp	r3, #73	; 0x49
 80017f2:	d103      	bne.n	80017fc <ESPRxDecoder+0x1288>
			 {
				 Data_bufferptr=74;
 80017f4:	4b8b      	ldr	r3, [pc, #556]	; (8001a24 <ESPRxDecoder+0x14b0>)
 80017f6:	224a      	movs	r2, #74	; 0x4a
 80017f8:	701a      	strb	r2, [r3, #0]
 80017fa:	e03c      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==74)  //status
 80017fc:	4b89      	ldr	r3, [pc, #548]	; (8001a24 <ESPRxDecoder+0x14b0>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b4a      	cmp	r3, #74	; 0x4a
 8001802:	d10c      	bne.n	800181e <ESPRxDecoder+0x12aa>
			 {
				 Data_bufferptr=75;
 8001804:	4b87      	ldr	r3, [pc, #540]	; (8001a24 <ESPRxDecoder+0x14b0>)
 8001806:	224b      	movs	r2, #75	; 0x4b
 8001808:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[54] = DecToASCIIFun(Rxwifi_data);
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	4618      	mov	r0, r3
 800180e:	f000 f9c7 	bl	8001ba0 <DecToASCIIFun>
 8001812:	4603      	mov	r3, r0
 8001814:	461a      	mov	r2, r3
 8001816:	4b84      	ldr	r3, [pc, #528]	; (8001a28 <ESPRxDecoder+0x14b4>)
 8001818:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800181c:	e02b      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==75)
 800181e:	4b81      	ldr	r3, [pc, #516]	; (8001a24 <ESPRxDecoder+0x14b0>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b4b      	cmp	r3, #75	; 0x4b
 8001824:	d124      	bne.n	8001870 <ESPRxDecoder+0x12fc>
			 {
				 Data_bufferptr=0;
 8001826:	4b7f      	ldr	r3, [pc, #508]	; (8001a24 <ESPRxDecoder+0x14b0>)
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[55] = DecToASCIIFun(Rxwifi_data);
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	4618      	mov	r0, r3
 8001830:	f000 f9b6 	bl	8001ba0 <DecToASCIIFun>
 8001834:	4603      	mov	r3, r0
 8001836:	461a      	mov	r2, r3
 8001838:	4b7b      	ldr	r3, [pc, #492]	; (8001a28 <ESPRxDecoder+0x14b4>)
 800183a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
				 IDGen_Skip_Http = Uart_rx_buffer[55]+(Uart_rx_buffer[54]*10);
 800183e:	4b7a      	ldr	r3, [pc, #488]	; (8001a28 <ESPRxDecoder+0x14b4>)
 8001840:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8001844:	4b78      	ldr	r3, [pc, #480]	; (8001a28 <ESPRxDecoder+0x14b4>)
 8001846:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800184a:	4619      	mov	r1, r3
 800184c:	0089      	lsls	r1, r1, #2
 800184e:	440b      	add	r3, r1
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	b2db      	uxtb	r3, r3
 8001854:	4413      	add	r3, r2
 8001856:	b2da      	uxtb	r2, r3
 8001858:	4b74      	ldr	r3, [pc, #464]	; (8001a2c <ESPRxDecoder+0x14b8>)
 800185a:	701a      	strb	r2, [r3, #0]
				 RefreshBlockInfo = 0;
 800185c:	4b74      	ldr	r3, [pc, #464]	; (8001a30 <ESPRxDecoder+0x14bc>)
 800185e:	2200      	movs	r2, #0
 8001860:	701a      	strb	r2, [r3, #0]
				 RxCompleteU2C1WIFI=1;
 8001862:	4b74      	ldr	r3, [pc, #464]	; (8001a34 <ESPRxDecoder+0x14c0>)
 8001864:	2201      	movs	r2, #1
 8001866:	701a      	strb	r2, [r3, #0]
				 Updatetimeinfo=1;
 8001868:	4b73      	ldr	r3, [pc, #460]	; (8001a38 <ESPRxDecoder+0x14c4>)
 800186a:	2201      	movs	r2, #1
 800186c:	701a      	strb	r2, [r3, #0]
 800186e:	e002      	b.n	8001876 <ESPRxDecoder+0x1302>
			 }
			 else
			 {
				 Data_bufferptr=0;
 8001870:	4b6c      	ldr	r3, [pc, #432]	; (8001a24 <ESPRxDecoder+0x14b0>)
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
			 }

		   if(Valid_DataWifi1)
 8001876:	4b71      	ldr	r3, [pc, #452]	; (8001a3c <ESPRxDecoder+0x14c8>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	f000 809b 	beq.w	80019b6 <ESPRxDecoder+0x1442>
		   {
			 if((Rxwifi_data=='U')&&(bufferptr==0))
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	2b55      	cmp	r3, #85	; 0x55
 8001884:	d107      	bne.n	8001896 <ESPRxDecoder+0x1322>
 8001886:	4b6e      	ldr	r3, [pc, #440]	; (8001a40 <ESPRxDecoder+0x14cc>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d103      	bne.n	8001896 <ESPRxDecoder+0x1322>
			 {
			 	bufferptr=1;
 800188e:	4b6c      	ldr	r3, [pc, #432]	; (8001a40 <ESPRxDecoder+0x14cc>)
 8001890:	2201      	movs	r2, #1
 8001892:	701a      	strb	r2, [r3, #0]
 8001894:	e040      	b.n	8001918 <ESPRxDecoder+0x13a4>
			 }
			 else if((Rxwifi_data=='n')&&(bufferptr==1))
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	2b6e      	cmp	r3, #110	; 0x6e
 800189a:	d107      	bne.n	80018ac <ESPRxDecoder+0x1338>
 800189c:	4b68      	ldr	r3, [pc, #416]	; (8001a40 <ESPRxDecoder+0x14cc>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d103      	bne.n	80018ac <ESPRxDecoder+0x1338>
			 {
			 	bufferptr=2;
 80018a4:	4b66      	ldr	r3, [pc, #408]	; (8001a40 <ESPRxDecoder+0x14cc>)
 80018a6:	2202      	movs	r2, #2
 80018a8:	701a      	strb	r2, [r3, #0]
 80018aa:	e035      	b.n	8001918 <ESPRxDecoder+0x13a4>
			 }
			 else if((Rxwifi_data=='l')&&(bufferptr==2))
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	2b6c      	cmp	r3, #108	; 0x6c
 80018b0:	d107      	bne.n	80018c2 <ESPRxDecoder+0x134e>
 80018b2:	4b63      	ldr	r3, [pc, #396]	; (8001a40 <ESPRxDecoder+0x14cc>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d103      	bne.n	80018c2 <ESPRxDecoder+0x134e>
			 {
			    bufferptr=3;
 80018ba:	4b61      	ldr	r3, [pc, #388]	; (8001a40 <ESPRxDecoder+0x14cc>)
 80018bc:	2203      	movs	r2, #3
 80018be:	701a      	strb	r2, [r3, #0]
 80018c0:	e02a      	b.n	8001918 <ESPRxDecoder+0x13a4>
			 }
			 else if((Rxwifi_data=='i')&&(bufferptr==3))
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	2b69      	cmp	r3, #105	; 0x69
 80018c6:	d107      	bne.n	80018d8 <ESPRxDecoder+0x1364>
 80018c8:	4b5d      	ldr	r3, [pc, #372]	; (8001a40 <ESPRxDecoder+0x14cc>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	d103      	bne.n	80018d8 <ESPRxDecoder+0x1364>
			 {
			    bufferptr=4;
 80018d0:	4b5b      	ldr	r3, [pc, #364]	; (8001a40 <ESPRxDecoder+0x14cc>)
 80018d2:	2204      	movs	r2, #4
 80018d4:	701a      	strb	r2, [r3, #0]
 80018d6:	e01f      	b.n	8001918 <ESPRxDecoder+0x13a4>
			 }
			 else if((Rxwifi_data=='n')&&(bufferptr==4))
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	2b6e      	cmp	r3, #110	; 0x6e
 80018dc:	d107      	bne.n	80018ee <ESPRxDecoder+0x137a>
 80018de:	4b58      	ldr	r3, [pc, #352]	; (8001a40 <ESPRxDecoder+0x14cc>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	d103      	bne.n	80018ee <ESPRxDecoder+0x137a>
			 {
			    bufferptr=5;
 80018e6:	4b56      	ldr	r3, [pc, #344]	; (8001a40 <ESPRxDecoder+0x14cc>)
 80018e8:	2205      	movs	r2, #5
 80018ea:	701a      	strb	r2, [r3, #0]
 80018ec:	e014      	b.n	8001918 <ESPRxDecoder+0x13a4>
			 }
			 else if((Rxwifi_data=='k')&&(bufferptr==5))
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	2b6b      	cmp	r3, #107	; 0x6b
 80018f2:	d111      	bne.n	8001918 <ESPRxDecoder+0x13a4>
 80018f4:	4b52      	ldr	r3, [pc, #328]	; (8001a40 <ESPRxDecoder+0x14cc>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b05      	cmp	r3, #5
 80018fa:	d10d      	bne.n	8001918 <ESPRxDecoder+0x13a4>
			 {
			    bufferptr=0;
 80018fc:	4b50      	ldr	r3, [pc, #320]	; (8001a40 <ESPRxDecoder+0x14cc>)
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8001902:	2300      	movs	r3, #0
 8001904:	71bb      	strb	r3, [r7, #6]
				wifi_command=102;
 8001906:	4b4f      	ldr	r3, [pc, #316]	; (8001a44 <ESPRxDecoder+0x14d0>)
 8001908:	2266      	movs	r2, #102	; 0x66
 800190a:	701a      	strb	r2, [r3, #0]
				//RefreshBlockInfo=0;//update at rx end
				Error_Close=0;
 800190c:	4b4e      	ldr	r3, [pc, #312]	; (8001a48 <ESPRxDecoder+0x14d4>)
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
				Valid_DataWifi1=0;
 8001912:	4b4a      	ldr	r3, [pc, #296]	; (8001a3c <ESPRxDecoder+0x14c8>)
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
				//RxCompleteU2C1WIFI=1;			  /*receive complete*/
			 }
			 if((Rxwifi_data=='C')&&(bufferptr==0))
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	2b43      	cmp	r3, #67	; 0x43
 800191c:	d107      	bne.n	800192e <ESPRxDecoder+0x13ba>
 800191e:	4b48      	ldr	r3, [pc, #288]	; (8001a40 <ESPRxDecoder+0x14cc>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d103      	bne.n	800192e <ESPRxDecoder+0x13ba>
			 {
			 	bufferptr=1;
 8001926:	4b46      	ldr	r3, [pc, #280]	; (8001a40 <ESPRxDecoder+0x14cc>)
 8001928:	2201      	movs	r2, #1
 800192a:	701a      	strb	r2, [r3, #0]
 800192c:	e0fe      	b.n	8001b2c <ESPRxDecoder+0x15b8>
			 }
			 else if((Rxwifi_data=='L')&&(bufferptr==1))
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	2b4c      	cmp	r3, #76	; 0x4c
 8001932:	d107      	bne.n	8001944 <ESPRxDecoder+0x13d0>
 8001934:	4b42      	ldr	r3, [pc, #264]	; (8001a40 <ESPRxDecoder+0x14cc>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d103      	bne.n	8001944 <ESPRxDecoder+0x13d0>
			 {
			 	bufferptr=2;
 800193c:	4b40      	ldr	r3, [pc, #256]	; (8001a40 <ESPRxDecoder+0x14cc>)
 800193e:	2202      	movs	r2, #2
 8001940:	701a      	strb	r2, [r3, #0]
 8001942:	e0f3      	b.n	8001b2c <ESPRxDecoder+0x15b8>
			 }
			 else if((Rxwifi_data=='O')&&(bufferptr==2))
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	2b4f      	cmp	r3, #79	; 0x4f
 8001948:	d107      	bne.n	800195a <ESPRxDecoder+0x13e6>
 800194a:	4b3d      	ldr	r3, [pc, #244]	; (8001a40 <ESPRxDecoder+0x14cc>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d103      	bne.n	800195a <ESPRxDecoder+0x13e6>
			 {
			    bufferptr=3;
 8001952:	4b3b      	ldr	r3, [pc, #236]	; (8001a40 <ESPRxDecoder+0x14cc>)
 8001954:	2203      	movs	r2, #3
 8001956:	701a      	strb	r2, [r3, #0]
 8001958:	e0e8      	b.n	8001b2c <ESPRxDecoder+0x15b8>
			 }
			 else if((Rxwifi_data=='S')&&(bufferptr==3))
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	2b53      	cmp	r3, #83	; 0x53
 800195e:	d107      	bne.n	8001970 <ESPRxDecoder+0x13fc>
 8001960:	4b37      	ldr	r3, [pc, #220]	; (8001a40 <ESPRxDecoder+0x14cc>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b03      	cmp	r3, #3
 8001966:	d103      	bne.n	8001970 <ESPRxDecoder+0x13fc>
			 {
			    bufferptr=4;
 8001968:	4b35      	ldr	r3, [pc, #212]	; (8001a40 <ESPRxDecoder+0x14cc>)
 800196a:	2204      	movs	r2, #4
 800196c:	701a      	strb	r2, [r3, #0]
 800196e:	e0dd      	b.n	8001b2c <ESPRxDecoder+0x15b8>
			 }
			 else if((Rxwifi_data=='E')&&(bufferptr==4))
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	2b45      	cmp	r3, #69	; 0x45
 8001974:	d107      	bne.n	8001986 <ESPRxDecoder+0x1412>
 8001976:	4b32      	ldr	r3, [pc, #200]	; (8001a40 <ESPRxDecoder+0x14cc>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b04      	cmp	r3, #4
 800197c:	d103      	bne.n	8001986 <ESPRxDecoder+0x1412>
			 {
			    bufferptr=5;
 800197e:	4b30      	ldr	r3, [pc, #192]	; (8001a40 <ESPRxDecoder+0x14cc>)
 8001980:	2205      	movs	r2, #5
 8001982:	701a      	strb	r2, [r3, #0]
 8001984:	e0d2      	b.n	8001b2c <ESPRxDecoder+0x15b8>
			 }
			 else if((Rxwifi_data=='D')&&(bufferptr==5))
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	2b44      	cmp	r3, #68	; 0x44
 800198a:	f040 80f9 	bne.w	8001b80 <ESPRxDecoder+0x160c>
 800198e:	4b2c      	ldr	r3, [pc, #176]	; (8001a40 <ESPRxDecoder+0x14cc>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b05      	cmp	r3, #5
 8001994:	f040 80f4 	bne.w	8001b80 <ESPRxDecoder+0x160c>
			 {
			    bufferptr=0;
 8001998:	4b29      	ldr	r3, [pc, #164]	; (8001a40 <ESPRxDecoder+0x14cc>)
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 800199e:	2300      	movs	r3, #0
 80019a0:	71bb      	strb	r3, [r7, #6]
				wifi_command=102;
 80019a2:	4b28      	ldr	r3, [pc, #160]	; (8001a44 <ESPRxDecoder+0x14d0>)
 80019a4:	2266      	movs	r2, #102	; 0x66
 80019a6:	701a      	strb	r2, [r3, #0]
				//RefreshBlockInfo=0;//update at rx end
				Error_Close=0;
 80019a8:	4b27      	ldr	r3, [pc, #156]	; (8001a48 <ESPRxDecoder+0x14d4>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
				Valid_DataWifi1=0;
 80019ae:	4b23      	ldr	r3, [pc, #140]	; (8001a3c <ESPRxDecoder+0x14c8>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
					wifi_command=102;}
				Valid_DataWifi1=0;
				//RxCompleteU2C1WIFI=0;   /*Wrong receive*/
			 }
			}
		break;
 80019b4:	e0e4      	b.n	8001b80 <ESPRxDecoder+0x160c>
			  if((Rxwifi_data=='U')&&(bufferptr==0))
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	2b55      	cmp	r3, #85	; 0x55
 80019ba:	d107      	bne.n	80019cc <ESPRxDecoder+0x1458>
 80019bc:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <ESPRxDecoder+0x14cc>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d103      	bne.n	80019cc <ESPRxDecoder+0x1458>
			 	bufferptr=1;
 80019c4:	4b1e      	ldr	r3, [pc, #120]	; (8001a40 <ESPRxDecoder+0x14cc>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	701a      	strb	r2, [r3, #0]
 80019ca:	e054      	b.n	8001a76 <ESPRxDecoder+0x1502>
			 else if((Rxwifi_data=='n')&&(bufferptr==1))
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	2b6e      	cmp	r3, #110	; 0x6e
 80019d0:	d107      	bne.n	80019e2 <ESPRxDecoder+0x146e>
 80019d2:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <ESPRxDecoder+0x14cc>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d103      	bne.n	80019e2 <ESPRxDecoder+0x146e>
			 	bufferptr=2;
 80019da:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <ESPRxDecoder+0x14cc>)
 80019dc:	2202      	movs	r2, #2
 80019de:	701a      	strb	r2, [r3, #0]
 80019e0:	e049      	b.n	8001a76 <ESPRxDecoder+0x1502>
			 else if((Rxwifi_data=='l')&&(bufferptr==2))
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	2b6c      	cmp	r3, #108	; 0x6c
 80019e6:	d107      	bne.n	80019f8 <ESPRxDecoder+0x1484>
 80019e8:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <ESPRxDecoder+0x14cc>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d103      	bne.n	80019f8 <ESPRxDecoder+0x1484>
			    bufferptr=3;
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <ESPRxDecoder+0x14cc>)
 80019f2:	2203      	movs	r2, #3
 80019f4:	701a      	strb	r2, [r3, #0]
 80019f6:	e03e      	b.n	8001a76 <ESPRxDecoder+0x1502>
			 else if((Rxwifi_data=='i')&&(bufferptr==3))
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	2b69      	cmp	r3, #105	; 0x69
 80019fc:	d107      	bne.n	8001a0e <ESPRxDecoder+0x149a>
 80019fe:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <ESPRxDecoder+0x14cc>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b03      	cmp	r3, #3
 8001a04:	d103      	bne.n	8001a0e <ESPRxDecoder+0x149a>
			    bufferptr=4;
 8001a06:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <ESPRxDecoder+0x14cc>)
 8001a08:	2204      	movs	r2, #4
 8001a0a:	701a      	strb	r2, [r3, #0]
 8001a0c:	e033      	b.n	8001a76 <ESPRxDecoder+0x1502>
			 else if((Rxwifi_data=='n')&&(bufferptr==4))
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	2b6e      	cmp	r3, #110	; 0x6e
 8001a12:	d11b      	bne.n	8001a4c <ESPRxDecoder+0x14d8>
 8001a14:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <ESPRxDecoder+0x14cc>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b04      	cmp	r3, #4
 8001a1a:	d117      	bne.n	8001a4c <ESPRxDecoder+0x14d8>
			    bufferptr=5;
 8001a1c:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <ESPRxDecoder+0x14cc>)
 8001a1e:	2205      	movs	r2, #5
 8001a20:	701a      	strb	r2, [r3, #0]
 8001a22:	e028      	b.n	8001a76 <ESPRxDecoder+0x1502>
 8001a24:	200000d2 	.word	0x200000d2
 8001a28:	2000008c 	.word	0x2000008c
 8001a2c:	200000f3 	.word	0x200000f3
 8001a30:	2000079d 	.word	0x2000079d
 8001a34:	200000d7 	.word	0x200000d7
 8001a38:	200000d6 	.word	0x200000d6
 8001a3c:	200000d8 	.word	0x200000d8
 8001a40:	20000796 	.word	0x20000796
 8001a44:	20000698 	.word	0x20000698
 8001a48:	200000d5 	.word	0x200000d5
			 else if((Rxwifi_data=='k')&&(bufferptr==5))
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	2b6b      	cmp	r3, #107	; 0x6b
 8001a50:	d111      	bne.n	8001a76 <ESPRxDecoder+0x1502>
 8001a52:	4b4f      	ldr	r3, [pc, #316]	; (8001b90 <ESPRxDecoder+0x161c>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b05      	cmp	r3, #5
 8001a58:	d10d      	bne.n	8001a76 <ESPRxDecoder+0x1502>
			    bufferptr=0;
 8001a5a:	4b4d      	ldr	r3, [pc, #308]	; (8001b90 <ESPRxDecoder+0x161c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	71bb      	strb	r3, [r7, #6]
				wifi_command=102;
 8001a64:	4b4b      	ldr	r3, [pc, #300]	; (8001b94 <ESPRxDecoder+0x1620>)
 8001a66:	2266      	movs	r2, #102	; 0x66
 8001a68:	701a      	strb	r2, [r3, #0]
				Error_Close=0;
 8001a6a:	4b4b      	ldr	r3, [pc, #300]	; (8001b98 <ESPRxDecoder+0x1624>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
				Valid_DataWifi1=0;
 8001a70:	4b4a      	ldr	r3, [pc, #296]	; (8001b9c <ESPRxDecoder+0x1628>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]
			   if((Rxwifi_data=='C')&&(bufferptr==0))
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	2b43      	cmp	r3, #67	; 0x43
 8001a7a:	d107      	bne.n	8001a8c <ESPRxDecoder+0x1518>
 8001a7c:	4b44      	ldr	r3, [pc, #272]	; (8001b90 <ESPRxDecoder+0x161c>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d103      	bne.n	8001a8c <ESPRxDecoder+0x1518>
			 	bufferptr=1;
 8001a84:	4b42      	ldr	r3, [pc, #264]	; (8001b90 <ESPRxDecoder+0x161c>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	701a      	strb	r2, [r3, #0]
 8001a8a:	e04f      	b.n	8001b2c <ESPRxDecoder+0x15b8>
			 else if((Rxwifi_data=='L')&&(bufferptr==1))
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	2b4c      	cmp	r3, #76	; 0x4c
 8001a90:	d107      	bne.n	8001aa2 <ESPRxDecoder+0x152e>
 8001a92:	4b3f      	ldr	r3, [pc, #252]	; (8001b90 <ESPRxDecoder+0x161c>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d103      	bne.n	8001aa2 <ESPRxDecoder+0x152e>
			 	bufferptr=2;
 8001a9a:	4b3d      	ldr	r3, [pc, #244]	; (8001b90 <ESPRxDecoder+0x161c>)
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	701a      	strb	r2, [r3, #0]
 8001aa0:	e044      	b.n	8001b2c <ESPRxDecoder+0x15b8>
			 else if((Rxwifi_data=='O')&&(bufferptr==2))
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	2b4f      	cmp	r3, #79	; 0x4f
 8001aa6:	d107      	bne.n	8001ab8 <ESPRxDecoder+0x1544>
 8001aa8:	4b39      	ldr	r3, [pc, #228]	; (8001b90 <ESPRxDecoder+0x161c>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d103      	bne.n	8001ab8 <ESPRxDecoder+0x1544>
			    bufferptr=3;
 8001ab0:	4b37      	ldr	r3, [pc, #220]	; (8001b90 <ESPRxDecoder+0x161c>)
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	701a      	strb	r2, [r3, #0]
 8001ab6:	e039      	b.n	8001b2c <ESPRxDecoder+0x15b8>
			 else if((Rxwifi_data=='S')&&(bufferptr==3))
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	2b53      	cmp	r3, #83	; 0x53
 8001abc:	d107      	bne.n	8001ace <ESPRxDecoder+0x155a>
 8001abe:	4b34      	ldr	r3, [pc, #208]	; (8001b90 <ESPRxDecoder+0x161c>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d103      	bne.n	8001ace <ESPRxDecoder+0x155a>
			    bufferptr=4;
 8001ac6:	4b32      	ldr	r3, [pc, #200]	; (8001b90 <ESPRxDecoder+0x161c>)
 8001ac8:	2204      	movs	r2, #4
 8001aca:	701a      	strb	r2, [r3, #0]
 8001acc:	e02e      	b.n	8001b2c <ESPRxDecoder+0x15b8>
			 else if((Rxwifi_data=='E')&&(bufferptr==4))
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	2b45      	cmp	r3, #69	; 0x45
 8001ad2:	d107      	bne.n	8001ae4 <ESPRxDecoder+0x1570>
 8001ad4:	4b2e      	ldr	r3, [pc, #184]	; (8001b90 <ESPRxDecoder+0x161c>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d103      	bne.n	8001ae4 <ESPRxDecoder+0x1570>
			    bufferptr=5;
 8001adc:	4b2c      	ldr	r3, [pc, #176]	; (8001b90 <ESPRxDecoder+0x161c>)
 8001ade:	2205      	movs	r2, #5
 8001ae0:	701a      	strb	r2, [r3, #0]
 8001ae2:	e023      	b.n	8001b2c <ESPRxDecoder+0x15b8>
			 else if((Rxwifi_data=='D')&&(bufferptr==5))
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	2b44      	cmp	r3, #68	; 0x44
 8001ae8:	d14a      	bne.n	8001b80 <ESPRxDecoder+0x160c>
 8001aea:	4b29      	ldr	r3, [pc, #164]	; (8001b90 <ESPRxDecoder+0x161c>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b05      	cmp	r3, #5
 8001af0:	d146      	bne.n	8001b80 <ESPRxDecoder+0x160c>
			    bufferptr=0;
 8001af2:	4b27      	ldr	r3, [pc, #156]	; (8001b90 <ESPRxDecoder+0x161c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	71bb      	strb	r3, [r7, #6]
				if(++Error_Close>3){wifi_command=10;Error_Close=0;}
 8001afc:	4b26      	ldr	r3, [pc, #152]	; (8001b98 <ESPRxDecoder+0x1624>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	3301      	adds	r3, #1
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	4b24      	ldr	r3, [pc, #144]	; (8001b98 <ESPRxDecoder+0x1624>)
 8001b06:	701a      	strb	r2, [r3, #0]
 8001b08:	4b23      	ldr	r3, [pc, #140]	; (8001b98 <ESPRxDecoder+0x1624>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	d906      	bls.n	8001b1e <ESPRxDecoder+0x15aa>
 8001b10:	4b20      	ldr	r3, [pc, #128]	; (8001b94 <ESPRxDecoder+0x1620>)
 8001b12:	220a      	movs	r2, #10
 8001b14:	701a      	strb	r2, [r3, #0]
 8001b16:	4b20      	ldr	r3, [pc, #128]	; (8001b98 <ESPRxDecoder+0x1624>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]
 8001b1c:	e002      	b.n	8001b24 <ESPRxDecoder+0x15b0>
					wifi_command=102;}
 8001b1e:	4b1d      	ldr	r3, [pc, #116]	; (8001b94 <ESPRxDecoder+0x1620>)
 8001b20:	2266      	movs	r2, #102	; 0x66
 8001b22:	701a      	strb	r2, [r3, #0]
				Valid_DataWifi1=0;
 8001b24:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <ESPRxDecoder+0x1628>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	701a      	strb	r2, [r3, #0]
		break;
 8001b2a:	e029      	b.n	8001b80 <ESPRxDecoder+0x160c>
 8001b2c:	e028      	b.n	8001b80 <ESPRxDecoder+0x160c>
		case 8:
			 if((Rxwifi_data=='O')&&(bufferptr==0))
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	2b4f      	cmp	r3, #79	; 0x4f
 8001b32:	d107      	bne.n	8001b44 <ESPRxDecoder+0x15d0>
 8001b34:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <ESPRxDecoder+0x161c>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d103      	bne.n	8001b44 <ESPRxDecoder+0x15d0>
			 {
			 	bufferptr=1;
 8001b3c:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <ESPRxDecoder+0x161c>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	701a      	strb	r2, [r3, #0]
			 {
			 	bufferptr=0;
				Rxseqdecoder=0;
				wifi_command=20;
			 }
		break;
 8001b42:	e01f      	b.n	8001b84 <ESPRxDecoder+0x1610>
			 else if((Rxwifi_data=='K')&&(bufferptr==1))
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	2b4b      	cmp	r3, #75	; 0x4b
 8001b48:	d11c      	bne.n	8001b84 <ESPRxDecoder+0x1610>
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <ESPRxDecoder+0x161c>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d118      	bne.n	8001b84 <ESPRxDecoder+0x1610>
			 	bufferptr=0;
 8001b52:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <ESPRxDecoder+0x161c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	71bb      	strb	r3, [r7, #6]
				wifi_command=20;
 8001b5c:	4b0d      	ldr	r3, [pc, #52]	; (8001b94 <ESPRxDecoder+0x1620>)
 8001b5e:	2214      	movs	r2, #20
 8001b60:	701a      	strb	r2, [r3, #0]
		break;
 8001b62:	e00f      	b.n	8001b84 <ESPRxDecoder+0x1610>
	   	default:
		break;
 8001b64:	bf00      	nop
 8001b66:	e00e      	b.n	8001b86 <ESPRxDecoder+0x1612>
		break;
 8001b68:	bf00      	nop
 8001b6a:	e00c      	b.n	8001b86 <ESPRxDecoder+0x1612>
		break;
 8001b6c:	bf00      	nop
 8001b6e:	e00a      	b.n	8001b86 <ESPRxDecoder+0x1612>
		break;
 8001b70:	bf00      	nop
 8001b72:	e008      	b.n	8001b86 <ESPRxDecoder+0x1612>
		break;
 8001b74:	bf00      	nop
 8001b76:	e006      	b.n	8001b86 <ESPRxDecoder+0x1612>
		break;
 8001b78:	bf00      	nop
 8001b7a:	e004      	b.n	8001b86 <ESPRxDecoder+0x1612>
		break;
 8001b7c:	bf00      	nop
 8001b7e:	e002      	b.n	8001b86 <ESPRxDecoder+0x1612>
		break;
 8001b80:	bf00      	nop
 8001b82:	e000      	b.n	8001b86 <ESPRxDecoder+0x1612>
		break;
 8001b84:	bf00      	nop
		}
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000796 	.word	0x20000796
 8001b94:	20000698 	.word	0x20000698
 8001b98:	200000d5 	.word	0x200000d5
 8001b9c:	200000d8 	.word	0x200000d8

08001ba0 <DecToASCIIFun>:

unsigned char DecToASCIIFun(unsigned char TempVar)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]
	unsigned char  ASCIIHex;
	switch(TempVar)
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	3b30      	subs	r3, #48	; 0x30
 8001bae:	2b16      	cmp	r3, #22
 8001bb0:	d860      	bhi.n	8001c74 <DecToASCIIFun+0xd4>
 8001bb2:	a201      	add	r2, pc, #4	; (adr r2, 8001bb8 <DecToASCIIFun+0x18>)
 8001bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb8:	08001c15 	.word	0x08001c15
 8001bbc:	08001c1b 	.word	0x08001c1b
 8001bc0:	08001c21 	.word	0x08001c21
 8001bc4:	08001c27 	.word	0x08001c27
 8001bc8:	08001c2d 	.word	0x08001c2d
 8001bcc:	08001c33 	.word	0x08001c33
 8001bd0:	08001c39 	.word	0x08001c39
 8001bd4:	08001c3f 	.word	0x08001c3f
 8001bd8:	08001c45 	.word	0x08001c45
 8001bdc:	08001c4b 	.word	0x08001c4b
 8001be0:	08001c75 	.word	0x08001c75
 8001be4:	08001c75 	.word	0x08001c75
 8001be8:	08001c75 	.word	0x08001c75
 8001bec:	08001c75 	.word	0x08001c75
 8001bf0:	08001c75 	.word	0x08001c75
 8001bf4:	08001c75 	.word	0x08001c75
 8001bf8:	08001c75 	.word	0x08001c75
 8001bfc:	08001c51 	.word	0x08001c51
 8001c00:	08001c57 	.word	0x08001c57
 8001c04:	08001c5d 	.word	0x08001c5d
 8001c08:	08001c63 	.word	0x08001c63
 8001c0c:	08001c69 	.word	0x08001c69
 8001c10:	08001c6f 	.word	0x08001c6f
	{
	case 48:
			ASCIIHex = 0x00;
 8001c14:	2300      	movs	r3, #0
 8001c16:	73fb      	strb	r3, [r7, #15]
			break;
 8001c18:	e02c      	b.n	8001c74 <DecToASCIIFun+0xd4>
	case 49:
			ASCIIHex = 0x01;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	73fb      	strb	r3, [r7, #15]
			break;
 8001c1e:	e029      	b.n	8001c74 <DecToASCIIFun+0xd4>
	case 50:
			ASCIIHex = 0x02;
 8001c20:	2302      	movs	r3, #2
 8001c22:	73fb      	strb	r3, [r7, #15]
			break;
 8001c24:	e026      	b.n	8001c74 <DecToASCIIFun+0xd4>
	case 51:
			ASCIIHex = 0x03;
 8001c26:	2303      	movs	r3, #3
 8001c28:	73fb      	strb	r3, [r7, #15]
			break;
 8001c2a:	e023      	b.n	8001c74 <DecToASCIIFun+0xd4>
	case 52:
			ASCIIHex = 0x04;
 8001c2c:	2304      	movs	r3, #4
 8001c2e:	73fb      	strb	r3, [r7, #15]
			break;
 8001c30:	e020      	b.n	8001c74 <DecToASCIIFun+0xd4>
	case 53:
			ASCIIHex = 0x05;
 8001c32:	2305      	movs	r3, #5
 8001c34:	73fb      	strb	r3, [r7, #15]
			break;
 8001c36:	e01d      	b.n	8001c74 <DecToASCIIFun+0xd4>
	case 54:
			ASCIIHex = 0x06;
 8001c38:	2306      	movs	r3, #6
 8001c3a:	73fb      	strb	r3, [r7, #15]
			break;
 8001c3c:	e01a      	b.n	8001c74 <DecToASCIIFun+0xd4>
	case 55:
			ASCIIHex = 0x07;
 8001c3e:	2307      	movs	r3, #7
 8001c40:	73fb      	strb	r3, [r7, #15]
			break;
 8001c42:	e017      	b.n	8001c74 <DecToASCIIFun+0xd4>
	case 56:
			ASCIIHex = 0x08;
 8001c44:	2308      	movs	r3, #8
 8001c46:	73fb      	strb	r3, [r7, #15]
			break;
 8001c48:	e014      	b.n	8001c74 <DecToASCIIFun+0xd4>
	case 57:
			ASCIIHex = 0x09;
 8001c4a:	2309      	movs	r3, #9
 8001c4c:	73fb      	strb	r3, [r7, #15]
			break;
 8001c4e:	e011      	b.n	8001c74 <DecToASCIIFun+0xd4>
	case 65:
			ASCIIHex = 0x0A;
 8001c50:	230a      	movs	r3, #10
 8001c52:	73fb      	strb	r3, [r7, #15]
			break;
 8001c54:	e00e      	b.n	8001c74 <DecToASCIIFun+0xd4>
	case 66:
			ASCIIHex = 0x0B;
 8001c56:	230b      	movs	r3, #11
 8001c58:	73fb      	strb	r3, [r7, #15]
			break;
 8001c5a:	e00b      	b.n	8001c74 <DecToASCIIFun+0xd4>
	case 67:
			ASCIIHex = 0x0C;
 8001c5c:	230c      	movs	r3, #12
 8001c5e:	73fb      	strb	r3, [r7, #15]
			break;
 8001c60:	e008      	b.n	8001c74 <DecToASCIIFun+0xd4>
	case 68:
			ASCIIHex = 0x0D;
 8001c62:	230d      	movs	r3, #13
 8001c64:	73fb      	strb	r3, [r7, #15]
			break;
 8001c66:	e005      	b.n	8001c74 <DecToASCIIFun+0xd4>
	case 69:
			ASCIIHex = 0x0E;
 8001c68:	230e      	movs	r3, #14
 8001c6a:	73fb      	strb	r3, [r7, #15]
			break;
 8001c6c:	e002      	b.n	8001c74 <DecToASCIIFun+0xd4>
	case 70:
			ASCIIHex = 0x0F;
 8001c6e:	230f      	movs	r3, #15
 8001c70:	73fb      	strb	r3, [r7, #15]
			break;
 8001c72:	bf00      	nop
	}
	return (ASCIIHex);
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop

08001c84 <HAL_TIM_PeriodElapsedCallback>:
 uint8_t Seccount1,Seccount2;

 extern uint16_t ProcessTotalMin1,ProcessTotalMin2;

 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 	if(htim == &htim7)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a90      	ldr	r2, [pc, #576]	; (8001ed0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d102      	bne.n	8001c9a <HAL_TIM_PeriodElapsedCallback+0x16>
 	{
 		Flag1MS=1;
 8001c94:	4b8f      	ldr	r3, [pc, #572]	; (8001ed4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	701a      	strb	r2, [r3, #0]
 	}
 	if(htim == &htim6)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a8e      	ldr	r2, [pc, #568]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	f040 8169 	bne.w	8001f76 <HAL_TIM_PeriodElapsedCallback+0x2f2>
	{
 		Flag100milliSeconds=1;
 8001ca4:	4b8d      	ldr	r3, [pc, #564]	; (8001edc <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	701a      	strb	r2, [r3, #0]
 		if(++LocCount1S >= 10)
 8001caa:	4b8d      	ldr	r3, [pc, #564]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	4b8b      	ldr	r3, [pc, #556]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001cb4:	701a      	strb	r2, [r3, #0]
 8001cb6:	4b8a      	ldr	r3, [pc, #552]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b09      	cmp	r3, #9
 8001cbc:	f240 80a6 	bls.w	8001e0c <HAL_TIM_PeriodElapsedCallback+0x188>
		{
			LocCount1S=0;
 8001cc0:	4b87      	ldr	r3, [pc, #540]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]
			if(++SimCount >= 20)
 8001cc6:	4b87      	ldr	r3, [pc, #540]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	4b85      	ldr	r3, [pc, #532]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001cd0:	701a      	strb	r2, [r3, #0]
 8001cd2:	4b84      	ldr	r3, [pc, #528]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b13      	cmp	r3, #19
 8001cd8:	d906      	bls.n	8001ce8 <HAL_TIM_PeriodElapsedCallback+0x64>
			{
				SimCount=0;
 8001cda:	4b82      	ldr	r3, [pc, #520]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOC, RELAY4_Pin);
 8001ce0:	2120      	movs	r1, #32
 8001ce2:	4881      	ldr	r0, [pc, #516]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001ce4:	f009 fb4c 	bl	800b380 <HAL_GPIO_TogglePin>
			}
			Flag1Second =1;
 8001ce8:	4b80      	ldr	r3, [pc, #512]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	701a      	strb	r2, [r3, #0]
			//DHCP_time_handler( );
			if(!stop_timer_count){
 8001cee:	4b80      	ldr	r3, [pc, #512]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d148      	bne.n	8001d88 <HAL_TIM_PeriodElapsedCallback+0x104>
				if(start_process_control_timer ==1){
 8001cf6:	4b7f      	ldr	r3, [pc, #508]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d120      	bne.n	8001d40 <HAL_TIM_PeriodElapsedCallback+0xbc>
					if(++Seccount1 >= 59){
 8001cfe:	4b7e      	ldr	r3, [pc, #504]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	3301      	adds	r3, #1
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	4b7c      	ldr	r3, [pc, #496]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001d08:	701a      	strb	r2, [r3, #0]
 8001d0a:	4b7b      	ldr	r3, [pc, #492]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b3a      	cmp	r3, #58	; 0x3a
 8001d10:	d93a      	bls.n	8001d88 <HAL_TIM_PeriodElapsedCallback+0x104>
						Seccount1=0;
 8001d12:	4b79      	ldr	r3, [pc, #484]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
						if(++seq1_count_inc >= ProcessTotalMin1){
 8001d18:	4b78      	ldr	r3, [pc, #480]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	4b76      	ldr	r3, [pc, #472]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001d22:	801a      	strh	r2, [r3, #0]
 8001d24:	4b75      	ldr	r3, [pc, #468]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001d26:	881a      	ldrh	r2, [r3, #0]
 8001d28:	4b75      	ldr	r3, [pc, #468]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d32b      	bcc.n	8001d88 <HAL_TIM_PeriodElapsedCallback+0x104>
							seq1_count_inc = ProcessTotalMin1;
 8001d30:	4b73      	ldr	r3, [pc, #460]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001d32:	881a      	ldrh	r2, [r3, #0]
 8001d34:	4b71      	ldr	r3, [pc, #452]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001d36:	801a      	strh	r2, [r3, #0]
							process_complete=1;
 8001d38:	4b72      	ldr	r3, [pc, #456]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	701a      	strb	r2, [r3, #0]
 8001d3e:	e023      	b.n	8001d88 <HAL_TIM_PeriodElapsedCallback+0x104>
						}
					}
				}
				else if(start_process_control_timer == 2){
 8001d40:	4b6c      	ldr	r3, [pc, #432]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d11f      	bne.n	8001d88 <HAL_TIM_PeriodElapsedCallback+0x104>
					if(++Seccount2 >=59){
 8001d48:	4b6f      	ldr	r3, [pc, #444]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	4b6d      	ldr	r3, [pc, #436]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001d52:	701a      	strb	r2, [r3, #0]
 8001d54:	4b6c      	ldr	r3, [pc, #432]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b3a      	cmp	r3, #58	; 0x3a
 8001d5a:	d915      	bls.n	8001d88 <HAL_TIM_PeriodElapsedCallback+0x104>
						Seccount2=0;
 8001d5c:	4b6a      	ldr	r3, [pc, #424]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
						if(++seq2_count_inc >= ProcessTotalMin2){
 8001d62:	4b6a      	ldr	r3, [pc, #424]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	3301      	adds	r3, #1
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	4b68      	ldr	r3, [pc, #416]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001d6c:	801a      	strh	r2, [r3, #0]
 8001d6e:	4b67      	ldr	r3, [pc, #412]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001d70:	881a      	ldrh	r2, [r3, #0]
 8001d72:	4b67      	ldr	r3, [pc, #412]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d306      	bcc.n	8001d88 <HAL_TIM_PeriodElapsedCallback+0x104>
							seq2_count_inc = ProcessTotalMin2;
 8001d7a:	4b65      	ldr	r3, [pc, #404]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001d7c:	881a      	ldrh	r2, [r3, #0]
 8001d7e:	4b63      	ldr	r3, [pc, #396]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001d80:	801a      	strh	r2, [r3, #0]
							process_complete=2;
 8001d82:	4b60      	ldr	r3, [pc, #384]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001d84:	2202      	movs	r2, #2
 8001d86:	701a      	strb	r2, [r3, #0]
						}
					}
				}
			}

			seq1_remaining_time_total_min = ProcessTotalMin1-seq1_count_inc;
 8001d88:	4b5d      	ldr	r3, [pc, #372]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001d8a:	881a      	ldrh	r2, [r3, #0]
 8001d8c:	4b5b      	ldr	r3, [pc, #364]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	4b5f      	ldr	r3, [pc, #380]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001d96:	801a      	strh	r2, [r3, #0]
			seq2_remaining_time_total_min = ProcessTotalMin2-seq2_count_inc;
 8001d98:	4b5d      	ldr	r3, [pc, #372]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001d9a:	881a      	ldrh	r2, [r3, #0]
 8001d9c:	4b5b      	ldr	r3, [pc, #364]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	4b5c      	ldr	r3, [pc, #368]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001da6:	801a      	strh	r2, [r3, #0]
			seq1_remaining_time_Hr  = (seq1_remaining_time_total_min/60);
 8001da8:	4b5a      	ldr	r3, [pc, #360]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	4a5b      	ldr	r2, [pc, #364]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001dae:	fba2 2303 	umull	r2, r3, r2, r3
 8001db2:	095b      	lsrs	r3, r3, #5
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	4b59      	ldr	r3, [pc, #356]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001dba:	701a      	strb	r2, [r3, #0]
			seq1_remaining_time_min = (seq1_remaining_time_total_min%60);
 8001dbc:	4b55      	ldr	r3, [pc, #340]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001dbe:	881a      	ldrh	r2, [r3, #0]
 8001dc0:	4b56      	ldr	r3, [pc, #344]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001dc2:	fba3 1302 	umull	r1, r3, r3, r2
 8001dc6:	0959      	lsrs	r1, r3, #5
 8001dc8:	460b      	mov	r3, r1
 8001dca:	011b      	lsls	r3, r3, #4
 8001dcc:	1a5b      	subs	r3, r3, r1
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	4b53      	ldr	r3, [pc, #332]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001dd8:	701a      	strb	r2, [r3, #0]
			seq2_remaining_time_Hr  = (seq2_remaining_time_total_min/60);
 8001dda:	4b4f      	ldr	r3, [pc, #316]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	4a4f      	ldr	r2, [pc, #316]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001de0:	fba2 2303 	umull	r2, r3, r2, r3
 8001de4:	095b      	lsrs	r3, r3, #5
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	4b4f      	ldr	r3, [pc, #316]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001dec:	701a      	strb	r2, [r3, #0]
			seq2_remaining_time_min = (seq2_remaining_time_total_min%60);
 8001dee:	4b4a      	ldr	r3, [pc, #296]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001df0:	881a      	ldrh	r2, [r3, #0]
 8001df2:	4b4a      	ldr	r3, [pc, #296]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001df4:	fba3 1302 	umull	r1, r3, r3, r2
 8001df8:	0959      	lsrs	r1, r3, #5
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	011b      	lsls	r3, r3, #4
 8001dfe:	1a5b      	subs	r3, r3, r1
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	4b48      	ldr	r3, [pc, #288]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001e0a:	701a      	strb	r2, [r3, #0]

		}

		if(++CountAT_Quench > 9)
 8001e0c:	4b48      	ldr	r3, [pc, #288]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	3301      	adds	r3, #1
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	4b46      	ldr	r3, [pc, #280]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001e16:	701a      	strb	r2, [r3, #0]
 8001e18:	4b45      	ldr	r3, [pc, #276]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b09      	cmp	r3, #9
 8001e1e:	f240 80aa 	bls.w	8001f76 <HAL_TIM_PeriodElapsedCallback+0x2f2>
		{
			CountAT_Quench=0;
 8001e22:	4b43      	ldr	r3, [pc, #268]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
			Read_Quench_IP_Start = 0;//(IO1PIN & (1<<25));
 8001e28:	4b42      	ldr	r3, [pc, #264]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	801a      	strh	r2, [r3, #0]
			Read_Quench_IP_Stop  = 0;// (IO1PIN &(1<<24));
 8001e2e:	4b42      	ldr	r3, [pc, #264]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	801a      	strh	r2, [r3, #0]

			if((NewQuenchingReq)
 8001e34:	4b41      	ldr	r3, [pc, #260]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d015      	beq.n	8001e68 <HAL_TIM_PeriodElapsedCallback+0x1e4>
				&&(!Read_Quench_IP_Start)
 8001e3c:	4b3d      	ldr	r3, [pc, #244]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d111      	bne.n	8001e68 <HAL_TIM_PeriodElapsedCallback+0x1e4>
				&&(status_to_server != 30)
 8001e44:	4b3e      	ldr	r3, [pc, #248]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b1e      	cmp	r3, #30
 8001e4a:	d00d      	beq.n	8001e68 <HAL_TIM_PeriodElapsedCallback+0x1e4>
				&&(Status_Quench_Duration==0))
 8001e4c:	4b3d      	ldr	r3, [pc, #244]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d109      	bne.n	8001e68 <HAL_TIM_PeriodElapsedCallback+0x1e4>
			{
				NewQuenchingReq=0;
 8001e54:	4b39      	ldr	r3, [pc, #228]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	701a      	strb	r2, [r3, #0]
				Status_Quench_Duration  = 1;
 8001e5a:	4b3a      	ldr	r3, [pc, #232]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	701a      	strb	r2, [r3, #0]
				Quenching_Seconds_Cont = 0;
 8001e60:	4b39      	ldr	r3, [pc, #228]	; (8001f48 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	801a      	strh	r2, [r3, #0]
 8001e66:	e086      	b.n	8001f76 <HAL_TIM_PeriodElapsedCallback+0x2f2>
			}
			else if((Status_Quench_Duration==1)&&(Read_Quench_IP_Stop))
 8001e68:	4b36      	ldr	r3, [pc, #216]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d10a      	bne.n	8001e86 <HAL_TIM_PeriodElapsedCallback+0x202>
 8001e70:	4b31      	ldr	r3, [pc, #196]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d006      	beq.n	8001e86 <HAL_TIM_PeriodElapsedCallback+0x202>
			{
				Quenching_Seconds_Cont	 += 1;
 8001e78:	4b33      	ldr	r3, [pc, #204]	; (8001f48 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	4b31      	ldr	r3, [pc, #196]	; (8001f48 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001e82:	801a      	strh	r2, [r3, #0]
 8001e84:	e077      	b.n	8001f76 <HAL_TIM_PeriodElapsedCallback+0x2f2>
			}
			else if((Status_Quench_Duration==1)&&(!Read_Quench_IP_Stop))
 8001e86:	4b2f      	ldr	r3, [pc, #188]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d10d      	bne.n	8001eaa <HAL_TIM_PeriodElapsedCallback+0x226>
 8001e8e:	4b2a      	ldr	r3, [pc, #168]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d109      	bne.n	8001eaa <HAL_TIM_PeriodElapsedCallback+0x226>
			{
				Quenching_Seconds_Cont	 += 1;
 8001e96:	4b2c      	ldr	r3, [pc, #176]	; (8001f48 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	4b2a      	ldr	r3, [pc, #168]	; (8001f48 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001ea0:	801a      	strh	r2, [r3, #0]
				Status_Quench_Duration=2;
 8001ea2:	4b28      	ldr	r3, [pc, #160]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	701a      	strb	r2, [r3, #0]
 8001ea8:	e065      	b.n	8001f76 <HAL_TIM_PeriodElapsedCallback+0x2f2>
			}
			else if((Status_Quench_Duration==2)&&(!Read_Quench_IP_Stop))
 8001eaa:	4b26      	ldr	r3, [pc, #152]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d14c      	bne.n	8001f4c <HAL_TIM_PeriodElapsedCallback+0x2c8>
 8001eb2:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d148      	bne.n	8001f4c <HAL_TIM_PeriodElapsedCallback+0x2c8>
			{
				Quenching_Seconds_Cont	 += 1;
 8001eba:	4b23      	ldr	r3, [pc, #140]	; (8001f48 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001ebc:	881b      	ldrh	r3, [r3, #0]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	4b21      	ldr	r3, [pc, #132]	; (8001f48 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001ec4:	801a      	strh	r2, [r3, #0]
				Status_Quench_Duration=2;
 8001ec6:	4b1f      	ldr	r3, [pc, #124]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001ec8:	2202      	movs	r2, #2
 8001eca:	701a      	strb	r2, [r3, #0]
 8001ecc:	e053      	b.n	8001f76 <HAL_TIM_PeriodElapsedCallback+0x2f2>
 8001ece:	bf00      	nop
 8001ed0:	2000058c 	.word	0x2000058c
 8001ed4:	200000f5 	.word	0x200000f5
 8001ed8:	20000540 	.word	0x20000540
 8001edc:	200000f7 	.word	0x200000f7
 8001ee0:	200000f9 	.word	0x200000f9
 8001ee4:	200000f8 	.word	0x200000f8
 8001ee8:	48000800 	.word	0x48000800
 8001eec:	200000f6 	.word	0x200000f6
 8001ef0:	20000626 	.word	0x20000626
 8001ef4:	20000625 	.word	0x20000625
 8001ef8:	20000110 	.word	0x20000110
 8001efc:	200000fe 	.word	0x200000fe
 8001f00:	2000062c 	.word	0x2000062c
 8001f04:	20000627 	.word	0x20000627
 8001f08:	20000111 	.word	0x20000111
 8001f0c:	20000100 	.word	0x20000100
 8001f10:	2000062e 	.word	0x2000062e
 8001f14:	20000102 	.word	0x20000102
 8001f18:	20000104 	.word	0x20000104
 8001f1c:	88888889 	.word	0x88888889
 8001f20:	20000106 	.word	0x20000106
 8001f24:	20000107 	.word	0x20000107
 8001f28:	20000108 	.word	0x20000108
 8001f2c:	20000109 	.word	0x20000109
 8001f30:	200000fa 	.word	0x200000fa
 8001f34:	2000010a 	.word	0x2000010a
 8001f38:	2000010c 	.word	0x2000010c
 8001f3c:	20000611 	.word	0x20000611
 8001f40:	20000612 	.word	0x20000612
 8001f44:	200000fb 	.word	0x200000fb
 8001f48:	2000010e 	.word	0x2000010e
			}
			else if((Status_Quench_Duration==2)&&(Read_Quench_IP_Stop))
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d110      	bne.n	8001f76 <HAL_TIM_PeriodElapsedCallback+0x2f2>
 8001f54:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00c      	beq.n	8001f76 <HAL_TIM_PeriodElapsedCallback+0x2f2>
			{
				Quenching_Seconds_Cont	 += 1;
 8001f5c:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	3301      	adds	r3, #1
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001f66:	801a      	strh	r2, [r3, #0]
				Status_Quench_Duration=0;
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]
				Write_memory_Once=1;
 8001f6e:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	701a      	strb	r2, [r3, #0]
			}
		 }

	}
 
 }
 8001f74:	e7ff      	b.n	8001f76 <HAL_TIM_PeriodElapsedCallback+0x2f2>
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200000fb 	.word	0x200000fb
 8001f84:	2000010c 	.word	0x2000010c
 8001f88:	2000010e 	.word	0x2000010e
 8001f8c:	200000fc 	.word	0x200000fc

08001f90 <HAL_UART_RxCpltCallback>:

extern uint8_t Rxseqdecoder;
extern void ESPRxDecoder(unsigned char Rxwifi_data,unsigned char Rxseqdecoder);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
	if(huart == &hlpuart1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a8d      	ldr	r2, [pc, #564]	; (80021d0 <HAL_UART_RxCpltCallback+0x240>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d10c      	bne.n	8001fba <HAL_UART_RxCpltCallback+0x2a>
	{
		ESPRxDecoder(rxTempBuff[0],Rxseqdecoder);
 8001fa0:	4b8c      	ldr	r3, [pc, #560]	; (80021d4 <HAL_UART_RxCpltCallback+0x244>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	4a8c      	ldr	r2, [pc, #560]	; (80021d8 <HAL_UART_RxCpltCallback+0x248>)
 8001fa6:	7812      	ldrb	r2, [r2, #0]
 8001fa8:	4611      	mov	r1, r2
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe fae2 	bl	8000574 <ESPRxDecoder>

		HAL_UART_Receive_IT(&hlpuart1,rxTempBuff,1);
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	4988      	ldr	r1, [pc, #544]	; (80021d4 <HAL_UART_RxCpltCallback+0x244>)
 8001fb4:	4886      	ldr	r0, [pc, #536]	; (80021d0 <HAL_UART_RxCpltCallback+0x240>)
 8001fb6:	f00c f951 	bl	800e25c <HAL_UART_Receive_IT>
	}

	if(huart == &huart1)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a87      	ldr	r2, [pc, #540]	; (80021dc <HAL_UART_RxCpltCallback+0x24c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	f040 8102 	bne.w	80021c8 <HAL_UART_RxCpltCallback+0x238>
	{
		if(((u8rxbuf[0]==0x01)||(u8rxbuf[0]==0x02)||(u8rxbuf[0]==0x03)||(u8rxbuf[0]==0x04))&&
 8001fc4:	4b86      	ldr	r3, [pc, #536]	; (80021e0 <HAL_UART_RxCpltCallback+0x250>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d00b      	beq.n	8001fe4 <HAL_UART_RxCpltCallback+0x54>
 8001fcc:	4b84      	ldr	r3, [pc, #528]	; (80021e0 <HAL_UART_RxCpltCallback+0x250>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d007      	beq.n	8001fe4 <HAL_UART_RxCpltCallback+0x54>
 8001fd4:	4b82      	ldr	r3, [pc, #520]	; (80021e0 <HAL_UART_RxCpltCallback+0x250>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	d003      	beq.n	8001fe4 <HAL_UART_RxCpltCallback+0x54>
 8001fdc:	4b80      	ldr	r3, [pc, #512]	; (80021e0 <HAL_UART_RxCpltCallback+0x250>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d10b      	bne.n	8001ffc <HAL_UART_RxCpltCallback+0x6c>
				(rx_seq==0))
 8001fe4:	4b7f      	ldr	r3, [pc, #508]	; (80021e4 <HAL_UART_RxCpltCallback+0x254>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
		if(((u8rxbuf[0]==0x01)||(u8rxbuf[0]==0x02)||(u8rxbuf[0]==0x03)||(u8rxbuf[0]==0x04))&&
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d107      	bne.n	8001ffc <HAL_UART_RxCpltCallback+0x6c>
		{
			rx_seq=1;
 8001fec:	4b7d      	ldr	r3, [pc, #500]	; (80021e4 <HAL_UART_RxCpltCallback+0x254>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	701a      	strb	r2, [r3, #0]
			rx_meter_id = u8rxbuf[0];
 8001ff2:	4b7b      	ldr	r3, [pc, #492]	; (80021e0 <HAL_UART_RxCpltCallback+0x250>)
 8001ff4:	781a      	ldrb	r2, [r3, #0]
 8001ff6:	4b7c      	ldr	r3, [pc, #496]	; (80021e8 <HAL_UART_RxCpltCallback+0x258>)
 8001ff8:	701a      	strb	r2, [r3, #0]
 8001ffa:	e099      	b.n	8002130 <HAL_UART_RxCpltCallback+0x1a0>
		}
		else if((rx_seq==1)&&(u8rxbuf[0]==0x03))
 8001ffc:	4b79      	ldr	r3, [pc, #484]	; (80021e4 <HAL_UART_RxCpltCallback+0x254>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d107      	bne.n	8002014 <HAL_UART_RxCpltCallback+0x84>
 8002004:	4b76      	ldr	r3, [pc, #472]	; (80021e0 <HAL_UART_RxCpltCallback+0x250>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b03      	cmp	r3, #3
 800200a:	d103      	bne.n	8002014 <HAL_UART_RxCpltCallback+0x84>
		{
			rx_seq=2;
 800200c:	4b75      	ldr	r3, [pc, #468]	; (80021e4 <HAL_UART_RxCpltCallback+0x254>)
 800200e:	2202      	movs	r2, #2
 8002010:	701a      	strb	r2, [r3, #0]
 8002012:	e08d      	b.n	8002130 <HAL_UART_RxCpltCallback+0x1a0>
		}
		else if((rx_seq==2)&&(u8rxbuf[0]==0x01))
 8002014:	4b73      	ldr	r3, [pc, #460]	; (80021e4 <HAL_UART_RxCpltCallback+0x254>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b02      	cmp	r3, #2
 800201a:	d107      	bne.n	800202c <HAL_UART_RxCpltCallback+0x9c>
 800201c:	4b70      	ldr	r3, [pc, #448]	; (80021e0 <HAL_UART_RxCpltCallback+0x250>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d103      	bne.n	800202c <HAL_UART_RxCpltCallback+0x9c>
		{
			rx_seq=3;
 8002024:	4b6f      	ldr	r3, [pc, #444]	; (80021e4 <HAL_UART_RxCpltCallback+0x254>)
 8002026:	2203      	movs	r2, #3
 8002028:	701a      	strb	r2, [r3, #0]
 800202a:	e081      	b.n	8002130 <HAL_UART_RxCpltCallback+0x1a0>
		}
		else if(rx_seq==3)
 800202c:	4b6d      	ldr	r3, [pc, #436]	; (80021e4 <HAL_UART_RxCpltCallback+0x254>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b03      	cmp	r3, #3
 8002032:	d107      	bne.n	8002044 <HAL_UART_RxCpltCallback+0xb4>
		{
			rx_msb_h_data =u8rxbuf[0];
 8002034:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_UART_RxCpltCallback+0x250>)
 8002036:	781a      	ldrb	r2, [r3, #0]
 8002038:	4b6c      	ldr	r3, [pc, #432]	; (80021ec <HAL_UART_RxCpltCallback+0x25c>)
 800203a:	701a      	strb	r2, [r3, #0]
			rx_seq=4;
 800203c:	4b69      	ldr	r3, [pc, #420]	; (80021e4 <HAL_UART_RxCpltCallback+0x254>)
 800203e:	2204      	movs	r2, #4
 8002040:	701a      	strb	r2, [r3, #0]
 8002042:	e075      	b.n	8002130 <HAL_UART_RxCpltCallback+0x1a0>
		}
		else if(rx_seq==4)
 8002044:	4b67      	ldr	r3, [pc, #412]	; (80021e4 <HAL_UART_RxCpltCallback+0x254>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b04      	cmp	r3, #4
 800204a:	d107      	bne.n	800205c <HAL_UART_RxCpltCallback+0xcc>
		{
			rx_seq=5;
 800204c:	4b65      	ldr	r3, [pc, #404]	; (80021e4 <HAL_UART_RxCpltCallback+0x254>)
 800204e:	2205      	movs	r2, #5
 8002050:	701a      	strb	r2, [r3, #0]
			rx_msb_data = u8rxbuf[0];
 8002052:	4b63      	ldr	r3, [pc, #396]	; (80021e0 <HAL_UART_RxCpltCallback+0x250>)
 8002054:	781a      	ldrb	r2, [r3, #0]
 8002056:	4b66      	ldr	r3, [pc, #408]	; (80021f0 <HAL_UART_RxCpltCallback+0x260>)
 8002058:	701a      	strb	r2, [r3, #0]
 800205a:	e069      	b.n	8002130 <HAL_UART_RxCpltCallback+0x1a0>
		}
		else if(rx_seq==5)
 800205c:	4b61      	ldr	r3, [pc, #388]	; (80021e4 <HAL_UART_RxCpltCallback+0x254>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b05      	cmp	r3, #5
 8002062:	d162      	bne.n	800212a <HAL_UART_RxCpltCallback+0x19a>
		{
			rx_lsb_data =u8rxbuf[0];
 8002064:	4b5e      	ldr	r3, [pc, #376]	; (80021e0 <HAL_UART_RxCpltCallback+0x250>)
 8002066:	781a      	ldrb	r2, [r3, #0]
 8002068:	4b62      	ldr	r3, [pc, #392]	; (80021f4 <HAL_UART_RxCpltCallback+0x264>)
 800206a:	701a      	strb	r2, [r3, #0]
			if(rx_meter_id==1){act_temperature_c1 = (rx_msb_h_data<<16 |rx_msb_data<<8 | rx_lsb_data); }
 800206c:	4b5e      	ldr	r3, [pc, #376]	; (80021e8 <HAL_UART_RxCpltCallback+0x258>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d112      	bne.n	800209a <HAL_UART_RxCpltCallback+0x10a>
 8002074:	4b5d      	ldr	r3, [pc, #372]	; (80021ec <HAL_UART_RxCpltCallback+0x25c>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	041b      	lsls	r3, r3, #16
 800207a:	b21a      	sxth	r2, r3
 800207c:	4b5c      	ldr	r3, [pc, #368]	; (80021f0 <HAL_UART_RxCpltCallback+0x260>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	021b      	lsls	r3, r3, #8
 8002082:	b21b      	sxth	r3, r3
 8002084:	4313      	orrs	r3, r2
 8002086:	b21a      	sxth	r2, r3
 8002088:	4b5a      	ldr	r3, [pc, #360]	; (80021f4 <HAL_UART_RxCpltCallback+0x264>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	b21b      	sxth	r3, r3
 800208e:	4313      	orrs	r3, r2
 8002090:	b21b      	sxth	r3, r3
 8002092:	b29a      	uxth	r2, r3
 8002094:	4b58      	ldr	r3, [pc, #352]	; (80021f8 <HAL_UART_RxCpltCallback+0x268>)
 8002096:	801a      	strh	r2, [r3, #0]
 8002098:	e043      	b.n	8002122 <HAL_UART_RxCpltCallback+0x192>
			else if(rx_meter_id==2){act_temperature_c2 = (rx_msb_h_data<<16 |rx_msb_data<<8 | rx_lsb_data); }
 800209a:	4b53      	ldr	r3, [pc, #332]	; (80021e8 <HAL_UART_RxCpltCallback+0x258>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d112      	bne.n	80020c8 <HAL_UART_RxCpltCallback+0x138>
 80020a2:	4b52      	ldr	r3, [pc, #328]	; (80021ec <HAL_UART_RxCpltCallback+0x25c>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	041b      	lsls	r3, r3, #16
 80020a8:	b21a      	sxth	r2, r3
 80020aa:	4b51      	ldr	r3, [pc, #324]	; (80021f0 <HAL_UART_RxCpltCallback+0x260>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	021b      	lsls	r3, r3, #8
 80020b0:	b21b      	sxth	r3, r3
 80020b2:	4313      	orrs	r3, r2
 80020b4:	b21a      	sxth	r2, r3
 80020b6:	4b4f      	ldr	r3, [pc, #316]	; (80021f4 <HAL_UART_RxCpltCallback+0x264>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	b21b      	sxth	r3, r3
 80020bc:	4313      	orrs	r3, r2
 80020be:	b21b      	sxth	r3, r3
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	4b4e      	ldr	r3, [pc, #312]	; (80021fc <HAL_UART_RxCpltCallback+0x26c>)
 80020c4:	801a      	strh	r2, [r3, #0]
 80020c6:	e02c      	b.n	8002122 <HAL_UART_RxCpltCallback+0x192>
			else if(rx_meter_id==3){act_temperature_c3 = (rx_msb_h_data<<16 |rx_msb_data<<8 | rx_lsb_data); }
 80020c8:	4b47      	ldr	r3, [pc, #284]	; (80021e8 <HAL_UART_RxCpltCallback+0x258>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b03      	cmp	r3, #3
 80020ce:	d112      	bne.n	80020f6 <HAL_UART_RxCpltCallback+0x166>
 80020d0:	4b46      	ldr	r3, [pc, #280]	; (80021ec <HAL_UART_RxCpltCallback+0x25c>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	041b      	lsls	r3, r3, #16
 80020d6:	b21a      	sxth	r2, r3
 80020d8:	4b45      	ldr	r3, [pc, #276]	; (80021f0 <HAL_UART_RxCpltCallback+0x260>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	021b      	lsls	r3, r3, #8
 80020de:	b21b      	sxth	r3, r3
 80020e0:	4313      	orrs	r3, r2
 80020e2:	b21a      	sxth	r2, r3
 80020e4:	4b43      	ldr	r3, [pc, #268]	; (80021f4 <HAL_UART_RxCpltCallback+0x264>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	b21b      	sxth	r3, r3
 80020ea:	4313      	orrs	r3, r2
 80020ec:	b21b      	sxth	r3, r3
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	4b43      	ldr	r3, [pc, #268]	; (8002200 <HAL_UART_RxCpltCallback+0x270>)
 80020f2:	801a      	strh	r2, [r3, #0]
 80020f4:	e015      	b.n	8002122 <HAL_UART_RxCpltCallback+0x192>
			else if(rx_meter_id==4){act_temperature_c4 = (rx_msb_h_data<<16 |rx_msb_data<<8 | rx_lsb_data); }
 80020f6:	4b3c      	ldr	r3, [pc, #240]	; (80021e8 <HAL_UART_RxCpltCallback+0x258>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d111      	bne.n	8002122 <HAL_UART_RxCpltCallback+0x192>
 80020fe:	4b3b      	ldr	r3, [pc, #236]	; (80021ec <HAL_UART_RxCpltCallback+0x25c>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	041b      	lsls	r3, r3, #16
 8002104:	b21a      	sxth	r2, r3
 8002106:	4b3a      	ldr	r3, [pc, #232]	; (80021f0 <HAL_UART_RxCpltCallback+0x260>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	021b      	lsls	r3, r3, #8
 800210c:	b21b      	sxth	r3, r3
 800210e:	4313      	orrs	r3, r2
 8002110:	b21a      	sxth	r2, r3
 8002112:	4b38      	ldr	r3, [pc, #224]	; (80021f4 <HAL_UART_RxCpltCallback+0x264>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	b21b      	sxth	r3, r3
 8002118:	4313      	orrs	r3, r2
 800211a:	b21b      	sxth	r3, r3
 800211c:	b29a      	uxth	r2, r3
 800211e:	4b39      	ldr	r3, [pc, #228]	; (8002204 <HAL_UART_RxCpltCallback+0x274>)
 8002120:	801a      	strh	r2, [r3, #0]
			else{}
			rx_seq=0;
 8002122:	4b30      	ldr	r3, [pc, #192]	; (80021e4 <HAL_UART_RxCpltCallback+0x254>)
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]
 8002128:	e002      	b.n	8002130 <HAL_UART_RxCpltCallback+0x1a0>
		}
		else
		{
			rx_seq=0;
 800212a:	4b2e      	ldr	r3, [pc, #184]	; (80021e4 <HAL_UART_RxCpltCallback+0x254>)
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]
		}

		if((u8rxbuf[0] == 0x05)&&(rx_seq_1 == 0x0))
 8002130:	4b2b      	ldr	r3, [pc, #172]	; (80021e0 <HAL_UART_RxCpltCallback+0x250>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b05      	cmp	r3, #5
 8002136:	d107      	bne.n	8002148 <HAL_UART_RxCpltCallback+0x1b8>
 8002138:	4b33      	ldr	r3, [pc, #204]	; (8002208 <HAL_UART_RxCpltCallback+0x278>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d103      	bne.n	8002148 <HAL_UART_RxCpltCallback+0x1b8>
		{
			rx_seq_1=1;
 8002140:	4b31      	ldr	r3, [pc, #196]	; (8002208 <HAL_UART_RxCpltCallback+0x278>)
 8002142:	2201      	movs	r2, #1
 8002144:	701a      	strb	r2, [r3, #0]
 8002146:	e03a      	b.n	80021be <HAL_UART_RxCpltCallback+0x22e>
		}
		else if((u8rxbuf[0] == 0x03)&&(rx_seq_1 == 0x1))
 8002148:	4b25      	ldr	r3, [pc, #148]	; (80021e0 <HAL_UART_RxCpltCallback+0x250>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b03      	cmp	r3, #3
 800214e:	d107      	bne.n	8002160 <HAL_UART_RxCpltCallback+0x1d0>
 8002150:	4b2d      	ldr	r3, [pc, #180]	; (8002208 <HAL_UART_RxCpltCallback+0x278>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d103      	bne.n	8002160 <HAL_UART_RxCpltCallback+0x1d0>
		{
			rx_seq_1=2;
 8002158:	4b2b      	ldr	r3, [pc, #172]	; (8002208 <HAL_UART_RxCpltCallback+0x278>)
 800215a:	2202      	movs	r2, #2
 800215c:	701a      	strb	r2, [r3, #0]
 800215e:	e02e      	b.n	80021be <HAL_UART_RxCpltCallback+0x22e>
		}
		else if((rx_seq_1==2)&&(u8rxbuf[0]==0x08))
 8002160:	4b29      	ldr	r3, [pc, #164]	; (8002208 <HAL_UART_RxCpltCallback+0x278>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b02      	cmp	r3, #2
 8002166:	d107      	bne.n	8002178 <HAL_UART_RxCpltCallback+0x1e8>
 8002168:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <HAL_UART_RxCpltCallback+0x250>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b08      	cmp	r3, #8
 800216e:	d103      	bne.n	8002178 <HAL_UART_RxCpltCallback+0x1e8>
		{
			rx_seq_1=3;
 8002170:	4b25      	ldr	r3, [pc, #148]	; (8002208 <HAL_UART_RxCpltCallback+0x278>)
 8002172:	2203      	movs	r2, #3
 8002174:	701a      	strb	r2, [r3, #0]
 8002176:	e022      	b.n	80021be <HAL_UART_RxCpltCallback+0x22e>
		}
		else if(rx_seq_1==3)
 8002178:	4b23      	ldr	r3, [pc, #140]	; (8002208 <HAL_UART_RxCpltCallback+0x278>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b03      	cmp	r3, #3
 800217e:	d107      	bne.n	8002190 <HAL_UART_RxCpltCallback+0x200>
		{
			rx_msb_data_w =u8rxbuf[0];
 8002180:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <HAL_UART_RxCpltCallback+0x250>)
 8002182:	781a      	ldrb	r2, [r3, #0]
 8002184:	4b21      	ldr	r3, [pc, #132]	; (800220c <HAL_UART_RxCpltCallback+0x27c>)
 8002186:	701a      	strb	r2, [r3, #0]
			rx_seq_1=4;
 8002188:	4b1f      	ldr	r3, [pc, #124]	; (8002208 <HAL_UART_RxCpltCallback+0x278>)
 800218a:	2204      	movs	r2, #4
 800218c:	701a      	strb	r2, [r3, #0]
 800218e:	e016      	b.n	80021be <HAL_UART_RxCpltCallback+0x22e>
		}
		else if(rx_seq_1==4)
 8002190:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <HAL_UART_RxCpltCallback+0x278>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b04      	cmp	r3, #4
 8002196:	d112      	bne.n	80021be <HAL_UART_RxCpltCallback+0x22e>
		{
			rx_seq_1=5;
 8002198:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_UART_RxCpltCallback+0x278>)
 800219a:	2205      	movs	r2, #5
 800219c:	701a      	strb	r2, [r3, #0]
			rx_lsb_data_w = u8rxbuf[0];
 800219e:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <HAL_UART_RxCpltCallback+0x250>)
 80021a0:	781a      	ldrb	r2, [r3, #0]
 80021a2:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <HAL_UART_RxCpltCallback+0x280>)
 80021a4:	701a      	strb	r2, [r3, #0]
			water_temperature = (rx_msb_data_w<<8 | rx_lsb_data_w);
 80021a6:	4b19      	ldr	r3, [pc, #100]	; (800220c <HAL_UART_RxCpltCallback+0x27c>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	021b      	lsls	r3, r3, #8
 80021ac:	b21a      	sxth	r2, r3
 80021ae:	4b18      	ldr	r3, [pc, #96]	; (8002210 <HAL_UART_RxCpltCallback+0x280>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	b21b      	sxth	r3, r3
 80021b4:	4313      	orrs	r3, r2
 80021b6:	b21b      	sxth	r3, r3
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	4b16      	ldr	r3, [pc, #88]	; (8002214 <HAL_UART_RxCpltCallback+0x284>)
 80021bc:	801a      	strh	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart1,u8rxbuf,1);
 80021be:	2201      	movs	r2, #1
 80021c0:	4907      	ldr	r1, [pc, #28]	; (80021e0 <HAL_UART_RxCpltCallback+0x250>)
 80021c2:	4806      	ldr	r0, [pc, #24]	; (80021dc <HAL_UART_RxCpltCallback+0x24c>)
 80021c4:	f00c f84a 	bl	800e25c <HAL_UART_Receive_IT>
	}
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	200002a0 	.word	0x200002a0
 80021d4:	200005d8 	.word	0x200005d8
 80021d8:	20000797 	.word	0x20000797
 80021dc:	20000324 	.word	0x20000324
 80021e0:	20000640 	.word	0x20000640
 80021e4:	20000244 	.word	0x20000244
 80021e8:	20000245 	.word	0x20000245
 80021ec:	20000243 	.word	0x20000243
 80021f0:	20000241 	.word	0x20000241
 80021f4:	20000242 	.word	0x20000242
 80021f8:	2000061c 	.word	0x2000061c
 80021fc:	2000061e 	.word	0x2000061e
 8002200:	20000620 	.word	0x20000620
 8002204:	20000622 	.word	0x20000622
 8002208:	20000246 	.word	0x20000246
 800220c:	20000247 	.word	0x20000247
 8002210:	20000248 	.word	0x20000248
 8002214:	2000024a 	.word	0x2000024a

08002218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800221c:	f008 fcf6 	bl	800ac0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002220:	f000 f84c 	bl	80022bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002224:	f000 faba 	bl	800279c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002228:	f000 f936 	bl	8002498 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800222c:	f000 f898 	bl	8002360 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002230:	f000 f902 	bl	8002438 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8002234:	f000 fa44 	bl	80026c0 <MX_TIM6_Init>
  MX_SPI2_Init();
 8002238:	f000 f9a6 	bl	8002588 <MX_SPI2_Init>
  MX_TIM1_Init();
 800223c:	f000 f9ec 	bl	8002618 <MX_TIM1_Init>
  MX_LPUART1_UART_Init();
 8002240:	f000 f8ce 	bl	80023e0 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8002244:	f000 f958 	bl	80024f8 <MX_SPI1_Init>
  MX_TIM7_Init();
 8002248:	f000 fa70 	bl	800272c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 800224c:	4814      	ldr	r0, [pc, #80]	; (80022a0 <main+0x88>)
 800224e:	f00b fb63 	bl	800d918 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8002252:	4814      	ldr	r0, [pc, #80]	; (80022a4 <main+0x8c>)
 8002254:	f00b fb60 	bl	800d918 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 8002258:	4813      	ldr	r0, [pc, #76]	; (80022a8 <main+0x90>)
 800225a:	f00b fb11 	bl	800d880 <HAL_TIM_Base_Start>
//  for(i=0;i<=250;i++)
//  {
//	  data[i]=i;
//  }

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800225e:	2200      	movs	r2, #0
 8002260:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002264:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002268:	f009 f872 	bl	800b350 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 800226c:	2002      	movs	r0, #2
 800226e:	f008 fd41 	bl	800acf4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002272:	2201      	movs	r2, #1
 8002274:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002278:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800227c:	f009 f868 	bl	800b350 <HAL_GPIO_WritePin>
/*Ethernet Init
  wiz5500Init();*/

  W25qxx_Init();
 8002280:	f000 ff7a 	bl	8003178 <W25qxx_Init>
  //rtc_set_time(13,14,30);
  //rtc_set_date(2,20,2,23);
  HAL_UART_Receive_IT(&huart1,u8rxbuf,1);
 8002284:	2201      	movs	r2, #1
 8002286:	4909      	ldr	r1, [pc, #36]	; (80022ac <main+0x94>)
 8002288:	4809      	ldr	r0, [pc, #36]	; (80022b0 <main+0x98>)
 800228a:	f00b ffe7 	bl	800e25c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&hlpuart1,rxTempBuff,1);
 800228e:	2201      	movs	r2, #1
 8002290:	4908      	ldr	r1, [pc, #32]	; (80022b4 <main+0x9c>)
 8002292:	4809      	ldr	r0, [pc, #36]	; (80022b8 <main+0xa0>)
 8002294:	f00b ffe2 	bl	800e25c <HAL_UART_Receive_IT>
  while (1)
  {
	  cppMain();
 8002298:	f008 fc3c 	bl	800ab14 <cppMain>
 800229c:	e7fc      	b.n	8002298 <main+0x80>
 800229e:	bf00      	nop
 80022a0:	20000540 	.word	0x20000540
 80022a4:	2000058c 	.word	0x2000058c
 80022a8:	200004f4 	.word	0x200004f4
 80022ac:	20000640 	.word	0x20000640
 80022b0:	20000324 	.word	0x20000324
 80022b4:	200005d8 	.word	0x200005d8
 80022b8:	200002a0 	.word	0x200002a0

080022bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b096      	sub	sp, #88	; 0x58
 80022c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022c2:	f107 0314 	add.w	r3, r7, #20
 80022c6:	2244      	movs	r2, #68	; 0x44
 80022c8:	2100      	movs	r1, #0
 80022ca:	4618      	mov	r0, r3
 80022cc:	f00d faf6 	bl	800f8bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022d0:	463b      	mov	r3, r7
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	609a      	str	r2, [r3, #8]
 80022da:	60da      	str	r2, [r3, #12]
 80022dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80022de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80022e2:	f009 f99b 	bl	800b61c <HAL_PWREx_ControlVoltageScaling>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80022ec:	f000 fb48 	bl	8002980 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80022f0:	2310      	movs	r3, #16
 80022f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80022f4:	2301      	movs	r3, #1
 80022f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80022fc:	2360      	movs	r3, #96	; 0x60
 80022fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002300:	2302      	movs	r3, #2
 8002302:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002304:	2301      	movs	r3, #1
 8002306:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002308:	2301      	movs	r3, #1
 800230a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 86;
 800230c:	2356      	movs	r3, #86	; 0x56
 800230e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002310:	2307      	movs	r3, #7
 8002312:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002314:	2302      	movs	r3, #2
 8002316:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 8002318:	2308      	movs	r3, #8
 800231a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800231c:	f107 0314 	add.w	r3, r7, #20
 8002320:	4618      	mov	r0, r3
 8002322:	f009 f9d1 	bl	800b6c8 <HAL_RCC_OscConfig>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800232c:	f000 fb28 	bl	8002980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002330:	230f      	movs	r3, #15
 8002332:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002334:	2303      	movs	r3, #3
 8002336:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002338:	2300      	movs	r3, #0
 800233a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800233c:	2300      	movs	r3, #0
 800233e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002340:	2300      	movs	r3, #0
 8002342:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002344:	463b      	mov	r3, r7
 8002346:	2102      	movs	r1, #2
 8002348:	4618      	mov	r0, r3
 800234a:	f009 fdd1 	bl	800bef0 <HAL_RCC_ClockConfig>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002354:	f000 fb14 	bl	8002980 <Error_Handler>
  }
}
 8002358:	bf00      	nop
 800235a:	3758      	adds	r7, #88	; 0x58
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002364:	4b1b      	ldr	r3, [pc, #108]	; (80023d4 <MX_I2C1_Init+0x74>)
 8002366:	4a1c      	ldr	r2, [pc, #112]	; (80023d8 <MX_I2C1_Init+0x78>)
 8002368:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00A0A7FD;
 800236a:	4b1a      	ldr	r3, [pc, #104]	; (80023d4 <MX_I2C1_Init+0x74>)
 800236c:	4a1b      	ldr	r2, [pc, #108]	; (80023dc <MX_I2C1_Init+0x7c>)
 800236e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002370:	4b18      	ldr	r3, [pc, #96]	; (80023d4 <MX_I2C1_Init+0x74>)
 8002372:	2200      	movs	r2, #0
 8002374:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002376:	4b17      	ldr	r3, [pc, #92]	; (80023d4 <MX_I2C1_Init+0x74>)
 8002378:	2201      	movs	r2, #1
 800237a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800237c:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <MX_I2C1_Init+0x74>)
 800237e:	2200      	movs	r2, #0
 8002380:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002382:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <MX_I2C1_Init+0x74>)
 8002384:	2200      	movs	r2, #0
 8002386:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002388:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <MX_I2C1_Init+0x74>)
 800238a:	2200      	movs	r2, #0
 800238c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800238e:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <MX_I2C1_Init+0x74>)
 8002390:	2200      	movs	r2, #0
 8002392:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002394:	4b0f      	ldr	r3, [pc, #60]	; (80023d4 <MX_I2C1_Init+0x74>)
 8002396:	2200      	movs	r2, #0
 8002398:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800239a:	480e      	ldr	r0, [pc, #56]	; (80023d4 <MX_I2C1_Init+0x74>)
 800239c:	f009 f80a 	bl	800b3b4 <HAL_I2C_Init>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80023a6:	f000 faeb 	bl	8002980 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80023aa:	2100      	movs	r1, #0
 80023ac:	4809      	ldr	r0, [pc, #36]	; (80023d4 <MX_I2C1_Init+0x74>)
 80023ae:	f009 f890 	bl	800b4d2 <HAL_I2CEx_ConfigAnalogFilter>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80023b8:	f000 fae2 	bl	8002980 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80023bc:	2100      	movs	r1, #0
 80023be:	4805      	ldr	r0, [pc, #20]	; (80023d4 <MX_I2C1_Init+0x74>)
 80023c0:	f009 f8d2 	bl	800b568 <HAL_I2CEx_ConfigDigitalFilter>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80023ca:	f000 fad9 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	2000024c 	.word	0x2000024c
 80023d8:	40005400 	.word	0x40005400
 80023dc:	00a0a7fd 	.word	0x00a0a7fd

080023e0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80023e4:	4b12      	ldr	r3, [pc, #72]	; (8002430 <MX_LPUART1_UART_Init+0x50>)
 80023e6:	4a13      	ldr	r2, [pc, #76]	; (8002434 <MX_LPUART1_UART_Init+0x54>)
 80023e8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80023ea:	4b11      	ldr	r3, [pc, #68]	; (8002430 <MX_LPUART1_UART_Init+0x50>)
 80023ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023f0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023f2:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <MX_LPUART1_UART_Init+0x50>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80023f8:	4b0d      	ldr	r3, [pc, #52]	; (8002430 <MX_LPUART1_UART_Init+0x50>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80023fe:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <MX_LPUART1_UART_Init+0x50>)
 8002400:	2200      	movs	r2, #0
 8002402:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002404:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <MX_LPUART1_UART_Init+0x50>)
 8002406:	220c      	movs	r2, #12
 8002408:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <MX_LPUART1_UART_Init+0x50>)
 800240c:	2200      	movs	r2, #0
 800240e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002410:	4b07      	ldr	r3, [pc, #28]	; (8002430 <MX_LPUART1_UART_Init+0x50>)
 8002412:	2200      	movs	r2, #0
 8002414:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <MX_LPUART1_UART_Init+0x50>)
 8002418:	2200      	movs	r2, #0
 800241a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800241c:	4804      	ldr	r0, [pc, #16]	; (8002430 <MX_LPUART1_UART_Init+0x50>)
 800241e:	f00b fe61 	bl	800e0e4 <HAL_UART_Init>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8002428:	f000 faaa 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800242c:	bf00      	nop
 800242e:	bd80      	pop	{r7, pc}
 8002430:	200002a0 	.word	0x200002a0
 8002434:	40008000 	.word	0x40008000

08002438 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800243c:	4b14      	ldr	r3, [pc, #80]	; (8002490 <MX_USART1_UART_Init+0x58>)
 800243e:	4a15      	ldr	r2, [pc, #84]	; (8002494 <MX_USART1_UART_Init+0x5c>)
 8002440:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002442:	4b13      	ldr	r3, [pc, #76]	; (8002490 <MX_USART1_UART_Init+0x58>)
 8002444:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002448:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800244a:	4b11      	ldr	r3, [pc, #68]	; (8002490 <MX_USART1_UART_Init+0x58>)
 800244c:	2200      	movs	r2, #0
 800244e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002450:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <MX_USART1_UART_Init+0x58>)
 8002452:	2200      	movs	r2, #0
 8002454:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002456:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <MX_USART1_UART_Init+0x58>)
 8002458:	2200      	movs	r2, #0
 800245a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <MX_USART1_UART_Init+0x58>)
 800245e:	220c      	movs	r2, #12
 8002460:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002462:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <MX_USART1_UART_Init+0x58>)
 8002464:	2200      	movs	r2, #0
 8002466:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002468:	4b09      	ldr	r3, [pc, #36]	; (8002490 <MX_USART1_UART_Init+0x58>)
 800246a:	2200      	movs	r2, #0
 800246c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800246e:	4b08      	ldr	r3, [pc, #32]	; (8002490 <MX_USART1_UART_Init+0x58>)
 8002470:	2200      	movs	r2, #0
 8002472:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002474:	4b06      	ldr	r3, [pc, #24]	; (8002490 <MX_USART1_UART_Init+0x58>)
 8002476:	2200      	movs	r2, #0
 8002478:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800247a:	4805      	ldr	r0, [pc, #20]	; (8002490 <MX_USART1_UART_Init+0x58>)
 800247c:	f00b fe32 	bl	800e0e4 <HAL_UART_Init>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002486:	f000 fa7b 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20000324 	.word	0x20000324
 8002494:	40013800 	.word	0x40013800

08002498 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800249c:	4b14      	ldr	r3, [pc, #80]	; (80024f0 <MX_USART2_UART_Init+0x58>)
 800249e:	4a15      	ldr	r2, [pc, #84]	; (80024f4 <MX_USART2_UART_Init+0x5c>)
 80024a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024a2:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <MX_USART2_UART_Init+0x58>)
 80024a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024aa:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <MX_USART2_UART_Init+0x58>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024b0:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <MX_USART2_UART_Init+0x58>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024b6:	4b0e      	ldr	r3, [pc, #56]	; (80024f0 <MX_USART2_UART_Init+0x58>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024bc:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <MX_USART2_UART_Init+0x58>)
 80024be:	220c      	movs	r2, #12
 80024c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024c2:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <MX_USART2_UART_Init+0x58>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024c8:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <MX_USART2_UART_Init+0x58>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ce:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <MX_USART2_UART_Init+0x58>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024d4:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <MX_USART2_UART_Init+0x58>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024da:	4805      	ldr	r0, [pc, #20]	; (80024f0 <MX_USART2_UART_Init+0x58>)
 80024dc:	f00b fe02 	bl	800e0e4 <HAL_UART_Init>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80024e6:	f000 fa4b 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	200003a8 	.word	0x200003a8
 80024f4:	40004400 	.word	0x40004400

080024f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80024fc:	4b1f      	ldr	r3, [pc, #124]	; (800257c <MX_SPI1_Init+0x84>)
 80024fe:	4a20      	ldr	r2, [pc, #128]	; (8002580 <MX_SPI1_Init+0x88>)
 8002500:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002502:	4b1e      	ldr	r3, [pc, #120]	; (800257c <MX_SPI1_Init+0x84>)
 8002504:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002508:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800250a:	4b1c      	ldr	r3, [pc, #112]	; (800257c <MX_SPI1_Init+0x84>)
 800250c:	2200      	movs	r2, #0
 800250e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002510:	4b1a      	ldr	r3, [pc, #104]	; (800257c <MX_SPI1_Init+0x84>)
 8002512:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002516:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002518:	4b18      	ldr	r3, [pc, #96]	; (800257c <MX_SPI1_Init+0x84>)
 800251a:	2200      	movs	r2, #0
 800251c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800251e:	4b17      	ldr	r3, [pc, #92]	; (800257c <MX_SPI1_Init+0x84>)
 8002520:	2200      	movs	r2, #0
 8002522:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002524:	4b15      	ldr	r3, [pc, #84]	; (800257c <MX_SPI1_Init+0x84>)
 8002526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800252a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800252c:	4b13      	ldr	r3, [pc, #76]	; (800257c <MX_SPI1_Init+0x84>)
 800252e:	2210      	movs	r2, #16
 8002530:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002532:	4b12      	ldr	r3, [pc, #72]	; (800257c <MX_SPI1_Init+0x84>)
 8002534:	2200      	movs	r2, #0
 8002536:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002538:	4b10      	ldr	r3, [pc, #64]	; (800257c <MX_SPI1_Init+0x84>)
 800253a:	2200      	movs	r2, #0
 800253c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800253e:	4b0f      	ldr	r3, [pc, #60]	; (800257c <MX_SPI1_Init+0x84>)
 8002540:	2200      	movs	r2, #0
 8002542:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002544:	4b0d      	ldr	r3, [pc, #52]	; (800257c <MX_SPI1_Init+0x84>)
 8002546:	2207      	movs	r2, #7
 8002548:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800254a:	4b0c      	ldr	r3, [pc, #48]	; (800257c <MX_SPI1_Init+0x84>)
 800254c:	2200      	movs	r2, #0
 800254e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002550:	4b0a      	ldr	r3, [pc, #40]	; (800257c <MX_SPI1_Init+0x84>)
 8002552:	2208      	movs	r2, #8
 8002554:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002556:	4809      	ldr	r0, [pc, #36]	; (800257c <MX_SPI1_Init+0x84>)
 8002558:	f00a fa2a 	bl	800c9b0 <HAL_SPI_Init>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002562:	f000 fa0d 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi2);
 8002566:	4b07      	ldr	r3, [pc, #28]	; (8002584 <MX_SPI1_Init+0x8c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	4b05      	ldr	r3, [pc, #20]	; (8002584 <MX_SPI1_Init+0x8c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002574:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	2000042c 	.word	0x2000042c
 8002580:	40013000 	.word	0x40013000
 8002584:	20000490 	.word	0x20000490

08002588 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800258c:	4b1f      	ldr	r3, [pc, #124]	; (800260c <MX_SPI2_Init+0x84>)
 800258e:	4a20      	ldr	r2, [pc, #128]	; (8002610 <MX_SPI2_Init+0x88>)
 8002590:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002592:	4b1e      	ldr	r3, [pc, #120]	; (800260c <MX_SPI2_Init+0x84>)
 8002594:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002598:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800259a:	4b1c      	ldr	r3, [pc, #112]	; (800260c <MX_SPI2_Init+0x84>)
 800259c:	2200      	movs	r2, #0
 800259e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80025a0:	4b1a      	ldr	r3, [pc, #104]	; (800260c <MX_SPI2_Init+0x84>)
 80025a2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80025a6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025a8:	4b18      	ldr	r3, [pc, #96]	; (800260c <MX_SPI2_Init+0x84>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025ae:	4b17      	ldr	r3, [pc, #92]	; (800260c <MX_SPI2_Init+0x84>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80025b4:	4b15      	ldr	r3, [pc, #84]	; (800260c <MX_SPI2_Init+0x84>)
 80025b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ba:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80025bc:	4b13      	ldr	r3, [pc, #76]	; (800260c <MX_SPI2_Init+0x84>)
 80025be:	2208      	movs	r2, #8
 80025c0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025c2:	4b12      	ldr	r3, [pc, #72]	; (800260c <MX_SPI2_Init+0x84>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80025c8:	4b10      	ldr	r3, [pc, #64]	; (800260c <MX_SPI2_Init+0x84>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025ce:	4b0f      	ldr	r3, [pc, #60]	; (800260c <MX_SPI2_Init+0x84>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80025d4:	4b0d      	ldr	r3, [pc, #52]	; (800260c <MX_SPI2_Init+0x84>)
 80025d6:	2207      	movs	r2, #7
 80025d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80025da:	4b0c      	ldr	r3, [pc, #48]	; (800260c <MX_SPI2_Init+0x84>)
 80025dc:	2200      	movs	r2, #0
 80025de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80025e0:	4b0a      	ldr	r3, [pc, #40]	; (800260c <MX_SPI2_Init+0x84>)
 80025e2:	2208      	movs	r2, #8
 80025e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80025e6:	4809      	ldr	r0, [pc, #36]	; (800260c <MX_SPI2_Init+0x84>)
 80025e8:	f00a f9e2 	bl	800c9b0 <HAL_SPI_Init>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80025f2:	f000 f9c5 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 80025f6:	4b07      	ldr	r3, [pc, #28]	; (8002614 <MX_SPI2_Init+0x8c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	4b05      	ldr	r3, [pc, #20]	; (8002614 <MX_SPI2_Init+0x8c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002604:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI2_Init 2 */

}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000490 	.word	0x20000490
 8002610:	40003800 	.word	0x40003800
 8002614:	2000042c 	.word	0x2000042c

08002618 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b088      	sub	sp, #32
 800261c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800261e:	f107 0310 	add.w	r3, r7, #16
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	605a      	str	r2, [r3, #4]
 8002628:	609a      	str	r2, [r3, #8]
 800262a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800262c:	1d3b      	adds	r3, r7, #4
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	605a      	str	r2, [r3, #4]
 8002634:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002636:	4b20      	ldr	r3, [pc, #128]	; (80026b8 <MX_TIM1_Init+0xa0>)
 8002638:	4a20      	ldr	r2, [pc, #128]	; (80026bc <MX_TIM1_Init+0xa4>)
 800263a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800263c:	4b1e      	ldr	r3, [pc, #120]	; (80026b8 <MX_TIM1_Init+0xa0>)
 800263e:	2200      	movs	r2, #0
 8002640:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002642:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <MX_TIM1_Init+0xa0>)
 8002644:	2200      	movs	r2, #0
 8002646:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002648:	4b1b      	ldr	r3, [pc, #108]	; (80026b8 <MX_TIM1_Init+0xa0>)
 800264a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800264e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002650:	4b19      	ldr	r3, [pc, #100]	; (80026b8 <MX_TIM1_Init+0xa0>)
 8002652:	2200      	movs	r2, #0
 8002654:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002656:	4b18      	ldr	r3, [pc, #96]	; (80026b8 <MX_TIM1_Init+0xa0>)
 8002658:	2200      	movs	r2, #0
 800265a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800265c:	4b16      	ldr	r3, [pc, #88]	; (80026b8 <MX_TIM1_Init+0xa0>)
 800265e:	2200      	movs	r2, #0
 8002660:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002662:	4815      	ldr	r0, [pc, #84]	; (80026b8 <MX_TIM1_Init+0xa0>)
 8002664:	f00b f8b4 	bl	800d7d0 <HAL_TIM_Base_Init>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800266e:	f000 f987 	bl	8002980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002676:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002678:	f107 0310 	add.w	r3, r7, #16
 800267c:	4619      	mov	r1, r3
 800267e:	480e      	ldr	r0, [pc, #56]	; (80026b8 <MX_TIM1_Init+0xa0>)
 8002680:	f00b fabd 	bl	800dbfe <HAL_TIM_ConfigClockSource>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800268a:	f000 f979 	bl	8002980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800268e:	2300      	movs	r3, #0
 8002690:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002692:	2300      	movs	r3, #0
 8002694:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800269a:	1d3b      	adds	r3, r7, #4
 800269c:	4619      	mov	r1, r3
 800269e:	4806      	ldr	r0, [pc, #24]	; (80026b8 <MX_TIM1_Init+0xa0>)
 80026a0:	f00b fc9c 	bl	800dfdc <HAL_TIMEx_MasterConfigSynchronization>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80026aa:	f000 f969 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80026ae:	bf00      	nop
 80026b0:	3720      	adds	r7, #32
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	200004f4 	.word	0x200004f4
 80026bc:	40012c00 	.word	0x40012c00

080026c0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026c6:	1d3b      	adds	r3, r7, #4
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	605a      	str	r2, [r3, #4]
 80026ce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80026d0:	4b14      	ldr	r3, [pc, #80]	; (8002724 <MX_TIM6_Init+0x64>)
 80026d2:	4a15      	ldr	r2, [pc, #84]	; (8002728 <MX_TIM6_Init+0x68>)
 80026d4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 43000-1;
 80026d6:	4b13      	ldr	r3, [pc, #76]	; (8002724 <MX_TIM6_Init+0x64>)
 80026d8:	f24a 72f7 	movw	r2, #42999	; 0xa7f7
 80026dc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026de:	4b11      	ldr	r3, [pc, #68]	; (8002724 <MX_TIM6_Init+0x64>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 80026e4:	4b0f      	ldr	r3, [pc, #60]	; (8002724 <MX_TIM6_Init+0x64>)
 80026e6:	2264      	movs	r2, #100	; 0x64
 80026e8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ea:	4b0e      	ldr	r3, [pc, #56]	; (8002724 <MX_TIM6_Init+0x64>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80026f0:	480c      	ldr	r0, [pc, #48]	; (8002724 <MX_TIM6_Init+0x64>)
 80026f2:	f00b f86d 	bl	800d7d0 <HAL_TIM_Base_Init>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80026fc:	f000 f940 	bl	8002980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002700:	2300      	movs	r3, #0
 8002702:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002708:	1d3b      	adds	r3, r7, #4
 800270a:	4619      	mov	r1, r3
 800270c:	4805      	ldr	r0, [pc, #20]	; (8002724 <MX_TIM6_Init+0x64>)
 800270e:	f00b fc65 	bl	800dfdc <HAL_TIMEx_MasterConfigSynchronization>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002718:	f000 f932 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800271c:	bf00      	nop
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20000540 	.word	0x20000540
 8002728:	40001000 	.word	0x40001000

0800272c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002732:	1d3b      	adds	r3, r7, #4
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800273c:	4b15      	ldr	r3, [pc, #84]	; (8002794 <MX_TIM7_Init+0x68>)
 800273e:	4a16      	ldr	r2, [pc, #88]	; (8002798 <MX_TIM7_Init+0x6c>)
 8002740:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 43000-1;
 8002742:	4b14      	ldr	r3, [pc, #80]	; (8002794 <MX_TIM7_Init+0x68>)
 8002744:	f24a 72f7 	movw	r2, #42999	; 0xa7f7
 8002748:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800274a:	4b12      	ldr	r3, [pc, #72]	; (8002794 <MX_TIM7_Init+0x68>)
 800274c:	2200      	movs	r2, #0
 800274e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 8002750:	4b10      	ldr	r3, [pc, #64]	; (8002794 <MX_TIM7_Init+0x68>)
 8002752:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002756:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002758:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <MX_TIM7_Init+0x68>)
 800275a:	2200      	movs	r2, #0
 800275c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800275e:	480d      	ldr	r0, [pc, #52]	; (8002794 <MX_TIM7_Init+0x68>)
 8002760:	f00b f836 	bl	800d7d0 <HAL_TIM_Base_Init>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800276a:	f000 f909 	bl	8002980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800276e:	2300      	movs	r3, #0
 8002770:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002776:	1d3b      	adds	r3, r7, #4
 8002778:	4619      	mov	r1, r3
 800277a:	4806      	ldr	r0, [pc, #24]	; (8002794 <MX_TIM7_Init+0x68>)
 800277c:	f00b fc2e 	bl	800dfdc <HAL_TIMEx_MasterConfigSynchronization>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8002786:	f000 f8fb 	bl	8002980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800278a:	bf00      	nop
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	2000058c 	.word	0x2000058c
 8002798:	40001400 	.word	0x40001400

0800279c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08a      	sub	sp, #40	; 0x28
 80027a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a2:	f107 0314 	add.w	r3, r7, #20
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	605a      	str	r2, [r3, #4]
 80027ac:	609a      	str	r2, [r3, #8]
 80027ae:	60da      	str	r2, [r3, #12]
 80027b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027b2:	4b6f      	ldr	r3, [pc, #444]	; (8002970 <MX_GPIO_Init+0x1d4>)
 80027b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b6:	4a6e      	ldr	r2, [pc, #440]	; (8002970 <MX_GPIO_Init+0x1d4>)
 80027b8:	f043 0304 	orr.w	r3, r3, #4
 80027bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027be:	4b6c      	ldr	r3, [pc, #432]	; (8002970 <MX_GPIO_Init+0x1d4>)
 80027c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c2:	f003 0304 	and.w	r3, r3, #4
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ca:	4b69      	ldr	r3, [pc, #420]	; (8002970 <MX_GPIO_Init+0x1d4>)
 80027cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ce:	4a68      	ldr	r2, [pc, #416]	; (8002970 <MX_GPIO_Init+0x1d4>)
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027d6:	4b66      	ldr	r3, [pc, #408]	; (8002970 <MX_GPIO_Init+0x1d4>)
 80027d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e2:	4b63      	ldr	r3, [pc, #396]	; (8002970 <MX_GPIO_Init+0x1d4>)
 80027e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e6:	4a62      	ldr	r2, [pc, #392]	; (8002970 <MX_GPIO_Init+0x1d4>)
 80027e8:	f043 0302 	orr.w	r3, r3, #2
 80027ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027ee:	4b60      	ldr	r3, [pc, #384]	; (8002970 <MX_GPIO_Init+0x1d4>)
 80027f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027fa:	4b5d      	ldr	r3, [pc, #372]	; (8002970 <MX_GPIO_Init+0x1d4>)
 80027fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fe:	4a5c      	ldr	r2, [pc, #368]	; (8002970 <MX_GPIO_Init+0x1d4>)
 8002800:	f043 0308 	orr.w	r3, r3, #8
 8002804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002806:	4b5a      	ldr	r3, [pc, #360]	; (8002970 <MX_GPIO_Init+0x1d4>)
 8002808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	607b      	str	r3, [r7, #4]
 8002810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCDD6_Pin|LCDD5_Pin|LCDD4_Pin|LCDD3_Pin
 8002812:	2200      	movs	r2, #0
 8002814:	f64f 417f 	movw	r1, #64639	; 0xfc7f
 8002818:	4856      	ldr	r0, [pc, #344]	; (8002974 <MX_GPIO_Init+0x1d8>)
 800281a:	f008 fd99 	bl	800b350 <HAL_GPIO_WritePin>
                          |LCDD2_Pin|LCDD1_Pin|LCDD0_Pin|RELAY3_Pin
                          |RELAY4_Pin|W5500_INT_Pin|GLCDEN_Pin|GLCDCS2_Pin
                          |GLCDRW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RELAY2_Pin|LCDRS_Pin, GPIO_PIN_RESET);
 800281e:	2200      	movs	r2, #0
 8002820:	2112      	movs	r1, #18
 8002822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002826:	f008 fd93 	bl	800b350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _W25QXX_CS_PIN_Pin|WIFIRST_Pin|LCDD7_Pin, GPIO_PIN_RESET);
 800282a:	2200      	movs	r2, #0
 800282c:	2125      	movs	r1, #37	; 0x25
 800282e:	4852      	ldr	r0, [pc, #328]	; (8002978 <MX_GPIO_Init+0x1dc>)
 8002830:	f008 fd8e 	bl	800b350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 8002834:	2201      	movs	r2, #1
 8002836:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800283a:	484f      	ldr	r0, [pc, #316]	; (8002978 <MX_GPIO_Init+0x1dc>)
 800283c:	f008 fd88 	bl	800b350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500RST_GPIO_Port, W5500RST_Pin, GPIO_PIN_SET);
 8002840:	2201      	movs	r2, #1
 8002842:	2180      	movs	r1, #128	; 0x80
 8002844:	484b      	ldr	r0, [pc, #300]	; (8002974 <MX_GPIO_Init+0x1d8>)
 8002846:	f008 fd83 	bl	800b350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(InputMachine_GPIO_Port, InputMachine_Pin, GPIO_PIN_SET);
 800284a:	2201      	movs	r2, #1
 800284c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002850:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002854:	f008 fd7c 	bl	800b350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 8002858:	2200      	movs	r2, #0
 800285a:	2104      	movs	r1, #4
 800285c:	4847      	ldr	r0, [pc, #284]	; (800297c <MX_GPIO_Init+0x1e0>)
 800285e:	f008 fd77 	bl	800b350 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCDD6_Pin LCDD5_Pin LCDD4_Pin LCDD3_Pin
                           LCDD2_Pin LCDD1_Pin LCDD0_Pin RELAY3_Pin
                           RELAY4_Pin W5500_INT_Pin W5500RST_Pin */
  GPIO_InitStruct.Pin = LCDD6_Pin|LCDD5_Pin|LCDD4_Pin|LCDD3_Pin
 8002862:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8002866:	617b      	str	r3, [r7, #20]
                          |LCDD2_Pin|LCDD1_Pin|LCDD0_Pin|RELAY3_Pin
                          |RELAY4_Pin|W5500_INT_Pin|W5500RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002868:	2301      	movs	r3, #1
 800286a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002870:	2300      	movs	r3, #0
 8002872:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002874:	f107 0314 	add.w	r3, r7, #20
 8002878:	4619      	mov	r1, r3
 800287a:	483e      	ldr	r0, [pc, #248]	; (8002974 <MX_GPIO_Init+0x1d8>)
 800287c:	f008 fbee 	bl	800b05c <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY2_Pin InputMachine_Pin */
  GPIO_InitStruct.Pin = RELAY2_Pin|InputMachine_Pin;
 8002880:	f241 0302 	movw	r3, #4098	; 0x1002
 8002884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002886:	2301      	movs	r3, #1
 8002888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288e:	2300      	movs	r3, #0
 8002890:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002892:	f107 0314 	add.w	r3, r7, #20
 8002896:	4619      	mov	r1, r3
 8002898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800289c:	f008 fbde 	bl	800b05c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCDRS_Pin */
  GPIO_InitStruct.Pin = LCDRS_Pin;
 80028a0:	2310      	movs	r3, #16
 80028a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028a4:	2301      	movs	r3, #1
 80028a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028a8:	2301      	movs	r3, #1
 80028aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ac:	2300      	movs	r3, #0
 80028ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCDRS_GPIO_Port, &GPIO_InitStruct);
 80028b0:	f107 0314 	add.w	r3, r7, #20
 80028b4:	4619      	mov	r1, r3
 80028b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ba:	f008 fbcf 	bl	800b05c <HAL_GPIO_Init>

  /*Configure GPIO pins : _W25QXX_CS_PIN_Pin WIFIRST_Pin LCDD7_Pin */
  GPIO_InitStruct.Pin = _W25QXX_CS_PIN_Pin|WIFIRST_Pin|LCDD7_Pin;
 80028be:	2325      	movs	r3, #37	; 0x25
 80028c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028c2:	2301      	movs	r3, #1
 80028c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ca:	2300      	movs	r3, #0
 80028cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ce:	f107 0314 	add.w	r3, r7, #20
 80028d2:	4619      	mov	r1, r3
 80028d4:	4828      	ldr	r0, [pc, #160]	; (8002978 <MX_GPIO_Init+0x1dc>)
 80028d6:	f008 fbc1 	bl	800b05c <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_CS_Pin */
  GPIO_InitStruct.Pin = W5500_CS_Pin;
 80028da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028e0:	2301      	movs	r3, #1
 80028e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028e8:	2302      	movs	r3, #2
 80028ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(W5500_CS_GPIO_Port, &GPIO_InitStruct);
 80028ec:	f107 0314 	add.w	r3, r7, #20
 80028f0:	4619      	mov	r1, r3
 80028f2:	4821      	ldr	r0, [pc, #132]	; (8002978 <MX_GPIO_Init+0x1dc>)
 80028f4:	f008 fbb2 	bl	800b05c <HAL_GPIO_Init>

  /*Configure GPIO pins : InputMachine1_Pin InputMachine2_Pin */
  GPIO_InitStruct.Pin = InputMachine1_Pin|InputMachine2_Pin;
 80028f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028fe:	2300      	movs	r3, #0
 8002900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002902:	2300      	movs	r3, #0
 8002904:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002906:	f107 0314 	add.w	r3, r7, #20
 800290a:	4619      	mov	r1, r3
 800290c:	4819      	ldr	r0, [pc, #100]	; (8002974 <MX_GPIO_Init+0x1d8>)
 800290e:	f008 fba5 	bl	800b05c <HAL_GPIO_Init>

  /*Configure GPIO pins : InputMachine3_Pin InputMachine4_Pin InputMachine5_Pin InputMachine6_Pin */
  GPIO_InitStruct.Pin = InputMachine3_Pin|InputMachine4_Pin|InputMachine5_Pin|InputMachine6_Pin;
 8002912:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002918:	2300      	movs	r3, #0
 800291a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291c:	2300      	movs	r3, #0
 800291e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002920:	f107 0314 	add.w	r3, r7, #20
 8002924:	4619      	mov	r1, r3
 8002926:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800292a:	f008 fb97 	bl	800b05c <HAL_GPIO_Init>

  /*Configure GPIO pins : GLCDEN_Pin GLCDCS2_Pin GLCDRW_Pin */
  GPIO_InitStruct.Pin = GLCDEN_Pin|GLCDCS2_Pin|GLCDRW_Pin;
 800292e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002934:	2301      	movs	r3, #1
 8002936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002938:	2301      	movs	r3, #1
 800293a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293c:	2300      	movs	r3, #0
 800293e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002940:	f107 0314 	add.w	r3, r7, #20
 8002944:	4619      	mov	r1, r3
 8002946:	480b      	ldr	r0, [pc, #44]	; (8002974 <MX_GPIO_Init+0x1d8>)
 8002948:	f008 fb88 	bl	800b05c <HAL_GPIO_Init>

  /*Configure GPIO pin : GLCDCS1_Pin */
  GPIO_InitStruct.Pin = GLCDCS1_Pin;
 800294c:	2304      	movs	r3, #4
 800294e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002950:	2301      	movs	r3, #1
 8002952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002954:	2301      	movs	r3, #1
 8002956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002958:	2300      	movs	r3, #0
 800295a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GLCDCS1_GPIO_Port, &GPIO_InitStruct);
 800295c:	f107 0314 	add.w	r3, r7, #20
 8002960:	4619      	mov	r1, r3
 8002962:	4806      	ldr	r0, [pc, #24]	; (800297c <MX_GPIO_Init+0x1e0>)
 8002964:	f008 fb7a 	bl	800b05c <HAL_GPIO_Init>

}
 8002968:	bf00      	nop
 800296a:	3728      	adds	r7, #40	; 0x28
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40021000 	.word	0x40021000
 8002974:	48000800 	.word	0x48000800
 8002978:	48000400 	.word	0x48000400
 800297c:	48000c00 	.word	0x48000c00

08002980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002984:	b672      	cpsid	i
}
 8002986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002988:	e7fe      	b.n	8002988 <Error_Handler+0x8>
	...

0800298c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002992:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <HAL_MspInit+0x44>)
 8002994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002996:	4a0e      	ldr	r2, [pc, #56]	; (80029d0 <HAL_MspInit+0x44>)
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	6613      	str	r3, [r2, #96]	; 0x60
 800299e:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <HAL_MspInit+0x44>)
 80029a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	607b      	str	r3, [r7, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029aa:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <HAL_MspInit+0x44>)
 80029ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ae:	4a08      	ldr	r2, [pc, #32]	; (80029d0 <HAL_MspInit+0x44>)
 80029b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b4:	6593      	str	r3, [r2, #88]	; 0x58
 80029b6:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <HAL_MspInit+0x44>)
 80029b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029be:	603b      	str	r3, [r7, #0]
 80029c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40021000 	.word	0x40021000

080029d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b0a2      	sub	sp, #136	; 0x88
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029dc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	60da      	str	r2, [r3, #12]
 80029ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029ec:	f107 0314 	add.w	r3, r7, #20
 80029f0:	2260      	movs	r2, #96	; 0x60
 80029f2:	2100      	movs	r1, #0
 80029f4:	4618      	mov	r0, r3
 80029f6:	f00c ff61 	bl	800f8bc <memset>
  if(hi2c->Instance==I2C1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a20      	ldr	r2, [pc, #128]	; (8002a80 <HAL_I2C_MspInit+0xac>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d138      	bne.n	8002a76 <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002a04:	2340      	movs	r3, #64	; 0x40
 8002a06:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a0c:	f107 0314 	add.w	r3, r7, #20
 8002a10:	4618      	mov	r0, r3
 8002a12:	f009 fc91 	bl	800c338 <HAL_RCCEx_PeriphCLKConfig>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002a1c:	f7ff ffb0 	bl	8002980 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a20:	4b18      	ldr	r3, [pc, #96]	; (8002a84 <HAL_I2C_MspInit+0xb0>)
 8002a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a24:	4a17      	ldr	r2, [pc, #92]	; (8002a84 <HAL_I2C_MspInit+0xb0>)
 8002a26:	f043 0302 	orr.w	r3, r3, #2
 8002a2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a2c:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <HAL_I2C_MspInit+0xb0>)
 8002a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a3c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a3e:	2312      	movs	r3, #18
 8002a40:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a46:	2303      	movs	r3, #3
 8002a48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a4c:	2304      	movs	r3, #4
 8002a4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a52:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002a56:	4619      	mov	r1, r3
 8002a58:	480b      	ldr	r0, [pc, #44]	; (8002a88 <HAL_I2C_MspInit+0xb4>)
 8002a5a:	f008 faff 	bl	800b05c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a5e:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <HAL_I2C_MspInit+0xb0>)
 8002a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a62:	4a08      	ldr	r2, [pc, #32]	; (8002a84 <HAL_I2C_MspInit+0xb0>)
 8002a64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a68:	6593      	str	r3, [r2, #88]	; 0x58
 8002a6a:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <HAL_I2C_MspInit+0xb0>)
 8002a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a76:	bf00      	nop
 8002a78:	3788      	adds	r7, #136	; 0x88
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40005400 	.word	0x40005400
 8002a84:	40021000 	.word	0x40021000
 8002a88:	48000400 	.word	0x48000400

08002a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b0a6      	sub	sp, #152	; 0x98
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a94:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aa8:	2260      	movs	r2, #96	; 0x60
 8002aaa:	2100      	movs	r1, #0
 8002aac:	4618      	mov	r0, r3
 8002aae:	f00c ff05 	bl	800f8bc <memset>
  if(huart->Instance==LPUART1)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a6f      	ldr	r2, [pc, #444]	; (8002c74 <HAL_UART_MspInit+0x1e8>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d144      	bne.n	8002b46 <HAL_UART_MspInit+0xba>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002abc:	2320      	movs	r3, #32
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f009 fc35 	bl	800c338 <HAL_RCCEx_PeriphCLKConfig>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002ad4:	f7ff ff54 	bl	8002980 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002ad8:	4b67      	ldr	r3, [pc, #412]	; (8002c78 <HAL_UART_MspInit+0x1ec>)
 8002ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002adc:	4a66      	ldr	r2, [pc, #408]	; (8002c78 <HAL_UART_MspInit+0x1ec>)
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002ae4:	4b64      	ldr	r3, [pc, #400]	; (8002c78 <HAL_UART_MspInit+0x1ec>)
 8002ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	623b      	str	r3, [r7, #32]
 8002aee:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af0:	4b61      	ldr	r3, [pc, #388]	; (8002c78 <HAL_UART_MspInit+0x1ec>)
 8002af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af4:	4a60      	ldr	r2, [pc, #384]	; (8002c78 <HAL_UART_MspInit+0x1ec>)
 8002af6:	f043 0302 	orr.w	r3, r3, #2
 8002afa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002afc:	4b5e      	ldr	r3, [pc, #376]	; (8002c78 <HAL_UART_MspInit+0x1ec>)
 8002afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	61fb      	str	r3, [r7, #28]
 8002b06:	69fb      	ldr	r3, [r7, #28]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b08:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b10:	2302      	movs	r3, #2
 8002b12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002b22:	2308      	movs	r3, #8
 8002b24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b28:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4853      	ldr	r0, [pc, #332]	; (8002c7c <HAL_UART_MspInit+0x1f0>)
 8002b30:	f008 fa94 	bl	800b05c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002b34:	2200      	movs	r2, #0
 8002b36:	2100      	movs	r1, #0
 8002b38:	2046      	movs	r0, #70	; 0x46
 8002b3a:	f008 f9da 	bl	800aef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002b3e:	2046      	movs	r0, #70	; 0x46
 8002b40:	f008 f9f3 	bl	800af2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b44:	e091      	b.n	8002c6a <HAL_UART_MspInit+0x1de>
  else if(huart->Instance==USART1)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a4d      	ldr	r2, [pc, #308]	; (8002c80 <HAL_UART_MspInit+0x1f4>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d143      	bne.n	8002bd8 <HAL_UART_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b50:	2301      	movs	r3, #1
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b54:	2300      	movs	r3, #0
 8002b56:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f009 fbeb 	bl	800c338 <HAL_RCCEx_PeriphCLKConfig>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8002b68:	f7ff ff0a 	bl	8002980 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b6c:	4b42      	ldr	r3, [pc, #264]	; (8002c78 <HAL_UART_MspInit+0x1ec>)
 8002b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b70:	4a41      	ldr	r2, [pc, #260]	; (8002c78 <HAL_UART_MspInit+0x1ec>)
 8002b72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b76:	6613      	str	r3, [r2, #96]	; 0x60
 8002b78:	4b3f      	ldr	r3, [pc, #252]	; (8002c78 <HAL_UART_MspInit+0x1ec>)
 8002b7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b80:	61bb      	str	r3, [r7, #24]
 8002b82:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b84:	4b3c      	ldr	r3, [pc, #240]	; (8002c78 <HAL_UART_MspInit+0x1ec>)
 8002b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b88:	4a3b      	ldr	r2, [pc, #236]	; (8002c78 <HAL_UART_MspInit+0x1ec>)
 8002b8a:	f043 0302 	orr.w	r3, r3, #2
 8002b8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b90:	4b39      	ldr	r3, [pc, #228]	; (8002c78 <HAL_UART_MspInit+0x1ec>)
 8002b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b9c:	23c0      	movs	r3, #192	; 0xc0
 8002b9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bb4:	2307      	movs	r3, #7
 8002bb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bba:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	482e      	ldr	r0, [pc, #184]	; (8002c7c <HAL_UART_MspInit+0x1f0>)
 8002bc2:	f008 fa4b 	bl	800b05c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2100      	movs	r1, #0
 8002bca:	2025      	movs	r0, #37	; 0x25
 8002bcc:	f008 f991 	bl	800aef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bd0:	2025      	movs	r0, #37	; 0x25
 8002bd2:	f008 f9aa 	bl	800af2a <HAL_NVIC_EnableIRQ>
}
 8002bd6:	e048      	b.n	8002c6a <HAL_UART_MspInit+0x1de>
  else if(huart->Instance==USART2)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a29      	ldr	r2, [pc, #164]	; (8002c84 <HAL_UART_MspInit+0x1f8>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d143      	bne.n	8002c6a <HAL_UART_MspInit+0x1de>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002be2:	2302      	movs	r3, #2
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002be6:	2300      	movs	r3, #0
 8002be8:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f009 fba2 	bl	800c338 <HAL_RCCEx_PeriphCLKConfig>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_UART_MspInit+0x172>
      Error_Handler();
 8002bfa:	f7ff fec1 	bl	8002980 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bfe:	4b1e      	ldr	r3, [pc, #120]	; (8002c78 <HAL_UART_MspInit+0x1ec>)
 8002c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c02:	4a1d      	ldr	r2, [pc, #116]	; (8002c78 <HAL_UART_MspInit+0x1ec>)
 8002c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c08:	6593      	str	r3, [r2, #88]	; 0x58
 8002c0a:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <HAL_UART_MspInit+0x1ec>)
 8002c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c12:	613b      	str	r3, [r7, #16]
 8002c14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c16:	4b18      	ldr	r3, [pc, #96]	; (8002c78 <HAL_UART_MspInit+0x1ec>)
 8002c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1a:	4a17      	ldr	r2, [pc, #92]	; (8002c78 <HAL_UART_MspInit+0x1ec>)
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c22:	4b15      	ldr	r3, [pc, #84]	; (8002c78 <HAL_UART_MspInit+0x1ec>)
 8002c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c2e:	230c      	movs	r3, #12
 8002c30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c34:	2302      	movs	r3, #2
 8002c36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c40:	2303      	movs	r3, #3
 8002c42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c46:	2307      	movs	r3, #7
 8002c48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002c50:	4619      	mov	r1, r3
 8002c52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c56:	f008 fa01 	bl	800b05c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	2026      	movs	r0, #38	; 0x26
 8002c60:	f008 f947 	bl	800aef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c64:	2026      	movs	r0, #38	; 0x26
 8002c66:	f008 f960 	bl	800af2a <HAL_NVIC_EnableIRQ>
}
 8002c6a:	bf00      	nop
 8002c6c:	3798      	adds	r7, #152	; 0x98
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40008000 	.word	0x40008000
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	48000400 	.word	0x48000400
 8002c80:	40013800 	.word	0x40013800
 8002c84:	40004400 	.word	0x40004400

08002c88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b08c      	sub	sp, #48	; 0x30
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c90:	f107 031c 	add.w	r3, r7, #28
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	60da      	str	r2, [r3, #12]
 8002c9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a2f      	ldr	r2, [pc, #188]	; (8002d64 <HAL_SPI_MspInit+0xdc>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d129      	bne.n	8002cfe <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002caa:	4b2f      	ldr	r3, [pc, #188]	; (8002d68 <HAL_SPI_MspInit+0xe0>)
 8002cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cae:	4a2e      	ldr	r2, [pc, #184]	; (8002d68 <HAL_SPI_MspInit+0xe0>)
 8002cb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cb4:	6613      	str	r3, [r2, #96]	; 0x60
 8002cb6:	4b2c      	ldr	r3, [pc, #176]	; (8002d68 <HAL_SPI_MspInit+0xe0>)
 8002cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cbe:	61bb      	str	r3, [r7, #24]
 8002cc0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc2:	4b29      	ldr	r3, [pc, #164]	; (8002d68 <HAL_SPI_MspInit+0xe0>)
 8002cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc6:	4a28      	ldr	r2, [pc, #160]	; (8002d68 <HAL_SPI_MspInit+0xe0>)
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cce:	4b26      	ldr	r3, [pc, #152]	; (8002d68 <HAL_SPI_MspInit+0xe0>)
 8002cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002cda:	23e0      	movs	r3, #224	; 0xe0
 8002cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cea:	2305      	movs	r3, #5
 8002cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cee:	f107 031c 	add.w	r3, r7, #28
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cf8:	f008 f9b0 	bl	800b05c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002cfc:	e02d      	b.n	8002d5a <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI2)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a1a      	ldr	r2, [pc, #104]	; (8002d6c <HAL_SPI_MspInit+0xe4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d128      	bne.n	8002d5a <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d08:	4b17      	ldr	r3, [pc, #92]	; (8002d68 <HAL_SPI_MspInit+0xe0>)
 8002d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0c:	4a16      	ldr	r2, [pc, #88]	; (8002d68 <HAL_SPI_MspInit+0xe0>)
 8002d0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d12:	6593      	str	r3, [r2, #88]	; 0x58
 8002d14:	4b14      	ldr	r3, [pc, #80]	; (8002d68 <HAL_SPI_MspInit+0xe0>)
 8002d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d20:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <HAL_SPI_MspInit+0xe0>)
 8002d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d24:	4a10      	ldr	r2, [pc, #64]	; (8002d68 <HAL_SPI_MspInit+0xe0>)
 8002d26:	f043 0302 	orr.w	r3, r3, #2
 8002d2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d2c:	4b0e      	ldr	r3, [pc, #56]	; (8002d68 <HAL_SPI_MspInit+0xe0>)
 8002d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002d38:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d46:	2303      	movs	r3, #3
 8002d48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d4a:	2305      	movs	r3, #5
 8002d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d4e:	f107 031c 	add.w	r3, r7, #28
 8002d52:	4619      	mov	r1, r3
 8002d54:	4806      	ldr	r0, [pc, #24]	; (8002d70 <HAL_SPI_MspInit+0xe8>)
 8002d56:	f008 f981 	bl	800b05c <HAL_GPIO_Init>
}
 8002d5a:	bf00      	nop
 8002d5c:	3730      	adds	r7, #48	; 0x30
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40013000 	.word	0x40013000
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	40003800 	.word	0x40003800
 8002d70:	48000400 	.word	0x48000400

08002d74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a23      	ldr	r2, [pc, #140]	; (8002e10 <HAL_TIM_Base_MspInit+0x9c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d10c      	bne.n	8002da0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d86:	4b23      	ldr	r3, [pc, #140]	; (8002e14 <HAL_TIM_Base_MspInit+0xa0>)
 8002d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d8a:	4a22      	ldr	r2, [pc, #136]	; (8002e14 <HAL_TIM_Base_MspInit+0xa0>)
 8002d8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d90:	6613      	str	r3, [r2, #96]	; 0x60
 8002d92:	4b20      	ldr	r3, [pc, #128]	; (8002e14 <HAL_TIM_Base_MspInit+0xa0>)
 8002d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002d9e:	e032      	b.n	8002e06 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a1c      	ldr	r2, [pc, #112]	; (8002e18 <HAL_TIM_Base_MspInit+0xa4>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d114      	bne.n	8002dd4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002daa:	4b1a      	ldr	r3, [pc, #104]	; (8002e14 <HAL_TIM_Base_MspInit+0xa0>)
 8002dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dae:	4a19      	ldr	r2, [pc, #100]	; (8002e14 <HAL_TIM_Base_MspInit+0xa0>)
 8002db0:	f043 0310 	orr.w	r3, r3, #16
 8002db4:	6593      	str	r3, [r2, #88]	; 0x58
 8002db6:	4b17      	ldr	r3, [pc, #92]	; (8002e14 <HAL_TIM_Base_MspInit+0xa0>)
 8002db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dba:	f003 0310 	and.w	r3, r3, #16
 8002dbe:	613b      	str	r3, [r7, #16]
 8002dc0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	2036      	movs	r0, #54	; 0x36
 8002dc8:	f008 f893 	bl	800aef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002dcc:	2036      	movs	r0, #54	; 0x36
 8002dce:	f008 f8ac 	bl	800af2a <HAL_NVIC_EnableIRQ>
}
 8002dd2:	e018      	b.n	8002e06 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM7)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a10      	ldr	r2, [pc, #64]	; (8002e1c <HAL_TIM_Base_MspInit+0xa8>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d113      	bne.n	8002e06 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002dde:	4b0d      	ldr	r3, [pc, #52]	; (8002e14 <HAL_TIM_Base_MspInit+0xa0>)
 8002de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de2:	4a0c      	ldr	r2, [pc, #48]	; (8002e14 <HAL_TIM_Base_MspInit+0xa0>)
 8002de4:	f043 0320 	orr.w	r3, r3, #32
 8002de8:	6593      	str	r3, [r2, #88]	; 0x58
 8002dea:	4b0a      	ldr	r3, [pc, #40]	; (8002e14 <HAL_TIM_Base_MspInit+0xa0>)
 8002dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dee:	f003 0320 	and.w	r3, r3, #32
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002df6:	2200      	movs	r2, #0
 8002df8:	2100      	movs	r1, #0
 8002dfa:	2037      	movs	r0, #55	; 0x37
 8002dfc:	f008 f879 	bl	800aef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002e00:	2037      	movs	r0, #55	; 0x37
 8002e02:	f008 f892 	bl	800af2a <HAL_NVIC_EnableIRQ>
}
 8002e06:	bf00      	nop
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40012c00 	.word	0x40012c00
 8002e14:	40021000 	.word	0x40021000
 8002e18:	40001000 	.word	0x40001000
 8002e1c:	40001400 	.word	0x40001400

08002e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e24:	e7fe      	b.n	8002e24 <NMI_Handler+0x4>

08002e26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e26:	b480      	push	{r7}
 8002e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e2a:	e7fe      	b.n	8002e2a <HardFault_Handler+0x4>

08002e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e30:	e7fe      	b.n	8002e30 <MemManage_Handler+0x4>

08002e32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e32:	b480      	push	{r7}
 8002e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e36:	e7fe      	b.n	8002e36 <BusFault_Handler+0x4>

08002e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e3c:	e7fe      	b.n	8002e3c <UsageFault_Handler+0x4>

08002e3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e42:	bf00      	nop
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e6c:	f007 ff22 	bl	800acb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e70:	bf00      	nop
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e78:	4802      	ldr	r0, [pc, #8]	; (8002e84 <USART1_IRQHandler+0x10>)
 8002e7a:	f00b fa45 	bl	800e308 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e7e:	bf00      	nop
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	20000324 	.word	0x20000324

08002e88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002e8c:	4802      	ldr	r0, [pc, #8]	; (8002e98 <USART2_IRQHandler+0x10>)
 8002e8e:	f00b fa3b 	bl	800e308 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002e92:	bf00      	nop
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	200003a8 	.word	0x200003a8

08002e9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ea0:	4802      	ldr	r0, [pc, #8]	; (8002eac <TIM6_DAC_IRQHandler+0x10>)
 8002ea2:	f00a fd8d 	bl	800d9c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ea6:	bf00      	nop
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	20000540 	.word	0x20000540

08002eb0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002eb4:	4802      	ldr	r0, [pc, #8]	; (8002ec0 <TIM7_IRQHandler+0x10>)
 8002eb6:	f00a fd83 	bl	800d9c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002eba:	bf00      	nop
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	2000058c 	.word	0x2000058c

08002ec4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002ec8:	4802      	ldr	r0, [pc, #8]	; (8002ed4 <LPUART1_IRQHandler+0x10>)
 8002eca:	f00b fa1d 	bl	800e308 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002ece:	bf00      	nop
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	200002a0 	.word	0x200002a0

08002ed8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ee0:	4a14      	ldr	r2, [pc, #80]	; (8002f34 <_sbrk+0x5c>)
 8002ee2:	4b15      	ldr	r3, [pc, #84]	; (8002f38 <_sbrk+0x60>)
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002eec:	4b13      	ldr	r3, [pc, #76]	; (8002f3c <_sbrk+0x64>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d102      	bne.n	8002efa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ef4:	4b11      	ldr	r3, [pc, #68]	; (8002f3c <_sbrk+0x64>)
 8002ef6:	4a12      	ldr	r2, [pc, #72]	; (8002f40 <_sbrk+0x68>)
 8002ef8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002efa:	4b10      	ldr	r3, [pc, #64]	; (8002f3c <_sbrk+0x64>)
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4413      	add	r3, r2
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d207      	bcs.n	8002f18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f08:	f00c fc98 	bl	800f83c <__errno>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	220c      	movs	r2, #12
 8002f10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f12:	f04f 33ff 	mov.w	r3, #4294967295
 8002f16:	e009      	b.n	8002f2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f18:	4b08      	ldr	r3, [pc, #32]	; (8002f3c <_sbrk+0x64>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f1e:	4b07      	ldr	r3, [pc, #28]	; (8002f3c <_sbrk+0x64>)
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4413      	add	r3, r2
 8002f26:	4a05      	ldr	r2, [pc, #20]	; (8002f3c <_sbrk+0x64>)
 8002f28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20010000 	.word	0x20010000
 8002f38:	00000400 	.word	0x00000400
 8002f3c:	200005e0 	.word	0x200005e0
 8002f40:	200007c8 	.word	0x200007c8

08002f44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002f48:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <SystemInit+0x20>)
 8002f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4e:	4a05      	ldr	r2, [pc, #20]	; (8002f64 <SystemInit+0x20>)
 8002f50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002f58:	bf00      	nop
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	e000ed00 	.word	0xe000ed00

08002f68 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af02      	add	r7, sp, #8
 8002f6e:	4603      	mov	r3, r0
 8002f70:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8002f72:	f107 020f 	add.w	r2, r7, #15
 8002f76:	1df9      	adds	r1, r7, #7
 8002f78:	2364      	movs	r3, #100	; 0x64
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	4804      	ldr	r0, [pc, #16]	; (8002f90 <W25qxx_Spi+0x28>)
 8002f80:	f00a f857 	bl	800d032 <HAL_SPI_TransmitReceive>
	return ret;
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	2000042c 	.word	0x2000042c

08002f94 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60bb      	str	r3, [r7, #8]
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	607b      	str	r3, [r7, #4]
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002faa:	2200      	movs	r2, #0
 8002fac:	2101      	movs	r1, #1
 8002fae:	4813      	ldr	r0, [pc, #76]	; (8002ffc <W25qxx_ReadID+0x68>)
 8002fb0:	f008 f9ce 	bl	800b350 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8002fb4:	209f      	movs	r0, #159	; 0x9f
 8002fb6:	f7ff ffd7 	bl	8002f68 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002fba:	20a5      	movs	r0, #165	; 0xa5
 8002fbc:	f7ff ffd4 	bl	8002f68 <W25qxx_Spi>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002fc4:	20a5      	movs	r0, #165	; 0xa5
 8002fc6:	f7ff ffcf 	bl	8002f68 <W25qxx_Spi>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002fce:	20a5      	movs	r0, #165	; 0xa5
 8002fd0:	f7ff ffca 	bl	8002f68 <W25qxx_Spi>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002fd8:	2201      	movs	r2, #1
 8002fda:	2101      	movs	r1, #1
 8002fdc:	4807      	ldr	r0, [pc, #28]	; (8002ffc <W25qxx_ReadID+0x68>)
 8002fde:	f008 f9b7 	bl	800b350 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	041a      	lsls	r2, r3, #16
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	021b      	lsls	r3, r3, #8
 8002fea:	4313      	orrs	r3, r2
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]
	return Temp;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	48000400 	.word	0x48000400

08003000 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8003000:	b590      	push	{r4, r7, lr}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003006:	2200      	movs	r2, #0
 8003008:	2101      	movs	r1, #1
 800300a:	4816      	ldr	r0, [pc, #88]	; (8003064 <W25qxx_ReadUniqID+0x64>)
 800300c:	f008 f9a0 	bl	800b350 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8003010:	204b      	movs	r0, #75	; 0x4b
 8003012:	f7ff ffa9 	bl	8002f68 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003016:	2300      	movs	r3, #0
 8003018:	71fb      	strb	r3, [r7, #7]
 800301a:	e005      	b.n	8003028 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800301c:	20a5      	movs	r0, #165	; 0xa5
 800301e:	f7ff ffa3 	bl	8002f68 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003022:	79fb      	ldrb	r3, [r7, #7]
 8003024:	3301      	adds	r3, #1
 8003026:	71fb      	strb	r3, [r7, #7]
 8003028:	79fb      	ldrb	r3, [r7, #7]
 800302a:	2b03      	cmp	r3, #3
 800302c:	d9f6      	bls.n	800301c <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 800302e:	2300      	movs	r3, #0
 8003030:	71bb      	strb	r3, [r7, #6]
 8003032:	e00b      	b.n	800304c <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003034:	79bc      	ldrb	r4, [r7, #6]
 8003036:	20a5      	movs	r0, #165	; 0xa5
 8003038:	f7ff ff96 	bl	8002f68 <W25qxx_Spi>
 800303c:	4603      	mov	r3, r0
 800303e:	461a      	mov	r2, r3
 8003040:	4b09      	ldr	r3, [pc, #36]	; (8003068 <W25qxx_ReadUniqID+0x68>)
 8003042:	4423      	add	r3, r4
 8003044:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8003046:	79bb      	ldrb	r3, [r7, #6]
 8003048:	3301      	adds	r3, #1
 800304a:	71bb      	strb	r3, [r7, #6]
 800304c:	79bb      	ldrb	r3, [r7, #6]
 800304e:	2b07      	cmp	r3, #7
 8003050:	d9f0      	bls.n	8003034 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003052:	2201      	movs	r2, #1
 8003054:	2101      	movs	r1, #1
 8003056:	4803      	ldr	r0, [pc, #12]	; (8003064 <W25qxx_ReadUniqID+0x64>)
 8003058:	f008 f97a 	bl	800b350 <HAL_GPIO_WritePin>
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	bd90      	pop	{r4, r7, pc}
 8003064:	48000400 	.word	0x48000400
 8003068:	200005e4 	.word	0x200005e4

0800306c <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003070:	2200      	movs	r2, #0
 8003072:	2101      	movs	r1, #1
 8003074:	4807      	ldr	r0, [pc, #28]	; (8003094 <W25qxx_WriteEnable+0x28>)
 8003076:	f008 f96b 	bl	800b350 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 800307a:	2006      	movs	r0, #6
 800307c:	f7ff ff74 	bl	8002f68 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003080:	2201      	movs	r2, #1
 8003082:	2101      	movs	r1, #1
 8003084:	4803      	ldr	r0, [pc, #12]	; (8003094 <W25qxx_WriteEnable+0x28>)
 8003086:	f008 f963 	bl	800b350 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 800308a:	2001      	movs	r0, #1
 800308c:	f007 fe32 	bl	800acf4 <HAL_Delay>
}
 8003090:	bf00      	nop
 8003092:	bd80      	pop	{r7, pc}
 8003094:	48000400 	.word	0x48000400

08003098 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80030a6:	2200      	movs	r2, #0
 80030a8:	2101      	movs	r1, #1
 80030aa:	481c      	ldr	r0, [pc, #112]	; (800311c <W25qxx_ReadStatusRegister+0x84>)
 80030ac:	f008 f950 	bl	800b350 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 80030b0:	79fb      	ldrb	r3, [r7, #7]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d10c      	bne.n	80030d0 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 80030b6:	2005      	movs	r0, #5
 80030b8:	f7ff ff56 	bl	8002f68 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80030bc:	20a5      	movs	r0, #165	; 0xa5
 80030be:	f7ff ff53 	bl	8002f68 <W25qxx_Spi>
 80030c2:	4603      	mov	r3, r0
 80030c4:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 80030c6:	4a16      	ldr	r2, [pc, #88]	; (8003120 <W25qxx_ReadStatusRegister+0x88>)
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80030ce:	e01b      	b.n	8003108 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 80030d0:	79fb      	ldrb	r3, [r7, #7]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d10c      	bne.n	80030f0 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 80030d6:	2035      	movs	r0, #53	; 0x35
 80030d8:	f7ff ff46 	bl	8002f68 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80030dc:	20a5      	movs	r0, #165	; 0xa5
 80030de:	f7ff ff43 	bl	8002f68 <W25qxx_Spi>
 80030e2:	4603      	mov	r3, r0
 80030e4:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 80030e6:	4a0e      	ldr	r2, [pc, #56]	; (8003120 <W25qxx_ReadStatusRegister+0x88>)
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
 80030ea:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 80030ee:	e00b      	b.n	8003108 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 80030f0:	2015      	movs	r0, #21
 80030f2:	f7ff ff39 	bl	8002f68 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80030f6:	20a5      	movs	r0, #165	; 0xa5
 80030f8:	f7ff ff36 	bl	8002f68 <W25qxx_Spi>
 80030fc:	4603      	mov	r3, r0
 80030fe:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8003100:	4a07      	ldr	r2, [pc, #28]	; (8003120 <W25qxx_ReadStatusRegister+0x88>)
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003108:	2201      	movs	r2, #1
 800310a:	2101      	movs	r1, #1
 800310c:	4803      	ldr	r0, [pc, #12]	; (800311c <W25qxx_ReadStatusRegister+0x84>)
 800310e:	f008 f91f 	bl	800b350 <HAL_GPIO_WritePin>
	return status;
 8003112:	7bfb      	ldrb	r3, [r7, #15]
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	48000400 	.word	0x48000400
 8003120:	200005e4 	.word	0x200005e4

08003124 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8003128:	2001      	movs	r0, #1
 800312a:	f007 fde3 	bl	800acf4 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800312e:	2200      	movs	r2, #0
 8003130:	2101      	movs	r1, #1
 8003132:	480f      	ldr	r0, [pc, #60]	; (8003170 <W25qxx_WaitForWriteEnd+0x4c>)
 8003134:	f008 f90c 	bl	800b350 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8003138:	2005      	movs	r0, #5
 800313a:	f7ff ff15 	bl	8002f68 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800313e:	20a5      	movs	r0, #165	; 0xa5
 8003140:	f7ff ff12 	bl	8002f68 <W25qxx_Spi>
 8003144:	4603      	mov	r3, r0
 8003146:	461a      	mov	r2, r3
 8003148:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <W25qxx_WaitForWriteEnd+0x50>)
 800314a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 800314e:	2001      	movs	r0, #1
 8003150:	f007 fdd0 	bl	800acf4 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8003154:	4b07      	ldr	r3, [pc, #28]	; (8003174 <W25qxx_WaitForWriteEnd+0x50>)
 8003156:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1ed      	bne.n	800313e <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003162:	2201      	movs	r2, #1
 8003164:	2101      	movs	r1, #1
 8003166:	4802      	ldr	r0, [pc, #8]	; (8003170 <W25qxx_WaitForWriteEnd+0x4c>)
 8003168:	f008 f8f2 	bl	800b350 <HAL_GPIO_WritePin>
}
 800316c:	bf00      	nop
 800316e:	bd80      	pop	{r7, pc}
 8003170:	48000400 	.word	0x48000400
 8003174:	200005e4 	.word	0x200005e4

08003178 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 800317e:	4b65      	ldr	r3, [pc, #404]	; (8003314 <W25qxx_Init+0x19c>)
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8003186:	e002      	b.n	800318e <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8003188:	2001      	movs	r0, #1
 800318a:	f007 fdb3 	bl	800acf4 <HAL_Delay>
	while (HAL_GetTick() < 100)
 800318e:	f007 fda5 	bl	800acdc <HAL_GetTick>
 8003192:	4603      	mov	r3, r0
 8003194:	2b63      	cmp	r3, #99	; 0x63
 8003196:	d9f7      	bls.n	8003188 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003198:	2201      	movs	r2, #1
 800319a:	2101      	movs	r1, #1
 800319c:	485e      	ldr	r0, [pc, #376]	; (8003318 <W25qxx_Init+0x1a0>)
 800319e:	f008 f8d7 	bl	800b350 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 80031a2:	2064      	movs	r0, #100	; 0x64
 80031a4:	f007 fda6 	bl	800acf4 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 80031a8:	f7ff fef4 	bl	8002f94 <W25qxx_ReadID>
 80031ac:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	3b11      	subs	r3, #17
 80031b4:	2b0f      	cmp	r3, #15
 80031b6:	d86c      	bhi.n	8003292 <W25qxx_Init+0x11a>
 80031b8:	a201      	add	r2, pc, #4	; (adr r2, 80031c0 <W25qxx_Init+0x48>)
 80031ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031be:	bf00      	nop
 80031c0:	08003285 	.word	0x08003285
 80031c4:	08003277 	.word	0x08003277
 80031c8:	08003269 	.word	0x08003269
 80031cc:	0800325b 	.word	0x0800325b
 80031d0:	0800324d 	.word	0x0800324d
 80031d4:	0800323f 	.word	0x0800323f
 80031d8:	08003231 	.word	0x08003231
 80031dc:	08003221 	.word	0x08003221
 80031e0:	08003211 	.word	0x08003211
 80031e4:	08003293 	.word	0x08003293
 80031e8:	08003293 	.word	0x08003293
 80031ec:	08003293 	.word	0x08003293
 80031f0:	08003293 	.word	0x08003293
 80031f4:	08003293 	.word	0x08003293
 80031f8:	08003293 	.word	0x08003293
 80031fc:	08003201 	.word	0x08003201
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8003200:	4b44      	ldr	r3, [pc, #272]	; (8003314 <W25qxx_Init+0x19c>)
 8003202:	220a      	movs	r2, #10
 8003204:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8003206:	4b43      	ldr	r3, [pc, #268]	; (8003314 <W25qxx_Init+0x19c>)
 8003208:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800320c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 800320e:	e046      	b.n	800329e <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8003210:	4b40      	ldr	r3, [pc, #256]	; (8003314 <W25qxx_Init+0x19c>)
 8003212:	2209      	movs	r2, #9
 8003214:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8003216:	4b3f      	ldr	r3, [pc, #252]	; (8003314 <W25qxx_Init+0x19c>)
 8003218:	f44f 7200 	mov.w	r2, #512	; 0x200
 800321c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 800321e:	e03e      	b.n	800329e <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8003220:	4b3c      	ldr	r3, [pc, #240]	; (8003314 <W25qxx_Init+0x19c>)
 8003222:	2208      	movs	r2, #8
 8003224:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8003226:	4b3b      	ldr	r3, [pc, #236]	; (8003314 <W25qxx_Init+0x19c>)
 8003228:	f44f 7280 	mov.w	r2, #256	; 0x100
 800322c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 800322e:	e036      	b.n	800329e <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8003230:	4b38      	ldr	r3, [pc, #224]	; (8003314 <W25qxx_Init+0x19c>)
 8003232:	2207      	movs	r2, #7
 8003234:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8003236:	4b37      	ldr	r3, [pc, #220]	; (8003314 <W25qxx_Init+0x19c>)
 8003238:	2280      	movs	r2, #128	; 0x80
 800323a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 800323c:	e02f      	b.n	800329e <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 800323e:	4b35      	ldr	r3, [pc, #212]	; (8003314 <W25qxx_Init+0x19c>)
 8003240:	2206      	movs	r2, #6
 8003242:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8003244:	4b33      	ldr	r3, [pc, #204]	; (8003314 <W25qxx_Init+0x19c>)
 8003246:	2240      	movs	r2, #64	; 0x40
 8003248:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 800324a:	e028      	b.n	800329e <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 800324c:	4b31      	ldr	r3, [pc, #196]	; (8003314 <W25qxx_Init+0x19c>)
 800324e:	2205      	movs	r2, #5
 8003250:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8003252:	4b30      	ldr	r3, [pc, #192]	; (8003314 <W25qxx_Init+0x19c>)
 8003254:	2220      	movs	r2, #32
 8003256:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8003258:	e021      	b.n	800329e <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 800325a:	4b2e      	ldr	r3, [pc, #184]	; (8003314 <W25qxx_Init+0x19c>)
 800325c:	2204      	movs	r2, #4
 800325e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8003260:	4b2c      	ldr	r3, [pc, #176]	; (8003314 <W25qxx_Init+0x19c>)
 8003262:	2210      	movs	r2, #16
 8003264:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8003266:	e01a      	b.n	800329e <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8003268:	4b2a      	ldr	r3, [pc, #168]	; (8003314 <W25qxx_Init+0x19c>)
 800326a:	2203      	movs	r2, #3
 800326c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 800326e:	4b29      	ldr	r3, [pc, #164]	; (8003314 <W25qxx_Init+0x19c>)
 8003270:	2208      	movs	r2, #8
 8003272:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8003274:	e013      	b.n	800329e <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8003276:	4b27      	ldr	r3, [pc, #156]	; (8003314 <W25qxx_Init+0x19c>)
 8003278:	2202      	movs	r2, #2
 800327a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 800327c:	4b25      	ldr	r3, [pc, #148]	; (8003314 <W25qxx_Init+0x19c>)
 800327e:	2204      	movs	r2, #4
 8003280:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8003282:	e00c      	b.n	800329e <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8003284:	4b23      	ldr	r3, [pc, #140]	; (8003314 <W25qxx_Init+0x19c>)
 8003286:	2201      	movs	r2, #1
 8003288:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 800328a:	4b22      	ldr	r3, [pc, #136]	; (8003314 <W25qxx_Init+0x19c>)
 800328c:	2202      	movs	r2, #2
 800328e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8003290:	e005      	b.n	800329e <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8003292:	4b20      	ldr	r3, [pc, #128]	; (8003314 <W25qxx_Init+0x19c>)
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 800329a:	2300      	movs	r3, #0
 800329c:	e036      	b.n	800330c <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 800329e:	4b1d      	ldr	r3, [pc, #116]	; (8003314 <W25qxx_Init+0x19c>)
 80032a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032a4:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 80032a6:	4b1b      	ldr	r3, [pc, #108]	; (8003314 <W25qxx_Init+0x19c>)
 80032a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032ac:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 80032ae:	4b19      	ldr	r3, [pc, #100]	; (8003314 <W25qxx_Init+0x19c>)
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	4a17      	ldr	r2, [pc, #92]	; (8003314 <W25qxx_Init+0x19c>)
 80032b6:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 80032b8:	4b16      	ldr	r3, [pc, #88]	; (8003314 <W25qxx_Init+0x19c>)
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	4a15      	ldr	r2, [pc, #84]	; (8003314 <W25qxx_Init+0x19c>)
 80032be:	6912      	ldr	r2, [r2, #16]
 80032c0:	fb02 f303 	mul.w	r3, r2, r3
 80032c4:	4a13      	ldr	r2, [pc, #76]	; (8003314 <W25qxx_Init+0x19c>)
 80032c6:	8952      	ldrh	r2, [r2, #10]
 80032c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80032cc:	4a11      	ldr	r2, [pc, #68]	; (8003314 <W25qxx_Init+0x19c>)
 80032ce:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80032d0:	4b10      	ldr	r3, [pc, #64]	; (8003314 <W25qxx_Init+0x19c>)
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	4a0f      	ldr	r2, [pc, #60]	; (8003314 <W25qxx_Init+0x19c>)
 80032d8:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80032da:	4b0e      	ldr	r3, [pc, #56]	; (8003314 <W25qxx_Init+0x19c>)
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	4a0d      	ldr	r2, [pc, #52]	; (8003314 <W25qxx_Init+0x19c>)
 80032e0:	6912      	ldr	r2, [r2, #16]
 80032e2:	fb02 f303 	mul.w	r3, r2, r3
 80032e6:	0a9b      	lsrs	r3, r3, #10
 80032e8:	4a0a      	ldr	r2, [pc, #40]	; (8003314 <W25qxx_Init+0x19c>)
 80032ea:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 80032ec:	f7ff fe88 	bl	8003000 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80032f0:	2001      	movs	r0, #1
 80032f2:	f7ff fed1 	bl	8003098 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80032f6:	2002      	movs	r0, #2
 80032f8:	f7ff fece 	bl	8003098 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80032fc:	2003      	movs	r0, #3
 80032fe:	f7ff fecb 	bl	8003098 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8003302:	4b04      	ldr	r3, [pc, #16]	; (8003314 <W25qxx_Init+0x19c>)
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 800330a:	2301      	movs	r3, #1
}
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	200005e4 	.word	0x200005e4
 8003318:	48000400 	.word	0x48000400

0800331c <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8003324:	e002      	b.n	800332c <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8003326:	2001      	movs	r0, #1
 8003328:	f007 fce4 	bl	800acf4 <HAL_Delay>
	while (w25qxx.Lock == 1)
 800332c:	4b25      	ldr	r3, [pc, #148]	; (80033c4 <W25qxx_EraseSector+0xa8>)
 800332e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003332:	2b01      	cmp	r3, #1
 8003334:	d0f7      	beq.n	8003326 <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8003336:	4b23      	ldr	r3, [pc, #140]	; (80033c4 <W25qxx_EraseSector+0xa8>)
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 800333e:	f7ff fef1 	bl	8003124 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8003342:	4b20      	ldr	r3, [pc, #128]	; (80033c4 <W25qxx_EraseSector+0xa8>)
 8003344:	691a      	ldr	r2, [r3, #16]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	fb02 f303 	mul.w	r3, r2, r3
 800334c:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 800334e:	f7ff fe8d 	bl	800306c <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003352:	2200      	movs	r2, #0
 8003354:	2101      	movs	r1, #1
 8003356:	481c      	ldr	r0, [pc, #112]	; (80033c8 <W25qxx_EraseSector+0xac>)
 8003358:	f007 fffa 	bl	800b350 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800335c:	4b19      	ldr	r3, [pc, #100]	; (80033c4 <W25qxx_EraseSector+0xa8>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2b08      	cmp	r3, #8
 8003362:	d909      	bls.n	8003378 <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 8003364:	2021      	movs	r0, #33	; 0x21
 8003366:	f7ff fdff 	bl	8002f68 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	0e1b      	lsrs	r3, r3, #24
 800336e:	b2db      	uxtb	r3, r3
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff fdf9 	bl	8002f68 <W25qxx_Spi>
 8003376:	e002      	b.n	800337e <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 8003378:	2020      	movs	r0, #32
 800337a:	f7ff fdf5 	bl	8002f68 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	0c1b      	lsrs	r3, r3, #16
 8003382:	b2db      	uxtb	r3, r3
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff fdef 	bl	8002f68 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	0a1b      	lsrs	r3, r3, #8
 800338e:	b2db      	uxtb	r3, r3
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff fde9 	bl	8002f68 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	b2db      	uxtb	r3, r3
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff fde4 	bl	8002f68 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80033a0:	2201      	movs	r2, #1
 80033a2:	2101      	movs	r1, #1
 80033a4:	4808      	ldr	r0, [pc, #32]	; (80033c8 <W25qxx_EraseSector+0xac>)
 80033a6:	f007 ffd3 	bl	800b350 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80033aa:	f7ff febb 	bl	8003124 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 80033ae:	2001      	movs	r0, #1
 80033b0:	f007 fca0 	bl	800acf4 <HAL_Delay>
	w25qxx.Lock = 0;
 80033b4:	4b03      	ldr	r3, [pc, #12]	; (80033c4 <W25qxx_EraseSector+0xa8>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80033bc:	bf00      	nop
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	200005e4 	.word	0x200005e4
 80033c8:	48000400 	.word	0x48000400

080033cc <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 80033d4:	4b07      	ldr	r3, [pc, #28]	; (80033f4 <W25qxx_SectorToPage+0x28>)
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	fb02 f303 	mul.w	r3, r2, r3
 80033de:	4a05      	ldr	r2, [pc, #20]	; (80033f4 <W25qxx_SectorToPage+0x28>)
 80033e0:	8952      	ldrh	r2, [r2, #10]
 80033e2:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	200005e4 	.word	0x200005e4

080033f8 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
 8003404:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8003406:	e002      	b.n	800340e <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8003408:	2001      	movs	r0, #1
 800340a:	f007 fc73 	bl	800acf4 <HAL_Delay>
	while (w25qxx.Lock == 1)
 800340e:	4b39      	ldr	r3, [pc, #228]	; (80034f4 <W25qxx_WritePage+0xfc>)
 8003410:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003414:	2b01      	cmp	r3, #1
 8003416:	d0f7      	beq.n	8003408 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8003418:	4b36      	ldr	r3, [pc, #216]	; (80034f4 <W25qxx_WritePage+0xfc>)
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4413      	add	r3, r2
 8003426:	4a33      	ldr	r2, [pc, #204]	; (80034f4 <W25qxx_WritePage+0xfc>)
 8003428:	8952      	ldrh	r2, [r2, #10]
 800342a:	4293      	cmp	r3, r2
 800342c:	d802      	bhi.n	8003434 <W25qxx_WritePage+0x3c>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d105      	bne.n	8003440 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003434:	4b2f      	ldr	r3, [pc, #188]	; (80034f4 <W25qxx_WritePage+0xfc>)
 8003436:	895b      	ldrh	r3, [r3, #10]
 8003438:	461a      	mov	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	4413      	add	r3, r2
 8003446:	4a2b      	ldr	r2, [pc, #172]	; (80034f4 <W25qxx_WritePage+0xfc>)
 8003448:	8952      	ldrh	r2, [r2, #10]
 800344a:	4293      	cmp	r3, r2
 800344c:	d905      	bls.n	800345a <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800344e:	4b29      	ldr	r3, [pc, #164]	; (80034f4 <W25qxx_WritePage+0xfc>)
 8003450:	895b      	ldrh	r3, [r3, #10]
 8003452:	461a      	mov	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 800345a:	f7ff fe63 	bl	8003124 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 800345e:	f7ff fe05 	bl	800306c <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003462:	2200      	movs	r2, #0
 8003464:	2101      	movs	r1, #1
 8003466:	4824      	ldr	r0, [pc, #144]	; (80034f8 <W25qxx_WritePage+0x100>)
 8003468:	f007 ff72 	bl	800b350 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 800346c:	4b21      	ldr	r3, [pc, #132]	; (80034f4 <W25qxx_WritePage+0xfc>)
 800346e:	895b      	ldrh	r3, [r3, #10]
 8003470:	461a      	mov	r2, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	fb02 f303 	mul.w	r3, r2, r3
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	4413      	add	r3, r2
 800347c:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 800347e:	4b1d      	ldr	r3, [pc, #116]	; (80034f4 <W25qxx_WritePage+0xfc>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b08      	cmp	r3, #8
 8003484:	d909      	bls.n	800349a <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 8003486:	2012      	movs	r0, #18
 8003488:	f7ff fd6e 	bl	8002f68 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	0e1b      	lsrs	r3, r3, #24
 8003490:	b2db      	uxtb	r3, r3
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff fd68 	bl	8002f68 <W25qxx_Spi>
 8003498:	e002      	b.n	80034a0 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 800349a:	2002      	movs	r0, #2
 800349c:	f7ff fd64 	bl	8002f68 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	0c1b      	lsrs	r3, r3, #16
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff fd5e 	bl	8002f68 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	0a1b      	lsrs	r3, r3, #8
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff fd58 	bl	8002f68 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff fd53 	bl	8002f68 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	2364      	movs	r3, #100	; 0x64
 80034c8:	68f9      	ldr	r1, [r7, #12]
 80034ca:	480c      	ldr	r0, [pc, #48]	; (80034fc <W25qxx_WritePage+0x104>)
 80034cc:	f009 fb13 	bl	800caf6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80034d0:	2201      	movs	r2, #1
 80034d2:	2101      	movs	r1, #1
 80034d4:	4808      	ldr	r0, [pc, #32]	; (80034f8 <W25qxx_WritePage+0x100>)
 80034d6:	f007 ff3b 	bl	800b350 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80034da:	f7ff fe23 	bl	8003124 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 80034de:	2001      	movs	r0, #1
 80034e0:	f007 fc08 	bl	800acf4 <HAL_Delay>
	w25qxx.Lock = 0;
 80034e4:	4b03      	ldr	r3, [pc, #12]	; (80034f4 <W25qxx_WritePage+0xfc>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80034ec:	bf00      	nop
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	200005e4 	.word	0x200005e4
 80034f8:	48000400 	.word	0x48000400
 80034fc:	2000042c 	.word	0x2000042c

08003500 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
 800350c:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 800350e:	4b2c      	ldr	r3, [pc, #176]	; (80035c0 <W25qxx_WriteSector+0xc0>)
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	429a      	cmp	r2, r3
 8003516:	d802      	bhi.n	800351e <W25qxx_WriteSector+0x1e>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d102      	bne.n	8003524 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 800351e:	4b28      	ldr	r3, [pc, #160]	; (80035c0 <W25qxx_WriteSector+0xc0>)
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8003524:	4b26      	ldr	r3, [pc, #152]	; (80035c0 <W25qxx_WriteSector+0xc0>)
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	429a      	cmp	r2, r3
 800352c:	d243      	bcs.n	80035b6 <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	441a      	add	r2, r3
 8003534:	4b22      	ldr	r3, [pc, #136]	; (80035c0 <W25qxx_WriteSector+0xc0>)
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	429a      	cmp	r2, r3
 800353a:	d905      	bls.n	8003548 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 800353c:	4b20      	ldr	r3, [pc, #128]	; (80035c0 <W25qxx_WriteSector+0xc0>)
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	61bb      	str	r3, [r7, #24]
 8003546:	e001      	b.n	800354c <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 800354c:	68b8      	ldr	r0, [r7, #8]
 800354e:	f7ff ff3d 	bl	80033cc <W25qxx_SectorToPage>
 8003552:	4602      	mov	r2, r0
 8003554:	4b1a      	ldr	r3, [pc, #104]	; (80035c0 <W25qxx_WriteSector+0xc0>)
 8003556:	895b      	ldrh	r3, [r3, #10]
 8003558:	4619      	mov	r1, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003560:	4413      	add	r3, r2
 8003562:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8003564:	4b16      	ldr	r3, [pc, #88]	; (80035c0 <W25qxx_WriteSector+0xc0>)
 8003566:	895b      	ldrh	r3, [r3, #10]
 8003568:	461a      	mov	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003570:	fb01 f202 	mul.w	r2, r1, r2
 8003574:	1a9b      	subs	r3, r3, r2
 8003576:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	69f9      	ldr	r1, [r7, #28]
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f7ff ff3a 	bl	80033f8 <W25qxx_WritePage>
		StartPage++;
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	3301      	adds	r3, #1
 8003588:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 800358a:	4b0d      	ldr	r3, [pc, #52]	; (80035c0 <W25qxx_WriteSector+0xc0>)
 800358c:	895b      	ldrh	r3, [r3, #10]
 800358e:	461a      	mov	r2, r3
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	1a9a      	subs	r2, r3, r2
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	4413      	add	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800359a:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <W25qxx_WriteSector+0xc0>)
 800359c:	895b      	ldrh	r3, [r3, #10]
 800359e:	461a      	mov	r2, r3
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	4413      	add	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	dce1      	bgt.n	8003578 <W25qxx_WriteSector+0x78>
 80035b4:	e000      	b.n	80035b8 <W25qxx_WriteSector+0xb8>
		return;
 80035b6:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 80035b8:	3720      	adds	r7, #32
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	200005e4 	.word	0x200005e4

080035c4 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
 80035d0:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80035d2:	e002      	b.n	80035da <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 80035d4:	2001      	movs	r0, #1
 80035d6:	f007 fb8d 	bl	800acf4 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80035da:	4b36      	ldr	r3, [pc, #216]	; (80036b4 <W25qxx_ReadPage+0xf0>)
 80035dc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d0f7      	beq.n	80035d4 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 80035e4:	4b33      	ldr	r3, [pc, #204]	; (80036b4 <W25qxx_ReadPage+0xf0>)
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 80035ec:	4b31      	ldr	r3, [pc, #196]	; (80036b4 <W25qxx_ReadPage+0xf0>)
 80035ee:	895b      	ldrh	r3, [r3, #10]
 80035f0:	461a      	mov	r2, r3
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d802      	bhi.n	80035fe <W25qxx_ReadPage+0x3a>
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d102      	bne.n	8003604 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 80035fe:	4b2d      	ldr	r3, [pc, #180]	; (80036b4 <W25qxx_ReadPage+0xf0>)
 8003600:	895b      	ldrh	r3, [r3, #10]
 8003602:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	4413      	add	r3, r2
 800360a:	4a2a      	ldr	r2, [pc, #168]	; (80036b4 <W25qxx_ReadPage+0xf0>)
 800360c:	8952      	ldrh	r2, [r2, #10]
 800360e:	4293      	cmp	r3, r2
 8003610:	d905      	bls.n	800361e <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003612:	4b28      	ldr	r3, [pc, #160]	; (80036b4 <W25qxx_ReadPage+0xf0>)
 8003614:	895b      	ldrh	r3, [r3, #10]
 8003616:	461a      	mov	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 800361e:	4b25      	ldr	r3, [pc, #148]	; (80036b4 <W25qxx_ReadPage+0xf0>)
 8003620:	895b      	ldrh	r3, [r3, #10]
 8003622:	461a      	mov	r2, r3
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	fb02 f303 	mul.w	r3, r2, r3
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	4413      	add	r3, r2
 800362e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003630:	2200      	movs	r2, #0
 8003632:	2101      	movs	r1, #1
 8003634:	4820      	ldr	r0, [pc, #128]	; (80036b8 <W25qxx_ReadPage+0xf4>)
 8003636:	f007 fe8b 	bl	800b350 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800363a:	4b1e      	ldr	r3, [pc, #120]	; (80036b4 <W25qxx_ReadPage+0xf0>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b08      	cmp	r3, #8
 8003640:	d909      	bls.n	8003656 <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 8003642:	200c      	movs	r0, #12
 8003644:	f7ff fc90 	bl	8002f68 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	0e1b      	lsrs	r3, r3, #24
 800364c:	b2db      	uxtb	r3, r3
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff fc8a 	bl	8002f68 <W25qxx_Spi>
 8003654:	e002      	b.n	800365c <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8003656:	200b      	movs	r0, #11
 8003658:	f7ff fc86 	bl	8002f68 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	0c1b      	lsrs	r3, r3, #16
 8003660:	b2db      	uxtb	r3, r3
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff fc80 	bl	8002f68 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	0a1b      	lsrs	r3, r3, #8
 800366c:	b2db      	uxtb	r3, r3
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff fc7a 	bl	8002f68 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	b2db      	uxtb	r3, r3
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff fc75 	bl	8002f68 <W25qxx_Spi>
	W25qxx_Spi(0);
 800367e:	2000      	movs	r0, #0
 8003680:	f7ff fc72 	bl	8002f68 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	b29a      	uxth	r2, r3
 8003688:	2364      	movs	r3, #100	; 0x64
 800368a:	68f9      	ldr	r1, [r7, #12]
 800368c:	480b      	ldr	r0, [pc, #44]	; (80036bc <W25qxx_ReadPage+0xf8>)
 800368e:	f009 fba0 	bl	800cdd2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003692:	2201      	movs	r2, #1
 8003694:	2101      	movs	r1, #1
 8003696:	4808      	ldr	r0, [pc, #32]	; (80036b8 <W25qxx_ReadPage+0xf4>)
 8003698:	f007 fe5a 	bl	800b350 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 800369c:	2001      	movs	r0, #1
 800369e:	f007 fb29 	bl	800acf4 <HAL_Delay>
	w25qxx.Lock = 0;
 80036a2:	4b04      	ldr	r3, [pc, #16]	; (80036b4 <W25qxx_ReadPage+0xf0>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80036aa:	bf00      	nop
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	200005e4 	.word	0x200005e4
 80036b8:	48000400 	.word	0x48000400
 80036bc:	2000042c 	.word	0x2000042c

080036c0 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b088      	sub	sp, #32
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
 80036cc:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 80036ce:	4b2c      	ldr	r3, [pc, #176]	; (8003780 <W25qxx_ReadSector+0xc0>)
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d802      	bhi.n	80036de <W25qxx_ReadSector+0x1e>
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d102      	bne.n	80036e4 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 80036de:	4b28      	ldr	r3, [pc, #160]	; (8003780 <W25qxx_ReadSector+0xc0>)
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80036e4:	4b26      	ldr	r3, [pc, #152]	; (8003780 <W25qxx_ReadSector+0xc0>)
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d243      	bcs.n	8003776 <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	441a      	add	r2, r3
 80036f4:	4b22      	ldr	r3, [pc, #136]	; (8003780 <W25qxx_ReadSector+0xc0>)
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d905      	bls.n	8003708 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 80036fc:	4b20      	ldr	r3, [pc, #128]	; (8003780 <W25qxx_ReadSector+0xc0>)
 80036fe:	691a      	ldr	r2, [r3, #16]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	61bb      	str	r3, [r7, #24]
 8003706:	e001      	b.n	800370c <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 800370c:	68b8      	ldr	r0, [r7, #8]
 800370e:	f7ff fe5d 	bl	80033cc <W25qxx_SectorToPage>
 8003712:	4602      	mov	r2, r0
 8003714:	4b1a      	ldr	r3, [pc, #104]	; (8003780 <W25qxx_ReadSector+0xc0>)
 8003716:	895b      	ldrh	r3, [r3, #10]
 8003718:	4619      	mov	r1, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003720:	4413      	add	r3, r2
 8003722:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8003724:	4b16      	ldr	r3, [pc, #88]	; (8003780 <W25qxx_ReadSector+0xc0>)
 8003726:	895b      	ldrh	r3, [r3, #10]
 8003728:	461a      	mov	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003730:	fb01 f202 	mul.w	r2, r1, r2
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	69f9      	ldr	r1, [r7, #28]
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f7ff ff40 	bl	80035c4 <W25qxx_ReadPage>
		StartPage++;
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	3301      	adds	r3, #1
 8003748:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 800374a:	4b0d      	ldr	r3, [pc, #52]	; (8003780 <W25qxx_ReadSector+0xc0>)
 800374c:	895b      	ldrh	r3, [r3, #10]
 800374e:	461a      	mov	r2, r3
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	1a9a      	subs	r2, r3, r2
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	4413      	add	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800375a:	4b09      	ldr	r3, [pc, #36]	; (8003780 <W25qxx_ReadSector+0xc0>)
 800375c:	895b      	ldrh	r3, [r3, #10]
 800375e:	461a      	mov	r2, r3
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	4413      	add	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800376a:	2300      	movs	r3, #0
 800376c:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	2b00      	cmp	r3, #0
 8003772:	dce1      	bgt.n	8003738 <W25qxx_ReadSector+0x78>
 8003774:	e000      	b.n	8003778 <W25qxx_ReadSector+0xb8>
		return;
 8003776:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8003778:	3720      	adds	r7, #32
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	200005e4 	.word	0x200005e4

08003784 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003784:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003788:	f7ff fbdc 	bl	8002f44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800378c:	480c      	ldr	r0, [pc, #48]	; (80037c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800378e:	490d      	ldr	r1, [pc, #52]	; (80037c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003790:	4a0d      	ldr	r2, [pc, #52]	; (80037c8 <LoopForever+0xe>)
  movs r3, #0
 8003792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003794:	e002      	b.n	800379c <LoopCopyDataInit>

08003796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800379a:	3304      	adds	r3, #4

0800379c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800379c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800379e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037a0:	d3f9      	bcc.n	8003796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037a2:	4a0a      	ldr	r2, [pc, #40]	; (80037cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80037a4:	4c0a      	ldr	r4, [pc, #40]	; (80037d0 <LoopForever+0x16>)
  movs r3, #0
 80037a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037a8:	e001      	b.n	80037ae <LoopFillZerobss>

080037aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037ac:	3204      	adds	r2, #4

080037ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037b0:	d3fb      	bcc.n	80037aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80037b2:	f00c f849 	bl	800f848 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80037b6:	f7fe fd2f 	bl	8002218 <main>

080037ba <LoopForever>:

LoopForever:
    b LoopForever
 80037ba:	e7fe      	b.n	80037ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80037bc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80037c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037c4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80037c8:	08010710 	.word	0x08010710
  ldr r2, =_sbss
 80037cc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80037d0:	200007c4 	.word	0x200007c4

080037d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80037d4:	e7fe      	b.n	80037d4 <ADC1_IRQHandler>
	...

080037d8 <_ZN6commonC1Ev>:
 *      Author: MKS
 */

#include "common.h"

common::common() {
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	4a04      	ldr	r2, [pc, #16]	; (80037f4 <_ZN6commonC1Ev+0x1c>)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4618      	mov	r0, r3
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	080105ec 	.word	0x080105ec

080037f8 <_ZN6commonD1Ev>:

common::~common() {
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	4a04      	ldr	r2, [pc, #16]	; (8003814 <_ZN6commonD1Ev+0x1c>)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4618      	mov	r0, r3
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	080105ec 	.word	0x080105ec

08003818 <_ZN6commonD0Ev>:
common::~common() {
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
}
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7ff ffe9 	bl	80037f8 <_ZN6commonD1Ev>
 8003826:	2104      	movs	r1, #4
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f00c f802 	bl	800f832 <_ZdlPvj>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4618      	mov	r0, r3
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <_ZN14DisplayRoutineC1Ev>:
extern uint16_t MAC_Gen_Prod_Input1_Production,Production_Zeit;
extern uint16_t MAC_Gen_Rej_Input_Production,Rejection_Zeit;
extern uint16_t Manual_RejectionCount;
extern uint16_t SectorPos;

DisplayRoutine::DisplayRoutine() {
 8003838:	b5b0      	push	{r4, r5, r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	4a39      	ldr	r2, [pc, #228]	; (8003928 <_ZN14DisplayRoutineC1Ev+0xf0>)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3304      	adds	r3, #4
 800384a:	4618      	mov	r0, r3
 800384c:	f000 f8dc 	bl	8003a08 <_ZN4GLCDC1Ev>
 8003850:	687d      	ldr	r5, [r7, #4]
 8003852:	4b36      	ldr	r3, [pc, #216]	; (800392c <_ZN14DisplayRoutineC1Ev+0xf4>)
 8003854:	f605 2408 	addw	r4, r5, #2568	; 0xa08
 8003858:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800385a:	c407      	stmia	r4!, {r0, r1, r2}
 800385c:	7023      	strb	r3, [r4, #0]
 800385e:	f605 2315 	addw	r3, r5, #2581	; 0xa15
 8003862:	2200      	movs	r2, #0
 8003864:	801a      	strh	r2, [r3, #0]
 8003866:	687c      	ldr	r4, [r7, #4]
 8003868:	4b31      	ldr	r3, [pc, #196]	; (8003930 <_ZN14DisplayRoutineC1Ev+0xf8>)
 800386a:	f604 2217 	addw	r2, r4, #2583	; 0xa17
 800386e:	cb03      	ldmia	r3!, {r0, r1}
 8003870:	6010      	str	r0, [r2, #0]
 8003872:	6051      	str	r1, [r2, #4]
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	7213      	strb	r3, [r2, #8]
 8003878:	f504 6322 	add.w	r3, r4, #2592	; 0xa20
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	711a      	strb	r2, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a2b      	ldr	r2, [pc, #172]	; (8003934 <_ZN14DisplayRoutineC1Ev+0xfc>)
 8003886:	f603 2325 	addw	r3, r3, #2597	; 0xa25
 800388a:	8812      	ldrh	r2, [r2, #0]
 800388c:	801a      	strh	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a29      	ldr	r2, [pc, #164]	; (8003938 <_ZN14DisplayRoutineC1Ev+0x100>)
 8003892:	f603 2327 	addw	r3, r3, #2599	; 0xa27
 8003896:	6810      	ldr	r0, [r2, #0]
 8003898:	6018      	str	r0, [r3, #0]
 800389a:	8891      	ldrh	r1, [r2, #4]
 800389c:	7992      	ldrb	r2, [r2, #6]
 800389e:	8099      	strh	r1, [r3, #4]
 80038a0:	719a      	strb	r2, [r3, #6]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	222f      	movs	r2, #47	; 0x2f
 80038a6:	f8a3 2a2e 	strh.w	r2, [r3, #2606]	; 0xa2e
 80038aa:	687c      	ldr	r4, [r7, #4]
 80038ac:	4a23      	ldr	r2, [pc, #140]	; (800393c <_ZN14DisplayRoutineC1Ev+0x104>)
 80038ae:	f504 6323 	add.w	r3, r4, #2608	; 0xa30
 80038b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80038b4:	c303      	stmia	r3!, {r0, r1}
 80038b6:	701a      	strb	r2, [r3, #0]
 80038b8:	2300      	movs	r3, #0
 80038ba:	f884 3a39 	strb.w	r3, [r4, #2617]	; 0xa39
 80038be:	687c      	ldr	r4, [r7, #4]
 80038c0:	4b1f      	ldr	r3, [pc, #124]	; (8003940 <_ZN14DisplayRoutineC1Ev+0x108>)
 80038c2:	f604 223a 	addw	r2, r4, #2618	; 0xa3a
 80038c6:	cb03      	ldmia	r3!, {r0, r1}
 80038c8:	6010      	str	r0, [r2, #0]
 80038ca:	6051      	str	r1, [r2, #4]
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	7213      	strb	r3, [r2, #8]
 80038d0:	2300      	movs	r3, #0
 80038d2:	f884 3a43 	strb.w	r3, [r4, #2627]	; 0xa43
 80038d6:	687c      	ldr	r4, [r7, #4]
 80038d8:	4a1a      	ldr	r2, [pc, #104]	; (8003944 <_ZN14DisplayRoutineC1Ev+0x10c>)
 80038da:	f604 2344 	addw	r3, r4, #2628	; 0xa44
 80038de:	ca07      	ldmia	r2, {r0, r1, r2}
 80038e0:	c303      	stmia	r3!, {r0, r1}
 80038e2:	701a      	strb	r2, [r3, #0]
 80038e4:	f604 234d 	addw	r3, r4, #2637	; 0xa4d
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	687c      	ldr	r4, [r7, #4]
 80038ee:	4b16      	ldr	r3, [pc, #88]	; (8003948 <_ZN14DisplayRoutineC1Ev+0x110>)
 80038f0:	f604 2251 	addw	r2, r4, #2641	; 0xa51
 80038f4:	cb03      	ldmia	r3!, {r0, r1}
 80038f6:	6010      	str	r0, [r2, #0]
 80038f8:	6051      	str	r1, [r2, #4]
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	7213      	strb	r3, [r2, #8]
 80038fe:	f604 235a 	addw	r3, r4, #2650	; 0xa5a
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]
 8003906:	687c      	ldr	r4, [r7, #4]
 8003908:	4b10      	ldr	r3, [pc, #64]	; (800394c <_ZN14DisplayRoutineC1Ev+0x114>)
 800390a:	f604 225e 	addw	r2, r4, #2654	; 0xa5e
 800390e:	cb03      	ldmia	r3!, {r0, r1}
 8003910:	6010      	str	r0, [r2, #0]
 8003912:	6051      	str	r1, [r2, #4]
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	8113      	strh	r3, [r2, #8]
 8003918:	2300      	movs	r3, #0
 800391a:	f8a4 3a68 	strh.w	r3, [r4, #2664]	; 0xa68
	// TODO Auto-generated constructor stub

}
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4618      	mov	r0, r3
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bdb0      	pop	{r4, r5, r7, pc}
 8003928:	080105fc 	.word	0x080105fc
 800392c:	080101a4 	.word	0x080101a4
 8003930:	080101b4 	.word	0x080101b4
 8003934:	080101c4 	.word	0x080101c4
 8003938:	080101c8 	.word	0x080101c8
 800393c:	080101d0 	.word	0x080101d0
 8003940:	080101dc 	.word	0x080101dc
 8003944:	080101e8 	.word	0x080101e8
 8003948:	080101f8 	.word	0x080101f8
 800394c:	08010208 	.word	0x08010208

08003950 <_ZN14DisplayRoutineD1Ev>:

DisplayRoutine::~DisplayRoutine() {
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	4a06      	ldr	r2, [pc, #24]	; (8003974 <_ZN14DisplayRoutineD1Ev+0x24>)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	3304      	adds	r3, #4
 8003962:	4618      	mov	r0, r3
 8003964:	f003 ffcc 	bl	8007900 <_ZN4GLCDD1Ev>
	// TODO Auto-generated destructor stub
}
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4618      	mov	r0, r3
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	080105fc 	.word	0x080105fc

08003978 <_ZN14DisplayRoutineD0Ev>:
DisplayRoutine::~DisplayRoutine() {
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
}
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7ff ffe5 	bl	8003950 <_ZN14DisplayRoutineD1Ev>
 8003986:	f44f 6127 	mov.w	r1, #2672	; 0xa70
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f00b ff51 	bl	800f832 <_ZdlPvj>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4618      	mov	r0, r3
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <_ZN14DisplayRoutine4InitEv>:
	gLCDNumericArraySize_4[3] =(unsigned char)((value4dig%10)+0x30);
	m_gLCDDrive.m_lcdputs1(posCol,posLine,gLCDNumericArraySize_4);
}

void DisplayRoutine::Init()
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b082      	sub	sp, #8
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
	m_gLCDDrive.m_displayon();
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3304      	adds	r3, #4
 80039a6:	4618      	mov	r0, r3
 80039a8:	f004 f88c 	bl	8007ac4 <_ZN4GLCD11m_displayonEv>
	m_gLCDDrive.m_setstartline(0);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3304      	adds	r3, #4
 80039b0:	2100      	movs	r1, #0
 80039b2:	4618      	mov	r0, r3
 80039b4:	f004 f988 	bl	8007cc8 <_ZN4GLCD14m_setstartlineEh>
	m_gLCDDrive.m_clrlcd();
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3304      	adds	r3, #4
 80039bc:	4618      	mov	r0, r3
 80039be:	f004 fa5f 	bl	8007e80 <_ZN4GLCD8m_clrlcdEv>


}
 80039c2:	bf00      	nop
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <_ZN6common26ReadtheValueAssignPinstateEhh>:

class common {
public:
	common();
	virtual ~common();
	GPIO_PinState ReadtheValueAssignPinstate(uint8_t position, uint8_t value)
 80039ca:	b480      	push	{r7}
 80039cc:	b085      	sub	sp, #20
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	460b      	mov	r3, r1
 80039d4:	70fb      	strb	r3, [r7, #3]
 80039d6:	4613      	mov	r3, r2
 80039d8:	70bb      	strb	r3, [r7, #2]
	{
		GPIO_PinState pinstate;
		position = 1 << position;
 80039da:	78fb      	ldrb	r3, [r7, #3]
 80039dc:	2201      	movs	r2, #1
 80039de:	fa02 f303 	lsl.w	r3, r2, r3
 80039e2:	70fb      	strb	r3, [r7, #3]
		if(position & value){
 80039e4:	78fa      	ldrb	r2, [r7, #3]
 80039e6:	78bb      	ldrb	r3, [r7, #2]
 80039e8:	4013      	ands	r3, r2
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d002      	beq.n	80039f6 <_ZN6common26ReadtheValueAssignPinstateEhh+0x2c>
			pinstate = GPIO_PIN_SET;
 80039f0:	2301      	movs	r3, #1
 80039f2:	73fb      	strb	r3, [r7, #15]
 80039f4:	e001      	b.n	80039fa <_ZN6common26ReadtheValueAssignPinstateEhh+0x30>
		}
		else
		{
			pinstate = GPIO_PIN_RESET;
 80039f6:	2300      	movs	r3, #0
 80039f8:	73fb      	strb	r3, [r7, #15]
		}
		return(pinstate);
 80039fa:	7bfb      	ldrb	r3, [r7, #15]
	}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3714      	adds	r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <_ZN4GLCDC1Ev>:

#include "GLCD.h"
#include "main.h"
#define GLCDDELAY 10
extern TIM_HandleTypeDef htim1;
GLCD::GLCD() {
 8003a08:	b5b0      	push	{r4, r5, r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7ff fee0 	bl	80037d8 <_ZN6commonC1Ev>
 8003a18:	4ac8      	ldr	r2, [pc, #800]	; (8003d3c <_ZN4GLCDC1Ev+0x334>)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	687d      	ldr	r5, [r7, #4]
 8003a20:	4bc7      	ldr	r3, [pc, #796]	; (8003d40 <_ZN4GLCDC1Ev+0x338>)
 8003a22:	1d2c      	adds	r4, r5, #4
 8003a24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a26:	c407      	stmia	r4!, {r0, r1, r2}
 8003a28:	8023      	strh	r3, [r4, #0]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	74ab      	strb	r3, [r5, #18]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	615a      	str	r2, [r3, #20]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	619a      	str	r2, [r3, #24]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	775a      	strb	r2, [r3, #29]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	331e      	adds	r3, #30
 8003a44:	f640 0208 	movw	r2, #2056	; 0x808
 8003a48:	2100      	movs	r1, #0
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f00b ff36 	bl	800f8bc <memset>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	227e      	movs	r2, #126	; 0x7e
 8003a54:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2281      	movs	r2, #129	; 0x81
 8003a5c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2295      	movs	r2, #149	; 0x95
 8003a64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	22b1      	movs	r2, #177	; 0xb1
 8003a6c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	22b1      	movs	r2, #177	; 0xb1
 8003a74:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2295      	movs	r2, #149	; 0x95
 8003a7c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2281      	movs	r2, #129	; 0x81
 8003a84:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	227e      	movs	r2, #126	; 0x7e
 8003a8c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	227e      	movs	r2, #126	; 0x7e
 8003a94:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	22ff      	movs	r2, #255	; 0xff
 8003a9c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	22eb      	movs	r2, #235	; 0xeb
 8003aa4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	22cf      	movs	r2, #207	; 0xcf
 8003aac:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	22cf      	movs	r2, #207	; 0xcf
 8003ab4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	22eb      	movs	r2, #235	; 0xeb
 8003abc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	22ff      	movs	r2, #255	; 0xff
 8003ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	227e      	movs	r2, #126	; 0x7e
 8003acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	220e      	movs	r2, #14
 8003ad4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	221f      	movs	r2, #31
 8003adc:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	223f      	movs	r2, #63	; 0x3f
 8003ae4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	227e      	movs	r2, #126	; 0x7e
 8003aec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	223f      	movs	r2, #63	; 0x3f
 8003af4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	221f      	movs	r2, #31
 8003afc:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	220e      	movs	r2, #14
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2208      	movs	r2, #8
 8003b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	221c      	movs	r2, #28
 8003b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	223e      	movs	r2, #62	; 0x3e
 8003b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	227f      	movs	r2, #127	; 0x7f
 8003b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	223e      	movs	r2, #62	; 0x3e
 8003b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	221c      	movs	r2, #28
 8003b34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2208      	movs	r2, #8
 8003b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2218      	movs	r2, #24
 8003b44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	22ba      	movs	r2, #186	; 0xba
 8003b4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	22ff      	movs	r2, #255	; 0xff
 8003b54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	22ff      	movs	r2, #255	; 0xff
 8003b5c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	22ff      	movs	r2, #255	; 0xff
 8003b64:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	22ba      	movs	r2, #186	; 0xba
 8003b6c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2218      	movs	r2, #24
 8003b74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2210      	movs	r2, #16
 8003b7c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	22b8      	movs	r2, #184	; 0xb8
 8003b84:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	22fc      	movs	r2, #252	; 0xfc
 8003b8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	22ff      	movs	r2, #255	; 0xff
 8003b94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	22fc      	movs	r2, #252	; 0xfc
 8003b9c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	22b8      	movs	r2, #184	; 0xb8
 8003ba4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2210      	movs	r2, #16
 8003bac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2218      	movs	r2, #24
 8003bb4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	223c      	movs	r2, #60	; 0x3c
 8003bbc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	223c      	movs	r2, #60	; 0x3c
 8003bc4:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2218      	movs	r2, #24
 8003bcc:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	22ff      	movs	r2, #255	; 0xff
 8003bd4:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	22ff      	movs	r2, #255	; 0xff
 8003bdc:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	22e7      	movs	r2, #231	; 0xe7
 8003be4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	22c3      	movs	r2, #195	; 0xc3
 8003bec:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	22c3      	movs	r2, #195	; 0xc3
 8003bf4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	22e7      	movs	r2, #231	; 0xe7
 8003bfc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	22ff      	movs	r2, #255	; 0xff
 8003c04:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	22ff      	movs	r2, #255	; 0xff
 8003c0c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	223c      	movs	r2, #60	; 0x3c
 8003c14:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2266      	movs	r2, #102	; 0x66
 8003c1c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2242      	movs	r2, #66	; 0x42
 8003c24:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2242      	movs	r2, #66	; 0x42
 8003c2c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2266      	movs	r2, #102	; 0x66
 8003c34:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	223c      	movs	r2, #60	; 0x3c
 8003c3c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	22ff      	movs	r2, #255	; 0xff
 8003c44:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	22c3      	movs	r2, #195	; 0xc3
 8003c4c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2299      	movs	r2, #153	; 0x99
 8003c54:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	22bd      	movs	r2, #189	; 0xbd
 8003c5c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	22bd      	movs	r2, #189	; 0xbd
 8003c64:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2299      	movs	r2, #153	; 0x99
 8003c6c:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	22c3      	movs	r2, #195	; 0xc3
 8003c74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	22ff      	movs	r2, #255	; 0xff
 8003c7c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2270      	movs	r2, #112	; 0x70
 8003c84:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	22f8      	movs	r2, #248	; 0xf8
 8003c8c:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2288      	movs	r2, #136	; 0x88
 8003c94:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2288      	movs	r2, #136	; 0x88
 8003c9c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	22fd      	movs	r2, #253	; 0xfd
 8003ca4:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	227f      	movs	r2, #127	; 0x7f
 8003cac:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2207      	movs	r2, #7
 8003cb4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	220f      	movs	r2, #15
 8003cbc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	224e      	movs	r2, #78	; 0x4e
 8003cc4:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	225f      	movs	r2, #95	; 0x5f
 8003ccc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	22f1      	movs	r2, #241	; 0xf1
 8003cd4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	22f1      	movs	r2, #241	; 0xf1
 8003cdc:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	225f      	movs	r2, #95	; 0x5f
 8003ce4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	224e      	movs	r2, #78	; 0x4e
 8003cec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	22c0      	movs	r2, #192	; 0xc0
 8003cf4:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	22e0      	movs	r2, #224	; 0xe0
 8003cfc:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	22ff      	movs	r2, #255	; 0xff
 8003d04:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	227f      	movs	r2, #127	; 0x7f
 8003d0c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2205      	movs	r2, #5
 8003d14:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2205      	movs	r2, #5
 8003d1c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2207      	movs	r2, #7
 8003d24:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2207      	movs	r2, #7
 8003d2c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	22c0      	movs	r2, #192	; 0xc0
 8003d34:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 8003d38:	e004      	b.n	8003d44 <_ZN4GLCDC1Ev+0x33c>
 8003d3a:	bf00      	nop
 8003d3c:	0801060c 	.word	0x0801060c
 8003d40:	08010214 	.word	0x08010214
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	22ff      	movs	r2, #255	; 0xff
 8003d48:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	227f      	movs	r2, #127	; 0x7f
 8003d50:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2205      	movs	r2, #5
 8003d58:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2205      	movs	r2, #5
 8003d60:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2265      	movs	r2, #101	; 0x65
 8003d68:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	227f      	movs	r2, #127	; 0x7f
 8003d70:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	223f      	movs	r2, #63	; 0x3f
 8003d78:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2299      	movs	r2, #153	; 0x99
 8003d80:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	225a      	movs	r2, #90	; 0x5a
 8003d88:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	223c      	movs	r2, #60	; 0x3c
 8003d90:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	22e7      	movs	r2, #231	; 0xe7
 8003d98:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	22e7      	movs	r2, #231	; 0xe7
 8003da0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	223c      	movs	r2, #60	; 0x3c
 8003da8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	225a      	movs	r2, #90	; 0x5a
 8003db0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2299      	movs	r2, #153	; 0x99
 8003db8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	227f      	movs	r2, #127	; 0x7f
 8003dc0:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	223e      	movs	r2, #62	; 0x3e
 8003dc8:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	223e      	movs	r2, #62	; 0x3e
 8003dd0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	221c      	movs	r2, #28
 8003dd8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	221c      	movs	r2, #28
 8003de0:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2208      	movs	r2, #8
 8003de8:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2208      	movs	r2, #8
 8003df0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2208      	movs	r2, #8
 8003df8:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2208      	movs	r2, #8
 8003e00:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	221c      	movs	r2, #28
 8003e08:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	221c      	movs	r2, #28
 8003e10:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	223e      	movs	r2, #62	; 0x3e
 8003e18:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	223e      	movs	r2, #62	; 0x3e
 8003e20:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	227f      	movs	r2, #127	; 0x7f
 8003e28:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2224      	movs	r2, #36	; 0x24
 8003e30:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2266      	movs	r2, #102	; 0x66
 8003e38:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	22ff      	movs	r2, #255	; 0xff
 8003e40:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	22ff      	movs	r2, #255	; 0xff
 8003e48:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2266      	movs	r2, #102	; 0x66
 8003e50:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2224      	movs	r2, #36	; 0x24
 8003e58:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	225f      	movs	r2, #95	; 0x5f
 8003e60:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	225f      	movs	r2, #95	; 0x5f
 8003e68:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	225f      	movs	r2, #95	; 0x5f
 8003e70:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	225f      	movs	r2, #95	; 0x5f
 8003e78:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2206      	movs	r2, #6
 8003e80:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	220f      	movs	r2, #15
 8003e88:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2209      	movs	r2, #9
 8003e90:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	227f      	movs	r2, #127	; 0x7f
 8003e98:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	227f      	movs	r2, #127	; 0x7f
 8003ea0:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	227f      	movs	r2, #127	; 0x7f
 8003eb0:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	227f      	movs	r2, #127	; 0x7f
 8003eb8:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2240      	movs	r2, #64	; 0x40
 8003ec0:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	22da      	movs	r2, #218	; 0xda
 8003ec8:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	22bf      	movs	r2, #191	; 0xbf
 8003ed0:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	22a5      	movs	r2, #165	; 0xa5
 8003ed8:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	22fd      	movs	r2, #253	; 0xfd
 8003ee0:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2259      	movs	r2, #89	; 0x59
 8003ee8:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2203      	movs	r2, #3
 8003ef0:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2270      	movs	r2, #112	; 0x70
 8003f00:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2270      	movs	r2, #112	; 0x70
 8003f08:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2270      	movs	r2, #112	; 0x70
 8003f10:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2270      	movs	r2, #112	; 0x70
 8003f18:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2270      	movs	r2, #112	; 0x70
 8003f20:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2270      	movs	r2, #112	; 0x70
 8003f28:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2280      	movs	r2, #128	; 0x80
 8003f30:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2294      	movs	r2, #148	; 0x94
 8003f38:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	22b6      	movs	r2, #182	; 0xb6
 8003f40:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	22ff      	movs	r2, #255	; 0xff
 8003f48:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	22ff      	movs	r2, #255	; 0xff
 8003f50:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	22b6      	movs	r2, #182	; 0xb6
 8003f58:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2294      	movs	r2, #148	; 0x94
 8003f60:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2280      	movs	r2, #128	; 0x80
 8003f68:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2204      	movs	r2, #4
 8003f70:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2206      	movs	r2, #6
 8003f78:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	227f      	movs	r2, #127	; 0x7f
 8003f80:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	227f      	movs	r2, #127	; 0x7f
 8003f88:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2206      	movs	r2, #6
 8003f90:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2204      	movs	r2, #4
 8003f98:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2210      	movs	r2, #16
 8003fa0:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2230      	movs	r2, #48	; 0x30
 8003fa8:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	227f      	movs	r2, #127	; 0x7f
 8003fb0:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	227f      	movs	r2, #127	; 0x7f
 8003fb8:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2230      	movs	r2, #48	; 0x30
 8003fc0:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2210      	movs	r2, #16
 8003fc8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2208      	movs	r2, #8
 8003fd0:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2208      	movs	r2, #8
 8003fd8:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2208      	movs	r2, #8
 8003fe0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	222a      	movs	r2, #42	; 0x2a
 8003fe8:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	223e      	movs	r2, #62	; 0x3e
 8003ff0:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	221c      	movs	r2, #28
 8003ff8:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2208      	movs	r2, #8
 8004000:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2208      	movs	r2, #8
 8004008:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	221c      	movs	r2, #28
 8004010:	f883 20f7 	strb.w	r2, [r3, #247]	; 0xf7
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	223e      	movs	r2, #62	; 0x3e
 8004018:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	222a      	movs	r2, #42	; 0x2a
 8004020:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2208      	movs	r2, #8
 8004028:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2208      	movs	r2, #8
 8004030:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2208      	movs	r2, #8
 8004038:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	223c      	movs	r2, #60	; 0x3c
 8004040:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	223c      	movs	r2, #60	; 0x3c
 8004048:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2220      	movs	r2, #32
 8004050:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2220      	movs	r2, #32
 8004058:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2220      	movs	r2, #32
 8004060:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2220      	movs	r2, #32
 8004068:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2220      	movs	r2, #32
 8004070:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2208      	movs	r2, #8
 8004078:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	221c      	movs	r2, #28
 8004080:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	223e      	movs	r2, #62	; 0x3e
 8004088:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2208      	movs	r2, #8
 8004090:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2208      	movs	r2, #8
 8004098:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	223e      	movs	r2, #62	; 0x3e
 80040a0:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	221c      	movs	r2, #28
 80040a8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2208      	movs	r2, #8
 80040b0:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2230      	movs	r2, #48	; 0x30
 80040b8:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2238      	movs	r2, #56	; 0x38
 80040c0:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	223c      	movs	r2, #60	; 0x3c
 80040c8:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	223e      	movs	r2, #62	; 0x3e
 80040d0:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	223e      	movs	r2, #62	; 0x3e
 80040d8:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	223c      	movs	r2, #60	; 0x3c
 80040e0:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2238      	movs	r2, #56	; 0x38
 80040e8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2230      	movs	r2, #48	; 0x30
 80040f0:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2206      	movs	r2, #6
 80040f8:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	220e      	movs	r2, #14
 8004100:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	221e      	movs	r2, #30
 8004108:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	223e      	movs	r2, #62	; 0x3e
 8004110:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	223e      	movs	r2, #62	; 0x3e
 8004118:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	221e      	movs	r2, #30
 8004120:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	220e      	movs	r2, #14
 8004128:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2206      	movs	r2, #6
 8004130:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2206      	movs	r2, #6
 8004138:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	225f      	movs	r2, #95	; 0x5f
 8004140:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	225f      	movs	r2, #95	; 0x5f
 8004148:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2206      	movs	r2, #6
 8004150:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2207      	movs	r2, #7
 8004158:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2207      	movs	r2, #7
 8004160:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2207      	movs	r2, #7
 8004168:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2207      	movs	r2, #7
 8004170:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2214      	movs	r2, #20
 8004178:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	227f      	movs	r2, #127	; 0x7f
 8004180:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	227f      	movs	r2, #127	; 0x7f
 8004188:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2214      	movs	r2, #20
 8004190:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	227f      	movs	r2, #127	; 0x7f
 8004198:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	227f      	movs	r2, #127	; 0x7f
 80041a0:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2214      	movs	r2, #20
 80041a8:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2224      	movs	r2, #36	; 0x24
 80041b0:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	222e      	movs	r2, #46	; 0x2e
 80041b8:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	226b      	movs	r2, #107	; 0x6b
 80041c0:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	226b      	movs	r2, #107	; 0x6b
 80041c8:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	223a      	movs	r2, #58	; 0x3a
 80041d0:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2212      	movs	r2, #18
 80041d8:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2246      	movs	r2, #70	; 0x46
 80041e0:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2266      	movs	r2, #102	; 0x66
 80041e8:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2230      	movs	r2, #48	; 0x30
 80041f0:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2218      	movs	r2, #24
 80041f8:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	220c      	movs	r2, #12
 8004200:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2266      	movs	r2, #102	; 0x66
 8004208:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2262      	movs	r2, #98	; 0x62
 8004210:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2230      	movs	r2, #48	; 0x30
 8004218:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	227a      	movs	r2, #122	; 0x7a
 8004220:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	224f      	movs	r2, #79	; 0x4f
 8004228:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	225d      	movs	r2, #93	; 0x5d
 8004230:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2237      	movs	r2, #55	; 0x37
 8004238:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	227a      	movs	r2, #122	; 0x7a
 8004240:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2248      	movs	r2, #72	; 0x48
 8004248:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2204      	movs	r2, #4
 8004250:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2207      	movs	r2, #7
 8004258:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2203      	movs	r2, #3
 8004260:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	221c      	movs	r2, #28
 8004268:	f883 215f 	strb.w	r2, [r3, #351]	; 0x15f
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	223e      	movs	r2, #62	; 0x3e
 8004270:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2263      	movs	r2, #99	; 0x63
 8004278:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2241      	movs	r2, #65	; 0x41
 8004280:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2241      	movs	r2, #65	; 0x41
 8004288:	f883 2167 	strb.w	r2, [r3, #359]	; 0x167
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2263      	movs	r2, #99	; 0x63
 8004290:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	223e      	movs	r2, #62	; 0x3e
 8004298:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	221c      	movs	r2, #28
 80042a0:	f883 216a 	strb.w	r2, [r3, #362]	; 0x16a
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2208      	movs	r2, #8
 80042a8:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	222a      	movs	r2, #42	; 0x2a
 80042b0:	f883 216f 	strb.w	r2, [r3, #367]	; 0x16f
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	223e      	movs	r2, #62	; 0x3e
 80042b8:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	221c      	movs	r2, #28
 80042c0:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	221c      	movs	r2, #28
 80042c8:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	223e      	movs	r2, #62	; 0x3e
 80042d0:	f883 2173 	strb.w	r2, [r3, #371]	; 0x173
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	222a      	movs	r2, #42	; 0x2a
 80042d8:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2208      	movs	r2, #8
 80042e0:	f883 2175 	strb.w	r2, [r3, #373]	; 0x175
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2208      	movs	r2, #8
 80042e8:	f883 2176 	strb.w	r2, [r3, #374]	; 0x176
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2208      	movs	r2, #8
 80042f0:	f883 2177 	strb.w	r2, [r3, #375]	; 0x177
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	223e      	movs	r2, #62	; 0x3e
 80042f8:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	223e      	movs	r2, #62	; 0x3e
 8004300:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2208      	movs	r2, #8
 8004308:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2208      	movs	r2, #8
 8004310:	f883 217b 	strb.w	r2, [r3, #379]	; 0x17b
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2280      	movs	r2, #128	; 0x80
 8004318:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	22e0      	movs	r2, #224	; 0xe0
 8004320:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2260      	movs	r2, #96	; 0x60
 8004328:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2208      	movs	r2, #8
 8004330:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2208      	movs	r2, #8
 8004338:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2208      	movs	r2, #8
 8004340:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2208      	movs	r2, #8
 8004348:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2208      	movs	r2, #8
 8004350:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2208      	movs	r2, #8
 8004358:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2260      	movs	r2, #96	; 0x60
 8004360:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2260      	movs	r2, #96	; 0x60
 8004368:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2260      	movs	r2, #96	; 0x60
 8004370:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2230      	movs	r2, #48	; 0x30
 8004378:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2218      	movs	r2, #24
 8004380:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	220c      	movs	r2, #12
 8004388:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2206      	movs	r2, #6
 8004390:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2203      	movs	r2, #3
 8004398:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	223e      	movs	r2, #62	; 0x3e
 80043a8:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	227f      	movs	r2, #127	; 0x7f
 80043b0:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2271      	movs	r2, #113	; 0x71
 80043b8:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2259      	movs	r2, #89	; 0x59
 80043c0:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	224d      	movs	r2, #77	; 0x4d
 80043c8:	f883 21a2 	strb.w	r2, [r3, #418]	; 0x1a2
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	227f      	movs	r2, #127	; 0x7f
 80043d0:	f883 21a3 	strb.w	r2, [r3, #419]	; 0x1a3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	223e      	movs	r2, #62	; 0x3e
 80043d8:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2240      	movs	r2, #64	; 0x40
 80043e0:	f883 21a6 	strb.w	r2, [r3, #422]	; 0x1a6
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2242      	movs	r2, #66	; 0x42
 80043e8:	f883 21a7 	strb.w	r2, [r3, #423]	; 0x1a7
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	227f      	movs	r2, #127	; 0x7f
 80043f0:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	227f      	movs	r2, #127	; 0x7f
 80043f8:	f883 21a9 	strb.w	r2, [r3, #425]	; 0x1a9
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2240      	movs	r2, #64	; 0x40
 8004400:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2240      	movs	r2, #64	; 0x40
 8004408:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2262      	movs	r2, #98	; 0x62
 8004410:	f883 21ae 	strb.w	r2, [r3, #430]	; 0x1ae
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2273      	movs	r2, #115	; 0x73
 8004418:	f883 21af 	strb.w	r2, [r3, #431]	; 0x1af
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2259      	movs	r2, #89	; 0x59
 8004420:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2249      	movs	r2, #73	; 0x49
 8004428:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	226f      	movs	r2, #111	; 0x6f
 8004430:	f883 21b2 	strb.w	r2, [r3, #434]	; 0x1b2
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2266      	movs	r2, #102	; 0x66
 8004438:	f883 21b3 	strb.w	r2, [r3, #435]	; 0x1b3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2222      	movs	r2, #34	; 0x22
 8004440:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2263      	movs	r2, #99	; 0x63
 8004448:	f883 21b7 	strb.w	r2, [r3, #439]	; 0x1b7
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2249      	movs	r2, #73	; 0x49
 8004450:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2249      	movs	r2, #73	; 0x49
 8004458:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	227f      	movs	r2, #127	; 0x7f
 8004460:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2236      	movs	r2, #54	; 0x36
 8004468:	f883 21bb 	strb.w	r2, [r3, #443]	; 0x1bb
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2218      	movs	r2, #24
 8004470:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	221c      	movs	r2, #28
 8004478:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2216      	movs	r2, #22
 8004480:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2253      	movs	r2, #83	; 0x53
 8004488:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	227f      	movs	r2, #127	; 0x7f
 8004490:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	227f      	movs	r2, #127	; 0x7f
 8004498:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2250      	movs	r2, #80	; 0x50
 80044a0:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2227      	movs	r2, #39	; 0x27
 80044a8:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2267      	movs	r2, #103	; 0x67
 80044b0:	f883 21c7 	strb.w	r2, [r3, #455]	; 0x1c7
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2245      	movs	r2, #69	; 0x45
 80044b8:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2245      	movs	r2, #69	; 0x45
 80044c0:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	227d      	movs	r2, #125	; 0x7d
 80044c8:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2239      	movs	r2, #57	; 0x39
 80044d0:	f883 21cb 	strb.w	r2, [r3, #459]	; 0x1cb
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	223c      	movs	r2, #60	; 0x3c
 80044d8:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	227e      	movs	r2, #126	; 0x7e
 80044e0:	f883 21cf 	strb.w	r2, [r3, #463]	; 0x1cf
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	224b      	movs	r2, #75	; 0x4b
 80044e8:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2249      	movs	r2, #73	; 0x49
 80044f0:	f883 21d1 	strb.w	r2, [r3, #465]	; 0x1d1
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2279      	movs	r2, #121	; 0x79
 80044f8:	f883 21d2 	strb.w	r2, [r3, #466]	; 0x1d2
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2230      	movs	r2, #48	; 0x30
 8004500:	f883 21d3 	strb.w	r2, [r3, #467]	; 0x1d3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2203      	movs	r2, #3
 8004508:	f883 21d6 	strb.w	r2, [r3, #470]	; 0x1d6
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2203      	movs	r2, #3
 8004510:	f883 21d7 	strb.w	r2, [r3, #471]	; 0x1d7
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2271      	movs	r2, #113	; 0x71
 8004518:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2279      	movs	r2, #121	; 0x79
 8004520:	f883 21d9 	strb.w	r2, [r3, #473]	; 0x1d9
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	220f      	movs	r2, #15
 8004528:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2207      	movs	r2, #7
 8004530:	f883 21db 	strb.w	r2, [r3, #475]	; 0x1db
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2236      	movs	r2, #54	; 0x36
 8004538:	f883 21de 	strb.w	r2, [r3, #478]	; 0x1de
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	227f      	movs	r2, #127	; 0x7f
 8004540:	f883 21df 	strb.w	r2, [r3, #479]	; 0x1df
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2249      	movs	r2, #73	; 0x49
 8004548:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2249      	movs	r2, #73	; 0x49
 8004550:	f883 21e1 	strb.w	r2, [r3, #481]	; 0x1e1
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	227f      	movs	r2, #127	; 0x7f
 8004558:	f883 21e2 	strb.w	r2, [r3, #482]	; 0x1e2
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2236      	movs	r2, #54	; 0x36
 8004560:	f883 21e3 	strb.w	r2, [r3, #483]	; 0x1e3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2206      	movs	r2, #6
 8004568:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	224f      	movs	r2, #79	; 0x4f
 8004570:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2249      	movs	r2, #73	; 0x49
 8004578:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2269      	movs	r2, #105	; 0x69
 8004580:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	223f      	movs	r2, #63	; 0x3f
 8004588:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	221e      	movs	r2, #30
 8004590:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2266      	movs	r2, #102	; 0x66
 8004598:	f883 21f0 	strb.w	r2, [r3, #496]	; 0x1f0
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2266      	movs	r2, #102	; 0x66
 80045a0:	f883 21f1 	strb.w	r2, [r3, #497]	; 0x1f1
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2280      	movs	r2, #128	; 0x80
 80045a8:	f883 21f7 	strb.w	r2, [r3, #503]	; 0x1f7
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	22e6      	movs	r2, #230	; 0xe6
 80045b0:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2266      	movs	r2, #102	; 0x66
 80045b8:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2208      	movs	r2, #8
 80045c0:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	221c      	movs	r2, #28
 80045c8:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2236      	movs	r2, #54	; 0x36
 80045d0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2263      	movs	r2, #99	; 0x63
 80045d8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2241      	movs	r2, #65	; 0x41
 80045e0:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2224      	movs	r2, #36	; 0x24
 80045e8:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2224      	movs	r2, #36	; 0x24
 80045f0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2224      	movs	r2, #36	; 0x24
 80045f8:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2224      	movs	r2, #36	; 0x24
 8004600:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2224      	movs	r2, #36	; 0x24
 8004608:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2224      	movs	r2, #36	; 0x24
 8004610:	f883 220b 	strb.w	r2, [r3, #523]	; 0x20b
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2241      	movs	r2, #65	; 0x41
 8004618:	f883 220f 	strb.w	r2, [r3, #527]	; 0x20f
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2263      	movs	r2, #99	; 0x63
 8004620:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2236      	movs	r2, #54	; 0x36
 8004628:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	221c      	movs	r2, #28
 8004630:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2208      	movs	r2, #8
 8004638:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2203      	movs	r2, #3
 8004648:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2251      	movs	r2, #81	; 0x51
 8004650:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2259      	movs	r2, #89	; 0x59
 8004658:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	220f      	movs	r2, #15
 8004660:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2206      	movs	r2, #6
 8004668:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	223e      	movs	r2, #62	; 0x3e
 8004670:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	227f      	movs	r2, #127	; 0x7f
 8004678:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2241      	movs	r2, #65	; 0x41
 8004680:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	225d      	movs	r2, #93	; 0x5d
 8004688:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	225d      	movs	r2, #93	; 0x5d
 8004690:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	221f      	movs	r2, #31
 8004698:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	221e      	movs	r2, #30
 80046a0:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	227c      	movs	r2, #124	; 0x7c
 80046a8:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	227e      	movs	r2, #126	; 0x7e
 80046b0:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2213      	movs	r2, #19
 80046b8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2213      	movs	r2, #19
 80046c0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	227e      	movs	r2, #126	; 0x7e
 80046c8:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	227c      	movs	r2, #124	; 0x7c
 80046d0:	f883 222b 	strb.w	r2, [r3, #555]	; 0x22b
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2241      	movs	r2, #65	; 0x41
 80046d8:	f883 222e 	strb.w	r2, [r3, #558]	; 0x22e
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	227f      	movs	r2, #127	; 0x7f
 80046e0:	f883 222f 	strb.w	r2, [r3, #559]	; 0x22f
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	227f      	movs	r2, #127	; 0x7f
 80046e8:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2249      	movs	r2, #73	; 0x49
 80046f0:	f883 2231 	strb.w	r2, [r3, #561]	; 0x231
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2249      	movs	r2, #73	; 0x49
 80046f8:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	227f      	movs	r2, #127	; 0x7f
 8004700:	f883 2233 	strb.w	r2, [r3, #563]	; 0x233
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2236      	movs	r2, #54	; 0x36
 8004708:	f883 2234 	strb.w	r2, [r3, #564]	; 0x234
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	221c      	movs	r2, #28
 8004710:	f883 2236 	strb.w	r2, [r3, #566]	; 0x236
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	223e      	movs	r2, #62	; 0x3e
 8004718:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2263      	movs	r2, #99	; 0x63
 8004720:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2241      	movs	r2, #65	; 0x41
 8004728:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2241      	movs	r2, #65	; 0x41
 8004730:	f883 223a 	strb.w	r2, [r3, #570]	; 0x23a
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2263      	movs	r2, #99	; 0x63
 8004738:	f883 223b 	strb.w	r2, [r3, #571]	; 0x23b
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2222      	movs	r2, #34	; 0x22
 8004740:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2241      	movs	r2, #65	; 0x41
 8004748:	f883 223e 	strb.w	r2, [r3, #574]	; 0x23e
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	227f      	movs	r2, #127	; 0x7f
 8004750:	f883 223f 	strb.w	r2, [r3, #575]	; 0x23f
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	227f      	movs	r2, #127	; 0x7f
 8004758:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2241      	movs	r2, #65	; 0x41
 8004760:	f883 2241 	strb.w	r2, [r3, #577]	; 0x241
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2263      	movs	r2, #99	; 0x63
 8004768:	f883 2242 	strb.w	r2, [r3, #578]	; 0x242
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	223e      	movs	r2, #62	; 0x3e
 8004770:	f883 2243 	strb.w	r2, [r3, #579]	; 0x243
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	221c      	movs	r2, #28
 8004778:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2241      	movs	r2, #65	; 0x41
 8004780:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	227f      	movs	r2, #127	; 0x7f
 8004788:	f883 2247 	strb.w	r2, [r3, #583]	; 0x247
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	227f      	movs	r2, #127	; 0x7f
 8004790:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2249      	movs	r2, #73	; 0x49
 8004798:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	225d      	movs	r2, #93	; 0x5d
 80047a0:	f883 224a 	strb.w	r2, [r3, #586]	; 0x24a
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2241      	movs	r2, #65	; 0x41
 80047a8:	f883 224b 	strb.w	r2, [r3, #587]	; 0x24b
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2263      	movs	r2, #99	; 0x63
 80047b0:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2241      	movs	r2, #65	; 0x41
 80047b8:	f883 224e 	strb.w	r2, [r3, #590]	; 0x24e
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	227f      	movs	r2, #127	; 0x7f
 80047c0:	f883 224f 	strb.w	r2, [r3, #591]	; 0x24f
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	227f      	movs	r2, #127	; 0x7f
 80047c8:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2249      	movs	r2, #73	; 0x49
 80047d0:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	221d      	movs	r2, #29
 80047d8:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2253 	strb.w	r2, [r3, #595]	; 0x253
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2203      	movs	r2, #3
 80047e8:	f883 2254 	strb.w	r2, [r3, #596]	; 0x254
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	221c      	movs	r2, #28
 80047f0:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	223e      	movs	r2, #62	; 0x3e
 80047f8:	f883 2257 	strb.w	r2, [r3, #599]	; 0x257
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2263      	movs	r2, #99	; 0x63
 8004800:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2241      	movs	r2, #65	; 0x41
 8004808:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2251      	movs	r2, #81	; 0x51
 8004810:	f883 225a 	strb.w	r2, [r3, #602]	; 0x25a
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2273      	movs	r2, #115	; 0x73
 8004818:	f883 225b 	strb.w	r2, [r3, #603]	; 0x25b
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2272      	movs	r2, #114	; 0x72
 8004820:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	227f      	movs	r2, #127	; 0x7f
 8004828:	f883 225e 	strb.w	r2, [r3, #606]	; 0x25e
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	227f      	movs	r2, #127	; 0x7f
 8004830:	f883 225f 	strb.w	r2, [r3, #607]	; 0x25f
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2208      	movs	r2, #8
 8004838:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2208      	movs	r2, #8
 8004840:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	227f      	movs	r2, #127	; 0x7f
 8004848:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	227f      	movs	r2, #127	; 0x7f
 8004850:	f883 2263 	strb.w	r2, [r3, #611]	; 0x263
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2241      	movs	r2, #65	; 0x41
 8004858:	f883 2267 	strb.w	r2, [r3, #615]	; 0x267
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	227f      	movs	r2, #127	; 0x7f
 8004860:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	227f      	movs	r2, #127	; 0x7f
 8004868:	f883 2269 	strb.w	r2, [r3, #617]	; 0x269
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2241      	movs	r2, #65	; 0x41
 8004870:	f883 226a 	strb.w	r2, [r3, #618]	; 0x26a
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2230      	movs	r2, #48	; 0x30
 8004878:	f883 226e 	strb.w	r2, [r3, #622]	; 0x26e
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2270      	movs	r2, #112	; 0x70
 8004880:	f883 226f 	strb.w	r2, [r3, #623]	; 0x26f
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2240      	movs	r2, #64	; 0x40
 8004888:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2241      	movs	r2, #65	; 0x41
 8004890:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	227f      	movs	r2, #127	; 0x7f
 8004898:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	223f      	movs	r2, #63	; 0x3f
 80048a0:	f883 2273 	strb.w	r2, [r3, #627]	; 0x273
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2241      	movs	r2, #65	; 0x41
 80048b0:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	227f      	movs	r2, #127	; 0x7f
 80048b8:	f883 2277 	strb.w	r2, [r3, #631]	; 0x277
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	227f      	movs	r2, #127	; 0x7f
 80048c0:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2208      	movs	r2, #8
 80048c8:	f883 2279 	strb.w	r2, [r3, #633]	; 0x279
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	221c      	movs	r2, #28
 80048d0:	f883 227a 	strb.w	r2, [r3, #634]	; 0x27a
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2277      	movs	r2, #119	; 0x77
 80048d8:	f883 227b 	strb.w	r2, [r3, #635]	; 0x27b
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2263      	movs	r2, #99	; 0x63
 80048e0:	f883 227c 	strb.w	r2, [r3, #636]	; 0x27c
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2241      	movs	r2, #65	; 0x41
 80048e8:	f883 227e 	strb.w	r2, [r3, #638]	; 0x27e
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	227f      	movs	r2, #127	; 0x7f
 80048f0:	f883 227f 	strb.w	r2, [r3, #639]	; 0x27f
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	227f      	movs	r2, #127	; 0x7f
 80048f8:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2241      	movs	r2, #65	; 0x41
 8004900:	f883 2281 	strb.w	r2, [r3, #641]	; 0x281
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2240      	movs	r2, #64	; 0x40
 8004908:	f883 2282 	strb.w	r2, [r3, #642]	; 0x282
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2260      	movs	r2, #96	; 0x60
 8004910:	f883 2283 	strb.w	r2, [r3, #643]	; 0x283
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2270      	movs	r2, #112	; 0x70
 8004918:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	227f      	movs	r2, #127	; 0x7f
 8004920:	f883 2286 	strb.w	r2, [r3, #646]	; 0x286
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	227f      	movs	r2, #127	; 0x7f
 8004928:	f883 2287 	strb.w	r2, [r3, #647]	; 0x287
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	220e      	movs	r2, #14
 8004930:	f883 2288 	strb.w	r2, [r3, #648]	; 0x288
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	221c      	movs	r2, #28
 8004938:	f883 2289 	strb.w	r2, [r3, #649]	; 0x289
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	220e      	movs	r2, #14
 8004940:	f883 228a 	strb.w	r2, [r3, #650]	; 0x28a
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	227f      	movs	r2, #127	; 0x7f
 8004948:	f883 228b 	strb.w	r2, [r3, #651]	; 0x28b
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	227f      	movs	r2, #127	; 0x7f
 8004950:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	227f      	movs	r2, #127	; 0x7f
 8004958:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	227f      	movs	r2, #127	; 0x7f
 8004960:	f883 228f 	strb.w	r2, [r3, #655]	; 0x28f
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2206      	movs	r2, #6
 8004968:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	220c      	movs	r2, #12
 8004970:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2218      	movs	r2, #24
 8004978:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	227f      	movs	r2, #127	; 0x7f
 8004980:	f883 2293 	strb.w	r2, [r3, #659]	; 0x293
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	227f      	movs	r2, #127	; 0x7f
 8004988:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	221c      	movs	r2, #28
 8004990:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	223e      	movs	r2, #62	; 0x3e
 8004998:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2263      	movs	r2, #99	; 0x63
 80049a0:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2241      	movs	r2, #65	; 0x41
 80049a8:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2263      	movs	r2, #99	; 0x63
 80049b0:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	223e      	movs	r2, #62	; 0x3e
 80049b8:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	221c      	movs	r2, #28
 80049c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2241      	movs	r2, #65	; 0x41
 80049c8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	227f      	movs	r2, #127	; 0x7f
 80049d0:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	227f      	movs	r2, #127	; 0x7f
 80049d8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2249      	movs	r2, #73	; 0x49
 80049e0:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2209      	movs	r2, #9
 80049e8:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	220f      	movs	r2, #15
 80049f0:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2206      	movs	r2, #6
 80049f8:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	221e      	movs	r2, #30
 8004a00:	f883 22a6 	strb.w	r2, [r3, #678]	; 0x2a6
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	223f      	movs	r2, #63	; 0x3f
 8004a08:	f883 22a7 	strb.w	r2, [r3, #679]	; 0x2a7
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2221      	movs	r2, #33	; 0x21
 8004a10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2271      	movs	r2, #113	; 0x71
 8004a18:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	227f      	movs	r2, #127	; 0x7f
 8004a20:	f883 22aa 	strb.w	r2, [r3, #682]	; 0x2aa
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	225e      	movs	r2, #94	; 0x5e
 8004a28:	f883 22ab 	strb.w	r2, [r3, #683]	; 0x2ab
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2241      	movs	r2, #65	; 0x41
 8004a30:	f883 22ae 	strb.w	r2, [r3, #686]	; 0x2ae
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	227f      	movs	r2, #127	; 0x7f
 8004a38:	f883 22af 	strb.w	r2, [r3, #687]	; 0x2af
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	227f      	movs	r2, #127	; 0x7f
 8004a40:	f883 22b0 	strb.w	r2, [r3, #688]	; 0x2b0
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2209      	movs	r2, #9
 8004a48:	f883 22b1 	strb.w	r2, [r3, #689]	; 0x2b1
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2219      	movs	r2, #25
 8004a50:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	227f      	movs	r2, #127	; 0x7f
 8004a58:	f883 22b3 	strb.w	r2, [r3, #691]	; 0x2b3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2266      	movs	r2, #102	; 0x66
 8004a60:	f883 22b4 	strb.w	r2, [r3, #692]	; 0x2b4
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2226      	movs	r2, #38	; 0x26
 8004a68:	f883 22b6 	strb.w	r2, [r3, #694]	; 0x2b6
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	226f      	movs	r2, #111	; 0x6f
 8004a70:	f883 22b7 	strb.w	r2, [r3, #695]	; 0x2b7
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	224d      	movs	r2, #77	; 0x4d
 8004a78:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2259      	movs	r2, #89	; 0x59
 8004a80:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2273      	movs	r2, #115	; 0x73
 8004a88:	f883 22ba 	strb.w	r2, [r3, #698]	; 0x2ba
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2232      	movs	r2, #50	; 0x32
 8004a90:	f883 22bb 	strb.w	r2, [r3, #699]	; 0x2bb
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2203      	movs	r2, #3
 8004a98:	f883 22be 	strb.w	r2, [r3, #702]	; 0x2be
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2241      	movs	r2, #65	; 0x41
 8004aa0:	f883 22bf 	strb.w	r2, [r3, #703]	; 0x2bf
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	227f      	movs	r2, #127	; 0x7f
 8004aa8:	f883 22c0 	strb.w	r2, [r3, #704]	; 0x2c0
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	227f      	movs	r2, #127	; 0x7f
 8004ab0:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2241      	movs	r2, #65	; 0x41
 8004ab8:	f883 22c2 	strb.w	r2, [r3, #706]	; 0x2c2
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2203      	movs	r2, #3
 8004ac0:	f883 22c3 	strb.w	r2, [r3, #707]	; 0x2c3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	227f      	movs	r2, #127	; 0x7f
 8004ac8:	f883 22c6 	strb.w	r2, [r3, #710]	; 0x2c6
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	227f      	movs	r2, #127	; 0x7f
 8004ad0:	f883 22c7 	strb.w	r2, [r3, #711]	; 0x2c7
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2240      	movs	r2, #64	; 0x40
 8004ad8:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2240      	movs	r2, #64	; 0x40
 8004ae0:	f883 22c9 	strb.w	r2, [r3, #713]	; 0x2c9
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	227f      	movs	r2, #127	; 0x7f
 8004ae8:	f883 22ca 	strb.w	r2, [r3, #714]	; 0x2ca
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	227f      	movs	r2, #127	; 0x7f
 8004af0:	f883 22cb 	strb.w	r2, [r3, #715]	; 0x2cb
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	221f      	movs	r2, #31
 8004af8:	f883 22ce 	strb.w	r2, [r3, #718]	; 0x2ce
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	223f      	movs	r2, #63	; 0x3f
 8004b00:	f883 22cf 	strb.w	r2, [r3, #719]	; 0x2cf
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2260      	movs	r2, #96	; 0x60
 8004b08:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2260      	movs	r2, #96	; 0x60
 8004b10:	f883 22d1 	strb.w	r2, [r3, #721]	; 0x2d1
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	223f      	movs	r2, #63	; 0x3f
 8004b18:	f883 22d2 	strb.w	r2, [r3, #722]	; 0x2d2
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	221f      	movs	r2, #31
 8004b20:	f883 22d3 	strb.w	r2, [r3, #723]	; 0x2d3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	227f      	movs	r2, #127	; 0x7f
 8004b28:	f883 22d6 	strb.w	r2, [r3, #726]	; 0x2d6
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	227f      	movs	r2, #127	; 0x7f
 8004b30:	f883 22d7 	strb.w	r2, [r3, #727]	; 0x2d7
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2230      	movs	r2, #48	; 0x30
 8004b38:	f883 22d8 	strb.w	r2, [r3, #728]	; 0x2d8
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2218      	movs	r2, #24
 8004b40:	f883 22d9 	strb.w	r2, [r3, #729]	; 0x2d9
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2230      	movs	r2, #48	; 0x30
 8004b48:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	227f      	movs	r2, #127	; 0x7f
 8004b50:	f883 22db 	strb.w	r2, [r3, #731]	; 0x2db
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	227f      	movs	r2, #127	; 0x7f
 8004b58:	f883 22dc 	strb.w	r2, [r3, #732]	; 0x2dc
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2243      	movs	r2, #67	; 0x43
 8004b60:	f883 22de 	strb.w	r2, [r3, #734]	; 0x2de
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2267      	movs	r2, #103	; 0x67
 8004b68:	f883 22df 	strb.w	r2, [r3, #735]	; 0x2df
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	223c      	movs	r2, #60	; 0x3c
 8004b70:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2218      	movs	r2, #24
 8004b78:	f883 22e1 	strb.w	r2, [r3, #737]	; 0x2e1
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	223c      	movs	r2, #60	; 0x3c
 8004b80:	f883 22e2 	strb.w	r2, [r3, #738]	; 0x2e2
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2267      	movs	r2, #103	; 0x67
 8004b88:	f883 22e3 	strb.w	r2, [r3, #739]	; 0x2e3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2243      	movs	r2, #67	; 0x43
 8004b90:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2207      	movs	r2, #7
 8004b98:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	224f      	movs	r2, #79	; 0x4f
 8004ba0:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2278      	movs	r2, #120	; 0x78
 8004ba8:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2278      	movs	r2, #120	; 0x78
 8004bb0:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	224f      	movs	r2, #79	; 0x4f
 8004bb8:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2207      	movs	r2, #7
 8004bc0:	f883 22eb 	strb.w	r2, [r3, #747]	; 0x2eb
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2247      	movs	r2, #71	; 0x47
 8004bc8:	f883 22ee 	strb.w	r2, [r3, #750]	; 0x2ee
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2263      	movs	r2, #99	; 0x63
 8004bd0:	f883 22ef 	strb.w	r2, [r3, #751]	; 0x2ef
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2271      	movs	r2, #113	; 0x71
 8004bd8:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2259      	movs	r2, #89	; 0x59
 8004be0:	f883 22f1 	strb.w	r2, [r3, #753]	; 0x2f1
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	224d      	movs	r2, #77	; 0x4d
 8004be8:	f883 22f2 	strb.w	r2, [r3, #754]	; 0x2f2
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2267      	movs	r2, #103	; 0x67
 8004bf0:	f883 22f3 	strb.w	r2, [r3, #755]	; 0x2f3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2273      	movs	r2, #115	; 0x73
 8004bf8:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	227f      	movs	r2, #127	; 0x7f
 8004c00:	f883 22f7 	strb.w	r2, [r3, #759]	; 0x2f7
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	227f      	movs	r2, #127	; 0x7f
 8004c08:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2241      	movs	r2, #65	; 0x41
 8004c10:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2241      	movs	r2, #65	; 0x41
 8004c18:	f883 22fa 	strb.w	r2, [r3, #762]	; 0x2fa
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 22fe 	strb.w	r2, [r3, #766]	; 0x2fe
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2203      	movs	r2, #3
 8004c28:	f883 22ff 	strb.w	r2, [r3, #767]	; 0x2ff
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2206      	movs	r2, #6
 8004c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	220c      	movs	r2, #12
 8004c38:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2218      	movs	r2, #24
 8004c40:	f883 2302 	strb.w	r2, [r3, #770]	; 0x302
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2230      	movs	r2, #48	; 0x30
 8004c48:	f883 2303 	strb.w	r2, [r3, #771]	; 0x303
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2260      	movs	r2, #96	; 0x60
 8004c50:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2241      	movs	r2, #65	; 0x41
 8004c58:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2241      	movs	r2, #65	; 0x41
 8004c60:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	227f      	movs	r2, #127	; 0x7f
 8004c68:	f883 2309 	strb.w	r2, [r3, #777]	; 0x309
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	227f      	movs	r2, #127	; 0x7f
 8004c70:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2208      	movs	r2, #8
 8004c78:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	220c      	movs	r2, #12
 8004c80:	f883 230f 	strb.w	r2, [r3, #783]	; 0x30f
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2206      	movs	r2, #6
 8004c88:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2203      	movs	r2, #3
 8004c90:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2206      	movs	r2, #6
 8004c98:	f883 2312 	strb.w	r2, [r3, #786]	; 0x312
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	220c      	movs	r2, #12
 8004ca0:	f883 2313 	strb.w	r2, [r3, #787]	; 0x313
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2208      	movs	r2, #8
 8004ca8:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2280      	movs	r2, #128	; 0x80
 8004cb0:	f883 2316 	strb.w	r2, [r3, #790]	; 0x316
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2280      	movs	r2, #128	; 0x80
 8004cb8:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2280      	movs	r2, #128	; 0x80
 8004cc0:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2280      	movs	r2, #128	; 0x80
 8004cc8:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2280      	movs	r2, #128	; 0x80
 8004cd0:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2280      	movs	r2, #128	; 0x80
 8004cd8:	f883 231b 	strb.w	r2, [r3, #795]	; 0x31b
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2280      	movs	r2, #128	; 0x80
 8004ce0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2280      	movs	r2, #128	; 0x80
 8004ce8:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2203      	movs	r2, #3
 8004cf0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2207      	movs	r2, #7
 8004cf8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2204      	movs	r2, #4
 8004d00:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 2326 	strb.w	r2, [r3, #806]	; 0x326
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2274      	movs	r2, #116	; 0x74
 8004d10:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2254      	movs	r2, #84	; 0x54
 8004d18:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2254      	movs	r2, #84	; 0x54
 8004d20:	f883 2329 	strb.w	r2, [r3, #809]	; 0x329
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	223c      	movs	r2, #60	; 0x3c
 8004d28:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2278      	movs	r2, #120	; 0x78
 8004d30:	f883 232b 	strb.w	r2, [r3, #811]	; 0x32b
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2240      	movs	r2, #64	; 0x40
 8004d38:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2241      	movs	r2, #65	; 0x41
 8004d40:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	227f      	movs	r2, #127	; 0x7f
 8004d48:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	223f      	movs	r2, #63	; 0x3f
 8004d50:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2248      	movs	r2, #72	; 0x48
 8004d58:	f883 2331 	strb.w	r2, [r3, #817]	; 0x331
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2248      	movs	r2, #72	; 0x48
 8004d60:	f883 2332 	strb.w	r2, [r3, #818]	; 0x332
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2278      	movs	r2, #120	; 0x78
 8004d68:	f883 2333 	strb.w	r2, [r3, #819]	; 0x333
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2230      	movs	r2, #48	; 0x30
 8004d70:	f883 2334 	strb.w	r2, [r3, #820]	; 0x334
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2238      	movs	r2, #56	; 0x38
 8004d78:	f883 2336 	strb.w	r2, [r3, #822]	; 0x336
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	227c      	movs	r2, #124	; 0x7c
 8004d80:	f883 2337 	strb.w	r2, [r3, #823]	; 0x337
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2244      	movs	r2, #68	; 0x44
 8004d88:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2244      	movs	r2, #68	; 0x44
 8004d90:	f883 2339 	strb.w	r2, [r3, #825]	; 0x339
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	226c      	movs	r2, #108	; 0x6c
 8004d98:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2228      	movs	r2, #40	; 0x28
 8004da0:	f883 233b 	strb.w	r2, [r3, #827]	; 0x33b
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2230      	movs	r2, #48	; 0x30
 8004da8:	f883 233e 	strb.w	r2, [r3, #830]	; 0x33e
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2278      	movs	r2, #120	; 0x78
 8004db0:	f883 233f 	strb.w	r2, [r3, #831]	; 0x33f
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2248      	movs	r2, #72	; 0x48
 8004db8:	f883 2340 	strb.w	r2, [r3, #832]	; 0x340
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2249      	movs	r2, #73	; 0x49
 8004dc0:	f883 2341 	strb.w	r2, [r3, #833]	; 0x341
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	223f      	movs	r2, #63	; 0x3f
 8004dc8:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	227f      	movs	r2, #127	; 0x7f
 8004dd0:	f883 2343 	strb.w	r2, [r3, #835]	; 0x343
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2240      	movs	r2, #64	; 0x40
 8004dd8:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2238      	movs	r2, #56	; 0x38
 8004de0:	f883 2346 	strb.w	r2, [r3, #838]	; 0x346
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	227c      	movs	r2, #124	; 0x7c
 8004de8:	f883 2347 	strb.w	r2, [r3, #839]	; 0x347
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2254      	movs	r2, #84	; 0x54
 8004df0:	f883 2348 	strb.w	r2, [r3, #840]	; 0x348
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2254      	movs	r2, #84	; 0x54
 8004df8:	f883 2349 	strb.w	r2, [r3, #841]	; 0x349
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	225c      	movs	r2, #92	; 0x5c
 8004e00:	f883 234a 	strb.w	r2, [r3, #842]	; 0x34a
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2218      	movs	r2, #24
 8004e08:	f883 234b 	strb.w	r2, [r3, #843]	; 0x34b
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2248      	movs	r2, #72	; 0x48
 8004e10:	f883 234e 	strb.w	r2, [r3, #846]	; 0x34e
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	227e      	movs	r2, #126	; 0x7e
 8004e18:	f883 234f 	strb.w	r2, [r3, #847]	; 0x34f
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	227f      	movs	r2, #127	; 0x7f
 8004e20:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2249      	movs	r2, #73	; 0x49
 8004e28:	f883 2351 	strb.w	r2, [r3, #849]	; 0x351
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2203      	movs	r2, #3
 8004e30:	f883 2352 	strb.w	r2, [r3, #850]	; 0x352
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 2353 	strb.w	r2, [r3, #851]	; 0x353
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2298      	movs	r2, #152	; 0x98
 8004e40:	f883 2356 	strb.w	r2, [r3, #854]	; 0x356
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	22bc      	movs	r2, #188	; 0xbc
 8004e48:	f883 2357 	strb.w	r2, [r3, #855]	; 0x357
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	22a4      	movs	r2, #164	; 0xa4
 8004e50:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	22a4      	movs	r2, #164	; 0xa4
 8004e58:	f883 2359 	strb.w	r2, [r3, #857]	; 0x359
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	22f8      	movs	r2, #248	; 0xf8
 8004e60:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	227c      	movs	r2, #124	; 0x7c
 8004e68:	f883 235b 	strb.w	r2, [r3, #859]	; 0x35b
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2204      	movs	r2, #4
 8004e70:	f883 235c 	strb.w	r2, [r3, #860]	; 0x35c
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2241      	movs	r2, #65	; 0x41
 8004e78:	f883 235e 	strb.w	r2, [r3, #862]	; 0x35e
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	227f      	movs	r2, #127	; 0x7f
 8004e80:	f883 235f 	strb.w	r2, [r3, #863]	; 0x35f
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	227f      	movs	r2, #127	; 0x7f
 8004e88:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2208      	movs	r2, #8
 8004e90:	f883 2361 	strb.w	r2, [r3, #865]	; 0x361
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2204      	movs	r2, #4
 8004e98:	f883 2362 	strb.w	r2, [r3, #866]	; 0x362
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	227c      	movs	r2, #124	; 0x7c
 8004ea0:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2278      	movs	r2, #120	; 0x78
 8004ea8:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2244      	movs	r2, #68	; 0x44
 8004eb0:	f883 2367 	strb.w	r2, [r3, #871]	; 0x367
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	227d      	movs	r2, #125	; 0x7d
 8004eb8:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	227d      	movs	r2, #125	; 0x7d
 8004ec0:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2240      	movs	r2, #64	; 0x40
 8004ec8:	f883 236a 	strb.w	r2, [r3, #874]	; 0x36a
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2260      	movs	r2, #96	; 0x60
 8004ed0:	f883 236e 	strb.w	r2, [r3, #878]	; 0x36e
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	22e0      	movs	r2, #224	; 0xe0
 8004ed8:	f883 236f 	strb.w	r2, [r3, #879]	; 0x36f
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2280      	movs	r2, #128	; 0x80
 8004ee0:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2280      	movs	r2, #128	; 0x80
 8004ee8:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	22fd      	movs	r2, #253	; 0xfd
 8004ef0:	f883 2372 	strb.w	r2, [r3, #882]	; 0x372
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	227d      	movs	r2, #125	; 0x7d
 8004ef8:	f883 2373 	strb.w	r2, [r3, #883]	; 0x373
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2241      	movs	r2, #65	; 0x41
 8004f00:	f883 2376 	strb.w	r2, [r3, #886]	; 0x376
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	227f      	movs	r2, #127	; 0x7f
 8004f08:	f883 2377 	strb.w	r2, [r3, #887]	; 0x377
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	227f      	movs	r2, #127	; 0x7f
 8004f10:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2210      	movs	r2, #16
 8004f18:	f883 2379 	strb.w	r2, [r3, #889]	; 0x379
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2238      	movs	r2, #56	; 0x38
 8004f20:	f883 237a 	strb.w	r2, [r3, #890]	; 0x37a
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	226c      	movs	r2, #108	; 0x6c
 8004f28:	f883 237b 	strb.w	r2, [r3, #891]	; 0x37b
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2244      	movs	r2, #68	; 0x44
 8004f30:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2241      	movs	r2, #65	; 0x41
 8004f38:	f883 237f 	strb.w	r2, [r3, #895]	; 0x37f
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	227f      	movs	r2, #127	; 0x7f
 8004f40:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	227f      	movs	r2, #127	; 0x7f
 8004f48:	f883 2381 	strb.w	r2, [r3, #897]	; 0x381
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2240      	movs	r2, #64	; 0x40
 8004f50:	f883 2382 	strb.w	r2, [r3, #898]	; 0x382
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	227c      	movs	r2, #124	; 0x7c
 8004f58:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	227c      	movs	r2, #124	; 0x7c
 8004f60:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2218      	movs	r2, #24
 8004f68:	f883 2388 	strb.w	r2, [r3, #904]	; 0x388
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2238      	movs	r2, #56	; 0x38
 8004f70:	f883 2389 	strb.w	r2, [r3, #905]	; 0x389
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	221c      	movs	r2, #28
 8004f78:	f883 238a 	strb.w	r2, [r3, #906]	; 0x38a
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	227c      	movs	r2, #124	; 0x7c
 8004f80:	f883 238b 	strb.w	r2, [r3, #907]	; 0x38b
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2278      	movs	r2, #120	; 0x78
 8004f88:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	227c      	movs	r2, #124	; 0x7c
 8004f90:	f883 238e 	strb.w	r2, [r3, #910]	; 0x38e
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	227c      	movs	r2, #124	; 0x7c
 8004f98:	f883 238f 	strb.w	r2, [r3, #911]	; 0x38f
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2204      	movs	r2, #4
 8004fa0:	f883 2390 	strb.w	r2, [r3, #912]	; 0x390
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2204      	movs	r2, #4
 8004fa8:	f883 2391 	strb.w	r2, [r3, #913]	; 0x391
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	227c      	movs	r2, #124	; 0x7c
 8004fb0:	f883 2392 	strb.w	r2, [r3, #914]	; 0x392
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2278      	movs	r2, #120	; 0x78
 8004fb8:	f883 2393 	strb.w	r2, [r3, #915]	; 0x393
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2238      	movs	r2, #56	; 0x38
 8004fc0:	f883 2396 	strb.w	r2, [r3, #918]	; 0x396
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	227c      	movs	r2, #124	; 0x7c
 8004fc8:	f883 2397 	strb.w	r2, [r3, #919]	; 0x397
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2244      	movs	r2, #68	; 0x44
 8004fd0:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2244      	movs	r2, #68	; 0x44
 8004fd8:	f883 2399 	strb.w	r2, [r3, #921]	; 0x399
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	227c      	movs	r2, #124	; 0x7c
 8004fe0:	f883 239a 	strb.w	r2, [r3, #922]	; 0x39a
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2238      	movs	r2, #56	; 0x38
 8004fe8:	f883 239b 	strb.w	r2, [r3, #923]	; 0x39b
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2284      	movs	r2, #132	; 0x84
 8004ff0:	f883 239e 	strb.w	r2, [r3, #926]	; 0x39e
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	22fc      	movs	r2, #252	; 0xfc
 8004ff8:	f883 239f 	strb.w	r2, [r3, #927]	; 0x39f
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	22f8      	movs	r2, #248	; 0xf8
 8005000:	f883 23a0 	strb.w	r2, [r3, #928]	; 0x3a0
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	22a4      	movs	r2, #164	; 0xa4
 8005008:	f883 23a1 	strb.w	r2, [r3, #929]	; 0x3a1
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2224      	movs	r2, #36	; 0x24
 8005010:	f883 23a2 	strb.w	r2, [r3, #930]	; 0x3a2
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	223c      	movs	r2, #60	; 0x3c
 8005018:	f883 23a3 	strb.w	r2, [r3, #931]	; 0x3a3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2218      	movs	r2, #24
 8005020:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2218      	movs	r2, #24
 8005028:	f883 23a6 	strb.w	r2, [r3, #934]	; 0x3a6
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	223c      	movs	r2, #60	; 0x3c
 8005030:	f883 23a7 	strb.w	r2, [r3, #935]	; 0x3a7
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2224      	movs	r2, #36	; 0x24
 8005038:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	22a4      	movs	r2, #164	; 0xa4
 8005040:	f883 23a9 	strb.w	r2, [r3, #937]	; 0x3a9
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	22f8      	movs	r2, #248	; 0xf8
 8005048:	f883 23aa 	strb.w	r2, [r3, #938]	; 0x3aa
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	22fc      	movs	r2, #252	; 0xfc
 8005050:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2284      	movs	r2, #132	; 0x84
 8005058:	f883 23ac 	strb.w	r2, [r3, #940]	; 0x3ac
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2244      	movs	r2, #68	; 0x44
 8005060:	f883 23ae 	strb.w	r2, [r3, #942]	; 0x3ae
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	227c      	movs	r2, #124	; 0x7c
 8005068:	f883 23af 	strb.w	r2, [r3, #943]	; 0x3af
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2278      	movs	r2, #120	; 0x78
 8005070:	f883 23b0 	strb.w	r2, [r3, #944]	; 0x3b0
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	224c      	movs	r2, #76	; 0x4c
 8005078:	f883 23b1 	strb.w	r2, [r3, #945]	; 0x3b1
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2204      	movs	r2, #4
 8005080:	f883 23b2 	strb.w	r2, [r3, #946]	; 0x3b2
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	221c      	movs	r2, #28
 8005088:	f883 23b3 	strb.w	r2, [r3, #947]	; 0x3b3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2218      	movs	r2, #24
 8005090:	f883 23b4 	strb.w	r2, [r3, #948]	; 0x3b4
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2248      	movs	r2, #72	; 0x48
 8005098:	f883 23b6 	strb.w	r2, [r3, #950]	; 0x3b6
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	225c      	movs	r2, #92	; 0x5c
 80050a0:	f883 23b7 	strb.w	r2, [r3, #951]	; 0x3b7
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2254      	movs	r2, #84	; 0x54
 80050a8:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2254      	movs	r2, #84	; 0x54
 80050b0:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2274      	movs	r2, #116	; 0x74
 80050b8:	f883 23ba 	strb.w	r2, [r3, #954]	; 0x3ba
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2224      	movs	r2, #36	; 0x24
 80050c0:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2204      	movs	r2, #4
 80050c8:	f883 23bf 	strb.w	r2, [r3, #959]	; 0x3bf
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	223e      	movs	r2, #62	; 0x3e
 80050d0:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	227f      	movs	r2, #127	; 0x7f
 80050d8:	f883 23c1 	strb.w	r2, [r3, #961]	; 0x3c1
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2244      	movs	r2, #68	; 0x44
 80050e0:	f883 23c2 	strb.w	r2, [r3, #962]	; 0x3c2
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2224      	movs	r2, #36	; 0x24
 80050e8:	f883 23c3 	strb.w	r2, [r3, #963]	; 0x3c3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	223c      	movs	r2, #60	; 0x3c
 80050f0:	f883 23c6 	strb.w	r2, [r3, #966]	; 0x3c6
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	227c      	movs	r2, #124	; 0x7c
 80050f8:	f883 23c7 	strb.w	r2, [r3, #967]	; 0x3c7
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2240      	movs	r2, #64	; 0x40
 8005100:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2240      	movs	r2, #64	; 0x40
 8005108:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	223c      	movs	r2, #60	; 0x3c
 8005110:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	227c      	movs	r2, #124	; 0x7c
 8005118:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2240      	movs	r2, #64	; 0x40
 8005120:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	221c      	movs	r2, #28
 8005128:	f883 23ce 	strb.w	r2, [r3, #974]	; 0x3ce
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	223c      	movs	r2, #60	; 0x3c
 8005130:	f883 23cf 	strb.w	r2, [r3, #975]	; 0x3cf
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2260      	movs	r2, #96	; 0x60
 8005138:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2260      	movs	r2, #96	; 0x60
 8005140:	f883 23d1 	strb.w	r2, [r3, #977]	; 0x3d1
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	223c      	movs	r2, #60	; 0x3c
 8005148:	f883 23d2 	strb.w	r2, [r3, #978]	; 0x3d2
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	221c      	movs	r2, #28
 8005150:	f883 23d3 	strb.w	r2, [r3, #979]	; 0x3d3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	223c      	movs	r2, #60	; 0x3c
 8005158:	f883 23d6 	strb.w	r2, [r3, #982]	; 0x3d6
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	227c      	movs	r2, #124	; 0x7c
 8005160:	f883 23d7 	strb.w	r2, [r3, #983]	; 0x3d7
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2270      	movs	r2, #112	; 0x70
 8005168:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2238      	movs	r2, #56	; 0x38
 8005170:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2270      	movs	r2, #112	; 0x70
 8005178:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	227c      	movs	r2, #124	; 0x7c
 8005180:	f883 23db 	strb.w	r2, [r3, #987]	; 0x3db
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	223c      	movs	r2, #60	; 0x3c
 8005188:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2244      	movs	r2, #68	; 0x44
 8005190:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	226c      	movs	r2, #108	; 0x6c
 8005198:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2238      	movs	r2, #56	; 0x38
 80051a0:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2210      	movs	r2, #16
 80051a8:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2238      	movs	r2, #56	; 0x38
 80051b0:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	226c      	movs	r2, #108	; 0x6c
 80051b8:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2244      	movs	r2, #68	; 0x44
 80051c0:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	229c      	movs	r2, #156	; 0x9c
 80051c8:	f883 23e6 	strb.w	r2, [r3, #998]	; 0x3e6
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	22bc      	movs	r2, #188	; 0xbc
 80051d0:	f883 23e7 	strb.w	r2, [r3, #999]	; 0x3e7
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	22a0      	movs	r2, #160	; 0xa0
 80051d8:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	22a0      	movs	r2, #160	; 0xa0
 80051e0:	f883 23e9 	strb.w	r2, [r3, #1001]	; 0x3e9
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	22fc      	movs	r2, #252	; 0xfc
 80051e8:	f883 23ea 	strb.w	r2, [r3, #1002]	; 0x3ea
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	227c      	movs	r2, #124	; 0x7c
 80051f0:	f883 23eb 	strb.w	r2, [r3, #1003]	; 0x3eb
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	224c      	movs	r2, #76	; 0x4c
 80051f8:	f883 23ee 	strb.w	r2, [r3, #1006]	; 0x3ee
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2264      	movs	r2, #100	; 0x64
 8005200:	f883 23ef 	strb.w	r2, [r3, #1007]	; 0x3ef
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2274      	movs	r2, #116	; 0x74
 8005208:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	225c      	movs	r2, #92	; 0x5c
 8005210:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	224c      	movs	r2, #76	; 0x4c
 8005218:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2264      	movs	r2, #100	; 0x64
 8005220:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2208      	movs	r2, #8
 8005228:	f883 23f6 	strb.w	r2, [r3, #1014]	; 0x3f6
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2208      	movs	r2, #8
 8005230:	f883 23f7 	strb.w	r2, [r3, #1015]	; 0x3f7
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	223e      	movs	r2, #62	; 0x3e
 8005238:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2277      	movs	r2, #119	; 0x77
 8005240:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2241      	movs	r2, #65	; 0x41
 8005248:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2241      	movs	r2, #65	; 0x41
 8005250:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2277      	movs	r2, #119	; 0x77
 8005258:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2277      	movs	r2, #119	; 0x77
 8005260:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2241      	movs	r2, #65	; 0x41
 8005268:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2241      	movs	r2, #65	; 0x41
 8005270:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2277      	movs	r2, #119	; 0x77
 8005278:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	223e      	movs	r2, #62	; 0x3e
 8005280:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2208      	movs	r2, #8
 8005288:	f883 240a 	strb.w	r2, [r3, #1034]	; 0x40a
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2208      	movs	r2, #8
 8005290:	f883 240b 	strb.w	r2, [r3, #1035]	; 0x40b
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2202      	movs	r2, #2
 8005298:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2203      	movs	r2, #3
 80052a0:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2203      	movs	r2, #3
 80052b0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2203      	movs	r2, #3
 80052c0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2270      	movs	r2, #112	; 0x70
 80052d0:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2278      	movs	r2, #120	; 0x78
 80052d8:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	224c      	movs	r2, #76	; 0x4c
 80052e0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2246      	movs	r2, #70	; 0x46
 80052e8:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	224c      	movs	r2, #76	; 0x4c
 80052f0:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2278      	movs	r2, #120	; 0x78
 80052f8:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2270      	movs	r2, #112	; 0x70
 8005300:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	220e      	movs	r2, #14
 8005308:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	229f      	movs	r2, #159	; 0x9f
 8005310:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2291      	movs	r2, #145	; 0x91
 8005318:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	22b1      	movs	r2, #177	; 0xb1
 8005320:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	22fb      	movs	r2, #251	; 0xfb
 8005328:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	224a      	movs	r2, #74	; 0x4a
 8005330:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	223a      	movs	r2, #58	; 0x3a
 8005338:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	227a      	movs	r2, #122	; 0x7a
 8005340:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2240      	movs	r2, #64	; 0x40
 8005348:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2240      	movs	r2, #64	; 0x40
 8005350:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	227a      	movs	r2, #122	; 0x7a
 8005358:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	227a      	movs	r2, #122	; 0x7a
 8005360:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2240      	movs	r2, #64	; 0x40
 8005368:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2238      	movs	r2, #56	; 0x38
 8005370:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	227c      	movs	r2, #124	; 0x7c
 8005378:	f883 242f 	strb.w	r2, [r3, #1071]	; 0x42f
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2254      	movs	r2, #84	; 0x54
 8005380:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2255      	movs	r2, #85	; 0x55
 8005388:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	225d      	movs	r2, #93	; 0x5d
 8005390:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2219      	movs	r2, #25
 8005398:	f883 2433 	strb.w	r2, [r3, #1075]	; 0x433
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2223      	movs	r2, #35	; 0x23
 80053a8:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2275      	movs	r2, #117	; 0x75
 80053b0:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2255      	movs	r2, #85	; 0x55
 80053b8:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2255      	movs	r2, #85	; 0x55
 80053c0:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	227d      	movs	r2, #125	; 0x7d
 80053c8:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	227b      	movs	r2, #123	; 0x7b
 80053d0:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2242      	movs	r2, #66	; 0x42
 80053d8:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2221      	movs	r2, #33	; 0x21
 80053e0:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2275      	movs	r2, #117	; 0x75
 80053e8:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2254      	movs	r2, #84	; 0x54
 80053f0:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2254      	movs	r2, #84	; 0x54
 80053f8:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	227d      	movs	r2, #125	; 0x7d
 8005400:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2279      	movs	r2, #121	; 0x79
 8005408:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2240      	movs	r2, #64	; 0x40
 8005410:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2221      	movs	r2, #33	; 0x21
 8005418:	f883 2446 	strb.w	r2, [r3, #1094]	; 0x446
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2275      	movs	r2, #117	; 0x75
 8005420:	f883 2447 	strb.w	r2, [r3, #1095]	; 0x447
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2255      	movs	r2, #85	; 0x55
 8005428:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2254      	movs	r2, #84	; 0x54
 8005430:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	227c      	movs	r2, #124	; 0x7c
 8005438:	f883 244a 	strb.w	r2, [r3, #1098]	; 0x44a
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2278      	movs	r2, #120	; 0x78
 8005440:	f883 244b 	strb.w	r2, [r3, #1099]	; 0x44b
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2240      	movs	r2, #64	; 0x40
 8005448:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2220      	movs	r2, #32
 8005450:	f883 244e 	strb.w	r2, [r3, #1102]	; 0x44e
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2274      	movs	r2, #116	; 0x74
 8005458:	f883 244f 	strb.w	r2, [r3, #1103]	; 0x44f
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2257      	movs	r2, #87	; 0x57
 8005460:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2257      	movs	r2, #87	; 0x57
 8005468:	f883 2451 	strb.w	r2, [r3, #1105]	; 0x451
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	227c      	movs	r2, #124	; 0x7c
 8005470:	f883 2452 	strb.w	r2, [r3, #1106]	; 0x452
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2278      	movs	r2, #120	; 0x78
 8005478:	f883 2453 	strb.w	r2, [r3, #1107]	; 0x453
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2240      	movs	r2, #64	; 0x40
 8005480:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2218      	movs	r2, #24
 8005488:	f883 2456 	strb.w	r2, [r3, #1110]	; 0x456
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	223c      	movs	r2, #60	; 0x3c
 8005490:	f883 2457 	strb.w	r2, [r3, #1111]	; 0x457
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	22a4      	movs	r2, #164	; 0xa4
 8005498:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	22a4      	movs	r2, #164	; 0xa4
 80054a0:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	22e4      	movs	r2, #228	; 0xe4
 80054a8:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2240      	movs	r2, #64	; 0x40
 80054b0:	f883 245b 	strb.w	r2, [r3, #1115]	; 0x45b
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2202      	movs	r2, #2
 80054b8:	f883 245e 	strb.w	r2, [r3, #1118]	; 0x45e
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	223b      	movs	r2, #59	; 0x3b
 80054c0:	f883 245f 	strb.w	r2, [r3, #1119]	; 0x45f
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	227d      	movs	r2, #125	; 0x7d
 80054c8:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2255      	movs	r2, #85	; 0x55
 80054d0:	f883 2461 	strb.w	r2, [r3, #1121]	; 0x461
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2255      	movs	r2, #85	; 0x55
 80054d8:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	225d      	movs	r2, #93	; 0x5d
 80054e0:	f883 2463 	strb.w	r2, [r3, #1123]	; 0x463
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	221b      	movs	r2, #27
 80054e8:	f883 2464 	strb.w	r2, [r3, #1124]	; 0x464
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 2465 	strb.w	r2, [r3, #1125]	; 0x465
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2239      	movs	r2, #57	; 0x39
 80054f8:	f883 2466 	strb.w	r2, [r3, #1126]	; 0x466
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	227d      	movs	r2, #125	; 0x7d
 8005500:	f883 2467 	strb.w	r2, [r3, #1127]	; 0x467
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2254      	movs	r2, #84	; 0x54
 8005508:	f883 2468 	strb.w	r2, [r3, #1128]	; 0x468
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2254      	movs	r2, #84	; 0x54
 8005510:	f883 2469 	strb.w	r2, [r3, #1129]	; 0x469
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	225d      	movs	r2, #93	; 0x5d
 8005518:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2219      	movs	r2, #25
 8005520:	f883 246b 	strb.w	r2, [r3, #1131]	; 0x46b
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2239      	movs	r2, #57	; 0x39
 8005528:	f883 246e 	strb.w	r2, [r3, #1134]	; 0x46e
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	227d      	movs	r2, #125	; 0x7d
 8005530:	f883 246f 	strb.w	r2, [r3, #1135]	; 0x46f
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2255      	movs	r2, #85	; 0x55
 8005538:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2254      	movs	r2, #84	; 0x54
 8005540:	f883 2471 	strb.w	r2, [r3, #1137]	; 0x471
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	225c      	movs	r2, #92	; 0x5c
 8005548:	f883 2472 	strb.w	r2, [r3, #1138]	; 0x472
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2218      	movs	r2, #24
 8005550:	f883 2473 	strb.w	r2, [r3, #1139]	; 0x473
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2476 	strb.w	r2, [r3, #1142]	; 0x476
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2245      	movs	r2, #69	; 0x45
 8005560:	f883 2477 	strb.w	r2, [r3, #1143]	; 0x477
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	227c      	movs	r2, #124	; 0x7c
 8005568:	f883 2478 	strb.w	r2, [r3, #1144]	; 0x478
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	227c      	movs	r2, #124	; 0x7c
 8005570:	f883 2479 	strb.w	r2, [r3, #1145]	; 0x479
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2241      	movs	r2, #65	; 0x41
 8005578:	f883 247a 	strb.w	r2, [r3, #1146]	; 0x47a
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 247b 	strb.w	r2, [r3, #1147]	; 0x47b
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	f883 247e 	strb.w	r2, [r3, #1150]	; 0x47e
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2203      	movs	r2, #3
 8005590:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2245      	movs	r2, #69	; 0x45
 8005598:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	227d      	movs	r2, #125	; 0x7d
 80055a0:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	227d      	movs	r2, #125	; 0x7d
 80055a8:	f883 2482 	strb.w	r2, [r3, #1154]	; 0x482
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2243      	movs	r2, #67	; 0x43
 80055b0:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2486 	strb.w	r2, [r3, #1158]	; 0x486
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2245      	movs	r2, #69	; 0x45
 80055c8:	f883 2487 	strb.w	r2, [r3, #1159]	; 0x487
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	227d      	movs	r2, #125	; 0x7d
 80055d0:	f883 2488 	strb.w	r2, [r3, #1160]	; 0x488
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	227c      	movs	r2, #124	; 0x7c
 80055d8:	f883 2489 	strb.w	r2, [r3, #1161]	; 0x489
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2240      	movs	r2, #64	; 0x40
 80055e0:	f883 248a 	strb.w	r2, [r3, #1162]	; 0x48a
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2279      	movs	r2, #121	; 0x79
 80055e8:	f883 248e 	strb.w	r2, [r3, #1166]	; 0x48e
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	227d      	movs	r2, #125	; 0x7d
 80055f0:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2216      	movs	r2, #22
 80055f8:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2212      	movs	r2, #18
 8005600:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2216      	movs	r2, #22
 8005608:	f883 2492 	strb.w	r2, [r3, #1170]	; 0x492
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	227d      	movs	r2, #125	; 0x7d
 8005610:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2279      	movs	r2, #121	; 0x79
 8005618:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2270      	movs	r2, #112	; 0x70
 8005620:	f883 2496 	strb.w	r2, [r3, #1174]	; 0x496
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2278      	movs	r2, #120	; 0x78
 8005628:	f883 2497 	strb.w	r2, [r3, #1175]	; 0x497
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	222b      	movs	r2, #43	; 0x2b
 8005630:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	222b      	movs	r2, #43	; 0x2b
 8005638:	f883 2499 	strb.w	r2, [r3, #1177]	; 0x499
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2278      	movs	r2, #120	; 0x78
 8005640:	f883 249a 	strb.w	r2, [r3, #1178]	; 0x49a
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2270      	movs	r2, #112	; 0x70
 8005648:	f883 249b 	strb.w	r2, [r3, #1179]	; 0x49b
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2244      	movs	r2, #68	; 0x44
 8005650:	f883 249e 	strb.w	r2, [r3, #1182]	; 0x49e
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	227c      	movs	r2, #124	; 0x7c
 8005658:	f883 249f 	strb.w	r2, [r3, #1183]	; 0x49f
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	227c      	movs	r2, #124	; 0x7c
 8005660:	f883 24a0 	strb.w	r2, [r3, #1184]	; 0x4a0
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2255      	movs	r2, #85	; 0x55
 8005668:	f883 24a1 	strb.w	r2, [r3, #1185]	; 0x4a1
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2255      	movs	r2, #85	; 0x55
 8005670:	f883 24a2 	strb.w	r2, [r3, #1186]	; 0x4a2
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2245      	movs	r2, #69	; 0x45
 8005678:	f883 24a3 	strb.w	r2, [r3, #1187]	; 0x4a3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2220      	movs	r2, #32
 8005680:	f883 24a6 	strb.w	r2, [r3, #1190]	; 0x4a6
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2274      	movs	r2, #116	; 0x74
 8005688:	f883 24a7 	strb.w	r2, [r3, #1191]	; 0x4a7
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2254      	movs	r2, #84	; 0x54
 8005690:	f883 24a8 	strb.w	r2, [r3, #1192]	; 0x4a8
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2254      	movs	r2, #84	; 0x54
 8005698:	f883 24a9 	strb.w	r2, [r3, #1193]	; 0x4a9
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	227c      	movs	r2, #124	; 0x7c
 80056a0:	f883 24aa 	strb.w	r2, [r3, #1194]	; 0x4aa
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	227c      	movs	r2, #124	; 0x7c
 80056a8:	f883 24ab 	strb.w	r2, [r3, #1195]	; 0x4ab
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2254      	movs	r2, #84	; 0x54
 80056b0:	f883 24ac 	strb.w	r2, [r3, #1196]	; 0x4ac
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2254      	movs	r2, #84	; 0x54
 80056b8:	f883 24ad 	strb.w	r2, [r3, #1197]	; 0x4ad
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	227c      	movs	r2, #124	; 0x7c
 80056c0:	f883 24ae 	strb.w	r2, [r3, #1198]	; 0x4ae
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	227e      	movs	r2, #126	; 0x7e
 80056c8:	f883 24af 	strb.w	r2, [r3, #1199]	; 0x4af
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	220b      	movs	r2, #11
 80056d0:	f883 24b0 	strb.w	r2, [r3, #1200]	; 0x4b0
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2209      	movs	r2, #9
 80056d8:	f883 24b1 	strb.w	r2, [r3, #1201]	; 0x4b1
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	227f      	movs	r2, #127	; 0x7f
 80056e0:	f883 24b2 	strb.w	r2, [r3, #1202]	; 0x4b2
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	227f      	movs	r2, #127	; 0x7f
 80056e8:	f883 24b3 	strb.w	r2, [r3, #1203]	; 0x4b3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2249      	movs	r2, #73	; 0x49
 80056f0:	f883 24b4 	strb.w	r2, [r3, #1204]	; 0x4b4
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2232      	movs	r2, #50	; 0x32
 80056f8:	f883 24b6 	strb.w	r2, [r3, #1206]	; 0x4b6
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	227b      	movs	r2, #123	; 0x7b
 8005700:	f883 24b7 	strb.w	r2, [r3, #1207]	; 0x4b7
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2249      	movs	r2, #73	; 0x49
 8005708:	f883 24b8 	strb.w	r2, [r3, #1208]	; 0x4b8
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2249      	movs	r2, #73	; 0x49
 8005710:	f883 24b9 	strb.w	r2, [r3, #1209]	; 0x4b9
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	227b      	movs	r2, #123	; 0x7b
 8005718:	f883 24ba 	strb.w	r2, [r3, #1210]	; 0x4ba
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2232      	movs	r2, #50	; 0x32
 8005720:	f883 24bb 	strb.w	r2, [r3, #1211]	; 0x4bb
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2232      	movs	r2, #50	; 0x32
 8005728:	f883 24be 	strb.w	r2, [r3, #1214]	; 0x4be
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	227a      	movs	r2, #122	; 0x7a
 8005730:	f883 24bf 	strb.w	r2, [r3, #1215]	; 0x4bf
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2248      	movs	r2, #72	; 0x48
 8005738:	f883 24c0 	strb.w	r2, [r3, #1216]	; 0x4c0
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2248      	movs	r2, #72	; 0x48
 8005740:	f883 24c1 	strb.w	r2, [r3, #1217]	; 0x4c1
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	227a      	movs	r2, #122	; 0x7a
 8005748:	f883 24c2 	strb.w	r2, [r3, #1218]	; 0x4c2
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2232      	movs	r2, #50	; 0x32
 8005750:	f883 24c3 	strb.w	r2, [r3, #1219]	; 0x4c3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2232      	movs	r2, #50	; 0x32
 8005758:	f883 24c6 	strb.w	r2, [r3, #1222]	; 0x4c6
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	227a      	movs	r2, #122	; 0x7a
 8005760:	f883 24c7 	strb.w	r2, [r3, #1223]	; 0x4c7
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	224a      	movs	r2, #74	; 0x4a
 8005768:	f883 24c8 	strb.w	r2, [r3, #1224]	; 0x4c8
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2248      	movs	r2, #72	; 0x48
 8005770:	f883 24c9 	strb.w	r2, [r3, #1225]	; 0x4c9
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2278      	movs	r2, #120	; 0x78
 8005778:	f883 24ca 	strb.w	r2, [r3, #1226]	; 0x4ca
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2230      	movs	r2, #48	; 0x30
 8005780:	f883 24cb 	strb.w	r2, [r3, #1227]	; 0x4cb
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	223a      	movs	r2, #58	; 0x3a
 8005788:	f883 24ce 	strb.w	r2, [r3, #1230]	; 0x4ce
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	227b      	movs	r2, #123	; 0x7b
 8005790:	f883 24cf 	strb.w	r2, [r3, #1231]	; 0x4cf
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2241      	movs	r2, #65	; 0x41
 8005798:	f883 24d0 	strb.w	r2, [r3, #1232]	; 0x4d0
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2241      	movs	r2, #65	; 0x41
 80057a0:	f883 24d1 	strb.w	r2, [r3, #1233]	; 0x4d1
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	227b      	movs	r2, #123	; 0x7b
 80057a8:	f883 24d2 	strb.w	r2, [r3, #1234]	; 0x4d2
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	227a      	movs	r2, #122	; 0x7a
 80057b0:	f883 24d3 	strb.w	r2, [r3, #1235]	; 0x4d3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2240      	movs	r2, #64	; 0x40
 80057b8:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	223a      	movs	r2, #58	; 0x3a
 80057c0:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	227a      	movs	r2, #122	; 0x7a
 80057c8:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2242      	movs	r2, #66	; 0x42
 80057d0:	f883 24d8 	strb.w	r2, [r3, #1240]	; 0x4d8
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2240      	movs	r2, #64	; 0x40
 80057d8:	f883 24d9 	strb.w	r2, [r3, #1241]	; 0x4d9
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2278      	movs	r2, #120	; 0x78
 80057e0:	f883 24da 	strb.w	r2, [r3, #1242]	; 0x4da
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2278      	movs	r2, #120	; 0x78
 80057e8:	f883 24db 	strb.w	r2, [r3, #1243]	; 0x4db
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2240      	movs	r2, #64	; 0x40
 80057f0:	f883 24dc 	strb.w	r2, [r3, #1244]	; 0x4dc
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	229a      	movs	r2, #154	; 0x9a
 80057f8:	f883 24de 	strb.w	r2, [r3, #1246]	; 0x4de
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	22ba      	movs	r2, #186	; 0xba
 8005800:	f883 24df 	strb.w	r2, [r3, #1247]	; 0x4df
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	22a0      	movs	r2, #160	; 0xa0
 8005808:	f883 24e0 	strb.w	r2, [r3, #1248]	; 0x4e0
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	22a0      	movs	r2, #160	; 0xa0
 8005810:	f883 24e1 	strb.w	r2, [r3, #1249]	; 0x4e1
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	22fa      	movs	r2, #250	; 0xfa
 8005818:	f883 24e2 	strb.w	r2, [r3, #1250]	; 0x4e2
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	227a      	movs	r2, #122	; 0x7a
 8005820:	f883 24e3 	strb.w	r2, [r3, #1251]	; 0x4e3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 24e6 	strb.w	r2, [r3, #1254]	; 0x4e6
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2219      	movs	r2, #25
 8005830:	f883 24e7 	strb.w	r2, [r3, #1255]	; 0x4e7
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	223c      	movs	r2, #60	; 0x3c
 8005838:	f883 24e8 	strb.w	r2, [r3, #1256]	; 0x4e8
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2266      	movs	r2, #102	; 0x66
 8005840:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2266      	movs	r2, #102	; 0x66
 8005848:	f883 24ea 	strb.w	r2, [r3, #1258]	; 0x4ea
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	223c      	movs	r2, #60	; 0x3c
 8005850:	f883 24eb 	strb.w	r2, [r3, #1259]	; 0x4eb
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2219      	movs	r2, #25
 8005858:	f883 24ec 	strb.w	r2, [r3, #1260]	; 0x4ec
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 24ed 	strb.w	r2, [r3, #1261]	; 0x4ed
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	223d      	movs	r2, #61	; 0x3d
 8005868:	f883 24ee 	strb.w	r2, [r3, #1262]	; 0x4ee
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	227d      	movs	r2, #125	; 0x7d
 8005870:	f883 24ef 	strb.w	r2, [r3, #1263]	; 0x4ef
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2240      	movs	r2, #64	; 0x40
 8005878:	f883 24f0 	strb.w	r2, [r3, #1264]	; 0x4f0
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2240      	movs	r2, #64	; 0x40
 8005880:	f883 24f1 	strb.w	r2, [r3, #1265]	; 0x4f1
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	227d      	movs	r2, #125	; 0x7d
 8005888:	f883 24f2 	strb.w	r2, [r3, #1266]	; 0x4f2
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	223d      	movs	r2, #61	; 0x3d
 8005890:	f883 24f3 	strb.w	r2, [r3, #1267]	; 0x4f3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2218      	movs	r2, #24
 8005898:	f883 24f6 	strb.w	r2, [r3, #1270]	; 0x4f6
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	223c      	movs	r2, #60	; 0x3c
 80058a0:	f883 24f7 	strb.w	r2, [r3, #1271]	; 0x4f7
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2224      	movs	r2, #36	; 0x24
 80058a8:	f883 24f8 	strb.w	r2, [r3, #1272]	; 0x4f8
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	22e7      	movs	r2, #231	; 0xe7
 80058b0:	f883 24f9 	strb.w	r2, [r3, #1273]	; 0x4f9
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	22e7      	movs	r2, #231	; 0xe7
 80058b8:	f883 24fa 	strb.w	r2, [r3, #1274]	; 0x4fa
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2224      	movs	r2, #36	; 0x24
 80058c0:	f883 24fb 	strb.w	r2, [r3, #1275]	; 0x4fb
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2224      	movs	r2, #36	; 0x24
 80058c8:	f883 24fc 	strb.w	r2, [r3, #1276]	; 0x4fc
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2268      	movs	r2, #104	; 0x68
 80058d0:	f883 24fe 	strb.w	r2, [r3, #1278]	; 0x4fe
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	227e      	movs	r2, #126	; 0x7e
 80058d8:	f883 24ff 	strb.w	r2, [r3, #1279]	; 0x4ff
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	227f      	movs	r2, #127	; 0x7f
 80058e0:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2249      	movs	r2, #73	; 0x49
 80058e8:	f883 2501 	strb.w	r2, [r3, #1281]	; 0x501
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2243      	movs	r2, #67	; 0x43
 80058f0:	f883 2502 	strb.w	r2, [r3, #1282]	; 0x502
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2266      	movs	r2, #102	; 0x66
 80058f8:	f883 2503 	strb.w	r2, [r3, #1283]	; 0x503
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2220      	movs	r2, #32
 8005900:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	222b      	movs	r2, #43	; 0x2b
 8005908:	f883 2506 	strb.w	r2, [r3, #1286]	; 0x506
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	222f      	movs	r2, #47	; 0x2f
 8005910:	f883 2507 	strb.w	r2, [r3, #1287]	; 0x507
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	22fc      	movs	r2, #252	; 0xfc
 8005918:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	22fc      	movs	r2, #252	; 0xfc
 8005920:	f883 2509 	strb.w	r2, [r3, #1289]	; 0x509
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	222f      	movs	r2, #47	; 0x2f
 8005928:	f883 250a 	strb.w	r2, [r3, #1290]	; 0x50a
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	222b      	movs	r2, #43	; 0x2b
 8005930:	f883 250b 	strb.w	r2, [r3, #1291]	; 0x50b
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	22ff      	movs	r2, #255	; 0xff
 8005938:	f883 250e 	strb.w	r2, [r3, #1294]	; 0x50e
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	22ff      	movs	r2, #255	; 0xff
 8005940:	f883 250f 	strb.w	r2, [r3, #1295]	; 0x50f
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2209      	movs	r2, #9
 8005948:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2209      	movs	r2, #9
 8005950:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	222f      	movs	r2, #47	; 0x2f
 8005958:	f883 2512 	strb.w	r2, [r3, #1298]	; 0x512
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	22f6      	movs	r2, #246	; 0xf6
 8005960:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	22f8      	movs	r2, #248	; 0xf8
 8005968:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	22a0      	movs	r2, #160	; 0xa0
 8005970:	f883 2515 	strb.w	r2, [r3, #1301]	; 0x515
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2240      	movs	r2, #64	; 0x40
 8005978:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	22c0      	movs	r2, #192	; 0xc0
 8005980:	f883 2517 	strb.w	r2, [r3, #1303]	; 0x517
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2288      	movs	r2, #136	; 0x88
 8005988:	f883 2518 	strb.w	r2, [r3, #1304]	; 0x518
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	22fe      	movs	r2, #254	; 0xfe
 8005990:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	227f      	movs	r2, #127	; 0x7f
 8005998:	f883 251a 	strb.w	r2, [r3, #1306]	; 0x51a
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2209      	movs	r2, #9
 80059a0:	f883 251b 	strb.w	r2, [r3, #1307]	; 0x51b
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2203      	movs	r2, #3
 80059a8:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 251d 	strb.w	r2, [r3, #1309]	; 0x51d
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2220      	movs	r2, #32
 80059b8:	f883 251e 	strb.w	r2, [r3, #1310]	; 0x51e
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2274      	movs	r2, #116	; 0x74
 80059c0:	f883 251f 	strb.w	r2, [r3, #1311]	; 0x51f
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2254      	movs	r2, #84	; 0x54
 80059c8:	f883 2520 	strb.w	r2, [r3, #1312]	; 0x520
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2255      	movs	r2, #85	; 0x55
 80059d0:	f883 2521 	strb.w	r2, [r3, #1313]	; 0x521
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	227d      	movs	r2, #125	; 0x7d
 80059d8:	f883 2522 	strb.w	r2, [r3, #1314]	; 0x522
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2279      	movs	r2, #121	; 0x79
 80059e0:	f883 2523 	strb.w	r2, [r3, #1315]	; 0x523
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2240      	movs	r2, #64	; 0x40
 80059e8:	f883 2524 	strb.w	r2, [r3, #1316]	; 0x524
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2244      	movs	r2, #68	; 0x44
 80059f0:	f883 2527 	strb.w	r2, [r3, #1319]	; 0x527
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	227d      	movs	r2, #125	; 0x7d
 80059f8:	f883 2528 	strb.w	r2, [r3, #1320]	; 0x528
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	227d      	movs	r2, #125	; 0x7d
 8005a00:	f883 2529 	strb.w	r2, [r3, #1321]	; 0x529
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2241      	movs	r2, #65	; 0x41
 8005a08:	f883 252a 	strb.w	r2, [r3, #1322]	; 0x52a
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2230      	movs	r2, #48	; 0x30
 8005a10:	f883 252e 	strb.w	r2, [r3, #1326]	; 0x52e
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2278      	movs	r2, #120	; 0x78
 8005a18:	f883 252f 	strb.w	r2, [r3, #1327]	; 0x52f
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2248      	movs	r2, #72	; 0x48
 8005a20:	f883 2530 	strb.w	r2, [r3, #1328]	; 0x530
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	224a      	movs	r2, #74	; 0x4a
 8005a28:	f883 2531 	strb.w	r2, [r3, #1329]	; 0x531
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	227a      	movs	r2, #122	; 0x7a
 8005a30:	f883 2532 	strb.w	r2, [r3, #1330]	; 0x532
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2232      	movs	r2, #50	; 0x32
 8005a38:	f883 2533 	strb.w	r2, [r3, #1331]	; 0x533
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2238      	movs	r2, #56	; 0x38
 8005a40:	f883 2536 	strb.w	r2, [r3, #1334]	; 0x536
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2278      	movs	r2, #120	; 0x78
 8005a48:	f883 2537 	strb.w	r2, [r3, #1335]	; 0x537
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2240      	movs	r2, #64	; 0x40
 8005a50:	f883 2538 	strb.w	r2, [r3, #1336]	; 0x538
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2242      	movs	r2, #66	; 0x42
 8005a58:	f883 2539 	strb.w	r2, [r3, #1337]	; 0x539
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	227a      	movs	r2, #122	; 0x7a
 8005a60:	f883 253a 	strb.w	r2, [r3, #1338]	; 0x53a
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	227a      	movs	r2, #122	; 0x7a
 8005a68:	f883 253b 	strb.w	r2, [r3, #1339]	; 0x53b
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2240      	movs	r2, #64	; 0x40
 8005a70:	f883 253c 	strb.w	r2, [r3, #1340]	; 0x53c
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	227a      	movs	r2, #122	; 0x7a
 8005a78:	f883 253e 	strb.w	r2, [r3, #1342]	; 0x53e
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	227a      	movs	r2, #122	; 0x7a
 8005a80:	f883 253f 	strb.w	r2, [r3, #1343]	; 0x53f
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	220a      	movs	r2, #10
 8005a88:	f883 2540 	strb.w	r2, [r3, #1344]	; 0x540
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	220a      	movs	r2, #10
 8005a90:	f883 2541 	strb.w	r2, [r3, #1345]	; 0x541
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	227a      	movs	r2, #122	; 0x7a
 8005a98:	f883 2542 	strb.w	r2, [r3, #1346]	; 0x542
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2270      	movs	r2, #112	; 0x70
 8005aa0:	f883 2543 	strb.w	r2, [r3, #1347]	; 0x543
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	227d      	movs	r2, #125	; 0x7d
 8005aa8:	f883 2546 	strb.w	r2, [r3, #1350]	; 0x546
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	227d      	movs	r2, #125	; 0x7d
 8005ab0:	f883 2547 	strb.w	r2, [r3, #1351]	; 0x547
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2219      	movs	r2, #25
 8005ab8:	f883 2548 	strb.w	r2, [r3, #1352]	; 0x548
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2231      	movs	r2, #49	; 0x31
 8005ac0:	f883 2549 	strb.w	r2, [r3, #1353]	; 0x549
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	227d      	movs	r2, #125	; 0x7d
 8005ac8:	f883 254a 	strb.w	r2, [r3, #1354]	; 0x54a
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	227d      	movs	r2, #125	; 0x7d
 8005ad0:	f883 254b 	strb.w	r2, [r3, #1355]	; 0x54b
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2226      	movs	r2, #38	; 0x26
 8005ad8:	f883 254f 	strb.w	r2, [r3, #1359]	; 0x54f
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	222f      	movs	r2, #47	; 0x2f
 8005ae0:	f883 2550 	strb.w	r2, [r3, #1360]	; 0x550
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2229      	movs	r2, #41	; 0x29
 8005ae8:	f883 2551 	strb.w	r2, [r3, #1361]	; 0x551
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	222f      	movs	r2, #47	; 0x2f
 8005af0:	f883 2552 	strb.w	r2, [r3, #1362]	; 0x552
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	222f      	movs	r2, #47	; 0x2f
 8005af8:	f883 2553 	strb.w	r2, [r3, #1363]	; 0x553
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2228      	movs	r2, #40	; 0x28
 8005b00:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2226      	movs	r2, #38	; 0x26
 8005b08:	f883 2557 	strb.w	r2, [r3, #1367]	; 0x557
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	222f      	movs	r2, #47	; 0x2f
 8005b10:	f883 2558 	strb.w	r2, [r3, #1368]	; 0x558
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2229      	movs	r2, #41	; 0x29
 8005b18:	f883 2559 	strb.w	r2, [r3, #1369]	; 0x559
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	222f      	movs	r2, #47	; 0x2f
 8005b20:	f883 255a 	strb.w	r2, [r3, #1370]	; 0x55a
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2226      	movs	r2, #38	; 0x26
 8005b28:	f883 255b 	strb.w	r2, [r3, #1371]	; 0x55b
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2230      	movs	r2, #48	; 0x30
 8005b30:	f883 255e 	strb.w	r2, [r3, #1374]	; 0x55e
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2278      	movs	r2, #120	; 0x78
 8005b38:	f883 255f 	strb.w	r2, [r3, #1375]	; 0x55f
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	224d      	movs	r2, #77	; 0x4d
 8005b40:	f883 2560 	strb.w	r2, [r3, #1376]	; 0x560
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2245      	movs	r2, #69	; 0x45
 8005b48:	f883 2561 	strb.w	r2, [r3, #1377]	; 0x561
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2260      	movs	r2, #96	; 0x60
 8005b50:	f883 2562 	strb.w	r2, [r3, #1378]	; 0x562
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2220      	movs	r2, #32
 8005b58:	f883 2563 	strb.w	r2, [r3, #1379]	; 0x563
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2238      	movs	r2, #56	; 0x38
 8005b60:	f883 2566 	strb.w	r2, [r3, #1382]	; 0x566
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2238      	movs	r2, #56	; 0x38
 8005b68:	f883 2567 	strb.w	r2, [r3, #1383]	; 0x567
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2208      	movs	r2, #8
 8005b70:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2208      	movs	r2, #8
 8005b78:	f883 2569 	strb.w	r2, [r3, #1385]	; 0x569
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2208      	movs	r2, #8
 8005b80:	f883 256a 	strb.w	r2, [r3, #1386]	; 0x56a
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2208      	movs	r2, #8
 8005b88:	f883 256b 	strb.w	r2, [r3, #1387]	; 0x56b
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2208      	movs	r2, #8
 8005b90:	f883 256e 	strb.w	r2, [r3, #1390]	; 0x56e
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2208      	movs	r2, #8
 8005b98:	f883 256f 	strb.w	r2, [r3, #1391]	; 0x56f
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2208      	movs	r2, #8
 8005ba0:	f883 2570 	strb.w	r2, [r3, #1392]	; 0x570
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2208      	movs	r2, #8
 8005ba8:	f883 2571 	strb.w	r2, [r3, #1393]	; 0x571
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2238      	movs	r2, #56	; 0x38
 8005bb0:	f883 2572 	strb.w	r2, [r3, #1394]	; 0x572
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2238      	movs	r2, #56	; 0x38
 8005bb8:	f883 2573 	strb.w	r2, [r3, #1395]	; 0x573
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	224f      	movs	r2, #79	; 0x4f
 8005bc0:	f883 2576 	strb.w	r2, [r3, #1398]	; 0x576
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	226f      	movs	r2, #111	; 0x6f
 8005bc8:	f883 2577 	strb.w	r2, [r3, #1399]	; 0x577
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2230      	movs	r2, #48	; 0x30
 8005bd0:	f883 2578 	strb.w	r2, [r3, #1400]	; 0x578
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2218      	movs	r2, #24
 8005bd8:	f883 2579 	strb.w	r2, [r3, #1401]	; 0x579
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	22cc      	movs	r2, #204	; 0xcc
 8005be0:	f883 257a 	strb.w	r2, [r3, #1402]	; 0x57a
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	22ee      	movs	r2, #238	; 0xee
 8005be8:	f883 257b 	strb.w	r2, [r3, #1403]	; 0x57b
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	22bb      	movs	r2, #187	; 0xbb
 8005bf0:	f883 257c 	strb.w	r2, [r3, #1404]	; 0x57c
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2291      	movs	r2, #145	; 0x91
 8005bf8:	f883 257d 	strb.w	r2, [r3, #1405]	; 0x57d
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	224f      	movs	r2, #79	; 0x4f
 8005c00:	f883 257e 	strb.w	r2, [r3, #1406]	; 0x57e
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	226f      	movs	r2, #111	; 0x6f
 8005c08:	f883 257f 	strb.w	r2, [r3, #1407]	; 0x57f
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2230      	movs	r2, #48	; 0x30
 8005c10:	f883 2580 	strb.w	r2, [r3, #1408]	; 0x580
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2218      	movs	r2, #24
 8005c18:	f883 2581 	strb.w	r2, [r3, #1409]	; 0x581
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	226c      	movs	r2, #108	; 0x6c
 8005c20:	f883 2582 	strb.w	r2, [r3, #1410]	; 0x582
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2276      	movs	r2, #118	; 0x76
 8005c28:	f883 2583 	strb.w	r2, [r3, #1411]	; 0x583
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	22fb      	movs	r2, #251	; 0xfb
 8005c30:	f883 2584 	strb.w	r2, [r3, #1412]	; 0x584
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	22f9      	movs	r2, #249	; 0xf9
 8005c38:	f883 2585 	strb.w	r2, [r3, #1413]	; 0x585
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	227b      	movs	r2, #123	; 0x7b
 8005c40:	f883 2589 	strb.w	r2, [r3, #1417]	; 0x589
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	227b      	movs	r2, #123	; 0x7b
 8005c48:	f883 258a 	strb.w	r2, [r3, #1418]	; 0x58a
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2208      	movs	r2, #8
 8005c50:	f883 258e 	strb.w	r2, [r3, #1422]	; 0x58e
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	221c      	movs	r2, #28
 8005c58:	f883 258f 	strb.w	r2, [r3, #1423]	; 0x58f
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2236      	movs	r2, #54	; 0x36
 8005c60:	f883 2590 	strb.w	r2, [r3, #1424]	; 0x590
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2222      	movs	r2, #34	; 0x22
 8005c68:	f883 2591 	strb.w	r2, [r3, #1425]	; 0x591
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2208      	movs	r2, #8
 8005c70:	f883 2592 	strb.w	r2, [r3, #1426]	; 0x592
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	221c      	movs	r2, #28
 8005c78:	f883 2593 	strb.w	r2, [r3, #1427]	; 0x593
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2236      	movs	r2, #54	; 0x36
 8005c80:	f883 2594 	strb.w	r2, [r3, #1428]	; 0x594
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2222      	movs	r2, #34	; 0x22
 8005c88:	f883 2595 	strb.w	r2, [r3, #1429]	; 0x595
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2222      	movs	r2, #34	; 0x22
 8005c90:	f883 2596 	strb.w	r2, [r3, #1430]	; 0x596
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2236      	movs	r2, #54	; 0x36
 8005c98:	f883 2597 	strb.w	r2, [r3, #1431]	; 0x597
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	221c      	movs	r2, #28
 8005ca0:	f883 2598 	strb.w	r2, [r3, #1432]	; 0x598
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2208      	movs	r2, #8
 8005ca8:	f883 2599 	strb.w	r2, [r3, #1433]	; 0x599
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2222      	movs	r2, #34	; 0x22
 8005cb0:	f883 259a 	strb.w	r2, [r3, #1434]	; 0x59a
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2236      	movs	r2, #54	; 0x36
 8005cb8:	f883 259b 	strb.w	r2, [r3, #1435]	; 0x59b
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	221c      	movs	r2, #28
 8005cc0:	f883 259c 	strb.w	r2, [r3, #1436]	; 0x59c
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2208      	movs	r2, #8
 8005cc8:	f883 259d 	strb.w	r2, [r3, #1437]	; 0x59d
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	22aa      	movs	r2, #170	; 0xaa
 8005cd0:	f883 259e 	strb.w	r2, [r3, #1438]	; 0x59e
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2255      	movs	r2, #85	; 0x55
 8005cd8:	f883 25a0 	strb.w	r2, [r3, #1440]	; 0x5a0
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	22aa      	movs	r2, #170	; 0xaa
 8005ce0:	f883 25a2 	strb.w	r2, [r3, #1442]	; 0x5a2
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2255      	movs	r2, #85	; 0x55
 8005ce8:	f883 25a4 	strb.w	r2, [r3, #1444]	; 0x5a4
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	22aa      	movs	r2, #170	; 0xaa
 8005cf0:	f883 25a6 	strb.w	r2, [r3, #1446]	; 0x5a6
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2255      	movs	r2, #85	; 0x55
 8005cf8:	f883 25a7 	strb.w	r2, [r3, #1447]	; 0x5a7
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	22aa      	movs	r2, #170	; 0xaa
 8005d00:	f883 25a8 	strb.w	r2, [r3, #1448]	; 0x5a8
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2255      	movs	r2, #85	; 0x55
 8005d08:	f883 25a9 	strb.w	r2, [r3, #1449]	; 0x5a9
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	22aa      	movs	r2, #170	; 0xaa
 8005d10:	f883 25aa 	strb.w	r2, [r3, #1450]	; 0x5aa
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2255      	movs	r2, #85	; 0x55
 8005d18:	f883 25ab 	strb.w	r2, [r3, #1451]	; 0x5ab
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	22aa      	movs	r2, #170	; 0xaa
 8005d20:	f883 25ac 	strb.w	r2, [r3, #1452]	; 0x5ac
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2255      	movs	r2, #85	; 0x55
 8005d28:	f883 25ad 	strb.w	r2, [r3, #1453]	; 0x5ad
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	22dd      	movs	r2, #221	; 0xdd
 8005d30:	f883 25ae 	strb.w	r2, [r3, #1454]	; 0x5ae
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	22ff      	movs	r2, #255	; 0xff
 8005d38:	f883 25af 	strb.w	r2, [r3, #1455]	; 0x5af
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	22aa      	movs	r2, #170	; 0xaa
 8005d40:	f883 25b0 	strb.w	r2, [r3, #1456]	; 0x5b0
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2277      	movs	r2, #119	; 0x77
 8005d48:	f883 25b1 	strb.w	r2, [r3, #1457]	; 0x5b1
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	22dd      	movs	r2, #221	; 0xdd
 8005d50:	f883 25b2 	strb.w	r2, [r3, #1458]	; 0x5b2
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	22aa      	movs	r2, #170	; 0xaa
 8005d58:	f883 25b3 	strb.w	r2, [r3, #1459]	; 0x5b3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	22ff      	movs	r2, #255	; 0xff
 8005d60:	f883 25b4 	strb.w	r2, [r3, #1460]	; 0x5b4
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2277      	movs	r2, #119	; 0x77
 8005d68:	f883 25b5 	strb.w	r2, [r3, #1461]	; 0x5b5
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	22ff      	movs	r2, #255	; 0xff
 8005d70:	f883 25b9 	strb.w	r2, [r3, #1465]	; 0x5b9
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	22ff      	movs	r2, #255	; 0xff
 8005d78:	f883 25ba 	strb.w	r2, [r3, #1466]	; 0x5ba
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2210      	movs	r2, #16
 8005d80:	f883 25be 	strb.w	r2, [r3, #1470]	; 0x5be
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2210      	movs	r2, #16
 8005d88:	f883 25bf 	strb.w	r2, [r3, #1471]	; 0x5bf
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2210      	movs	r2, #16
 8005d90:	f883 25c0 	strb.w	r2, [r3, #1472]	; 0x5c0
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	22ff      	movs	r2, #255	; 0xff
 8005d98:	f883 25c1 	strb.w	r2, [r3, #1473]	; 0x5c1
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	22ff      	movs	r2, #255	; 0xff
 8005da0:	f883 25c2 	strb.w	r2, [r3, #1474]	; 0x5c2
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2214      	movs	r2, #20
 8005da8:	f883 25c6 	strb.w	r2, [r3, #1478]	; 0x5c6
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2214      	movs	r2, #20
 8005db0:	f883 25c7 	strb.w	r2, [r3, #1479]	; 0x5c7
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2214      	movs	r2, #20
 8005db8:	f883 25c8 	strb.w	r2, [r3, #1480]	; 0x5c8
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	22ff      	movs	r2, #255	; 0xff
 8005dc0:	f883 25c9 	strb.w	r2, [r3, #1481]	; 0x5c9
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	22ff      	movs	r2, #255	; 0xff
 8005dc8:	f883 25ca 	strb.w	r2, [r3, #1482]	; 0x5ca
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2210      	movs	r2, #16
 8005dd0:	f883 25ce 	strb.w	r2, [r3, #1486]	; 0x5ce
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2210      	movs	r2, #16
 8005dd8:	f883 25cf 	strb.w	r2, [r3, #1487]	; 0x5cf
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	22ff      	movs	r2, #255	; 0xff
 8005de0:	f883 25d0 	strb.w	r2, [r3, #1488]	; 0x5d0
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	22ff      	movs	r2, #255	; 0xff
 8005de8:	f883 25d1 	strb.w	r2, [r3, #1489]	; 0x5d1
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	22ff      	movs	r2, #255	; 0xff
 8005df0:	f883 25d3 	strb.w	r2, [r3, #1491]	; 0x5d3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	22ff      	movs	r2, #255	; 0xff
 8005df8:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2210      	movs	r2, #16
 8005e00:	f883 25d6 	strb.w	r2, [r3, #1494]	; 0x5d6
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2210      	movs	r2, #16
 8005e08:	f883 25d7 	strb.w	r2, [r3, #1495]	; 0x5d7
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	22f0      	movs	r2, #240	; 0xf0
 8005e10:	f883 25d8 	strb.w	r2, [r3, #1496]	; 0x5d8
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	22f0      	movs	r2, #240	; 0xf0
 8005e18:	f883 25d9 	strb.w	r2, [r3, #1497]	; 0x5d9
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2210      	movs	r2, #16
 8005e20:	f883 25da 	strb.w	r2, [r3, #1498]	; 0x5da
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	22f0      	movs	r2, #240	; 0xf0
 8005e28:	f883 25db 	strb.w	r2, [r3, #1499]	; 0x5db
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	22f0      	movs	r2, #240	; 0xf0
 8005e30:	f883 25dc 	strb.w	r2, [r3, #1500]	; 0x5dc
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2214      	movs	r2, #20
 8005e38:	f883 25de 	strb.w	r2, [r3, #1502]	; 0x5de
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2214      	movs	r2, #20
 8005e40:	f883 25df 	strb.w	r2, [r3, #1503]	; 0x5df
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2214      	movs	r2, #20
 8005e48:	f883 25e0 	strb.w	r2, [r3, #1504]	; 0x5e0
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	22fc      	movs	r2, #252	; 0xfc
 8005e50:	f883 25e1 	strb.w	r2, [r3, #1505]	; 0x5e1
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	22fc      	movs	r2, #252	; 0xfc
 8005e58:	f883 25e2 	strb.w	r2, [r3, #1506]	; 0x5e2
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2214      	movs	r2, #20
 8005e60:	f883 25e6 	strb.w	r2, [r3, #1510]	; 0x5e6
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2214      	movs	r2, #20
 8005e68:	f883 25e7 	strb.w	r2, [r3, #1511]	; 0x5e7
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	22f7      	movs	r2, #247	; 0xf7
 8005e70:	f883 25e8 	strb.w	r2, [r3, #1512]	; 0x5e8
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	22f7      	movs	r2, #247	; 0xf7
 8005e78:	f883 25e9 	strb.w	r2, [r3, #1513]	; 0x5e9
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	22ff      	movs	r2, #255	; 0xff
 8005e80:	f883 25eb 	strb.w	r2, [r3, #1515]	; 0x5eb
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	22ff      	movs	r2, #255	; 0xff
 8005e88:	f883 25ec 	strb.w	r2, [r3, #1516]	; 0x5ec
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	22ff      	movs	r2, #255	; 0xff
 8005e90:	f883 25f0 	strb.w	r2, [r3, #1520]	; 0x5f0
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	22ff      	movs	r2, #255	; 0xff
 8005e98:	f883 25f1 	strb.w	r2, [r3, #1521]	; 0x5f1
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	22ff      	movs	r2, #255	; 0xff
 8005ea0:	f883 25f3 	strb.w	r2, [r3, #1523]	; 0x5f3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	22ff      	movs	r2, #255	; 0xff
 8005ea8:	f883 25f4 	strb.w	r2, [r3, #1524]	; 0x5f4
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2214      	movs	r2, #20
 8005eb0:	f883 25f6 	strb.w	r2, [r3, #1526]	; 0x5f6
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2214      	movs	r2, #20
 8005eb8:	f883 25f7 	strb.w	r2, [r3, #1527]	; 0x5f7
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	22f4      	movs	r2, #244	; 0xf4
 8005ec0:	f883 25f8 	strb.w	r2, [r3, #1528]	; 0x5f8
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	22f4      	movs	r2, #244	; 0xf4
 8005ec8:	f883 25f9 	strb.w	r2, [r3, #1529]	; 0x5f9
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2204      	movs	r2, #4
 8005ed0:	f883 25fa 	strb.w	r2, [r3, #1530]	; 0x5fa
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	22fc      	movs	r2, #252	; 0xfc
 8005ed8:	f883 25fb 	strb.w	r2, [r3, #1531]	; 0x5fb
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	22fc      	movs	r2, #252	; 0xfc
 8005ee0:	f883 25fc 	strb.w	r2, [r3, #1532]	; 0x5fc
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2214      	movs	r2, #20
 8005ee8:	f883 25fe 	strb.w	r2, [r3, #1534]	; 0x5fe
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2214      	movs	r2, #20
 8005ef0:	f883 25ff 	strb.w	r2, [r3, #1535]	; 0x5ff
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2217      	movs	r2, #23
 8005ef8:	f883 2600 	strb.w	r2, [r3, #1536]	; 0x600
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2217      	movs	r2, #23
 8005f00:	f883 2601 	strb.w	r2, [r3, #1537]	; 0x601
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2210      	movs	r2, #16
 8005f08:	f883 2602 	strb.w	r2, [r3, #1538]	; 0x602
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	221f      	movs	r2, #31
 8005f10:	f883 2603 	strb.w	r2, [r3, #1539]	; 0x603
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	221f      	movs	r2, #31
 8005f18:	f883 2604 	strb.w	r2, [r3, #1540]	; 0x604
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2210      	movs	r2, #16
 8005f20:	f883 2606 	strb.w	r2, [r3, #1542]	; 0x606
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2210      	movs	r2, #16
 8005f28:	f883 2607 	strb.w	r2, [r3, #1543]	; 0x607
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	221f      	movs	r2, #31
 8005f30:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	221f      	movs	r2, #31
 8005f38:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2210      	movs	r2, #16
 8005f40:	f883 260a 	strb.w	r2, [r3, #1546]	; 0x60a
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	221f      	movs	r2, #31
 8005f48:	f883 260b 	strb.w	r2, [r3, #1547]	; 0x60b
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	221f      	movs	r2, #31
 8005f50:	f883 260c 	strb.w	r2, [r3, #1548]	; 0x60c
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2214      	movs	r2, #20
 8005f58:	f883 260e 	strb.w	r2, [r3, #1550]	; 0x60e
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2214      	movs	r2, #20
 8005f60:	f883 260f 	strb.w	r2, [r3, #1551]	; 0x60f
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2214      	movs	r2, #20
 8005f68:	f883 2610 	strb.w	r2, [r3, #1552]	; 0x610
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	221f      	movs	r2, #31
 8005f70:	f883 2611 	strb.w	r2, [r3, #1553]	; 0x611
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	221f      	movs	r2, #31
 8005f78:	f883 2612 	strb.w	r2, [r3, #1554]	; 0x612
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2210      	movs	r2, #16
 8005f80:	f883 2616 	strb.w	r2, [r3, #1558]	; 0x616
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2210      	movs	r2, #16
 8005f88:	f883 2617 	strb.w	r2, [r3, #1559]	; 0x617
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2210      	movs	r2, #16
 8005f90:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	22f0      	movs	r2, #240	; 0xf0
 8005f98:	f883 2619 	strb.w	r2, [r3, #1561]	; 0x619
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	22f0      	movs	r2, #240	; 0xf0
 8005fa0:	f883 261a 	strb.w	r2, [r3, #1562]	; 0x61a
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	221f      	movs	r2, #31
 8005fa8:	f883 2621 	strb.w	r2, [r3, #1569]	; 0x621
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	221f      	movs	r2, #31
 8005fb0:	f883 2622 	strb.w	r2, [r3, #1570]	; 0x622
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2210      	movs	r2, #16
 8005fb8:	f883 2623 	strb.w	r2, [r3, #1571]	; 0x623
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2210      	movs	r2, #16
 8005fc0:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2210      	movs	r2, #16
 8005fc8:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2210      	movs	r2, #16
 8005fd0:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2210      	movs	r2, #16
 8005fd8:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2210      	movs	r2, #16
 8005fe0:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	221f      	movs	r2, #31
 8005fe8:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	221f      	movs	r2, #31
 8005ff0:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2210      	movs	r2, #16
 8005ff8:	f883 262b 	strb.w	r2, [r3, #1579]	; 0x62b
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2210      	movs	r2, #16
 8006000:	f883 262c 	strb.w	r2, [r3, #1580]	; 0x62c
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2210      	movs	r2, #16
 8006008:	f883 262d 	strb.w	r2, [r3, #1581]	; 0x62d
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2210      	movs	r2, #16
 8006010:	f883 262e 	strb.w	r2, [r3, #1582]	; 0x62e
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2210      	movs	r2, #16
 8006018:	f883 262f 	strb.w	r2, [r3, #1583]	; 0x62f
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2210      	movs	r2, #16
 8006020:	f883 2630 	strb.w	r2, [r3, #1584]	; 0x630
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	22f0      	movs	r2, #240	; 0xf0
 8006028:	f883 2631 	strb.w	r2, [r3, #1585]	; 0x631
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	22f0      	movs	r2, #240	; 0xf0
 8006030:	f883 2632 	strb.w	r2, [r3, #1586]	; 0x632
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2210      	movs	r2, #16
 8006038:	f883 2633 	strb.w	r2, [r3, #1587]	; 0x633
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2210      	movs	r2, #16
 8006040:	f883 2634 	strb.w	r2, [r3, #1588]	; 0x634
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2210      	movs	r2, #16
 8006048:	f883 2635 	strb.w	r2, [r3, #1589]	; 0x635
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	22ff      	movs	r2, #255	; 0xff
 8006050:	f883 2639 	strb.w	r2, [r3, #1593]	; 0x639
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	22ff      	movs	r2, #255	; 0xff
 8006058:	f883 263a 	strb.w	r2, [r3, #1594]	; 0x63a
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2210      	movs	r2, #16
 8006060:	f883 263b 	strb.w	r2, [r3, #1595]	; 0x63b
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2210      	movs	r2, #16
 8006068:	f883 263c 	strb.w	r2, [r3, #1596]	; 0x63c
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2210      	movs	r2, #16
 8006070:	f883 263d 	strb.w	r2, [r3, #1597]	; 0x63d
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2210      	movs	r2, #16
 8006078:	f883 263e 	strb.w	r2, [r3, #1598]	; 0x63e
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2210      	movs	r2, #16
 8006080:	f883 263f 	strb.w	r2, [r3, #1599]	; 0x63f
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2210      	movs	r2, #16
 8006088:	f883 2640 	strb.w	r2, [r3, #1600]	; 0x640
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2210      	movs	r2, #16
 8006090:	f883 2641 	strb.w	r2, [r3, #1601]	; 0x641
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2210      	movs	r2, #16
 8006098:	f883 2642 	strb.w	r2, [r3, #1602]	; 0x642
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2210      	movs	r2, #16
 80060a0:	f883 2643 	strb.w	r2, [r3, #1603]	; 0x643
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2210      	movs	r2, #16
 80060a8:	f883 2644 	strb.w	r2, [r3, #1604]	; 0x644
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2210      	movs	r2, #16
 80060b0:	f883 2645 	strb.w	r2, [r3, #1605]	; 0x645
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2210      	movs	r2, #16
 80060b8:	f883 2646 	strb.w	r2, [r3, #1606]	; 0x646
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2210      	movs	r2, #16
 80060c0:	f883 2647 	strb.w	r2, [r3, #1607]	; 0x647
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2210      	movs	r2, #16
 80060c8:	f883 2648 	strb.w	r2, [r3, #1608]	; 0x648
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	22ff      	movs	r2, #255	; 0xff
 80060d0:	f883 2649 	strb.w	r2, [r3, #1609]	; 0x649
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	22ff      	movs	r2, #255	; 0xff
 80060d8:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2210      	movs	r2, #16
 80060e0:	f883 264b 	strb.w	r2, [r3, #1611]	; 0x64b
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2210      	movs	r2, #16
 80060e8:	f883 264c 	strb.w	r2, [r3, #1612]	; 0x64c
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2210      	movs	r2, #16
 80060f0:	f883 264d 	strb.w	r2, [r3, #1613]	; 0x64d
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	22ff      	movs	r2, #255	; 0xff
 80060f8:	f883 2651 	strb.w	r2, [r3, #1617]	; 0x651
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	22ff      	movs	r2, #255	; 0xff
 8006100:	f883 2652 	strb.w	r2, [r3, #1618]	; 0x652
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2214      	movs	r2, #20
 8006108:	f883 2653 	strb.w	r2, [r3, #1619]	; 0x653
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2214      	movs	r2, #20
 8006110:	f883 2654 	strb.w	r2, [r3, #1620]	; 0x654
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2214      	movs	r2, #20
 8006118:	f883 2655 	strb.w	r2, [r3, #1621]	; 0x655
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	22ff      	movs	r2, #255	; 0xff
 8006120:	f883 2658 	strb.w	r2, [r3, #1624]	; 0x658
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	22ff      	movs	r2, #255	; 0xff
 8006128:	f883 2659 	strb.w	r2, [r3, #1625]	; 0x659
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	22ff      	movs	r2, #255	; 0xff
 8006130:	f883 265b 	strb.w	r2, [r3, #1627]	; 0x65b
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	22ff      	movs	r2, #255	; 0xff
 8006138:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2210      	movs	r2, #16
 8006140:	f883 265d 	strb.w	r2, [r3, #1629]	; 0x65d
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	221f      	movs	r2, #31
 8006148:	f883 2660 	strb.w	r2, [r3, #1632]	; 0x660
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	221f      	movs	r2, #31
 8006150:	f883 2661 	strb.w	r2, [r3, #1633]	; 0x661
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2210      	movs	r2, #16
 8006158:	f883 2662 	strb.w	r2, [r3, #1634]	; 0x662
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2217      	movs	r2, #23
 8006160:	f883 2663 	strb.w	r2, [r3, #1635]	; 0x663
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2217      	movs	r2, #23
 8006168:	f883 2664 	strb.w	r2, [r3, #1636]	; 0x664
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2214      	movs	r2, #20
 8006170:	f883 2665 	strb.w	r2, [r3, #1637]	; 0x665
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	22fc      	movs	r2, #252	; 0xfc
 8006178:	f883 2668 	strb.w	r2, [r3, #1640]	; 0x668
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	22fc      	movs	r2, #252	; 0xfc
 8006180:	f883 2669 	strb.w	r2, [r3, #1641]	; 0x669
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2204      	movs	r2, #4
 8006188:	f883 266a 	strb.w	r2, [r3, #1642]	; 0x66a
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	22f4      	movs	r2, #244	; 0xf4
 8006190:	f883 266b 	strb.w	r2, [r3, #1643]	; 0x66b
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	22f4      	movs	r2, #244	; 0xf4
 8006198:	f883 266c 	strb.w	r2, [r3, #1644]	; 0x66c
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2214      	movs	r2, #20
 80061a0:	f883 266d 	strb.w	r2, [r3, #1645]	; 0x66d
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2214      	movs	r2, #20
 80061a8:	f883 266e 	strb.w	r2, [r3, #1646]	; 0x66e
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2214      	movs	r2, #20
 80061b0:	f883 266f 	strb.w	r2, [r3, #1647]	; 0x66f
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2217      	movs	r2, #23
 80061b8:	f883 2670 	strb.w	r2, [r3, #1648]	; 0x670
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2217      	movs	r2, #23
 80061c0:	f883 2671 	strb.w	r2, [r3, #1649]	; 0x671
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2210      	movs	r2, #16
 80061c8:	f883 2672 	strb.w	r2, [r3, #1650]	; 0x672
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2217      	movs	r2, #23
 80061d0:	f883 2673 	strb.w	r2, [r3, #1651]	; 0x673
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2217      	movs	r2, #23
 80061d8:	f883 2674 	strb.w	r2, [r3, #1652]	; 0x674
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2214      	movs	r2, #20
 80061e0:	f883 2675 	strb.w	r2, [r3, #1653]	; 0x675
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2214      	movs	r2, #20
 80061e8:	f883 2676 	strb.w	r2, [r3, #1654]	; 0x676
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2214      	movs	r2, #20
 80061f0:	f883 2677 	strb.w	r2, [r3, #1655]	; 0x677
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	22f4      	movs	r2, #244	; 0xf4
 80061f8:	f883 2678 	strb.w	r2, [r3, #1656]	; 0x678
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	22f4      	movs	r2, #244	; 0xf4
 8006200:	f883 2679 	strb.w	r2, [r3, #1657]	; 0x679
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2204      	movs	r2, #4
 8006208:	f883 267a 	strb.w	r2, [r3, #1658]	; 0x67a
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	22f4      	movs	r2, #244	; 0xf4
 8006210:	f883 267b 	strb.w	r2, [r3, #1659]	; 0x67b
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	22f4      	movs	r2, #244	; 0xf4
 8006218:	f883 267c 	strb.w	r2, [r3, #1660]	; 0x67c
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2214      	movs	r2, #20
 8006220:	f883 267d 	strb.w	r2, [r3, #1661]	; 0x67d
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	22ff      	movs	r2, #255	; 0xff
 8006228:	f883 2680 	strb.w	r2, [r3, #1664]	; 0x680
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	22ff      	movs	r2, #255	; 0xff
 8006230:	f883 2681 	strb.w	r2, [r3, #1665]	; 0x681
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	22f7      	movs	r2, #247	; 0xf7
 8006238:	f883 2683 	strb.w	r2, [r3, #1667]	; 0x683
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	22f7      	movs	r2, #247	; 0xf7
 8006240:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2214      	movs	r2, #20
 8006248:	f883 2685 	strb.w	r2, [r3, #1669]	; 0x685
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2214      	movs	r2, #20
 8006250:	f883 2686 	strb.w	r2, [r3, #1670]	; 0x686
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2214      	movs	r2, #20
 8006258:	f883 2687 	strb.w	r2, [r3, #1671]	; 0x687
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2214      	movs	r2, #20
 8006260:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2214      	movs	r2, #20
 8006268:	f883 2689 	strb.w	r2, [r3, #1673]	; 0x689
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2214      	movs	r2, #20
 8006270:	f883 268a 	strb.w	r2, [r3, #1674]	; 0x68a
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2214      	movs	r2, #20
 8006278:	f883 268b 	strb.w	r2, [r3, #1675]	; 0x68b
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2214      	movs	r2, #20
 8006280:	f883 268c 	strb.w	r2, [r3, #1676]	; 0x68c
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2214      	movs	r2, #20
 8006288:	f883 268d 	strb.w	r2, [r3, #1677]	; 0x68d
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2214      	movs	r2, #20
 8006290:	f883 268e 	strb.w	r2, [r3, #1678]	; 0x68e
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2214      	movs	r2, #20
 8006298:	f883 268f 	strb.w	r2, [r3, #1679]	; 0x68f
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	22f7      	movs	r2, #247	; 0xf7
 80062a0:	f883 2690 	strb.w	r2, [r3, #1680]	; 0x690
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	22f7      	movs	r2, #247	; 0xf7
 80062a8:	f883 2691 	strb.w	r2, [r3, #1681]	; 0x691
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	22f7      	movs	r2, #247	; 0xf7
 80062b0:	f883 2693 	strb.w	r2, [r3, #1683]	; 0x693
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	22f7      	movs	r2, #247	; 0xf7
 80062b8:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2214      	movs	r2, #20
 80062c0:	f883 2695 	strb.w	r2, [r3, #1685]	; 0x695
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2214      	movs	r2, #20
 80062c8:	f883 2696 	strb.w	r2, [r3, #1686]	; 0x696
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2214      	movs	r2, #20
 80062d0:	f883 2697 	strb.w	r2, [r3, #1687]	; 0x697
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2214      	movs	r2, #20
 80062d8:	f883 2698 	strb.w	r2, [r3, #1688]	; 0x698
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2217      	movs	r2, #23
 80062e0:	f883 2699 	strb.w	r2, [r3, #1689]	; 0x699
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2217      	movs	r2, #23
 80062e8:	f883 269a 	strb.w	r2, [r3, #1690]	; 0x69a
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2214      	movs	r2, #20
 80062f0:	f883 269b 	strb.w	r2, [r3, #1691]	; 0x69b
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2214      	movs	r2, #20
 80062f8:	f883 269c 	strb.w	r2, [r3, #1692]	; 0x69c
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2214      	movs	r2, #20
 8006300:	f883 269d 	strb.w	r2, [r3, #1693]	; 0x69d
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2210      	movs	r2, #16
 8006308:	f883 269e 	strb.w	r2, [r3, #1694]	; 0x69e
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2210      	movs	r2, #16
 8006310:	f883 269f 	strb.w	r2, [r3, #1695]	; 0x69f
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	221f      	movs	r2, #31
 8006318:	f883 26a0 	strb.w	r2, [r3, #1696]	; 0x6a0
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	221f      	movs	r2, #31
 8006320:	f883 26a1 	strb.w	r2, [r3, #1697]	; 0x6a1
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2210      	movs	r2, #16
 8006328:	f883 26a2 	strb.w	r2, [r3, #1698]	; 0x6a2
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	221f      	movs	r2, #31
 8006330:	f883 26a3 	strb.w	r2, [r3, #1699]	; 0x6a3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	221f      	movs	r2, #31
 8006338:	f883 26a4 	strb.w	r2, [r3, #1700]	; 0x6a4
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2210      	movs	r2, #16
 8006340:	f883 26a5 	strb.w	r2, [r3, #1701]	; 0x6a5
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2214      	movs	r2, #20
 8006348:	f883 26a6 	strb.w	r2, [r3, #1702]	; 0x6a6
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2214      	movs	r2, #20
 8006350:	f883 26a7 	strb.w	r2, [r3, #1703]	; 0x6a7
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2214      	movs	r2, #20
 8006358:	f883 26a8 	strb.w	r2, [r3, #1704]	; 0x6a8
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	22f4      	movs	r2, #244	; 0xf4
 8006360:	f883 26a9 	strb.w	r2, [r3, #1705]	; 0x6a9
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	22f4      	movs	r2, #244	; 0xf4
 8006368:	f883 26aa 	strb.w	r2, [r3, #1706]	; 0x6aa
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2214      	movs	r2, #20
 8006370:	f883 26ab 	strb.w	r2, [r3, #1707]	; 0x6ab
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2214      	movs	r2, #20
 8006378:	f883 26ac 	strb.w	r2, [r3, #1708]	; 0x6ac
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2214      	movs	r2, #20
 8006380:	f883 26ad 	strb.w	r2, [r3, #1709]	; 0x6ad
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2210      	movs	r2, #16
 8006388:	f883 26ae 	strb.w	r2, [r3, #1710]	; 0x6ae
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2210      	movs	r2, #16
 8006390:	f883 26af 	strb.w	r2, [r3, #1711]	; 0x6af
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	22f0      	movs	r2, #240	; 0xf0
 8006398:	f883 26b0 	strb.w	r2, [r3, #1712]	; 0x6b0
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	22f0      	movs	r2, #240	; 0xf0
 80063a0:	f883 26b1 	strb.w	r2, [r3, #1713]	; 0x6b1
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2210      	movs	r2, #16
 80063a8:	f883 26b2 	strb.w	r2, [r3, #1714]	; 0x6b2
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	22f0      	movs	r2, #240	; 0xf0
 80063b0:	f883 26b3 	strb.w	r2, [r3, #1715]	; 0x6b3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	22f0      	movs	r2, #240	; 0xf0
 80063b8:	f883 26b4 	strb.w	r2, [r3, #1716]	; 0x6b4
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2210      	movs	r2, #16
 80063c0:	f883 26b5 	strb.w	r2, [r3, #1717]	; 0x6b5
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	221f      	movs	r2, #31
 80063c8:	f883 26b8 	strb.w	r2, [r3, #1720]	; 0x6b8
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	221f      	movs	r2, #31
 80063d0:	f883 26b9 	strb.w	r2, [r3, #1721]	; 0x6b9
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2210      	movs	r2, #16
 80063d8:	f883 26ba 	strb.w	r2, [r3, #1722]	; 0x6ba
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	221f      	movs	r2, #31
 80063e0:	f883 26bb 	strb.w	r2, [r3, #1723]	; 0x6bb
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	221f      	movs	r2, #31
 80063e8:	f883 26bc 	strb.w	r2, [r3, #1724]	; 0x6bc
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2210      	movs	r2, #16
 80063f0:	f883 26bd 	strb.w	r2, [r3, #1725]	; 0x6bd
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	221f      	movs	r2, #31
 80063f8:	f883 26c1 	strb.w	r2, [r3, #1729]	; 0x6c1
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	221f      	movs	r2, #31
 8006400:	f883 26c2 	strb.w	r2, [r3, #1730]	; 0x6c2
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2214      	movs	r2, #20
 8006408:	f883 26c3 	strb.w	r2, [r3, #1731]	; 0x6c3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2214      	movs	r2, #20
 8006410:	f883 26c4 	strb.w	r2, [r3, #1732]	; 0x6c4
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2214      	movs	r2, #20
 8006418:	f883 26c5 	strb.w	r2, [r3, #1733]	; 0x6c5
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	22fc      	movs	r2, #252	; 0xfc
 8006420:	f883 26c9 	strb.w	r2, [r3, #1737]	; 0x6c9
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	22fc      	movs	r2, #252	; 0xfc
 8006428:	f883 26ca 	strb.w	r2, [r3, #1738]	; 0x6ca
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2214      	movs	r2, #20
 8006430:	f883 26cb 	strb.w	r2, [r3, #1739]	; 0x6cb
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2214      	movs	r2, #20
 8006438:	f883 26cc 	strb.w	r2, [r3, #1740]	; 0x6cc
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2214      	movs	r2, #20
 8006440:	f883 26cd 	strb.w	r2, [r3, #1741]	; 0x6cd
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	22f0      	movs	r2, #240	; 0xf0
 8006448:	f883 26d0 	strb.w	r2, [r3, #1744]	; 0x6d0
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	22f0      	movs	r2, #240	; 0xf0
 8006450:	f883 26d1 	strb.w	r2, [r3, #1745]	; 0x6d1
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2210      	movs	r2, #16
 8006458:	f883 26d2 	strb.w	r2, [r3, #1746]	; 0x6d2
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	22f0      	movs	r2, #240	; 0xf0
 8006460:	f883 26d3 	strb.w	r2, [r3, #1747]	; 0x6d3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	22f0      	movs	r2, #240	; 0xf0
 8006468:	f883 26d4 	strb.w	r2, [r3, #1748]	; 0x6d4
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2210      	movs	r2, #16
 8006470:	f883 26d5 	strb.w	r2, [r3, #1749]	; 0x6d5
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2210      	movs	r2, #16
 8006478:	f883 26d6 	strb.w	r2, [r3, #1750]	; 0x6d6
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2210      	movs	r2, #16
 8006480:	f883 26d7 	strb.w	r2, [r3, #1751]	; 0x6d7
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	22ff      	movs	r2, #255	; 0xff
 8006488:	f883 26d8 	strb.w	r2, [r3, #1752]	; 0x6d8
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	22ff      	movs	r2, #255	; 0xff
 8006490:	f883 26d9 	strb.w	r2, [r3, #1753]	; 0x6d9
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2210      	movs	r2, #16
 8006498:	f883 26da 	strb.w	r2, [r3, #1754]	; 0x6da
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	22ff      	movs	r2, #255	; 0xff
 80064a0:	f883 26db 	strb.w	r2, [r3, #1755]	; 0x6db
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	22ff      	movs	r2, #255	; 0xff
 80064a8:	f883 26dc 	strb.w	r2, [r3, #1756]	; 0x6dc
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2210      	movs	r2, #16
 80064b0:	f883 26dd 	strb.w	r2, [r3, #1757]	; 0x6dd
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2214      	movs	r2, #20
 80064b8:	f883 26de 	strb.w	r2, [r3, #1758]	; 0x6de
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2214      	movs	r2, #20
 80064c0:	f883 26df 	strb.w	r2, [r3, #1759]	; 0x6df
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2214      	movs	r2, #20
 80064c8:	f883 26e0 	strb.w	r2, [r3, #1760]	; 0x6e0
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	22ff      	movs	r2, #255	; 0xff
 80064d0:	f883 26e1 	strb.w	r2, [r3, #1761]	; 0x6e1
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	22ff      	movs	r2, #255	; 0xff
 80064d8:	f883 26e2 	strb.w	r2, [r3, #1762]	; 0x6e2
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2214      	movs	r2, #20
 80064e0:	f883 26e3 	strb.w	r2, [r3, #1763]	; 0x6e3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2214      	movs	r2, #20
 80064e8:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2214      	movs	r2, #20
 80064f0:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2210      	movs	r2, #16
 80064f8:	f883 26e6 	strb.w	r2, [r3, #1766]	; 0x6e6
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2210      	movs	r2, #16
 8006500:	f883 26e7 	strb.w	r2, [r3, #1767]	; 0x6e7
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2210      	movs	r2, #16
 8006508:	f883 26e8 	strb.w	r2, [r3, #1768]	; 0x6e8
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	221f      	movs	r2, #31
 8006510:	f883 26e9 	strb.w	r2, [r3, #1769]	; 0x6e9
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	221f      	movs	r2, #31
 8006518:	f883 26ea 	strb.w	r2, [r3, #1770]	; 0x6ea
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	22f0      	movs	r2, #240	; 0xf0
 8006520:	f883 26f1 	strb.w	r2, [r3, #1777]	; 0x6f1
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	22f0      	movs	r2, #240	; 0xf0
 8006528:	f883 26f2 	strb.w	r2, [r3, #1778]	; 0x6f2
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2210      	movs	r2, #16
 8006530:	f883 26f3 	strb.w	r2, [r3, #1779]	; 0x6f3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2210      	movs	r2, #16
 8006538:	f883 26f4 	strb.w	r2, [r3, #1780]	; 0x6f4
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2210      	movs	r2, #16
 8006540:	f883 26f5 	strb.w	r2, [r3, #1781]	; 0x6f5
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	22ff      	movs	r2, #255	; 0xff
 8006548:	f883 26f6 	strb.w	r2, [r3, #1782]	; 0x6f6
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	22ff      	movs	r2, #255	; 0xff
 8006550:	f883 26f7 	strb.w	r2, [r3, #1783]	; 0x6f7
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	22ff      	movs	r2, #255	; 0xff
 8006558:	f883 26f8 	strb.w	r2, [r3, #1784]	; 0x6f8
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	22ff      	movs	r2, #255	; 0xff
 8006560:	f883 26f9 	strb.w	r2, [r3, #1785]	; 0x6f9
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	22ff      	movs	r2, #255	; 0xff
 8006568:	f883 26fa 	strb.w	r2, [r3, #1786]	; 0x6fa
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	22ff      	movs	r2, #255	; 0xff
 8006570:	f883 26fb 	strb.w	r2, [r3, #1787]	; 0x6fb
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	22ff      	movs	r2, #255	; 0xff
 8006578:	f883 26fc 	strb.w	r2, [r3, #1788]	; 0x6fc
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	22ff      	movs	r2, #255	; 0xff
 8006580:	f883 26fd 	strb.w	r2, [r3, #1789]	; 0x6fd
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	22f0      	movs	r2, #240	; 0xf0
 8006588:	f883 26fe 	strb.w	r2, [r3, #1790]	; 0x6fe
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	22f0      	movs	r2, #240	; 0xf0
 8006590:	f883 26ff 	strb.w	r2, [r3, #1791]	; 0x6ff
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	22f0      	movs	r2, #240	; 0xf0
 8006598:	f883 2700 	strb.w	r2, [r3, #1792]	; 0x700
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	22f0      	movs	r2, #240	; 0xf0
 80065a0:	f883 2701 	strb.w	r2, [r3, #1793]	; 0x701
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	22f0      	movs	r2, #240	; 0xf0
 80065a8:	f883 2702 	strb.w	r2, [r3, #1794]	; 0x702
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	22f0      	movs	r2, #240	; 0xf0
 80065b0:	f883 2703 	strb.w	r2, [r3, #1795]	; 0x703
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	22f0      	movs	r2, #240	; 0xf0
 80065b8:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	22f0      	movs	r2, #240	; 0xf0
 80065c0:	f883 2705 	strb.w	r2, [r3, #1797]	; 0x705
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	22ff      	movs	r2, #255	; 0xff
 80065c8:	f883 2706 	strb.w	r2, [r3, #1798]	; 0x706
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	22ff      	movs	r2, #255	; 0xff
 80065d0:	f883 2707 	strb.w	r2, [r3, #1799]	; 0x707
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	22ff      	movs	r2, #255	; 0xff
 80065d8:	f883 2708 	strb.w	r2, [r3, #1800]	; 0x708
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	22ff      	movs	r2, #255	; 0xff
 80065e0:	f883 2709 	strb.w	r2, [r3, #1801]	; 0x709
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	22ff      	movs	r2, #255	; 0xff
 80065e8:	f883 2712 	strb.w	r2, [r3, #1810]	; 0x712
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	22ff      	movs	r2, #255	; 0xff
 80065f0:	f883 2713 	strb.w	r2, [r3, #1811]	; 0x713
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	22ff      	movs	r2, #255	; 0xff
 80065f8:	f883 2714 	strb.w	r2, [r3, #1812]	; 0x714
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	22ff      	movs	r2, #255	; 0xff
 8006600:	f883 2715 	strb.w	r2, [r3, #1813]	; 0x715
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	220f      	movs	r2, #15
 8006608:	f883 2716 	strb.w	r2, [r3, #1814]	; 0x716
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	220f      	movs	r2, #15
 8006610:	f883 2717 	strb.w	r2, [r3, #1815]	; 0x717
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	220f      	movs	r2, #15
 8006618:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	220f      	movs	r2, #15
 8006620:	f883 2719 	strb.w	r2, [r3, #1817]	; 0x719
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	220f      	movs	r2, #15
 8006628:	f883 271a 	strb.w	r2, [r3, #1818]	; 0x71a
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	220f      	movs	r2, #15
 8006630:	f883 271b 	strb.w	r2, [r3, #1819]	; 0x71b
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	220f      	movs	r2, #15
 8006638:	f883 271c 	strb.w	r2, [r3, #1820]	; 0x71c
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	220f      	movs	r2, #15
 8006640:	f883 271d 	strb.w	r2, [r3, #1821]	; 0x71d
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2238      	movs	r2, #56	; 0x38
 8006648:	f883 271e 	strb.w	r2, [r3, #1822]	; 0x71e
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	227c      	movs	r2, #124	; 0x7c
 8006650:	f883 271f 	strb.w	r2, [r3, #1823]	; 0x71f
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2244      	movs	r2, #68	; 0x44
 8006658:	f883 2720 	strb.w	r2, [r3, #1824]	; 0x720
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	226c      	movs	r2, #108	; 0x6c
 8006660:	f883 2721 	strb.w	r2, [r3, #1825]	; 0x721
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2238      	movs	r2, #56	; 0x38
 8006668:	f883 2722 	strb.w	r2, [r3, #1826]	; 0x722
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	226c      	movs	r2, #108	; 0x6c
 8006670:	f883 2723 	strb.w	r2, [r3, #1827]	; 0x723
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2244      	movs	r2, #68	; 0x44
 8006678:	f883 2724 	strb.w	r2, [r3, #1828]	; 0x724
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	22fc      	movs	r2, #252	; 0xfc
 8006680:	f883 2726 	strb.w	r2, [r3, #1830]	; 0x726
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	22fe      	movs	r2, #254	; 0xfe
 8006688:	f883 2727 	strb.w	r2, [r3, #1831]	; 0x727
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	222a      	movs	r2, #42	; 0x2a
 8006690:	f883 2728 	strb.w	r2, [r3, #1832]	; 0x728
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	222a      	movs	r2, #42	; 0x2a
 8006698:	f883 2729 	strb.w	r2, [r3, #1833]	; 0x729
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	223e      	movs	r2, #62	; 0x3e
 80066a0:	f883 272a 	strb.w	r2, [r3, #1834]	; 0x72a
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2214      	movs	r2, #20
 80066a8:	f883 272b 	strb.w	r2, [r3, #1835]	; 0x72b
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	227e      	movs	r2, #126	; 0x7e
 80066b0:	f883 272e 	strb.w	r2, [r3, #1838]	; 0x72e
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	227e      	movs	r2, #126	; 0x7e
 80066b8:	f883 272f 	strb.w	r2, [r3, #1839]	; 0x72f
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2202      	movs	r2, #2
 80066c0:	f883 2730 	strb.w	r2, [r3, #1840]	; 0x730
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2202      	movs	r2, #2
 80066c8:	f883 2731 	strb.w	r2, [r3, #1841]	; 0x731
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2206      	movs	r2, #6
 80066d0:	f883 2732 	strb.w	r2, [r3, #1842]	; 0x732
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2206      	movs	r2, #6
 80066d8:	f883 2733 	strb.w	r2, [r3, #1843]	; 0x733
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2202      	movs	r2, #2
 80066e0:	f883 2736 	strb.w	r2, [r3, #1846]	; 0x736
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	227e      	movs	r2, #126	; 0x7e
 80066e8:	f883 2737 	strb.w	r2, [r3, #1847]	; 0x737
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	227e      	movs	r2, #126	; 0x7e
 80066f0:	f883 2738 	strb.w	r2, [r3, #1848]	; 0x738
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2202      	movs	r2, #2
 80066f8:	f883 2739 	strb.w	r2, [r3, #1849]	; 0x739
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	227e      	movs	r2, #126	; 0x7e
 8006700:	f883 273a 	strb.w	r2, [r3, #1850]	; 0x73a
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	227e      	movs	r2, #126	; 0x7e
 8006708:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2202      	movs	r2, #2
 8006710:	f883 273c 	strb.w	r2, [r3, #1852]	; 0x73c
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2263      	movs	r2, #99	; 0x63
 8006718:	f883 273e 	strb.w	r2, [r3, #1854]	; 0x73e
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2277      	movs	r2, #119	; 0x77
 8006720:	f883 273f 	strb.w	r2, [r3, #1855]	; 0x73f
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	225d      	movs	r2, #93	; 0x5d
 8006728:	f883 2740 	strb.w	r2, [r3, #1856]	; 0x740
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2249      	movs	r2, #73	; 0x49
 8006730:	f883 2741 	strb.w	r2, [r3, #1857]	; 0x741
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2263      	movs	r2, #99	; 0x63
 8006738:	f883 2742 	strb.w	r2, [r3, #1858]	; 0x742
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2263      	movs	r2, #99	; 0x63
 8006740:	f883 2743 	strb.w	r2, [r3, #1859]	; 0x743
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2238      	movs	r2, #56	; 0x38
 8006748:	f883 2746 	strb.w	r2, [r3, #1862]	; 0x746
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	227c      	movs	r2, #124	; 0x7c
 8006750:	f883 2747 	strb.w	r2, [r3, #1863]	; 0x747
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2244      	movs	r2, #68	; 0x44
 8006758:	f883 2748 	strb.w	r2, [r3, #1864]	; 0x748
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	227c      	movs	r2, #124	; 0x7c
 8006760:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	223c      	movs	r2, #60	; 0x3c
 8006768:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2204      	movs	r2, #4
 8006770:	f883 274b 	strb.w	r2, [r3, #1867]	; 0x74b
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2204      	movs	r2, #4
 8006778:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2280      	movs	r2, #128	; 0x80
 8006780:	f883 274e 	strb.w	r2, [r3, #1870]	; 0x74e
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	22fe      	movs	r2, #254	; 0xfe
 8006788:	f883 274f 	strb.w	r2, [r3, #1871]	; 0x74f
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	227e      	movs	r2, #126	; 0x7e
 8006790:	f883 2750 	strb.w	r2, [r3, #1872]	; 0x750
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2220      	movs	r2, #32
 8006798:	f883 2751 	strb.w	r2, [r3, #1873]	; 0x751
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2220      	movs	r2, #32
 80067a0:	f883 2752 	strb.w	r2, [r3, #1874]	; 0x752
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	223e      	movs	r2, #62	; 0x3e
 80067a8:	f883 2753 	strb.w	r2, [r3, #1875]	; 0x753
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	221e      	movs	r2, #30
 80067b0:	f883 2754 	strb.w	r2, [r3, #1876]	; 0x754
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2204      	movs	r2, #4
 80067b8:	f883 2756 	strb.w	r2, [r3, #1878]	; 0x756
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2206      	movs	r2, #6
 80067c0:	f883 2757 	strb.w	r2, [r3, #1879]	; 0x757
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2202      	movs	r2, #2
 80067c8:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	227e      	movs	r2, #126	; 0x7e
 80067d0:	f883 2759 	strb.w	r2, [r3, #1881]	; 0x759
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	227c      	movs	r2, #124	; 0x7c
 80067d8:	f883 275a 	strb.w	r2, [r3, #1882]	; 0x75a
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2206      	movs	r2, #6
 80067e0:	f883 275b 	strb.w	r2, [r3, #1883]	; 0x75b
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2202      	movs	r2, #2
 80067e8:	f883 275c 	strb.w	r2, [r3, #1884]	; 0x75c
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2299      	movs	r2, #153	; 0x99
 80067f0:	f883 275e 	strb.w	r2, [r3, #1886]	; 0x75e
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	22bd      	movs	r2, #189	; 0xbd
 80067f8:	f883 275f 	strb.w	r2, [r3, #1887]	; 0x75f
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	22e7      	movs	r2, #231	; 0xe7
 8006800:	f883 2760 	strb.w	r2, [r3, #1888]	; 0x760
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	22e7      	movs	r2, #231	; 0xe7
 8006808:	f883 2761 	strb.w	r2, [r3, #1889]	; 0x761
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	22bd      	movs	r2, #189	; 0xbd
 8006810:	f883 2762 	strb.w	r2, [r3, #1890]	; 0x762
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2299      	movs	r2, #153	; 0x99
 8006818:	f883 2763 	strb.w	r2, [r3, #1891]	; 0x763
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	221c      	movs	r2, #28
 8006820:	f883 2766 	strb.w	r2, [r3, #1894]	; 0x766
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	223e      	movs	r2, #62	; 0x3e
 8006828:	f883 2767 	strb.w	r2, [r3, #1895]	; 0x767
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	226b      	movs	r2, #107	; 0x6b
 8006830:	f883 2768 	strb.w	r2, [r3, #1896]	; 0x768
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2249      	movs	r2, #73	; 0x49
 8006838:	f883 2769 	strb.w	r2, [r3, #1897]	; 0x769
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	226b      	movs	r2, #107	; 0x6b
 8006840:	f883 276a 	strb.w	r2, [r3, #1898]	; 0x76a
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	223e      	movs	r2, #62	; 0x3e
 8006848:	f883 276b 	strb.w	r2, [r3, #1899]	; 0x76b
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	221c      	movs	r2, #28
 8006850:	f883 276c 	strb.w	r2, [r3, #1900]	; 0x76c
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	224c      	movs	r2, #76	; 0x4c
 8006858:	f883 276e 	strb.w	r2, [r3, #1902]	; 0x76e
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	227e      	movs	r2, #126	; 0x7e
 8006860:	f883 276f 	strb.w	r2, [r3, #1903]	; 0x76f
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2273      	movs	r2, #115	; 0x73
 8006868:	f883 2770 	strb.w	r2, [r3, #1904]	; 0x770
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 2771 	strb.w	r2, [r3, #1905]	; 0x771
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2273      	movs	r2, #115	; 0x73
 8006878:	f883 2772 	strb.w	r2, [r3, #1906]	; 0x772
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	227e      	movs	r2, #126	; 0x7e
 8006880:	f883 2773 	strb.w	r2, [r3, #1907]	; 0x773
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	224c      	movs	r2, #76	; 0x4c
 8006888:	f883 2774 	strb.w	r2, [r3, #1908]	; 0x774
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2230      	movs	r2, #48	; 0x30
 8006890:	f883 2776 	strb.w	r2, [r3, #1910]	; 0x776
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2278      	movs	r2, #120	; 0x78
 8006898:	f883 2777 	strb.w	r2, [r3, #1911]	; 0x777
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	224a      	movs	r2, #74	; 0x4a
 80068a0:	f883 2778 	strb.w	r2, [r3, #1912]	; 0x778
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	224f      	movs	r2, #79	; 0x4f
 80068a8:	f883 2779 	strb.w	r2, [r3, #1913]	; 0x779
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	227d      	movs	r2, #125	; 0x7d
 80068b0:	f883 277a 	strb.w	r2, [r3, #1914]	; 0x77a
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2239      	movs	r2, #57	; 0x39
 80068b8:	f883 277b 	strb.w	r2, [r3, #1915]	; 0x77b
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2218      	movs	r2, #24
 80068c0:	f883 277e 	strb.w	r2, [r3, #1918]	; 0x77e
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	223c      	movs	r2, #60	; 0x3c
 80068c8:	f883 277f 	strb.w	r2, [r3, #1919]	; 0x77f
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2224      	movs	r2, #36	; 0x24
 80068d0:	f883 2780 	strb.w	r2, [r3, #1920]	; 0x780
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	223c      	movs	r2, #60	; 0x3c
 80068d8:	f883 2781 	strb.w	r2, [r3, #1921]	; 0x781
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	223c      	movs	r2, #60	; 0x3c
 80068e0:	f883 2782 	strb.w	r2, [r3, #1922]	; 0x782
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2224      	movs	r2, #36	; 0x24
 80068e8:	f883 2783 	strb.w	r2, [r3, #1923]	; 0x783
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	223c      	movs	r2, #60	; 0x3c
 80068f0:	f883 2784 	strb.w	r2, [r3, #1924]	; 0x784
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2218      	movs	r2, #24
 80068f8:	f883 2785 	strb.w	r2, [r3, #1925]	; 0x785
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2298      	movs	r2, #152	; 0x98
 8006900:	f883 2786 	strb.w	r2, [r3, #1926]	; 0x786
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	22fc      	movs	r2, #252	; 0xfc
 8006908:	f883 2787 	strb.w	r2, [r3, #1927]	; 0x787
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2264      	movs	r2, #100	; 0x64
 8006910:	f883 2788 	strb.w	r2, [r3, #1928]	; 0x788
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	223c      	movs	r2, #60	; 0x3c
 8006918:	f883 2789 	strb.w	r2, [r3, #1929]	; 0x789
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	223e      	movs	r2, #62	; 0x3e
 8006920:	f883 278a 	strb.w	r2, [r3, #1930]	; 0x78a
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2227      	movs	r2, #39	; 0x27
 8006928:	f883 278b 	strb.w	r2, [r3, #1931]	; 0x78b
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	223d      	movs	r2, #61	; 0x3d
 8006930:	f883 278c 	strb.w	r2, [r3, #1932]	; 0x78c
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2218      	movs	r2, #24
 8006938:	f883 278d 	strb.w	r2, [r3, #1933]	; 0x78d
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	221c      	movs	r2, #28
 8006940:	f883 278e 	strb.w	r2, [r3, #1934]	; 0x78e
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	223e      	movs	r2, #62	; 0x3e
 8006948:	f883 278f 	strb.w	r2, [r3, #1935]	; 0x78f
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	226b      	movs	r2, #107	; 0x6b
 8006950:	f883 2790 	strb.w	r2, [r3, #1936]	; 0x790
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2249      	movs	r2, #73	; 0x49
 8006958:	f883 2791 	strb.w	r2, [r3, #1937]	; 0x791
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2249      	movs	r2, #73	; 0x49
 8006960:	f883 2792 	strb.w	r2, [r3, #1938]	; 0x792
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	227e      	movs	r2, #126	; 0x7e
 8006968:	f883 2796 	strb.w	r2, [r3, #1942]	; 0x796
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	227f      	movs	r2, #127	; 0x7f
 8006970:	f883 2797 	strb.w	r2, [r3, #1943]	; 0x797
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2798 	strb.w	r2, [r3, #1944]	; 0x798
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2799 	strb.w	r2, [r3, #1945]	; 0x799
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	227f      	movs	r2, #127	; 0x7f
 8006988:	f883 279a 	strb.w	r2, [r3, #1946]	; 0x79a
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	227e      	movs	r2, #126	; 0x7e
 8006990:	f883 279b 	strb.w	r2, [r3, #1947]	; 0x79b
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	222a      	movs	r2, #42	; 0x2a
 8006998:	f883 279e 	strb.w	r2, [r3, #1950]	; 0x79e
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	222a      	movs	r2, #42	; 0x2a
 80069a0:	f883 279f 	strb.w	r2, [r3, #1951]	; 0x79f
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	222a      	movs	r2, #42	; 0x2a
 80069a8:	f883 27a0 	strb.w	r2, [r3, #1952]	; 0x7a0
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	222a      	movs	r2, #42	; 0x2a
 80069b0:	f883 27a1 	strb.w	r2, [r3, #1953]	; 0x7a1
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	222a      	movs	r2, #42	; 0x2a
 80069b8:	f883 27a2 	strb.w	r2, [r3, #1954]	; 0x7a2
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	222a      	movs	r2, #42	; 0x2a
 80069c0:	f883 27a3 	strb.w	r2, [r3, #1955]	; 0x7a3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2244      	movs	r2, #68	; 0x44
 80069c8:	f883 27a6 	strb.w	r2, [r3, #1958]	; 0x7a6
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2244      	movs	r2, #68	; 0x44
 80069d0:	f883 27a7 	strb.w	r2, [r3, #1959]	; 0x7a7
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	225f      	movs	r2, #95	; 0x5f
 80069d8:	f883 27a8 	strb.w	r2, [r3, #1960]	; 0x7a8
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	225f      	movs	r2, #95	; 0x5f
 80069e0:	f883 27a9 	strb.w	r2, [r3, #1961]	; 0x7a9
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2244      	movs	r2, #68	; 0x44
 80069e8:	f883 27aa 	strb.w	r2, [r3, #1962]	; 0x7aa
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2244      	movs	r2, #68	; 0x44
 80069f0:	f883 27ab 	strb.w	r2, [r3, #1963]	; 0x7ab
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2240      	movs	r2, #64	; 0x40
 80069f8:	f883 27ae 	strb.w	r2, [r3, #1966]	; 0x7ae
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2251      	movs	r2, #81	; 0x51
 8006a00:	f883 27af 	strb.w	r2, [r3, #1967]	; 0x7af
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	225b      	movs	r2, #91	; 0x5b
 8006a08:	f883 27b0 	strb.w	r2, [r3, #1968]	; 0x7b0
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	224e      	movs	r2, #78	; 0x4e
 8006a10:	f883 27b1 	strb.w	r2, [r3, #1969]	; 0x7b1
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2244      	movs	r2, #68	; 0x44
 8006a18:	f883 27b2 	strb.w	r2, [r3, #1970]	; 0x7b2
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2240      	movs	r2, #64	; 0x40
 8006a20:	f883 27b3 	strb.w	r2, [r3, #1971]	; 0x7b3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2240      	movs	r2, #64	; 0x40
 8006a28:	f883 27b6 	strb.w	r2, [r3, #1974]	; 0x7b6
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2244      	movs	r2, #68	; 0x44
 8006a30:	f883 27b7 	strb.w	r2, [r3, #1975]	; 0x7b7
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	224e      	movs	r2, #78	; 0x4e
 8006a38:	f883 27b8 	strb.w	r2, [r3, #1976]	; 0x7b8
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	225b      	movs	r2, #91	; 0x5b
 8006a40:	f883 27b9 	strb.w	r2, [r3, #1977]	; 0x7b9
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2251      	movs	r2, #81	; 0x51
 8006a48:	f883 27ba 	strb.w	r2, [r3, #1978]	; 0x7ba
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2240      	movs	r2, #64	; 0x40
 8006a50:	f883 27bb 	strb.w	r2, [r3, #1979]	; 0x7bb
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	22fe      	movs	r2, #254	; 0xfe
 8006a58:	f883 27c1 	strb.w	r2, [r3, #1985]	; 0x7c1
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	22ff      	movs	r2, #255	; 0xff
 8006a60:	f883 27c2 	strb.w	r2, [r3, #1986]	; 0x7c2
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 27c3 	strb.w	r2, [r3, #1987]	; 0x7c3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2207      	movs	r2, #7
 8006a70:	f883 27c4 	strb.w	r2, [r3, #1988]	; 0x7c4
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2206      	movs	r2, #6
 8006a78:	f883 27c5 	strb.w	r2, [r3, #1989]	; 0x7c5
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2260      	movs	r2, #96	; 0x60
 8006a80:	f883 27c6 	strb.w	r2, [r3, #1990]	; 0x7c6
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	22e0      	movs	r2, #224	; 0xe0
 8006a88:	f883 27c7 	strb.w	r2, [r3, #1991]	; 0x7c7
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2280      	movs	r2, #128	; 0x80
 8006a90:	f883 27c8 	strb.w	r2, [r3, #1992]	; 0x7c8
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	22ff      	movs	r2, #255	; 0xff
 8006a98:	f883 27c9 	strb.w	r2, [r3, #1993]	; 0x7c9
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	227f      	movs	r2, #127	; 0x7f
 8006aa0:	f883 27ca 	strb.w	r2, [r3, #1994]	; 0x7ca
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2208      	movs	r2, #8
 8006aa8:	f883 27ce 	strb.w	r2, [r3, #1998]	; 0x7ce
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2208      	movs	r2, #8
 8006ab0:	f883 27cf 	strb.w	r2, [r3, #1999]	; 0x7cf
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	226b      	movs	r2, #107	; 0x6b
 8006ab8:	f883 27d0 	strb.w	r2, [r3, #2000]	; 0x7d0
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	226b      	movs	r2, #107	; 0x6b
 8006ac0:	f883 27d1 	strb.w	r2, [r3, #2001]	; 0x7d1
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2208      	movs	r2, #8
 8006ac8:	f883 27d2 	strb.w	r2, [r3, #2002]	; 0x7d2
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2208      	movs	r2, #8
 8006ad0:	f883 27d3 	strb.w	r2, [r3, #2003]	; 0x7d3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2224      	movs	r2, #36	; 0x24
 8006ad8:	f883 27d6 	strb.w	r2, [r3, #2006]	; 0x7d6
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2236      	movs	r2, #54	; 0x36
 8006ae0:	f883 27d7 	strb.w	r2, [r3, #2007]	; 0x7d7
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2212      	movs	r2, #18
 8006ae8:	f883 27d8 	strb.w	r2, [r3, #2008]	; 0x7d8
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2236      	movs	r2, #54	; 0x36
 8006af0:	f883 27d9 	strb.w	r2, [r3, #2009]	; 0x7d9
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2224      	movs	r2, #36	; 0x24
 8006af8:	f883 27da 	strb.w	r2, [r3, #2010]	; 0x7da
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2236      	movs	r2, #54	; 0x36
 8006b00:	f883 27db 	strb.w	r2, [r3, #2011]	; 0x7db
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2212      	movs	r2, #18
 8006b08:	f883 27dc 	strb.w	r2, [r3, #2012]	; 0x7dc
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2206      	movs	r2, #6
 8006b10:	f883 27df 	strb.w	r2, [r3, #2015]	; 0x7df
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	220f      	movs	r2, #15
 8006b18:	f883 27e0 	strb.w	r2, [r3, #2016]	; 0x7e0
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2209      	movs	r2, #9
 8006b20:	f883 27e1 	strb.w	r2, [r3, #2017]	; 0x7e1
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	220f      	movs	r2, #15
 8006b28:	f883 27e2 	strb.w	r2, [r3, #2018]	; 0x7e2
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2206      	movs	r2, #6
 8006b30:	f883 27e3 	strb.w	r2, [r3, #2019]	; 0x7e3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2218      	movs	r2, #24
 8006b38:	f883 27e9 	strb.w	r2, [r3, #2025]	; 0x7e9
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2218      	movs	r2, #24
 8006b40:	f883 27ea 	strb.w	r2, [r3, #2026]	; 0x7ea
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2210      	movs	r2, #16
 8006b48:	f883 27f1 	strb.w	r2, [r3, #2033]	; 0x7f1
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2210      	movs	r2, #16
 8006b50:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2210      	movs	r2, #16
 8006b58:	f883 27f6 	strb.w	r2, [r3, #2038]	; 0x7f6
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2230      	movs	r2, #48	; 0x30
 8006b60:	f883 27f7 	strb.w	r2, [r3, #2039]	; 0x7f7
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2270      	movs	r2, #112	; 0x70
 8006b68:	f883 27f8 	strb.w	r2, [r3, #2040]	; 0x7f8
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	22c0      	movs	r2, #192	; 0xc0
 8006b70:	f883 27f9 	strb.w	r2, [r3, #2041]	; 0x7f9
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	22ff      	movs	r2, #255	; 0xff
 8006b78:	f883 27fa 	strb.w	r2, [r3, #2042]	; 0x7fa
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	22ff      	movs	r2, #255	; 0xff
 8006b80:	f883 27fb 	strb.w	r2, [r3, #2043]	; 0x7fb
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 27fc 	strb.w	r2, [r3, #2044]	; 0x7fc
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 27fd 	strb.w	r2, [r3, #2045]	; 0x7fd
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	221f      	movs	r2, #31
 8006b98:	f883 27ff 	strb.w	r2, [r3, #2047]	; 0x7ff
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	221f      	movs	r2, #31
 8006ba0:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2801 	strb.w	r2, [r3, #2049]	; 0x801
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	221f      	movs	r2, #31
 8006bb0:	f883 2802 	strb.w	r2, [r3, #2050]	; 0x802
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	221e      	movs	r2, #30
 8006bb8:	f883 2803 	strb.w	r2, [r3, #2051]	; 0x803
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2219      	movs	r2, #25
 8006bc0:	f883 2807 	strb.w	r2, [r3, #2055]	; 0x807
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	221d      	movs	r2, #29
 8006bc8:	f883 2808 	strb.w	r2, [r3, #2056]	; 0x808
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2217      	movs	r2, #23
 8006bd0:	f883 2809 	strb.w	r2, [r3, #2057]	; 0x809
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2212      	movs	r2, #18
 8006bd8:	f883 280a 	strb.w	r2, [r3, #2058]	; 0x80a
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	223c      	movs	r2, #60	; 0x3c
 8006be0:	f883 2810 	strb.w	r2, [r3, #2064]	; 0x810
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	223c      	movs	r2, #60	; 0x3c
 8006be8:	f883 2811 	strb.w	r2, [r3, #2065]	; 0x811
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	223c      	movs	r2, #60	; 0x3c
 8006bf0:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	223c      	movs	r2, #60	; 0x3c
 8006bf8:	f883 2813 	strb.w	r2, [r3, #2067]	; 0x813
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f603 0326 	addw	r3, r3, #2086	; 0x826
 8006c02:	f240 12db 	movw	r2, #475	; 0x1db
 8006c06:	2100      	movs	r1, #0
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f008 fe57 	bl	800f8bc <memset>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	225f      	movs	r2, #95	; 0x5f
 8006c12:	f883 282d 	strb.w	r2, [r3, #2093]	; 0x82d
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2207      	movs	r2, #7
 8006c1a:	f883 2831 	strb.w	r2, [r3, #2097]	; 0x831
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2207      	movs	r2, #7
 8006c22:	f883 2833 	strb.w	r2, [r3, #2099]	; 0x833
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2214      	movs	r2, #20
 8006c2a:	f883 2835 	strb.w	r2, [r3, #2101]	; 0x835
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	227f      	movs	r2, #127	; 0x7f
 8006c32:	f883 2836 	strb.w	r2, [r3, #2102]	; 0x836
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2214      	movs	r2, #20
 8006c3a:	f883 2837 	strb.w	r2, [r3, #2103]	; 0x837
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	227f      	movs	r2, #127	; 0x7f
 8006c42:	f883 2838 	strb.w	r2, [r3, #2104]	; 0x838
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2214      	movs	r2, #20
 8006c4a:	f883 2839 	strb.w	r2, [r3, #2105]	; 0x839
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2224      	movs	r2, #36	; 0x24
 8006c52:	f883 283a 	strb.w	r2, [r3, #2106]	; 0x83a
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	222a      	movs	r2, #42	; 0x2a
 8006c5a:	f883 283b 	strb.w	r2, [r3, #2107]	; 0x83b
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	227f      	movs	r2, #127	; 0x7f
 8006c62:	f883 283c 	strb.w	r2, [r3, #2108]	; 0x83c
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	222a      	movs	r2, #42	; 0x2a
 8006c6a:	f883 283d 	strb.w	r2, [r3, #2109]	; 0x83d
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2212      	movs	r2, #18
 8006c72:	f883 283e 	strb.w	r2, [r3, #2110]	; 0x83e
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2223      	movs	r2, #35	; 0x23
 8006c7a:	f883 283f 	strb.w	r2, [r3, #2111]	; 0x83f
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2213      	movs	r2, #19
 8006c82:	f883 2840 	strb.w	r2, [r3, #2112]	; 0x840
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2208      	movs	r2, #8
 8006c8a:	f883 2841 	strb.w	r2, [r3, #2113]	; 0x841
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2264      	movs	r2, #100	; 0x64
 8006c92:	f883 2842 	strb.w	r2, [r3, #2114]	; 0x842
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2262      	movs	r2, #98	; 0x62
 8006c9a:	f883 2843 	strb.w	r2, [r3, #2115]	; 0x843
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2236      	movs	r2, #54	; 0x36
 8006ca2:	f883 2844 	strb.w	r2, [r3, #2116]	; 0x844
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2249      	movs	r2, #73	; 0x49
 8006caa:	f883 2845 	strb.w	r2, [r3, #2117]	; 0x845
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2255      	movs	r2, #85	; 0x55
 8006cb2:	f883 2846 	strb.w	r2, [r3, #2118]	; 0x846
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2222      	movs	r2, #34	; 0x22
 8006cba:	f883 2847 	strb.w	r2, [r3, #2119]	; 0x847
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2250      	movs	r2, #80	; 0x50
 8006cc2:	f883 2848 	strb.w	r2, [r3, #2120]	; 0x848
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2205      	movs	r2, #5
 8006cca:	f883 284a 	strb.w	r2, [r3, #2122]	; 0x84a
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2203      	movs	r2, #3
 8006cd2:	f883 284b 	strb.w	r2, [r3, #2123]	; 0x84b
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	221c      	movs	r2, #28
 8006cda:	f883 284f 	strb.w	r2, [r3, #2127]	; 0x84f
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2222      	movs	r2, #34	; 0x22
 8006ce2:	f883 2850 	strb.w	r2, [r3, #2128]	; 0x850
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2241      	movs	r2, #65	; 0x41
 8006cea:	f883 2851 	strb.w	r2, [r3, #2129]	; 0x851
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2241      	movs	r2, #65	; 0x41
 8006cf2:	f883 2854 	strb.w	r2, [r3, #2132]	; 0x854
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2222      	movs	r2, #34	; 0x22
 8006cfa:	f883 2855 	strb.w	r2, [r3, #2133]	; 0x855
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	221c      	movs	r2, #28
 8006d02:	f883 2856 	strb.w	r2, [r3, #2134]	; 0x856
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2208      	movs	r2, #8
 8006d0a:	f883 2858 	strb.w	r2, [r3, #2136]	; 0x858
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	222a      	movs	r2, #42	; 0x2a
 8006d12:	f883 2859 	strb.w	r2, [r3, #2137]	; 0x859
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	221c      	movs	r2, #28
 8006d1a:	f883 285a 	strb.w	r2, [r3, #2138]	; 0x85a
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	222a      	movs	r2, #42	; 0x2a
 8006d22:	f883 285b 	strb.w	r2, [r3, #2139]	; 0x85b
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2208      	movs	r2, #8
 8006d2a:	f883 285c 	strb.w	r2, [r3, #2140]	; 0x85c
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2208      	movs	r2, #8
 8006d32:	f883 285d 	strb.w	r2, [r3, #2141]	; 0x85d
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2208      	movs	r2, #8
 8006d3a:	f883 285e 	strb.w	r2, [r3, #2142]	; 0x85e
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	223e      	movs	r2, #62	; 0x3e
 8006d42:	f883 285f 	strb.w	r2, [r3, #2143]	; 0x85f
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2208      	movs	r2, #8
 8006d4a:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2208      	movs	r2, #8
 8006d52:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2250      	movs	r2, #80	; 0x50
 8006d5a:	f883 2863 	strb.w	r2, [r3, #2147]	; 0x863
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2230      	movs	r2, #48	; 0x30
 8006d62:	f883 2864 	strb.w	r2, [r3, #2148]	; 0x864
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2208      	movs	r2, #8
 8006d6a:	f883 2867 	strb.w	r2, [r3, #2151]	; 0x867
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2208      	movs	r2, #8
 8006d72:	f883 2868 	strb.w	r2, [r3, #2152]	; 0x868
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2208      	movs	r2, #8
 8006d7a:	f883 2869 	strb.w	r2, [r3, #2153]	; 0x869
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2208      	movs	r2, #8
 8006d82:	f883 286a 	strb.w	r2, [r3, #2154]	; 0x86a
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2208      	movs	r2, #8
 8006d8a:	f883 286b 	strb.w	r2, [r3, #2155]	; 0x86b
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2230      	movs	r2, #48	; 0x30
 8006d92:	f883 286d 	strb.w	r2, [r3, #2157]	; 0x86d
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2230      	movs	r2, #48	; 0x30
 8006d9a:	f883 286e 	strb.w	r2, [r3, #2158]	; 0x86e
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2220      	movs	r2, #32
 8006da2:	f883 2871 	strb.w	r2, [r3, #2161]	; 0x871
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2210      	movs	r2, #16
 8006daa:	f883 2872 	strb.w	r2, [r3, #2162]	; 0x872
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2208      	movs	r2, #8
 8006db2:	f883 2873 	strb.w	r2, [r3, #2163]	; 0x873
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2204      	movs	r2, #4
 8006dba:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2202      	movs	r2, #2
 8006dc2:	f883 2875 	strb.w	r2, [r3, #2165]	; 0x875
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	223e      	movs	r2, #62	; 0x3e
 8006dca:	f883 2876 	strb.w	r2, [r3, #2166]	; 0x876
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2251      	movs	r2, #81	; 0x51
 8006dd2:	f883 2877 	strb.w	r2, [r3, #2167]	; 0x877
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2249      	movs	r2, #73	; 0x49
 8006dda:	f883 2878 	strb.w	r2, [r3, #2168]	; 0x878
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2245      	movs	r2, #69	; 0x45
 8006de2:	f883 2879 	strb.w	r2, [r3, #2169]	; 0x879
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	223e      	movs	r2, #62	; 0x3e
 8006dea:	f883 287a 	strb.w	r2, [r3, #2170]	; 0x87a
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2242      	movs	r2, #66	; 0x42
 8006df2:	f883 287c 	strb.w	r2, [r3, #2172]	; 0x87c
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	227f      	movs	r2, #127	; 0x7f
 8006dfa:	f883 287d 	strb.w	r2, [r3, #2173]	; 0x87d
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2240      	movs	r2, #64	; 0x40
 8006e02:	f883 287e 	strb.w	r2, [r3, #2174]	; 0x87e
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2242      	movs	r2, #66	; 0x42
 8006e0a:	f883 2880 	strb.w	r2, [r3, #2176]	; 0x880
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2261      	movs	r2, #97	; 0x61
 8006e12:	f883 2881 	strb.w	r2, [r3, #2177]	; 0x881
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2251      	movs	r2, #81	; 0x51
 8006e1a:	f883 2882 	strb.w	r2, [r3, #2178]	; 0x882
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2249      	movs	r2, #73	; 0x49
 8006e22:	f883 2883 	strb.w	r2, [r3, #2179]	; 0x883
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2246      	movs	r2, #70	; 0x46
 8006e2a:	f883 2884 	strb.w	r2, [r3, #2180]	; 0x884
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2221      	movs	r2, #33	; 0x21
 8006e32:	f883 2885 	strb.w	r2, [r3, #2181]	; 0x885
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2241      	movs	r2, #65	; 0x41
 8006e3a:	f883 2886 	strb.w	r2, [r3, #2182]	; 0x886
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2245      	movs	r2, #69	; 0x45
 8006e42:	f883 2887 	strb.w	r2, [r3, #2183]	; 0x887
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	224b      	movs	r2, #75	; 0x4b
 8006e4a:	f883 2888 	strb.w	r2, [r3, #2184]	; 0x888
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2231      	movs	r2, #49	; 0x31
 8006e52:	f883 2889 	strb.w	r2, [r3, #2185]	; 0x889
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2218      	movs	r2, #24
 8006e5a:	f883 288a 	strb.w	r2, [r3, #2186]	; 0x88a
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2214      	movs	r2, #20
 8006e62:	f883 288b 	strb.w	r2, [r3, #2187]	; 0x88b
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2212      	movs	r2, #18
 8006e6a:	f883 288c 	strb.w	r2, [r3, #2188]	; 0x88c
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	227f      	movs	r2, #127	; 0x7f
 8006e72:	f883 288d 	strb.w	r2, [r3, #2189]	; 0x88d
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2210      	movs	r2, #16
 8006e7a:	f883 288e 	strb.w	r2, [r3, #2190]	; 0x88e
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2227      	movs	r2, #39	; 0x27
 8006e82:	f883 288f 	strb.w	r2, [r3, #2191]	; 0x88f
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2245      	movs	r2, #69	; 0x45
 8006e8a:	f883 2890 	strb.w	r2, [r3, #2192]	; 0x890
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2245      	movs	r2, #69	; 0x45
 8006e92:	f883 2891 	strb.w	r2, [r3, #2193]	; 0x891
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2245      	movs	r2, #69	; 0x45
 8006e9a:	f883 2892 	strb.w	r2, [r3, #2194]	; 0x892
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2239      	movs	r2, #57	; 0x39
 8006ea2:	f883 2893 	strb.w	r2, [r3, #2195]	; 0x893
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	223c      	movs	r2, #60	; 0x3c
 8006eaa:	f883 2894 	strb.w	r2, [r3, #2196]	; 0x894
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	224a      	movs	r2, #74	; 0x4a
 8006eb2:	f883 2895 	strb.w	r2, [r3, #2197]	; 0x895
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2249      	movs	r2, #73	; 0x49
 8006eba:	f883 2896 	strb.w	r2, [r3, #2198]	; 0x896
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2249      	movs	r2, #73	; 0x49
 8006ec2:	f883 2897 	strb.w	r2, [r3, #2199]	; 0x897
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2230      	movs	r2, #48	; 0x30
 8006eca:	f883 2898 	strb.w	r2, [r3, #2200]	; 0x898
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 2899 	strb.w	r2, [r3, #2201]	; 0x899
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2271      	movs	r2, #113	; 0x71
 8006eda:	f883 289a 	strb.w	r2, [r3, #2202]	; 0x89a
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2209      	movs	r2, #9
 8006ee2:	f883 289b 	strb.w	r2, [r3, #2203]	; 0x89b
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2205      	movs	r2, #5
 8006eea:	f883 289c 	strb.w	r2, [r3, #2204]	; 0x89c
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2203      	movs	r2, #3
 8006ef2:	f883 289d 	strb.w	r2, [r3, #2205]	; 0x89d
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2236      	movs	r2, #54	; 0x36
 8006efa:	f883 289e 	strb.w	r2, [r3, #2206]	; 0x89e
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2249      	movs	r2, #73	; 0x49
 8006f02:	f883 289f 	strb.w	r2, [r3, #2207]	; 0x89f
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2249      	movs	r2, #73	; 0x49
 8006f0a:	f883 28a0 	strb.w	r2, [r3, #2208]	; 0x8a0
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2249      	movs	r2, #73	; 0x49
 8006f12:	f883 28a1 	strb.w	r2, [r3, #2209]	; 0x8a1
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2236      	movs	r2, #54	; 0x36
 8006f1a:	f883 28a2 	strb.w	r2, [r3, #2210]	; 0x8a2
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2206      	movs	r2, #6
 8006f22:	f883 28a3 	strb.w	r2, [r3, #2211]	; 0x8a3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2249      	movs	r2, #73	; 0x49
 8006f2a:	f883 28a4 	strb.w	r2, [r3, #2212]	; 0x8a4
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2249      	movs	r2, #73	; 0x49
 8006f32:	f883 28a5 	strb.w	r2, [r3, #2213]	; 0x8a5
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2229      	movs	r2, #41	; 0x29
 8006f3a:	f883 28a6 	strb.w	r2, [r3, #2214]	; 0x8a6
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	221e      	movs	r2, #30
 8006f42:	f883 28a7 	strb.w	r2, [r3, #2215]	; 0x8a7
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2236      	movs	r2, #54	; 0x36
 8006f4a:	f883 28a9 	strb.w	r2, [r3, #2217]	; 0x8a9
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2236      	movs	r2, #54	; 0x36
 8006f52:	f883 28aa 	strb.w	r2, [r3, #2218]	; 0x8aa
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2256      	movs	r2, #86	; 0x56
 8006f5a:	f883 28ae 	strb.w	r2, [r3, #2222]	; 0x8ae
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2236      	movs	r2, #54	; 0x36
 8006f62:	f883 28af 	strb.w	r2, [r3, #2223]	; 0x8af
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2208      	movs	r2, #8
 8006f6a:	f883 28b3 	strb.w	r2, [r3, #2227]	; 0x8b3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2214      	movs	r2, #20
 8006f72:	f883 28b4 	strb.w	r2, [r3, #2228]	; 0x8b4
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2222      	movs	r2, #34	; 0x22
 8006f7a:	f883 28b5 	strb.w	r2, [r3, #2229]	; 0x8b5
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2241      	movs	r2, #65	; 0x41
 8006f82:	f883 28b6 	strb.w	r2, [r3, #2230]	; 0x8b6
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2214      	movs	r2, #20
 8006f8a:	f883 28b7 	strb.w	r2, [r3, #2231]	; 0x8b7
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2214      	movs	r2, #20
 8006f92:	f883 28b8 	strb.w	r2, [r3, #2232]	; 0x8b8
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2214      	movs	r2, #20
 8006f9a:	f883 28b9 	strb.w	r2, [r3, #2233]	; 0x8b9
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2214      	movs	r2, #20
 8006fa2:	f883 28ba 	strb.w	r2, [r3, #2234]	; 0x8ba
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2214      	movs	r2, #20
 8006faa:	f883 28bb 	strb.w	r2, [r3, #2235]	; 0x8bb
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2241      	movs	r2, #65	; 0x41
 8006fb2:	f883 28bc 	strb.w	r2, [r3, #2236]	; 0x8bc
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2222      	movs	r2, #34	; 0x22
 8006fba:	f883 28bd 	strb.w	r2, [r3, #2237]	; 0x8bd
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2214      	movs	r2, #20
 8006fc2:	f883 28be 	strb.w	r2, [r3, #2238]	; 0x8be
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2208      	movs	r2, #8
 8006fca:	f883 28bf 	strb.w	r2, [r3, #2239]	; 0x8bf
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2202      	movs	r2, #2
 8006fd2:	f883 28c1 	strb.w	r2, [r3, #2241]	; 0x8c1
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f883 28c2 	strb.w	r2, [r3, #2242]	; 0x8c2
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2251      	movs	r2, #81	; 0x51
 8006fe2:	f883 28c3 	strb.w	r2, [r3, #2243]	; 0x8c3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2209      	movs	r2, #9
 8006fea:	f883 28c4 	strb.w	r2, [r3, #2244]	; 0x8c4
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2206      	movs	r2, #6
 8006ff2:	f883 28c5 	strb.w	r2, [r3, #2245]	; 0x8c5
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2232      	movs	r2, #50	; 0x32
 8006ffa:	f883 28c6 	strb.w	r2, [r3, #2246]	; 0x8c6
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2249      	movs	r2, #73	; 0x49
 8007002:	f883 28c7 	strb.w	r2, [r3, #2247]	; 0x8c7
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2279      	movs	r2, #121	; 0x79
 800700a:	f883 28c8 	strb.w	r2, [r3, #2248]	; 0x8c8
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2241      	movs	r2, #65	; 0x41
 8007012:	f883 28c9 	strb.w	r2, [r3, #2249]	; 0x8c9
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	223e      	movs	r2, #62	; 0x3e
 800701a:	f883 28ca 	strb.w	r2, [r3, #2250]	; 0x8ca
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	227e      	movs	r2, #126	; 0x7e
 8007022:	f883 28cb 	strb.w	r2, [r3, #2251]	; 0x8cb
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2211      	movs	r2, #17
 800702a:	f883 28cc 	strb.w	r2, [r3, #2252]	; 0x8cc
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2211      	movs	r2, #17
 8007032:	f883 28cd 	strb.w	r2, [r3, #2253]	; 0x8cd
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2211      	movs	r2, #17
 800703a:	f883 28ce 	strb.w	r2, [r3, #2254]	; 0x8ce
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	227e      	movs	r2, #126	; 0x7e
 8007042:	f883 28cf 	strb.w	r2, [r3, #2255]	; 0x8cf
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	227f      	movs	r2, #127	; 0x7f
 800704a:	f883 28d0 	strb.w	r2, [r3, #2256]	; 0x8d0
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2249      	movs	r2, #73	; 0x49
 8007052:	f883 28d1 	strb.w	r2, [r3, #2257]	; 0x8d1
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2249      	movs	r2, #73	; 0x49
 800705a:	f883 28d2 	strb.w	r2, [r3, #2258]	; 0x8d2
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2249      	movs	r2, #73	; 0x49
 8007062:	f883 28d3 	strb.w	r2, [r3, #2259]	; 0x8d3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2236      	movs	r2, #54	; 0x36
 800706a:	f883 28d4 	strb.w	r2, [r3, #2260]	; 0x8d4
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	223e      	movs	r2, #62	; 0x3e
 8007072:	f883 28d5 	strb.w	r2, [r3, #2261]	; 0x8d5
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2241      	movs	r2, #65	; 0x41
 800707a:	f883 28d6 	strb.w	r2, [r3, #2262]	; 0x8d6
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2241      	movs	r2, #65	; 0x41
 8007082:	f883 28d7 	strb.w	r2, [r3, #2263]	; 0x8d7
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2241      	movs	r2, #65	; 0x41
 800708a:	f883 28d8 	strb.w	r2, [r3, #2264]	; 0x8d8
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2222      	movs	r2, #34	; 0x22
 8007092:	f883 28d9 	strb.w	r2, [r3, #2265]	; 0x8d9
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	227f      	movs	r2, #127	; 0x7f
 800709a:	f883 28da 	strb.w	r2, [r3, #2266]	; 0x8da
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2241      	movs	r2, #65	; 0x41
 80070a2:	f883 28db 	strb.w	r2, [r3, #2267]	; 0x8db
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2241      	movs	r2, #65	; 0x41
 80070aa:	f883 28dc 	strb.w	r2, [r3, #2268]	; 0x8dc
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2222      	movs	r2, #34	; 0x22
 80070b2:	f883 28dd 	strb.w	r2, [r3, #2269]	; 0x8dd
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	221c      	movs	r2, #28
 80070ba:	f883 28de 	strb.w	r2, [r3, #2270]	; 0x8de
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	227f      	movs	r2, #127	; 0x7f
 80070c2:	f883 28df 	strb.w	r2, [r3, #2271]	; 0x8df
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2249      	movs	r2, #73	; 0x49
 80070ca:	f883 28e0 	strb.w	r2, [r3, #2272]	; 0x8e0
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2249      	movs	r2, #73	; 0x49
 80070d2:	f883 28e1 	strb.w	r2, [r3, #2273]	; 0x8e1
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2249      	movs	r2, #73	; 0x49
 80070da:	f883 28e2 	strb.w	r2, [r3, #2274]	; 0x8e2
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2241      	movs	r2, #65	; 0x41
 80070e2:	f883 28e3 	strb.w	r2, [r3, #2275]	; 0x8e3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	227f      	movs	r2, #127	; 0x7f
 80070ea:	f883 28e4 	strb.w	r2, [r3, #2276]	; 0x8e4
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2209      	movs	r2, #9
 80070f2:	f883 28e5 	strb.w	r2, [r3, #2277]	; 0x8e5
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2209      	movs	r2, #9
 80070fa:	f883 28e6 	strb.w	r2, [r3, #2278]	; 0x8e6
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 28e7 	strb.w	r2, [r3, #2279]	; 0x8e7
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2201      	movs	r2, #1
 800710a:	f883 28e8 	strb.w	r2, [r3, #2280]	; 0x8e8
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	223e      	movs	r2, #62	; 0x3e
 8007112:	f883 28e9 	strb.w	r2, [r3, #2281]	; 0x8e9
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2241      	movs	r2, #65	; 0x41
 800711a:	f883 28ea 	strb.w	r2, [r3, #2282]	; 0x8ea
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2241      	movs	r2, #65	; 0x41
 8007122:	f883 28eb 	strb.w	r2, [r3, #2283]	; 0x8eb
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2251      	movs	r2, #81	; 0x51
 800712a:	f883 28ec 	strb.w	r2, [r3, #2284]	; 0x8ec
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2232      	movs	r2, #50	; 0x32
 8007132:	f883 28ed 	strb.w	r2, [r3, #2285]	; 0x8ed
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	227f      	movs	r2, #127	; 0x7f
 800713a:	f883 28ee 	strb.w	r2, [r3, #2286]	; 0x8ee
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2208      	movs	r2, #8
 8007142:	f883 28ef 	strb.w	r2, [r3, #2287]	; 0x8ef
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2208      	movs	r2, #8
 800714a:	f883 28f0 	strb.w	r2, [r3, #2288]	; 0x8f0
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2208      	movs	r2, #8
 8007152:	f883 28f1 	strb.w	r2, [r3, #2289]	; 0x8f1
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	227f      	movs	r2, #127	; 0x7f
 800715a:	f883 28f2 	strb.w	r2, [r3, #2290]	; 0x8f2
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2241      	movs	r2, #65	; 0x41
 8007162:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	227f      	movs	r2, #127	; 0x7f
 800716a:	f883 28f5 	strb.w	r2, [r3, #2293]	; 0x8f5
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2241      	movs	r2, #65	; 0x41
 8007172:	f883 28f6 	strb.w	r2, [r3, #2294]	; 0x8f6
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2220      	movs	r2, #32
 800717a:	f883 28f8 	strb.w	r2, [r3, #2296]	; 0x8f8
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2240      	movs	r2, #64	; 0x40
 8007182:	f883 28f9 	strb.w	r2, [r3, #2297]	; 0x8f9
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2241      	movs	r2, #65	; 0x41
 800718a:	f883 28fa 	strb.w	r2, [r3, #2298]	; 0x8fa
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	223f      	movs	r2, #63	; 0x3f
 8007192:	f883 28fb 	strb.w	r2, [r3, #2299]	; 0x8fb
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 28fc 	strb.w	r2, [r3, #2300]	; 0x8fc
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	227f      	movs	r2, #127	; 0x7f
 80071a2:	f883 28fd 	strb.w	r2, [r3, #2301]	; 0x8fd
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2208      	movs	r2, #8
 80071aa:	f883 28fe 	strb.w	r2, [r3, #2302]	; 0x8fe
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2214      	movs	r2, #20
 80071b2:	f883 28ff 	strb.w	r2, [r3, #2303]	; 0x8ff
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2222      	movs	r2, #34	; 0x22
 80071ba:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2241      	movs	r2, #65	; 0x41
 80071c2:	f883 2901 	strb.w	r2, [r3, #2305]	; 0x901
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	227f      	movs	r2, #127	; 0x7f
 80071ca:	f883 2902 	strb.w	r2, [r3, #2306]	; 0x902
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2240      	movs	r2, #64	; 0x40
 80071d2:	f883 2903 	strb.w	r2, [r3, #2307]	; 0x903
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2240      	movs	r2, #64	; 0x40
 80071da:	f883 2904 	strb.w	r2, [r3, #2308]	; 0x904
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2240      	movs	r2, #64	; 0x40
 80071e2:	f883 2905 	strb.w	r2, [r3, #2309]	; 0x905
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2240      	movs	r2, #64	; 0x40
 80071ea:	f883 2906 	strb.w	r2, [r3, #2310]	; 0x906
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	227f      	movs	r2, #127	; 0x7f
 80071f2:	f883 2907 	strb.w	r2, [r3, #2311]	; 0x907
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2202      	movs	r2, #2
 80071fa:	f883 2908 	strb.w	r2, [r3, #2312]	; 0x908
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2204      	movs	r2, #4
 8007202:	f883 2909 	strb.w	r2, [r3, #2313]	; 0x909
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2202      	movs	r2, #2
 800720a:	f883 290a 	strb.w	r2, [r3, #2314]	; 0x90a
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	227f      	movs	r2, #127	; 0x7f
 8007212:	f883 290b 	strb.w	r2, [r3, #2315]	; 0x90b
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	227f      	movs	r2, #127	; 0x7f
 800721a:	f883 290c 	strb.w	r2, [r3, #2316]	; 0x90c
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2204      	movs	r2, #4
 8007222:	f883 290d 	strb.w	r2, [r3, #2317]	; 0x90d
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2208      	movs	r2, #8
 800722a:	f883 290e 	strb.w	r2, [r3, #2318]	; 0x90e
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2210      	movs	r2, #16
 8007232:	f883 290f 	strb.w	r2, [r3, #2319]	; 0x90f
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	227f      	movs	r2, #127	; 0x7f
 800723a:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	223e      	movs	r2, #62	; 0x3e
 8007242:	f883 2911 	strb.w	r2, [r3, #2321]	; 0x911
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2241      	movs	r2, #65	; 0x41
 800724a:	f883 2912 	strb.w	r2, [r3, #2322]	; 0x912
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2241      	movs	r2, #65	; 0x41
 8007252:	f883 2913 	strb.w	r2, [r3, #2323]	; 0x913
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2241      	movs	r2, #65	; 0x41
 800725a:	f883 2914 	strb.w	r2, [r3, #2324]	; 0x914
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	223e      	movs	r2, #62	; 0x3e
 8007262:	f883 2915 	strb.w	r2, [r3, #2325]	; 0x915
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	227f      	movs	r2, #127	; 0x7f
 800726a:	f883 2916 	strb.w	r2, [r3, #2326]	; 0x916
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2209      	movs	r2, #9
 8007272:	f883 2917 	strb.w	r2, [r3, #2327]	; 0x917
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2209      	movs	r2, #9
 800727a:	f883 2918 	strb.w	r2, [r3, #2328]	; 0x918
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2209      	movs	r2, #9
 8007282:	f883 2919 	strb.w	r2, [r3, #2329]	; 0x919
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2206      	movs	r2, #6
 800728a:	f883 291a 	strb.w	r2, [r3, #2330]	; 0x91a
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	223e      	movs	r2, #62	; 0x3e
 8007292:	f883 291b 	strb.w	r2, [r3, #2331]	; 0x91b
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2241      	movs	r2, #65	; 0x41
 800729a:	f883 291c 	strb.w	r2, [r3, #2332]	; 0x91c
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2251      	movs	r2, #81	; 0x51
 80072a2:	f883 291d 	strb.w	r2, [r3, #2333]	; 0x91d
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2221      	movs	r2, #33	; 0x21
 80072aa:	f883 291e 	strb.w	r2, [r3, #2334]	; 0x91e
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	225e      	movs	r2, #94	; 0x5e
 80072b2:	f883 291f 	strb.w	r2, [r3, #2335]	; 0x91f
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	227f      	movs	r2, #127	; 0x7f
 80072ba:	f883 2920 	strb.w	r2, [r3, #2336]	; 0x920
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2209      	movs	r2, #9
 80072c2:	f883 2921 	strb.w	r2, [r3, #2337]	; 0x921
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2219      	movs	r2, #25
 80072ca:	f883 2922 	strb.w	r2, [r3, #2338]	; 0x922
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2229      	movs	r2, #41	; 0x29
 80072d2:	f883 2923 	strb.w	r2, [r3, #2339]	; 0x923
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2246      	movs	r2, #70	; 0x46
 80072da:	f883 2924 	strb.w	r2, [r3, #2340]	; 0x924
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2246      	movs	r2, #70	; 0x46
 80072e2:	f883 2925 	strb.w	r2, [r3, #2341]	; 0x925
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2249      	movs	r2, #73	; 0x49
 80072ea:	f883 2926 	strb.w	r2, [r3, #2342]	; 0x926
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2249      	movs	r2, #73	; 0x49
 80072f2:	f883 2927 	strb.w	r2, [r3, #2343]	; 0x927
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2249      	movs	r2, #73	; 0x49
 80072fa:	f883 2928 	strb.w	r2, [r3, #2344]	; 0x928
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2231      	movs	r2, #49	; 0x31
 8007302:	f883 2929 	strb.w	r2, [r3, #2345]	; 0x929
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 292a 	strb.w	r2, [r3, #2346]	; 0x92a
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2201      	movs	r2, #1
 8007312:	f883 292b 	strb.w	r2, [r3, #2347]	; 0x92b
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	227f      	movs	r2, #127	; 0x7f
 800731a:	f883 292c 	strb.w	r2, [r3, #2348]	; 0x92c
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2201      	movs	r2, #1
 8007322:	f883 292d 	strb.w	r2, [r3, #2349]	; 0x92d
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2201      	movs	r2, #1
 800732a:	f883 292e 	strb.w	r2, [r3, #2350]	; 0x92e
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	223f      	movs	r2, #63	; 0x3f
 8007332:	f883 292f 	strb.w	r2, [r3, #2351]	; 0x92f
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2240      	movs	r2, #64	; 0x40
 800733a:	f883 2930 	strb.w	r2, [r3, #2352]	; 0x930
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2240      	movs	r2, #64	; 0x40
 8007342:	f883 2931 	strb.w	r2, [r3, #2353]	; 0x931
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2240      	movs	r2, #64	; 0x40
 800734a:	f883 2932 	strb.w	r2, [r3, #2354]	; 0x932
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	223f      	movs	r2, #63	; 0x3f
 8007352:	f883 2933 	strb.w	r2, [r3, #2355]	; 0x933
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	221f      	movs	r2, #31
 800735a:	f883 2934 	strb.w	r2, [r3, #2356]	; 0x934
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2220      	movs	r2, #32
 8007362:	f883 2935 	strb.w	r2, [r3, #2357]	; 0x935
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2240      	movs	r2, #64	; 0x40
 800736a:	f883 2936 	strb.w	r2, [r3, #2358]	; 0x936
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2220      	movs	r2, #32
 8007372:	f883 2937 	strb.w	r2, [r3, #2359]	; 0x937
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	221f      	movs	r2, #31
 800737a:	f883 2938 	strb.w	r2, [r3, #2360]	; 0x938
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	227f      	movs	r2, #127	; 0x7f
 8007382:	f883 2939 	strb.w	r2, [r3, #2361]	; 0x939
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2220      	movs	r2, #32
 800738a:	f883 293a 	strb.w	r2, [r3, #2362]	; 0x93a
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2218      	movs	r2, #24
 8007392:	f883 293b 	strb.w	r2, [r3, #2363]	; 0x93b
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2220      	movs	r2, #32
 800739a:	f883 293c 	strb.w	r2, [r3, #2364]	; 0x93c
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	227f      	movs	r2, #127	; 0x7f
 80073a2:	f883 293d 	strb.w	r2, [r3, #2365]	; 0x93d
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2263      	movs	r2, #99	; 0x63
 80073aa:	f883 293e 	strb.w	r2, [r3, #2366]	; 0x93e
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2214      	movs	r2, #20
 80073b2:	f883 293f 	strb.w	r2, [r3, #2367]	; 0x93f
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2208      	movs	r2, #8
 80073ba:	f883 2940 	strb.w	r2, [r3, #2368]	; 0x940
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2214      	movs	r2, #20
 80073c2:	f883 2941 	strb.w	r2, [r3, #2369]	; 0x941
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2263      	movs	r2, #99	; 0x63
 80073ca:	f883 2942 	strb.w	r2, [r3, #2370]	; 0x942
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2203      	movs	r2, #3
 80073d2:	f883 2943 	strb.w	r2, [r3, #2371]	; 0x943
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2204      	movs	r2, #4
 80073da:	f883 2944 	strb.w	r2, [r3, #2372]	; 0x944
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2278      	movs	r2, #120	; 0x78
 80073e2:	f883 2945 	strb.w	r2, [r3, #2373]	; 0x945
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2204      	movs	r2, #4
 80073ea:	f883 2946 	strb.w	r2, [r3, #2374]	; 0x946
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2203      	movs	r2, #3
 80073f2:	f883 2947 	strb.w	r2, [r3, #2375]	; 0x947
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2261      	movs	r2, #97	; 0x61
 80073fa:	f883 2948 	strb.w	r2, [r3, #2376]	; 0x948
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2251      	movs	r2, #81	; 0x51
 8007402:	f883 2949 	strb.w	r2, [r3, #2377]	; 0x949
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2249      	movs	r2, #73	; 0x49
 800740a:	f883 294a 	strb.w	r2, [r3, #2378]	; 0x94a
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2245      	movs	r2, #69	; 0x45
 8007412:	f883 294b 	strb.w	r2, [r3, #2379]	; 0x94b
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2243      	movs	r2, #67	; 0x43
 800741a:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	227f      	movs	r2, #127	; 0x7f
 8007422:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2241      	movs	r2, #65	; 0x41
 800742a:	f883 2950 	strb.w	r2, [r3, #2384]	; 0x950
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2241      	movs	r2, #65	; 0x41
 8007432:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2202      	movs	r2, #2
 800743a:	f883 2952 	strb.w	r2, [r3, #2386]	; 0x952
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2204      	movs	r2, #4
 8007442:	f883 2953 	strb.w	r2, [r3, #2387]	; 0x953
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2208      	movs	r2, #8
 800744a:	f883 2954 	strb.w	r2, [r3, #2388]	; 0x954
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2210      	movs	r2, #16
 8007452:	f883 2955 	strb.w	r2, [r3, #2389]	; 0x955
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2220      	movs	r2, #32
 800745a:	f883 2956 	strb.w	r2, [r3, #2390]	; 0x956
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2241      	movs	r2, #65	; 0x41
 8007462:	f883 2957 	strb.w	r2, [r3, #2391]	; 0x957
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2241      	movs	r2, #65	; 0x41
 800746a:	f883 2958 	strb.w	r2, [r3, #2392]	; 0x958
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	227f      	movs	r2, #127	; 0x7f
 8007472:	f883 2959 	strb.w	r2, [r3, #2393]	; 0x959
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2204      	movs	r2, #4
 800747a:	f883 295c 	strb.w	r2, [r3, #2396]	; 0x95c
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2202      	movs	r2, #2
 8007482:	f883 295d 	strb.w	r2, [r3, #2397]	; 0x95d
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 295e 	strb.w	r2, [r3, #2398]	; 0x95e
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2202      	movs	r2, #2
 8007492:	f883 295f 	strb.w	r2, [r3, #2399]	; 0x95f
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2204      	movs	r2, #4
 800749a:	f883 2960 	strb.w	r2, [r3, #2400]	; 0x960
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2240      	movs	r2, #64	; 0x40
 80074a2:	f883 2961 	strb.w	r2, [r3, #2401]	; 0x961
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2240      	movs	r2, #64	; 0x40
 80074aa:	f883 2962 	strb.w	r2, [r3, #2402]	; 0x962
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2240      	movs	r2, #64	; 0x40
 80074b2:	f883 2963 	strb.w	r2, [r3, #2403]	; 0x963
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2240      	movs	r2, #64	; 0x40
 80074ba:	f883 2964 	strb.w	r2, [r3, #2404]	; 0x964
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2240      	movs	r2, #64	; 0x40
 80074c2:	f883 2965 	strb.w	r2, [r3, #2405]	; 0x965
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 2967 	strb.w	r2, [r3, #2407]	; 0x967
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2202      	movs	r2, #2
 80074d2:	f883 2968 	strb.w	r2, [r3, #2408]	; 0x968
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2204      	movs	r2, #4
 80074da:	f883 2969 	strb.w	r2, [r3, #2409]	; 0x969
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2220      	movs	r2, #32
 80074e2:	f883 296b 	strb.w	r2, [r3, #2411]	; 0x96b
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2254      	movs	r2, #84	; 0x54
 80074ea:	f883 296c 	strb.w	r2, [r3, #2412]	; 0x96c
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2254      	movs	r2, #84	; 0x54
 80074f2:	f883 296d 	strb.w	r2, [r3, #2413]	; 0x96d
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2254      	movs	r2, #84	; 0x54
 80074fa:	f883 296e 	strb.w	r2, [r3, #2414]	; 0x96e
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2278      	movs	r2, #120	; 0x78
 8007502:	f883 296f 	strb.w	r2, [r3, #2415]	; 0x96f
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	227f      	movs	r2, #127	; 0x7f
 800750a:	f883 2970 	strb.w	r2, [r3, #2416]	; 0x970
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2248      	movs	r2, #72	; 0x48
 8007512:	f883 2971 	strb.w	r2, [r3, #2417]	; 0x971
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2244      	movs	r2, #68	; 0x44
 800751a:	f883 2972 	strb.w	r2, [r3, #2418]	; 0x972
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2244      	movs	r2, #68	; 0x44
 8007522:	f883 2973 	strb.w	r2, [r3, #2419]	; 0x973
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2238      	movs	r2, #56	; 0x38
 800752a:	f883 2974 	strb.w	r2, [r3, #2420]	; 0x974
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2238      	movs	r2, #56	; 0x38
 8007532:	f883 2975 	strb.w	r2, [r3, #2421]	; 0x975
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2244      	movs	r2, #68	; 0x44
 800753a:	f883 2976 	strb.w	r2, [r3, #2422]	; 0x976
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2244      	movs	r2, #68	; 0x44
 8007542:	f883 2977 	strb.w	r2, [r3, #2423]	; 0x977
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2244      	movs	r2, #68	; 0x44
 800754a:	f883 2978 	strb.w	r2, [r3, #2424]	; 0x978
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2220      	movs	r2, #32
 8007552:	f883 2979 	strb.w	r2, [r3, #2425]	; 0x979
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2238      	movs	r2, #56	; 0x38
 800755a:	f883 297a 	strb.w	r2, [r3, #2426]	; 0x97a
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2244      	movs	r2, #68	; 0x44
 8007562:	f883 297b 	strb.w	r2, [r3, #2427]	; 0x97b
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2244      	movs	r2, #68	; 0x44
 800756a:	f883 297c 	strb.w	r2, [r3, #2428]	; 0x97c
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2248      	movs	r2, #72	; 0x48
 8007572:	f883 297d 	strb.w	r2, [r3, #2429]	; 0x97d
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	227f      	movs	r2, #127	; 0x7f
 800757a:	f883 297e 	strb.w	r2, [r3, #2430]	; 0x97e
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2238      	movs	r2, #56	; 0x38
 8007582:	f883 297f 	strb.w	r2, [r3, #2431]	; 0x97f
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2254      	movs	r2, #84	; 0x54
 800758a:	f883 2980 	strb.w	r2, [r3, #2432]	; 0x980
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2254      	movs	r2, #84	; 0x54
 8007592:	f883 2981 	strb.w	r2, [r3, #2433]	; 0x981
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2254      	movs	r2, #84	; 0x54
 800759a:	f883 2982 	strb.w	r2, [r3, #2434]	; 0x982
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2218      	movs	r2, #24
 80075a2:	f883 2983 	strb.w	r2, [r3, #2435]	; 0x983
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2208      	movs	r2, #8
 80075aa:	f883 2984 	strb.w	r2, [r3, #2436]	; 0x984
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	227e      	movs	r2, #126	; 0x7e
 80075b2:	f883 2985 	strb.w	r2, [r3, #2437]	; 0x985
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2209      	movs	r2, #9
 80075ba:	f883 2986 	strb.w	r2, [r3, #2438]	; 0x986
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 2987 	strb.w	r2, [r3, #2439]	; 0x987
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2202      	movs	r2, #2
 80075ca:	f883 2988 	strb.w	r2, [r3, #2440]	; 0x988
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2208      	movs	r2, #8
 80075d2:	f883 2989 	strb.w	r2, [r3, #2441]	; 0x989
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2214      	movs	r2, #20
 80075da:	f883 298a 	strb.w	r2, [r3, #2442]	; 0x98a
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2254      	movs	r2, #84	; 0x54
 80075e2:	f883 298b 	strb.w	r2, [r3, #2443]	; 0x98b
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2254      	movs	r2, #84	; 0x54
 80075ea:	f883 298c 	strb.w	r2, [r3, #2444]	; 0x98c
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	223c      	movs	r2, #60	; 0x3c
 80075f2:	f883 298d 	strb.w	r2, [r3, #2445]	; 0x98d
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	227f      	movs	r2, #127	; 0x7f
 80075fa:	f883 298e 	strb.w	r2, [r3, #2446]	; 0x98e
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2208      	movs	r2, #8
 8007602:	f883 298f 	strb.w	r2, [r3, #2447]	; 0x98f
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2204      	movs	r2, #4
 800760a:	f883 2990 	strb.w	r2, [r3, #2448]	; 0x990
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2204      	movs	r2, #4
 8007612:	f883 2991 	strb.w	r2, [r3, #2449]	; 0x991
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2278      	movs	r2, #120	; 0x78
 800761a:	f883 2992 	strb.w	r2, [r3, #2450]	; 0x992
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2244      	movs	r2, #68	; 0x44
 8007622:	f883 2994 	strb.w	r2, [r3, #2452]	; 0x994
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	227d      	movs	r2, #125	; 0x7d
 800762a:	f883 2995 	strb.w	r2, [r3, #2453]	; 0x995
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2240      	movs	r2, #64	; 0x40
 8007632:	f883 2996 	strb.w	r2, [r3, #2454]	; 0x996
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2220      	movs	r2, #32
 800763a:	f883 2998 	strb.w	r2, [r3, #2456]	; 0x998
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2240      	movs	r2, #64	; 0x40
 8007642:	f883 2999 	strb.w	r2, [r3, #2457]	; 0x999
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2244      	movs	r2, #68	; 0x44
 800764a:	f883 299a 	strb.w	r2, [r3, #2458]	; 0x99a
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	223d      	movs	r2, #61	; 0x3d
 8007652:	f883 299b 	strb.w	r2, [r3, #2459]	; 0x99b
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	227f      	movs	r2, #127	; 0x7f
 800765a:	f883 299e 	strb.w	r2, [r3, #2462]	; 0x99e
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2210      	movs	r2, #16
 8007662:	f883 299f 	strb.w	r2, [r3, #2463]	; 0x99f
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2228      	movs	r2, #40	; 0x28
 800766a:	f883 29a0 	strb.w	r2, [r3, #2464]	; 0x9a0
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2244      	movs	r2, #68	; 0x44
 8007672:	f883 29a1 	strb.w	r2, [r3, #2465]	; 0x9a1
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2241      	movs	r2, #65	; 0x41
 800767a:	f883 29a3 	strb.w	r2, [r3, #2467]	; 0x9a3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	227f      	movs	r2, #127	; 0x7f
 8007682:	f883 29a4 	strb.w	r2, [r3, #2468]	; 0x9a4
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2240      	movs	r2, #64	; 0x40
 800768a:	f883 29a5 	strb.w	r2, [r3, #2469]	; 0x9a5
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	227c      	movs	r2, #124	; 0x7c
 8007692:	f883 29a7 	strb.w	r2, [r3, #2471]	; 0x9a7
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2204      	movs	r2, #4
 800769a:	f883 29a8 	strb.w	r2, [r3, #2472]	; 0x9a8
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2218      	movs	r2, #24
 80076a2:	f883 29a9 	strb.w	r2, [r3, #2473]	; 0x9a9
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2204      	movs	r2, #4
 80076aa:	f883 29aa 	strb.w	r2, [r3, #2474]	; 0x9aa
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2278      	movs	r2, #120	; 0x78
 80076b2:	f883 29ab 	strb.w	r2, [r3, #2475]	; 0x9ab
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	227c      	movs	r2, #124	; 0x7c
 80076ba:	f883 29ac 	strb.w	r2, [r3, #2476]	; 0x9ac
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2208      	movs	r2, #8
 80076c2:	f883 29ad 	strb.w	r2, [r3, #2477]	; 0x9ad
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2204      	movs	r2, #4
 80076ca:	f883 29ae 	strb.w	r2, [r3, #2478]	; 0x9ae
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2204      	movs	r2, #4
 80076d2:	f883 29af 	strb.w	r2, [r3, #2479]	; 0x9af
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2278      	movs	r2, #120	; 0x78
 80076da:	f883 29b0 	strb.w	r2, [r3, #2480]	; 0x9b0
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2238      	movs	r2, #56	; 0x38
 80076e2:	f883 29b1 	strb.w	r2, [r3, #2481]	; 0x9b1
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2244      	movs	r2, #68	; 0x44
 80076ea:	f883 29b2 	strb.w	r2, [r3, #2482]	; 0x9b2
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2244      	movs	r2, #68	; 0x44
 80076f2:	f883 29b3 	strb.w	r2, [r3, #2483]	; 0x9b3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2244      	movs	r2, #68	; 0x44
 80076fa:	f883 29b4 	strb.w	r2, [r3, #2484]	; 0x9b4
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2238      	movs	r2, #56	; 0x38
 8007702:	f883 29b5 	strb.w	r2, [r3, #2485]	; 0x9b5
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	227c      	movs	r2, #124	; 0x7c
 800770a:	f883 29b6 	strb.w	r2, [r3, #2486]	; 0x9b6
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2214      	movs	r2, #20
 8007712:	f883 29b7 	strb.w	r2, [r3, #2487]	; 0x9b7
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2214      	movs	r2, #20
 800771a:	f883 29b8 	strb.w	r2, [r3, #2488]	; 0x9b8
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2214      	movs	r2, #20
 8007722:	f883 29b9 	strb.w	r2, [r3, #2489]	; 0x9b9
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2208      	movs	r2, #8
 800772a:	f883 29ba 	strb.w	r2, [r3, #2490]	; 0x9ba
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2208      	movs	r2, #8
 8007732:	f883 29bb 	strb.w	r2, [r3, #2491]	; 0x9bb
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2214      	movs	r2, #20
 800773a:	f883 29bc 	strb.w	r2, [r3, #2492]	; 0x9bc
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2214      	movs	r2, #20
 8007742:	f883 29bd 	strb.w	r2, [r3, #2493]	; 0x9bd
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2218      	movs	r2, #24
 800774a:	f883 29be 	strb.w	r2, [r3, #2494]	; 0x9be
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	227c      	movs	r2, #124	; 0x7c
 8007752:	f883 29bf 	strb.w	r2, [r3, #2495]	; 0x9bf
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	227c      	movs	r2, #124	; 0x7c
 800775a:	f883 29c0 	strb.w	r2, [r3, #2496]	; 0x9c0
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2208      	movs	r2, #8
 8007762:	f883 29c1 	strb.w	r2, [r3, #2497]	; 0x9c1
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2204      	movs	r2, #4
 800776a:	f883 29c2 	strb.w	r2, [r3, #2498]	; 0x9c2
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2204      	movs	r2, #4
 8007772:	f883 29c3 	strb.w	r2, [r3, #2499]	; 0x9c3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2208      	movs	r2, #8
 800777a:	f883 29c4 	strb.w	r2, [r3, #2500]	; 0x9c4
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2248      	movs	r2, #72	; 0x48
 8007782:	f883 29c5 	strb.w	r2, [r3, #2501]	; 0x9c5
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2254      	movs	r2, #84	; 0x54
 800778a:	f883 29c6 	strb.w	r2, [r3, #2502]	; 0x9c6
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2254      	movs	r2, #84	; 0x54
 8007792:	f883 29c7 	strb.w	r2, [r3, #2503]	; 0x9c7
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2254      	movs	r2, #84	; 0x54
 800779a:	f883 29c8 	strb.w	r2, [r3, #2504]	; 0x9c8
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2220      	movs	r2, #32
 80077a2:	f883 29c9 	strb.w	r2, [r3, #2505]	; 0x9c9
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2204      	movs	r2, #4
 80077aa:	f883 29ca 	strb.w	r2, [r3, #2506]	; 0x9ca
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	223f      	movs	r2, #63	; 0x3f
 80077b2:	f883 29cb 	strb.w	r2, [r3, #2507]	; 0x9cb
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2244      	movs	r2, #68	; 0x44
 80077ba:	f883 29cc 	strb.w	r2, [r3, #2508]	; 0x9cc
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2240      	movs	r2, #64	; 0x40
 80077c2:	f883 29cd 	strb.w	r2, [r3, #2509]	; 0x9cd
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2220      	movs	r2, #32
 80077ca:	f883 29ce 	strb.w	r2, [r3, #2510]	; 0x9ce
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	223c      	movs	r2, #60	; 0x3c
 80077d2:	f883 29cf 	strb.w	r2, [r3, #2511]	; 0x9cf
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2240      	movs	r2, #64	; 0x40
 80077da:	f883 29d0 	strb.w	r2, [r3, #2512]	; 0x9d0
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2240      	movs	r2, #64	; 0x40
 80077e2:	f883 29d1 	strb.w	r2, [r3, #2513]	; 0x9d1
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2220      	movs	r2, #32
 80077ea:	f883 29d2 	strb.w	r2, [r3, #2514]	; 0x9d2
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	227c      	movs	r2, #124	; 0x7c
 80077f2:	f883 29d3 	strb.w	r2, [r3, #2515]	; 0x9d3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	221c      	movs	r2, #28
 80077fa:	f883 29d4 	strb.w	r2, [r3, #2516]	; 0x9d4
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2220      	movs	r2, #32
 8007802:	f883 29d5 	strb.w	r2, [r3, #2517]	; 0x9d5
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2240      	movs	r2, #64	; 0x40
 800780a:	f883 29d6 	strb.w	r2, [r3, #2518]	; 0x9d6
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2220      	movs	r2, #32
 8007812:	f883 29d7 	strb.w	r2, [r3, #2519]	; 0x9d7
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	221c      	movs	r2, #28
 800781a:	f883 29d8 	strb.w	r2, [r3, #2520]	; 0x9d8
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	223c      	movs	r2, #60	; 0x3c
 8007822:	f883 29d9 	strb.w	r2, [r3, #2521]	; 0x9d9
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2240      	movs	r2, #64	; 0x40
 800782a:	f883 29da 	strb.w	r2, [r3, #2522]	; 0x9da
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2230      	movs	r2, #48	; 0x30
 8007832:	f883 29db 	strb.w	r2, [r3, #2523]	; 0x9db
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2240      	movs	r2, #64	; 0x40
 800783a:	f883 29dc 	strb.w	r2, [r3, #2524]	; 0x9dc
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	223c      	movs	r2, #60	; 0x3c
 8007842:	f883 29dd 	strb.w	r2, [r3, #2525]	; 0x9dd
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2244      	movs	r2, #68	; 0x44
 800784a:	f883 29de 	strb.w	r2, [r3, #2526]	; 0x9de
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2228      	movs	r2, #40	; 0x28
 8007852:	f883 29df 	strb.w	r2, [r3, #2527]	; 0x9df
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2210      	movs	r2, #16
 800785a:	f883 29e0 	strb.w	r2, [r3, #2528]	; 0x9e0
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2228      	movs	r2, #40	; 0x28
 8007862:	f883 29e1 	strb.w	r2, [r3, #2529]	; 0x9e1
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2244      	movs	r2, #68	; 0x44
 800786a:	f883 29e2 	strb.w	r2, [r3, #2530]	; 0x9e2
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	220c      	movs	r2, #12
 8007872:	f883 29e3 	strb.w	r2, [r3, #2531]	; 0x9e3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2250      	movs	r2, #80	; 0x50
 800787a:	f883 29e4 	strb.w	r2, [r3, #2532]	; 0x9e4
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2250      	movs	r2, #80	; 0x50
 8007882:	f883 29e5 	strb.w	r2, [r3, #2533]	; 0x9e5
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2250      	movs	r2, #80	; 0x50
 800788a:	f883 29e6 	strb.w	r2, [r3, #2534]	; 0x9e6
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	223c      	movs	r2, #60	; 0x3c
 8007892:	f883 29e7 	strb.w	r2, [r3, #2535]	; 0x9e7
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2244      	movs	r2, #68	; 0x44
 800789a:	f883 29e8 	strb.w	r2, [r3, #2536]	; 0x9e8
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2264      	movs	r2, #100	; 0x64
 80078a2:	f883 29e9 	strb.w	r2, [r3, #2537]	; 0x9e9
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2254      	movs	r2, #84	; 0x54
 80078aa:	f883 29ea 	strb.w	r2, [r3, #2538]	; 0x9ea
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	224c      	movs	r2, #76	; 0x4c
 80078b2:	f883 29eb 	strb.w	r2, [r3, #2539]	; 0x9eb
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2244      	movs	r2, #68	; 0x44
 80078ba:	f883 29ec 	strb.w	r2, [r3, #2540]	; 0x9ec
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2208      	movs	r2, #8
 80078c2:	f883 29ee 	strb.w	r2, [r3, #2542]	; 0x9ee
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2236      	movs	r2, #54	; 0x36
 80078ca:	f883 29ef 	strb.w	r2, [r3, #2543]	; 0x9ef
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2241      	movs	r2, #65	; 0x41
 80078d2:	f883 29f0 	strb.w	r2, [r3, #2544]	; 0x9f0
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	227f      	movs	r2, #127	; 0x7f
 80078da:	f883 29f4 	strb.w	r2, [r3, #2548]	; 0x9f4
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2241      	movs	r2, #65	; 0x41
 80078e2:	f883 29f8 	strb.w	r2, [r3, #2552]	; 0x9f8
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2236      	movs	r2, #54	; 0x36
 80078ea:	f883 29f9 	strb.w	r2, [r3, #2553]	; 0x9f9
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2208      	movs	r2, #8
 80078f2:	f883 29fa 	strb.w	r2, [r3, #2554]	; 0x9fa
	// TODO Auto-generated constructor stub

}
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4618      	mov	r0, r3
 80078fa:	3708      	adds	r7, #8
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bdb0      	pop	{r4, r5, r7, pc}

08007900 <_ZN4GLCDD1Ev>:

GLCD::~GLCD() {
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	4a05      	ldr	r2, [pc, #20]	; (8007920 <_ZN4GLCDD1Ev+0x20>)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	601a      	str	r2, [r3, #0]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4618      	mov	r0, r3
 8007912:	f7fb ff71 	bl	80037f8 <_ZN6commonD1Ev>
	// TODO Auto-generated destructor stub
}
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4618      	mov	r0, r3
 800791a:	3708      	adds	r7, #8
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	0801060c 	.word	0x0801060c

08007924 <_ZN4GLCDD0Ev>:
GLCD::~GLCD() {
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
}
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f7ff ffe7 	bl	8007900 <_ZN4GLCDD1Ev>
 8007932:	f640 2104 	movw	r1, #2564	; 0xa04
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f007 ff7b 	bl	800f832 <_ZdlPvj>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4618      	mov	r0, r3
 8007940:	3708      	adds	r7, #8
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
	...

08007948 <_ZN4GLCD9m_ctrloffEv>:

void GLCD::m_ctrloff(){
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8007950:	2200      	movs	r2, #0
 8007952:	2110      	movs	r1, #16
 8007954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007958:	f003 fcfa 	bl	800b350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 800795c:	2200      	movs	r2, #0
 800795e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007962:	480c      	ldr	r0, [pc, #48]	; (8007994 <_ZN4GLCD9m_ctrloffEv+0x4c>)
 8007964:	f003 fcf4 	bl	800b350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8007968:	2200      	movs	r2, #0
 800796a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800796e:	4809      	ldr	r0, [pc, #36]	; (8007994 <_ZN4GLCD9m_ctrloffEv+0x4c>)
 8007970:	f003 fcee 	bl	800b350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 8007974:	2200      	movs	r2, #0
 8007976:	2104      	movs	r1, #4
 8007978:	4807      	ldr	r0, [pc, #28]	; (8007998 <_ZN4GLCD9m_ctrloffEv+0x50>)
 800797a:	f003 fce9 	bl	800b350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_RESET);
 800797e:	2200      	movs	r2, #0
 8007980:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007984:	4803      	ldr	r0, [pc, #12]	; (8007994 <_ZN4GLCD9m_ctrloffEv+0x4c>)
 8007986:	f003 fce3 	bl	800b350 <HAL_GPIO_WritePin>
}
 800798a:	bf00      	nop
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	48000800 	.word	0x48000800
 8007998:	48000c00 	.word	0x48000c00

0800799c <_ZN4GLCD7m_delayEjh>:
	__HAL_TIM_SET_COUNTER(&htim1, 0);  // reset the counter
	while ((__HAL_TIM_GET_COUNTER(&htim1))<delay);  // wait for the delay to complete
}

void GLCD::m_delay(unsigned int j,uint8_t a)
{
 800799c:	b480      	push	{r7}
 800799e:	b087      	sub	sp, #28
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	4613      	mov	r3, r2
 80079a8:	71fb      	strb	r3, [r7, #7]
	unsigned int i,k;
	for(i=0;i<j;i++)
 80079aa:	2300      	movs	r3, #0
 80079ac:	617b      	str	r3, [r7, #20]
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d20d      	bcs.n	80079d2 <_ZN4GLCD7m_delayEjh+0x36>
 	{for(k=0;k<a;k++);
 80079b6:	2300      	movs	r3, #0
 80079b8:	613b      	str	r3, [r7, #16]
 80079ba:	79fb      	ldrb	r3, [r7, #7]
 80079bc:	693a      	ldr	r2, [r7, #16]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d203      	bcs.n	80079ca <_ZN4GLCD7m_delayEjh+0x2e>
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	3301      	adds	r3, #1
 80079c6:	613b      	str	r3, [r7, #16]
 80079c8:	e7f7      	b.n	80079ba <_ZN4GLCD7m_delayEjh+0x1e>
	for(i=0;i<j;i++)
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	3301      	adds	r3, #1
 80079ce:	617b      	str	r3, [r7, #20]
 80079d0:	e7ed      	b.n	80079ae <_ZN4GLCD7m_delayEjh+0x12>
	}
}
 80079d2:	bf00      	nop
 80079d4:	371c      	adds	r7, #28
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
	...

080079e0 <_ZN4GLCD16m_IOWritethedataEh>:

void GLCD::m_IOWritethedata(const uint8_t finput)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	460b      	mov	r3, r1
 80079ea:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOC,LCDD0_Pin,ReadtheValueAssignPinstate(0,finput));
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	78fa      	ldrb	r2, [r7, #3]
 80079f0:	2100      	movs	r1, #0
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fb ffe9 	bl	80039ca <_ZN6common26ReadtheValueAssignPinstateEhh>
 80079f8:	4603      	mov	r3, r0
 80079fa:	461a      	mov	r2, r3
 80079fc:	2108      	movs	r1, #8
 80079fe:	482f      	ldr	r0, [pc, #188]	; (8007abc <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8007a00:	f003 fca6 	bl	800b350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD1_Pin,ReadtheValueAssignPinstate(1,finput));
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	78fa      	ldrb	r2, [r7, #3]
 8007a08:	2101      	movs	r1, #1
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7fb ffdd 	bl	80039ca <_ZN6common26ReadtheValueAssignPinstateEhh>
 8007a10:	4603      	mov	r3, r0
 8007a12:	461a      	mov	r2, r3
 8007a14:	2104      	movs	r1, #4
 8007a16:	4829      	ldr	r0, [pc, #164]	; (8007abc <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8007a18:	f003 fc9a 	bl	800b350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD2_Pin,ReadtheValueAssignPinstate(2,finput));
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	78fa      	ldrb	r2, [r7, #3]
 8007a20:	2102      	movs	r1, #2
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7fb ffd1 	bl	80039ca <_ZN6common26ReadtheValueAssignPinstateEhh>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	2102      	movs	r1, #2
 8007a2e:	4823      	ldr	r0, [pc, #140]	; (8007abc <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8007a30:	f003 fc8e 	bl	800b350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD3_Pin,ReadtheValueAssignPinstate(3,finput));
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	78fa      	ldrb	r2, [r7, #3]
 8007a38:	2103      	movs	r1, #3
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7fb ffc5 	bl	80039ca <_ZN6common26ReadtheValueAssignPinstateEhh>
 8007a40:	4603      	mov	r3, r0
 8007a42:	461a      	mov	r2, r3
 8007a44:	2101      	movs	r1, #1
 8007a46:	481d      	ldr	r0, [pc, #116]	; (8007abc <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8007a48:	f003 fc82 	bl	800b350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD4_Pin,ReadtheValueAssignPinstate(4,finput));
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	78fa      	ldrb	r2, [r7, #3]
 8007a50:	2104      	movs	r1, #4
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7fb ffb9 	bl	80039ca <_ZN6common26ReadtheValueAssignPinstateEhh>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a60:	4816      	ldr	r0, [pc, #88]	; (8007abc <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8007a62:	f003 fc75 	bl	800b350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD5_Pin,ReadtheValueAssignPinstate(5,finput));
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	78fa      	ldrb	r2, [r7, #3]
 8007a6a:	2105      	movs	r1, #5
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7fb ffac 	bl	80039ca <_ZN6common26ReadtheValueAssignPinstateEhh>
 8007a72:	4603      	mov	r3, r0
 8007a74:	461a      	mov	r2, r3
 8007a76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007a7a:	4810      	ldr	r0, [pc, #64]	; (8007abc <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8007a7c:	f003 fc68 	bl	800b350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD6_Pin,ReadtheValueAssignPinstate(6,finput));
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	78fa      	ldrb	r2, [r7, #3]
 8007a84:	2106      	movs	r1, #6
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7fb ff9f 	bl	80039ca <_ZN6common26ReadtheValueAssignPinstateEhh>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	461a      	mov	r2, r3
 8007a90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007a94:	4809      	ldr	r0, [pc, #36]	; (8007abc <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8007a96:	f003 fc5b 	bl	800b350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,LCDD7_Pin, ReadtheValueAssignPinstate(7,finput));
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	78fa      	ldrb	r2, [r7, #3]
 8007a9e:	2107      	movs	r1, #7
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7fb ff92 	bl	80039ca <_ZN6common26ReadtheValueAssignPinstateEhh>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	2120      	movs	r1, #32
 8007aac:	4804      	ldr	r0, [pc, #16]	; (8007ac0 <_ZN4GLCD16m_IOWritethedataEh+0xe0>)
 8007aae:	f003 fc4f 	bl	800b350 <HAL_GPIO_WritePin>
}
 8007ab2:	bf00      	nop
 8007ab4:	3708      	adds	r7, #8
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	48000800 	.word	0x48000800
 8007ac0:	48000400 	.word	0x48000400

08007ac4 <_ZN4GLCD11m_displayonEv>:

void GLCD::m_displayon(){
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
	m_ctrloff();
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f7ff ff3b 	bl	8007948 <_ZN4GLCD9m_ctrloffEv>
	m_IOWritethedata(0x3f);
 8007ad2:	213f      	movs	r1, #63	; 0x3f
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f7ff ff83 	bl	80079e0 <_ZN4GLCD16m_IOWritethedataEh>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 8007ada:	2201      	movs	r2, #1
 8007adc:	2104      	movs	r1, #4
 8007ade:	4815      	ldr	r0, [pc, #84]	; (8007b34 <_ZN4GLCD11m_displayonEv+0x70>)
 8007ae0:	f003 fc36 	bl	800b350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007aea:	4813      	ldr	r0, [pc, #76]	; (8007b38 <_ZN4GLCD11m_displayonEv+0x74>)
 8007aec:	f003 fc30 	bl	800b350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8007af0:	2200      	movs	r2, #0
 8007af2:	2110      	movs	r1, #16
 8007af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007af8:	f003 fc2a 	bl	800b350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8007afc:	2200      	movs	r2, #0
 8007afe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007b02:	480d      	ldr	r0, [pc, #52]	; (8007b38 <_ZN4GLCD11m_displayonEv+0x74>)
 8007b04:	f003 fc24 	bl	800b350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007b0e:	480a      	ldr	r0, [pc, #40]	; (8007b38 <_ZN4GLCD11m_displayonEv+0x74>)
 8007b10:	f003 fc1e 	bl	800b350 <HAL_GPIO_WritePin>
	//m_delay(GLCDDELAY);
	m_delay(10,100);
 8007b14:	2264      	movs	r2, #100	; 0x64
 8007b16:	210a      	movs	r1, #10
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f7ff ff3f 	bl	800799c <_ZN4GLCD7m_delayEjh>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007b24:	4804      	ldr	r0, [pc, #16]	; (8007b38 <_ZN4GLCD11m_displayonEv+0x74>)
 8007b26:	f003 fc13 	bl	800b350 <HAL_GPIO_WritePin>
}
 8007b2a:	bf00      	nop
 8007b2c:	3708      	adds	r7, #8
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	48000c00 	.word	0x48000c00
 8007b38:	48000800 	.word	0x48000800

08007b3c <_ZN4GLCD11m_setcolumnEh>:
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
}


void GLCD::m_setcolumn(uint8_t Columvalue)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	460b      	mov	r3, r1
 8007b46:	70fb      	strb	r3, [r7, #3]
	uint8_t dport;
	if(Columvalue <64)
 8007b48:	78fb      	ldrb	r3, [r7, #3]
 8007b4a:	2b3f      	cmp	r3, #63	; 0x3f
 8007b4c:	d839      	bhi.n	8007bc2 <_ZN4GLCD11m_setcolumnEh+0x86>
	{
		m_ctrloff();
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7ff fefa 	bl	8007948 <_ZN4GLCD9m_ctrloffEv>
		c=Columvalue;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	78fa      	ldrb	r2, [r7, #3]
 8007b58:	771a      	strb	r2, [r3, #28]
		m_IOWritethedata((0x40|(Columvalue&63)));
 8007b5a:	78fb      	ldrb	r3, [r7, #3]
 8007b5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	4619      	mov	r1, r3
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f7ff ff38 	bl	80079e0 <_ZN4GLCD16m_IOWritethedataEh>
		HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 8007b70:	2201      	movs	r2, #1
 8007b72:	2104      	movs	r1, #4
 8007b74:	4831      	ldr	r0, [pc, #196]	; (8007c3c <_ZN4GLCD11m_setcolumnEh+0x100>)
 8007b76:	f003 fbeb 	bl	800b350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_RESET);
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007b80:	482f      	ldr	r0, [pc, #188]	; (8007c40 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8007b82:	f003 fbe5 	bl	800b350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8007b86:	2200      	movs	r2, #0
 8007b88:	2110      	movs	r1, #16
 8007b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007b8e:	f003 fbdf 	bl	800b350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8007b92:	2200      	movs	r2, #0
 8007b94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007b98:	4829      	ldr	r0, [pc, #164]	; (8007c40 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8007b9a:	f003 fbd9 	bl	800b350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007ba4:	4826      	ldr	r0, [pc, #152]	; (8007c40 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8007ba6:	f003 fbd3 	bl	800b350 <HAL_GPIO_WritePin>
		//m_delay(GLCDDELAY);
		m_delay(10,100);
 8007baa:	2264      	movs	r2, #100	; 0x64
 8007bac:	210a      	movs	r1, #10
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f7ff fef4 	bl	800799c <_ZN4GLCD7m_delayEjh>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007bba:	4821      	ldr	r0, [pc, #132]	; (8007c40 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8007bbc:	f003 fbc8 	bl	800b350 <HAL_GPIO_WritePin>
		//m_delay(GLCDDELAY);
		m_delay(10,100);
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);

	}
}
 8007bc0:	e038      	b.n	8007c34 <_ZN4GLCD11m_setcolumnEh+0xf8>
		c=Columvalue;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	78fa      	ldrb	r2, [r7, #3]
 8007bc6:	771a      	strb	r2, [r3, #28]
		dport=0x40|((Columvalue-64)&63);	  //0x40 represents Column 0
 8007bc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007bcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bd0:	b25b      	sxtb	r3, r3
 8007bd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bd6:	b25b      	sxtb	r3, r3
 8007bd8:	73fb      	strb	r3, [r7, #15]
		m_IOWritethedata(dport);
 8007bda:	7bfb      	ldrb	r3, [r7, #15]
 8007bdc:	4619      	mov	r1, r3
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f7ff fefe 	bl	80079e0 <_ZN4GLCD16m_IOWritethedataEh>
		HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 8007be4:	2200      	movs	r2, #0
 8007be6:	2104      	movs	r1, #4
 8007be8:	4814      	ldr	r0, [pc, #80]	; (8007c3c <_ZN4GLCD11m_setcolumnEh+0x100>)
 8007bea:	f003 fbb1 	bl	800b350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007bf4:	4812      	ldr	r0, [pc, #72]	; (8007c40 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8007bf6:	f003 fbab 	bl	800b350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	2110      	movs	r1, #16
 8007bfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c02:	f003 fba5 	bl	800b350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8007c06:	2200      	movs	r2, #0
 8007c08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007c0c:	480c      	ldr	r0, [pc, #48]	; (8007c40 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8007c0e:	f003 fb9f 	bl	800b350 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8007c12:	2201      	movs	r2, #1
 8007c14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c18:	4809      	ldr	r0, [pc, #36]	; (8007c40 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8007c1a:	f003 fb99 	bl	800b350 <HAL_GPIO_WritePin>
		m_delay(10,100);
 8007c1e:	2264      	movs	r2, #100	; 0x64
 8007c20:	210a      	movs	r1, #10
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f7ff feba 	bl	800799c <_ZN4GLCD7m_delayEjh>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c2e:	4804      	ldr	r0, [pc, #16]	; (8007c40 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8007c30:	f003 fb8e 	bl	800b350 <HAL_GPIO_WritePin>
}
 8007c34:	bf00      	nop
 8007c36:	3710      	adds	r7, #16
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	48000c00 	.word	0x48000c00
 8007c40:	48000800 	.word	0x48000800

08007c44 <_ZN4GLCD9m_setpageEh>:

void GLCD::m_setpage(uint8_t x)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	70fb      	strb	r3, [r7, #3]
	uint8_t dport;
	m_ctrloff();
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f7ff fe79 	bl	8007948 <_ZN4GLCD9m_ctrloffEv>
	dport= 0xb8|x;	   //0xb8 represents Page 0
 8007c56:	78fb      	ldrb	r3, [r7, #3]
 8007c58:	f063 0347 	orn	r3, r3, #71	; 0x47
 8007c5c:	73fb      	strb	r3, [r7, #15]
	m_IOWritethedata(dport);
 8007c5e:	7bfb      	ldrb	r3, [r7, #15]
 8007c60:	4619      	mov	r1, r3
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7ff febc 	bl	80079e0 <_ZN4GLCD16m_IOWritethedataEh>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 8007c68:	2201      	movs	r2, #1
 8007c6a:	2104      	movs	r1, #4
 8007c6c:	4814      	ldr	r0, [pc, #80]	; (8007cc0 <_ZN4GLCD9m_setpageEh+0x7c>)
 8007c6e:	f003 fb6f 	bl	800b350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 8007c72:	2201      	movs	r2, #1
 8007c74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c78:	4812      	ldr	r0, [pc, #72]	; (8007cc4 <_ZN4GLCD9m_setpageEh+0x80>)
 8007c7a:	f003 fb69 	bl	800b350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8007c7e:	2200      	movs	r2, #0
 8007c80:	2110      	movs	r1, #16
 8007c82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c86:	f003 fb63 	bl	800b350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007c90:	480c      	ldr	r0, [pc, #48]	; (8007cc4 <_ZN4GLCD9m_setpageEh+0x80>)
 8007c92:	f003 fb5d 	bl	800b350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8007c96:	2201      	movs	r2, #1
 8007c98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c9c:	4809      	ldr	r0, [pc, #36]	; (8007cc4 <_ZN4GLCD9m_setpageEh+0x80>)
 8007c9e:	f003 fb57 	bl	800b350 <HAL_GPIO_WritePin>
	//m_delay(GLCDDELAY);
	m_delay(10,100);
 8007ca2:	2264      	movs	r2, #100	; 0x64
 8007ca4:	210a      	movs	r1, #10
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f7ff fe78 	bl	800799c <_ZN4GLCD7m_delayEjh>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8007cac:	2200      	movs	r2, #0
 8007cae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007cb2:	4804      	ldr	r0, [pc, #16]	; (8007cc4 <_ZN4GLCD9m_setpageEh+0x80>)
 8007cb4:	f003 fb4c 	bl	800b350 <HAL_GPIO_WritePin>
}
 8007cb8:	bf00      	nop
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	48000c00 	.word	0x48000c00
 8007cc4:	48000800 	.word	0x48000800

08007cc8 <_ZN4GLCD14m_setstartlineEh>:

void GLCD::m_setstartline(uint8_t z)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	70fb      	strb	r3, [r7, #3]
	uint8_t dport;
	m_ctrloff();
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f7ff fe37 	bl	8007948 <_ZN4GLCD9m_ctrloffEv>
	dport=0xc0|z;	   //0xc0 represents Line 0
 8007cda:	78fb      	ldrb	r3, [r7, #3]
 8007cdc:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8007ce0:	73fb      	strb	r3, [r7, #15]
	m_IOWritethedata(dport);
 8007ce2:	7bfb      	ldrb	r3, [r7, #15]
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f7ff fe7a 	bl	80079e0 <_ZN4GLCD16m_IOWritethedataEh>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 8007cec:	2201      	movs	r2, #1
 8007cee:	2104      	movs	r1, #4
 8007cf0:	4814      	ldr	r0, [pc, #80]	; (8007d44 <_ZN4GLCD14m_setstartlineEh+0x7c>)
 8007cf2:	f003 fb2d 	bl	800b350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007cfc:	4812      	ldr	r0, [pc, #72]	; (8007d48 <_ZN4GLCD14m_setstartlineEh+0x80>)
 8007cfe:	f003 fb27 	bl	800b350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8007d02:	2200      	movs	r2, #0
 8007d04:	2110      	movs	r1, #16
 8007d06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d0a:	f003 fb21 	bl	800b350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007d14:	480c      	ldr	r0, [pc, #48]	; (8007d48 <_ZN4GLCD14m_setstartlineEh+0x80>)
 8007d16:	f003 fb1b 	bl	800b350 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007d20:	4809      	ldr	r0, [pc, #36]	; (8007d48 <_ZN4GLCD14m_setstartlineEh+0x80>)
 8007d22:	f003 fb15 	bl	800b350 <HAL_GPIO_WritePin>
	//m_delay(GLCDDELAY);
	m_delay(10,100);
 8007d26:	2264      	movs	r2, #100	; 0x64
 8007d28:	210a      	movs	r1, #10
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f7ff fe36 	bl	800799c <_ZN4GLCD7m_delayEjh>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8007d30:	2200      	movs	r2, #0
 8007d32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007d36:	4804      	ldr	r0, [pc, #16]	; (8007d48 <_ZN4GLCD14m_setstartlineEh+0x80>)
 8007d38:	f003 fb0a 	bl	800b350 <HAL_GPIO_WritePin>
}
 8007d3c:	bf00      	nop
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	48000c00 	.word	0x48000c00
 8007d48:	48000800 	.word	0x48000800

08007d4c <_ZN4GLCD9m_lcddataEPht>:

void GLCD::m_lcddata(uint8_t *value,uint16_t limit)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b086      	sub	sp, #24
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	4613      	mov	r3, r2
 8007d58:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t dport;
	for(i=0;i<limit;i++)
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	82fb      	strh	r3, [r7, #22]
 8007d5e:	8afa      	ldrh	r2, [r7, #22]
 8007d60:	88fb      	ldrh	r3, [r7, #6]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	f080 8085 	bcs.w	8007e72 <_ZN4GLCD9m_lcddataEPht+0x126>
	{
		if(c<64)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	7f1b      	ldrb	r3, [r3, #28]
 8007d6c:	2b3f      	cmp	r3, #63	; 0x3f
 8007d6e:	d838      	bhi.n	8007de2 <_ZN4GLCD9m_lcddataEPht+0x96>
		{
			dport=value[i];
 8007d70:	8afb      	ldrh	r3, [r7, #22]
 8007d72:	68ba      	ldr	r2, [r7, #8]
 8007d74:	4413      	add	r3, r2
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	757b      	strb	r3, [r7, #21]
			m_IOWritethedata(dport);
 8007d7a:	7d7b      	ldrb	r3, [r7, #21]
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f7ff fe2e 	bl	80079e0 <_ZN4GLCD16m_IOWritethedataEh>
			HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 8007d84:	2201      	movs	r2, #1
 8007d86:	2104      	movs	r1, #4
 8007d88:	483b      	ldr	r0, [pc, #236]	; (8007e78 <_ZN4GLCD9m_lcddataEPht+0x12c>)
 8007d8a:	f003 fae1 	bl	800b350 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_RESET);
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007d94:	4839      	ldr	r0, [pc, #228]	; (8007e7c <_ZN4GLCD9m_lcddataEPht+0x130>)
 8007d96:	f003 fadb 	bl	800b350 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_SET);
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	2110      	movs	r1, #16
 8007d9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007da2:	f003 fad5 	bl	800b350 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8007da6:	2200      	movs	r2, #0
 8007da8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007dac:	4833      	ldr	r0, [pc, #204]	; (8007e7c <_ZN4GLCD9m_lcddataEPht+0x130>)
 8007dae:	f003 facf 	bl	800b350 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8007db2:	2201      	movs	r2, #1
 8007db4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007db8:	4830      	ldr	r0, [pc, #192]	; (8007e7c <_ZN4GLCD9m_lcddataEPht+0x130>)
 8007dba:	f003 fac9 	bl	800b350 <HAL_GPIO_WritePin>
			//m_delay(GLCDDELAY);
			m_delay(10,100);
 8007dbe:	2264      	movs	r2, #100	; 0x64
 8007dc0:	210a      	movs	r1, #10
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f7ff fdea 	bl	800799c <_ZN4GLCD7m_delayEjh>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007dce:	482b      	ldr	r0, [pc, #172]	; (8007e7c <_ZN4GLCD9m_lcddataEPht+0x130>)
 8007dd0:	f003 fabe 	bl	800b350 <HAL_GPIO_WritePin>
			c++;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	7f1b      	ldrb	r3, [r3, #28]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	b2da      	uxtb	r2, r3
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	771a      	strb	r2, [r3, #28]
 8007de0:	e03d      	b.n	8007e5e <_ZN4GLCD9m_lcddataEPht+0x112>
		}
		else
		{
			m_setcolumn(c);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	7f1b      	ldrb	r3, [r3, #28]
 8007de6:	4619      	mov	r1, r3
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	f7ff fea7 	bl	8007b3c <_ZN4GLCD11m_setcolumnEh>
			dport=value[i];
 8007dee:	8afb      	ldrh	r3, [r7, #22]
 8007df0:	68ba      	ldr	r2, [r7, #8]
 8007df2:	4413      	add	r3, r2
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	757b      	strb	r3, [r7, #21]
			m_IOWritethedata(dport);
 8007df8:	7d7b      	ldrb	r3, [r7, #21]
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	68f8      	ldr	r0, [r7, #12]
 8007dfe:	f7ff fdef 	bl	80079e0 <_ZN4GLCD16m_IOWritethedataEh>
			HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 8007e02:	2200      	movs	r2, #0
 8007e04:	2104      	movs	r1, #4
 8007e06:	481c      	ldr	r0, [pc, #112]	; (8007e78 <_ZN4GLCD9m_lcddataEPht+0x12c>)
 8007e08:	f003 faa2 	bl	800b350 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007e12:	481a      	ldr	r0, [pc, #104]	; (8007e7c <_ZN4GLCD9m_lcddataEPht+0x130>)
 8007e14:	f003 fa9c 	bl	800b350 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_SET);
 8007e18:	2201      	movs	r2, #1
 8007e1a:	2110      	movs	r1, #16
 8007e1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007e20:	f003 fa96 	bl	800b350 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8007e24:	2200      	movs	r2, #0
 8007e26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007e2a:	4814      	ldr	r0, [pc, #80]	; (8007e7c <_ZN4GLCD9m_lcddataEPht+0x130>)
 8007e2c:	f003 fa90 	bl	800b350 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8007e30:	2201      	movs	r2, #1
 8007e32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007e36:	4811      	ldr	r0, [pc, #68]	; (8007e7c <_ZN4GLCD9m_lcddataEPht+0x130>)
 8007e38:	f003 fa8a 	bl	800b350 <HAL_GPIO_WritePin>
			//m_delay(GLCDDELAY);
			m_delay(10,100);
 8007e3c:	2264      	movs	r2, #100	; 0x64
 8007e3e:	210a      	movs	r1, #10
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f7ff fdab 	bl	800799c <_ZN4GLCD7m_delayEjh>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8007e46:	2200      	movs	r2, #0
 8007e48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007e4c:	480b      	ldr	r0, [pc, #44]	; (8007e7c <_ZN4GLCD9m_lcddataEPht+0x130>)
 8007e4e:	f003 fa7f 	bl	800b350 <HAL_GPIO_WritePin>
			c++;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	7f1b      	ldrb	r3, [r3, #28]
 8007e56:	3301      	adds	r3, #1
 8007e58:	b2da      	uxtb	r2, r3
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	771a      	strb	r2, [r3, #28]
		}
		if(c>127)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	7f1b      	ldrb	r3, [r3, #28]
 8007e62:	b25b      	sxtb	r3, r3
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	db03      	blt.n	8007e70 <_ZN4GLCD9m_lcddataEPht+0x124>
	for(i=0;i<limit;i++)
 8007e68:	8afb      	ldrh	r3, [r7, #22]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	82fb      	strh	r3, [r7, #22]
 8007e6e:	e776      	b.n	8007d5e <_ZN4GLCD9m_lcddataEPht+0x12>
	           return;
 8007e70:	bf00      	nop
	}
}
 8007e72:	3718      	adds	r7, #24
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	48000c00 	.word	0x48000c00
 8007e7c:	48000800 	.word	0x48000800

08007e80 <_ZN4GLCD8m_clrlcdEv>:
		m_lcddata(&font5x7[a],5);
	}
}

void GLCD::m_clrlcd(void)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
    uint8_t i,j;
    for (i=0;i < 8;i++)
 8007e88:	2300      	movs	r3, #0
 8007e8a:	73fb      	strb	r3, [r7, #15]
 8007e8c:	7bfb      	ldrb	r3, [r7, #15]
 8007e8e:	2b07      	cmp	r3, #7
 8007e90:	d81d      	bhi.n	8007ece <_ZN4GLCD8m_clrlcdEv+0x4e>
    {
    m_setpage(i);
 8007e92:	7bfb      	ldrb	r3, [r7, #15]
 8007e94:	4619      	mov	r1, r3
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f7ff fed4 	bl	8007c44 <_ZN4GLCD9m_setpageEh>
    m_setcolumn(0);
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f7ff fe4c 	bl	8007b3c <_ZN4GLCD11m_setcolumnEh>
        for (j= 0 ;j < 128; j++)
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	73bb      	strb	r3, [r7, #14]
 8007ea8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	db0a      	blt.n	8007ec6 <_ZN4GLCD8m_clrlcdEv+0x46>
        	m_lcddata(&z,1);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	331d      	adds	r3, #29
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f7ff ff47 	bl	8007d4c <_ZN4GLCD9m_lcddataEPht>
        for (j= 0 ;j < 128; j++)
 8007ebe:	7bbb      	ldrb	r3, [r7, #14]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	73bb      	strb	r3, [r7, #14]
 8007ec4:	e7f0      	b.n	8007ea8 <_ZN4GLCD8m_clrlcdEv+0x28>
    for (i=0;i < 8;i++)
 8007ec6:	7bfb      	ldrb	r3, [r7, #15]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	73fb      	strb	r3, [r7, #15]
 8007ecc:	e7de      	b.n	8007e8c <_ZN4GLCD8m_clrlcdEv+0xc>
    }
}
 8007ece:	bf00      	nop
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
	...

08007ed8 <_ZN10W5500ClassC1Ev>:
// SPI details
//SPISettings wiznet_SPI_settings(8000000, MSBFIRST, SPI_MODE0);
uint8_t SPI_CS;


W5500Class::W5500Class() {
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	4a04      	ldr	r2, [pc, #16]	; (8007ef4 <_ZN10W5500ClassC1Ev+0x1c>)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4618      	mov	r0, r3
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	0801061c 	.word	0x0801061c

08007ef8 <_ZN10W5500ClassD1Ev>:

W5500Class::~W5500Class() {
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	4a04      	ldr	r2, [pc, #16]	; (8007f14 <_ZN10W5500ClassD1Ev+0x1c>)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4618      	mov	r0, r3
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr
 8007f14:	0801061c 	.word	0x0801061c

08007f18 <_ZN10W5500ClassD0Ev>:
W5500Class::~W5500Class() {
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
}
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f7ff ffe9 	bl	8007ef8 <_ZN10W5500ClassD1Ev>
 8007f26:	2104      	movs	r1, #4
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f007 fc82 	bl	800f832 <_ZdlPvj>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4618      	mov	r0, r3
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <_Z41__static_initialization_and_destruction_0ii>:
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d107      	bne.n	8007f58 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d102      	bne.n	8007f58 <_Z41__static_initialization_and_destruction_0ii+0x20>
W5500Class w5500;
 8007f52:	4809      	ldr	r0, [pc, #36]	; (8007f78 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8007f54:	f7ff ffc0 	bl	8007ed8 <_ZN10W5500ClassC1Ev>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d107      	bne.n	8007f6e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d102      	bne.n	8007f6e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8007f68:	4803      	ldr	r0, [pc, #12]	; (8007f78 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8007f6a:	f7ff ffc5 	bl	8007ef8 <_ZN10W5500ClassD1Ev>
}
 8007f6e:	bf00      	nop
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	2000060c 	.word	0x2000060c

08007f7c <_GLOBAL__sub_I_w5500>:
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007f84:	2001      	movs	r0, #1
 8007f86:	f7ff ffd7 	bl	8007f38 <_Z41__static_initialization_and_destruction_0ii>
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <_GLOBAL__sub_D_w5500>:
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007f94:	2000      	movs	r0, #0
 8007f96:	f7ff ffcf 	bl	8007f38 <_Z41__static_initialization_and_destruction_0ii>
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <_ZN13HeattreatmentC1Ev>:
uint8_t Rise_Sequence1_Hour,Rise_Sequence1_Minute,Rise_Sequence2_Hour,Rise_Sequence2_Minute;
uint16_t Temp_Rising_Reference;
uint8_t TimeReference_Hr,TimeReference_Min,Time_Rising_Ref_Hr,Time_Rising_Ref_Min;


Heattreatment::Heattreatment() {
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	4a06      	ldr	r2, [pc, #24]	; (8007fc0 <_ZN13HeattreatmentC1Ev+0x24>)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	601a      	str	r2, [r3, #0]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	815a      	strh	r2, [r3, #10]
	// TODO Auto-generated constructor stub

}
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	370c      	adds	r7, #12
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	0801062c 	.word	0x0801062c

08007fc4 <_ZN13HeattreatmentD1Ev>:

Heattreatment::~Heattreatment() {
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	4a04      	ldr	r2, [pc, #16]	; (8007fe0 <_ZN13HeattreatmentD1Ev+0x1c>)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr
 8007fe0:	0801062c 	.word	0x0801062c

08007fe4 <_ZN13HeattreatmentD0Ev>:
Heattreatment::~Heattreatment() {
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
}
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f7ff ffe9 	bl	8007fc4 <_ZN13HeattreatmentD1Ev>
 8007ff2:	210c      	movs	r1, #12
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f007 fc1c 	bl	800f832 <_ZdlPvj>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3708      	adds	r7, #8
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <_ZN13Heattreatment3runEv>:

void Heattreatment::run()
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
	stateMachineProcessControl();
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 f86f 	bl	80080f0 <_ZN13Heattreatment26stateMachineProcessControlEv>
	specialHandler();
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 fc5a 	bl	80088cc <_ZN13Heattreatment14specialHandlerEv>
}
 8008018:	bf00      	nop
 800801a:	3708      	adds	r7, #8
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <_ZN13Heattreatment3simEv>:

void Heattreatment::sim()
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
	if((SEQMONITOR ==22)||(SEQMONITOR==23))
 8008028:	4b2a      	ldr	r3, [pc, #168]	; (80080d4 <_ZN13Heattreatment3simEv+0xb4>)
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	2b16      	cmp	r3, #22
 800802e:	d003      	beq.n	8008038 <_ZN13Heattreatment3simEv+0x18>
 8008030:	4b28      	ldr	r3, [pc, #160]	; (80080d4 <_ZN13Heattreatment3simEv+0xb4>)
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	2b17      	cmp	r3, #23
 8008036:	d10c      	bne.n	8008052 <_ZN13Heattreatment3simEv+0x32>
		{
			if(Data1_RxData  >=  Seq1temperature)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	895a      	ldrh	r2, [r3, #10]
 800803c:	4b26      	ldr	r3, [pc, #152]	; (80080d8 <_ZN13Heattreatment3simEv+0xb8>)
 800803e:	881b      	ldrh	r3, [r3, #0]
 8008040:	429a      	cmp	r2, r3
 8008042:	d230      	bcs.n	80080a6 <_ZN13Heattreatment3simEv+0x86>
			{

			}
			else
			{
			   Data1_RxData=Data1_RxData+1;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	895b      	ldrh	r3, [r3, #10]
 8008048:	3301      	adds	r3, #1
 800804a:	b29a      	uxth	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	815a      	strh	r2, [r3, #10]
			if(Data1_RxData  >=  Seq1temperature)
 8008050:	e029      	b.n	80080a6 <_ZN13Heattreatment3simEv+0x86>
			}
		}
		else if((SEQMONITOR ==24)||(SEQMONITOR==25))
 8008052:	4b20      	ldr	r3, [pc, #128]	; (80080d4 <_ZN13Heattreatment3simEv+0xb4>)
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	2b18      	cmp	r3, #24
 8008058:	d003      	beq.n	8008062 <_ZN13Heattreatment3simEv+0x42>
 800805a:	4b1e      	ldr	r3, [pc, #120]	; (80080d4 <_ZN13Heattreatment3simEv+0xb4>)
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	2b19      	cmp	r3, #25
 8008060:	d11e      	bne.n	80080a0 <_ZN13Heattreatment3simEv+0x80>
		{
			if(Data1_RxData  >  Seq2temperature)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	895a      	ldrh	r2, [r3, #10]
 8008066:	4b1d      	ldr	r3, [pc, #116]	; (80080dc <_ZN13Heattreatment3simEv+0xbc>)
 8008068:	881b      	ldrh	r3, [r3, #0]
 800806a:	429a      	cmp	r2, r3
 800806c:	d906      	bls.n	800807c <_ZN13Heattreatment3simEv+0x5c>
			{
			   Data1_RxData=Data1_RxData-1;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	895b      	ldrh	r3, [r3, #10]
 8008072:	3b01      	subs	r3, #1
 8008074:	b29a      	uxth	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	815a      	strh	r2, [r3, #10]
			if(Data1_RxData  >  Seq2temperature)
 800807a:	e014      	b.n	80080a6 <_ZN13Heattreatment3simEv+0x86>
			}
			else if(Data1_RxData  <  Seq2temperature)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	895a      	ldrh	r2, [r3, #10]
 8008080:	4b16      	ldr	r3, [pc, #88]	; (80080dc <_ZN13Heattreatment3simEv+0xbc>)
 8008082:	881b      	ldrh	r3, [r3, #0]
 8008084:	429a      	cmp	r2, r3
 8008086:	d206      	bcs.n	8008096 <_ZN13Heattreatment3simEv+0x76>
			{
			   Data1_RxData=Data1_RxData+1;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	895b      	ldrh	r3, [r3, #10]
 800808c:	3301      	adds	r3, #1
 800808e:	b29a      	uxth	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	815a      	strh	r2, [r3, #10]
			if(Data1_RxData  >  Seq2temperature)
 8008094:	e007      	b.n	80080a6 <_ZN13Heattreatment3simEv+0x86>
			}
			else
			{
			   Data1_RxData=  Seq2temperature*1;
 8008096:	4b11      	ldr	r3, [pc, #68]	; (80080dc <_ZN13Heattreatment3simEv+0xbc>)
 8008098:	881a      	ldrh	r2, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	815a      	strh	r2, [r3, #10]
			if(Data1_RxData  >  Seq2temperature)
 800809e:	e002      	b.n	80080a6 <_ZN13Heattreatment3simEv+0x86>
			}
		}
		else
		{
		   Data1_RxData=32;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2220      	movs	r2, #32
 80080a4:	815a      	strh	r2, [r3, #10]
		}
		act_temperature_c1 = Data1_RxData;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	895a      	ldrh	r2, [r3, #10]
 80080aa:	4b0d      	ldr	r3, [pc, #52]	; (80080e0 <_ZN13Heattreatment3simEv+0xc0>)
 80080ac:	801a      	strh	r2, [r3, #0]
		act_temperature_c2 = Data1_RxData;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	895a      	ldrh	r2, [r3, #10]
 80080b2:	4b0c      	ldr	r3, [pc, #48]	; (80080e4 <_ZN13Heattreatment3simEv+0xc4>)
 80080b4:	801a      	strh	r2, [r3, #0]
		act_temperature_c3 = Data1_RxData;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	895a      	ldrh	r2, [r3, #10]
 80080ba:	4b0b      	ldr	r3, [pc, #44]	; (80080e8 <_ZN13Heattreatment3simEv+0xc8>)
 80080bc:	801a      	strh	r2, [r3, #0]
		act_temperature_c4 = Data1_RxData;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	895a      	ldrh	r2, [r3, #10]
 80080c2:	4b0a      	ldr	r3, [pc, #40]	; (80080ec <_ZN13Heattreatment3simEv+0xcc>)
 80080c4:	801a      	strh	r2, [r3, #0]
}
 80080c6:	bf00      	nop
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	20000624 	.word	0x20000624
 80080d8:	20000616 	.word	0x20000616
 80080dc:	20000618 	.word	0x20000618
 80080e0:	2000061c 	.word	0x2000061c
 80080e4:	2000061e 	.word	0x2000061e
 80080e8:	20000620 	.word	0x20000620
 80080ec:	20000622 	.word	0x20000622

080080f0 <_ZN13Heattreatment26stateMachineProcessControlEv>:


void Heattreatment::stateMachineProcessControl(void){
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
	switch(SEQMONITOR)
 80080f8:	4b53      	ldr	r3, [pc, #332]	; (8008248 <_ZN13Heattreatment26stateMachineProcessControlEv+0x158>)
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	2b67      	cmp	r3, #103	; 0x67
 80080fe:	f000 816f 	beq.w	80083e0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x2f0>
 8008102:	2b67      	cmp	r3, #103	; 0x67
 8008104:	f300 83a0 	bgt.w	8008848 <_ZN13Heattreatment26stateMachineProcessControlEv+0x758>
 8008108:	2b65      	cmp	r3, #101	; 0x65
 800810a:	f000 80a9 	beq.w	8008260 <_ZN13Heattreatment26stateMachineProcessControlEv+0x170>
 800810e:	2b65      	cmp	r3, #101	; 0x65
 8008110:	f300 839a 	bgt.w	8008848 <_ZN13Heattreatment26stateMachineProcessControlEv+0x758>
 8008114:	2b1a      	cmp	r3, #26
 8008116:	dc2b      	bgt.n	8008170 <_ZN13Heattreatment26stateMachineProcessControlEv+0x80>
 8008118:	2b0a      	cmp	r3, #10
 800811a:	f2c0 8395 	blt.w	8008848 <_ZN13Heattreatment26stateMachineProcessControlEv+0x758>
 800811e:	3b0a      	subs	r3, #10
 8008120:	2b10      	cmp	r3, #16
 8008122:	f200 8391 	bhi.w	8008848 <_ZN13Heattreatment26stateMachineProcessControlEv+0x758>
 8008126:	a201      	add	r2, pc, #4	; (adr r2, 800812c <_ZN13Heattreatment26stateMachineProcessControlEv+0x3c>)
 8008128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812c:	08008177 	.word	0x08008177
 8008130:	08008849 	.word	0x08008849
 8008134:	08008849 	.word	0x08008849
 8008138:	08008849 	.word	0x08008849
 800813c:	08008849 	.word	0x08008849
 8008140:	08008849 	.word	0x08008849
 8008144:	08008849 	.word	0x08008849
 8008148:	08008849 	.word	0x08008849
 800814c:	08008849 	.word	0x08008849
 8008150:	08008849 	.word	0x08008849
 8008154:	080081d1 	.word	0x080081d1
 8008158:	08008215 	.word	0x08008215
 800815c:	0800847d 	.word	0x0800847d
 8008160:	0800853b 	.word	0x0800853b
 8008164:	08008689 	.word	0x08008689
 8008168:	08008747 	.word	0x08008747
 800816c:	08008835 	.word	0x08008835
 8008170:	2b64      	cmp	r3, #100	; 0x64
 8008172:	d062      	beq.n	800823a <_ZN13Heattreatment26stateMachineProcessControlEv+0x14a>
 8008174:	e368      	b.n	8008848 <_ZN13Heattreatment26stateMachineProcessControlEv+0x758>
	{
		case 10:
			if((SEQMONITOR==21)||(SEQMONITOR==100)||(SEQMONITOR==101)||(SEQMONITOR==103)||(SEQMONITOR==22)||(SEQMONITOR==23)
 8008176:	4b34      	ldr	r3, [pc, #208]	; (8008248 <_ZN13Heattreatment26stateMachineProcessControlEv+0x158>)
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	2b15      	cmp	r3, #21
 800817c:	d01f      	beq.n	80081be <_ZN13Heattreatment26stateMachineProcessControlEv+0xce>
 800817e:	4b32      	ldr	r3, [pc, #200]	; (8008248 <_ZN13Heattreatment26stateMachineProcessControlEv+0x158>)
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	2b64      	cmp	r3, #100	; 0x64
 8008184:	d01b      	beq.n	80081be <_ZN13Heattreatment26stateMachineProcessControlEv+0xce>
 8008186:	4b30      	ldr	r3, [pc, #192]	; (8008248 <_ZN13Heattreatment26stateMachineProcessControlEv+0x158>)
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	2b65      	cmp	r3, #101	; 0x65
 800818c:	d017      	beq.n	80081be <_ZN13Heattreatment26stateMachineProcessControlEv+0xce>
 800818e:	4b2e      	ldr	r3, [pc, #184]	; (8008248 <_ZN13Heattreatment26stateMachineProcessControlEv+0x158>)
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	2b67      	cmp	r3, #103	; 0x67
 8008194:	d013      	beq.n	80081be <_ZN13Heattreatment26stateMachineProcessControlEv+0xce>
 8008196:	4b2c      	ldr	r3, [pc, #176]	; (8008248 <_ZN13Heattreatment26stateMachineProcessControlEv+0x158>)
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	2b16      	cmp	r3, #22
 800819c:	d00f      	beq.n	80081be <_ZN13Heattreatment26stateMachineProcessControlEv+0xce>
 800819e:	4b2a      	ldr	r3, [pc, #168]	; (8008248 <_ZN13Heattreatment26stateMachineProcessControlEv+0x158>)
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	2b17      	cmp	r3, #23
 80081a4:	d00b      	beq.n	80081be <_ZN13Heattreatment26stateMachineProcessControlEv+0xce>
			||(SEQMONITOR==24)||(SEQMONITOR==25)||(SEQMONITOR==20))
 80081a6:	4b28      	ldr	r3, [pc, #160]	; (8008248 <_ZN13Heattreatment26stateMachineProcessControlEv+0x158>)
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	2b18      	cmp	r3, #24
 80081ac:	d007      	beq.n	80081be <_ZN13Heattreatment26stateMachineProcessControlEv+0xce>
 80081ae:	4b26      	ldr	r3, [pc, #152]	; (8008248 <_ZN13Heattreatment26stateMachineProcessControlEv+0x158>)
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	2b19      	cmp	r3, #25
 80081b4:	d003      	beq.n	80081be <_ZN13Heattreatment26stateMachineProcessControlEv+0xce>
 80081b6:	4b24      	ldr	r3, [pc, #144]	; (8008248 <_ZN13Heattreatment26stateMachineProcessControlEv+0x158>)
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	2b14      	cmp	r3, #20
 80081bc:	d104      	bne.n	80081c8 <_ZN13Heattreatment26stateMachineProcessControlEv+0xd8>
			{
				SEQMONITOR=SEQMONITOR+0;
 80081be:	4b22      	ldr	r3, [pc, #136]	; (8008248 <_ZN13Heattreatment26stateMachineProcessControlEv+0x158>)
 80081c0:	781a      	ldrb	r2, [r3, #0]
 80081c2:	4b21      	ldr	r3, [pc, #132]	; (8008248 <_ZN13Heattreatment26stateMachineProcessControlEv+0x158>)
 80081c4:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				SEQMONITOR= 20;		 //Initialization
			}
		break;
 80081c6:	e344      	b.n	8008852 <_ZN13Heattreatment26stateMachineProcessControlEv+0x762>
				SEQMONITOR= 20;		 //Initialization
 80081c8:	4b1f      	ldr	r3, [pc, #124]	; (8008248 <_ZN13Heattreatment26stateMachineProcessControlEv+0x158>)
 80081ca:	2214      	movs	r2, #20
 80081cc:	701a      	strb	r2, [r3, #0]
		break;
 80081ce:	e340      	b.n	8008852 <_ZN13Heattreatment26stateMachineProcessControlEv+0x762>
		case 20:
			//m_simEndProcess= HAL_GPIO_ReadPin(GPIOC,InputMachine1_Pin);
			if((m_simEndProcess ==GPIO_PIN_SET )||(IDGen_Skip_Http==0x01))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	795b      	ldrb	r3, [r3, #5]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d003      	beq.n	80081e0 <_ZN13Heattreatment26stateMachineProcessControlEv+0xf0>
 80081d8:	4b1c      	ldr	r3, [pc, #112]	; (800824c <_ZN13Heattreatment26stateMachineProcessControlEv+0x15c>)
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d10c      	bne.n	80081fa <_ZN13Heattreatment26stateMachineProcessControlEv+0x10a>
			{
				SEQMONITOR=21;
 80081e0:	4b19      	ldr	r3, [pc, #100]	; (8008248 <_ZN13Heattreatment26stateMachineProcessControlEv+0x158>)
 80081e2:	2215      	movs	r2, #21
 80081e4:	701a      	strb	r2, [r3, #0]
				status_to_server=1;
 80081e6:	4b1a      	ldr	r3, [pc, #104]	; (8008250 <_ZN13Heattreatment26stateMachineProcessControlEv+0x160>)
 80081e8:	2201      	movs	r2, #1
 80081ea:	701a      	strb	r2, [r3, #0]
				seq1_count_inc  = 0;
 80081ec:	4b19      	ldr	r3, [pc, #100]	; (8008254 <_ZN13Heattreatment26stateMachineProcessControlEv+0x164>)
 80081ee:	2200      	movs	r2, #0
 80081f0:	801a      	strh	r2, [r3, #0]
				seq2_count_inc  = 0;
 80081f2:	4b19      	ldr	r3, [pc, #100]	; (8008258 <_ZN13Heattreatment26stateMachineProcessControlEv+0x168>)
 80081f4:	2200      	movs	r2, #0
 80081f6:	801a      	strh	r2, [r3, #0]
			}
			else if((m_simEndProcess ==GPIO_PIN_RESET)||(IDGen_Skip_Http==0x00))
			{
				status_to_server=30;
			}
		break;
 80081f8:	e32a      	b.n	8008850 <_ZN13Heattreatment26stateMachineProcessControlEv+0x760>
			else if((m_simEndProcess ==GPIO_PIN_RESET)||(IDGen_Skip_Http==0x00))
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	795b      	ldrb	r3, [r3, #5]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d004      	beq.n	800820c <_ZN13Heattreatment26stateMachineProcessControlEv+0x11c>
 8008202:	4b12      	ldr	r3, [pc, #72]	; (800824c <_ZN13Heattreatment26stateMachineProcessControlEv+0x15c>)
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	f040 8322 	bne.w	8008850 <_ZN13Heattreatment26stateMachineProcessControlEv+0x760>
				status_to_server=30;
 800820c:	4b10      	ldr	r3, [pc, #64]	; (8008250 <_ZN13Heattreatment26stateMachineProcessControlEv+0x160>)
 800820e:	221e      	movs	r2, #30
 8008210:	701a      	strb	r2, [r3, #0]
		break;
 8008212:	e31d      	b.n	8008850 <_ZN13Heattreatment26stateMachineProcessControlEv+0x760>
		case 21:
				ProcessId_Value = ProcessId_Value+1;
 8008214:	4b11      	ldr	r3, [pc, #68]	; (800825c <_ZN13Heattreatment26stateMachineProcessControlEv+0x16c>)
 8008216:	881b      	ldrh	r3, [r3, #0]
 8008218:	3301      	adds	r3, #1
 800821a:	b29a      	uxth	r2, r3
 800821c:	4b0f      	ldr	r3, [pc, #60]	; (800825c <_ZN13Heattreatment26stateMachineProcessControlEv+0x16c>)
 800821e:	801a      	strh	r2, [r3, #0]
				seq1_count_inc  = 0;
 8008220:	4b0c      	ldr	r3, [pc, #48]	; (8008254 <_ZN13Heattreatment26stateMachineProcessControlEv+0x164>)
 8008222:	2200      	movs	r2, #0
 8008224:	801a      	strh	r2, [r3, #0]
				seq2_count_inc  = 0;
 8008226:	4b0c      	ldr	r3, [pc, #48]	; (8008258 <_ZN13Heattreatment26stateMachineProcessControlEv+0x168>)
 8008228:	2200      	movs	r2, #0
 800822a:	801a      	strh	r2, [r3, #0]
				SEQMONITOR	= 100; //wait for server ack
 800822c:	4b06      	ldr	r3, [pc, #24]	; (8008248 <_ZN13Heattreatment26stateMachineProcessControlEv+0x158>)
 800822e:	2264      	movs	r2, #100	; 0x64
 8008230:	701a      	strb	r2, [r3, #0]
				status_to_server= 1;
 8008232:	4b07      	ldr	r3, [pc, #28]	; (8008250 <_ZN13Heattreatment26stateMachineProcessControlEv+0x160>)
 8008234:	2201      	movs	r2, #1
 8008236:	701a      	strb	r2, [r3, #0]
		break;
 8008238:	e30b      	b.n	8008852 <_ZN13Heattreatment26stateMachineProcessControlEv+0x762>
		case 100:	//Status_Http(from server)
				SEQMONITOR=101;
 800823a:	4b03      	ldr	r3, [pc, #12]	; (8008248 <_ZN13Heattreatment26stateMachineProcessControlEv+0x158>)
 800823c:	2265      	movs	r2, #101	; 0x65
 800823e:	701a      	strb	r2, [r3, #0]
				status_to_server = 1;
 8008240:	4b03      	ldr	r3, [pc, #12]	; (8008250 <_ZN13Heattreatment26stateMachineProcessControlEv+0x160>)
 8008242:	2201      	movs	r2, #1
 8008244:	701a      	strb	r2, [r3, #0]
		break;
 8008246:	e304      	b.n	8008852 <_ZN13Heattreatment26stateMachineProcessControlEv+0x762>
 8008248:	20000624 	.word	0x20000624
 800824c:	200000f3 	.word	0x200000f3
 8008250:	20000612 	.word	0x20000612
 8008254:	200000fe 	.word	0x200000fe
 8008258:	20000100 	.word	0x20000100
 800825c:	20000614 	.word	0x20000614
		case 101:
				if(Status_Http == 11)
 8008260:	4b68      	ldr	r3, [pc, #416]	; (8008404 <_ZN13Heattreatment26stateMachineProcessControlEv+0x314>)
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	2b0b      	cmp	r3, #11
 8008266:	f040 80b7 	bne.w	80083d8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x2e8>
				{
					if(Temperature_High_Http!=0)
 800826a:	4b67      	ldr	r3, [pc, #412]	; (8008408 <_ZN13Heattreatment26stateMachineProcessControlEv+0x318>)
 800826c:	881b      	ldrh	r3, [r3, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d009      	beq.n	8008286 <_ZN13Heattreatment26stateMachineProcessControlEv+0x196>
					{
						if(Seq1temperature!=Temperature_High_Http)
 8008272:	4b66      	ldr	r3, [pc, #408]	; (800840c <_ZN13Heattreatment26stateMachineProcessControlEv+0x31c>)
 8008274:	881a      	ldrh	r2, [r3, #0]
 8008276:	4b64      	ldr	r3, [pc, #400]	; (8008408 <_ZN13Heattreatment26stateMachineProcessControlEv+0x318>)
 8008278:	881b      	ldrh	r3, [r3, #0]
 800827a:	429a      	cmp	r2, r3
 800827c:	d003      	beq.n	8008286 <_ZN13Heattreatment26stateMachineProcessControlEv+0x196>
						{
							Seq1temperature= Temperature_High_Http;
 800827e:	4b62      	ldr	r3, [pc, #392]	; (8008408 <_ZN13Heattreatment26stateMachineProcessControlEv+0x318>)
 8008280:	881a      	ldrh	r2, [r3, #0]
 8008282:	4b62      	ldr	r3, [pc, #392]	; (800840c <_ZN13Heattreatment26stateMachineProcessControlEv+0x31c>)
 8008284:	801a      	strh	r2, [r3, #0]
						}
					}
					if(Temperature_Low_Http!=0)
 8008286:	4b62      	ldr	r3, [pc, #392]	; (8008410 <_ZN13Heattreatment26stateMachineProcessControlEv+0x320>)
 8008288:	881b      	ldrh	r3, [r3, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d009      	beq.n	80082a2 <_ZN13Heattreatment26stateMachineProcessControlEv+0x1b2>
					{
						if(Seq2temperature!=Temperature_Low_Http)
 800828e:	4b61      	ldr	r3, [pc, #388]	; (8008414 <_ZN13Heattreatment26stateMachineProcessControlEv+0x324>)
 8008290:	881a      	ldrh	r2, [r3, #0]
 8008292:	4b5f      	ldr	r3, [pc, #380]	; (8008410 <_ZN13Heattreatment26stateMachineProcessControlEv+0x320>)
 8008294:	881b      	ldrh	r3, [r3, #0]
 8008296:	429a      	cmp	r2, r3
 8008298:	d003      	beq.n	80082a2 <_ZN13Heattreatment26stateMachineProcessControlEv+0x1b2>
						{
							Seq2temperature= Temperature_Low_Http;
 800829a:	4b5d      	ldr	r3, [pc, #372]	; (8008410 <_ZN13Heattreatment26stateMachineProcessControlEv+0x320>)
 800829c:	881a      	ldrh	r2, [r3, #0]
 800829e:	4b5d      	ldr	r3, [pc, #372]	; (8008414 <_ZN13Heattreatment26stateMachineProcessControlEv+0x324>)
 80082a0:	801a      	strh	r2, [r3, #0]
						}
					}
					if(H_Timer01HrValue!=Sequence1_hour_http)
 80082a2:	4b5d      	ldr	r3, [pc, #372]	; (8008418 <_ZN13Heattreatment26stateMachineProcessControlEv+0x328>)
 80082a4:	781a      	ldrb	r2, [r3, #0]
 80082a6:	4b5d      	ldr	r3, [pc, #372]	; (800841c <_ZN13Heattreatment26stateMachineProcessControlEv+0x32c>)
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d012      	beq.n	80082d4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x1e4>
					{
						H_Timer01HrValue= Sequence1_hour_http;
 80082ae:	4b5b      	ldr	r3, [pc, #364]	; (800841c <_ZN13Heattreatment26stateMachineProcessControlEv+0x32c>)
 80082b0:	781a      	ldrb	r2, [r3, #0]
 80082b2:	4b59      	ldr	r3, [pc, #356]	; (8008418 <_ZN13Heattreatment26stateMachineProcessControlEv+0x328>)
 80082b4:	701a      	strb	r2, [r3, #0]
						ProcessTotalMin1 	=  (H_Timer01HrValue*60)+  H_Timer01MinValue;
 80082b6:	4b58      	ldr	r3, [pc, #352]	; (8008418 <_ZN13Heattreatment26stateMachineProcessControlEv+0x328>)
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	461a      	mov	r2, r3
 80082be:	0112      	lsls	r2, r2, #4
 80082c0:	1ad3      	subs	r3, r2, r3
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	b29a      	uxth	r2, r3
 80082c6:	4b56      	ldr	r3, [pc, #344]	; (8008420 <_ZN13Heattreatment26stateMachineProcessControlEv+0x330>)
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	4413      	add	r3, r2
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	4b54      	ldr	r3, [pc, #336]	; (8008424 <_ZN13Heattreatment26stateMachineProcessControlEv+0x334>)
 80082d2:	801a      	strh	r2, [r3, #0]
					}
					if(H_Timer01MinValue!=Sequence1_minute_http)
 80082d4:	4b52      	ldr	r3, [pc, #328]	; (8008420 <_ZN13Heattreatment26stateMachineProcessControlEv+0x330>)
 80082d6:	781a      	ldrb	r2, [r3, #0]
 80082d8:	4b53      	ldr	r3, [pc, #332]	; (8008428 <_ZN13Heattreatment26stateMachineProcessControlEv+0x338>)
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d012      	beq.n	8008306 <_ZN13Heattreatment26stateMachineProcessControlEv+0x216>
					{
						H_Timer01MinValue= Sequence1_minute_http;
 80082e0:	4b51      	ldr	r3, [pc, #324]	; (8008428 <_ZN13Heattreatment26stateMachineProcessControlEv+0x338>)
 80082e2:	781a      	ldrb	r2, [r3, #0]
 80082e4:	4b4e      	ldr	r3, [pc, #312]	; (8008420 <_ZN13Heattreatment26stateMachineProcessControlEv+0x330>)
 80082e6:	701a      	strb	r2, [r3, #0]
						ProcessTotalMin1 	=  (H_Timer01HrValue*60)+  H_Timer01MinValue;
 80082e8:	4b4b      	ldr	r3, [pc, #300]	; (8008418 <_ZN13Heattreatment26stateMachineProcessControlEv+0x328>)
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	461a      	mov	r2, r3
 80082f0:	0112      	lsls	r2, r2, #4
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	4b49      	ldr	r3, [pc, #292]	; (8008420 <_ZN13Heattreatment26stateMachineProcessControlEv+0x330>)
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	4413      	add	r3, r2
 8008300:	b29a      	uxth	r2, r3
 8008302:	4b48      	ldr	r3, [pc, #288]	; (8008424 <_ZN13Heattreatment26stateMachineProcessControlEv+0x334>)
 8008304:	801a      	strh	r2, [r3, #0]
					}
					if(H_Timer02HrValue!=Sequence2_hour_http)
 8008306:	4b49      	ldr	r3, [pc, #292]	; (800842c <_ZN13Heattreatment26stateMachineProcessControlEv+0x33c>)
 8008308:	781a      	ldrb	r2, [r3, #0]
 800830a:	4b49      	ldr	r3, [pc, #292]	; (8008430 <_ZN13Heattreatment26stateMachineProcessControlEv+0x340>)
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	429a      	cmp	r2, r3
 8008310:	d003      	beq.n	800831a <_ZN13Heattreatment26stateMachineProcessControlEv+0x22a>
					{
						H_Timer02HrValue= Sequence2_hour_http;
 8008312:	4b47      	ldr	r3, [pc, #284]	; (8008430 <_ZN13Heattreatment26stateMachineProcessControlEv+0x340>)
 8008314:	781a      	ldrb	r2, [r3, #0]
 8008316:	4b45      	ldr	r3, [pc, #276]	; (800842c <_ZN13Heattreatment26stateMachineProcessControlEv+0x33c>)
 8008318:	701a      	strb	r2, [r3, #0]
					}
					if(H_Timer02MinValue!=Sequence2_minute_http)
 800831a:	4b46      	ldr	r3, [pc, #280]	; (8008434 <_ZN13Heattreatment26stateMachineProcessControlEv+0x344>)
 800831c:	781a      	ldrb	r2, [r3, #0]
 800831e:	4b46      	ldr	r3, [pc, #280]	; (8008438 <_ZN13Heattreatment26stateMachineProcessControlEv+0x348>)
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	429a      	cmp	r2, r3
 8008324:	d012      	beq.n	800834c <_ZN13Heattreatment26stateMachineProcessControlEv+0x25c>
					{
						H_Timer02MinValue= Sequence2_minute_http;
 8008326:	4b44      	ldr	r3, [pc, #272]	; (8008438 <_ZN13Heattreatment26stateMachineProcessControlEv+0x348>)
 8008328:	781a      	ldrb	r2, [r3, #0]
 800832a:	4b42      	ldr	r3, [pc, #264]	; (8008434 <_ZN13Heattreatment26stateMachineProcessControlEv+0x344>)
 800832c:	701a      	strb	r2, [r3, #0]
						ProcessTotalMin2   =  (H_Timer02HrValue*60)+  H_Timer02MinValue;
 800832e:	4b3f      	ldr	r3, [pc, #252]	; (800842c <_ZN13Heattreatment26stateMachineProcessControlEv+0x33c>)
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	b29b      	uxth	r3, r3
 8008334:	461a      	mov	r2, r3
 8008336:	0112      	lsls	r2, r2, #4
 8008338:	1ad3      	subs	r3, r2, r3
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	b29a      	uxth	r2, r3
 800833e:	4b3d      	ldr	r3, [pc, #244]	; (8008434 <_ZN13Heattreatment26stateMachineProcessControlEv+0x344>)
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	b29b      	uxth	r3, r3
 8008344:	4413      	add	r3, r2
 8008346:	b29a      	uxth	r2, r3
 8008348:	4b3c      	ldr	r3, [pc, #240]	; (800843c <_ZN13Heattreatment26stateMachineProcessControlEv+0x34c>)
 800834a:	801a      	strh	r2, [r3, #0]
					}
					if(R_Temperature_High_Http!=   Rise_Sequence1_temp)
 800834c:	4b3c      	ldr	r3, [pc, #240]	; (8008440 <_ZN13Heattreatment26stateMachineProcessControlEv+0x350>)
 800834e:	881a      	ldrh	r2, [r3, #0]
 8008350:	4b3c      	ldr	r3, [pc, #240]	; (8008444 <_ZN13Heattreatment26stateMachineProcessControlEv+0x354>)
 8008352:	881b      	ldrh	r3, [r3, #0]
 8008354:	429a      	cmp	r2, r3
 8008356:	d003      	beq.n	8008360 <_ZN13Heattreatment26stateMachineProcessControlEv+0x270>
					{
						Rise_Sequence1_temp = R_Temperature_High_Http;
 8008358:	4b39      	ldr	r3, [pc, #228]	; (8008440 <_ZN13Heattreatment26stateMachineProcessControlEv+0x350>)
 800835a:	881a      	ldrh	r2, [r3, #0]
 800835c:	4b39      	ldr	r3, [pc, #228]	; (8008444 <_ZN13Heattreatment26stateMachineProcessControlEv+0x354>)
 800835e:	801a      	strh	r2, [r3, #0]
					}
					if(R_Temperature_Low_Http!=   Rise_Sequence2_temp)
 8008360:	4b39      	ldr	r3, [pc, #228]	; (8008448 <_ZN13Heattreatment26stateMachineProcessControlEv+0x358>)
 8008362:	881a      	ldrh	r2, [r3, #0]
 8008364:	4b39      	ldr	r3, [pc, #228]	; (800844c <_ZN13Heattreatment26stateMachineProcessControlEv+0x35c>)
 8008366:	881b      	ldrh	r3, [r3, #0]
 8008368:	429a      	cmp	r2, r3
 800836a:	d003      	beq.n	8008374 <_ZN13Heattreatment26stateMachineProcessControlEv+0x284>
					{
						Rise_Sequence2_temp = R_Temperature_Low_Http;
 800836c:	4b36      	ldr	r3, [pc, #216]	; (8008448 <_ZN13Heattreatment26stateMachineProcessControlEv+0x358>)
 800836e:	881a      	ldrh	r2, [r3, #0]
 8008370:	4b36      	ldr	r3, [pc, #216]	; (800844c <_ZN13Heattreatment26stateMachineProcessControlEv+0x35c>)
 8008372:	801a      	strh	r2, [r3, #0]
					}
					if(R_Sequence1_hour_http!=   Rise_Sequence1_Hour)
 8008374:	4b36      	ldr	r3, [pc, #216]	; (8008450 <_ZN13Heattreatment26stateMachineProcessControlEv+0x360>)
 8008376:	781a      	ldrb	r2, [r3, #0]
 8008378:	4b36      	ldr	r3, [pc, #216]	; (8008454 <_ZN13Heattreatment26stateMachineProcessControlEv+0x364>)
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	429a      	cmp	r2, r3
 800837e:	d003      	beq.n	8008388 <_ZN13Heattreatment26stateMachineProcessControlEv+0x298>
					{
						Rise_Sequence1_Hour = R_Sequence1_hour_http;
 8008380:	4b33      	ldr	r3, [pc, #204]	; (8008450 <_ZN13Heattreatment26stateMachineProcessControlEv+0x360>)
 8008382:	781a      	ldrb	r2, [r3, #0]
 8008384:	4b33      	ldr	r3, [pc, #204]	; (8008454 <_ZN13Heattreatment26stateMachineProcessControlEv+0x364>)
 8008386:	701a      	strb	r2, [r3, #0]
					}
					if(R_Sequence1_minute_http!=   Rise_Sequence1_Minute)
 8008388:	4b33      	ldr	r3, [pc, #204]	; (8008458 <_ZN13Heattreatment26stateMachineProcessControlEv+0x368>)
 800838a:	781a      	ldrb	r2, [r3, #0]
 800838c:	4b33      	ldr	r3, [pc, #204]	; (800845c <_ZN13Heattreatment26stateMachineProcessControlEv+0x36c>)
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	429a      	cmp	r2, r3
 8008392:	d003      	beq.n	800839c <_ZN13Heattreatment26stateMachineProcessControlEv+0x2ac>
					{
						Rise_Sequence1_Minute = R_Sequence1_minute_http;
 8008394:	4b30      	ldr	r3, [pc, #192]	; (8008458 <_ZN13Heattreatment26stateMachineProcessControlEv+0x368>)
 8008396:	781a      	ldrb	r2, [r3, #0]
 8008398:	4b30      	ldr	r3, [pc, #192]	; (800845c <_ZN13Heattreatment26stateMachineProcessControlEv+0x36c>)
 800839a:	701a      	strb	r2, [r3, #0]
					}

					if(R_Sequence2_hour_http!=   Rise_Sequence2_Hour)
 800839c:	4b30      	ldr	r3, [pc, #192]	; (8008460 <_ZN13Heattreatment26stateMachineProcessControlEv+0x370>)
 800839e:	781a      	ldrb	r2, [r3, #0]
 80083a0:	4b30      	ldr	r3, [pc, #192]	; (8008464 <_ZN13Heattreatment26stateMachineProcessControlEv+0x374>)
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d003      	beq.n	80083b0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x2c0>
					{
						Rise_Sequence2_Hour = R_Sequence2_hour_http;
 80083a8:	4b2d      	ldr	r3, [pc, #180]	; (8008460 <_ZN13Heattreatment26stateMachineProcessControlEv+0x370>)
 80083aa:	781a      	ldrb	r2, [r3, #0]
 80083ac:	4b2d      	ldr	r3, [pc, #180]	; (8008464 <_ZN13Heattreatment26stateMachineProcessControlEv+0x374>)
 80083ae:	701a      	strb	r2, [r3, #0]
					}

					if(R_Sequence2_minute_http!=   Rise_Sequence2_Minute)
 80083b0:	4b2d      	ldr	r3, [pc, #180]	; (8008468 <_ZN13Heattreatment26stateMachineProcessControlEv+0x378>)
 80083b2:	781a      	ldrb	r2, [r3, #0]
 80083b4:	4b2d      	ldr	r3, [pc, #180]	; (800846c <_ZN13Heattreatment26stateMachineProcessControlEv+0x37c>)
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d003      	beq.n	80083c4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x2d4>
					{
						Rise_Sequence2_Minute = R_Sequence2_minute_http;
 80083bc:	4b2a      	ldr	r3, [pc, #168]	; (8008468 <_ZN13Heattreatment26stateMachineProcessControlEv+0x378>)
 80083be:	781a      	ldrb	r2, [r3, #0]
 80083c0:	4b2a      	ldr	r3, [pc, #168]	; (800846c <_ZN13Heattreatment26stateMachineProcessControlEv+0x37c>)
 80083c2:	701a      	strb	r2, [r3, #0]
					}
					status_to_server = 20;
 80083c4:	4b2a      	ldr	r3, [pc, #168]	; (8008470 <_ZN13Heattreatment26stateMachineProcessControlEv+0x380>)
 80083c6:	2214      	movs	r2, #20
 80083c8:	701a      	strb	r2, [r3, #0]
					SEQMONITOR=103;
 80083ca:	4b2a      	ldr	r3, [pc, #168]	; (8008474 <_ZN13Heattreatment26stateMachineProcessControlEv+0x384>)
 80083cc:	2267      	movs	r2, #103	; 0x67
 80083ce:	701a      	strb	r2, [r3, #0]
					updateSetData=1;
 80083d0:	4b29      	ldr	r3, [pc, #164]	; (8008478 <_ZN13Heattreatment26stateMachineProcessControlEv+0x388>)
 80083d2:	2201      	movs	r2, #1
 80083d4:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					status_to_server=1;
				}
		break;
 80083d6:	e23c      	b.n	8008852 <_ZN13Heattreatment26stateMachineProcessControlEv+0x762>
					status_to_server=1;
 80083d8:	4b25      	ldr	r3, [pc, #148]	; (8008470 <_ZN13Heattreatment26stateMachineProcessControlEv+0x380>)
 80083da:	2201      	movs	r2, #1
 80083dc:	701a      	strb	r2, [r3, #0]
		break;
 80083de:	e238      	b.n	8008852 <_ZN13Heattreatment26stateMachineProcessControlEv+0x762>
		case 103:
				if(Status_Http ==20){
 80083e0:	4b08      	ldr	r3, [pc, #32]	; (8008404 <_ZN13Heattreatment26stateMachineProcessControlEv+0x314>)
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	2b14      	cmp	r3, #20
 80083e6:	d106      	bne.n	80083f6 <_ZN13Heattreatment26stateMachineProcessControlEv+0x306>
					status_to_server=20;
 80083e8:	4b21      	ldr	r3, [pc, #132]	; (8008470 <_ZN13Heattreatment26stateMachineProcessControlEv+0x380>)
 80083ea:	2214      	movs	r2, #20
 80083ec:	701a      	strb	r2, [r3, #0]
					SEQMONITOR=22;
 80083ee:	4b21      	ldr	r3, [pc, #132]	; (8008474 <_ZN13Heattreatment26stateMachineProcessControlEv+0x384>)
 80083f0:	2216      	movs	r2, #22
 80083f2:	701a      	strb	r2, [r3, #0]
				}
				else{
					status_to_server=20;
					SEQMONITOR=103;
				}
		break;
 80083f4:	e22d      	b.n	8008852 <_ZN13Heattreatment26stateMachineProcessControlEv+0x762>
					status_to_server=20;
 80083f6:	4b1e      	ldr	r3, [pc, #120]	; (8008470 <_ZN13Heattreatment26stateMachineProcessControlEv+0x380>)
 80083f8:	2214      	movs	r2, #20
 80083fa:	701a      	strb	r2, [r3, #0]
					SEQMONITOR=103;
 80083fc:	4b1d      	ldr	r3, [pc, #116]	; (8008474 <_ZN13Heattreatment26stateMachineProcessControlEv+0x384>)
 80083fe:	2267      	movs	r2, #103	; 0x67
 8008400:	701a      	strb	r2, [r3, #0]
		break;
 8008402:	e226      	b.n	8008852 <_ZN13Heattreatment26stateMachineProcessControlEv+0x762>
 8008404:	200000f2 	.word	0x200000f2
 8008408:	200000e0 	.word	0x200000e0
 800840c:	20000616 	.word	0x20000616
 8008410:	200000e4 	.word	0x200000e4
 8008414:	20000618 	.word	0x20000618
 8008418:	20000628 	.word	0x20000628
 800841c:	200000e6 	.word	0x200000e6
 8008420:	20000629 	.word	0x20000629
 8008424:	2000062c 	.word	0x2000062c
 8008428:	200000e7 	.word	0x200000e7
 800842c:	2000062a 	.word	0x2000062a
 8008430:	200000ec 	.word	0x200000ec
 8008434:	2000062b 	.word	0x2000062b
 8008438:	200000ed 	.word	0x200000ed
 800843c:	2000062e 	.word	0x2000062e
 8008440:	200000de 	.word	0x200000de
 8008444:	20000630 	.word	0x20000630
 8008448:	200000e2 	.word	0x200000e2
 800844c:	20000632 	.word	0x20000632
 8008450:	200000e8 	.word	0x200000e8
 8008454:	20000634 	.word	0x20000634
 8008458:	200000e9 	.word	0x200000e9
 800845c:	20000635 	.word	0x20000635
 8008460:	200000ea 	.word	0x200000ea
 8008464:	20000636 	.word	0x20000636
 8008468:	200000eb 	.word	0x200000eb
 800846c:	20000637 	.word	0x20000637
 8008470:	20000612 	.word	0x20000612
 8008474:	20000624 	.word	0x20000624
 8008478:	20000610 	.word	0x20000610
		case 22:
				temperature_reference = Seq1temperature;
 800847c:	4b6c      	ldr	r3, [pc, #432]	; (8008630 <_ZN13Heattreatment26stateMachineProcessControlEv+0x540>)
 800847e:	881a      	ldrh	r2, [r3, #0]
 8008480:	4b6c      	ldr	r3, [pc, #432]	; (8008634 <_ZN13Heattreatment26stateMachineProcessControlEv+0x544>)
 8008482:	801a      	strh	r2, [r3, #0]
				Temp_Rising_Reference   = Rise_Sequence1_temp;
 8008484:	4b6c      	ldr	r3, [pc, #432]	; (8008638 <_ZN13Heattreatment26stateMachineProcessControlEv+0x548>)
 8008486:	881a      	ldrh	r2, [r3, #0]
 8008488:	4b6c      	ldr	r3, [pc, #432]	; (800863c <_ZN13Heattreatment26stateMachineProcessControlEv+0x54c>)
 800848a:	801a      	strh	r2, [r3, #0]
				TimeReference_Hr		= (unsigned char)H_Timer01HrValue;
 800848c:	4b6c      	ldr	r3, [pc, #432]	; (8008640 <_ZN13Heattreatment26stateMachineProcessControlEv+0x550>)
 800848e:	781a      	ldrb	r2, [r3, #0]
 8008490:	4b6c      	ldr	r3, [pc, #432]	; (8008644 <_ZN13Heattreatment26stateMachineProcessControlEv+0x554>)
 8008492:	701a      	strb	r2, [r3, #0]
				TimeReference_Min		= (unsigned char)H_Timer01MinValue;
 8008494:	4b6c      	ldr	r3, [pc, #432]	; (8008648 <_ZN13Heattreatment26stateMachineProcessControlEv+0x558>)
 8008496:	781a      	ldrb	r2, [r3, #0]
 8008498:	4b6c      	ldr	r3, [pc, #432]	; (800864c <_ZN13Heattreatment26stateMachineProcessControlEv+0x55c>)
 800849a:	701a      	strb	r2, [r3, #0]
				Time_Rising_Ref_Hr		= (unsigned char)Rise_Sequence1_Hour;
 800849c:	4b6c      	ldr	r3, [pc, #432]	; (8008650 <_ZN13Heattreatment26stateMachineProcessControlEv+0x560>)
 800849e:	781a      	ldrb	r2, [r3, #0]
 80084a0:	4b6c      	ldr	r3, [pc, #432]	; (8008654 <_ZN13Heattreatment26stateMachineProcessControlEv+0x564>)
 80084a2:	701a      	strb	r2, [r3, #0]
				Time_Rising_Ref_Min		= (unsigned char)Rise_Sequence1_Minute;
 80084a4:	4b6c      	ldr	r3, [pc, #432]	; (8008658 <_ZN13Heattreatment26stateMachineProcessControlEv+0x568>)
 80084a6:	781a      	ldrb	r2, [r3, #0]
 80084a8:	4b6c      	ldr	r3, [pc, #432]	; (800865c <_ZN13Heattreatment26stateMachineProcessControlEv+0x56c>)
 80084aa:	701a      	strb	r2, [r3, #0]
				m_temeperatureUpperBound = Seq1temperature+3;
 80084ac:	4b60      	ldr	r3, [pc, #384]	; (8008630 <_ZN13Heattreatment26stateMachineProcessControlEv+0x540>)
 80084ae:	881b      	ldrh	r3, [r3, #0]
 80084b0:	3303      	adds	r3, #3
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	80da      	strh	r2, [r3, #6]
				m_temperatureLowerBound  = Seq1temperature-3;
 80084b8:	4b5d      	ldr	r3, [pc, #372]	; (8008630 <_ZN13Heattreatment26stateMachineProcessControlEv+0x540>)
 80084ba:	881b      	ldrh	r3, [r3, #0]
 80084bc:	3b03      	subs	r3, #3
 80084be:	b29a      	uxth	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	811a      	strh	r2, [r3, #8]
				if((act_temperature_c1 >= m_temperatureLowerBound)&&(act_temperature_c1 <= m_temeperatureUpperBound)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	891a      	ldrh	r2, [r3, #8]
 80084c8:	4b65      	ldr	r3, [pc, #404]	; (8008660 <_ZN13Heattreatment26stateMachineProcessControlEv+0x570>)
 80084ca:	881b      	ldrh	r3, [r3, #0]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d82d      	bhi.n	800852c <_ZN13Heattreatment26stateMachineProcessControlEv+0x43c>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	88da      	ldrh	r2, [r3, #6]
 80084d4:	4b62      	ldr	r3, [pc, #392]	; (8008660 <_ZN13Heattreatment26stateMachineProcessControlEv+0x570>)
 80084d6:	881b      	ldrh	r3, [r3, #0]
 80084d8:	429a      	cmp	r2, r3
 80084da:	d327      	bcc.n	800852c <_ZN13Heattreatment26stateMachineProcessControlEv+0x43c>
				&&(act_temperature_c2 >= m_temperatureLowerBound)&&(act_temperature_c2 <= m_temeperatureUpperBound)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	891a      	ldrh	r2, [r3, #8]
 80084e0:	4b60      	ldr	r3, [pc, #384]	; (8008664 <_ZN13Heattreatment26stateMachineProcessControlEv+0x574>)
 80084e2:	881b      	ldrh	r3, [r3, #0]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d821      	bhi.n	800852c <_ZN13Heattreatment26stateMachineProcessControlEv+0x43c>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	88da      	ldrh	r2, [r3, #6]
 80084ec:	4b5d      	ldr	r3, [pc, #372]	; (8008664 <_ZN13Heattreatment26stateMachineProcessControlEv+0x574>)
 80084ee:	881b      	ldrh	r3, [r3, #0]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d31b      	bcc.n	800852c <_ZN13Heattreatment26stateMachineProcessControlEv+0x43c>
				&&(act_temperature_c3 >= m_temperatureLowerBound)&&(act_temperature_c3 <= m_temeperatureUpperBound)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	891a      	ldrh	r2, [r3, #8]
 80084f8:	4b5b      	ldr	r3, [pc, #364]	; (8008668 <_ZN13Heattreatment26stateMachineProcessControlEv+0x578>)
 80084fa:	881b      	ldrh	r3, [r3, #0]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d815      	bhi.n	800852c <_ZN13Heattreatment26stateMachineProcessControlEv+0x43c>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	88da      	ldrh	r2, [r3, #6]
 8008504:	4b58      	ldr	r3, [pc, #352]	; (8008668 <_ZN13Heattreatment26stateMachineProcessControlEv+0x578>)
 8008506:	881b      	ldrh	r3, [r3, #0]
 8008508:	429a      	cmp	r2, r3
 800850a:	d30f      	bcc.n	800852c <_ZN13Heattreatment26stateMachineProcessControlEv+0x43c>
				&&(act_temperature_c4 >= m_temperatureLowerBound)&&(act_temperature_c4 <= m_temeperatureUpperBound))
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	891a      	ldrh	r2, [r3, #8]
 8008510:	4b56      	ldr	r3, [pc, #344]	; (800866c <_ZN13Heattreatment26stateMachineProcessControlEv+0x57c>)
 8008512:	881b      	ldrh	r3, [r3, #0]
 8008514:	429a      	cmp	r2, r3
 8008516:	d809      	bhi.n	800852c <_ZN13Heattreatment26stateMachineProcessControlEv+0x43c>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	88da      	ldrh	r2, [r3, #6]
 800851c:	4b53      	ldr	r3, [pc, #332]	; (800866c <_ZN13Heattreatment26stateMachineProcessControlEv+0x57c>)
 800851e:	881b      	ldrh	r3, [r3, #0]
 8008520:	429a      	cmp	r2, r3
 8008522:	d303      	bcc.n	800852c <_ZN13Heattreatment26stateMachineProcessControlEv+0x43c>
				{
					SEQMONITOR=23;
 8008524:	4b52      	ldr	r3, [pc, #328]	; (8008670 <_ZN13Heattreatment26stateMachineProcessControlEv+0x580>)
 8008526:	2217      	movs	r2, #23
 8008528:	701a      	strb	r2, [r3, #0]
 800852a:	e002      	b.n	8008532 <_ZN13Heattreatment26stateMachineProcessControlEv+0x442>
				}
				else{
					SEQMONITOR=22;
 800852c:	4b50      	ldr	r3, [pc, #320]	; (8008670 <_ZN13Heattreatment26stateMachineProcessControlEv+0x580>)
 800852e:	2216      	movs	r2, #22
 8008530:	701a      	strb	r2, [r3, #0]
				}
				status_to_server=20;
 8008532:	4b50      	ldr	r3, [pc, #320]	; (8008674 <_ZN13Heattreatment26stateMachineProcessControlEv+0x584>)
 8008534:	2214      	movs	r2, #20
 8008536:	701a      	strb	r2, [r3, #0]
		break;
 8008538:	e18b      	b.n	8008852 <_ZN13Heattreatment26stateMachineProcessControlEv+0x762>
		case 23:
			temperature_reference = Seq1temperature;
 800853a:	4b3d      	ldr	r3, [pc, #244]	; (8008630 <_ZN13Heattreatment26stateMachineProcessControlEv+0x540>)
 800853c:	881a      	ldrh	r2, [r3, #0]
 800853e:	4b3d      	ldr	r3, [pc, #244]	; (8008634 <_ZN13Heattreatment26stateMachineProcessControlEv+0x544>)
 8008540:	801a      	strh	r2, [r3, #0]
			Temp_Rising_Reference   = Rise_Sequence1_temp;
 8008542:	4b3d      	ldr	r3, [pc, #244]	; (8008638 <_ZN13Heattreatment26stateMachineProcessControlEv+0x548>)
 8008544:	881a      	ldrh	r2, [r3, #0]
 8008546:	4b3d      	ldr	r3, [pc, #244]	; (800863c <_ZN13Heattreatment26stateMachineProcessControlEv+0x54c>)
 8008548:	801a      	strh	r2, [r3, #0]
			TimeReference_Hr		= (unsigned char)H_Timer01HrValue;
 800854a:	4b3d      	ldr	r3, [pc, #244]	; (8008640 <_ZN13Heattreatment26stateMachineProcessControlEv+0x550>)
 800854c:	781a      	ldrb	r2, [r3, #0]
 800854e:	4b3d      	ldr	r3, [pc, #244]	; (8008644 <_ZN13Heattreatment26stateMachineProcessControlEv+0x554>)
 8008550:	701a      	strb	r2, [r3, #0]
			TimeReference_Min		= (unsigned char)H_Timer01MinValue;
 8008552:	4b3d      	ldr	r3, [pc, #244]	; (8008648 <_ZN13Heattreatment26stateMachineProcessControlEv+0x558>)
 8008554:	781a      	ldrb	r2, [r3, #0]
 8008556:	4b3d      	ldr	r3, [pc, #244]	; (800864c <_ZN13Heattreatment26stateMachineProcessControlEv+0x55c>)
 8008558:	701a      	strb	r2, [r3, #0]
			Time_Rising_Ref_Hr		= (unsigned char)Rise_Sequence1_Hour;
 800855a:	4b3d      	ldr	r3, [pc, #244]	; (8008650 <_ZN13Heattreatment26stateMachineProcessControlEv+0x560>)
 800855c:	781a      	ldrb	r2, [r3, #0]
 800855e:	4b3d      	ldr	r3, [pc, #244]	; (8008654 <_ZN13Heattreatment26stateMachineProcessControlEv+0x564>)
 8008560:	701a      	strb	r2, [r3, #0]
			Time_Rising_Ref_Min		= (unsigned char)Rise_Sequence1_Minute;
 8008562:	4b3d      	ldr	r3, [pc, #244]	; (8008658 <_ZN13Heattreatment26stateMachineProcessControlEv+0x568>)
 8008564:	781a      	ldrb	r2, [r3, #0]
 8008566:	4b3d      	ldr	r3, [pc, #244]	; (800865c <_ZN13Heattreatment26stateMachineProcessControlEv+0x56c>)
 8008568:	701a      	strb	r2, [r3, #0]
			m_temeperatureUpperBound = Seq1temperature+5;
 800856a:	4b31      	ldr	r3, [pc, #196]	; (8008630 <_ZN13Heattreatment26stateMachineProcessControlEv+0x540>)
 800856c:	881b      	ldrh	r3, [r3, #0]
 800856e:	3305      	adds	r3, #5
 8008570:	b29a      	uxth	r2, r3
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	80da      	strh	r2, [r3, #6]
			m_temperatureLowerBound  = Seq1temperature-5;
 8008576:	4b2e      	ldr	r3, [pc, #184]	; (8008630 <_ZN13Heattreatment26stateMachineProcessControlEv+0x540>)
 8008578:	881b      	ldrh	r3, [r3, #0]
 800857a:	3b05      	subs	r3, #5
 800857c:	b29a      	uxth	r2, r3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	811a      	strh	r2, [r3, #8]
			if(!start_process_control_timer)
 8008582:	4b3d      	ldr	r3, [pc, #244]	; (8008678 <_ZN13Heattreatment26stateMachineProcessControlEv+0x588>)
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d102      	bne.n	8008590 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4a0>
			{
				start_process_control_timer=1;
 800858a:	4b3b      	ldr	r3, [pc, #236]	; (8008678 <_ZN13Heattreatment26stateMachineProcessControlEv+0x588>)
 800858c:	2201      	movs	r2, #1
 800858e:	701a      	strb	r2, [r3, #0]
			}
			if(((act_temperature_c1 >= m_temperatureLowerBound)&&(act_temperature_c1 <=m_temeperatureUpperBound))
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	891a      	ldrh	r2, [r3, #8]
 8008594:	4b32      	ldr	r3, [pc, #200]	; (8008660 <_ZN13Heattreatment26stateMachineProcessControlEv+0x570>)
 8008596:	881b      	ldrh	r3, [r3, #0]
 8008598:	429a      	cmp	r2, r3
 800859a:	d805      	bhi.n	80085a8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4b8>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	88da      	ldrh	r2, [r3, #6]
 80085a0:	4b2f      	ldr	r3, [pc, #188]	; (8008660 <_ZN13Heattreatment26stateMachineProcessControlEv+0x570>)
 80085a2:	881b      	ldrh	r3, [r3, #0]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d223      	bcs.n	80085f0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x500>
			||((act_temperature_c2 >= m_temperatureLowerBound)&&(act_temperature_c2 <=m_temeperatureUpperBound))
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	891a      	ldrh	r2, [r3, #8]
 80085ac:	4b2d      	ldr	r3, [pc, #180]	; (8008664 <_ZN13Heattreatment26stateMachineProcessControlEv+0x574>)
 80085ae:	881b      	ldrh	r3, [r3, #0]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d805      	bhi.n	80085c0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4d0>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	88da      	ldrh	r2, [r3, #6]
 80085b8:	4b2a      	ldr	r3, [pc, #168]	; (8008664 <_ZN13Heattreatment26stateMachineProcessControlEv+0x574>)
 80085ba:	881b      	ldrh	r3, [r3, #0]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d217      	bcs.n	80085f0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x500>
			||((act_temperature_c3 >= m_temperatureLowerBound)&&(act_temperature_c3 <=m_temeperatureUpperBound))
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	891a      	ldrh	r2, [r3, #8]
 80085c4:	4b28      	ldr	r3, [pc, #160]	; (8008668 <_ZN13Heattreatment26stateMachineProcessControlEv+0x578>)
 80085c6:	881b      	ldrh	r3, [r3, #0]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d805      	bhi.n	80085d8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4e8>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	88da      	ldrh	r2, [r3, #6]
 80085d0:	4b25      	ldr	r3, [pc, #148]	; (8008668 <_ZN13Heattreatment26stateMachineProcessControlEv+0x578>)
 80085d2:	881b      	ldrh	r3, [r3, #0]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d20b      	bcs.n	80085f0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x500>
			||((act_temperature_c4 >= m_temperatureLowerBound)&&(act_temperature_c4 <=m_temeperatureUpperBound)))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	891a      	ldrh	r2, [r3, #8]
 80085dc:	4b23      	ldr	r3, [pc, #140]	; (800866c <_ZN13Heattreatment26stateMachineProcessControlEv+0x57c>)
 80085de:	881b      	ldrh	r3, [r3, #0]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d809      	bhi.n	80085f8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x508>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	88da      	ldrh	r2, [r3, #6]
 80085e8:	4b20      	ldr	r3, [pc, #128]	; (800866c <_ZN13Heattreatment26stateMachineProcessControlEv+0x57c>)
 80085ea:	881b      	ldrh	r3, [r3, #0]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d303      	bcc.n	80085f8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x508>
			{
				stop_timer_count = 0;
 80085f0:	4b22      	ldr	r3, [pc, #136]	; (800867c <_ZN13Heattreatment26stateMachineProcessControlEv+0x58c>)
 80085f2:	2200      	movs	r2, #0
 80085f4:	701a      	strb	r2, [r3, #0]
 80085f6:	e002      	b.n	80085fe <_ZN13Heattreatment26stateMachineProcessControlEv+0x50e>
			}
			else
			{
				stop_timer_count = 1;
 80085f8:	4b20      	ldr	r3, [pc, #128]	; (800867c <_ZN13Heattreatment26stateMachineProcessControlEv+0x58c>)
 80085fa:	2201      	movs	r2, #1
 80085fc:	701a      	strb	r2, [r3, #0]
			}
			if(process_complete==1){
 80085fe:	4b20      	ldr	r3, [pc, #128]	; (8008680 <_ZN13Heattreatment26stateMachineProcessControlEv+0x590>)
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	2b01      	cmp	r3, #1
 8008604:	d10c      	bne.n	8008620 <_ZN13Heattreatment26stateMachineProcessControlEv+0x530>
				process_complete = 0;
 8008606:	4b1e      	ldr	r3, [pc, #120]	; (8008680 <_ZN13Heattreatment26stateMachineProcessControlEv+0x590>)
 8008608:	2200      	movs	r2, #0
 800860a:	701a      	strb	r2, [r3, #0]
				start_process_control_timer=0;
 800860c:	4b1a      	ldr	r3, [pc, #104]	; (8008678 <_ZN13Heattreatment26stateMachineProcessControlEv+0x588>)
 800860e:	2200      	movs	r2, #0
 8008610:	701a      	strb	r2, [r3, #0]
				SEQMONITOR = 24;
 8008612:	4b17      	ldr	r3, [pc, #92]	; (8008670 <_ZN13Heattreatment26stateMachineProcessControlEv+0x580>)
 8008614:	2218      	movs	r2, #24
 8008616:	701a      	strb	r2, [r3, #0]
				NewQuenchingReq=1;
 8008618:	4b1a      	ldr	r3, [pc, #104]	; (8008684 <_ZN13Heattreatment26stateMachineProcessControlEv+0x594>)
 800861a:	2201      	movs	r2, #1
 800861c:	701a      	strb	r2, [r3, #0]
 800861e:	e002      	b.n	8008626 <_ZN13Heattreatment26stateMachineProcessControlEv+0x536>

			}
			else{
				SEQMONITOR = 23;
 8008620:	4b13      	ldr	r3, [pc, #76]	; (8008670 <_ZN13Heattreatment26stateMachineProcessControlEv+0x580>)
 8008622:	2217      	movs	r2, #23
 8008624:	701a      	strb	r2, [r3, #0]
			}
			status_to_server=21;
 8008626:	4b13      	ldr	r3, [pc, #76]	; (8008674 <_ZN13Heattreatment26stateMachineProcessControlEv+0x584>)
 8008628:	2215      	movs	r2, #21
 800862a:	701a      	strb	r2, [r3, #0]
		 break;
 800862c:	e111      	b.n	8008852 <_ZN13Heattreatment26stateMachineProcessControlEv+0x762>
 800862e:	bf00      	nop
 8008630:	20000616 	.word	0x20000616
 8008634:	2000061a 	.word	0x2000061a
 8008638:	20000630 	.word	0x20000630
 800863c:	20000638 	.word	0x20000638
 8008640:	20000628 	.word	0x20000628
 8008644:	2000063a 	.word	0x2000063a
 8008648:	20000629 	.word	0x20000629
 800864c:	2000063b 	.word	0x2000063b
 8008650:	20000634 	.word	0x20000634
 8008654:	2000063c 	.word	0x2000063c
 8008658:	20000635 	.word	0x20000635
 800865c:	2000063d 	.word	0x2000063d
 8008660:	2000061c 	.word	0x2000061c
 8008664:	2000061e 	.word	0x2000061e
 8008668:	20000620 	.word	0x20000620
 800866c:	20000622 	.word	0x20000622
 8008670:	20000624 	.word	0x20000624
 8008674:	20000612 	.word	0x20000612
 8008678:	20000625 	.word	0x20000625
 800867c:	20000626 	.word	0x20000626
 8008680:	20000627 	.word	0x20000627
 8008684:	20000611 	.word	0x20000611
		case 24:
				temperature_reference = Seq2temperature;
 8008688:	4b7a      	ldr	r3, [pc, #488]	; (8008874 <_ZN13Heattreatment26stateMachineProcessControlEv+0x784>)
 800868a:	881a      	ldrh	r2, [r3, #0]
 800868c:	4b7a      	ldr	r3, [pc, #488]	; (8008878 <_ZN13Heattreatment26stateMachineProcessControlEv+0x788>)
 800868e:	801a      	strh	r2, [r3, #0]
				Temp_Rising_Reference   = Rise_Sequence2_temp;
 8008690:	4b7a      	ldr	r3, [pc, #488]	; (800887c <_ZN13Heattreatment26stateMachineProcessControlEv+0x78c>)
 8008692:	881a      	ldrh	r2, [r3, #0]
 8008694:	4b7a      	ldr	r3, [pc, #488]	; (8008880 <_ZN13Heattreatment26stateMachineProcessControlEv+0x790>)
 8008696:	801a      	strh	r2, [r3, #0]
				TimeReference_Hr		= (unsigned char)H_Timer02HrValue;
 8008698:	4b7a      	ldr	r3, [pc, #488]	; (8008884 <_ZN13Heattreatment26stateMachineProcessControlEv+0x794>)
 800869a:	781a      	ldrb	r2, [r3, #0]
 800869c:	4b7a      	ldr	r3, [pc, #488]	; (8008888 <_ZN13Heattreatment26stateMachineProcessControlEv+0x798>)
 800869e:	701a      	strb	r2, [r3, #0]
				TimeReference_Min		= (unsigned char)H_Timer02MinValue;
 80086a0:	4b7a      	ldr	r3, [pc, #488]	; (800888c <_ZN13Heattreatment26stateMachineProcessControlEv+0x79c>)
 80086a2:	781a      	ldrb	r2, [r3, #0]
 80086a4:	4b7a      	ldr	r3, [pc, #488]	; (8008890 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7a0>)
 80086a6:	701a      	strb	r2, [r3, #0]
				Time_Rising_Ref_Hr		= (unsigned char)Rise_Sequence2_Hour;
 80086a8:	4b7a      	ldr	r3, [pc, #488]	; (8008894 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7a4>)
 80086aa:	781a      	ldrb	r2, [r3, #0]
 80086ac:	4b7a      	ldr	r3, [pc, #488]	; (8008898 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7a8>)
 80086ae:	701a      	strb	r2, [r3, #0]
				Time_Rising_Ref_Min		= (unsigned char)Rise_Sequence2_Minute;
 80086b0:	4b7a      	ldr	r3, [pc, #488]	; (800889c <_ZN13Heattreatment26stateMachineProcessControlEv+0x7ac>)
 80086b2:	781a      	ldrb	r2, [r3, #0]
 80086b4:	4b7a      	ldr	r3, [pc, #488]	; (80088a0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7b0>)
 80086b6:	701a      	strb	r2, [r3, #0]
				m_temeperatureUpperBound = Seq2temperature+3;
 80086b8:	4b6e      	ldr	r3, [pc, #440]	; (8008874 <_ZN13Heattreatment26stateMachineProcessControlEv+0x784>)
 80086ba:	881b      	ldrh	r3, [r3, #0]
 80086bc:	3303      	adds	r3, #3
 80086be:	b29a      	uxth	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	80da      	strh	r2, [r3, #6]
				m_temperatureLowerBound  = Seq2temperature-3;
 80086c4:	4b6b      	ldr	r3, [pc, #428]	; (8008874 <_ZN13Heattreatment26stateMachineProcessControlEv+0x784>)
 80086c6:	881b      	ldrh	r3, [r3, #0]
 80086c8:	3b03      	subs	r3, #3
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	811a      	strh	r2, [r3, #8]
				if((act_temperature_c1 >= m_temperatureLowerBound)&&(act_temperature_c1 <= m_temeperatureUpperBound)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	891a      	ldrh	r2, [r3, #8]
 80086d4:	4b73      	ldr	r3, [pc, #460]	; (80088a4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7b4>)
 80086d6:	881b      	ldrh	r3, [r3, #0]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d82d      	bhi.n	8008738 <_ZN13Heattreatment26stateMachineProcessControlEv+0x648>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	88da      	ldrh	r2, [r3, #6]
 80086e0:	4b70      	ldr	r3, [pc, #448]	; (80088a4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7b4>)
 80086e2:	881b      	ldrh	r3, [r3, #0]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d327      	bcc.n	8008738 <_ZN13Heattreatment26stateMachineProcessControlEv+0x648>
				&&(act_temperature_c2 >= m_temperatureLowerBound)&&(act_temperature_c2 <= m_temeperatureUpperBound)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	891a      	ldrh	r2, [r3, #8]
 80086ec:	4b6e      	ldr	r3, [pc, #440]	; (80088a8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7b8>)
 80086ee:	881b      	ldrh	r3, [r3, #0]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d821      	bhi.n	8008738 <_ZN13Heattreatment26stateMachineProcessControlEv+0x648>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	88da      	ldrh	r2, [r3, #6]
 80086f8:	4b6b      	ldr	r3, [pc, #428]	; (80088a8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7b8>)
 80086fa:	881b      	ldrh	r3, [r3, #0]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d31b      	bcc.n	8008738 <_ZN13Heattreatment26stateMachineProcessControlEv+0x648>
				&&(act_temperature_c3 >= m_temperatureLowerBound)&&(act_temperature_c3 <= m_temeperatureUpperBound)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	891a      	ldrh	r2, [r3, #8]
 8008704:	4b69      	ldr	r3, [pc, #420]	; (80088ac <_ZN13Heattreatment26stateMachineProcessControlEv+0x7bc>)
 8008706:	881b      	ldrh	r3, [r3, #0]
 8008708:	429a      	cmp	r2, r3
 800870a:	d815      	bhi.n	8008738 <_ZN13Heattreatment26stateMachineProcessControlEv+0x648>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	88da      	ldrh	r2, [r3, #6]
 8008710:	4b66      	ldr	r3, [pc, #408]	; (80088ac <_ZN13Heattreatment26stateMachineProcessControlEv+0x7bc>)
 8008712:	881b      	ldrh	r3, [r3, #0]
 8008714:	429a      	cmp	r2, r3
 8008716:	d30f      	bcc.n	8008738 <_ZN13Heattreatment26stateMachineProcessControlEv+0x648>
				&&(act_temperature_c4 >= m_temperatureLowerBound)&&(act_temperature_c4 <= m_temeperatureUpperBound))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	891a      	ldrh	r2, [r3, #8]
 800871c:	4b64      	ldr	r3, [pc, #400]	; (80088b0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7c0>)
 800871e:	881b      	ldrh	r3, [r3, #0]
 8008720:	429a      	cmp	r2, r3
 8008722:	d809      	bhi.n	8008738 <_ZN13Heattreatment26stateMachineProcessControlEv+0x648>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	88da      	ldrh	r2, [r3, #6]
 8008728:	4b61      	ldr	r3, [pc, #388]	; (80088b0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7c0>)
 800872a:	881b      	ldrh	r3, [r3, #0]
 800872c:	429a      	cmp	r2, r3
 800872e:	d303      	bcc.n	8008738 <_ZN13Heattreatment26stateMachineProcessControlEv+0x648>
				{
					SEQMONITOR=25;
 8008730:	4b60      	ldr	r3, [pc, #384]	; (80088b4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7c4>)
 8008732:	2219      	movs	r2, #25
 8008734:	701a      	strb	r2, [r3, #0]
 8008736:	e002      	b.n	800873e <_ZN13Heattreatment26stateMachineProcessControlEv+0x64e>
				}
				else{
					SEQMONITOR=24;
 8008738:	4b5e      	ldr	r3, [pc, #376]	; (80088b4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7c4>)
 800873a:	2218      	movs	r2, #24
 800873c:	701a      	strb	r2, [r3, #0]
				}
				status_to_server=22;
 800873e:	4b5e      	ldr	r3, [pc, #376]	; (80088b8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7c8>)
 8008740:	2216      	movs	r2, #22
 8008742:	701a      	strb	r2, [r3, #0]
		break;
 8008744:	e085      	b.n	8008852 <_ZN13Heattreatment26stateMachineProcessControlEv+0x762>
		case 25:
				temperature_reference = Seq2temperature;
 8008746:	4b4b      	ldr	r3, [pc, #300]	; (8008874 <_ZN13Heattreatment26stateMachineProcessControlEv+0x784>)
 8008748:	881a      	ldrh	r2, [r3, #0]
 800874a:	4b4b      	ldr	r3, [pc, #300]	; (8008878 <_ZN13Heattreatment26stateMachineProcessControlEv+0x788>)
 800874c:	801a      	strh	r2, [r3, #0]
				Temp_Rising_Reference   = Rise_Sequence2_temp;
 800874e:	4b4b      	ldr	r3, [pc, #300]	; (800887c <_ZN13Heattreatment26stateMachineProcessControlEv+0x78c>)
 8008750:	881a      	ldrh	r2, [r3, #0]
 8008752:	4b4b      	ldr	r3, [pc, #300]	; (8008880 <_ZN13Heattreatment26stateMachineProcessControlEv+0x790>)
 8008754:	801a      	strh	r2, [r3, #0]
				TimeReference_Hr		= (unsigned char)H_Timer02HrValue;
 8008756:	4b4b      	ldr	r3, [pc, #300]	; (8008884 <_ZN13Heattreatment26stateMachineProcessControlEv+0x794>)
 8008758:	781a      	ldrb	r2, [r3, #0]
 800875a:	4b4b      	ldr	r3, [pc, #300]	; (8008888 <_ZN13Heattreatment26stateMachineProcessControlEv+0x798>)
 800875c:	701a      	strb	r2, [r3, #0]
				TimeReference_Min		= (unsigned char)H_Timer02MinValue;
 800875e:	4b4b      	ldr	r3, [pc, #300]	; (800888c <_ZN13Heattreatment26stateMachineProcessControlEv+0x79c>)
 8008760:	781a      	ldrb	r2, [r3, #0]
 8008762:	4b4b      	ldr	r3, [pc, #300]	; (8008890 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7a0>)
 8008764:	701a      	strb	r2, [r3, #0]
				Time_Rising_Ref_Hr		= (unsigned char)Rise_Sequence2_Hour;
 8008766:	4b4b      	ldr	r3, [pc, #300]	; (8008894 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7a4>)
 8008768:	781a      	ldrb	r2, [r3, #0]
 800876a:	4b4b      	ldr	r3, [pc, #300]	; (8008898 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7a8>)
 800876c:	701a      	strb	r2, [r3, #0]
				Time_Rising_Ref_Min		= (unsigned char)Rise_Sequence2_Minute;
 800876e:	4b4b      	ldr	r3, [pc, #300]	; (800889c <_ZN13Heattreatment26stateMachineProcessControlEv+0x7ac>)
 8008770:	781a      	ldrb	r2, [r3, #0]
 8008772:	4b4b      	ldr	r3, [pc, #300]	; (80088a0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7b0>)
 8008774:	701a      	strb	r2, [r3, #0]
				m_temeperatureUpperBound = Seq2temperature+5;
 8008776:	4b3f      	ldr	r3, [pc, #252]	; (8008874 <_ZN13Heattreatment26stateMachineProcessControlEv+0x784>)
 8008778:	881b      	ldrh	r3, [r3, #0]
 800877a:	3305      	adds	r3, #5
 800877c:	b29a      	uxth	r2, r3
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	80da      	strh	r2, [r3, #6]
				m_temperatureLowerBound  = Seq2temperature-5;
 8008782:	4b3c      	ldr	r3, [pc, #240]	; (8008874 <_ZN13Heattreatment26stateMachineProcessControlEv+0x784>)
 8008784:	881b      	ldrh	r3, [r3, #0]
 8008786:	3b05      	subs	r3, #5
 8008788:	b29a      	uxth	r2, r3
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	811a      	strh	r2, [r3, #8]
				if(!start_process_control_timer)
 800878e:	4b4b      	ldr	r3, [pc, #300]	; (80088bc <_ZN13Heattreatment26stateMachineProcessControlEv+0x7cc>)
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d102      	bne.n	800879c <_ZN13Heattreatment26stateMachineProcessControlEv+0x6ac>
				{
					start_process_control_timer=2;
 8008796:	4b49      	ldr	r3, [pc, #292]	; (80088bc <_ZN13Heattreatment26stateMachineProcessControlEv+0x7cc>)
 8008798:	2202      	movs	r2, #2
 800879a:	701a      	strb	r2, [r3, #0]
				}
				if(((act_temperature_c1 >= m_temperatureLowerBound)&&(act_temperature_c1 <=m_temeperatureUpperBound))
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	891a      	ldrh	r2, [r3, #8]
 80087a0:	4b40      	ldr	r3, [pc, #256]	; (80088a4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7b4>)
 80087a2:	881b      	ldrh	r3, [r3, #0]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d805      	bhi.n	80087b4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x6c4>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	88da      	ldrh	r2, [r3, #6]
 80087ac:	4b3d      	ldr	r3, [pc, #244]	; (80088a4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7b4>)
 80087ae:	881b      	ldrh	r3, [r3, #0]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d223      	bcs.n	80087fc <_ZN13Heattreatment26stateMachineProcessControlEv+0x70c>
				||((act_temperature_c2 >= m_temperatureLowerBound)&&(act_temperature_c2 <=m_temeperatureUpperBound))
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	891a      	ldrh	r2, [r3, #8]
 80087b8:	4b3b      	ldr	r3, [pc, #236]	; (80088a8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7b8>)
 80087ba:	881b      	ldrh	r3, [r3, #0]
 80087bc:	429a      	cmp	r2, r3
 80087be:	d805      	bhi.n	80087cc <_ZN13Heattreatment26stateMachineProcessControlEv+0x6dc>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	88da      	ldrh	r2, [r3, #6]
 80087c4:	4b38      	ldr	r3, [pc, #224]	; (80088a8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7b8>)
 80087c6:	881b      	ldrh	r3, [r3, #0]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d217      	bcs.n	80087fc <_ZN13Heattreatment26stateMachineProcessControlEv+0x70c>
				||((act_temperature_c3 >= m_temperatureLowerBound)&&(act_temperature_c3 <=m_temeperatureUpperBound))
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	891a      	ldrh	r2, [r3, #8]
 80087d0:	4b36      	ldr	r3, [pc, #216]	; (80088ac <_ZN13Heattreatment26stateMachineProcessControlEv+0x7bc>)
 80087d2:	881b      	ldrh	r3, [r3, #0]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d805      	bhi.n	80087e4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x6f4>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	88da      	ldrh	r2, [r3, #6]
 80087dc:	4b33      	ldr	r3, [pc, #204]	; (80088ac <_ZN13Heattreatment26stateMachineProcessControlEv+0x7bc>)
 80087de:	881b      	ldrh	r3, [r3, #0]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d20b      	bcs.n	80087fc <_ZN13Heattreatment26stateMachineProcessControlEv+0x70c>
				||((act_temperature_c4 >= m_temperatureLowerBound)&&(act_temperature_c4 <=m_temeperatureUpperBound)))
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	891a      	ldrh	r2, [r3, #8]
 80087e8:	4b31      	ldr	r3, [pc, #196]	; (80088b0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7c0>)
 80087ea:	881b      	ldrh	r3, [r3, #0]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d809      	bhi.n	8008804 <_ZN13Heattreatment26stateMachineProcessControlEv+0x714>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	88da      	ldrh	r2, [r3, #6]
 80087f4:	4b2e      	ldr	r3, [pc, #184]	; (80088b0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7c0>)
 80087f6:	881b      	ldrh	r3, [r3, #0]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d303      	bcc.n	8008804 <_ZN13Heattreatment26stateMachineProcessControlEv+0x714>
				{
					stop_timer_count = 0;
 80087fc:	4b30      	ldr	r3, [pc, #192]	; (80088c0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7d0>)
 80087fe:	2200      	movs	r2, #0
 8008800:	701a      	strb	r2, [r3, #0]
 8008802:	e002      	b.n	800880a <_ZN13Heattreatment26stateMachineProcessControlEv+0x71a>
				}
				else
				{
					stop_timer_count = 1;
 8008804:	4b2e      	ldr	r3, [pc, #184]	; (80088c0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7d0>)
 8008806:	2201      	movs	r2, #1
 8008808:	701a      	strb	r2, [r3, #0]
				}
				if(process_complete==2){
 800880a:	4b2e      	ldr	r3, [pc, #184]	; (80088c4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7d4>)
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	2b02      	cmp	r3, #2
 8008810:	d109      	bne.n	8008826 <_ZN13Heattreatment26stateMachineProcessControlEv+0x736>
					process_complete = 0;
 8008812:	4b2c      	ldr	r3, [pc, #176]	; (80088c4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7d4>)
 8008814:	2200      	movs	r2, #0
 8008816:	701a      	strb	r2, [r3, #0]
					start_process_control_timer=0;
 8008818:	4b28      	ldr	r3, [pc, #160]	; (80088bc <_ZN13Heattreatment26stateMachineProcessControlEv+0x7cc>)
 800881a:	2200      	movs	r2, #0
 800881c:	701a      	strb	r2, [r3, #0]
					SEQMONITOR = 26;
 800881e:	4b25      	ldr	r3, [pc, #148]	; (80088b4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7c4>)
 8008820:	221a      	movs	r2, #26
 8008822:	701a      	strb	r2, [r3, #0]
 8008824:	e002      	b.n	800882c <_ZN13Heattreatment26stateMachineProcessControlEv+0x73c>
				}
				else{
					SEQMONITOR = 25;
 8008826:	4b23      	ldr	r3, [pc, #140]	; (80088b4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7c4>)
 8008828:	2219      	movs	r2, #25
 800882a:	701a      	strb	r2, [r3, #0]
				}
				status_to_server=23;
 800882c:	4b22      	ldr	r3, [pc, #136]	; (80088b8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7c8>)
 800882e:	2217      	movs	r2, #23
 8008830:	701a      	strb	r2, [r3, #0]
			 break;
 8008832:	e00e      	b.n	8008852 <_ZN13Heattreatment26stateMachineProcessControlEv+0x762>
		case 26:
			status_to_server=30;
 8008834:	4b20      	ldr	r3, [pc, #128]	; (80088b8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7c8>)
 8008836:	221e      	movs	r2, #30
 8008838:	701a      	strb	r2, [r3, #0]
			SEQMONITOR   = 20;
 800883a:	4b1e      	ldr	r3, [pc, #120]	; (80088b4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7c4>)
 800883c:	2214      	movs	r2, #20
 800883e:	701a      	strb	r2, [r3, #0]
			temperature_reference = 32;
 8008840:	4b0d      	ldr	r3, [pc, #52]	; (8008878 <_ZN13Heattreatment26stateMachineProcessControlEv+0x788>)
 8008842:	2220      	movs	r2, #32
 8008844:	801a      	strh	r2, [r3, #0]
		break;
 8008846:	e004      	b.n	8008852 <_ZN13Heattreatment26stateMachineProcessControlEv+0x762>
		default:
			SEQMONITOR   = 10;
 8008848:	4b1a      	ldr	r3, [pc, #104]	; (80088b4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7c4>)
 800884a:	220a      	movs	r2, #10
 800884c:	701a      	strb	r2, [r3, #0]
		break;
 800884e:	e000      	b.n	8008852 <_ZN13Heattreatment26stateMachineProcessControlEv+0x762>
		break;
 8008850:	bf00      	nop
	}
	if((IDGen_Skip_Http==10)&&(SEQMONITOR!=26))
 8008852:	4b1d      	ldr	r3, [pc, #116]	; (80088c8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7d8>)
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	2b0a      	cmp	r3, #10
 8008858:	d106      	bne.n	8008868 <_ZN13Heattreatment26stateMachineProcessControlEv+0x778>
 800885a:	4b16      	ldr	r3, [pc, #88]	; (80088b4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7c4>)
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	2b1a      	cmp	r3, #26
 8008860:	d002      	beq.n	8008868 <_ZN13Heattreatment26stateMachineProcessControlEv+0x778>
	{
		SEQMONITOR = 26;
 8008862:	4b14      	ldr	r3, [pc, #80]	; (80088b4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x7c4>)
 8008864:	221a      	movs	r2, #26
 8008866:	701a      	strb	r2, [r3, #0]
	}
}
 8008868:	bf00      	nop
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr
 8008874:	20000618 	.word	0x20000618
 8008878:	2000061a 	.word	0x2000061a
 800887c:	20000632 	.word	0x20000632
 8008880:	20000638 	.word	0x20000638
 8008884:	2000062a 	.word	0x2000062a
 8008888:	2000063a 	.word	0x2000063a
 800888c:	2000062b 	.word	0x2000062b
 8008890:	2000063b 	.word	0x2000063b
 8008894:	20000636 	.word	0x20000636
 8008898:	2000063c 	.word	0x2000063c
 800889c:	20000637 	.word	0x20000637
 80088a0:	2000063d 	.word	0x2000063d
 80088a4:	2000061c 	.word	0x2000061c
 80088a8:	2000061e 	.word	0x2000061e
 80088ac:	20000620 	.word	0x20000620
 80088b0:	20000622 	.word	0x20000622
 80088b4:	20000624 	.word	0x20000624
 80088b8:	20000612 	.word	0x20000612
 80088bc:	20000625 	.word	0x20000625
 80088c0:	20000626 	.word	0x20000626
 80088c4:	20000627 	.word	0x20000627
 80088c8:	200000f3 	.word	0x200000f3

080088cc <_ZN13Heattreatment14specialHandlerEv>:

void Heattreatment::specialHandler(void)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 if(Status_Http!=11){return;}
 80088d4:	4b6b      	ldr	r3, [pc, #428]	; (8008a84 <_ZN13Heattreatment14specialHandlerEv+0x1b8>)
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	2b0b      	cmp	r3, #11
 80088da:	f040 80cc 	bne.w	8008a76 <_ZN13Heattreatment14specialHandlerEv+0x1aa>
	if(Status_Http==11)
 80088de:	4b69      	ldr	r3, [pc, #420]	; (8008a84 <_ZN13Heattreatment14specialHandlerEv+0x1b8>)
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	2b0b      	cmp	r3, #11
 80088e4:	f040 80c8 	bne.w	8008a78 <_ZN13Heattreatment14specialHandlerEv+0x1ac>
	{
		if(Temperature_High_Http!=0)
 80088e8:	4b67      	ldr	r3, [pc, #412]	; (8008a88 <_ZN13Heattreatment14specialHandlerEv+0x1bc>)
 80088ea:	881b      	ldrh	r3, [r3, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d00c      	beq.n	800890a <_ZN13Heattreatment14specialHandlerEv+0x3e>
		{
			if(Seq1temperature!=Temperature_High_Http)
 80088f0:	4b66      	ldr	r3, [pc, #408]	; (8008a8c <_ZN13Heattreatment14specialHandlerEv+0x1c0>)
 80088f2:	881a      	ldrh	r2, [r3, #0]
 80088f4:	4b64      	ldr	r3, [pc, #400]	; (8008a88 <_ZN13Heattreatment14specialHandlerEv+0x1bc>)
 80088f6:	881b      	ldrh	r3, [r3, #0]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d006      	beq.n	800890a <_ZN13Heattreatment14specialHandlerEv+0x3e>
			{
				Seq1temperature= Temperature_High_Http;
 80088fc:	4b62      	ldr	r3, [pc, #392]	; (8008a88 <_ZN13Heattreatment14specialHandlerEv+0x1bc>)
 80088fe:	881a      	ldrh	r2, [r3, #0]
 8008900:	4b62      	ldr	r3, [pc, #392]	; (8008a8c <_ZN13Heattreatment14specialHandlerEv+0x1c0>)
 8008902:	801a      	strh	r2, [r3, #0]
				updateSetData=1;
 8008904:	4b62      	ldr	r3, [pc, #392]	; (8008a90 <_ZN13Heattreatment14specialHandlerEv+0x1c4>)
 8008906:	2201      	movs	r2, #1
 8008908:	701a      	strb	r2, [r3, #0]
			}
		}
		if(Temperature_Low_Http!=0)
 800890a:	4b62      	ldr	r3, [pc, #392]	; (8008a94 <_ZN13Heattreatment14specialHandlerEv+0x1c8>)
 800890c:	881b      	ldrh	r3, [r3, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00c      	beq.n	800892c <_ZN13Heattreatment14specialHandlerEv+0x60>
		{
			if(Seq2temperature!=Temperature_Low_Http)
 8008912:	4b61      	ldr	r3, [pc, #388]	; (8008a98 <_ZN13Heattreatment14specialHandlerEv+0x1cc>)
 8008914:	881a      	ldrh	r2, [r3, #0]
 8008916:	4b5f      	ldr	r3, [pc, #380]	; (8008a94 <_ZN13Heattreatment14specialHandlerEv+0x1c8>)
 8008918:	881b      	ldrh	r3, [r3, #0]
 800891a:	429a      	cmp	r2, r3
 800891c:	d006      	beq.n	800892c <_ZN13Heattreatment14specialHandlerEv+0x60>
			{
				Seq2temperature= Temperature_Low_Http;
 800891e:	4b5d      	ldr	r3, [pc, #372]	; (8008a94 <_ZN13Heattreatment14specialHandlerEv+0x1c8>)
 8008920:	881a      	ldrh	r2, [r3, #0]
 8008922:	4b5d      	ldr	r3, [pc, #372]	; (8008a98 <_ZN13Heattreatment14specialHandlerEv+0x1cc>)
 8008924:	801a      	strh	r2, [r3, #0]
				updateSetData=1;
 8008926:	4b5a      	ldr	r3, [pc, #360]	; (8008a90 <_ZN13Heattreatment14specialHandlerEv+0x1c4>)
 8008928:	2201      	movs	r2, #1
 800892a:	701a      	strb	r2, [r3, #0]
			}
		}
		if(H_Timer01HrValue!=Sequence1_hour_http)
 800892c:	4b5b      	ldr	r3, [pc, #364]	; (8008a9c <_ZN13Heattreatment14specialHandlerEv+0x1d0>)
 800892e:	781a      	ldrb	r2, [r3, #0]
 8008930:	4b5b      	ldr	r3, [pc, #364]	; (8008aa0 <_ZN13Heattreatment14specialHandlerEv+0x1d4>)
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	429a      	cmp	r2, r3
 8008936:	d015      	beq.n	8008964 <_ZN13Heattreatment14specialHandlerEv+0x98>
		{
			H_Timer01HrValue= Sequence1_hour_http;
 8008938:	4b59      	ldr	r3, [pc, #356]	; (8008aa0 <_ZN13Heattreatment14specialHandlerEv+0x1d4>)
 800893a:	781a      	ldrb	r2, [r3, #0]
 800893c:	4b57      	ldr	r3, [pc, #348]	; (8008a9c <_ZN13Heattreatment14specialHandlerEv+0x1d0>)
 800893e:	701a      	strb	r2, [r3, #0]
			ProcessTotalMin1 	=  (H_Timer01HrValue*60)+  H_Timer01MinValue;
 8008940:	4b56      	ldr	r3, [pc, #344]	; (8008a9c <_ZN13Heattreatment14specialHandlerEv+0x1d0>)
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	b29b      	uxth	r3, r3
 8008946:	461a      	mov	r2, r3
 8008948:	0112      	lsls	r2, r2, #4
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	b29a      	uxth	r2, r3
 8008950:	4b54      	ldr	r3, [pc, #336]	; (8008aa4 <_ZN13Heattreatment14specialHandlerEv+0x1d8>)
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	b29b      	uxth	r3, r3
 8008956:	4413      	add	r3, r2
 8008958:	b29a      	uxth	r2, r3
 800895a:	4b53      	ldr	r3, [pc, #332]	; (8008aa8 <_ZN13Heattreatment14specialHandlerEv+0x1dc>)
 800895c:	801a      	strh	r2, [r3, #0]
			updateSetData=1;
 800895e:	4b4c      	ldr	r3, [pc, #304]	; (8008a90 <_ZN13Heattreatment14specialHandlerEv+0x1c4>)
 8008960:	2201      	movs	r2, #1
 8008962:	701a      	strb	r2, [r3, #0]
		}
		if(H_Timer01MinValue!=Sequence1_minute_http)
 8008964:	4b4f      	ldr	r3, [pc, #316]	; (8008aa4 <_ZN13Heattreatment14specialHandlerEv+0x1d8>)
 8008966:	781a      	ldrb	r2, [r3, #0]
 8008968:	4b50      	ldr	r3, [pc, #320]	; (8008aac <_ZN13Heattreatment14specialHandlerEv+0x1e0>)
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	429a      	cmp	r2, r3
 800896e:	d015      	beq.n	800899c <_ZN13Heattreatment14specialHandlerEv+0xd0>
		{
			H_Timer01MinValue= Sequence1_minute_http;
 8008970:	4b4e      	ldr	r3, [pc, #312]	; (8008aac <_ZN13Heattreatment14specialHandlerEv+0x1e0>)
 8008972:	781a      	ldrb	r2, [r3, #0]
 8008974:	4b4b      	ldr	r3, [pc, #300]	; (8008aa4 <_ZN13Heattreatment14specialHandlerEv+0x1d8>)
 8008976:	701a      	strb	r2, [r3, #0]
			ProcessTotalMin1 	=  (H_Timer01HrValue*60)+  H_Timer01MinValue;
 8008978:	4b48      	ldr	r3, [pc, #288]	; (8008a9c <_ZN13Heattreatment14specialHandlerEv+0x1d0>)
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	b29b      	uxth	r3, r3
 800897e:	461a      	mov	r2, r3
 8008980:	0112      	lsls	r2, r2, #4
 8008982:	1ad3      	subs	r3, r2, r3
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	b29a      	uxth	r2, r3
 8008988:	4b46      	ldr	r3, [pc, #280]	; (8008aa4 <_ZN13Heattreatment14specialHandlerEv+0x1d8>)
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	b29b      	uxth	r3, r3
 800898e:	4413      	add	r3, r2
 8008990:	b29a      	uxth	r2, r3
 8008992:	4b45      	ldr	r3, [pc, #276]	; (8008aa8 <_ZN13Heattreatment14specialHandlerEv+0x1dc>)
 8008994:	801a      	strh	r2, [r3, #0]
			updateSetData=1;
 8008996:	4b3e      	ldr	r3, [pc, #248]	; (8008a90 <_ZN13Heattreatment14specialHandlerEv+0x1c4>)
 8008998:	2201      	movs	r2, #1
 800899a:	701a      	strb	r2, [r3, #0]
		}
		if(H_Timer02HrValue!=Sequence2_hour_http)
 800899c:	4b44      	ldr	r3, [pc, #272]	; (8008ab0 <_ZN13Heattreatment14specialHandlerEv+0x1e4>)
 800899e:	781a      	ldrb	r2, [r3, #0]
 80089a0:	4b44      	ldr	r3, [pc, #272]	; (8008ab4 <_ZN13Heattreatment14specialHandlerEv+0x1e8>)
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d015      	beq.n	80089d4 <_ZN13Heattreatment14specialHandlerEv+0x108>
		{
			H_Timer02HrValue= Sequence2_hour_http;
 80089a8:	4b42      	ldr	r3, [pc, #264]	; (8008ab4 <_ZN13Heattreatment14specialHandlerEv+0x1e8>)
 80089aa:	781a      	ldrb	r2, [r3, #0]
 80089ac:	4b40      	ldr	r3, [pc, #256]	; (8008ab0 <_ZN13Heattreatment14specialHandlerEv+0x1e4>)
 80089ae:	701a      	strb	r2, [r3, #0]
			ProcessTotalMin2   =  (H_Timer02HrValue*60)+  H_Timer02MinValue;
 80089b0:	4b3f      	ldr	r3, [pc, #252]	; (8008ab0 <_ZN13Heattreatment14specialHandlerEv+0x1e4>)
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	461a      	mov	r2, r3
 80089b8:	0112      	lsls	r2, r2, #4
 80089ba:	1ad3      	subs	r3, r2, r3
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	b29a      	uxth	r2, r3
 80089c0:	4b3d      	ldr	r3, [pc, #244]	; (8008ab8 <_ZN13Heattreatment14specialHandlerEv+0x1ec>)
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	4413      	add	r3, r2
 80089c8:	b29a      	uxth	r2, r3
 80089ca:	4b3c      	ldr	r3, [pc, #240]	; (8008abc <_ZN13Heattreatment14specialHandlerEv+0x1f0>)
 80089cc:	801a      	strh	r2, [r3, #0]
			updateSetData=1;
 80089ce:	4b30      	ldr	r3, [pc, #192]	; (8008a90 <_ZN13Heattreatment14specialHandlerEv+0x1c4>)
 80089d0:	2201      	movs	r2, #1
 80089d2:	701a      	strb	r2, [r3, #0]
		}
		if(H_Timer02MinValue!=Sequence2_minute_http)
 80089d4:	4b38      	ldr	r3, [pc, #224]	; (8008ab8 <_ZN13Heattreatment14specialHandlerEv+0x1ec>)
 80089d6:	781a      	ldrb	r2, [r3, #0]
 80089d8:	4b39      	ldr	r3, [pc, #228]	; (8008ac0 <_ZN13Heattreatment14specialHandlerEv+0x1f4>)
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d015      	beq.n	8008a0c <_ZN13Heattreatment14specialHandlerEv+0x140>
		{
			H_Timer02MinValue= Sequence2_minute_http;
 80089e0:	4b37      	ldr	r3, [pc, #220]	; (8008ac0 <_ZN13Heattreatment14specialHandlerEv+0x1f4>)
 80089e2:	781a      	ldrb	r2, [r3, #0]
 80089e4:	4b34      	ldr	r3, [pc, #208]	; (8008ab8 <_ZN13Heattreatment14specialHandlerEv+0x1ec>)
 80089e6:	701a      	strb	r2, [r3, #0]
			ProcessTotalMin2   =  (H_Timer02HrValue*60)+  H_Timer02MinValue;
 80089e8:	4b31      	ldr	r3, [pc, #196]	; (8008ab0 <_ZN13Heattreatment14specialHandlerEv+0x1e4>)
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	461a      	mov	r2, r3
 80089f0:	0112      	lsls	r2, r2, #4
 80089f2:	1ad3      	subs	r3, r2, r3
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	b29a      	uxth	r2, r3
 80089f8:	4b2f      	ldr	r3, [pc, #188]	; (8008ab8 <_ZN13Heattreatment14specialHandlerEv+0x1ec>)
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	4413      	add	r3, r2
 8008a00:	b29a      	uxth	r2, r3
 8008a02:	4b2e      	ldr	r3, [pc, #184]	; (8008abc <_ZN13Heattreatment14specialHandlerEv+0x1f0>)
 8008a04:	801a      	strh	r2, [r3, #0]
			updateSetData=1;
 8008a06:	4b22      	ldr	r3, [pc, #136]	; (8008a90 <_ZN13Heattreatment14specialHandlerEv+0x1c4>)
 8008a08:	2201      	movs	r2, #1
 8008a0a:	701a      	strb	r2, [r3, #0]
		}
		if(R_Sequence1_hour_http!=   Rise_Sequence1_Hour)
 8008a0c:	4b2d      	ldr	r3, [pc, #180]	; (8008ac4 <_ZN13Heattreatment14specialHandlerEv+0x1f8>)
 8008a0e:	781a      	ldrb	r2, [r3, #0]
 8008a10:	4b2d      	ldr	r3, [pc, #180]	; (8008ac8 <_ZN13Heattreatment14specialHandlerEv+0x1fc>)
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d006      	beq.n	8008a26 <_ZN13Heattreatment14specialHandlerEv+0x15a>
		{
			Rise_Sequence1_Hour = R_Sequence1_hour_http;
 8008a18:	4b2a      	ldr	r3, [pc, #168]	; (8008ac4 <_ZN13Heattreatment14specialHandlerEv+0x1f8>)
 8008a1a:	781a      	ldrb	r2, [r3, #0]
 8008a1c:	4b2a      	ldr	r3, [pc, #168]	; (8008ac8 <_ZN13Heattreatment14specialHandlerEv+0x1fc>)
 8008a1e:	701a      	strb	r2, [r3, #0]
			updateSetData=1;
 8008a20:	4b1b      	ldr	r3, [pc, #108]	; (8008a90 <_ZN13Heattreatment14specialHandlerEv+0x1c4>)
 8008a22:	2201      	movs	r2, #1
 8008a24:	701a      	strb	r2, [r3, #0]
		}
		if(R_Sequence1_minute_http!=   Rise_Sequence1_Minute)
 8008a26:	4b29      	ldr	r3, [pc, #164]	; (8008acc <_ZN13Heattreatment14specialHandlerEv+0x200>)
 8008a28:	781a      	ldrb	r2, [r3, #0]
 8008a2a:	4b29      	ldr	r3, [pc, #164]	; (8008ad0 <_ZN13Heattreatment14specialHandlerEv+0x204>)
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d006      	beq.n	8008a40 <_ZN13Heattreatment14specialHandlerEv+0x174>
		{
			Rise_Sequence1_Hour = R_Sequence1_minute_http;
 8008a32:	4b26      	ldr	r3, [pc, #152]	; (8008acc <_ZN13Heattreatment14specialHandlerEv+0x200>)
 8008a34:	781a      	ldrb	r2, [r3, #0]
 8008a36:	4b24      	ldr	r3, [pc, #144]	; (8008ac8 <_ZN13Heattreatment14specialHandlerEv+0x1fc>)
 8008a38:	701a      	strb	r2, [r3, #0]
			updateSetData=1;
 8008a3a:	4b15      	ldr	r3, [pc, #84]	; (8008a90 <_ZN13Heattreatment14specialHandlerEv+0x1c4>)
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	701a      	strb	r2, [r3, #0]
		}

		if(R_Sequence2_hour_http!=   Rise_Sequence2_Hour)
 8008a40:	4b24      	ldr	r3, [pc, #144]	; (8008ad4 <_ZN13Heattreatment14specialHandlerEv+0x208>)
 8008a42:	781a      	ldrb	r2, [r3, #0]
 8008a44:	4b24      	ldr	r3, [pc, #144]	; (8008ad8 <_ZN13Heattreatment14specialHandlerEv+0x20c>)
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d006      	beq.n	8008a5a <_ZN13Heattreatment14specialHandlerEv+0x18e>
		{
			Rise_Sequence2_Hour = R_Sequence2_hour_http;
 8008a4c:	4b21      	ldr	r3, [pc, #132]	; (8008ad4 <_ZN13Heattreatment14specialHandlerEv+0x208>)
 8008a4e:	781a      	ldrb	r2, [r3, #0]
 8008a50:	4b21      	ldr	r3, [pc, #132]	; (8008ad8 <_ZN13Heattreatment14specialHandlerEv+0x20c>)
 8008a52:	701a      	strb	r2, [r3, #0]
			updateSetData=1;
 8008a54:	4b0e      	ldr	r3, [pc, #56]	; (8008a90 <_ZN13Heattreatment14specialHandlerEv+0x1c4>)
 8008a56:	2201      	movs	r2, #1
 8008a58:	701a      	strb	r2, [r3, #0]
		}

		if(R_Sequence2_minute_http!=   Rise_Sequence2_Minute)
 8008a5a:	4b20      	ldr	r3, [pc, #128]	; (8008adc <_ZN13Heattreatment14specialHandlerEv+0x210>)
 8008a5c:	781a      	ldrb	r2, [r3, #0]
 8008a5e:	4b20      	ldr	r3, [pc, #128]	; (8008ae0 <_ZN13Heattreatment14specialHandlerEv+0x214>)
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d008      	beq.n	8008a78 <_ZN13Heattreatment14specialHandlerEv+0x1ac>
		{
			Rise_Sequence2_Minute = R_Sequence2_minute_http;
 8008a66:	4b1d      	ldr	r3, [pc, #116]	; (8008adc <_ZN13Heattreatment14specialHandlerEv+0x210>)
 8008a68:	781a      	ldrb	r2, [r3, #0]
 8008a6a:	4b1d      	ldr	r3, [pc, #116]	; (8008ae0 <_ZN13Heattreatment14specialHandlerEv+0x214>)
 8008a6c:	701a      	strb	r2, [r3, #0]
			updateSetData=1;
 8008a6e:	4b08      	ldr	r3, [pc, #32]	; (8008a90 <_ZN13Heattreatment14specialHandlerEv+0x1c4>)
 8008a70:	2201      	movs	r2, #1
 8008a72:	701a      	strb	r2, [r3, #0]
 8008a74:	e000      	b.n	8008a78 <_ZN13Heattreatment14specialHandlerEv+0x1ac>
 if(Status_Http!=11){return;}
 8008a76:	bf00      	nop
		}
	}
}
 8008a78:	370c      	adds	r7, #12
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	200000f2 	.word	0x200000f2
 8008a88:	200000e0 	.word	0x200000e0
 8008a8c:	20000616 	.word	0x20000616
 8008a90:	20000610 	.word	0x20000610
 8008a94:	200000e4 	.word	0x200000e4
 8008a98:	20000618 	.word	0x20000618
 8008a9c:	20000628 	.word	0x20000628
 8008aa0:	200000e6 	.word	0x200000e6
 8008aa4:	20000629 	.word	0x20000629
 8008aa8:	2000062c 	.word	0x2000062c
 8008aac:	200000e7 	.word	0x200000e7
 8008ab0:	2000062a 	.word	0x2000062a
 8008ab4:	200000ec 	.word	0x200000ec
 8008ab8:	2000062b 	.word	0x2000062b
 8008abc:	2000062e 	.word	0x2000062e
 8008ac0:	200000ed 	.word	0x200000ed
 8008ac4:	200000e8 	.word	0x200000e8
 8008ac8:	20000634 	.word	0x20000634
 8008acc:	200000e9 	.word	0x200000e9
 8008ad0:	20000635 	.word	0x20000635
 8008ad4:	200000ea 	.word	0x200000ea
 8008ad8:	20000636 	.word	0x20000636
 8008adc:	200000eb 	.word	0x200000eb
 8008ae0:	20000637 	.word	0x20000637

08008ae4 <_ZN9ModbusrtuC1Ev>:
extern uint16_t Temp_Rising_Reference;
extern uint8_t TimeReference_Hr,TimeReference_Min,Time_Rising_Ref_Hr,Time_Rising_Ref_Min;
extern uint16_t temperature_reference;

uint8_t Rx_Dwin_Point;
Modbusrtu::Modbusrtu() {
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	4a0f      	ldr	r2, [pc, #60]	; (8008b2c <_ZN9ModbusrtuC1Ev+0x48>)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	601a      	str	r2, [r3, #0]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2201      	movs	r2, #1
 8008af6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4a0c      	ldr	r2, [pc, #48]	; (8008b30 <_ZN9ModbusrtuC1Ev+0x4c>)
 8008afe:	332e      	adds	r3, #46	; 0x2e
 8008b00:	4611      	mov	r1, r2
 8008b02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b06:	4618      	mov	r0, r3
 8008b08:	f006 feca 	bl	800f8a0 <memcpy>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	4a09      	ldr	r2, [pc, #36]	; (8008b34 <_ZN9ModbusrtuC1Ev+0x50>)
 8008b10:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 8008b14:	4611      	mov	r1, r2
 8008b16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f006 fec0 	bl	800f8a0 <memcpy>
	// TODO Auto-generated constructor stub

}
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4618      	mov	r0, r3
 8008b24:	3708      	adds	r7, #8
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	0801063c 	.word	0x0801063c
 8008b30:	08010224 	.word	0x08010224
 8008b34:	08010324 	.word	0x08010324

08008b38 <_ZN9ModbusrtuD1Ev>:

Modbusrtu::~Modbusrtu() {
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	4a04      	ldr	r2, [pc, #16]	; (8008b54 <_ZN9ModbusrtuD1Ev+0x1c>)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4618      	mov	r0, r3
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr
 8008b54:	0801063c 	.word	0x0801063c

08008b58 <_ZN9ModbusrtuD0Ev>:
Modbusrtu::~Modbusrtu() {
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
}
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f7ff ffe9 	bl	8008b38 <_ZN9ModbusrtuD1Ev>
 8008b66:	f44f 710c 	mov.w	r1, #560	; 0x230
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f006 fe61 	bl	800f832 <_ZdlPvj>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4618      	mov	r0, r3
 8008b74:	3708      	adds	r7, #8
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
	...

08008b7c <_ZN9Modbusrtu21ModbusReadTransactionEv>:

void Modbusrtu::ModbusReadTransaction(void)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
	m_settemperature = temperature_reference*10;
 8008b84:	4b97      	ldr	r3, [pc, #604]	; (8008de4 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x268>)
 8008b86:	881b      	ldrh	r3, [r3, #0]
 8008b88:	461a      	mov	r2, r3
 8008b8a:	0092      	lsls	r2, r2, #2
 8008b8c:	4413      	add	r3, r2
 8008b8e:	005b      	lsls	r3, r3, #1
 8008b90:	b29a      	uxth	r2, r3
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	821a      	strh	r2, [r3, #16]
	switch(Cntid)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	791b      	ldrb	r3, [r3, #4]
 8008b9a:	2b05      	cmp	r3, #5
 8008b9c:	f200 81dd 	bhi.w	8008f5a <_ZN9Modbusrtu21ModbusReadTransactionEv+0x3de>
 8008ba0:	a201      	add	r2, pc, #4	; (adr r2, 8008ba8 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2c>)
 8008ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba6:	bf00      	nop
 8008ba8:	08008bc1 	.word	0x08008bc1
 8008bac:	08008c49 	.word	0x08008c49
 8008bb0:	08008ccb 	.word	0x08008ccb
 8008bb4:	08008d63 	.word	0x08008d63
 8008bb8:	08008df5 	.word	0x08008df5
 8008bbc:	08008ed5 	.word	0x08008ed5
	{
	case 0:
		_u8MBSlave 			= mTemperatureSensorId;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	719a      	strb	r2, [r3, #6]
		u8MBFunction 		= 0x03;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2203      	movs	r2, #3
 8008bce:	71da      	strb	r2, [r3, #7]
		_u16ReadAddress 	= 0x00;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	811a      	strh	r2, [r3, #8]
		_u16ReadQty     	= 0x01;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	731a      	strb	r2, [r3, #12]
		u8ModbusRegister[0] = _u8MBSlave;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	799a      	ldrb	r2, [r3, #6]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	751a      	strb	r2, [r3, #20]
		u8ModbusRegister[1] =  u8MBFunction;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	79da      	ldrb	r2, [r3, #7]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	755a      	strb	r2, [r3, #21]
		u8ModbusRegister[2] =  0x01;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	759a      	strb	r2, [r3, #22]
		u8ModbusRegister[3] =  static_cast<uint8_t>((_u16ReadAddress & 0xff00)>>8);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	891b      	ldrh	r3, [r3, #8]
 8008bf6:	0a1b      	lsrs	r3, r3, #8
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	b2da      	uxtb	r2, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	75da      	strb	r2, [r3, #23]
		u8ModbusRegister[4] =  static_cast<uint8_t>(_u16ReadAddress & 0x00ff);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	891b      	ldrh	r3, [r3, #8]
 8008c04:	b2da      	uxtb	r2, r3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	761a      	strb	r2, [r3, #24]
		u8ModbusRegister[5] = _u16ReadQty;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	7b1a      	ldrb	r2, [r3, #12]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	765a      	strb	r2, [r3, #25]
		u16CRC 				= ASCChecksum(u8ModbusRegister,6);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	3314      	adds	r3, #20
 8008c16:	2206      	movs	r2, #6
 8008c18:	4619      	mov	r1, r3
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 f9c0 	bl	8008fa0 <_ZN9Modbusrtu11ASCChecksumEPhh>
 8008c20:	4603      	mov	r3, r0
 8008c22:	461a      	mov	r2, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	81da      	strh	r2, [r3, #14]
		u8ModbusRegister[6] = static_cast<uint8_t>(u16CRC & 0x00ff);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	89db      	ldrh	r3, [r3, #14]
 8008c2c:	b2da      	uxtb	r2, r3
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	769a      	strb	r2, [r3, #26]
		u8ModbusRegister[7] = static_cast<uint8_t>((u16CRC & 0xff00)>>8);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	89db      	ldrh	r3, [r3, #14]
 8008c36:	0a1b      	lsrs	r3, r3, #8
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	b2da      	uxtb	r2, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	76da      	strb	r2, [r3, #27]

		Cntid=1;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	711a      	strb	r2, [r3, #4]
	break;
 8008c46:	e190      	b.n	8008f6a <_ZN9Modbusrtu21ModbusReadTransactionEv+0x3ee>
	case 1:/*RISING TEMP SET POINT*/
		_u8MBSlave 			= mTemperatureSensorId;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	719a      	strb	r2, [r3, #6]
		u8MBFunction 		= 0x06;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2206      	movs	r2, #6
 8008c56:	71da      	strb	r2, [r3, #7]
		u8ModbusRegister[0] = _u8MBSlave;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	799a      	ldrb	r2, [r3, #6]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	751a      	strb	r2, [r3, #20]
		u8ModbusRegister[1] =  u8MBFunction;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	79da      	ldrb	r2, [r3, #7]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	755a      	strb	r2, [r3, #21]
		u8ModbusRegister[2] = 0x00;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	759a      	strb	r2, [r3, #22]
		u8ModbusRegister[3] = 0x01;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2201      	movs	r2, #1
 8008c72:	75da      	strb	r2, [r3, #23]
		m_settemperature = Temp_Rising_Reference;
 8008c74:	4b5c      	ldr	r3, [pc, #368]	; (8008de8 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x26c>)
 8008c76:	881a      	ldrh	r2, [r3, #0]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	821a      	strh	r2, [r3, #16]
		u8ModbusRegister[4] = static_cast<uint8_t>((m_settemperature & 0xff00)>>8);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	8a1b      	ldrh	r3, [r3, #16]
 8008c80:	0a1b      	lsrs	r3, r3, #8
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	b2da      	uxtb	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	761a      	strb	r2, [r3, #24]
		u8ModbusRegister[5] = static_cast<uint8_t>(m_settemperature & 0x00ff);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	8a1b      	ldrh	r3, [r3, #16]
 8008c8e:	b2da      	uxtb	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	765a      	strb	r2, [r3, #25]
		u16CRC 				= ASCChecksum(u8ModbusRegister,6);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	3314      	adds	r3, #20
 8008c98:	2206      	movs	r2, #6
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 f97f 	bl	8008fa0 <_ZN9Modbusrtu11ASCChecksumEPhh>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	81da      	strh	r2, [r3, #14]
		u8ModbusRegister[6] = static_cast<uint8_t>(u16CRC & 0x00ff);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	89db      	ldrh	r3, [r3, #14]
 8008cae:	b2da      	uxtb	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	769a      	strb	r2, [r3, #26]
		u8ModbusRegister[7] = static_cast<uint8_t>((u16CRC & 0xff00)>>8);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	89db      	ldrh	r3, [r3, #14]
 8008cb8:	0a1b      	lsrs	r3, r3, #8
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	b2da      	uxtb	r2, r3
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	76da      	strb	r2, [r3, #27]
		Cntid=2;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2202      	movs	r2, #2
 8008cc6:	711a      	strb	r2, [r3, #4]
	break;
 8008cc8:	e14f      	b.n	8008f6a <_ZN9Modbusrtu21ModbusReadTransactionEv+0x3ee>
	case 2:/*RISING TIME SET*/
			_u8MBSlave 			= mTemperatureSensorId;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	719a      	strb	r2, [r3, #6]
			u8MBFunction 		= 0x06;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2206      	movs	r2, #6
 8008cd8:	71da      	strb	r2, [r3, #7]
			u8ModbusRegister[0] = _u8MBSlave;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	799a      	ldrb	r2, [r3, #6]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	751a      	strb	r2, [r3, #20]
			u8ModbusRegister[1] =  u8MBFunction;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	79da      	ldrb	r2, [r3, #7]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	755a      	strb	r2, [r3, #21]
			u8ModbusRegister[2] = 0x10;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2210      	movs	r2, #16
 8008cee:	759a      	strb	r2, [r3, #22]
			u8ModbusRegister[3] = 0x01;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	75da      	strb	r2, [r3, #23]
			m_setTime = ((Time_Rising_Ref_Hr*60)+ Time_Rising_Ref_Min)+0;
 8008cf6:	4b3d      	ldr	r3, [pc, #244]	; (8008dec <_ZN9Modbusrtu21ModbusReadTransactionEv+0x270>)
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	0112      	lsls	r2, r2, #4
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	b29a      	uxth	r2, r3
 8008d06:	4b3a      	ldr	r3, [pc, #232]	; (8008df0 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x274>)
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	4413      	add	r3, r2
 8008d0e:	b29a      	uxth	r2, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	825a      	strh	r2, [r3, #18]
			u8ModbusRegister[4] = static_cast<uint8_t>((m_setTime & 0xff00)>>8);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	8a5b      	ldrh	r3, [r3, #18]
 8008d18:	0a1b      	lsrs	r3, r3, #8
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	b2da      	uxtb	r2, r3
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	761a      	strb	r2, [r3, #24]
			u8ModbusRegister[5] = static_cast<uint8_t>(m_setTime & 0x00ff);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	8a5b      	ldrh	r3, [r3, #18]
 8008d26:	b2da      	uxtb	r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	765a      	strb	r2, [r3, #25]
			u16CRC 				= ASCChecksum(u8ModbusRegister,6);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	3314      	adds	r3, #20
 8008d30:	2206      	movs	r2, #6
 8008d32:	4619      	mov	r1, r3
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 f933 	bl	8008fa0 <_ZN9Modbusrtu11ASCChecksumEPhh>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	81da      	strh	r2, [r3, #14]
			u8ModbusRegister[6] = static_cast<uint8_t>(u16CRC & 0x00ff);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	89db      	ldrh	r3, [r3, #14]
 8008d46:	b2da      	uxtb	r2, r3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	769a      	strb	r2, [r3, #26]
			u8ModbusRegister[7] = static_cast<uint8_t>((u16CRC & 0xff00)>>8);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	89db      	ldrh	r3, [r3, #14]
 8008d50:	0a1b      	lsrs	r3, r3, #8
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	b2da      	uxtb	r2, r3
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	76da      	strb	r2, [r3, #27]
			Cntid=3;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2203      	movs	r2, #3
 8008d5e:	711a      	strb	r2, [r3, #4]
		break;
 8008d60:	e103      	b.n	8008f6a <_ZN9Modbusrtu21ModbusReadTransactionEv+0x3ee>
	case 3: /*HOLDING TEMP SET POINT 2*/
			_u8MBSlave 			= mTemperatureSensorId;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	719a      	strb	r2, [r3, #6]
			u8MBFunction 		= 0x06;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2206      	movs	r2, #6
 8008d70:	71da      	strb	r2, [r3, #7]
			u8ModbusRegister[0] = _u8MBSlave;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	799a      	ldrb	r2, [r3, #6]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	751a      	strb	r2, [r3, #20]
			u8ModbusRegister[1] =  u8MBFunction;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	79da      	ldrb	r2, [r3, #7]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	755a      	strb	r2, [r3, #21]
			u8ModbusRegister[2] = 0x10;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2210      	movs	r2, #16
 8008d86:	759a      	strb	r2, [r3, #22]
			u8ModbusRegister[3] = 0x03;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2203      	movs	r2, #3
 8008d8c:	75da      	strb	r2, [r3, #23]
			m_settemperature = temperature_reference;
 8008d8e:	4b15      	ldr	r3, [pc, #84]	; (8008de4 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x268>)
 8008d90:	881a      	ldrh	r2, [r3, #0]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	821a      	strh	r2, [r3, #16]
			u8ModbusRegister[4] = static_cast<uint8_t>((m_settemperature & 0xff00)>>8);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	8a1b      	ldrh	r3, [r3, #16]
 8008d9a:	0a1b      	lsrs	r3, r3, #8
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	b2da      	uxtb	r2, r3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	761a      	strb	r2, [r3, #24]
			u8ModbusRegister[5] = static_cast<uint8_t>(m_settemperature & 0x00ff);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	8a1b      	ldrh	r3, [r3, #16]
 8008da8:	b2da      	uxtb	r2, r3
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	765a      	strb	r2, [r3, #25]
			u16CRC 				= ASCChecksum(u8ModbusRegister,6);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	3314      	adds	r3, #20
 8008db2:	2206      	movs	r2, #6
 8008db4:	4619      	mov	r1, r3
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 f8f2 	bl	8008fa0 <_ZN9Modbusrtu11ASCChecksumEPhh>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	81da      	strh	r2, [r3, #14]
			u8ModbusRegister[6] = static_cast<uint8_t>(u16CRC & 0x00ff);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	89db      	ldrh	r3, [r3, #14]
 8008dc8:	b2da      	uxtb	r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	769a      	strb	r2, [r3, #26]
			u8ModbusRegister[7] = static_cast<uint8_t>((u16CRC & 0xff00)>>8);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	89db      	ldrh	r3, [r3, #14]
 8008dd2:	0a1b      	lsrs	r3, r3, #8
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	b2da      	uxtb	r2, r3
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	76da      	strb	r2, [r3, #27]
			Cntid=4;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2204      	movs	r2, #4
 8008de0:	711a      	strb	r2, [r3, #4]

		break;
 8008de2:	e0c2      	b.n	8008f6a <_ZN9Modbusrtu21ModbusReadTransactionEv+0x3ee>
 8008de4:	2000061a 	.word	0x2000061a
 8008de8:	20000638 	.word	0x20000638
 8008dec:	2000063c 	.word	0x2000063c
 8008df0:	2000063d 	.word	0x2000063d
	case 4: /*HOLDING time SET 2*/
			_u8MBSlave 			= mTemperatureSensorId;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	719a      	strb	r2, [r3, #6]
			u8MBFunction 		= 0x06;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2206      	movs	r2, #6
 8008e02:	71da      	strb	r2, [r3, #7]
			u8ModbusRegister[0] = _u8MBSlave;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	799a      	ldrb	r2, [r3, #6]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	751a      	strb	r2, [r3, #20]
			u8ModbusRegister[1] =  u8MBFunction;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	79da      	ldrb	r2, [r3, #7]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	755a      	strb	r2, [r3, #21]
			u8ModbusRegister[2] = 0x10;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2210      	movs	r2, #16
 8008e18:	759a      	strb	r2, [r3, #22]
			u8ModbusRegister[3] = 0x04;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2204      	movs	r2, #4
 8008e1e:	75da      	strb	r2, [r3, #23]
			m_setTime = ((TimeReference_Hr*60)+ TimeReference_Min)+60;
 8008e20:	4b57      	ldr	r3, [pc, #348]	; (8008f80 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x404>)
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	461a      	mov	r2, r3
 8008e28:	0112      	lsls	r2, r2, #4
 8008e2a:	1ad3      	subs	r3, r2, r3
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	b29a      	uxth	r2, r3
 8008e30:	4b54      	ldr	r3, [pc, #336]	; (8008f84 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x408>)
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	4413      	add	r3, r2
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	333c      	adds	r3, #60	; 0x3c
 8008e3c:	b29a      	uxth	r2, r3
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	825a      	strh	r2, [r3, #18]
			u8ModbusRegister[4] = static_cast<uint8_t>((m_setTime & 0xff00)>>8);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	8a5b      	ldrh	r3, [r3, #18]
 8008e46:	0a1b      	lsrs	r3, r3, #8
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	b2da      	uxtb	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	761a      	strb	r2, [r3, #24]
			u8ModbusRegister[5] = static_cast<uint8_t>(m_setTime & 0x00ff);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	8a5b      	ldrh	r3, [r3, #18]
 8008e54:	b2da      	uxtb	r2, r3
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	765a      	strb	r2, [r3, #25]
			u16CRC 				= ASCChecksum(u8ModbusRegister,6);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	3314      	adds	r3, #20
 8008e5e:	2206      	movs	r2, #6
 8008e60:	4619      	mov	r1, r3
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 f89c 	bl	8008fa0 <_ZN9Modbusrtu11ASCChecksumEPhh>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	81da      	strh	r2, [r3, #14]
			u8ModbusRegister[6] = static_cast<uint8_t>(u16CRC & 0x00ff);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	89db      	ldrh	r3, [r3, #14]
 8008e74:	b2da      	uxtb	r2, r3
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	769a      	strb	r2, [r3, #26]
			u8ModbusRegister[7] = static_cast<uint8_t>((u16CRC & 0xff00)>>8);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	89db      	ldrh	r3, [r3, #14]
 8008e7e:	0a1b      	lsrs	r3, r3, #8
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	b2da      	uxtb	r2, r3
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	76da      	strb	r2, [r3, #27]
			Cntid=5;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2205      	movs	r2, #5
 8008e8c:	711a      	strb	r2, [r3, #4]
			if(mTemperatureSensorId ==1){mTemperatureSensorId=2;}
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d104      	bne.n	8008ea2 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x326>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2202      	movs	r2, #2
 8008e9c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			else if(mTemperatureSensorId ==2){mTemperatureSensorId=3;}
			else if(mTemperatureSensorId ==3){mTemperatureSensorId=4;}
			else{mTemperatureSensorId=1;}
	break;
 8008ea0:	e063      	b.n	8008f6a <_ZN9Modbusrtu21ModbusReadTransactionEv+0x3ee>
			else if(mTemperatureSensorId ==2){mTemperatureSensorId=3;}
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	d104      	bne.n	8008eb6 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x33a>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2203      	movs	r2, #3
 8008eb0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	break;
 8008eb4:	e059      	b.n	8008f6a <_ZN9Modbusrtu21ModbusReadTransactionEv+0x3ee>
			else if(mTemperatureSensorId ==3){mTemperatureSensorId=4;}
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008ebc:	2b03      	cmp	r3, #3
 8008ebe:	d104      	bne.n	8008eca <_ZN9Modbusrtu21ModbusReadTransactionEv+0x34e>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2204      	movs	r2, #4
 8008ec4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	break;
 8008ec8:	e04f      	b.n	8008f6a <_ZN9Modbusrtu21ModbusReadTransactionEv+0x3ee>
			else{mTemperatureSensorId=1;}
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	break;
 8008ed2:	e04a      	b.n	8008f6a <_ZN9Modbusrtu21ModbusReadTransactionEv+0x3ee>
	case 5:
			u8MBFunction		= 0x03;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2203      	movs	r2, #3
 8008ed8:	71da      	strb	r2, [r3, #7]
			_u16WriteAddress 	= 0x00;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	815a      	strh	r2, [r3, #10]
			_u16ReadAddress  	= 0x04;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2204      	movs	r2, #4
 8008ee4:	811a      	strh	r2, [r3, #8]
			u8ModbusRegister[0] = WaterTemperatureId;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2205      	movs	r2, #5
 8008eea:	751a      	strb	r2, [r3, #20]
			u8ModbusRegister[1] =  u8MBFunction;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	79da      	ldrb	r2, [r3, #7]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	755a      	strb	r2, [r3, #21]
			u8ModbusRegister[2] = static_cast<uint8_t>((_u16WriteAddress & 0xff00)>>8);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	895b      	ldrh	r3, [r3, #10]
 8008ef8:	0a1b      	lsrs	r3, r3, #8
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	b2da      	uxtb	r2, r3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	759a      	strb	r2, [r3, #22]
			u8ModbusRegister[3] = static_cast<uint8_t>(_u16WriteAddress & 0x00ff);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	895b      	ldrh	r3, [r3, #10]
 8008f06:	b2da      	uxtb	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	75da      	strb	r2, [r3, #23]
			u8ModbusRegister[4] = static_cast<uint8_t>((_u16ReadAddress & 0xff00)>>8);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	891b      	ldrh	r3, [r3, #8]
 8008f10:	0a1b      	lsrs	r3, r3, #8
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	b2da      	uxtb	r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	761a      	strb	r2, [r3, #24]
			u8ModbusRegister[5] = static_cast<uint8_t>(_u16ReadAddress & 0x00ff);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	891b      	ldrh	r3, [r3, #8]
 8008f1e:	b2da      	uxtb	r2, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	765a      	strb	r2, [r3, #25]
			u16CRC 				= ASCChecksum(u8ModbusRegister,6);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	3314      	adds	r3, #20
 8008f28:	2206      	movs	r2, #6
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 f837 	bl	8008fa0 <_ZN9Modbusrtu11ASCChecksumEPhh>
 8008f32:	4603      	mov	r3, r0
 8008f34:	461a      	mov	r2, r3
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	81da      	strh	r2, [r3, #14]
			u8ModbusRegister[6] = static_cast<uint8_t>(u16CRC & 0x00ff);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	89db      	ldrh	r3, [r3, #14]
 8008f3e:	b2da      	uxtb	r2, r3
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	769a      	strb	r2, [r3, #26]
			u8ModbusRegister[7] = static_cast<uint8_t>((u16CRC & 0xff00)>>8);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	89db      	ldrh	r3, [r3, #14]
 8008f48:	0a1b      	lsrs	r3, r3, #8
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	b2da      	uxtb	r2, r3
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	76da      	strb	r2, [r3, #27]
			Cntid=0;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	711a      	strb	r2, [r3, #4]
	break;
 8008f58:	e007      	b.n	8008f6a <_ZN9Modbusrtu21ModbusReadTransactionEv+0x3ee>
	default:
		Cntid=0;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	711a      	strb	r2, [r3, #4]
		mTemperatureSensorId=1;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2201      	movs	r2, #1
 8008f64:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	break;
 8008f68:	bf00      	nop
	}


	//out_read_rxint_set.Noofbytesrx = (_u16ReadQty*2)+5;
	HAL_UART_Transmit_IT(&huart1,u8ModbusRegister,8);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	3314      	adds	r3, #20
 8008f6e:	2208      	movs	r2, #8
 8008f70:	4619      	mov	r1, r3
 8008f72:	4805      	ldr	r0, [pc, #20]	; (8008f88 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x40c>)
 8008f74:	f005 f904 	bl	800e180 <HAL_UART_Transmit_IT>

}
 8008f78:	bf00      	nop
 8008f7a:	3708      	adds	r7, #8
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	2000063a 	.word	0x2000063a
 8008f84:	2000063b 	.word	0x2000063b
 8008f88:	20000324 	.word	0x20000324

08008f8c <HAL_UART_TxCpltCallback>:
//Hardware callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_IT(&huart1,u8rxbuf,13);
}
 8008f94:	bf00      	nop
 8008f96:	370c      	adds	r7, #12
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <_ZN9Modbusrtu11ASCChecksumEPhh>:

uint16_t Modbusrtu::ASCChecksum(uint8_t *ASCSrc, uint8_t NoOfBytes)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b087      	sub	sp, #28
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	4613      	mov	r3, r2
 8008fac:	71fb      	strb	r3, [r7, #7]
	uint8_t i, CheckSumBytes;
	uint8_t CRCRegLow = 0xff;
 8008fae:	23ff      	movs	r3, #255	; 0xff
 8008fb0:	75bb      	strb	r3, [r7, #22]
	uint8_t CRCRegHigh = 0xff;
 8008fb2:	23ff      	movs	r3, #255	; 0xff
 8008fb4:	757b      	strb	r3, [r7, #21]
	uint8_t CRCIndex;

	CheckSumBytes = NoOfBytes;
 8008fb6:	79fb      	ldrb	r3, [r7, #7]
 8008fb8:	753b      	strb	r3, [r7, #20]
   	for(i=0;i < CheckSumBytes;i++)
 8008fba:	2300      	movs	r3, #0
 8008fbc:	75fb      	strb	r3, [r7, #23]
 8008fbe:	7dfa      	ldrb	r2, [r7, #23]
 8008fc0:	7d3b      	ldrb	r3, [r7, #20]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d218      	bcs.n	8008ff8 <_ZN9Modbusrtu11ASCChecksumEPhh+0x58>
   	{
	    CRCIndex = CRCRegLow ^ *ASCSrc++; 				//TransmittingData[i];
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	1c5a      	adds	r2, r3, #1
 8008fca:	60ba      	str	r2, [r7, #8]
 8008fcc:	781a      	ldrb	r2, [r3, #0]
 8008fce:	7dbb      	ldrb	r3, [r7, #22]
 8008fd0:	4053      	eors	r3, r2
 8008fd2:	74fb      	strb	r3, [r7, #19]
		CRCRegLow = CRCRegHigh ^ CRCArrayHigh[CRCIndex];
 8008fd4:	7cfb      	ldrb	r3, [r7, #19]
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	4413      	add	r3, r2
 8008fda:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8008fde:	7d7b      	ldrb	r3, [r7, #21]
 8008fe0:	4053      	eors	r3, r2
 8008fe2:	75bb      	strb	r3, [r7, #22]
		CRCRegHigh = CRCArrayLow[CRCIndex];
 8008fe4:	7cfb      	ldrb	r3, [r7, #19]
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	4413      	add	r3, r2
 8008fea:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 8008fee:	757b      	strb	r3, [r7, #21]
   	for(i=0;i < CheckSumBytes;i++)
 8008ff0:	7dfb      	ldrb	r3, [r7, #23]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	75fb      	strb	r3, [r7, #23]
 8008ff6:	e7e2      	b.n	8008fbe <_ZN9Modbusrtu11ASCChecksumEPhh+0x1e>

	}
	return (CRCRegHigh << 8 | CRCRegLow );
 8008ff8:	7d7b      	ldrb	r3, [r7, #21]
 8008ffa:	021b      	lsls	r3, r3, #8
 8008ffc:	b21a      	sxth	r2, r3
 8008ffe:	7dbb      	ldrb	r3, [r7, #22]
 8009000:	b21b      	sxth	r3, r3
 8009002:	4313      	orrs	r3, r2
 8009004:	b21b      	sxth	r3, r3
 8009006:	b29b      	uxth	r3, r3
}
 8009008:	4618      	mov	r0, r3
 800900a:	371c      	adds	r7, #28
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <_ZN9Modbusrtu9dwinFrameEv>:

/*Dwin frame*/
void Modbusrtu::dwinFrame(void)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
	switch(Cntid_dwin)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	795b      	ldrb	r3, [r3, #5]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d002      	beq.n	800902a <_ZN9Modbusrtu9dwinFrameEv+0x16>
 8009024:	2b01      	cmp	r3, #1
 8009026:	d044      	beq.n	80090b2 <_ZN9Modbusrtu9dwinFrameEv+0x9e>
 8009028:	e066      	b.n	80090f8 <_ZN9Modbusrtu9dwinFrameEv+0xe4>
	{
	case 0:
		u8ModbusRegisterdwin[0] = START_BYTE_1;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	225a      	movs	r2, #90	; 0x5a
 800902e:	771a      	strb	r2, [r3, #28]
		u8ModbusRegisterdwin[1] = START_BYTE_2;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	22a5      	movs	r2, #165	; 0xa5
 8009034:	775a      	strb	r2, [r3, #29]
		u8ModbusRegisterdwin[2] = multipleWriteRequestH;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	220b      	movs	r2, #11
 800903a:	779a      	strb	r2, [r3, #30]
		u8ModbusRegisterdwin[3] = multipleWriteRequestL;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2282      	movs	r2, #130	; 0x82
 8009040:	77da      	strb	r2, [r3, #31]
		u8ModbusRegisterdwin[4] = 0x20;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2220      	movs	r2, #32
 8009046:	f883 2020 	strb.w	r2, [r3, #32]
		u8ModbusRegisterdwin[5] = 0x00;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		u8ModbusRegisterdwin[6] = highByte(100);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		u8ModbusRegisterdwin[7] = lowByte(100);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2264      	movs	r2, #100	; 0x64
 800905e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		u8ModbusRegisterdwin[8] = highByte(200);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		u8ModbusRegisterdwin[9] = lowByte(200);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	22c8      	movs	r2, #200	; 0xc8
 800906e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		u8ModbusRegisterdwin[10] = 0;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		u8ModbusRegisterdwin[11] = 0;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		u8ModbusRegisterdwin[12] = 0;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		u8ModbusRegisterdwin[13] = 0;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		u8ModbusRegisterdwin[14] = 0;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		u8ModbusRegisterdwin[15] = 0;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

		noOfDataDwin=16;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2210      	movs	r2, #16
 80090a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		Cntid_dwin=1;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2201      	movs	r2, #1
 80090ae:	715a      	strb	r2, [r3, #5]
	break;
 80090b0:	e026      	b.n	8009100 <_ZN9Modbusrtu9dwinFrameEv+0xec>
	case 1:
			u8ModbusRegisterdwin[0] = START_BYTE_1;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	225a      	movs	r2, #90	; 0x5a
 80090b6:	771a      	strb	r2, [r3, #28]
			u8ModbusRegisterdwin[1] = START_BYTE_2;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	22a5      	movs	r2, #165	; 0xa5
 80090bc:	775a      	strb	r2, [r3, #29]
			u8ModbusRegisterdwin[2] = multipleReadRequestH;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2204      	movs	r2, #4
 80090c2:	779a      	strb	r2, [r3, #30]
			u8ModbusRegisterdwin[3] = multipleReadRequestL;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2283      	movs	r2, #131	; 0x83
 80090c8:	77da      	strb	r2, [r3, #31]
			u8ModbusRegisterdwin[4] = 0x30;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2230      	movs	r2, #48	; 0x30
 80090ce:	f883 2020 	strb.w	r2, [r3, #32]
			u8ModbusRegisterdwin[5] = 0x00;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			u8ModbusRegisterdwin[6] = 0x16;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2216      	movs	r2, #22
 80090de:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			Rx_Dwin_Point=0;
 80090e2:	4b0f      	ldr	r3, [pc, #60]	; (8009120 <_ZN9Modbusrtu9dwinFrameEv+0x10c>)
 80090e4:	2200      	movs	r2, #0
 80090e6:	701a      	strb	r2, [r3, #0]
			noOfDataDwin=7;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2207      	movs	r2, #7
 80090ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			Cntid_dwin=0;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	715a      	strb	r2, [r3, #5]
		break;
 80090f6:	e003      	b.n	8009100 <_ZN9Modbusrtu9dwinFrameEv+0xec>
		default:
			Cntid_dwin=0;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	715a      	strb	r2, [r3, #5]
		break;
 80090fe:	bf00      	nop
		}
		//out_read_rxint_set.Noofbytesrx = (_u16ReadQty*2)+5;
		HAL_UART_Transmit_IT(&huart2,u8ModbusRegisterdwin,noOfDataDwin);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f103 011c 	add.w	r1, r3, #28
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800910c:	b29b      	uxth	r3, r3
 800910e:	461a      	mov	r2, r3
 8009110:	4804      	ldr	r0, [pc, #16]	; (8009124 <_ZN9Modbusrtu9dwinFrameEv+0x110>)
 8009112:	f005 f835 	bl	800e180 <HAL_UART_Transmit_IT>
}
 8009116:	bf00      	nop
 8009118:	3708      	adds	r7, #8
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	20000651 	.word	0x20000651
 8009124:	200003a8 	.word	0x200003a8

08009128 <_ZN14OfflineStorageC1Ev>:
uint8_t m_readFlashBuf[20];
uint8_t m_readFlashheatBuf[20];



OfflineStorage::OfflineStorage() {
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	4a04      	ldr	r2, [pc, #16]	; (8009144 <_ZN14OfflineStorageC1Ev+0x1c>)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4618      	mov	r0, r3
 800913a:	370c      	adds	r7, #12
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr
 8009144:	0801064c 	.word	0x0801064c

08009148 <_ZN14OfflineStorageD1Ev>:

OfflineStorage::~OfflineStorage() {
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	4a04      	ldr	r2, [pc, #16]	; (8009164 <_ZN14OfflineStorageD1Ev+0x1c>)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4618      	mov	r0, r3
 800915a:	370c      	adds	r7, #12
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr
 8009164:	0801064c 	.word	0x0801064c

08009168 <_ZN14OfflineStorageD0Ev>:
OfflineStorage::~OfflineStorage() {
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
}
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f7ff ffe9 	bl	8009148 <_ZN14OfflineStorageD1Ev>
 8009176:	2104      	movs	r1, #4
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f006 fb5a 	bl	800f832 <_ZdlPvj>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4618      	mov	r0, r3
 8009182:	3708      	adds	r7, #8
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <_ZN14OfflineStorage3runEv>:

void OfflineStorage::run()
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
	m_writeHeattreatmentData();
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 f807 	bl	80091a4 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv>
	m_writeCountinc();
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 f8b4 	bl	8009304 <_ZN14OfflineStorage15m_writeCountincEv>

}
 800919c:	bf00      	nop
 800919e:	3708      	adds	r7, #8
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv>:

	W25qxx_EraseSector(0);
	W25qxx_WriteSector(m_writeFlashBuf,0,0,1);
}

void OfflineStorage::m_writeHeattreatmentData(){
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
	if((ProcessId_Value != ProcessId_Value_K1)||(updateSetData==1)||
 80091ac:	4b43      	ldr	r3, [pc, #268]	; (80092bc <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x118>)
 80091ae:	881a      	ldrh	r2, [r3, #0]
 80091b0:	4b43      	ldr	r3, [pc, #268]	; (80092c0 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x11c>)
 80091b2:	881b      	ldrh	r3, [r3, #0]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d109      	bne.n	80091cc <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x28>
 80091b8:	4b42      	ldr	r3, [pc, #264]	; (80092c4 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x120>)
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d005      	beq.n	80091cc <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x28>
			(SEQMONITOR != SEQMONITOR_K1))
 80091c0:	4b41      	ldr	r3, [pc, #260]	; (80092c8 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x124>)
 80091c2:	781a      	ldrb	r2, [r3, #0]
 80091c4:	4b41      	ldr	r3, [pc, #260]	; (80092cc <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x128>)
 80091c6:	781b      	ldrb	r3, [r3, #0]
	if((ProcessId_Value != ProcessId_Value_K1)||(updateSetData==1)||
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d073      	beq.n	80092b4 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x110>
	{
		m_writeFlashBuf[0] = (uint8_t)(ProcessId_Value & 0xff);
 80091cc:	4b3b      	ldr	r3, [pc, #236]	; (80092bc <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x118>)
 80091ce:	881b      	ldrh	r3, [r3, #0]
 80091d0:	b2da      	uxtb	r2, r3
 80091d2:	4b3f      	ldr	r3, [pc, #252]	; (80092d0 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x12c>)
 80091d4:	701a      	strb	r2, [r3, #0]
		m_writeFlashBuf[1] = (uint8_t)(ProcessId_Value>>8) & 0xff;
 80091d6:	4b39      	ldr	r3, [pc, #228]	; (80092bc <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x118>)
 80091d8:	881b      	ldrh	r3, [r3, #0]
 80091da:	0a1b      	lsrs	r3, r3, #8
 80091dc:	b29b      	uxth	r3, r3
 80091de:	b2da      	uxtb	r2, r3
 80091e0:	4b3b      	ldr	r3, [pc, #236]	; (80092d0 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x12c>)
 80091e2:	705a      	strb	r2, [r3, #1]
		ProcessId_Value_K1 = ProcessId_Value;
 80091e4:	4b35      	ldr	r3, [pc, #212]	; (80092bc <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x118>)
 80091e6:	881a      	ldrh	r2, [r3, #0]
 80091e8:	4b35      	ldr	r3, [pc, #212]	; (80092c0 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x11c>)
 80091ea:	801a      	strh	r2, [r3, #0]

		m_writeFlashBuf[2] = (uint8_t)(Seq1temperature & 0xff);
 80091ec:	4b39      	ldr	r3, [pc, #228]	; (80092d4 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x130>)
 80091ee:	881b      	ldrh	r3, [r3, #0]
 80091f0:	b2da      	uxtb	r2, r3
 80091f2:	4b37      	ldr	r3, [pc, #220]	; (80092d0 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x12c>)
 80091f4:	709a      	strb	r2, [r3, #2]
		m_writeFlashBuf[3] = (uint8_t)(Seq1temperature>>8) & 0xff;
 80091f6:	4b37      	ldr	r3, [pc, #220]	; (80092d4 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x130>)
 80091f8:	881b      	ldrh	r3, [r3, #0]
 80091fa:	0a1b      	lsrs	r3, r3, #8
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	b2da      	uxtb	r2, r3
 8009200:	4b33      	ldr	r3, [pc, #204]	; (80092d0 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x12c>)
 8009202:	70da      	strb	r2, [r3, #3]
		m_writeFlashBuf[4] = (uint8_t)(Seq2temperature & 0xff);
 8009204:	4b34      	ldr	r3, [pc, #208]	; (80092d8 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x134>)
 8009206:	881b      	ldrh	r3, [r3, #0]
 8009208:	b2da      	uxtb	r2, r3
 800920a:	4b31      	ldr	r3, [pc, #196]	; (80092d0 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x12c>)
 800920c:	711a      	strb	r2, [r3, #4]
		m_writeFlashBuf[5] = (uint8_t)(Seq2temperature>>8) & 0xff;
 800920e:	4b32      	ldr	r3, [pc, #200]	; (80092d8 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x134>)
 8009210:	881b      	ldrh	r3, [r3, #0]
 8009212:	0a1b      	lsrs	r3, r3, #8
 8009214:	b29b      	uxth	r3, r3
 8009216:	b2da      	uxtb	r2, r3
 8009218:	4b2d      	ldr	r3, [pc, #180]	; (80092d0 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x12c>)
 800921a:	715a      	strb	r2, [r3, #5]
		m_writeFlashBuf[6] = (uint8_t)(H_Timer01HrValue);
 800921c:	4b2f      	ldr	r3, [pc, #188]	; (80092dc <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x138>)
 800921e:	781a      	ldrb	r2, [r3, #0]
 8009220:	4b2b      	ldr	r3, [pc, #172]	; (80092d0 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x12c>)
 8009222:	719a      	strb	r2, [r3, #6]
		m_writeFlashBuf[7] = (uint8_t)(H_Timer01MinValue);
 8009224:	4b2e      	ldr	r3, [pc, #184]	; (80092e0 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x13c>)
 8009226:	781a      	ldrb	r2, [r3, #0]
 8009228:	4b29      	ldr	r3, [pc, #164]	; (80092d0 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x12c>)
 800922a:	71da      	strb	r2, [r3, #7]
		m_writeFlashBuf[8] = (uint8_t)(H_Timer02HrValue);
 800922c:	4b2d      	ldr	r3, [pc, #180]	; (80092e4 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x140>)
 800922e:	781a      	ldrb	r2, [r3, #0]
 8009230:	4b27      	ldr	r3, [pc, #156]	; (80092d0 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x12c>)
 8009232:	721a      	strb	r2, [r3, #8]
		m_writeFlashBuf[9] = (uint8_t)(H_Timer02MinValue);
 8009234:	4b2c      	ldr	r3, [pc, #176]	; (80092e8 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x144>)
 8009236:	781a      	ldrb	r2, [r3, #0]
 8009238:	4b25      	ldr	r3, [pc, #148]	; (80092d0 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x12c>)
 800923a:	725a      	strb	r2, [r3, #9]
		m_writeFlashBuf[10] = (uint8_t)(Rise_Sequence1_temp & 0xff);
 800923c:	4b2b      	ldr	r3, [pc, #172]	; (80092ec <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x148>)
 800923e:	881b      	ldrh	r3, [r3, #0]
 8009240:	b2da      	uxtb	r2, r3
 8009242:	4b23      	ldr	r3, [pc, #140]	; (80092d0 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x12c>)
 8009244:	729a      	strb	r2, [r3, #10]
		m_writeFlashBuf[11] = (uint8_t)(Rise_Sequence1_temp>>8) & 0xff;
 8009246:	4b29      	ldr	r3, [pc, #164]	; (80092ec <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x148>)
 8009248:	881b      	ldrh	r3, [r3, #0]
 800924a:	0a1b      	lsrs	r3, r3, #8
 800924c:	b29b      	uxth	r3, r3
 800924e:	b2da      	uxtb	r2, r3
 8009250:	4b1f      	ldr	r3, [pc, #124]	; (80092d0 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x12c>)
 8009252:	72da      	strb	r2, [r3, #11]
		m_writeFlashBuf[12] = (uint8_t)(Rise_Sequence2_temp & 0xff);
 8009254:	4b26      	ldr	r3, [pc, #152]	; (80092f0 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x14c>)
 8009256:	881b      	ldrh	r3, [r3, #0]
 8009258:	b2da      	uxtb	r2, r3
 800925a:	4b1d      	ldr	r3, [pc, #116]	; (80092d0 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x12c>)
 800925c:	731a      	strb	r2, [r3, #12]
		m_writeFlashBuf[13] = (uint8_t)(Rise_Sequence2_temp>>8) & 0xff;
 800925e:	4b24      	ldr	r3, [pc, #144]	; (80092f0 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x14c>)
 8009260:	881b      	ldrh	r3, [r3, #0]
 8009262:	0a1b      	lsrs	r3, r3, #8
 8009264:	b29b      	uxth	r3, r3
 8009266:	b2da      	uxtb	r2, r3
 8009268:	4b19      	ldr	r3, [pc, #100]	; (80092d0 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x12c>)
 800926a:	735a      	strb	r2, [r3, #13]
		m_writeFlashBuf[14] = (uint8_t)(Rise_Sequence1_Hour);
 800926c:	4b21      	ldr	r3, [pc, #132]	; (80092f4 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x150>)
 800926e:	781a      	ldrb	r2, [r3, #0]
 8009270:	4b17      	ldr	r3, [pc, #92]	; (80092d0 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x12c>)
 8009272:	739a      	strb	r2, [r3, #14]
		m_writeFlashBuf[15] = (uint8_t)(Rise_Sequence1_Minute);
 8009274:	4b20      	ldr	r3, [pc, #128]	; (80092f8 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x154>)
 8009276:	781a      	ldrb	r2, [r3, #0]
 8009278:	4b15      	ldr	r3, [pc, #84]	; (80092d0 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x12c>)
 800927a:	73da      	strb	r2, [r3, #15]
		m_writeFlashBuf[16] = (uint8_t)(Rise_Sequence2_Hour);
 800927c:	4b1f      	ldr	r3, [pc, #124]	; (80092fc <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x158>)
 800927e:	781a      	ldrb	r2, [r3, #0]
 8009280:	4b13      	ldr	r3, [pc, #76]	; (80092d0 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x12c>)
 8009282:	741a      	strb	r2, [r3, #16]
		m_writeFlashBuf[17] = (uint8_t)(Rise_Sequence2_Minute);
 8009284:	4b1e      	ldr	r3, [pc, #120]	; (8009300 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x15c>)
 8009286:	781a      	ldrb	r2, [r3, #0]
 8009288:	4b11      	ldr	r3, [pc, #68]	; (80092d0 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x12c>)
 800928a:	745a      	strb	r2, [r3, #17]
		m_writeFlashBuf[18] = SEQMONITOR;
 800928c:	4b0e      	ldr	r3, [pc, #56]	; (80092c8 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x124>)
 800928e:	781a      	ldrb	r2, [r3, #0]
 8009290:	4b0f      	ldr	r3, [pc, #60]	; (80092d0 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x12c>)
 8009292:	749a      	strb	r2, [r3, #18]
		SEQMONITOR_K1 = SEQMONITOR;
 8009294:	4b0c      	ldr	r3, [pc, #48]	; (80092c8 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x124>)
 8009296:	781a      	ldrb	r2, [r3, #0]
 8009298:	4b0c      	ldr	r3, [pc, #48]	; (80092cc <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x128>)
 800929a:	701a      	strb	r2, [r3, #0]
		updateSetData	= 0;
 800929c:	4b09      	ldr	r3, [pc, #36]	; (80092c4 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x120>)
 800929e:	2200      	movs	r2, #0
 80092a0:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(0);
 80092a2:	2000      	movs	r0, #0
 80092a4:	f7fa f83a 	bl	800331c <W25qxx_EraseSector>
		//W25qxx_WriteSector(m_writeFlashBuf,1,0,19);
		W25qxx_WriteSector(m_writeFlashBuf,0,0,19);
 80092a8:	2313      	movs	r3, #19
 80092aa:	2200      	movs	r2, #0
 80092ac:	2100      	movs	r1, #0
 80092ae:	4808      	ldr	r0, [pc, #32]	; (80092d0 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x12c>)
 80092b0:	f7fa f926 	bl	8003500 <W25qxx_WriteSector>

	}
}
 80092b4:	bf00      	nop
 80092b6:	3708      	adds	r7, #8
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	20000614 	.word	0x20000614
 80092c0:	20000654 	.word	0x20000654
 80092c4:	20000610 	.word	0x20000610
 80092c8:	20000624 	.word	0x20000624
 80092cc:	20000652 	.word	0x20000652
 80092d0:	2000065c 	.word	0x2000065c
 80092d4:	20000616 	.word	0x20000616
 80092d8:	20000618 	.word	0x20000618
 80092dc:	20000628 	.word	0x20000628
 80092e0:	20000629 	.word	0x20000629
 80092e4:	2000062a 	.word	0x2000062a
 80092e8:	2000062b 	.word	0x2000062b
 80092ec:	20000630 	.word	0x20000630
 80092f0:	20000632 	.word	0x20000632
 80092f4:	20000634 	.word	0x20000634
 80092f8:	20000635 	.word	0x20000635
 80092fc:	20000636 	.word	0x20000636
 8009300:	20000637 	.word	0x20000637

08009304 <_ZN14OfflineStorage15m_writeCountincEv>:

void OfflineStorage::m_writeCountinc(){
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
	if((seq1_count_inc_K1 != seq1_count_inc) ||(seq2_count_inc_K1 != seq2_count_inc )){
 800930c:	4b1c      	ldr	r3, [pc, #112]	; (8009380 <_ZN14OfflineStorage15m_writeCountincEv+0x7c>)
 800930e:	881a      	ldrh	r2, [r3, #0]
 8009310:	4b1c      	ldr	r3, [pc, #112]	; (8009384 <_ZN14OfflineStorage15m_writeCountincEv+0x80>)
 8009312:	881b      	ldrh	r3, [r3, #0]
 8009314:	429a      	cmp	r2, r3
 8009316:	d105      	bne.n	8009324 <_ZN14OfflineStorage15m_writeCountincEv+0x20>
 8009318:	4b1b      	ldr	r3, [pc, #108]	; (8009388 <_ZN14OfflineStorage15m_writeCountincEv+0x84>)
 800931a:	881a      	ldrh	r2, [r3, #0]
 800931c:	4b1b      	ldr	r3, [pc, #108]	; (800938c <_ZN14OfflineStorage15m_writeCountincEv+0x88>)
 800931e:	881b      	ldrh	r3, [r3, #0]
 8009320:	429a      	cmp	r2, r3
 8009322:	d028      	beq.n	8009376 <_ZN14OfflineStorage15m_writeCountincEv+0x72>
		m_writeFlashBuf[0] = (uint8_t)(seq1_count_inc & 0xff);
 8009324:	4b17      	ldr	r3, [pc, #92]	; (8009384 <_ZN14OfflineStorage15m_writeCountincEv+0x80>)
 8009326:	881b      	ldrh	r3, [r3, #0]
 8009328:	b2da      	uxtb	r2, r3
 800932a:	4b19      	ldr	r3, [pc, #100]	; (8009390 <_ZN14OfflineStorage15m_writeCountincEv+0x8c>)
 800932c:	701a      	strb	r2, [r3, #0]
		m_writeFlashBuf[1] = (uint8_t)(seq1_count_inc>>8) & 0xff;
 800932e:	4b15      	ldr	r3, [pc, #84]	; (8009384 <_ZN14OfflineStorage15m_writeCountincEv+0x80>)
 8009330:	881b      	ldrh	r3, [r3, #0]
 8009332:	0a1b      	lsrs	r3, r3, #8
 8009334:	b29b      	uxth	r3, r3
 8009336:	b2da      	uxtb	r2, r3
 8009338:	4b15      	ldr	r3, [pc, #84]	; (8009390 <_ZN14OfflineStorage15m_writeCountincEv+0x8c>)
 800933a:	705a      	strb	r2, [r3, #1]
		m_writeFlashBuf[2] = (uint8_t)(seq2_count_inc & 0xff);
 800933c:	4b13      	ldr	r3, [pc, #76]	; (800938c <_ZN14OfflineStorage15m_writeCountincEv+0x88>)
 800933e:	881b      	ldrh	r3, [r3, #0]
 8009340:	b2da      	uxtb	r2, r3
 8009342:	4b13      	ldr	r3, [pc, #76]	; (8009390 <_ZN14OfflineStorage15m_writeCountincEv+0x8c>)
 8009344:	709a      	strb	r2, [r3, #2]
		m_writeFlashBuf[3] = (uint8_t)(seq2_count_inc>>8) & 0xff;
 8009346:	4b11      	ldr	r3, [pc, #68]	; (800938c <_ZN14OfflineStorage15m_writeCountincEv+0x88>)
 8009348:	881b      	ldrh	r3, [r3, #0]
 800934a:	0a1b      	lsrs	r3, r3, #8
 800934c:	b29b      	uxth	r3, r3
 800934e:	b2da      	uxtb	r2, r3
 8009350:	4b0f      	ldr	r3, [pc, #60]	; (8009390 <_ZN14OfflineStorage15m_writeCountincEv+0x8c>)
 8009352:	70da      	strb	r2, [r3, #3]
		seq1_count_inc_K1 = seq1_count_inc;
 8009354:	4b0b      	ldr	r3, [pc, #44]	; (8009384 <_ZN14OfflineStorage15m_writeCountincEv+0x80>)
 8009356:	881a      	ldrh	r2, [r3, #0]
 8009358:	4b09      	ldr	r3, [pc, #36]	; (8009380 <_ZN14OfflineStorage15m_writeCountincEv+0x7c>)
 800935a:	801a      	strh	r2, [r3, #0]
		seq2_count_inc_K1 = seq2_count_inc;
 800935c:	4b0b      	ldr	r3, [pc, #44]	; (800938c <_ZN14OfflineStorage15m_writeCountincEv+0x88>)
 800935e:	881a      	ldrh	r2, [r3, #0]
 8009360:	4b09      	ldr	r3, [pc, #36]	; (8009388 <_ZN14OfflineStorage15m_writeCountincEv+0x84>)
 8009362:	801a      	strh	r2, [r3, #0]

		W25qxx_EraseSector(2);
 8009364:	2002      	movs	r0, #2
 8009366:	f7f9 ffd9 	bl	800331c <W25qxx_EraseSector>
		W25qxx_WriteSector(m_writeFlashBuf,2,0,4);
 800936a:	2304      	movs	r3, #4
 800936c:	2200      	movs	r2, #0
 800936e:	2102      	movs	r1, #2
 8009370:	4807      	ldr	r0, [pc, #28]	; (8009390 <_ZN14OfflineStorage15m_writeCountincEv+0x8c>)
 8009372:	f7fa f8c5 	bl	8003500 <W25qxx_WriteSector>
	}
}
 8009376:	bf00      	nop
 8009378:	3708      	adds	r7, #8
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	20000656 	.word	0x20000656
 8009384:	200000fe 	.word	0x200000fe
 8009388:	20000658 	.word	0x20000658
 800938c:	20000100 	.word	0x20000100
 8009390:	2000065c 	.word	0x2000065c

08009394 <_ZN14OfflineStorage23m_readHeattreatmentDataEv>:
	W25qxx_ReadSector(m_readFlashBuf,0,0,1);
	SEQMONITOR = m_readFlashBuf[0];
	SEQMONITOR_K1 = SEQMONITOR;
}

void OfflineStorage::m_readHeattreatmentData(){
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]

	uint8_t i;
	for(i=0;i<=20;i++){
 800939c:	2300      	movs	r3, #0
 800939e:	73fb      	strb	r3, [r7, #15]
 80093a0:	7bfb      	ldrb	r3, [r7, #15]
 80093a2:	2b14      	cmp	r3, #20
 80093a4:	d807      	bhi.n	80093b6 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x22>
		m_readFlashheatBuf[i]=0;
 80093a6:	7bfb      	ldrb	r3, [r7, #15]
 80093a8:	4a4c      	ldr	r2, [pc, #304]	; (80094dc <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x148>)
 80093aa:	2100      	movs	r1, #0
 80093ac:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<=20;i++){
 80093ae:	7bfb      	ldrb	r3, [r7, #15]
 80093b0:	3301      	adds	r3, #1
 80093b2:	73fb      	strb	r3, [r7, #15]
 80093b4:	e7f4      	b.n	80093a0 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0xc>
	}
	//W25qxx_ReadSector(m_readFlashheatBuf,1,0,19);
	W25qxx_ReadSector(m_readFlashheatBuf,0,0,19);
 80093b6:	2313      	movs	r3, #19
 80093b8:	2200      	movs	r2, #0
 80093ba:	2100      	movs	r1, #0
 80093bc:	4847      	ldr	r0, [pc, #284]	; (80094dc <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x148>)
 80093be:	f7fa f97f 	bl	80036c0 <W25qxx_ReadSector>
	ProcessId_Value = (m_readFlashheatBuf[1]<<8 | m_readFlashheatBuf[0]);
 80093c2:	4b46      	ldr	r3, [pc, #280]	; (80094dc <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x148>)
 80093c4:	785b      	ldrb	r3, [r3, #1]
 80093c6:	021b      	lsls	r3, r3, #8
 80093c8:	b21a      	sxth	r2, r3
 80093ca:	4b44      	ldr	r3, [pc, #272]	; (80094dc <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x148>)
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	b21b      	sxth	r3, r3
 80093d0:	4313      	orrs	r3, r2
 80093d2:	b21b      	sxth	r3, r3
 80093d4:	b29a      	uxth	r2, r3
 80093d6:	4b42      	ldr	r3, [pc, #264]	; (80094e0 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x14c>)
 80093d8:	801a      	strh	r2, [r3, #0]
	ProcessId_Value_K1 = ProcessId_Value;
 80093da:	4b41      	ldr	r3, [pc, #260]	; (80094e0 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x14c>)
 80093dc:	881a      	ldrh	r2, [r3, #0]
 80093de:	4b41      	ldr	r3, [pc, #260]	; (80094e4 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x150>)
 80093e0:	801a      	strh	r2, [r3, #0]
	Seq1temperature = (m_readFlashheatBuf[3]<<8 | m_readFlashheatBuf[2]);
 80093e2:	4b3e      	ldr	r3, [pc, #248]	; (80094dc <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x148>)
 80093e4:	78db      	ldrb	r3, [r3, #3]
 80093e6:	021b      	lsls	r3, r3, #8
 80093e8:	b21a      	sxth	r2, r3
 80093ea:	4b3c      	ldr	r3, [pc, #240]	; (80094dc <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x148>)
 80093ec:	789b      	ldrb	r3, [r3, #2]
 80093ee:	b21b      	sxth	r3, r3
 80093f0:	4313      	orrs	r3, r2
 80093f2:	b21b      	sxth	r3, r3
 80093f4:	b29a      	uxth	r2, r3
 80093f6:	4b3c      	ldr	r3, [pc, #240]	; (80094e8 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x154>)
 80093f8:	801a      	strh	r2, [r3, #0]
	Seq2temperature = (m_readFlashheatBuf[5]<<8 | m_readFlashheatBuf[4]);
 80093fa:	4b38      	ldr	r3, [pc, #224]	; (80094dc <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x148>)
 80093fc:	795b      	ldrb	r3, [r3, #5]
 80093fe:	021b      	lsls	r3, r3, #8
 8009400:	b21a      	sxth	r2, r3
 8009402:	4b36      	ldr	r3, [pc, #216]	; (80094dc <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x148>)
 8009404:	791b      	ldrb	r3, [r3, #4]
 8009406:	b21b      	sxth	r3, r3
 8009408:	4313      	orrs	r3, r2
 800940a:	b21b      	sxth	r3, r3
 800940c:	b29a      	uxth	r2, r3
 800940e:	4b37      	ldr	r3, [pc, #220]	; (80094ec <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x158>)
 8009410:	801a      	strh	r2, [r3, #0]
	H_Timer01HrValue = m_readFlashheatBuf[6];
 8009412:	4b32      	ldr	r3, [pc, #200]	; (80094dc <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x148>)
 8009414:	799a      	ldrb	r2, [r3, #6]
 8009416:	4b36      	ldr	r3, [pc, #216]	; (80094f0 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x15c>)
 8009418:	701a      	strb	r2, [r3, #0]
	H_Timer01MinValue = m_readFlashheatBuf[7];
 800941a:	4b30      	ldr	r3, [pc, #192]	; (80094dc <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x148>)
 800941c:	79da      	ldrb	r2, [r3, #7]
 800941e:	4b35      	ldr	r3, [pc, #212]	; (80094f4 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x160>)
 8009420:	701a      	strb	r2, [r3, #0]
	H_Timer02HrValue = m_readFlashheatBuf[8];
 8009422:	4b2e      	ldr	r3, [pc, #184]	; (80094dc <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x148>)
 8009424:	7a1a      	ldrb	r2, [r3, #8]
 8009426:	4b34      	ldr	r3, [pc, #208]	; (80094f8 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x164>)
 8009428:	701a      	strb	r2, [r3, #0]
	H_Timer02MinValue =m_readFlashheatBuf[9];
 800942a:	4b2c      	ldr	r3, [pc, #176]	; (80094dc <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x148>)
 800942c:	7a5a      	ldrb	r2, [r3, #9]
 800942e:	4b33      	ldr	r3, [pc, #204]	; (80094fc <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x168>)
 8009430:	701a      	strb	r2, [r3, #0]

	Rise_Sequence1_temp = (m_readFlashheatBuf[11]<<8 | m_readFlashheatBuf[10]);
 8009432:	4b2a      	ldr	r3, [pc, #168]	; (80094dc <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x148>)
 8009434:	7adb      	ldrb	r3, [r3, #11]
 8009436:	021b      	lsls	r3, r3, #8
 8009438:	b21a      	sxth	r2, r3
 800943a:	4b28      	ldr	r3, [pc, #160]	; (80094dc <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x148>)
 800943c:	7a9b      	ldrb	r3, [r3, #10]
 800943e:	b21b      	sxth	r3, r3
 8009440:	4313      	orrs	r3, r2
 8009442:	b21b      	sxth	r3, r3
 8009444:	b29a      	uxth	r2, r3
 8009446:	4b2e      	ldr	r3, [pc, #184]	; (8009500 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x16c>)
 8009448:	801a      	strh	r2, [r3, #0]
	Rise_Sequence2_temp = (m_readFlashheatBuf[13]<<8 | m_readFlashheatBuf[12]);
 800944a:	4b24      	ldr	r3, [pc, #144]	; (80094dc <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x148>)
 800944c:	7b5b      	ldrb	r3, [r3, #13]
 800944e:	021b      	lsls	r3, r3, #8
 8009450:	b21a      	sxth	r2, r3
 8009452:	4b22      	ldr	r3, [pc, #136]	; (80094dc <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x148>)
 8009454:	7b1b      	ldrb	r3, [r3, #12]
 8009456:	b21b      	sxth	r3, r3
 8009458:	4313      	orrs	r3, r2
 800945a:	b21b      	sxth	r3, r3
 800945c:	b29a      	uxth	r2, r3
 800945e:	4b29      	ldr	r3, [pc, #164]	; (8009504 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x170>)
 8009460:	801a      	strh	r2, [r3, #0]
	Rise_Sequence1_Hour = m_readFlashheatBuf[14];
 8009462:	4b1e      	ldr	r3, [pc, #120]	; (80094dc <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x148>)
 8009464:	7b9a      	ldrb	r2, [r3, #14]
 8009466:	4b28      	ldr	r3, [pc, #160]	; (8009508 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x174>)
 8009468:	701a      	strb	r2, [r3, #0]
	Rise_Sequence1_Minute = m_readFlashheatBuf[15];
 800946a:	4b1c      	ldr	r3, [pc, #112]	; (80094dc <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x148>)
 800946c:	7bda      	ldrb	r2, [r3, #15]
 800946e:	4b27      	ldr	r3, [pc, #156]	; (800950c <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x178>)
 8009470:	701a      	strb	r2, [r3, #0]
	Rise_Sequence2_Hour = m_readFlashheatBuf[16];
 8009472:	4b1a      	ldr	r3, [pc, #104]	; (80094dc <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x148>)
 8009474:	7c1a      	ldrb	r2, [r3, #16]
 8009476:	4b26      	ldr	r3, [pc, #152]	; (8009510 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x17c>)
 8009478:	701a      	strb	r2, [r3, #0]
	Rise_Sequence2_Minute =m_readFlashheatBuf[17];
 800947a:	4b18      	ldr	r3, [pc, #96]	; (80094dc <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x148>)
 800947c:	7c5a      	ldrb	r2, [r3, #17]
 800947e:	4b25      	ldr	r3, [pc, #148]	; (8009514 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x180>)
 8009480:	701a      	strb	r2, [r3, #0]

	SEQMONITOR = m_readFlashheatBuf[18];
 8009482:	4b16      	ldr	r3, [pc, #88]	; (80094dc <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x148>)
 8009484:	7c9a      	ldrb	r2, [r3, #18]
 8009486:	4b24      	ldr	r3, [pc, #144]	; (8009518 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x184>)
 8009488:	701a      	strb	r2, [r3, #0]
	SEQMONITOR_K1 = SEQMONITOR;
 800948a:	4b23      	ldr	r3, [pc, #140]	; (8009518 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x184>)
 800948c:	781a      	ldrb	r2, [r3, #0]
 800948e:	4b23      	ldr	r3, [pc, #140]	; (800951c <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x188>)
 8009490:	701a      	strb	r2, [r3, #0]

	ProcessTotalMin1 	=  (H_Timer01HrValue*60)+  H_Timer01MinValue;
 8009492:	4b17      	ldr	r3, [pc, #92]	; (80094f0 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x15c>)
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	b29b      	uxth	r3, r3
 8009498:	461a      	mov	r2, r3
 800949a:	0112      	lsls	r2, r2, #4
 800949c:	1ad3      	subs	r3, r2, r3
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	b29a      	uxth	r2, r3
 80094a2:	4b14      	ldr	r3, [pc, #80]	; (80094f4 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x160>)
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	4413      	add	r3, r2
 80094aa:	b29a      	uxth	r2, r3
 80094ac:	4b1c      	ldr	r3, [pc, #112]	; (8009520 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x18c>)
 80094ae:	801a      	strh	r2, [r3, #0]
	ProcessTotalMin1 	=  (H_Timer01HrValue*60)+  H_Timer01MinValue;
 80094b0:	4b0f      	ldr	r3, [pc, #60]	; (80094f0 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x15c>)
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	461a      	mov	r2, r3
 80094b8:	0112      	lsls	r2, r2, #4
 80094ba:	1ad3      	subs	r3, r2, r3
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	b29a      	uxth	r2, r3
 80094c0:	4b0c      	ldr	r3, [pc, #48]	; (80094f4 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x160>)
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	4413      	add	r3, r2
 80094c8:	b29a      	uxth	r2, r3
 80094ca:	4b15      	ldr	r3, [pc, #84]	; (8009520 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x18c>)
 80094cc:	801a      	strh	r2, [r3, #0]
	updateSetData=1;
 80094ce:	4b15      	ldr	r3, [pc, #84]	; (8009524 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x190>)
 80094d0:	2201      	movs	r2, #1
 80094d2:	701a      	strb	r2, [r3, #0]
}
 80094d4:	bf00      	nop
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	20000684 	.word	0x20000684
 80094e0:	20000614 	.word	0x20000614
 80094e4:	20000654 	.word	0x20000654
 80094e8:	20000616 	.word	0x20000616
 80094ec:	20000618 	.word	0x20000618
 80094f0:	20000628 	.word	0x20000628
 80094f4:	20000629 	.word	0x20000629
 80094f8:	2000062a 	.word	0x2000062a
 80094fc:	2000062b 	.word	0x2000062b
 8009500:	20000630 	.word	0x20000630
 8009504:	20000632 	.word	0x20000632
 8009508:	20000634 	.word	0x20000634
 800950c:	20000635 	.word	0x20000635
 8009510:	20000636 	.word	0x20000636
 8009514:	20000637 	.word	0x20000637
 8009518:	20000624 	.word	0x20000624
 800951c:	20000652 	.word	0x20000652
 8009520:	2000062c 	.word	0x2000062c
 8009524:	20000610 	.word	0x20000610

08009528 <_ZN14OfflineStorage14m_readCountincEv>:

void OfflineStorage::m_readCountinc(){
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
	W25qxx_ReadSector(m_readFlashBuf,2,0,4);
 8009530:	2304      	movs	r3, #4
 8009532:	2200      	movs	r2, #0
 8009534:	2102      	movs	r1, #2
 8009536:	4813      	ldr	r0, [pc, #76]	; (8009584 <_ZN14OfflineStorage14m_readCountincEv+0x5c>)
 8009538:	f7fa f8c2 	bl	80036c0 <W25qxx_ReadSector>
	seq1_count_inc = (m_readFlashBuf[1]<<8 | m_readFlashBuf[0]);
 800953c:	4b11      	ldr	r3, [pc, #68]	; (8009584 <_ZN14OfflineStorage14m_readCountincEv+0x5c>)
 800953e:	785b      	ldrb	r3, [r3, #1]
 8009540:	021b      	lsls	r3, r3, #8
 8009542:	b21a      	sxth	r2, r3
 8009544:	4b0f      	ldr	r3, [pc, #60]	; (8009584 <_ZN14OfflineStorage14m_readCountincEv+0x5c>)
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	b21b      	sxth	r3, r3
 800954a:	4313      	orrs	r3, r2
 800954c:	b21b      	sxth	r3, r3
 800954e:	b29a      	uxth	r2, r3
 8009550:	4b0d      	ldr	r3, [pc, #52]	; (8009588 <_ZN14OfflineStorage14m_readCountincEv+0x60>)
 8009552:	801a      	strh	r2, [r3, #0]
	seq2_count_inc = (m_readFlashBuf[3]<<8 | m_readFlashBuf[2]);
 8009554:	4b0b      	ldr	r3, [pc, #44]	; (8009584 <_ZN14OfflineStorage14m_readCountincEv+0x5c>)
 8009556:	78db      	ldrb	r3, [r3, #3]
 8009558:	021b      	lsls	r3, r3, #8
 800955a:	b21a      	sxth	r2, r3
 800955c:	4b09      	ldr	r3, [pc, #36]	; (8009584 <_ZN14OfflineStorage14m_readCountincEv+0x5c>)
 800955e:	789b      	ldrb	r3, [r3, #2]
 8009560:	b21b      	sxth	r3, r3
 8009562:	4313      	orrs	r3, r2
 8009564:	b21b      	sxth	r3, r3
 8009566:	b29a      	uxth	r2, r3
 8009568:	4b08      	ldr	r3, [pc, #32]	; (800958c <_ZN14OfflineStorage14m_readCountincEv+0x64>)
 800956a:	801a      	strh	r2, [r3, #0]
	seq1_count_inc_K1 = seq1_count_inc;
 800956c:	4b06      	ldr	r3, [pc, #24]	; (8009588 <_ZN14OfflineStorage14m_readCountincEv+0x60>)
 800956e:	881a      	ldrh	r2, [r3, #0]
 8009570:	4b07      	ldr	r3, [pc, #28]	; (8009590 <_ZN14OfflineStorage14m_readCountincEv+0x68>)
 8009572:	801a      	strh	r2, [r3, #0]
	seq2_count_inc_K1 = seq2_count_inc;
 8009574:	4b05      	ldr	r3, [pc, #20]	; (800958c <_ZN14OfflineStorage14m_readCountincEv+0x64>)
 8009576:	881a      	ldrh	r2, [r3, #0]
 8009578:	4b06      	ldr	r3, [pc, #24]	; (8009594 <_ZN14OfflineStorage14m_readCountincEv+0x6c>)
 800957a:	801a      	strh	r2, [r3, #0]
}
 800957c:	bf00      	nop
 800957e:	3708      	adds	r7, #8
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}
 8009584:	20000670 	.word	0x20000670
 8009588:	200000fe 	.word	0x200000fe
 800958c:	20000100 	.word	0x20000100
 8009590:	20000656 	.word	0x20000656
 8009594:	20000658 	.word	0x20000658

08009598 <_ZN14OfflineStorage19ReadOfflinedataInitEv>:
	W25qxx_ReadSector(m_readFlashBuf,3,0,2);
	Quenching_Seconds_Cont =(m_readFlashBuf[1]<<8 | m_readFlashBuf[0]);
}

void OfflineStorage::ReadOfflinedataInit()
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
	m_readHeattreatmentData();
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f7ff fef7 	bl	8009394 <_ZN14OfflineStorage23m_readHeattreatmentDataEv>
	m_readCountinc();
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f7ff ffbe 	bl	8009528 <_ZN14OfflineStorage14m_readCountincEv>
}
 80095ac:	bf00      	nop
 80095ae:	3708      	adds	r7, #8
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <_ZN7ESP8266C1Ev>:
extern uint16_t Rise_Sequence1_temp,Rise_Sequence2_temp;
extern uint8_t Rise_Sequence1_Hour,Rise_Sequence1_Minute,Rise_Sequence2_Hour,Rise_Sequence2_Minute;
extern uint8_t H_Timer01HrValue,H_Timer01MinValue,H_Timer02HrValue,H_Timer02MinValue;
extern uint8_t R_Sequence2_hour_http,R_Sequence2_minute_http,Sequence2_hour_http,Sequence2_minute_http;

ESP8266::ESP8266() {
 80095b4:	b5b0      	push	{r4, r5, r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	4ac9      	ldr	r2, [pc, #804]	; (80098e4 <_ZN7ESP8266C1Ev+0x330>)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	601a      	str	r2, [r3, #0]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	49c8      	ldr	r1, [pc, #800]	; (80098e8 <_ZN7ESP8266C1Ev+0x334>)
 80095c6:	f103 020e 	add.w	r2, r3, #14
 80095ca:	460b      	mov	r3, r1
 80095cc:	cb03      	ldmia	r3!, {r0, r1}
 80095ce:	6010      	str	r0, [r2, #0]
 80095d0:	6051      	str	r1, [r2, #4]
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	7213      	strb	r3, [r2, #8]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4ac4      	ldr	r2, [pc, #784]	; (80098ec <_ZN7ESP8266C1Ev+0x338>)
 80095da:	3317      	adds	r3, #23
 80095dc:	6810      	ldr	r0, [r2, #0]
 80095de:	6018      	str	r0, [r3, #0]
 80095e0:	8891      	ldrh	r1, [r2, #4]
 80095e2:	7992      	ldrb	r2, [r2, #6]
 80095e4:	8099      	strh	r1, [r3, #4]
 80095e6:	719a      	strb	r2, [r3, #6]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	49c1      	ldr	r1, [pc, #772]	; (80098f0 <_ZN7ESP8266C1Ev+0x33c>)
 80095ec:	f103 021e 	add.w	r2, r3, #30
 80095f0:	6808      	ldr	r0, [r1, #0]
 80095f2:	6010      	str	r0, [r2, #0]
 80095f4:	7909      	ldrb	r1, [r1, #4]
 80095f6:	7111      	strb	r1, [r2, #4]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 80095fe:	687d      	ldr	r5, [r7, #4]
 8009600:	4bbc      	ldr	r3, [pc, #752]	; (80098f4 <_ZN7ESP8266C1Ev+0x340>)
 8009602:	f105 0424 	add.w	r4, r5, #36	; 0x24
 8009606:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009608:	c407      	stmia	r4!, {r0, r1, r2}
 800960a:	8023      	strh	r3, [r4, #0]
 800960c:	2300      	movs	r3, #0
 800960e:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	3333      	adds	r3, #51	; 0x33
 8009616:	222d      	movs	r2, #45	; 0x2d
 8009618:	2100      	movs	r1, #0
 800961a:	4618      	mov	r0, r3
 800961c:	f006 f94e 	bl	800f8bc <memset>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2241      	movs	r2, #65	; 0x41
 8009624:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2254      	movs	r2, #84	; 0x54
 800962c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	222b      	movs	r2, #43	; 0x2b
 8009634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2243      	movs	r2, #67	; 0x43
 800963c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2257      	movs	r2, #87	; 0x57
 8009644:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	224a      	movs	r2, #74	; 0x4a
 800964c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2241      	movs	r2, #65	; 0x41
 8009654:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2250      	movs	r2, #80	; 0x50
 800965c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	223d      	movs	r2, #61	; 0x3d
 8009664:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2222      	movs	r2, #34	; 0x22
 800966c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2241      	movs	r2, #65	; 0x41
 8009674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2243      	movs	r2, #67	; 0x43
 800967c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2243      	movs	r2, #67	; 0x43
 8009684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2245      	movs	r2, #69	; 0x45
 800968c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2245      	movs	r2, #69	; 0x45
 8009694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2244      	movs	r2, #68	; 0x44
 800969c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	224f      	movs	r2, #79	; 0x4f
 80096a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	225f      	movs	r2, #95	; 0x5f
 80096ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2245      	movs	r2, #69	; 0x45
 80096b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2244      	movs	r2, #68	; 0x44
 80096bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2249      	movs	r2, #73	; 0x49
 80096c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	224d      	movs	r2, #77	; 0x4d
 80096cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2241      	movs	r2, #65	; 0x41
 80096d4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2258      	movs	r2, #88	; 0x58
 80096dc:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2222      	movs	r2, #34	; 0x22
 80096e4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	222c      	movs	r2, #44	; 0x2c
 80096ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2222      	movs	r2, #34	; 0x22
 80096f4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2241      	movs	r2, #65	; 0x41
 80096fc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2243      	movs	r2, #67	; 0x43
 8009704:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2243      	movs	r2, #67	; 0x43
 800970c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2245      	movs	r2, #69	; 0x45
 8009714:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2245      	movs	r2, #69	; 0x45
 800971c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2244      	movs	r2, #68	; 0x44
 8009724:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	224f      	movs	r2, #79	; 0x4f
 800972c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2240      	movs	r2, #64	; 0x40
 8009734:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2231      	movs	r2, #49	; 0x31
 800973c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2232      	movs	r2, #50	; 0x32
 8009744:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2233      	movs	r2, #51	; 0x33
 800974c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2222      	movs	r2, #34	; 0x22
 8009754:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	220d      	movs	r2, #13
 800975c:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	220a      	movs	r2, #10
 8009764:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4a63      	ldr	r2, [pc, #396]	; (80098f8 <_ZN7ESP8266C1Ev+0x344>)
 800976c:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8009770:	ca07      	ldmia	r2, {r0, r1, r2}
 8009772:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009776:	2200      	movs	r2, #0
 8009778:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800977c:	687d      	ldr	r5, [r7, #4]
 800977e:	4b5f      	ldr	r3, [pc, #380]	; (80098fc <_ZN7ESP8266C1Ev+0x348>)
 8009780:	f105 046d 	add.w	r4, r5, #109	; 0x6d
 8009784:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009786:	6020      	str	r0, [r4, #0]
 8009788:	6061      	str	r1, [r4, #4]
 800978a:	60a2      	str	r2, [r4, #8]
 800978c:	881b      	ldrh	r3, [r3, #0]
 800978e:	81a3      	strh	r3, [r4, #12]
 8009790:	2300      	movs	r3, #0
 8009792:	f885 307b 	strb.w	r3, [r5, #123]	; 0x7b
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	337c      	adds	r3, #124	; 0x7c
 800979a:	2232      	movs	r2, #50	; 0x32
 800979c:	2100      	movs	r1, #0
 800979e:	4618      	mov	r0, r3
 80097a0:	f006 f88c 	bl	800f8bc <memset>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2241      	movs	r2, #65	; 0x41
 80097a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2254      	movs	r2, #84	; 0x54
 80097b0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	222b      	movs	r2, #43	; 0x2b
 80097b8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2243      	movs	r2, #67	; 0x43
 80097c0:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2249      	movs	r2, #73	; 0x49
 80097c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2250      	movs	r2, #80	; 0x50
 80097d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2253      	movs	r2, #83	; 0x53
 80097d8:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2254      	movs	r2, #84	; 0x54
 80097e0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2241      	movs	r2, #65	; 0x41
 80097e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2252      	movs	r2, #82	; 0x52
 80097f0:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2254      	movs	r2, #84	; 0x54
 80097f8:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	223d      	movs	r2, #61	; 0x3d
 8009800:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2231      	movs	r2, #49	; 0x31
 8009808:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	222c      	movs	r2, #44	; 0x2c
 8009810:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2222      	movs	r2, #34	; 0x22
 8009818:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2254      	movs	r2, #84	; 0x54
 8009820:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2243      	movs	r2, #67	; 0x43
 8009828:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2250      	movs	r2, #80	; 0x50
 8009830:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2222      	movs	r2, #34	; 0x22
 8009838:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	222c      	movs	r2, #44	; 0x2c
 8009840:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2222      	movs	r2, #34	; 0x22
 8009848:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2275      	movs	r2, #117	; 0x75
 8009850:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2273      	movs	r2, #115	; 0x73
 8009858:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	226d      	movs	r2, #109	; 0x6d
 8009860:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2234      	movs	r2, #52	; 0x34
 8009868:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	222d      	movs	r2, #45	; 0x2d
 8009870:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2268      	movs	r2, #104	; 0x68
 8009878:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2274      	movs	r2, #116	; 0x74
 8009880:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	222e      	movs	r2, #46	; 0x2e
 8009888:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2261      	movs	r2, #97	; 0x61
 8009890:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2263      	movs	r2, #99	; 0x63
 8009898:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2263      	movs	r2, #99	; 0x63
 80098a0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2265      	movs	r2, #101	; 0x65
 80098a8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2265      	movs	r2, #101	; 0x65
 80098b0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2264      	movs	r2, #100	; 0x64
 80098b8:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	226f      	movs	r2, #111	; 0x6f
 80098c0:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	222e      	movs	r2, #46	; 0x2e
 80098c8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2269      	movs	r2, #105	; 0x69
 80098d0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	226e      	movs	r2, #110	; 0x6e
 80098d8:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2222      	movs	r2, #34	; 0x22
 80098e0:	e00e      	b.n	8009900 <_ZN7ESP8266C1Ev+0x34c>
 80098e2:	bf00      	nop
 80098e4:	0801065c 	.word	0x0801065c
 80098e8:	08010424 	.word	0x08010424
 80098ec:	08010430 	.word	0x08010430
 80098f0:	08010438 	.word	0x08010438
 80098f4:	08010440 	.word	0x08010440
 80098f8:	08010450 	.word	0x08010450
 80098fc:	08010460 	.word	0x08010460
 8009900:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	222c      	movs	r2, #44	; 0x2c
 8009908:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2239      	movs	r2, #57	; 0x39
 8009910:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2230      	movs	r2, #48	; 0x30
 8009918:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2231      	movs	r2, #49	; 0x31
 8009920:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2232      	movs	r2, #50	; 0x32
 8009928:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	220d      	movs	r2, #13
 8009930:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	220a      	movs	r2, #10
 8009938:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	33c2      	adds	r3, #194	; 0xc2
 8009940:	2200      	movs	r2, #0
 8009942:	601a      	str	r2, [r3, #0]
 8009944:	605a      	str	r2, [r3, #4]
 8009946:	609a      	str	r2, [r3, #8]
 8009948:	60da      	str	r2, [r3, #12]
 800994a:	611a      	str	r2, [r3, #16]
 800994c:	687d      	ldr	r5, [r7, #4]
 800994e:	4b08      	ldr	r3, [pc, #32]	; (8009970 <_ZN7ESP8266C1Ev+0x3bc>)
 8009950:	f205 248e 	addw	r4, r5, #654	; 0x28e
 8009954:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009956:	6020      	str	r0, [r4, #0]
 8009958:	6061      	str	r1, [r4, #4]
 800995a:	60a2      	str	r2, [r4, #8]
 800995c:	881b      	ldrh	r3, [r3, #0]
 800995e:	81a3      	strh	r3, [r4, #12]
 8009960:	2300      	movs	r3, #0
 8009962:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
	// TODO Auto-generated constructor stub

}
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	4618      	mov	r0, r3
 800996a:	3708      	adds	r7, #8
 800996c:	46bd      	mov	sp, r7
 800996e:	bdb0      	pop	{r4, r5, r7, pc}
 8009970:	08010470 	.word	0x08010470

08009974 <_ZN7ESP8266D1Ev>:

ESP8266::~ESP8266() {
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	4a04      	ldr	r2, [pc, #16]	; (8009990 <_ZN7ESP8266D1Ev+0x1c>)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	4618      	mov	r0, r3
 8009986:	370c      	adds	r7, #12
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr
 8009990:	0801065c 	.word	0x0801065c

08009994 <_ZN7ESP8266D0Ev>:
ESP8266::~ESP8266() {
 8009994:	b580      	push	{r7, lr}
 8009996:	b082      	sub	sp, #8
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
}
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f7ff ffe9 	bl	8009974 <_ZN7ESP8266D1Ev>
 80099a2:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f005 ff43 	bl	800f832 <_ZdlPvj>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	4618      	mov	r0, r3
 80099b0:	3708      	adds	r7, #8
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <_ZN7ESP82663runEv>:


void ESP8266::run()
{
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b082      	sub	sp, #8
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
	Send_WifiCmd();
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 f804 	bl	80099cc <_ZN7ESP826612Send_WifiCmdEv>

}
 80099c4:	bf00      	nop
 80099c6:	3708      	adds	r7, #8
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <_ZN7ESP826612Send_WifiCmdEv>:

void ESP8266::Send_WifiCmd()
{
 80099cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099ce:	b09d      	sub	sp, #116	; 0x74
 80099d0:	af12      	add	r7, sp, #72	; 0x48
 80099d2:	6278      	str	r0, [r7, #36]	; 0x24
	switch(wifi_command)
 80099d4:	4bc4      	ldr	r3, [pc, #784]	; (8009ce8 <_ZN7ESP826612Send_WifiCmdEv+0x31c>)
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	3b05      	subs	r3, #5
 80099da:	2b73      	cmp	r3, #115	; 0x73
 80099dc:	f201 8002 	bhi.w	800a9e4 <_ZN7ESP826612Send_WifiCmdEv+0x1018>
 80099e0:	a201      	add	r2, pc, #4	; (adr r2, 80099e8 <_ZN7ESP826612Send_WifiCmdEv+0x1c>)
 80099e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e6:	bf00      	nop
 80099e8:	08009bb9 	.word	0x08009bb9
 80099ec:	0800a9e5 	.word	0x0800a9e5
 80099f0:	0800a9e5 	.word	0x0800a9e5
 80099f4:	0800a9e5 	.word	0x0800a9e5
 80099f8:	0800a9e5 	.word	0x0800a9e5
 80099fc:	08009bdf 	.word	0x08009bdf
 8009a00:	08009c0b 	.word	0x08009c0b
 8009a04:	08009c3b 	.word	0x08009c3b
 8009a08:	08009c61 	.word	0x08009c61
 8009a0c:	08009c91 	.word	0x08009c91
 8009a10:	08009cbd 	.word	0x08009cbd
 8009a14:	0800a9e5 	.word	0x0800a9e5
 8009a18:	0800a9e5 	.word	0x0800a9e5
 8009a1c:	0800a9e5 	.word	0x0800a9e5
 8009a20:	0800a9e5 	.word	0x0800a9e5
 8009a24:	08009d05 	.word	0x08009d05
 8009a28:	08009d43 	.word	0x08009d43
 8009a2c:	0800a9e5 	.word	0x0800a9e5
 8009a30:	0800a9e5 	.word	0x0800a9e5
 8009a34:	0800a9e5 	.word	0x0800a9e5
 8009a38:	0800a9e5 	.word	0x0800a9e5
 8009a3c:	0800a9e5 	.word	0x0800a9e5
 8009a40:	0800a9e5 	.word	0x0800a9e5
 8009a44:	0800a9e5 	.word	0x0800a9e5
 8009a48:	0800a9e5 	.word	0x0800a9e5
 8009a4c:	08009d8b 	.word	0x08009d8b
 8009a50:	0800a9e5 	.word	0x0800a9e5
 8009a54:	0800a9e5 	.word	0x0800a9e5
 8009a58:	0800a9e5 	.word	0x0800a9e5
 8009a5c:	0800a9e5 	.word	0x0800a9e5
 8009a60:	0800a9e5 	.word	0x0800a9e5
 8009a64:	0800a9e5 	.word	0x0800a9e5
 8009a68:	0800a9e5 	.word	0x0800a9e5
 8009a6c:	0800a9e5 	.word	0x0800a9e5
 8009a70:	0800a9e5 	.word	0x0800a9e5
 8009a74:	0800a9e5 	.word	0x0800a9e5
 8009a78:	08009dbd 	.word	0x08009dbd
 8009a7c:	0800a9e5 	.word	0x0800a9e5
 8009a80:	0800a9e5 	.word	0x0800a9e5
 8009a84:	0800a9e5 	.word	0x0800a9e5
 8009a88:	0800a9e5 	.word	0x0800a9e5
 8009a8c:	0800a9e5 	.word	0x0800a9e5
 8009a90:	0800a9e5 	.word	0x0800a9e5
 8009a94:	0800a9e5 	.word	0x0800a9e5
 8009a98:	08009ded 	.word	0x08009ded
 8009a9c:	08009e1d 	.word	0x08009e1d
 8009aa0:	08009e49 	.word	0x08009e49
 8009aa4:	0800a9e5 	.word	0x0800a9e5
 8009aa8:	0800a9e5 	.word	0x0800a9e5
 8009aac:	0800a9e5 	.word	0x0800a9e5
 8009ab0:	0800a9e5 	.word	0x0800a9e5
 8009ab4:	0800a9e5 	.word	0x0800a9e5
 8009ab8:	0800a9e5 	.word	0x0800a9e5
 8009abc:	0800a9e5 	.word	0x0800a9e5
 8009ac0:	0800a9e5 	.word	0x0800a9e5
 8009ac4:	0800a9e5 	.word	0x0800a9e5
 8009ac8:	0800a9e5 	.word	0x0800a9e5
 8009acc:	0800a9e5 	.word	0x0800a9e5
 8009ad0:	0800a9e5 	.word	0x0800a9e5
 8009ad4:	0800a9e5 	.word	0x0800a9e5
 8009ad8:	0800a9e5 	.word	0x0800a9e5
 8009adc:	0800a9e5 	.word	0x0800a9e5
 8009ae0:	0800a9e5 	.word	0x0800a9e5
 8009ae4:	0800a9e5 	.word	0x0800a9e5
 8009ae8:	0800a9e5 	.word	0x0800a9e5
 8009aec:	08009e79 	.word	0x08009e79
 8009af0:	08009ea5 	.word	0x08009ea5
 8009af4:	0800a9e5 	.word	0x0800a9e5
 8009af8:	0800a9e5 	.word	0x0800a9e5
 8009afc:	0800a9e5 	.word	0x0800a9e5
 8009b00:	0800a9e5 	.word	0x0800a9e5
 8009b04:	0800a9e5 	.word	0x0800a9e5
 8009b08:	0800a9e5 	.word	0x0800a9e5
 8009b0c:	0800a9e5 	.word	0x0800a9e5
 8009b10:	0800a9e5 	.word	0x0800a9e5
 8009b14:	08009ed5 	.word	0x08009ed5
 8009b18:	08009f01 	.word	0x08009f01
 8009b1c:	0800a9e5 	.word	0x0800a9e5
 8009b20:	0800a9e5 	.word	0x0800a9e5
 8009b24:	0800a9e5 	.word	0x0800a9e5
 8009b28:	0800a9e5 	.word	0x0800a9e5
 8009b2c:	0800a9e5 	.word	0x0800a9e5
 8009b30:	0800a9e5 	.word	0x0800a9e5
 8009b34:	0800a9e5 	.word	0x0800a9e5
 8009b38:	0800a9e5 	.word	0x0800a9e5
 8009b3c:	08009f4d 	.word	0x08009f4d
 8009b40:	0800a407 	.word	0x0800a407
 8009b44:	0800a9e5 	.word	0x0800a9e5
 8009b48:	0800a9e5 	.word	0x0800a9e5
 8009b4c:	0800a9e5 	.word	0x0800a9e5
 8009b50:	0800a9e5 	.word	0x0800a9e5
 8009b54:	0800a9e5 	.word	0x0800a9e5
 8009b58:	0800a9e5 	.word	0x0800a9e5
 8009b5c:	0800a9e5 	.word	0x0800a9e5
 8009b60:	0800a9e5 	.word	0x0800a9e5
 8009b64:	0800a4a9 	.word	0x0800a4a9
 8009b68:	0800a941 	.word	0x0800a941
 8009b6c:	0800a96d 	.word	0x0800a96d
 8009b70:	0800a999 	.word	0x0800a999
 8009b74:	0800a9e5 	.word	0x0800a9e5
 8009b78:	0800a9e5 	.word	0x0800a9e5
 8009b7c:	0800a9e5 	.word	0x0800a9e5
 8009b80:	0800a9e5 	.word	0x0800a9e5
 8009b84:	0800a9e5 	.word	0x0800a9e5
 8009b88:	0800a9e5 	.word	0x0800a9e5
 8009b8c:	0800a9c5 	.word	0x0800a9c5
 8009b90:	0800a9e5 	.word	0x0800a9e5
 8009b94:	0800a9e5 	.word	0x0800a9e5
 8009b98:	0800a9e5 	.word	0x0800a9e5
 8009b9c:	0800a9e5 	.word	0x0800a9e5
 8009ba0:	0800a9e5 	.word	0x0800a9e5
 8009ba4:	0800a9e5 	.word	0x0800a9e5
 8009ba8:	0800a9e5 	.word	0x0800a9e5
 8009bac:	0800a9e5 	.word	0x0800a9e5
 8009bb0:	0800a9e5 	.word	0x0800a9e5
 8009bb4:	0800a9ed 	.word	0x0800a9ed
	{
	case 5: //step --1 Reset COntroller PIN
		HAL_GPIO_WritePin(GPIOB, WIFIRST_Pin, GPIO_PIN_SET);
 8009bb8:	2201      	movs	r2, #1
 8009bba:	2104      	movs	r1, #4
 8009bbc:	484b      	ldr	r0, [pc, #300]	; (8009cec <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 8009bbe:	f001 fbc7 	bl	800b350 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8009bc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009bc6:	f001 f895 	bl	800acf4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, WIFIRST_Pin, GPIO_PIN_RESET);
 8009bca:	2200      	movs	r2, #0
 8009bcc:	2104      	movs	r1, #4
 8009bce:	4847      	ldr	r0, [pc, #284]	; (8009cec <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 8009bd0:	f001 fbbe 	bl	800b350 <HAL_GPIO_WritePin>
		wifi_command=13;
 8009bd4:	4b44      	ldr	r3, [pc, #272]	; (8009ce8 <_ZN7ESP826612Send_WifiCmdEv+0x31c>)
 8009bd6:	220d      	movs	r2, #13
 8009bd8:	701a      	strb	r2, [r3, #0]

	break;
 8009bda:	f000 bf22 	b.w	800aa22 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	case 10://WI-Fi Reset
	NoOfdata_byte=7;
 8009bde:	4b44      	ldr	r3, [pc, #272]	; (8009cf0 <_ZN7ESP826612Send_WifiCmdEv+0x324>)
 8009be0:	2207      	movs	r2, #7
 8009be2:	801a      	strh	r2, [r3, #0]
	wifi_command=13;
 8009be4:	4b40      	ldr	r3, [pc, #256]	; (8009ce8 <_ZN7ESP826612Send_WifiCmdEv+0x31c>)
 8009be6:	220d      	movs	r2, #13
 8009be8:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 8009bea:	4b42      	ldr	r3, [pc, #264]	; (8009cf4 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 8009bec:	2200      	movs	r2, #0
 8009bee:	701a      	strb	r2, [r3, #0]
	bufferptr=0;
 8009bf0:	4b41      	ldr	r3, [pc, #260]	; (8009cf8 <_ZN7ESP826612Send_WifiCmdEv+0x32c>)
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDAtRst,NoOfdata_byte);
 8009bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf8:	330e      	adds	r3, #14
 8009bfa:	4a3d      	ldr	r2, [pc, #244]	; (8009cf0 <_ZN7ESP826612Send_WifiCmdEv+0x324>)
 8009bfc:	8812      	ldrh	r2, [r2, #0]
 8009bfe:	4619      	mov	r1, r3
 8009c00:	483e      	ldr	r0, [pc, #248]	; (8009cfc <_ZN7ESP826612Send_WifiCmdEv+0x330>)
 8009c02:	f004 fabd 	bl	800e180 <HAL_UART_Transmit_IT>
	break;
 8009c06:	f000 bf0c 	b.w	800aa22 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	case 11:
	if(++Timerdelay >12)
 8009c0a:	4b3a      	ldr	r3, [pc, #232]	; (8009cf4 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	3301      	adds	r3, #1
 8009c10:	b2da      	uxtb	r2, r3
 8009c12:	4b38      	ldr	r3, [pc, #224]	; (8009cf4 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 8009c14:	701a      	strb	r2, [r3, #0]
 8009c16:	4b37      	ldr	r3, [pc, #220]	; (8009cf4 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	2b0c      	cmp	r3, #12
 8009c1c:	bf8c      	ite	hi
 8009c1e:	2301      	movhi	r3, #1
 8009c20:	2300      	movls	r3, #0
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f000 86e3 	beq.w	800a9f0 <_ZN7ESP826612Send_WifiCmdEv+0x1024>
	{
		Timerdelay=0;
 8009c2a:	4b32      	ldr	r3, [pc, #200]	; (8009cf4 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	701a      	strb	r2, [r3, #0]
		wifi_command=14;
 8009c30:	4b2d      	ldr	r3, [pc, #180]	; (8009ce8 <_ZN7ESP826612Send_WifiCmdEv+0x31c>)
 8009c32:	220e      	movs	r2, #14
 8009c34:	701a      	strb	r2, [r3, #0]
	}
	break;
 8009c36:	f000 bedb 	b.w	800a9f0 <_ZN7ESP826612Send_WifiCmdEv+0x1024>
	case 12:
	NoOfdata_byte=6;
 8009c3a:	4b2d      	ldr	r3, [pc, #180]	; (8009cf0 <_ZN7ESP826612Send_WifiCmdEv+0x324>)
 8009c3c:	2206      	movs	r2, #6
 8009c3e:	801a      	strh	r2, [r3, #0]
	wifi_command=13;
 8009c40:	4b29      	ldr	r3, [pc, #164]	; (8009ce8 <_ZN7ESP826612Send_WifiCmdEv+0x31c>)
 8009c42:	220d      	movs	r2, #13
 8009c44:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 8009c46:	4b2b      	ldr	r3, [pc, #172]	; (8009cf4 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 8009c48:	2200      	movs	r2, #0
 8009c4a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDAtEch0,NoOfdata_byte);
 8009c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4e:	3317      	adds	r3, #23
 8009c50:	4a27      	ldr	r2, [pc, #156]	; (8009cf0 <_ZN7ESP826612Send_WifiCmdEv+0x324>)
 8009c52:	8812      	ldrh	r2, [r2, #0]
 8009c54:	4619      	mov	r1, r3
 8009c56:	4829      	ldr	r0, [pc, #164]	; (8009cfc <_ZN7ESP826612Send_WifiCmdEv+0x330>)
 8009c58:	f004 fa92 	bl	800e180 <HAL_UART_Transmit_IT>
	break;
 8009c5c:	f000 bee1 	b.w	800aa22 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	case 13:
	if(++Timerdelay >15)
 8009c60:	4b24      	ldr	r3, [pc, #144]	; (8009cf4 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	3301      	adds	r3, #1
 8009c66:	b2da      	uxtb	r2, r3
 8009c68:	4b22      	ldr	r3, [pc, #136]	; (8009cf4 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 8009c6a:	701a      	strb	r2, [r3, #0]
 8009c6c:	4b21      	ldr	r3, [pc, #132]	; (8009cf4 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	2b0f      	cmp	r3, #15
 8009c72:	bf8c      	ite	hi
 8009c74:	2301      	movhi	r3, #1
 8009c76:	2300      	movls	r3, #0
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	f000 86ba 	beq.w	800a9f4 <_ZN7ESP826612Send_WifiCmdEv+0x1028>
	{
		Timerdelay=0;
 8009c80:	4b1c      	ldr	r3, [pc, #112]	; (8009cf4 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 8009c82:	2200      	movs	r2, #0
 8009c84:	701a      	strb	r2, [r3, #0]
		wifi_command=20;
 8009c86:	4b18      	ldr	r3, [pc, #96]	; (8009ce8 <_ZN7ESP826612Send_WifiCmdEv+0x31c>)
 8009c88:	2214      	movs	r2, #20
 8009c8a:	701a      	strb	r2, [r3, #0]
	}
	break;
 8009c8c:	f000 beb2 	b.w	800a9f4 <_ZN7ESP826612Send_WifiCmdEv+0x1028>
	case 14:
	NoOfdata_byte=4;
 8009c90:	4b17      	ldr	r3, [pc, #92]	; (8009cf0 <_ZN7ESP826612Send_WifiCmdEv+0x324>)
 8009c92:	2204      	movs	r2, #4
 8009c94:	801a      	strh	r2, [r3, #0]
	Rxseqdecoder=8;
 8009c96:	4b1a      	ldr	r3, [pc, #104]	; (8009d00 <_ZN7ESP826612Send_WifiCmdEv+0x334>)
 8009c98:	2208      	movs	r2, #8
 8009c9a:	701a      	strb	r2, [r3, #0]
	wifi_command=20;//default wait 30sec
 8009c9c:	4b12      	ldr	r3, [pc, #72]	; (8009ce8 <_ZN7ESP826612Send_WifiCmdEv+0x31c>)
 8009c9e:	2214      	movs	r2, #20
 8009ca0:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 8009ca2:	4b14      	ldr	r3, [pc, #80]	; (8009cf4 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDATok,NoOfdata_byte);
 8009ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009caa:	331e      	adds	r3, #30
 8009cac:	4a10      	ldr	r2, [pc, #64]	; (8009cf0 <_ZN7ESP826612Send_WifiCmdEv+0x324>)
 8009cae:	8812      	ldrh	r2, [r2, #0]
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	4812      	ldr	r0, [pc, #72]	; (8009cfc <_ZN7ESP826612Send_WifiCmdEv+0x330>)
 8009cb4:	f004 fa64 	bl	800e180 <HAL_UART_Transmit_IT>
	break;
 8009cb8:	f000 beb3 	b.w	800aa22 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	case 15:
	if(++Timerdelay >2)
 8009cbc:	4b0d      	ldr	r3, [pc, #52]	; (8009cf4 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	b2da      	uxtb	r2, r3
 8009cc4:	4b0b      	ldr	r3, [pc, #44]	; (8009cf4 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 8009cc6:	701a      	strb	r2, [r3, #0]
 8009cc8:	4b0a      	ldr	r3, [pc, #40]	; (8009cf4 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	2b02      	cmp	r3, #2
 8009cce:	bf8c      	ite	hi
 8009cd0:	2301      	movhi	r3, #1
 8009cd2:	2300      	movls	r3, #0
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	f000 868e 	beq.w	800a9f8 <_ZN7ESP826612Send_WifiCmdEv+0x102c>
	{
		Timerdelay=0;
 8009cdc:	4b05      	ldr	r3, [pc, #20]	; (8009cf4 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 8009cde:	2200      	movs	r2, #0
 8009ce0:	701a      	strb	r2, [r3, #0]
	}
	break;
 8009ce2:	f000 be89 	b.w	800a9f8 <_ZN7ESP826612Send_WifiCmdEv+0x102c>
 8009ce6:	bf00      	nop
 8009ce8:	20000698 	.word	0x20000698
 8009cec:	48000400 	.word	0x48000400
 8009cf0:	2000079a 	.word	0x2000079a
 8009cf4:	2000079c 	.word	0x2000079c
 8009cf8:	20000796 	.word	0x20000796
 8009cfc:	200002a0 	.word	0x200002a0
 8009d00:	20000797 	.word	0x20000797
	case 20:   //CWMODE		//hardrest sequce//1.0 for wifi reset
	NoOfdata_byte=13;
 8009d04:	4b8a      	ldr	r3, [pc, #552]	; (8009f30 <_ZN7ESP826612Send_WifiCmdEv+0x564>)
 8009d06:	220d      	movs	r2, #13
 8009d08:	801a      	strh	r2, [r3, #0]
	Rxseqdecoder=1;	  //add retry
 8009d0a:	4b8a      	ldr	r3, [pc, #552]	; (8009f34 <_ZN7ESP826612Send_WifiCmdEv+0x568>)
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 8009d10:	4b89      	ldr	r3, [pc, #548]	; (8009f38 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009d12:	2200      	movs	r2, #0
 8009d14:	701a      	strb	r2, [r3, #0]
	bufferptr=0;
 8009d16:	4b89      	ldr	r3, [pc, #548]	; (8009f3c <_ZN7ESP826612Send_WifiCmdEv+0x570>)
 8009d18:	2200      	movs	r2, #0
 8009d1a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDATCWMODE,NoOfdata_byte);
 8009d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1e:	3324      	adds	r3, #36	; 0x24
 8009d20:	4a83      	ldr	r2, [pc, #524]	; (8009f30 <_ZN7ESP826612Send_WifiCmdEv+0x564>)
 8009d22:	8812      	ldrh	r2, [r2, #0]
 8009d24:	4619      	mov	r1, r3
 8009d26:	4886      	ldr	r0, [pc, #536]	; (8009f40 <_ZN7ESP826612Send_WifiCmdEv+0x574>)
 8009d28:	f004 fa2a 	bl	800e180 <HAL_UART_Transmit_IT>
	Check_CWMODE_For_Hang = Check_CWMODE_For_Hang+1;
 8009d2c:	4b85      	ldr	r3, [pc, #532]	; (8009f44 <_ZN7ESP826612Send_WifiCmdEv+0x578>)
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	3301      	adds	r3, #1
 8009d32:	b2da      	uxtb	r2, r3
 8009d34:	4b83      	ldr	r3, [pc, #524]	; (8009f44 <_ZN7ESP826612Send_WifiCmdEv+0x578>)
 8009d36:	701a      	strb	r2, [r3, #0]
	wifi_command=21;
 8009d38:	4b83      	ldr	r3, [pc, #524]	; (8009f48 <_ZN7ESP826612Send_WifiCmdEv+0x57c>)
 8009d3a:	2215      	movs	r2, #21
 8009d3c:	701a      	strb	r2, [r3, #0]

	break;
 8009d3e:	f000 be70 	b.w	800aa22 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	case 21:	//waiting for Ok  && if above 30 seconds resend command
	if(++Timerdelay >10)
 8009d42:	4b7d      	ldr	r3, [pc, #500]	; (8009f38 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	3301      	adds	r3, #1
 8009d48:	b2da      	uxtb	r2, r3
 8009d4a:	4b7b      	ldr	r3, [pc, #492]	; (8009f38 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009d4c:	701a      	strb	r2, [r3, #0]
 8009d4e:	4b7a      	ldr	r3, [pc, #488]	; (8009f38 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	2b0a      	cmp	r3, #10
 8009d54:	bf8c      	ite	hi
 8009d56:	2301      	movhi	r3, #1
 8009d58:	2300      	movls	r3, #0
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	f000 864d 	beq.w	800a9fc <_ZN7ESP826612Send_WifiCmdEv+0x1030>
	{
		Timerdelay=0;
 8009d62:	4b75      	ldr	r3, [pc, #468]	; (8009f38 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009d64:	2200      	movs	r2, #0
 8009d66:	701a      	strb	r2, [r3, #0]
		if(5 ==  Check_CWMODE_For_Hang)
 8009d68:	4b76      	ldr	r3, [pc, #472]	; (8009f44 <_ZN7ESP826612Send_WifiCmdEv+0x578>)
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	2b05      	cmp	r3, #5
 8009d6e:	d107      	bne.n	8009d80 <_ZN7ESP826612Send_WifiCmdEv+0x3b4>
		{
			wifi_command=5;	 //Hardware reset
 8009d70:	4b75      	ldr	r3, [pc, #468]	; (8009f48 <_ZN7ESP826612Send_WifiCmdEv+0x57c>)
 8009d72:	2205      	movs	r2, #5
 8009d74:	701a      	strb	r2, [r3, #0]
			Check_CWMODE_For_Hang = 0;
 8009d76:	4b73      	ldr	r3, [pc, #460]	; (8009f44 <_ZN7ESP826612Send_WifiCmdEv+0x578>)
 8009d78:	2200      	movs	r2, #0
 8009d7a:	701a      	strb	r2, [r3, #0]
		else
		{
			wifi_command=10;
		}
	}
	break;
 8009d7c:	f000 be3e 	b.w	800a9fc <_ZN7ESP826612Send_WifiCmdEv+0x1030>
			wifi_command=10;
 8009d80:	4b71      	ldr	r3, [pc, #452]	; (8009f48 <_ZN7ESP826612Send_WifiCmdEv+0x57c>)
 8009d82:	220a      	movs	r2, #10
 8009d84:	701a      	strb	r2, [r3, #0]
	break;
 8009d86:	f000 be39 	b.w	800a9fc <_ZN7ESP826612Send_WifiCmdEv+0x1030>
	case 30:   //CWJAP	   //userid-9digit,psw 8digit  //userid-5digit,psw 8digit
	NoOfdata_byte=41;//32;
 8009d8a:	4b69      	ldr	r3, [pc, #420]	; (8009f30 <_ZN7ESP826612Send_WifiCmdEv+0x564>)
 8009d8c:	2229      	movs	r2, #41	; 0x29
 8009d8e:	801a      	strh	r2, [r3, #0]
	Rxseqdecoder=2;
 8009d90:	4b68      	ldr	r3, [pc, #416]	; (8009f34 <_ZN7ESP826612Send_WifiCmdEv+0x568>)
 8009d92:	2202      	movs	r2, #2
 8009d94:	701a      	strb	r2, [r3, #0]
	wifi_command=41;
 8009d96:	4b6c      	ldr	r3, [pc, #432]	; (8009f48 <_ZN7ESP826612Send_WifiCmdEv+0x57c>)
 8009d98:	2229      	movs	r2, #41	; 0x29
 8009d9a:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 8009d9c:	4b66      	ldr	r3, [pc, #408]	; (8009f38 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009d9e:	2200      	movs	r2, #0
 8009da0:	701a      	strb	r2, [r3, #0]
	bufferptr=0;
 8009da2:	4b66      	ldr	r3, [pc, #408]	; (8009f3c <_ZN7ESP826612Send_WifiCmdEv+0x570>)
 8009da4:	2200      	movs	r2, #0
 8009da6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDATCWJAPUsernamePsw,NoOfdata_byte);
 8009da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009daa:	3333      	adds	r3, #51	; 0x33
 8009dac:	4a60      	ldr	r2, [pc, #384]	; (8009f30 <_ZN7ESP826612Send_WifiCmdEv+0x564>)
 8009dae:	8812      	ldrh	r2, [r2, #0]
 8009db0:	4619      	mov	r1, r3
 8009db2:	4863      	ldr	r0, [pc, #396]	; (8009f40 <_ZN7ESP826612Send_WifiCmdEv+0x574>)
 8009db4:	f004 f9e4 	bl	800e180 <HAL_UART_Transmit_IT>
	break;		   //add retry
 8009db8:	f000 be33 	b.w	800aa22 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	case 41:	   //resend if o replay
	if(++Timerdelay >15)
 8009dbc:	4b5e      	ldr	r3, [pc, #376]	; (8009f38 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	3301      	adds	r3, #1
 8009dc2:	b2da      	uxtb	r2, r3
 8009dc4:	4b5c      	ldr	r3, [pc, #368]	; (8009f38 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009dc6:	701a      	strb	r2, [r3, #0]
 8009dc8:	4b5b      	ldr	r3, [pc, #364]	; (8009f38 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	2b0f      	cmp	r3, #15
 8009dce:	bf8c      	ite	hi
 8009dd0:	2301      	movhi	r3, #1
 8009dd2:	2300      	movls	r3, #0
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	f000 8612 	beq.w	800aa00 <_ZN7ESP826612Send_WifiCmdEv+0x1034>
	{
		Timerdelay=0;
 8009ddc:	4b56      	ldr	r3, [pc, #344]	; (8009f38 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009dde:	2200      	movs	r2, #0
 8009de0:	701a      	strb	r2, [r3, #0]
		wifi_command=10;	//41
 8009de2:	4b59      	ldr	r3, [pc, #356]	; (8009f48 <_ZN7ESP826612Send_WifiCmdEv+0x57c>)
 8009de4:	220a      	movs	r2, #10
 8009de6:	701a      	strb	r2, [r3, #0]
	}
	break;
 8009de8:	f000 be0a 	b.w	800aa00 <_ZN7ESP826612Send_WifiCmdEv+0x1034>
	case 49:
	if(++Timerdelay >8)
 8009dec:	4b52      	ldr	r3, [pc, #328]	; (8009f38 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	3301      	adds	r3, #1
 8009df2:	b2da      	uxtb	r2, r3
 8009df4:	4b50      	ldr	r3, [pc, #320]	; (8009f38 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009df6:	701a      	strb	r2, [r3, #0]
 8009df8:	4b4f      	ldr	r3, [pc, #316]	; (8009f38 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	2b08      	cmp	r3, #8
 8009dfe:	bf8c      	ite	hi
 8009e00:	2301      	movhi	r3, #1
 8009e02:	2300      	movls	r3, #0
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	f000 85fc 	beq.w	800aa04 <_ZN7ESP826612Send_WifiCmdEv+0x1038>
	{
		Timerdelay=0;
 8009e0c:	4b4a      	ldr	r3, [pc, #296]	; (8009f38 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009e0e:	2200      	movs	r2, #0
 8009e10:	701a      	strb	r2, [r3, #0]
		wifi_command=50;
 8009e12:	4b4d      	ldr	r3, [pc, #308]	; (8009f48 <_ZN7ESP826612Send_WifiCmdEv+0x57c>)
 8009e14:	2232      	movs	r2, #50	; 0x32
 8009e16:	701a      	strb	r2, [r3, #0]
	}
	break;
 8009e18:	f000 bdf4 	b.w	800aa04 <_ZN7ESP826612Send_WifiCmdEv+0x1038>
	case 50:   //CWJAP

	NoOfdata_byte=11;
 8009e1c:	4b44      	ldr	r3, [pc, #272]	; (8009f30 <_ZN7ESP826612Send_WifiCmdEv+0x564>)
 8009e1e:	220b      	movs	r2, #11
 8009e20:	801a      	strh	r2, [r3, #0]
	wifi_command=51;
 8009e22:	4b49      	ldr	r3, [pc, #292]	; (8009f48 <_ZN7ESP826612Send_WifiCmdEv+0x57c>)
 8009e24:	2233      	movs	r2, #51	; 0x33
 8009e26:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=3;
 8009e28:	4b42      	ldr	r3, [pc, #264]	; (8009f34 <_ZN7ESP826612Send_WifiCmdEv+0x568>)
 8009e2a:	2203      	movs	r2, #3
 8009e2c:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 8009e2e:	4b42      	ldr	r3, [pc, #264]	; (8009f38 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009e30:	2200      	movs	r2, #0
 8009e32:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDATCwjapRead,NoOfdata_byte);
 8009e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e36:	3360      	adds	r3, #96	; 0x60
 8009e38:	4a3d      	ldr	r2, [pc, #244]	; (8009f30 <_ZN7ESP826612Send_WifiCmdEv+0x564>)
 8009e3a:	8812      	ldrh	r2, [r2, #0]
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	4840      	ldr	r0, [pc, #256]	; (8009f40 <_ZN7ESP826612Send_WifiCmdEv+0x574>)
 8009e40:	f004 f99e 	bl	800e180 <HAL_UART_Transmit_IT>
	break;
 8009e44:	f000 bded 	b.w	800aa22 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	case 51:
	if(++Timerdelay >15)
 8009e48:	4b3b      	ldr	r3, [pc, #236]	; (8009f38 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	b2da      	uxtb	r2, r3
 8009e50:	4b39      	ldr	r3, [pc, #228]	; (8009f38 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009e52:	701a      	strb	r2, [r3, #0]
 8009e54:	4b38      	ldr	r3, [pc, #224]	; (8009f38 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	2b0f      	cmp	r3, #15
 8009e5a:	bf8c      	ite	hi
 8009e5c:	2301      	movhi	r3, #1
 8009e5e:	2300      	movls	r3, #0
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	f000 85d0 	beq.w	800aa08 <_ZN7ESP826612Send_WifiCmdEv+0x103c>
	{
		Timerdelay=0;
 8009e68:	4b33      	ldr	r3, [pc, #204]	; (8009f38 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	701a      	strb	r2, [r3, #0]
		wifi_command=10; //50
 8009e6e:	4b36      	ldr	r3, [pc, #216]	; (8009f48 <_ZN7ESP826612Send_WifiCmdEv+0x57c>)
 8009e70:	220a      	movs	r2, #10
 8009e72:	701a      	strb	r2, [r3, #0]
	}

	break;
 8009e74:	f000 bdc8 	b.w	800aa08 <_ZN7ESP826612Send_WifiCmdEv+0x103c>
	case 70:   //CIPMUX

	NoOfdata_byte=13;
 8009e78:	4b2d      	ldr	r3, [pc, #180]	; (8009f30 <_ZN7ESP826612Send_WifiCmdEv+0x564>)
 8009e7a:	220d      	movs	r2, #13
 8009e7c:	801a      	strh	r2, [r3, #0]
	wifi_command=71;
 8009e7e:	4b32      	ldr	r3, [pc, #200]	; (8009f48 <_ZN7ESP826612Send_WifiCmdEv+0x57c>)
 8009e80:	2247      	movs	r2, #71	; 0x47
 8009e82:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=4;
 8009e84:	4b2b      	ldr	r3, [pc, #172]	; (8009f34 <_ZN7ESP826612Send_WifiCmdEv+0x568>)
 8009e86:	2204      	movs	r2, #4
 8009e88:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 8009e8a:	4b2b      	ldr	r3, [pc, #172]	; (8009f38 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CmdATCipmuxWrite,NoOfdata_byte);
 8009e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e92:	336d      	adds	r3, #109	; 0x6d
 8009e94:	4a26      	ldr	r2, [pc, #152]	; (8009f30 <_ZN7ESP826612Send_WifiCmdEv+0x564>)
 8009e96:	8812      	ldrh	r2, [r2, #0]
 8009e98:	4619      	mov	r1, r3
 8009e9a:	4829      	ldr	r0, [pc, #164]	; (8009f40 <_ZN7ESP826612Send_WifiCmdEv+0x574>)
 8009e9c:	f004 f970 	bl	800e180 <HAL_UART_Transmit_IT>
	break;	  //2sec
 8009ea0:	f000 bdbf 	b.w	800aa22 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	case 71:
	if(++Timerdelay >15)
 8009ea4:	4b24      	ldr	r3, [pc, #144]	; (8009f38 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	b2da      	uxtb	r2, r3
 8009eac:	4b22      	ldr	r3, [pc, #136]	; (8009f38 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009eae:	701a      	strb	r2, [r3, #0]
 8009eb0:	4b21      	ldr	r3, [pc, #132]	; (8009f38 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	2b0f      	cmp	r3, #15
 8009eb6:	bf8c      	ite	hi
 8009eb8:	2301      	movhi	r3, #1
 8009eba:	2300      	movls	r3, #0
 8009ebc:	b2db      	uxtb	r3, r3
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f000 85a4 	beq.w	800aa0c <_ZN7ESP826612Send_WifiCmdEv+0x1040>
	{
		Timerdelay=0;
 8009ec4:	4b1c      	ldr	r3, [pc, #112]	; (8009f38 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	701a      	strb	r2, [r3, #0]
		wifi_command=10;   //70
 8009eca:	4b1f      	ldr	r3, [pc, #124]	; (8009f48 <_ZN7ESP826612Send_WifiCmdEv+0x57c>)
 8009ecc:	220a      	movs	r2, #10
 8009ece:	701a      	strb	r2, [r3, #0]
	}
	break;
 8009ed0:	f000 bd9c 	b.w	800aa0c <_ZN7ESP826612Send_WifiCmdEv+0x1040>
	case 80:
	NoOfdata_byte=49;//41;
 8009ed4:	4b16      	ldr	r3, [pc, #88]	; (8009f30 <_ZN7ESP826612Send_WifiCmdEv+0x564>)
 8009ed6:	2231      	movs	r2, #49	; 0x31
 8009ed8:	801a      	strh	r2, [r3, #0]
	wifi_command=81;
 8009eda:	4b1b      	ldr	r3, [pc, #108]	; (8009f48 <_ZN7ESP826612Send_WifiCmdEv+0x57c>)
 8009edc:	2251      	movs	r2, #81	; 0x51
 8009ede:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=5;
 8009ee0:	4b14      	ldr	r3, [pc, #80]	; (8009f34 <_ZN7ESP826612Send_WifiCmdEv+0x568>)
 8009ee2:	2205      	movs	r2, #5
 8009ee4:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 8009ee6:	4b14      	ldr	r3, [pc, #80]	; (8009f38 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009ee8:	2200      	movs	r2, #0
 8009eea:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CmdAtCipStartWrite,NoOfdata_byte);
 8009eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eee:	337c      	adds	r3, #124	; 0x7c
 8009ef0:	4a0f      	ldr	r2, [pc, #60]	; (8009f30 <_ZN7ESP826612Send_WifiCmdEv+0x564>)
 8009ef2:	8812      	ldrh	r2, [r2, #0]
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	4812      	ldr	r0, [pc, #72]	; (8009f40 <_ZN7ESP826612Send_WifiCmdEv+0x574>)
 8009ef8:	f004 f942 	bl	800e180 <HAL_UART_Transmit_IT>
	break;
 8009efc:	f000 bd91 	b.w	800aa22 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	case 81:					//5sec
	if(++Timerdelay >20)
 8009f00:	4b0d      	ldr	r3, [pc, #52]	; (8009f38 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	3301      	adds	r3, #1
 8009f06:	b2da      	uxtb	r2, r3
 8009f08:	4b0b      	ldr	r3, [pc, #44]	; (8009f38 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009f0a:	701a      	strb	r2, [r3, #0]
 8009f0c:	4b0a      	ldr	r3, [pc, #40]	; (8009f38 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	2b14      	cmp	r3, #20
 8009f12:	bf8c      	ite	hi
 8009f14:	2301      	movhi	r3, #1
 8009f16:	2300      	movls	r3, #0
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	f000 8578 	beq.w	800aa10 <_ZN7ESP826612Send_WifiCmdEv+0x1044>
	{
		Timerdelay=0;
 8009f20:	4b05      	ldr	r3, [pc, #20]	; (8009f38 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009f22:	2200      	movs	r2, #0
 8009f24:	701a      	strb	r2, [r3, #0]
		wifi_command=10;
 8009f26:	4b08      	ldr	r3, [pc, #32]	; (8009f48 <_ZN7ESP826612Send_WifiCmdEv+0x57c>)
 8009f28:	220a      	movs	r2, #10
 8009f2a:	701a      	strb	r2, [r3, #0]
	}
	break;
 8009f2c:	f000 bd70 	b.w	800aa10 <_ZN7ESP826612Send_WifiCmdEv+0x1044>
 8009f30:	2000079a 	.word	0x2000079a
 8009f34:	20000797 	.word	0x20000797
 8009f38:	2000079c 	.word	0x2000079c
 8009f3c:	20000796 	.word	0x20000796
 8009f40:	200002a0 	.word	0x200002a0
 8009f44:	20000798 	.word	0x20000798
 8009f48:	20000698 	.word	0x20000698
	case 90:   //CIPSEND
	NoOfdata_byte	= 18;
 8009f4c:	4bb5      	ldr	r3, [pc, #724]	; (800a224 <_ZN7ESP826612Send_WifiCmdEv+0x858>)
 8009f4e:	2212      	movs	r2, #18
 8009f50:	801a      	strh	r2, [r3, #0]
	//lenOfURl = sprintf(PostUrl_CharFormat,"GET /isc1-lab.acceedo.in:9009/logs?mac=01&t=373&h=972&W=01&U=01&x=0\r\nHOST:usm2-ht.acceedo.in:9009\r\n\r\n");
	r_set_duration_seq1 = (Rise_Sequence1_Minute%10)+((Rise_Sequence1_Minute/10)*10)+((Rise_Sequence1_Hour%10)*100)+((Rise_Sequence1_Hour/10)*1000);
 8009f52:	4bb5      	ldr	r3, [pc, #724]	; (800a228 <_ZN7ESP826612Send_WifiCmdEv+0x85c>)
 8009f54:	781a      	ldrb	r2, [r3, #0]
 8009f56:	4bb5      	ldr	r3, [pc, #724]	; (800a22c <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 8009f58:	fba3 1302 	umull	r1, r3, r3, r2
 8009f5c:	08d9      	lsrs	r1, r3, #3
 8009f5e:	460b      	mov	r3, r1
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	440b      	add	r3, r1
 8009f64:	005b      	lsls	r3, r3, #1
 8009f66:	1ad3      	subs	r3, r2, r3
 8009f68:	b2db      	uxtb	r3, r3
 8009f6a:	b298      	uxth	r0, r3
 8009f6c:	4bb0      	ldr	r3, [pc, #704]	; (800a230 <_ZN7ESP826612Send_WifiCmdEv+0x864>)
 8009f6e:	781a      	ldrb	r2, [r3, #0]
 8009f70:	4bae      	ldr	r3, [pc, #696]	; (800a22c <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 8009f72:	fba3 1302 	umull	r1, r3, r3, r2
 8009f76:	08d9      	lsrs	r1, r3, #3
 8009f78:	460b      	mov	r3, r1
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	440b      	add	r3, r1
 8009f7e:	005b      	lsls	r3, r3, #1
 8009f80:	1ad3      	subs	r3, r2, r3
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	461a      	mov	r2, r3
 8009f88:	0092      	lsls	r2, r2, #2
 8009f8a:	4413      	add	r3, r2
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	0091      	lsls	r1, r2, #2
 8009f90:	461a      	mov	r2, r3
 8009f92:	460b      	mov	r3, r1
 8009f94:	4413      	add	r3, r2
 8009f96:	009b      	lsls	r3, r3, #2
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	4ba3      	ldr	r3, [pc, #652]	; (800a228 <_ZN7ESP826612Send_WifiCmdEv+0x85c>)
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	49a3      	ldr	r1, [pc, #652]	; (800a22c <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 8009fa0:	fba1 1303 	umull	r1, r3, r1, r3
 8009fa4:	08db      	lsrs	r3, r3, #3
 8009fa6:	b2db      	uxtb	r3, r3
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	4619      	mov	r1, r3
 8009fac:	0089      	lsls	r1, r1, #2
 8009fae:	440b      	add	r3, r1
 8009fb0:	005b      	lsls	r3, r3, #1
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	4413      	add	r3, r2
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	4403      	add	r3, r0
 8009fba:	b29a      	uxth	r2, r3
 8009fbc:	4b9c      	ldr	r3, [pc, #624]	; (800a230 <_ZN7ESP826612Send_WifiCmdEv+0x864>)
 8009fbe:	781b      	ldrb	r3, [r3, #0]
 8009fc0:	499a      	ldr	r1, [pc, #616]	; (800a22c <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 8009fc2:	fba1 1303 	umull	r1, r3, r1, r3
 8009fc6:	08db      	lsrs	r3, r3, #3
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	4619      	mov	r1, r3
 8009fce:	0149      	lsls	r1, r1, #5
 8009fd0:	1ac9      	subs	r1, r1, r3
 8009fd2:	0089      	lsls	r1, r1, #2
 8009fd4:	440b      	add	r3, r1
 8009fd6:	00db      	lsls	r3, r3, #3
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	4413      	add	r3, r2
 8009fdc:	b29a      	uxth	r2, r3
 8009fde:	4b95      	ldr	r3, [pc, #596]	; (800a234 <_ZN7ESP826612Send_WifiCmdEv+0x868>)
 8009fe0:	801a      	strh	r2, [r3, #0]
	set_duration_seq1 = (H_Timer01MinValue%10)+((H_Timer01MinValue/10)*10)+((H_Timer01HrValue%10)*100)+((H_Timer01HrValue/10)*1000);
 8009fe2:	4b95      	ldr	r3, [pc, #596]	; (800a238 <_ZN7ESP826612Send_WifiCmdEv+0x86c>)
 8009fe4:	781a      	ldrb	r2, [r3, #0]
 8009fe6:	4b91      	ldr	r3, [pc, #580]	; (800a22c <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 8009fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8009fec:	08d9      	lsrs	r1, r3, #3
 8009fee:	460b      	mov	r3, r1
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	440b      	add	r3, r1
 8009ff4:	005b      	lsls	r3, r3, #1
 8009ff6:	1ad3      	subs	r3, r2, r3
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	b298      	uxth	r0, r3
 8009ffc:	4b8f      	ldr	r3, [pc, #572]	; (800a23c <_ZN7ESP826612Send_WifiCmdEv+0x870>)
 8009ffe:	781a      	ldrb	r2, [r3, #0]
 800a000:	4b8a      	ldr	r3, [pc, #552]	; (800a22c <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 800a002:	fba3 1302 	umull	r1, r3, r3, r2
 800a006:	08d9      	lsrs	r1, r3, #3
 800a008:	460b      	mov	r3, r1
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	440b      	add	r3, r1
 800a00e:	005b      	lsls	r3, r3, #1
 800a010:	1ad3      	subs	r3, r2, r3
 800a012:	b2db      	uxtb	r3, r3
 800a014:	b29b      	uxth	r3, r3
 800a016:	461a      	mov	r2, r3
 800a018:	0092      	lsls	r2, r2, #2
 800a01a:	4413      	add	r3, r2
 800a01c:	461a      	mov	r2, r3
 800a01e:	0091      	lsls	r1, r2, #2
 800a020:	461a      	mov	r2, r3
 800a022:	460b      	mov	r3, r1
 800a024:	4413      	add	r3, r2
 800a026:	009b      	lsls	r3, r3, #2
 800a028:	b29a      	uxth	r2, r3
 800a02a:	4b83      	ldr	r3, [pc, #524]	; (800a238 <_ZN7ESP826612Send_WifiCmdEv+0x86c>)
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	497f      	ldr	r1, [pc, #508]	; (800a22c <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 800a030:	fba1 1303 	umull	r1, r3, r1, r3
 800a034:	08db      	lsrs	r3, r3, #3
 800a036:	b2db      	uxtb	r3, r3
 800a038:	b29b      	uxth	r3, r3
 800a03a:	4619      	mov	r1, r3
 800a03c:	0089      	lsls	r1, r1, #2
 800a03e:	440b      	add	r3, r1
 800a040:	005b      	lsls	r3, r3, #1
 800a042:	b29b      	uxth	r3, r3
 800a044:	4413      	add	r3, r2
 800a046:	b29b      	uxth	r3, r3
 800a048:	4403      	add	r3, r0
 800a04a:	b29a      	uxth	r2, r3
 800a04c:	4b7b      	ldr	r3, [pc, #492]	; (800a23c <_ZN7ESP826612Send_WifiCmdEv+0x870>)
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	4976      	ldr	r1, [pc, #472]	; (800a22c <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 800a052:	fba1 1303 	umull	r1, r3, r1, r3
 800a056:	08db      	lsrs	r3, r3, #3
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	4619      	mov	r1, r3
 800a05e:	0149      	lsls	r1, r1, #5
 800a060:	1ac9      	subs	r1, r1, r3
 800a062:	0089      	lsls	r1, r1, #2
 800a064:	440b      	add	r3, r1
 800a066:	00db      	lsls	r3, r3, #3
 800a068:	b29b      	uxth	r3, r3
 800a06a:	4413      	add	r3, r2
 800a06c:	b29a      	uxth	r2, r3
 800a06e:	4b74      	ldr	r3, [pc, #464]	; (800a240 <_ZN7ESP826612Send_WifiCmdEv+0x874>)
 800a070:	801a      	strh	r2, [r3, #0]
	r_set_duration_seq2 = (Rise_Sequence2_Minute%10)+((Rise_Sequence2_Minute/10)*10)+((R_Sequence2_hour_http%10)*100)+((R_Sequence2_hour_http/10)*1000);
 800a072:	4b74      	ldr	r3, [pc, #464]	; (800a244 <_ZN7ESP826612Send_WifiCmdEv+0x878>)
 800a074:	781a      	ldrb	r2, [r3, #0]
 800a076:	4b6d      	ldr	r3, [pc, #436]	; (800a22c <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 800a078:	fba3 1302 	umull	r1, r3, r3, r2
 800a07c:	08d9      	lsrs	r1, r3, #3
 800a07e:	460b      	mov	r3, r1
 800a080:	009b      	lsls	r3, r3, #2
 800a082:	440b      	add	r3, r1
 800a084:	005b      	lsls	r3, r3, #1
 800a086:	1ad3      	subs	r3, r2, r3
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	b298      	uxth	r0, r3
 800a08c:	4b6e      	ldr	r3, [pc, #440]	; (800a248 <_ZN7ESP826612Send_WifiCmdEv+0x87c>)
 800a08e:	781a      	ldrb	r2, [r3, #0]
 800a090:	4b66      	ldr	r3, [pc, #408]	; (800a22c <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 800a092:	fba3 1302 	umull	r1, r3, r3, r2
 800a096:	08d9      	lsrs	r1, r3, #3
 800a098:	460b      	mov	r3, r1
 800a09a:	009b      	lsls	r3, r3, #2
 800a09c:	440b      	add	r3, r1
 800a09e:	005b      	lsls	r3, r3, #1
 800a0a0:	1ad3      	subs	r3, r2, r3
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	b29b      	uxth	r3, r3
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	0092      	lsls	r2, r2, #2
 800a0aa:	4413      	add	r3, r2
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	0091      	lsls	r1, r2, #2
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	4413      	add	r3, r2
 800a0b6:	009b      	lsls	r3, r3, #2
 800a0b8:	b29a      	uxth	r2, r3
 800a0ba:	4b62      	ldr	r3, [pc, #392]	; (800a244 <_ZN7ESP826612Send_WifiCmdEv+0x878>)
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	495b      	ldr	r1, [pc, #364]	; (800a22c <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 800a0c0:	fba1 1303 	umull	r1, r3, r1, r3
 800a0c4:	08db      	lsrs	r3, r3, #3
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	0089      	lsls	r1, r1, #2
 800a0ce:	440b      	add	r3, r1
 800a0d0:	005b      	lsls	r3, r3, #1
 800a0d2:	b29b      	uxth	r3, r3
 800a0d4:	4413      	add	r3, r2
 800a0d6:	b29b      	uxth	r3, r3
 800a0d8:	4403      	add	r3, r0
 800a0da:	b29a      	uxth	r2, r3
 800a0dc:	4b5a      	ldr	r3, [pc, #360]	; (800a248 <_ZN7ESP826612Send_WifiCmdEv+0x87c>)
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	4952      	ldr	r1, [pc, #328]	; (800a22c <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 800a0e2:	fba1 1303 	umull	r1, r3, r1, r3
 800a0e6:	08db      	lsrs	r3, r3, #3
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	b29b      	uxth	r3, r3
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	0149      	lsls	r1, r1, #5
 800a0f0:	1ac9      	subs	r1, r1, r3
 800a0f2:	0089      	lsls	r1, r1, #2
 800a0f4:	440b      	add	r3, r1
 800a0f6:	00db      	lsls	r3, r3, #3
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	4413      	add	r3, r2
 800a0fc:	b29a      	uxth	r2, r3
 800a0fe:	4b53      	ldr	r3, [pc, #332]	; (800a24c <_ZN7ESP826612Send_WifiCmdEv+0x880>)
 800a100:	801a      	strh	r2, [r3, #0]
	set_duration_seq2 = (H_Timer02MinValue%10)+((H_Timer02MinValue/10)*10)+((H_Timer02HrValue%10)*100)+((H_Timer02HrValue/10)*1000);
 800a102:	4b53      	ldr	r3, [pc, #332]	; (800a250 <_ZN7ESP826612Send_WifiCmdEv+0x884>)
 800a104:	781a      	ldrb	r2, [r3, #0]
 800a106:	4b49      	ldr	r3, [pc, #292]	; (800a22c <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 800a108:	fba3 1302 	umull	r1, r3, r3, r2
 800a10c:	08d9      	lsrs	r1, r3, #3
 800a10e:	460b      	mov	r3, r1
 800a110:	009b      	lsls	r3, r3, #2
 800a112:	440b      	add	r3, r1
 800a114:	005b      	lsls	r3, r3, #1
 800a116:	1ad3      	subs	r3, r2, r3
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	b298      	uxth	r0, r3
 800a11c:	4b4d      	ldr	r3, [pc, #308]	; (800a254 <_ZN7ESP826612Send_WifiCmdEv+0x888>)
 800a11e:	781a      	ldrb	r2, [r3, #0]
 800a120:	4b42      	ldr	r3, [pc, #264]	; (800a22c <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 800a122:	fba3 1302 	umull	r1, r3, r3, r2
 800a126:	08d9      	lsrs	r1, r3, #3
 800a128:	460b      	mov	r3, r1
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	440b      	add	r3, r1
 800a12e:	005b      	lsls	r3, r3, #1
 800a130:	1ad3      	subs	r3, r2, r3
 800a132:	b2db      	uxtb	r3, r3
 800a134:	b29b      	uxth	r3, r3
 800a136:	461a      	mov	r2, r3
 800a138:	0092      	lsls	r2, r2, #2
 800a13a:	4413      	add	r3, r2
 800a13c:	461a      	mov	r2, r3
 800a13e:	0091      	lsls	r1, r2, #2
 800a140:	461a      	mov	r2, r3
 800a142:	460b      	mov	r3, r1
 800a144:	4413      	add	r3, r2
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	b29a      	uxth	r2, r3
 800a14a:	4b41      	ldr	r3, [pc, #260]	; (800a250 <_ZN7ESP826612Send_WifiCmdEv+0x884>)
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	4937      	ldr	r1, [pc, #220]	; (800a22c <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 800a150:	fba1 1303 	umull	r1, r3, r1, r3
 800a154:	08db      	lsrs	r3, r3, #3
 800a156:	b2db      	uxtb	r3, r3
 800a158:	b29b      	uxth	r3, r3
 800a15a:	4619      	mov	r1, r3
 800a15c:	0089      	lsls	r1, r1, #2
 800a15e:	440b      	add	r3, r1
 800a160:	005b      	lsls	r3, r3, #1
 800a162:	b29b      	uxth	r3, r3
 800a164:	4413      	add	r3, r2
 800a166:	b29b      	uxth	r3, r3
 800a168:	4403      	add	r3, r0
 800a16a:	b29a      	uxth	r2, r3
 800a16c:	4b39      	ldr	r3, [pc, #228]	; (800a254 <_ZN7ESP826612Send_WifiCmdEv+0x888>)
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	492e      	ldr	r1, [pc, #184]	; (800a22c <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 800a172:	fba1 1303 	umull	r1, r3, r1, r3
 800a176:	08db      	lsrs	r3, r3, #3
 800a178:	b2db      	uxtb	r3, r3
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	4619      	mov	r1, r3
 800a17e:	0149      	lsls	r1, r1, #5
 800a180:	1ac9      	subs	r1, r1, r3
 800a182:	0089      	lsls	r1, r1, #2
 800a184:	440b      	add	r3, r1
 800a186:	00db      	lsls	r3, r3, #3
 800a188:	b29b      	uxth	r3, r3
 800a18a:	4413      	add	r3, r2
 800a18c:	b29a      	uxth	r2, r3
 800a18e:	4b32      	ldr	r3, [pc, #200]	; (800a258 <_ZN7ESP826612Send_WifiCmdEv+0x88c>)
 800a190:	801a      	strh	r2, [r3, #0]
	remaining_duration_seq1 =(seq1_remaining_time_min%10)+((seq1_remaining_time_min/10)*10)+((seq1_remaining_time_Hr%10)*100)+((seq1_remaining_time_Hr/10)*1000);
 800a192:	4b32      	ldr	r3, [pc, #200]	; (800a25c <_ZN7ESP826612Send_WifiCmdEv+0x890>)
 800a194:	781a      	ldrb	r2, [r3, #0]
 800a196:	4b25      	ldr	r3, [pc, #148]	; (800a22c <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 800a198:	fba3 1302 	umull	r1, r3, r3, r2
 800a19c:	08d9      	lsrs	r1, r3, #3
 800a19e:	460b      	mov	r3, r1
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	440b      	add	r3, r1
 800a1a4:	005b      	lsls	r3, r3, #1
 800a1a6:	1ad3      	subs	r3, r2, r3
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	b298      	uxth	r0, r3
 800a1ac:	4b2c      	ldr	r3, [pc, #176]	; (800a260 <_ZN7ESP826612Send_WifiCmdEv+0x894>)
 800a1ae:	781a      	ldrb	r2, [r3, #0]
 800a1b0:	4b1e      	ldr	r3, [pc, #120]	; (800a22c <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 800a1b2:	fba3 1302 	umull	r1, r3, r3, r2
 800a1b6:	08d9      	lsrs	r1, r3, #3
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	440b      	add	r3, r1
 800a1be:	005b      	lsls	r3, r3, #1
 800a1c0:	1ad3      	subs	r3, r2, r3
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	0092      	lsls	r2, r2, #2
 800a1ca:	4413      	add	r3, r2
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	0091      	lsls	r1, r2, #2
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	4413      	add	r3, r2
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	b29a      	uxth	r2, r3
 800a1da:	4b20      	ldr	r3, [pc, #128]	; (800a25c <_ZN7ESP826612Send_WifiCmdEv+0x890>)
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	4913      	ldr	r1, [pc, #76]	; (800a22c <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 800a1e0:	fba1 1303 	umull	r1, r3, r1, r3
 800a1e4:	08db      	lsrs	r3, r3, #3
 800a1e6:	b2db      	uxtb	r3, r3
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	0089      	lsls	r1, r1, #2
 800a1ee:	440b      	add	r3, r1
 800a1f0:	005b      	lsls	r3, r3, #1
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	4413      	add	r3, r2
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	4403      	add	r3, r0
 800a1fa:	b29a      	uxth	r2, r3
 800a1fc:	4b18      	ldr	r3, [pc, #96]	; (800a260 <_ZN7ESP826612Send_WifiCmdEv+0x894>)
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	490a      	ldr	r1, [pc, #40]	; (800a22c <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 800a202:	fba1 1303 	umull	r1, r3, r1, r3
 800a206:	08db      	lsrs	r3, r3, #3
 800a208:	b2db      	uxtb	r3, r3
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	4619      	mov	r1, r3
 800a20e:	0149      	lsls	r1, r1, #5
 800a210:	1ac9      	subs	r1, r1, r3
 800a212:	0089      	lsls	r1, r1, #2
 800a214:	440b      	add	r3, r1
 800a216:	00db      	lsls	r3, r3, #3
 800a218:	b29b      	uxth	r3, r3
 800a21a:	4413      	add	r3, r2
 800a21c:	b29a      	uxth	r2, r3
 800a21e:	4b11      	ldr	r3, [pc, #68]	; (800a264 <_ZN7ESP826612Send_WifiCmdEv+0x898>)
 800a220:	801a      	strh	r2, [r3, #0]
 800a222:	e021      	b.n	800a268 <_ZN7ESP826612Send_WifiCmdEv+0x89c>
 800a224:	2000079a 	.word	0x2000079a
 800a228:	20000635 	.word	0x20000635
 800a22c:	cccccccd 	.word	0xcccccccd
 800a230:	20000634 	.word	0x20000634
 800a234:	200007a2 	.word	0x200007a2
 800a238:	20000629 	.word	0x20000629
 800a23c:	20000628 	.word	0x20000628
 800a240:	200007a4 	.word	0x200007a4
 800a244:	20000637 	.word	0x20000637
 800a248:	200000ea 	.word	0x200000ea
 800a24c:	200007a6 	.word	0x200007a6
 800a250:	2000062b 	.word	0x2000062b
 800a254:	2000062a 	.word	0x2000062a
 800a258:	200007a8 	.word	0x200007a8
 800a25c:	20000107 	.word	0x20000107
 800a260:	20000106 	.word	0x20000106
 800a264:	200007aa 	.word	0x200007aa
	remaining_duration_seq2 =(seq2_remaining_time_min%10)+((seq2_remaining_time_min/10)*10)+((seq2_remaining_time_Hr%10)*100)+((seq2_remaining_time_Hr/10)*1000);
 800a268:	4b72      	ldr	r3, [pc, #456]	; (800a434 <_ZN7ESP826612Send_WifiCmdEv+0xa68>)
 800a26a:	781a      	ldrb	r2, [r3, #0]
 800a26c:	4b72      	ldr	r3, [pc, #456]	; (800a438 <_ZN7ESP826612Send_WifiCmdEv+0xa6c>)
 800a26e:	fba3 1302 	umull	r1, r3, r3, r2
 800a272:	08d9      	lsrs	r1, r3, #3
 800a274:	460b      	mov	r3, r1
 800a276:	009b      	lsls	r3, r3, #2
 800a278:	440b      	add	r3, r1
 800a27a:	005b      	lsls	r3, r3, #1
 800a27c:	1ad3      	subs	r3, r2, r3
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	b298      	uxth	r0, r3
 800a282:	4b6e      	ldr	r3, [pc, #440]	; (800a43c <_ZN7ESP826612Send_WifiCmdEv+0xa70>)
 800a284:	781a      	ldrb	r2, [r3, #0]
 800a286:	4b6c      	ldr	r3, [pc, #432]	; (800a438 <_ZN7ESP826612Send_WifiCmdEv+0xa6c>)
 800a288:	fba3 1302 	umull	r1, r3, r3, r2
 800a28c:	08d9      	lsrs	r1, r3, #3
 800a28e:	460b      	mov	r3, r1
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	440b      	add	r3, r1
 800a294:	005b      	lsls	r3, r3, #1
 800a296:	1ad3      	subs	r3, r2, r3
 800a298:	b2db      	uxtb	r3, r3
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	461a      	mov	r2, r3
 800a29e:	0092      	lsls	r2, r2, #2
 800a2a0:	4413      	add	r3, r2
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	0091      	lsls	r1, r2, #2
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	4413      	add	r3, r2
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	b29a      	uxth	r2, r3
 800a2b0:	4b60      	ldr	r3, [pc, #384]	; (800a434 <_ZN7ESP826612Send_WifiCmdEv+0xa68>)
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	4960      	ldr	r1, [pc, #384]	; (800a438 <_ZN7ESP826612Send_WifiCmdEv+0xa6c>)
 800a2b6:	fba1 1303 	umull	r1, r3, r1, r3
 800a2ba:	08db      	lsrs	r3, r3, #3
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	0089      	lsls	r1, r1, #2
 800a2c4:	440b      	add	r3, r1
 800a2c6:	005b      	lsls	r3, r3, #1
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	4413      	add	r3, r2
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	4403      	add	r3, r0
 800a2d0:	b29a      	uxth	r2, r3
 800a2d2:	4b5a      	ldr	r3, [pc, #360]	; (800a43c <_ZN7ESP826612Send_WifiCmdEv+0xa70>)
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	4958      	ldr	r1, [pc, #352]	; (800a438 <_ZN7ESP826612Send_WifiCmdEv+0xa6c>)
 800a2d8:	fba1 1303 	umull	r1, r3, r1, r3
 800a2dc:	08db      	lsrs	r3, r3, #3
 800a2de:	b2db      	uxtb	r3, r3
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	4619      	mov	r1, r3
 800a2e4:	0149      	lsls	r1, r1, #5
 800a2e6:	1ac9      	subs	r1, r1, r3
 800a2e8:	0089      	lsls	r1, r1, #2
 800a2ea:	440b      	add	r3, r1
 800a2ec:	00db      	lsls	r3, r3, #3
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	4413      	add	r3, r2
 800a2f2:	b29a      	uxth	r2, r3
 800a2f4:	4b52      	ldr	r3, [pc, #328]	; (800a440 <_ZN7ESP826612Send_WifiCmdEv+0xa74>)
 800a2f6:	801a      	strh	r2, [r3, #0]
	lenOfURl = sprintf(PostUrl_CharFormat,"GET /set_temp?u=4&p=%d&tm=%d&tl=%d&th=%d&hr=%d&"
 800a2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fa:	f103 00d6 	add.w	r0, r3, #214	; 0xd6
 800a2fe:	4b51      	ldr	r3, [pc, #324]	; (800a444 <_ZN7ESP826612Send_WifiCmdEv+0xa78>)
 800a300:	881b      	ldrh	r3, [r3, #0]
 800a302:	469c      	mov	ip, r3
 800a304:	4b50      	ldr	r3, [pc, #320]	; (800a448 <_ZN7ESP826612Send_WifiCmdEv+0xa7c>)
 800a306:	881b      	ldrh	r3, [r3, #0]
 800a308:	469e      	mov	lr, r3
 800a30a:	4b50      	ldr	r3, [pc, #320]	; (800a44c <_ZN7ESP826612Send_WifiCmdEv+0xa80>)
 800a30c:	881b      	ldrh	r3, [r3, #0]
 800a30e:	461e      	mov	r6, r3
 800a310:	4b4f      	ldr	r3, [pc, #316]	; (800a450 <_ZN7ESP826612Send_WifiCmdEv+0xa84>)
 800a312:	881b      	ldrh	r3, [r3, #0]
 800a314:	623b      	str	r3, [r7, #32]
 800a316:	4b4f      	ldr	r3, [pc, #316]	; (800a454 <_ZN7ESP826612Send_WifiCmdEv+0xa88>)
 800a318:	881b      	ldrh	r3, [r3, #0]
 800a31a:	61fb      	str	r3, [r7, #28]
 800a31c:	4b4e      	ldr	r3, [pc, #312]	; (800a458 <_ZN7ESP826612Send_WifiCmdEv+0xa8c>)
 800a31e:	881b      	ldrh	r3, [r3, #0]
 800a320:	61bb      	str	r3, [r7, #24]
 800a322:	4b4e      	ldr	r3, [pc, #312]	; (800a45c <_ZN7ESP826612Send_WifiCmdEv+0xa90>)
 800a324:	881b      	ldrh	r3, [r3, #0]
 800a326:	617b      	str	r3, [r7, #20]
 800a328:	4b4d      	ldr	r3, [pc, #308]	; (800a460 <_ZN7ESP826612Send_WifiCmdEv+0xa94>)
 800a32a:	881b      	ldrh	r3, [r3, #0]
 800a32c:	613b      	str	r3, [r7, #16]
 800a32e:	4b4d      	ldr	r3, [pc, #308]	; (800a464 <_ZN7ESP826612Send_WifiCmdEv+0xa98>)
 800a330:	881b      	ldrh	r3, [r3, #0]
 800a332:	60fb      	str	r3, [r7, #12]
 800a334:	4b4c      	ldr	r3, [pc, #304]	; (800a468 <_ZN7ESP826612Send_WifiCmdEv+0xa9c>)
 800a336:	881b      	ldrh	r3, [r3, #0]
 800a338:	60bb      	str	r3, [r7, #8]
 800a33a:	4b4c      	ldr	r3, [pc, #304]	; (800a46c <_ZN7ESP826612Send_WifiCmdEv+0xaa0>)
 800a33c:	881b      	ldrh	r3, [r3, #0]
 800a33e:	607b      	str	r3, [r7, #4]
 800a340:	4b4b      	ldr	r3, [pc, #300]	; (800a470 <_ZN7ESP826612Send_WifiCmdEv+0xaa4>)
 800a342:	881b      	ldrh	r3, [r3, #0]
 800a344:	603b      	str	r3, [r7, #0]
 800a346:	4b4b      	ldr	r3, [pc, #300]	; (800a474 <_ZN7ESP826612Send_WifiCmdEv+0xaa8>)
 800a348:	881b      	ldrh	r3, [r3, #0]
 800a34a:	461d      	mov	r5, r3
 800a34c:	4b3c      	ldr	r3, [pc, #240]	; (800a440 <_ZN7ESP826612Send_WifiCmdEv+0xa74>)
 800a34e:	881b      	ldrh	r3, [r3, #0]
 800a350:	461c      	mov	r4, r3
 800a352:	4b49      	ldr	r3, [pc, #292]	; (800a478 <_ZN7ESP826612Send_WifiCmdEv+0xaac>)
 800a354:	881b      	ldrh	r3, [r3, #0]
 800a356:	4619      	mov	r1, r3
 800a358:	4b48      	ldr	r3, [pc, #288]	; (800a47c <_ZN7ESP826612Send_WifiCmdEv+0xab0>)
 800a35a:	881b      	ldrh	r3, [r3, #0]
 800a35c:	461a      	mov	r2, r3
 800a35e:	4b48      	ldr	r3, [pc, #288]	; (800a480 <_ZN7ESP826612Send_WifiCmdEv+0xab4>)
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	9311      	str	r3, [sp, #68]	; 0x44
 800a364:	2301      	movs	r3, #1
 800a366:	9310      	str	r3, [sp, #64]	; 0x40
 800a368:	2300      	movs	r3, #0
 800a36a:	930f      	str	r3, [sp, #60]	; 0x3c
 800a36c:	920e      	str	r2, [sp, #56]	; 0x38
 800a36e:	2301      	movs	r3, #1
 800a370:	930d      	str	r3, [sp, #52]	; 0x34
 800a372:	910c      	str	r1, [sp, #48]	; 0x30
 800a374:	940b      	str	r4, [sp, #44]	; 0x2c
 800a376:	950a      	str	r5, [sp, #40]	; 0x28
 800a378:	683a      	ldr	r2, [r7, #0]
 800a37a:	9209      	str	r2, [sp, #36]	; 0x24
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	9208      	str	r2, [sp, #32]
 800a380:	68ba      	ldr	r2, [r7, #8]
 800a382:	9207      	str	r2, [sp, #28]
 800a384:	68fa      	ldr	r2, [r7, #12]
 800a386:	9206      	str	r2, [sp, #24]
 800a388:	693a      	ldr	r2, [r7, #16]
 800a38a:	9205      	str	r2, [sp, #20]
 800a38c:	697a      	ldr	r2, [r7, #20]
 800a38e:	9204      	str	r2, [sp, #16]
 800a390:	69ba      	ldr	r2, [r7, #24]
 800a392:	9203      	str	r2, [sp, #12]
 800a394:	69fa      	ldr	r2, [r7, #28]
 800a396:	9202      	str	r2, [sp, #8]
 800a398:	6a3b      	ldr	r3, [r7, #32]
 800a39a:	9301      	str	r3, [sp, #4]
 800a39c:	9600      	str	r6, [sp, #0]
 800a39e:	4673      	mov	r3, lr
 800a3a0:	4662      	mov	r2, ip
 800a3a2:	4938      	ldr	r1, [pc, #224]	; (800a484 <_ZN7ESP826612Send_WifiCmdEv+0xab8>)
 800a3a4:	f005 fb82 	bl	800faac <siprintf>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	b29a      	uxth	r2, r3
 800a3ac:	4b36      	ldr	r3, [pc, #216]	; (800a488 <_ZN7ESP826612Send_WifiCmdEv+0xabc>)
 800a3ae:	801a      	strh	r2, [r3, #0]
				"&bc=%d&yc=%d&k=%d&x=%02d\r\nHost:usm4-ht.acceedo.in:9012\r\n\r\n",
				ProcessId_Value,act_temperature_c1,act_temperature_c2,act_temperature_c3,
				Rise_Sequence1_temp,Seq1temperature,Rise_Sequence2_temp,Seq2temperature,r_set_duration_seq1,set_duration_seq1,r_set_duration_seq2,set_duration_seq2,
				remaining_duration_seq1,remaining_duration_seq2,act_temperature_c4,
				1,water_temperature,0,1,status_to_server);
	sprintf(SendData_charFormat,"AT+CIPSEND=1,%d\r\n",lenOfURl);
 800a3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b2:	33c2      	adds	r3, #194	; 0xc2
 800a3b4:	4a34      	ldr	r2, [pc, #208]	; (800a488 <_ZN7ESP826612Send_WifiCmdEv+0xabc>)
 800a3b6:	8812      	ldrh	r2, [r2, #0]
 800a3b8:	4934      	ldr	r1, [pc, #208]	; (800a48c <_ZN7ESP826612Send_WifiCmdEv+0xac0>)
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f005 fb76 	bl	800faac <siprintf>
	memcpy(SendData_uintFormat,SendData_charFormat,NoOfdata_byte);
 800a3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c2:	f103 00ae 	add.w	r0, r3, #174	; 0xae
 800a3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c8:	33c2      	adds	r3, #194	; 0xc2
 800a3ca:	4a31      	ldr	r2, [pc, #196]	; (800a490 <_ZN7ESP826612Send_WifiCmdEv+0xac4>)
 800a3cc:	8812      	ldrh	r2, [r2, #0]
 800a3ce:	4619      	mov	r1, r3
 800a3d0:	f005 fa66 	bl	800f8a0 <memcpy>
	HAL_UART_Transmit_IT(&hlpuart1,SendData_uintFormat,NoOfdata_byte);
 800a3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d6:	33ae      	adds	r3, #174	; 0xae
 800a3d8:	4a2d      	ldr	r2, [pc, #180]	; (800a490 <_ZN7ESP826612Send_WifiCmdEv+0xac4>)
 800a3da:	8812      	ldrh	r2, [r2, #0]
 800a3dc:	4619      	mov	r1, r3
 800a3de:	482d      	ldr	r0, [pc, #180]	; (800a494 <_ZN7ESP826612Send_WifiCmdEv+0xac8>)
 800a3e0:	f003 fece 	bl	800e180 <HAL_UART_Transmit_IT>
	wifi_command=91;
 800a3e4:	4b2c      	ldr	r3, [pc, #176]	; (800a498 <_ZN7ESP826612Send_WifiCmdEv+0xacc>)
 800a3e6:	225b      	movs	r2, #91	; 0x5b
 800a3e8:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=6;
 800a3ea:	4b2c      	ldr	r3, [pc, #176]	; (800a49c <_ZN7ESP826612Send_WifiCmdEv+0xad0>)
 800a3ec:	2206      	movs	r2, #6
 800a3ee:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 800a3f0:	4b2b      	ldr	r3, [pc, #172]	; (800a4a0 <_ZN7ESP826612Send_WifiCmdEv+0xad4>)
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,ESP8266TXData,NoOfdata_byte);
 800a3f6:	4b26      	ldr	r3, [pc, #152]	; (800a490 <_ZN7ESP826612Send_WifiCmdEv+0xac4>)
 800a3f8:	881b      	ldrh	r3, [r3, #0]
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	4929      	ldr	r1, [pc, #164]	; (800a4a4 <_ZN7ESP826612Send_WifiCmdEv+0xad8>)
 800a3fe:	4825      	ldr	r0, [pc, #148]	; (800a494 <_ZN7ESP826612Send_WifiCmdEv+0xac8>)
 800a400:	f003 febe 	bl	800e180 <HAL_UART_Transmit_IT>
	break;
 800a404:	e30d      	b.n	800aa22 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	case 91:
	if(++Timerdelay >15)
 800a406:	4b26      	ldr	r3, [pc, #152]	; (800a4a0 <_ZN7ESP826612Send_WifiCmdEv+0xad4>)
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	3301      	adds	r3, #1
 800a40c:	b2da      	uxtb	r2, r3
 800a40e:	4b24      	ldr	r3, [pc, #144]	; (800a4a0 <_ZN7ESP826612Send_WifiCmdEv+0xad4>)
 800a410:	701a      	strb	r2, [r3, #0]
 800a412:	4b23      	ldr	r3, [pc, #140]	; (800a4a0 <_ZN7ESP826612Send_WifiCmdEv+0xad4>)
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	2b0f      	cmp	r3, #15
 800a418:	bf8c      	ite	hi
 800a41a:	2301      	movhi	r3, #1
 800a41c:	2300      	movls	r3, #0
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	2b00      	cmp	r3, #0
 800a422:	f000 82f7 	beq.w	800aa14 <_ZN7ESP826612Send_WifiCmdEv+0x1048>
	{
		Timerdelay=0;
 800a426:	4b1e      	ldr	r3, [pc, #120]	; (800a4a0 <_ZN7ESP826612Send_WifiCmdEv+0xad4>)
 800a428:	2200      	movs	r2, #0
 800a42a:	701a      	strb	r2, [r3, #0]
		wifi_command=10;
 800a42c:	4b1a      	ldr	r3, [pc, #104]	; (800a498 <_ZN7ESP826612Send_WifiCmdEv+0xacc>)
 800a42e:	220a      	movs	r2, #10
 800a430:	701a      	strb	r2, [r3, #0]
	}
	break;
 800a432:	e2ef      	b.n	800aa14 <_ZN7ESP826612Send_WifiCmdEv+0x1048>
 800a434:	20000109 	.word	0x20000109
 800a438:	cccccccd 	.word	0xcccccccd
 800a43c:	20000108 	.word	0x20000108
 800a440:	200007ac 	.word	0x200007ac
 800a444:	20000614 	.word	0x20000614
 800a448:	2000061c 	.word	0x2000061c
 800a44c:	2000061e 	.word	0x2000061e
 800a450:	20000620 	.word	0x20000620
 800a454:	20000630 	.word	0x20000630
 800a458:	20000616 	.word	0x20000616
 800a45c:	20000632 	.word	0x20000632
 800a460:	20000618 	.word	0x20000618
 800a464:	200007a2 	.word	0x200007a2
 800a468:	200007a4 	.word	0x200007a4
 800a46c:	200007a6 	.word	0x200007a6
 800a470:	200007a8 	.word	0x200007a8
 800a474:	200007aa 	.word	0x200007aa
 800a478:	20000622 	.word	0x20000622
 800a47c:	2000024a 	.word	0x2000024a
 800a480:	20000612 	.word	0x20000612
 800a484:	08010480 	.word	0x08010480
 800a488:	200007a0 	.word	0x200007a0
 800a48c:	0801053c 	.word	0x0801053c
 800a490:	2000079a 	.word	0x2000079a
 800a494:	200002a0 	.word	0x200002a0
 800a498:	20000698 	.word	0x20000698
 800a49c:	20000797 	.word	0x20000797
 800a4a0:	2000079c 	.word	0x2000079c
 800a4a4:	2000069c 	.word	0x2000069c
	case 100:

		r_set_duration_seq1 = (Rise_Sequence1_Minute%10)+((Rise_Sequence1_Minute/10)*10)+((Rise_Sequence1_Hour%10)*100)+((Rise_Sequence1_Hour/10)*1000);
 800a4a8:	4bb6      	ldr	r3, [pc, #728]	; (800a784 <_ZN7ESP826612Send_WifiCmdEv+0xdb8>)
 800a4aa:	781a      	ldrb	r2, [r3, #0]
 800a4ac:	4bb6      	ldr	r3, [pc, #728]	; (800a788 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a4ae:	fba3 1302 	umull	r1, r3, r3, r2
 800a4b2:	08d9      	lsrs	r1, r3, #3
 800a4b4:	460b      	mov	r3, r1
 800a4b6:	009b      	lsls	r3, r3, #2
 800a4b8:	440b      	add	r3, r1
 800a4ba:	005b      	lsls	r3, r3, #1
 800a4bc:	1ad3      	subs	r3, r2, r3
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	b298      	uxth	r0, r3
 800a4c2:	4bb2      	ldr	r3, [pc, #712]	; (800a78c <_ZN7ESP826612Send_WifiCmdEv+0xdc0>)
 800a4c4:	781a      	ldrb	r2, [r3, #0]
 800a4c6:	4bb0      	ldr	r3, [pc, #704]	; (800a788 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a4c8:	fba3 1302 	umull	r1, r3, r3, r2
 800a4cc:	08d9      	lsrs	r1, r3, #3
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	440b      	add	r3, r1
 800a4d4:	005b      	lsls	r3, r3, #1
 800a4d6:	1ad3      	subs	r3, r2, r3
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	461a      	mov	r2, r3
 800a4de:	0092      	lsls	r2, r2, #2
 800a4e0:	4413      	add	r3, r2
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	0091      	lsls	r1, r2, #2
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	4413      	add	r3, r2
 800a4ec:	009b      	lsls	r3, r3, #2
 800a4ee:	b29a      	uxth	r2, r3
 800a4f0:	4ba4      	ldr	r3, [pc, #656]	; (800a784 <_ZN7ESP826612Send_WifiCmdEv+0xdb8>)
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	49a4      	ldr	r1, [pc, #656]	; (800a788 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a4f6:	fba1 1303 	umull	r1, r3, r1, r3
 800a4fa:	08db      	lsrs	r3, r3, #3
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	4619      	mov	r1, r3
 800a502:	0089      	lsls	r1, r1, #2
 800a504:	440b      	add	r3, r1
 800a506:	005b      	lsls	r3, r3, #1
 800a508:	b29b      	uxth	r3, r3
 800a50a:	4413      	add	r3, r2
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	4403      	add	r3, r0
 800a510:	b29a      	uxth	r2, r3
 800a512:	4b9e      	ldr	r3, [pc, #632]	; (800a78c <_ZN7ESP826612Send_WifiCmdEv+0xdc0>)
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	499c      	ldr	r1, [pc, #624]	; (800a788 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a518:	fba1 1303 	umull	r1, r3, r1, r3
 800a51c:	08db      	lsrs	r3, r3, #3
 800a51e:	b2db      	uxtb	r3, r3
 800a520:	b29b      	uxth	r3, r3
 800a522:	4619      	mov	r1, r3
 800a524:	0149      	lsls	r1, r1, #5
 800a526:	1ac9      	subs	r1, r1, r3
 800a528:	0089      	lsls	r1, r1, #2
 800a52a:	440b      	add	r3, r1
 800a52c:	00db      	lsls	r3, r3, #3
 800a52e:	b29b      	uxth	r3, r3
 800a530:	4413      	add	r3, r2
 800a532:	b29a      	uxth	r2, r3
 800a534:	4b96      	ldr	r3, [pc, #600]	; (800a790 <_ZN7ESP826612Send_WifiCmdEv+0xdc4>)
 800a536:	801a      	strh	r2, [r3, #0]
		set_duration_seq1 = (H_Timer01MinValue%10)+((H_Timer01MinValue/10)*10)+((H_Timer01HrValue%10)*100)+((H_Timer01HrValue/10)*1000);
 800a538:	4b96      	ldr	r3, [pc, #600]	; (800a794 <_ZN7ESP826612Send_WifiCmdEv+0xdc8>)
 800a53a:	781a      	ldrb	r2, [r3, #0]
 800a53c:	4b92      	ldr	r3, [pc, #584]	; (800a788 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a53e:	fba3 1302 	umull	r1, r3, r3, r2
 800a542:	08d9      	lsrs	r1, r3, #3
 800a544:	460b      	mov	r3, r1
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	440b      	add	r3, r1
 800a54a:	005b      	lsls	r3, r3, #1
 800a54c:	1ad3      	subs	r3, r2, r3
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	b298      	uxth	r0, r3
 800a552:	4b91      	ldr	r3, [pc, #580]	; (800a798 <_ZN7ESP826612Send_WifiCmdEv+0xdcc>)
 800a554:	781a      	ldrb	r2, [r3, #0]
 800a556:	4b8c      	ldr	r3, [pc, #560]	; (800a788 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a558:	fba3 1302 	umull	r1, r3, r3, r2
 800a55c:	08d9      	lsrs	r1, r3, #3
 800a55e:	460b      	mov	r3, r1
 800a560:	009b      	lsls	r3, r3, #2
 800a562:	440b      	add	r3, r1
 800a564:	005b      	lsls	r3, r3, #1
 800a566:	1ad3      	subs	r3, r2, r3
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	461a      	mov	r2, r3
 800a56e:	0092      	lsls	r2, r2, #2
 800a570:	4413      	add	r3, r2
 800a572:	461a      	mov	r2, r3
 800a574:	0091      	lsls	r1, r2, #2
 800a576:	461a      	mov	r2, r3
 800a578:	460b      	mov	r3, r1
 800a57a:	4413      	add	r3, r2
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	b29a      	uxth	r2, r3
 800a580:	4b84      	ldr	r3, [pc, #528]	; (800a794 <_ZN7ESP826612Send_WifiCmdEv+0xdc8>)
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	4980      	ldr	r1, [pc, #512]	; (800a788 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a586:	fba1 1303 	umull	r1, r3, r1, r3
 800a58a:	08db      	lsrs	r3, r3, #3
 800a58c:	b2db      	uxtb	r3, r3
 800a58e:	b29b      	uxth	r3, r3
 800a590:	4619      	mov	r1, r3
 800a592:	0089      	lsls	r1, r1, #2
 800a594:	440b      	add	r3, r1
 800a596:	005b      	lsls	r3, r3, #1
 800a598:	b29b      	uxth	r3, r3
 800a59a:	4413      	add	r3, r2
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	4403      	add	r3, r0
 800a5a0:	b29a      	uxth	r2, r3
 800a5a2:	4b7d      	ldr	r3, [pc, #500]	; (800a798 <_ZN7ESP826612Send_WifiCmdEv+0xdcc>)
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	4978      	ldr	r1, [pc, #480]	; (800a788 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a5a8:	fba1 1303 	umull	r1, r3, r1, r3
 800a5ac:	08db      	lsrs	r3, r3, #3
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	0149      	lsls	r1, r1, #5
 800a5b6:	1ac9      	subs	r1, r1, r3
 800a5b8:	0089      	lsls	r1, r1, #2
 800a5ba:	440b      	add	r3, r1
 800a5bc:	00db      	lsls	r3, r3, #3
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	4413      	add	r3, r2
 800a5c2:	b29a      	uxth	r2, r3
 800a5c4:	4b75      	ldr	r3, [pc, #468]	; (800a79c <_ZN7ESP826612Send_WifiCmdEv+0xdd0>)
 800a5c6:	801a      	strh	r2, [r3, #0]
		r_set_duration_seq2 = (Rise_Sequence2_Minute%10)+((Rise_Sequence2_Minute/10)*10)+((R_Sequence2_hour_http%10)*100)+((R_Sequence2_hour_http/10)*1000);
 800a5c8:	4b75      	ldr	r3, [pc, #468]	; (800a7a0 <_ZN7ESP826612Send_WifiCmdEv+0xdd4>)
 800a5ca:	781a      	ldrb	r2, [r3, #0]
 800a5cc:	4b6e      	ldr	r3, [pc, #440]	; (800a788 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a5ce:	fba3 1302 	umull	r1, r3, r3, r2
 800a5d2:	08d9      	lsrs	r1, r3, #3
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	440b      	add	r3, r1
 800a5da:	005b      	lsls	r3, r3, #1
 800a5dc:	1ad3      	subs	r3, r2, r3
 800a5de:	b2db      	uxtb	r3, r3
 800a5e0:	b298      	uxth	r0, r3
 800a5e2:	4b70      	ldr	r3, [pc, #448]	; (800a7a4 <_ZN7ESP826612Send_WifiCmdEv+0xdd8>)
 800a5e4:	781a      	ldrb	r2, [r3, #0]
 800a5e6:	4b68      	ldr	r3, [pc, #416]	; (800a788 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a5e8:	fba3 1302 	umull	r1, r3, r3, r2
 800a5ec:	08d9      	lsrs	r1, r3, #3
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	009b      	lsls	r3, r3, #2
 800a5f2:	440b      	add	r3, r1
 800a5f4:	005b      	lsls	r3, r3, #1
 800a5f6:	1ad3      	subs	r3, r2, r3
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	b29b      	uxth	r3, r3
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	0092      	lsls	r2, r2, #2
 800a600:	4413      	add	r3, r2
 800a602:	461a      	mov	r2, r3
 800a604:	0091      	lsls	r1, r2, #2
 800a606:	461a      	mov	r2, r3
 800a608:	460b      	mov	r3, r1
 800a60a:	4413      	add	r3, r2
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	b29a      	uxth	r2, r3
 800a610:	4b63      	ldr	r3, [pc, #396]	; (800a7a0 <_ZN7ESP826612Send_WifiCmdEv+0xdd4>)
 800a612:	781b      	ldrb	r3, [r3, #0]
 800a614:	495c      	ldr	r1, [pc, #368]	; (800a788 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a616:	fba1 1303 	umull	r1, r3, r1, r3
 800a61a:	08db      	lsrs	r3, r3, #3
 800a61c:	b2db      	uxtb	r3, r3
 800a61e:	b29b      	uxth	r3, r3
 800a620:	4619      	mov	r1, r3
 800a622:	0089      	lsls	r1, r1, #2
 800a624:	440b      	add	r3, r1
 800a626:	005b      	lsls	r3, r3, #1
 800a628:	b29b      	uxth	r3, r3
 800a62a:	4413      	add	r3, r2
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	4403      	add	r3, r0
 800a630:	b29a      	uxth	r2, r3
 800a632:	4b5c      	ldr	r3, [pc, #368]	; (800a7a4 <_ZN7ESP826612Send_WifiCmdEv+0xdd8>)
 800a634:	781b      	ldrb	r3, [r3, #0]
 800a636:	4954      	ldr	r1, [pc, #336]	; (800a788 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a638:	fba1 1303 	umull	r1, r3, r1, r3
 800a63c:	08db      	lsrs	r3, r3, #3
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	b29b      	uxth	r3, r3
 800a642:	4619      	mov	r1, r3
 800a644:	0149      	lsls	r1, r1, #5
 800a646:	1ac9      	subs	r1, r1, r3
 800a648:	0089      	lsls	r1, r1, #2
 800a64a:	440b      	add	r3, r1
 800a64c:	00db      	lsls	r3, r3, #3
 800a64e:	b29b      	uxth	r3, r3
 800a650:	4413      	add	r3, r2
 800a652:	b29a      	uxth	r2, r3
 800a654:	4b54      	ldr	r3, [pc, #336]	; (800a7a8 <_ZN7ESP826612Send_WifiCmdEv+0xddc>)
 800a656:	801a      	strh	r2, [r3, #0]
		set_duration_seq2 = (H_Timer02MinValue%10)+((H_Timer02MinValue/10)*10)+((H_Timer02HrValue%10)*100)+((H_Timer02HrValue/10)*1000);
 800a658:	4b54      	ldr	r3, [pc, #336]	; (800a7ac <_ZN7ESP826612Send_WifiCmdEv+0xde0>)
 800a65a:	781a      	ldrb	r2, [r3, #0]
 800a65c:	4b4a      	ldr	r3, [pc, #296]	; (800a788 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a65e:	fba3 1302 	umull	r1, r3, r3, r2
 800a662:	08d9      	lsrs	r1, r3, #3
 800a664:	460b      	mov	r3, r1
 800a666:	009b      	lsls	r3, r3, #2
 800a668:	440b      	add	r3, r1
 800a66a:	005b      	lsls	r3, r3, #1
 800a66c:	1ad3      	subs	r3, r2, r3
 800a66e:	b2db      	uxtb	r3, r3
 800a670:	b298      	uxth	r0, r3
 800a672:	4b4f      	ldr	r3, [pc, #316]	; (800a7b0 <_ZN7ESP826612Send_WifiCmdEv+0xde4>)
 800a674:	781a      	ldrb	r2, [r3, #0]
 800a676:	4b44      	ldr	r3, [pc, #272]	; (800a788 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a678:	fba3 1302 	umull	r1, r3, r3, r2
 800a67c:	08d9      	lsrs	r1, r3, #3
 800a67e:	460b      	mov	r3, r1
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	440b      	add	r3, r1
 800a684:	005b      	lsls	r3, r3, #1
 800a686:	1ad3      	subs	r3, r2, r3
 800a688:	b2db      	uxtb	r3, r3
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	461a      	mov	r2, r3
 800a68e:	0092      	lsls	r2, r2, #2
 800a690:	4413      	add	r3, r2
 800a692:	461a      	mov	r2, r3
 800a694:	0091      	lsls	r1, r2, #2
 800a696:	461a      	mov	r2, r3
 800a698:	460b      	mov	r3, r1
 800a69a:	4413      	add	r3, r2
 800a69c:	009b      	lsls	r3, r3, #2
 800a69e:	b29a      	uxth	r2, r3
 800a6a0:	4b42      	ldr	r3, [pc, #264]	; (800a7ac <_ZN7ESP826612Send_WifiCmdEv+0xde0>)
 800a6a2:	781b      	ldrb	r3, [r3, #0]
 800a6a4:	4938      	ldr	r1, [pc, #224]	; (800a788 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a6a6:	fba1 1303 	umull	r1, r3, r1, r3
 800a6aa:	08db      	lsrs	r3, r3, #3
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	0089      	lsls	r1, r1, #2
 800a6b4:	440b      	add	r3, r1
 800a6b6:	005b      	lsls	r3, r3, #1
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	4413      	add	r3, r2
 800a6bc:	b29b      	uxth	r3, r3
 800a6be:	4403      	add	r3, r0
 800a6c0:	b29a      	uxth	r2, r3
 800a6c2:	4b3b      	ldr	r3, [pc, #236]	; (800a7b0 <_ZN7ESP826612Send_WifiCmdEv+0xde4>)
 800a6c4:	781b      	ldrb	r3, [r3, #0]
 800a6c6:	4930      	ldr	r1, [pc, #192]	; (800a788 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a6c8:	fba1 1303 	umull	r1, r3, r1, r3
 800a6cc:	08db      	lsrs	r3, r3, #3
 800a6ce:	b2db      	uxtb	r3, r3
 800a6d0:	b29b      	uxth	r3, r3
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	0149      	lsls	r1, r1, #5
 800a6d6:	1ac9      	subs	r1, r1, r3
 800a6d8:	0089      	lsls	r1, r1, #2
 800a6da:	440b      	add	r3, r1
 800a6dc:	00db      	lsls	r3, r3, #3
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	4413      	add	r3, r2
 800a6e2:	b29a      	uxth	r2, r3
 800a6e4:	4b33      	ldr	r3, [pc, #204]	; (800a7b4 <_ZN7ESP826612Send_WifiCmdEv+0xde8>)
 800a6e6:	801a      	strh	r2, [r3, #0]
		remaining_duration_seq1 =(seq1_remaining_time_min%10)+((seq1_remaining_time_min/10)*10)+((seq1_remaining_time_Hr%10)*100)+((seq1_remaining_time_Hr/10)*1000);
 800a6e8:	4b33      	ldr	r3, [pc, #204]	; (800a7b8 <_ZN7ESP826612Send_WifiCmdEv+0xdec>)
 800a6ea:	781a      	ldrb	r2, [r3, #0]
 800a6ec:	4b26      	ldr	r3, [pc, #152]	; (800a788 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a6ee:	fba3 1302 	umull	r1, r3, r3, r2
 800a6f2:	08d9      	lsrs	r1, r3, #3
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	009b      	lsls	r3, r3, #2
 800a6f8:	440b      	add	r3, r1
 800a6fa:	005b      	lsls	r3, r3, #1
 800a6fc:	1ad3      	subs	r3, r2, r3
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	b298      	uxth	r0, r3
 800a702:	4b2e      	ldr	r3, [pc, #184]	; (800a7bc <_ZN7ESP826612Send_WifiCmdEv+0xdf0>)
 800a704:	781a      	ldrb	r2, [r3, #0]
 800a706:	4b20      	ldr	r3, [pc, #128]	; (800a788 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a708:	fba3 1302 	umull	r1, r3, r3, r2
 800a70c:	08d9      	lsrs	r1, r3, #3
 800a70e:	460b      	mov	r3, r1
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	440b      	add	r3, r1
 800a714:	005b      	lsls	r3, r3, #1
 800a716:	1ad3      	subs	r3, r2, r3
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	b29b      	uxth	r3, r3
 800a71c:	461a      	mov	r2, r3
 800a71e:	0092      	lsls	r2, r2, #2
 800a720:	4413      	add	r3, r2
 800a722:	461a      	mov	r2, r3
 800a724:	0091      	lsls	r1, r2, #2
 800a726:	461a      	mov	r2, r3
 800a728:	460b      	mov	r3, r1
 800a72a:	4413      	add	r3, r2
 800a72c:	009b      	lsls	r3, r3, #2
 800a72e:	b29a      	uxth	r2, r3
 800a730:	4b21      	ldr	r3, [pc, #132]	; (800a7b8 <_ZN7ESP826612Send_WifiCmdEv+0xdec>)
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	4914      	ldr	r1, [pc, #80]	; (800a788 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a736:	fba1 1303 	umull	r1, r3, r1, r3
 800a73a:	08db      	lsrs	r3, r3, #3
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	b29b      	uxth	r3, r3
 800a740:	4619      	mov	r1, r3
 800a742:	0089      	lsls	r1, r1, #2
 800a744:	440b      	add	r3, r1
 800a746:	005b      	lsls	r3, r3, #1
 800a748:	b29b      	uxth	r3, r3
 800a74a:	4413      	add	r3, r2
 800a74c:	b29b      	uxth	r3, r3
 800a74e:	4403      	add	r3, r0
 800a750:	b29a      	uxth	r2, r3
 800a752:	4b1a      	ldr	r3, [pc, #104]	; (800a7bc <_ZN7ESP826612Send_WifiCmdEv+0xdf0>)
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	490c      	ldr	r1, [pc, #48]	; (800a788 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a758:	fba1 1303 	umull	r1, r3, r1, r3
 800a75c:	08db      	lsrs	r3, r3, #3
 800a75e:	b2db      	uxtb	r3, r3
 800a760:	b29b      	uxth	r3, r3
 800a762:	4619      	mov	r1, r3
 800a764:	0149      	lsls	r1, r1, #5
 800a766:	1ac9      	subs	r1, r1, r3
 800a768:	0089      	lsls	r1, r1, #2
 800a76a:	440b      	add	r3, r1
 800a76c:	00db      	lsls	r3, r3, #3
 800a76e:	b29b      	uxth	r3, r3
 800a770:	4413      	add	r3, r2
 800a772:	b29a      	uxth	r2, r3
 800a774:	4b12      	ldr	r3, [pc, #72]	; (800a7c0 <_ZN7ESP826612Send_WifiCmdEv+0xdf4>)
 800a776:	801a      	strh	r2, [r3, #0]
		remaining_duration_seq2 =(seq2_remaining_time_min%10)+((seq2_remaining_time_min/10)*10)+((seq2_remaining_time_Hr%10)*100)+((seq2_remaining_time_Hr/10)*1000);
 800a778:	4b12      	ldr	r3, [pc, #72]	; (800a7c4 <_ZN7ESP826612Send_WifiCmdEv+0xdf8>)
 800a77a:	781a      	ldrb	r2, [r3, #0]
 800a77c:	4b02      	ldr	r3, [pc, #8]	; (800a788 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a77e:	fba3 1302 	umull	r1, r3, r3, r2
 800a782:	e021      	b.n	800a7c8 <_ZN7ESP826612Send_WifiCmdEv+0xdfc>
 800a784:	20000635 	.word	0x20000635
 800a788:	cccccccd 	.word	0xcccccccd
 800a78c:	20000634 	.word	0x20000634
 800a790:	200007a2 	.word	0x200007a2
 800a794:	20000629 	.word	0x20000629
 800a798:	20000628 	.word	0x20000628
 800a79c:	200007a4 	.word	0x200007a4
 800a7a0:	20000637 	.word	0x20000637
 800a7a4:	200000ea 	.word	0x200000ea
 800a7a8:	200007a6 	.word	0x200007a6
 800a7ac:	2000062b 	.word	0x2000062b
 800a7b0:	2000062a 	.word	0x2000062a
 800a7b4:	200007a8 	.word	0x200007a8
 800a7b8:	20000107 	.word	0x20000107
 800a7bc:	20000106 	.word	0x20000106
 800a7c0:	200007aa 	.word	0x200007aa
 800a7c4:	20000109 	.word	0x20000109
 800a7c8:	08d9      	lsrs	r1, r3, #3
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	440b      	add	r3, r1
 800a7d0:	005b      	lsls	r3, r3, #1
 800a7d2:	1ad3      	subs	r3, r2, r3
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	b298      	uxth	r0, r3
 800a7d8:	4b94      	ldr	r3, [pc, #592]	; (800aa2c <_ZN7ESP826612Send_WifiCmdEv+0x1060>)
 800a7da:	781a      	ldrb	r2, [r3, #0]
 800a7dc:	4b94      	ldr	r3, [pc, #592]	; (800aa30 <_ZN7ESP826612Send_WifiCmdEv+0x1064>)
 800a7de:	fba3 1302 	umull	r1, r3, r3, r2
 800a7e2:	08d9      	lsrs	r1, r3, #3
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	440b      	add	r3, r1
 800a7ea:	005b      	lsls	r3, r3, #1
 800a7ec:	1ad3      	subs	r3, r2, r3
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	0092      	lsls	r2, r2, #2
 800a7f6:	4413      	add	r3, r2
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	0091      	lsls	r1, r2, #2
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	460b      	mov	r3, r1
 800a800:	4413      	add	r3, r2
 800a802:	009b      	lsls	r3, r3, #2
 800a804:	b29a      	uxth	r2, r3
 800a806:	4b8b      	ldr	r3, [pc, #556]	; (800aa34 <_ZN7ESP826612Send_WifiCmdEv+0x1068>)
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	4989      	ldr	r1, [pc, #548]	; (800aa30 <_ZN7ESP826612Send_WifiCmdEv+0x1064>)
 800a80c:	fba1 1303 	umull	r1, r3, r1, r3
 800a810:	08db      	lsrs	r3, r3, #3
 800a812:	b2db      	uxtb	r3, r3
 800a814:	b29b      	uxth	r3, r3
 800a816:	4619      	mov	r1, r3
 800a818:	0089      	lsls	r1, r1, #2
 800a81a:	440b      	add	r3, r1
 800a81c:	005b      	lsls	r3, r3, #1
 800a81e:	b29b      	uxth	r3, r3
 800a820:	4413      	add	r3, r2
 800a822:	b29b      	uxth	r3, r3
 800a824:	4403      	add	r3, r0
 800a826:	b29a      	uxth	r2, r3
 800a828:	4b80      	ldr	r3, [pc, #512]	; (800aa2c <_ZN7ESP826612Send_WifiCmdEv+0x1060>)
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	4980      	ldr	r1, [pc, #512]	; (800aa30 <_ZN7ESP826612Send_WifiCmdEv+0x1064>)
 800a82e:	fba1 1303 	umull	r1, r3, r1, r3
 800a832:	08db      	lsrs	r3, r3, #3
 800a834:	b2db      	uxtb	r3, r3
 800a836:	b29b      	uxth	r3, r3
 800a838:	4619      	mov	r1, r3
 800a83a:	0149      	lsls	r1, r1, #5
 800a83c:	1ac9      	subs	r1, r1, r3
 800a83e:	0089      	lsls	r1, r1, #2
 800a840:	440b      	add	r3, r1
 800a842:	00db      	lsls	r3, r3, #3
 800a844:	b29b      	uxth	r3, r3
 800a846:	4413      	add	r3, r2
 800a848:	b29a      	uxth	r2, r3
 800a84a:	4b7b      	ldr	r3, [pc, #492]	; (800aa38 <_ZN7ESP826612Send_WifiCmdEv+0x106c>)
 800a84c:	801a      	strh	r2, [r3, #0]
	lenOfURl = sprintf(PostUrl_CharFormat,"GET /set_temp?u=4&p=%d&tm=%d&tl=%d&th=%d&hr=%d&"
 800a84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a850:	f103 00d6 	add.w	r0, r3, #214	; 0xd6
 800a854:	4b79      	ldr	r3, [pc, #484]	; (800aa3c <_ZN7ESP826612Send_WifiCmdEv+0x1070>)
 800a856:	881b      	ldrh	r3, [r3, #0]
 800a858:	469c      	mov	ip, r3
 800a85a:	4b79      	ldr	r3, [pc, #484]	; (800aa40 <_ZN7ESP826612Send_WifiCmdEv+0x1074>)
 800a85c:	881b      	ldrh	r3, [r3, #0]
 800a85e:	469e      	mov	lr, r3
 800a860:	4b78      	ldr	r3, [pc, #480]	; (800aa44 <_ZN7ESP826612Send_WifiCmdEv+0x1078>)
 800a862:	881b      	ldrh	r3, [r3, #0]
 800a864:	461e      	mov	r6, r3
 800a866:	4b78      	ldr	r3, [pc, #480]	; (800aa48 <_ZN7ESP826612Send_WifiCmdEv+0x107c>)
 800a868:	881b      	ldrh	r3, [r3, #0]
 800a86a:	623b      	str	r3, [r7, #32]
 800a86c:	4b77      	ldr	r3, [pc, #476]	; (800aa4c <_ZN7ESP826612Send_WifiCmdEv+0x1080>)
 800a86e:	881b      	ldrh	r3, [r3, #0]
 800a870:	61fb      	str	r3, [r7, #28]
 800a872:	4b77      	ldr	r3, [pc, #476]	; (800aa50 <_ZN7ESP826612Send_WifiCmdEv+0x1084>)
 800a874:	881b      	ldrh	r3, [r3, #0]
 800a876:	61bb      	str	r3, [r7, #24]
 800a878:	4b76      	ldr	r3, [pc, #472]	; (800aa54 <_ZN7ESP826612Send_WifiCmdEv+0x1088>)
 800a87a:	881b      	ldrh	r3, [r3, #0]
 800a87c:	617b      	str	r3, [r7, #20]
 800a87e:	4b76      	ldr	r3, [pc, #472]	; (800aa58 <_ZN7ESP826612Send_WifiCmdEv+0x108c>)
 800a880:	881b      	ldrh	r3, [r3, #0]
 800a882:	613b      	str	r3, [r7, #16]
 800a884:	4b75      	ldr	r3, [pc, #468]	; (800aa5c <_ZN7ESP826612Send_WifiCmdEv+0x1090>)
 800a886:	881b      	ldrh	r3, [r3, #0]
 800a888:	60fb      	str	r3, [r7, #12]
 800a88a:	4b75      	ldr	r3, [pc, #468]	; (800aa60 <_ZN7ESP826612Send_WifiCmdEv+0x1094>)
 800a88c:	881b      	ldrh	r3, [r3, #0]
 800a88e:	60bb      	str	r3, [r7, #8]
 800a890:	4b74      	ldr	r3, [pc, #464]	; (800aa64 <_ZN7ESP826612Send_WifiCmdEv+0x1098>)
 800a892:	881b      	ldrh	r3, [r3, #0]
 800a894:	607b      	str	r3, [r7, #4]
 800a896:	4b74      	ldr	r3, [pc, #464]	; (800aa68 <_ZN7ESP826612Send_WifiCmdEv+0x109c>)
 800a898:	881b      	ldrh	r3, [r3, #0]
 800a89a:	603b      	str	r3, [r7, #0]
 800a89c:	4b73      	ldr	r3, [pc, #460]	; (800aa6c <_ZN7ESP826612Send_WifiCmdEv+0x10a0>)
 800a89e:	881b      	ldrh	r3, [r3, #0]
 800a8a0:	461d      	mov	r5, r3
 800a8a2:	4b65      	ldr	r3, [pc, #404]	; (800aa38 <_ZN7ESP826612Send_WifiCmdEv+0x106c>)
 800a8a4:	881b      	ldrh	r3, [r3, #0]
 800a8a6:	461c      	mov	r4, r3
 800a8a8:	4b71      	ldr	r3, [pc, #452]	; (800aa70 <_ZN7ESP826612Send_WifiCmdEv+0x10a4>)
 800a8aa:	881b      	ldrh	r3, [r3, #0]
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	4b71      	ldr	r3, [pc, #452]	; (800aa74 <_ZN7ESP826612Send_WifiCmdEv+0x10a8>)
 800a8b0:	881b      	ldrh	r3, [r3, #0]
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	4b70      	ldr	r3, [pc, #448]	; (800aa78 <_ZN7ESP826612Send_WifiCmdEv+0x10ac>)
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	9311      	str	r3, [sp, #68]	; 0x44
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	9310      	str	r3, [sp, #64]	; 0x40
 800a8be:	2300      	movs	r3, #0
 800a8c0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8c2:	920e      	str	r2, [sp, #56]	; 0x38
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	930d      	str	r3, [sp, #52]	; 0x34
 800a8c8:	910c      	str	r1, [sp, #48]	; 0x30
 800a8ca:	940b      	str	r4, [sp, #44]	; 0x2c
 800a8cc:	950a      	str	r5, [sp, #40]	; 0x28
 800a8ce:	683a      	ldr	r2, [r7, #0]
 800a8d0:	9209      	str	r2, [sp, #36]	; 0x24
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	9208      	str	r2, [sp, #32]
 800a8d6:	68ba      	ldr	r2, [r7, #8]
 800a8d8:	9207      	str	r2, [sp, #28]
 800a8da:	68fa      	ldr	r2, [r7, #12]
 800a8dc:	9206      	str	r2, [sp, #24]
 800a8de:	693a      	ldr	r2, [r7, #16]
 800a8e0:	9205      	str	r2, [sp, #20]
 800a8e2:	697a      	ldr	r2, [r7, #20]
 800a8e4:	9204      	str	r2, [sp, #16]
 800a8e6:	69ba      	ldr	r2, [r7, #24]
 800a8e8:	9203      	str	r2, [sp, #12]
 800a8ea:	69fa      	ldr	r2, [r7, #28]
 800a8ec:	9202      	str	r2, [sp, #8]
 800a8ee:	6a3b      	ldr	r3, [r7, #32]
 800a8f0:	9301      	str	r3, [sp, #4]
 800a8f2:	9600      	str	r6, [sp, #0]
 800a8f4:	4673      	mov	r3, lr
 800a8f6:	4662      	mov	r2, ip
 800a8f8:	4960      	ldr	r1, [pc, #384]	; (800aa7c <_ZN7ESP826612Send_WifiCmdEv+0x10b0>)
 800a8fa:	f005 f8d7 	bl	800faac <siprintf>
 800a8fe:	4603      	mov	r3, r0
 800a900:	b29a      	uxth	r2, r3
 800a902:	4b5f      	ldr	r3, [pc, #380]	; (800aa80 <_ZN7ESP826612Send_WifiCmdEv+0x10b4>)
 800a904:	801a      	strh	r2, [r3, #0]
						"&bc=%d&yc=%d&k=%d&x=%02d\r\nHost:usm4-ht.acceedo.in:9012\r\n\r\n",
						ProcessId_Value,act_temperature_c1,act_temperature_c2,act_temperature_c3,
						Rise_Sequence1_temp,Seq1temperature,Rise_Sequence2_temp,Seq2temperature,r_set_duration_seq1,set_duration_seq1,r_set_duration_seq2,set_duration_seq2,
						remaining_duration_seq1,remaining_duration_seq2,act_temperature_c4,
						1,water_temperature,0,1,status_to_server);
	memcpy(PostUrl_uintFormat,PostUrl_CharFormat,lenOfURl);
 800a906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a908:	f503 70d9 	add.w	r0, r3, #434	; 0x1b2
 800a90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90e:	33d6      	adds	r3, #214	; 0xd6
 800a910:	4a5b      	ldr	r2, [pc, #364]	; (800aa80 <_ZN7ESP826612Send_WifiCmdEv+0x10b4>)
 800a912:	8812      	ldrh	r2, [r2, #0]
 800a914:	4619      	mov	r1, r3
 800a916:	f004 ffc3 	bl	800f8a0 <memcpy>
	wifi_command	=	101;
 800a91a:	4b5a      	ldr	r3, [pc, #360]	; (800aa84 <_ZN7ESP826612Send_WifiCmdEv+0x10b8>)
 800a91c:	2265      	movs	r2, #101	; 0x65
 800a91e:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=7;
 800a920:	4b59      	ldr	r3, [pc, #356]	; (800aa88 <_ZN7ESP826612Send_WifiCmdEv+0x10bc>)
 800a922:	2207      	movs	r2, #7
 800a924:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 800a926:	4b59      	ldr	r3, [pc, #356]	; (800aa8c <_ZN7ESP826612Send_WifiCmdEv+0x10c0>)
 800a928:	2200      	movs	r2, #0
 800a92a:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit_IT(&hlpuart1,PostUrl_uintFormat,lenOfURl);
 800a92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92e:	f503 73d9 	add.w	r3, r3, #434	; 0x1b2
 800a932:	4a53      	ldr	r2, [pc, #332]	; (800aa80 <_ZN7ESP826612Send_WifiCmdEv+0x10b4>)
 800a934:	8812      	ldrh	r2, [r2, #0]
 800a936:	4619      	mov	r1, r3
 800a938:	4855      	ldr	r0, [pc, #340]	; (800aa90 <_ZN7ESP826612Send_WifiCmdEv+0x10c4>)
 800a93a:	f003 fc21 	bl	800e180 <HAL_UART_Transmit_IT>
	break;
 800a93e:	e070      	b.n	800aa22 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	case 101:
		if(++Timerdelay>20)
 800a940:	4b52      	ldr	r3, [pc, #328]	; (800aa8c <_ZN7ESP826612Send_WifiCmdEv+0x10c0>)
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	3301      	adds	r3, #1
 800a946:	b2da      	uxtb	r2, r3
 800a948:	4b50      	ldr	r3, [pc, #320]	; (800aa8c <_ZN7ESP826612Send_WifiCmdEv+0x10c0>)
 800a94a:	701a      	strb	r2, [r3, #0]
 800a94c:	4b4f      	ldr	r3, [pc, #316]	; (800aa8c <_ZN7ESP826612Send_WifiCmdEv+0x10c0>)
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	2b14      	cmp	r3, #20
 800a952:	bf8c      	ite	hi
 800a954:	2301      	movhi	r3, #1
 800a956:	2300      	movls	r3, #0
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d05c      	beq.n	800aa18 <_ZN7ESP826612Send_WifiCmdEv+0x104c>
		{
			Timerdelay=0;
 800a95e:	4b4b      	ldr	r3, [pc, #300]	; (800aa8c <_ZN7ESP826612Send_WifiCmdEv+0x10c0>)
 800a960:	2200      	movs	r2, #0
 800a962:	701a      	strb	r2, [r3, #0]
			wifi_command=10;
 800a964:	4b47      	ldr	r3, [pc, #284]	; (800aa84 <_ZN7ESP826612Send_WifiCmdEv+0x10b8>)
 800a966:	220a      	movs	r2, #10
 800a968:	701a      	strb	r2, [r3, #0]
		}
	break;
 800a96a:	e055      	b.n	800aa18 <_ZN7ESP826612Send_WifiCmdEv+0x104c>
	case 102:
	   if(++Timerdelay>2)
 800a96c:	4b47      	ldr	r3, [pc, #284]	; (800aa8c <_ZN7ESP826612Send_WifiCmdEv+0x10c0>)
 800a96e:	781b      	ldrb	r3, [r3, #0]
 800a970:	3301      	adds	r3, #1
 800a972:	b2da      	uxtb	r2, r3
 800a974:	4b45      	ldr	r3, [pc, #276]	; (800aa8c <_ZN7ESP826612Send_WifiCmdEv+0x10c0>)
 800a976:	701a      	strb	r2, [r3, #0]
 800a978:	4b44      	ldr	r3, [pc, #272]	; (800aa8c <_ZN7ESP826612Send_WifiCmdEv+0x10c0>)
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	2b02      	cmp	r3, #2
 800a97e:	bf8c      	ite	hi
 800a980:	2301      	movhi	r3, #1
 800a982:	2300      	movls	r3, #0
 800a984:	b2db      	uxtb	r3, r3
 800a986:	2b00      	cmp	r3, #0
 800a988:	d048      	beq.n	800aa1c <_ZN7ESP826612Send_WifiCmdEv+0x1050>
	   {
		Timerdelay=0;
 800a98a:	4b40      	ldr	r3, [pc, #256]	; (800aa8c <_ZN7ESP826612Send_WifiCmdEv+0x10c0>)
 800a98c:	2200      	movs	r2, #0
 800a98e:	701a      	strb	r2, [r3, #0]
		wifi_command=50;
 800a990:	4b3c      	ldr	r3, [pc, #240]	; (800aa84 <_ZN7ESP826612Send_WifiCmdEv+0x10b8>)
 800a992:	2232      	movs	r2, #50	; 0x32
 800a994:	701a      	strb	r2, [r3, #0]
	   }
	break;
 800a996:	e041      	b.n	800aa1c <_ZN7ESP826612Send_WifiCmdEv+0x1050>
	case 103:
	   if(++Timerdelay>2)
 800a998:	4b3c      	ldr	r3, [pc, #240]	; (800aa8c <_ZN7ESP826612Send_WifiCmdEv+0x10c0>)
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	3301      	adds	r3, #1
 800a99e:	b2da      	uxtb	r2, r3
 800a9a0:	4b3a      	ldr	r3, [pc, #232]	; (800aa8c <_ZN7ESP826612Send_WifiCmdEv+0x10c0>)
 800a9a2:	701a      	strb	r2, [r3, #0]
 800a9a4:	4b39      	ldr	r3, [pc, #228]	; (800aa8c <_ZN7ESP826612Send_WifiCmdEv+0x10c0>)
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	2b02      	cmp	r3, #2
 800a9aa:	bf8c      	ite	hi
 800a9ac:	2301      	movhi	r3, #1
 800a9ae:	2300      	movls	r3, #0
 800a9b0:	b2db      	uxtb	r3, r3
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d034      	beq.n	800aa20 <_ZN7ESP826612Send_WifiCmdEv+0x1054>
	   {
		Timerdelay=0;
 800a9b6:	4b35      	ldr	r3, [pc, #212]	; (800aa8c <_ZN7ESP826612Send_WifiCmdEv+0x10c0>)
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	701a      	strb	r2, [r3, #0]
		wifi_command=10;
 800a9bc:	4b31      	ldr	r3, [pc, #196]	; (800aa84 <_ZN7ESP826612Send_WifiCmdEv+0x10b8>)
 800a9be:	220a      	movs	r2, #10
 800a9c0:	701a      	strb	r2, [r3, #0]
	   }
	break;
 800a9c2:	e02d      	b.n	800aa20 <_ZN7ESP826612Send_WifiCmdEv+0x1054>
	case 110:
	NoOfdata_byte=12;
 800a9c4:	4b33      	ldr	r3, [pc, #204]	; (800aa94 <_ZN7ESP826612Send_WifiCmdEv+0x10c8>)
 800a9c6:	220c      	movs	r2, #12
 800a9c8:	801a      	strh	r2, [r3, #0]
	wifi_command=50;
 800a9ca:	4b2e      	ldr	r3, [pc, #184]	; (800aa84 <_ZN7ESP826612Send_WifiCmdEv+0x10b8>)
 800a9cc:	2232      	movs	r2, #50	; 0x32
 800a9ce:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CmdCipClose,NoOfdata_byte);
 800a9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d2:	f203 238e 	addw	r3, r3, #654	; 0x28e
 800a9d6:	4a2f      	ldr	r2, [pc, #188]	; (800aa94 <_ZN7ESP826612Send_WifiCmdEv+0x10c8>)
 800a9d8:	8812      	ldrh	r2, [r2, #0]
 800a9da:	4619      	mov	r1, r3
 800a9dc:	482c      	ldr	r0, [pc, #176]	; (800aa90 <_ZN7ESP826612Send_WifiCmdEv+0x10c4>)
 800a9de:	f003 fbcf 	bl	800e180 <HAL_UART_Transmit_IT>
	break;
 800a9e2:	e01e      	b.n	800aa22 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	case 120:
	break;
	default:
	wifi_command=5;
 800a9e4:	4b27      	ldr	r3, [pc, #156]	; (800aa84 <_ZN7ESP826612Send_WifiCmdEv+0x10b8>)
 800a9e6:	2205      	movs	r2, #5
 800a9e8:	701a      	strb	r2, [r3, #0]
	break;
 800a9ea:	e01a      	b.n	800aa22 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	break;
 800a9ec:	bf00      	nop
 800a9ee:	e018      	b.n	800aa22 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	break;
 800a9f0:	bf00      	nop
 800a9f2:	e016      	b.n	800aa22 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	break;
 800a9f4:	bf00      	nop
 800a9f6:	e014      	b.n	800aa22 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	break;
 800a9f8:	bf00      	nop
 800a9fa:	e012      	b.n	800aa22 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	break;
 800a9fc:	bf00      	nop
 800a9fe:	e010      	b.n	800aa22 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	break;
 800aa00:	bf00      	nop
 800aa02:	e00e      	b.n	800aa22 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	break;
 800aa04:	bf00      	nop
 800aa06:	e00c      	b.n	800aa22 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	break;
 800aa08:	bf00      	nop
 800aa0a:	e00a      	b.n	800aa22 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	break;
 800aa0c:	bf00      	nop
 800aa0e:	e008      	b.n	800aa22 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	break;
 800aa10:	bf00      	nop
 800aa12:	e006      	b.n	800aa22 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	break;
 800aa14:	bf00      	nop
 800aa16:	e004      	b.n	800aa22 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	break;
 800aa18:	bf00      	nop
 800aa1a:	e002      	b.n	800aa22 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	break;
 800aa1c:	bf00      	nop
 800aa1e:	e000      	b.n	800aa22 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	break;
 800aa20:	bf00      	nop
 }
}
 800aa22:	bf00      	nop
 800aa24:	372c      	adds	r7, #44	; 0x2c
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa2a:	bf00      	nop
 800aa2c:	20000108 	.word	0x20000108
 800aa30:	cccccccd 	.word	0xcccccccd
 800aa34:	20000109 	.word	0x20000109
 800aa38:	200007ac 	.word	0x200007ac
 800aa3c:	20000614 	.word	0x20000614
 800aa40:	2000061c 	.word	0x2000061c
 800aa44:	2000061e 	.word	0x2000061e
 800aa48:	20000620 	.word	0x20000620
 800aa4c:	20000630 	.word	0x20000630
 800aa50:	20000616 	.word	0x20000616
 800aa54:	20000632 	.word	0x20000632
 800aa58:	20000618 	.word	0x20000618
 800aa5c:	200007a2 	.word	0x200007a2
 800aa60:	200007a4 	.word	0x200007a4
 800aa64:	200007a6 	.word	0x200007a6
 800aa68:	200007a8 	.word	0x200007a8
 800aa6c:	200007aa 	.word	0x200007aa
 800aa70:	20000622 	.word	0x20000622
 800aa74:	2000024a 	.word	0x2000024a
 800aa78:	20000612 	.word	0x20000612
 800aa7c:	08010480 	.word	0x08010480
 800aa80:	200007a0 	.word	0x200007a0
 800aa84:	20000698 	.word	0x20000698
 800aa88:	20000797 	.word	0x20000797
 800aa8c:	2000079c 	.word	0x2000079c
 800aa90:	200002a0 	.word	0x200002a0
 800aa94:	2000079a 	.word	0x2000079a

0800aa98 <_ZN7ESP82664InitEv>:

	}
}

void ESP8266::Init(void)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b090      	sub	sp, #64	; 0x40
 800aa9c:	af0e      	add	r7, sp, #56	; 0x38
 800aa9e:	6078      	str	r0, [r7, #4]
	sprintf(dummydata,"%c%02d,%04d,%04d,%03d,%03d,%02d:%02d:%02d %02d/%02d/%02d,%04d,%03d,%03d%c",'"',0,0,
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f203 20a6 	addw	r0, r3, #678	; 0x2a6
 800aaa6:	2322      	movs	r3, #34	; 0x22
 800aaa8:	930d      	str	r3, [sp, #52]	; 0x34
 800aaaa:	2300      	movs	r3, #0
 800aaac:	930c      	str	r3, [sp, #48]	; 0x30
 800aaae:	2300      	movs	r3, #0
 800aab0:	930b      	str	r3, [sp, #44]	; 0x2c
 800aab2:	2300      	movs	r3, #0
 800aab4:	930a      	str	r3, [sp, #40]	; 0x28
 800aab6:	2300      	movs	r3, #0
 800aab8:	9309      	str	r3, [sp, #36]	; 0x24
 800aaba:	2300      	movs	r3, #0
 800aabc:	9308      	str	r3, [sp, #32]
 800aabe:	2300      	movs	r3, #0
 800aac0:	9307      	str	r3, [sp, #28]
 800aac2:	2300      	movs	r3, #0
 800aac4:	9306      	str	r3, [sp, #24]
 800aac6:	2300      	movs	r3, #0
 800aac8:	9305      	str	r3, [sp, #20]
 800aaca:	2300      	movs	r3, #0
 800aacc:	9304      	str	r3, [sp, #16]
 800aace:	2300      	movs	r3, #0
 800aad0:	9303      	str	r3, [sp, #12]
 800aad2:	2300      	movs	r3, #0
 800aad4:	9302      	str	r3, [sp, #8]
 800aad6:	2300      	movs	r3, #0
 800aad8:	9301      	str	r3, [sp, #4]
 800aada:	2300      	movs	r3, #0
 800aadc:	9300      	str	r3, [sp, #0]
 800aade:	2300      	movs	r3, #0
 800aae0:	2222      	movs	r2, #34	; 0x22
 800aae2:	4908      	ldr	r1, [pc, #32]	; (800ab04 <_ZN7ESP82664InitEv+0x6c>)
 800aae4:	f004 ffe2 	bl	800faac <siprintf>
				0,0,0,0,0,0,0,0,0,0,0,0,'"');
	powercycleRefresh=1;
 800aae8:	4b07      	ldr	r3, [pc, #28]	; (800ab08 <_ZN7ESP82664InitEv+0x70>)
 800aaea:	2201      	movs	r2, #1
 800aaec:	701a      	strb	r2, [r3, #0]
	wifi_command=5;
 800aaee:	4b07      	ldr	r3, [pc, #28]	; (800ab0c <_ZN7ESP82664InitEv+0x74>)
 800aaf0:	2205      	movs	r2, #5
 800aaf2:	701a      	strb	r2, [r3, #0]
	RefreshBlockInfo=0;
 800aaf4:	4b06      	ldr	r3, [pc, #24]	; (800ab10 <_ZN7ESP82664InitEv+0x78>)
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	701a      	strb	r2, [r3, #0]
}
 800aafa:	bf00      	nop
 800aafc:	3708      	adds	r7, #8
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	08010550 	.word	0x08010550
 800ab08:	2000079e 	.word	0x2000079e
 800ab0c:	20000698 	.word	0x20000698
 800ab10:	2000079d 	.word	0x2000079d

0800ab14 <cppMain>:
  * @brief  The application entry point for cpp
  * @retval int
  */
//TIM_HandleTypeDef htim6;
void cppMain()
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	f5ad 5dcc 	sub.w	sp, sp, #6528	; 0x1980
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
	GLCD glcd;
 800ab1e:	f607 738c 	addw	r3, r7, #3980	; 0xf8c
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7f8 ff70 	bl	8003a08 <_ZN4GLCDC1Ev>
	Modbusrtu ModbusInst;
 800ab28:	f607 535c 	addw	r3, r7, #3420	; 0xd5c
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f7fd ffd9 	bl	8008ae4 <_ZN9ModbusrtuC1Ev>
	DisplayRoutine displayRoutineInst;
 800ab32:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800ab36:	3b04      	subs	r3, #4
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7f8 fe7d 	bl	8003838 <_ZN14DisplayRoutineC1Ev>
	Heattreatment heattreatmentInst;
 800ab3e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800ab42:	3b10      	subs	r3, #16
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7fd fa29 	bl	8007f9c <_ZN13HeattreatmentC1Ev>
	OfflineStorage offlineStorageInst;
 800ab4a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800ab4e:	3b14      	subs	r3, #20
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7fe fae9 	bl	8009128 <_ZN14OfflineStorageC1Ev>
	ESP8266 esp8266Inst;
 800ab56:	f107 0310 	add.w	r3, r7, #16
 800ab5a:	3b10      	subs	r3, #16
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f7fe fd29 	bl	80095b4 <_ZN7ESP8266C1Ev>
//	SHIFT shiftInst;
	offlineStorageInst.ReadOfflinedataInit();
 800ab62:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800ab66:	3b14      	subs	r3, #20
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f7fe fd15 	bl	8009598 <_ZN14OfflineStorage19ReadOfflinedataInitEv>
	displayRoutineInst.Init();
 800ab6e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800ab72:	3b04      	subs	r3, #4
 800ab74:	4618      	mov	r0, r3
 800ab76:	f7f8 ff10 	bl	800399a <_ZN14DisplayRoutine4InitEv>
	esp8266Inst.Init();
 800ab7a:	f107 0310 	add.w	r3, r7, #16
 800ab7e:	3b10      	subs	r3, #16
 800ab80:	4618      	mov	r0, r3
 800ab82:	f7ff ff89 	bl	800aa98 <_ZN7ESP82664InitEv>

	TxSeqComplete=1;
 800ab86:	4b1d      	ldr	r3, [pc, #116]	; (800abfc <cppMain+0xe8>)
 800ab88:	2201      	movs	r2, #1
 800ab8a:	701a      	strb	r2, [r3, #0]


	while(1)
	{

		if(Flag1MS)
 800ab8c:	4b1c      	ldr	r3, [pc, #112]	; (800ac00 <cppMain+0xec>)
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d008      	beq.n	800aba6 <cppMain+0x92>
		{
			Flag1MS=0;
 800ab94:	4b1a      	ldr	r3, [pc, #104]	; (800ac00 <cppMain+0xec>)
 800ab96:	2200      	movs	r2, #0
 800ab98:	701a      	strb	r2, [r3, #0]
			heattreatmentInst.run();
 800ab9a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800ab9e:	3b10      	subs	r3, #16
 800aba0:	4618      	mov	r0, r3
 800aba2:	f7fd fa2f 	bl	8008004 <_ZN13Heattreatment3runEv>

		}
		if(Flag100milliSeconds)
 800aba6:	4b17      	ldr	r3, [pc, #92]	; (800ac04 <cppMain+0xf0>)
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d00d      	beq.n	800abca <cppMain+0xb6>
		{
			Flag100milliSeconds=0;
 800abae:	4b15      	ldr	r3, [pc, #84]	; (800ac04 <cppMain+0xf0>)
 800abb0:	2200      	movs	r2, #0
 800abb2:	701a      	strb	r2, [r3, #0]
			offlineStorageInst.run();
 800abb4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800abb8:	3b14      	subs	r3, #20
 800abba:	4618      	mov	r0, r3
 800abbc:	f7fe fae4 	bl	8009188 <_ZN14OfflineStorage3runEv>
			ModbusInst.ModbusReadTransaction();
 800abc0:	f607 535c 	addw	r3, r7, #3420	; 0xd5c
 800abc4:	4618      	mov	r0, r3
 800abc6:	f7fd ffd9 	bl	8008b7c <_ZN9Modbusrtu21ModbusReadTransactionEv>
		}
		if(Flag1Second)
 800abca:	4b0f      	ldr	r3, [pc, #60]	; (800ac08 <cppMain+0xf4>)
 800abcc:	781b      	ldrb	r3, [r3, #0]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d0dc      	beq.n	800ab8c <cppMain+0x78>
		{
			Flag1Second=0;
 800abd2:	4b0d      	ldr	r3, [pc, #52]	; (800ac08 <cppMain+0xf4>)
 800abd4:	2200      	movs	r2, #0
 800abd6:	701a      	strb	r2, [r3, #0]
			esp8266Inst.run();
 800abd8:	f107 0310 	add.w	r3, r7, #16
 800abdc:	3b10      	subs	r3, #16
 800abde:	4618      	mov	r0, r3
 800abe0:	f7fe fee9 	bl	80099b6 <_ZN7ESP82663runEv>
			heattreatmentInst.sim();
 800abe4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800abe8:	3b10      	subs	r3, #16
 800abea:	4618      	mov	r0, r3
 800abec:	f7fd fa18 	bl	8008020 <_ZN13Heattreatment3simEv>
			ModbusInst.dwinFrame();
 800abf0:	f607 535c 	addw	r3, r7, #3420	; 0xd5c
 800abf4:	4618      	mov	r0, r3
 800abf6:	f7fe fa0d 	bl	8009014 <_ZN9Modbusrtu9dwinFrameEv>
		if(Flag1MS)
 800abfa:	e7c7      	b.n	800ab8c <cppMain+0x78>
 800abfc:	20000650 	.word	0x20000650
 800ac00:	200000f5 	.word	0x200000f5
 800ac04:	200000f7 	.word	0x200000f7
 800ac08:	200000f6 	.word	0x200000f6

0800ac0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b082      	sub	sp, #8
 800ac10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800ac12:	2300      	movs	r3, #0
 800ac14:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ac16:	2003      	movs	r0, #3
 800ac18:	f000 f960 	bl	800aedc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800ac1c:	200f      	movs	r0, #15
 800ac1e:	f000 f80d 	bl	800ac3c <HAL_InitTick>
 800ac22:	4603      	mov	r3, r0
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d002      	beq.n	800ac2e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800ac28:	2301      	movs	r3, #1
 800ac2a:	71fb      	strb	r3, [r7, #7]
 800ac2c:	e001      	b.n	800ac32 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800ac2e:	f7f7 fead 	bl	800298c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800ac32:	79fb      	ldrb	r3, [r7, #7]
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3708      	adds	r7, #8
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b084      	sub	sp, #16
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800ac44:	2300      	movs	r3, #0
 800ac46:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800ac48:	4b17      	ldr	r3, [pc, #92]	; (800aca8 <HAL_InitTick+0x6c>)
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d023      	beq.n	800ac98 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800ac50:	4b16      	ldr	r3, [pc, #88]	; (800acac <HAL_InitTick+0x70>)
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	4b14      	ldr	r3, [pc, #80]	; (800aca8 <HAL_InitTick+0x6c>)
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	4619      	mov	r1, r3
 800ac5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ac5e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac62:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac66:	4618      	mov	r0, r3
 800ac68:	f000 f96d 	bl	800af46 <HAL_SYSTICK_Config>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d10f      	bne.n	800ac92 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2b0f      	cmp	r3, #15
 800ac76:	d809      	bhi.n	800ac8c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ac78:	2200      	movs	r2, #0
 800ac7a:	6879      	ldr	r1, [r7, #4]
 800ac7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac80:	f000 f937 	bl	800aef2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800ac84:	4a0a      	ldr	r2, [pc, #40]	; (800acb0 <HAL_InitTick+0x74>)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6013      	str	r3, [r2, #0]
 800ac8a:	e007      	b.n	800ac9c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	73fb      	strb	r3, [r7, #15]
 800ac90:	e004      	b.n	800ac9c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800ac92:	2301      	movs	r3, #1
 800ac94:	73fb      	strb	r3, [r7, #15]
 800ac96:	e001      	b.n	800ac9c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800ac9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3710      	adds	r7, #16
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
 800aca6:	bf00      	nop
 800aca8:	20000008 	.word	0x20000008
 800acac:	20000000 	.word	0x20000000
 800acb0:	20000004 	.word	0x20000004

0800acb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800acb4:	b480      	push	{r7}
 800acb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800acb8:	4b06      	ldr	r3, [pc, #24]	; (800acd4 <HAL_IncTick+0x20>)
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	461a      	mov	r2, r3
 800acbe:	4b06      	ldr	r3, [pc, #24]	; (800acd8 <HAL_IncTick+0x24>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4413      	add	r3, r2
 800acc4:	4a04      	ldr	r2, [pc, #16]	; (800acd8 <HAL_IncTick+0x24>)
 800acc6:	6013      	str	r3, [r2, #0]
}
 800acc8:	bf00      	nop
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	20000008 	.word	0x20000008
 800acd8:	200007b0 	.word	0x200007b0

0800acdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800acdc:	b480      	push	{r7}
 800acde:	af00      	add	r7, sp, #0
  return uwTick;
 800ace0:	4b03      	ldr	r3, [pc, #12]	; (800acf0 <HAL_GetTick+0x14>)
 800ace2:	681b      	ldr	r3, [r3, #0]
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr
 800acee:	bf00      	nop
 800acf0:	200007b0 	.word	0x200007b0

0800acf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800acfc:	f7ff ffee 	bl	800acdc <HAL_GetTick>
 800ad00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad0c:	d005      	beq.n	800ad1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800ad0e:	4b0a      	ldr	r3, [pc, #40]	; (800ad38 <HAL_Delay+0x44>)
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	461a      	mov	r2, r3
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	4413      	add	r3, r2
 800ad18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800ad1a:	bf00      	nop
 800ad1c:	f7ff ffde 	bl	800acdc <HAL_GetTick>
 800ad20:	4602      	mov	r2, r0
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	1ad3      	subs	r3, r2, r3
 800ad26:	68fa      	ldr	r2, [r7, #12]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d8f7      	bhi.n	800ad1c <HAL_Delay+0x28>
  {
  }
}
 800ad2c:	bf00      	nop
 800ad2e:	bf00      	nop
 800ad30:	3710      	adds	r7, #16
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	20000008 	.word	0x20000008

0800ad3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f003 0307 	and.w	r3, r3, #7
 800ad4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ad4c:	4b0c      	ldr	r3, [pc, #48]	; (800ad80 <__NVIC_SetPriorityGrouping+0x44>)
 800ad4e:	68db      	ldr	r3, [r3, #12]
 800ad50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ad52:	68ba      	ldr	r2, [r7, #8]
 800ad54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ad58:	4013      	ands	r3, r2
 800ad5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ad64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800ad68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ad6e:	4a04      	ldr	r2, [pc, #16]	; (800ad80 <__NVIC_SetPriorityGrouping+0x44>)
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	60d3      	str	r3, [r2, #12]
}
 800ad74:	bf00      	nop
 800ad76:	3714      	adds	r7, #20
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr
 800ad80:	e000ed00 	.word	0xe000ed00

0800ad84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800ad84:	b480      	push	{r7}
 800ad86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ad88:	4b04      	ldr	r3, [pc, #16]	; (800ad9c <__NVIC_GetPriorityGrouping+0x18>)
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	0a1b      	lsrs	r3, r3, #8
 800ad8e:	f003 0307 	and.w	r3, r3, #7
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	46bd      	mov	sp, r7
 800ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9a:	4770      	bx	lr
 800ad9c:	e000ed00 	.word	0xe000ed00

0800ada0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ada0:	b480      	push	{r7}
 800ada2:	b083      	sub	sp, #12
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	4603      	mov	r3, r0
 800ada8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800adaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	db0b      	blt.n	800adca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800adb2:	79fb      	ldrb	r3, [r7, #7]
 800adb4:	f003 021f 	and.w	r2, r3, #31
 800adb8:	4907      	ldr	r1, [pc, #28]	; (800add8 <__NVIC_EnableIRQ+0x38>)
 800adba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adbe:	095b      	lsrs	r3, r3, #5
 800adc0:	2001      	movs	r0, #1
 800adc2:	fa00 f202 	lsl.w	r2, r0, r2
 800adc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800adca:	bf00      	nop
 800adcc:	370c      	adds	r7, #12
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr
 800add6:	bf00      	nop
 800add8:	e000e100 	.word	0xe000e100

0800addc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800addc:	b480      	push	{r7}
 800adde:	b083      	sub	sp, #12
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	4603      	mov	r3, r0
 800ade4:	6039      	str	r1, [r7, #0]
 800ade6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ade8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adec:	2b00      	cmp	r3, #0
 800adee:	db0a      	blt.n	800ae06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	b2da      	uxtb	r2, r3
 800adf4:	490c      	ldr	r1, [pc, #48]	; (800ae28 <__NVIC_SetPriority+0x4c>)
 800adf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adfa:	0112      	lsls	r2, r2, #4
 800adfc:	b2d2      	uxtb	r2, r2
 800adfe:	440b      	add	r3, r1
 800ae00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800ae04:	e00a      	b.n	800ae1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	b2da      	uxtb	r2, r3
 800ae0a:	4908      	ldr	r1, [pc, #32]	; (800ae2c <__NVIC_SetPriority+0x50>)
 800ae0c:	79fb      	ldrb	r3, [r7, #7]
 800ae0e:	f003 030f 	and.w	r3, r3, #15
 800ae12:	3b04      	subs	r3, #4
 800ae14:	0112      	lsls	r2, r2, #4
 800ae16:	b2d2      	uxtb	r2, r2
 800ae18:	440b      	add	r3, r1
 800ae1a:	761a      	strb	r2, [r3, #24]
}
 800ae1c:	bf00      	nop
 800ae1e:	370c      	adds	r7, #12
 800ae20:	46bd      	mov	sp, r7
 800ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae26:	4770      	bx	lr
 800ae28:	e000e100 	.word	0xe000e100
 800ae2c:	e000ed00 	.word	0xe000ed00

0800ae30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b089      	sub	sp, #36	; 0x24
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	60b9      	str	r1, [r7, #8]
 800ae3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f003 0307 	and.w	r3, r3, #7
 800ae42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	f1c3 0307 	rsb	r3, r3, #7
 800ae4a:	2b04      	cmp	r3, #4
 800ae4c:	bf28      	it	cs
 800ae4e:	2304      	movcs	r3, #4
 800ae50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ae52:	69fb      	ldr	r3, [r7, #28]
 800ae54:	3304      	adds	r3, #4
 800ae56:	2b06      	cmp	r3, #6
 800ae58:	d902      	bls.n	800ae60 <NVIC_EncodePriority+0x30>
 800ae5a:	69fb      	ldr	r3, [r7, #28]
 800ae5c:	3b03      	subs	r3, #3
 800ae5e:	e000      	b.n	800ae62 <NVIC_EncodePriority+0x32>
 800ae60:	2300      	movs	r3, #0
 800ae62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ae64:	f04f 32ff 	mov.w	r2, #4294967295
 800ae68:	69bb      	ldr	r3, [r7, #24]
 800ae6a:	fa02 f303 	lsl.w	r3, r2, r3
 800ae6e:	43da      	mvns	r2, r3
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	401a      	ands	r2, r3
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ae78:	f04f 31ff 	mov.w	r1, #4294967295
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	fa01 f303 	lsl.w	r3, r1, r3
 800ae82:	43d9      	mvns	r1, r3
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ae88:	4313      	orrs	r3, r2
         );
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3724      	adds	r7, #36	; 0x24
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr
	...

0800ae98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b082      	sub	sp, #8
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	3b01      	subs	r3, #1
 800aea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aea8:	d301      	bcc.n	800aeae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800aeaa:	2301      	movs	r3, #1
 800aeac:	e00f      	b.n	800aece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800aeae:	4a0a      	ldr	r2, [pc, #40]	; (800aed8 <SysTick_Config+0x40>)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	3b01      	subs	r3, #1
 800aeb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800aeb6:	210f      	movs	r1, #15
 800aeb8:	f04f 30ff 	mov.w	r0, #4294967295
 800aebc:	f7ff ff8e 	bl	800addc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800aec0:	4b05      	ldr	r3, [pc, #20]	; (800aed8 <SysTick_Config+0x40>)
 800aec2:	2200      	movs	r2, #0
 800aec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800aec6:	4b04      	ldr	r3, [pc, #16]	; (800aed8 <SysTick_Config+0x40>)
 800aec8:	2207      	movs	r2, #7
 800aeca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800aecc:	2300      	movs	r3, #0
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3708      	adds	r7, #8
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	e000e010 	.word	0xe000e010

0800aedc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f7ff ff29 	bl	800ad3c <__NVIC_SetPriorityGrouping>
}
 800aeea:	bf00      	nop
 800aeec:	3708      	adds	r7, #8
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}

0800aef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800aef2:	b580      	push	{r7, lr}
 800aef4:	b086      	sub	sp, #24
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	4603      	mov	r3, r0
 800aefa:	60b9      	str	r1, [r7, #8]
 800aefc:	607a      	str	r2, [r7, #4]
 800aefe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800af00:	2300      	movs	r3, #0
 800af02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800af04:	f7ff ff3e 	bl	800ad84 <__NVIC_GetPriorityGrouping>
 800af08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800af0a:	687a      	ldr	r2, [r7, #4]
 800af0c:	68b9      	ldr	r1, [r7, #8]
 800af0e:	6978      	ldr	r0, [r7, #20]
 800af10:	f7ff ff8e 	bl	800ae30 <NVIC_EncodePriority>
 800af14:	4602      	mov	r2, r0
 800af16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af1a:	4611      	mov	r1, r2
 800af1c:	4618      	mov	r0, r3
 800af1e:	f7ff ff5d 	bl	800addc <__NVIC_SetPriority>
}
 800af22:	bf00      	nop
 800af24:	3718      	adds	r7, #24
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}

0800af2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800af2a:	b580      	push	{r7, lr}
 800af2c:	b082      	sub	sp, #8
 800af2e:	af00      	add	r7, sp, #0
 800af30:	4603      	mov	r3, r0
 800af32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800af34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af38:	4618      	mov	r0, r3
 800af3a:	f7ff ff31 	bl	800ada0 <__NVIC_EnableIRQ>
}
 800af3e:	bf00      	nop
 800af40:	3708      	adds	r7, #8
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}

0800af46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800af46:	b580      	push	{r7, lr}
 800af48:	b082      	sub	sp, #8
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f7ff ffa2 	bl	800ae98 <SysTick_Config>
 800af54:	4603      	mov	r3, r0
}
 800af56:	4618      	mov	r0, r3
 800af58:	3708      	adds	r7, #8
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}

0800af5e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800af5e:	b480      	push	{r7}
 800af60:	b085      	sub	sp, #20
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af66:	2300      	movs	r3, #0
 800af68:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800af70:	b2db      	uxtb	r3, r3
 800af72:	2b02      	cmp	r3, #2
 800af74:	d008      	beq.n	800af88 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2204      	movs	r2, #4
 800af7a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2200      	movs	r2, #0
 800af80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800af84:	2301      	movs	r3, #1
 800af86:	e022      	b.n	800afce <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	681a      	ldr	r2, [r3, #0]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f022 020e 	bic.w	r2, r2, #14
 800af96:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	681a      	ldr	r2, [r3, #0]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f022 0201 	bic.w	r2, r2, #1
 800afa6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afac:	f003 021c 	and.w	r2, r3, #28
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afb4:	2101      	movs	r1, #1
 800afb6:	fa01 f202 	lsl.w	r2, r1, r2
 800afba:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2201      	movs	r2, #1
 800afc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2200      	movs	r2, #0
 800afc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800afcc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3714      	adds	r7, #20
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr

0800afda <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800afda:	b580      	push	{r7, lr}
 800afdc:	b084      	sub	sp, #16
 800afde:	af00      	add	r7, sp, #0
 800afe0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800afe2:	2300      	movs	r3, #0
 800afe4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800afec:	b2db      	uxtb	r3, r3
 800afee:	2b02      	cmp	r3, #2
 800aff0:	d005      	beq.n	800affe <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2204      	movs	r2, #4
 800aff6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800aff8:	2301      	movs	r3, #1
 800affa:	73fb      	strb	r3, [r7, #15]
 800affc:	e029      	b.n	800b052 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f022 020e 	bic.w	r2, r2, #14
 800b00c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	681a      	ldr	r2, [r3, #0]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f022 0201 	bic.w	r2, r2, #1
 800b01c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b022:	f003 021c 	and.w	r2, r3, #28
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b02a:	2101      	movs	r1, #1
 800b02c:	fa01 f202 	lsl.w	r2, r1, r2
 800b030:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2201      	movs	r2, #1
 800b036:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2200      	movs	r2, #0
 800b03e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b046:	2b00      	cmp	r3, #0
 800b048:	d003      	beq.n	800b052 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	4798      	blx	r3
    }
  }
  return status;
 800b052:	7bfb      	ldrb	r3, [r7, #15]
}
 800b054:	4618      	mov	r0, r3
 800b056:	3710      	adds	r7, #16
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b087      	sub	sp, #28
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800b066:	2300      	movs	r3, #0
 800b068:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b06a:	e154      	b.n	800b316 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	681a      	ldr	r2, [r3, #0]
 800b070:	2101      	movs	r1, #1
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	fa01 f303 	lsl.w	r3, r1, r3
 800b078:	4013      	ands	r3, r2
 800b07a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	f000 8146 	beq.w	800b310 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	685b      	ldr	r3, [r3, #4]
 800b088:	f003 0303 	and.w	r3, r3, #3
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	d005      	beq.n	800b09c <HAL_GPIO_Init+0x40>
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	f003 0303 	and.w	r3, r3, #3
 800b098:	2b02      	cmp	r3, #2
 800b09a:	d130      	bne.n	800b0fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	689b      	ldr	r3, [r3, #8]
 800b0a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	005b      	lsls	r3, r3, #1
 800b0a6:	2203      	movs	r2, #3
 800b0a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b0ac:	43db      	mvns	r3, r3
 800b0ae:	693a      	ldr	r2, [r7, #16]
 800b0b0:	4013      	ands	r3, r2
 800b0b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	68da      	ldr	r2, [r3, #12]
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	005b      	lsls	r3, r3, #1
 800b0bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b0c0:	693a      	ldr	r2, [r7, #16]
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	693a      	ldr	r2, [r7, #16]
 800b0ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	fa02 f303 	lsl.w	r3, r2, r3
 800b0da:	43db      	mvns	r3, r3
 800b0dc:	693a      	ldr	r2, [r7, #16]
 800b0de:	4013      	ands	r3, r2
 800b0e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	091b      	lsrs	r3, r3, #4
 800b0e8:	f003 0201 	and.w	r2, r3, #1
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b0f2:	693a      	ldr	r2, [r7, #16]
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	693a      	ldr	r2, [r7, #16]
 800b0fc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	f003 0303 	and.w	r3, r3, #3
 800b106:	2b03      	cmp	r3, #3
 800b108:	d017      	beq.n	800b13a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	68db      	ldr	r3, [r3, #12]
 800b10e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	005b      	lsls	r3, r3, #1
 800b114:	2203      	movs	r2, #3
 800b116:	fa02 f303 	lsl.w	r3, r2, r3
 800b11a:	43db      	mvns	r3, r3
 800b11c:	693a      	ldr	r2, [r7, #16]
 800b11e:	4013      	ands	r3, r2
 800b120:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	689a      	ldr	r2, [r3, #8]
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	005b      	lsls	r3, r3, #1
 800b12a:	fa02 f303 	lsl.w	r3, r2, r3
 800b12e:	693a      	ldr	r2, [r7, #16]
 800b130:	4313      	orrs	r3, r2
 800b132:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	693a      	ldr	r2, [r7, #16]
 800b138:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	f003 0303 	and.w	r3, r3, #3
 800b142:	2b02      	cmp	r3, #2
 800b144:	d123      	bne.n	800b18e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	08da      	lsrs	r2, r3, #3
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	3208      	adds	r2, #8
 800b14e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b152:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	f003 0307 	and.w	r3, r3, #7
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	220f      	movs	r2, #15
 800b15e:	fa02 f303 	lsl.w	r3, r2, r3
 800b162:	43db      	mvns	r3, r3
 800b164:	693a      	ldr	r2, [r7, #16]
 800b166:	4013      	ands	r3, r2
 800b168:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	691a      	ldr	r2, [r3, #16]
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	f003 0307 	and.w	r3, r3, #7
 800b174:	009b      	lsls	r3, r3, #2
 800b176:	fa02 f303 	lsl.w	r3, r2, r3
 800b17a:	693a      	ldr	r2, [r7, #16]
 800b17c:	4313      	orrs	r3, r2
 800b17e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	08da      	lsrs	r2, r3, #3
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	3208      	adds	r2, #8
 800b188:	6939      	ldr	r1, [r7, #16]
 800b18a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	005b      	lsls	r3, r3, #1
 800b198:	2203      	movs	r2, #3
 800b19a:	fa02 f303 	lsl.w	r3, r2, r3
 800b19e:	43db      	mvns	r3, r3
 800b1a0:	693a      	ldr	r2, [r7, #16]
 800b1a2:	4013      	ands	r3, r2
 800b1a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	f003 0203 	and.w	r2, r3, #3
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	005b      	lsls	r3, r3, #1
 800b1b2:	fa02 f303 	lsl.w	r3, r2, r3
 800b1b6:	693a      	ldr	r2, [r7, #16]
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	693a      	ldr	r2, [r7, #16]
 800b1c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	f000 80a0 	beq.w	800b310 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b1d0:	4b58      	ldr	r3, [pc, #352]	; (800b334 <HAL_GPIO_Init+0x2d8>)
 800b1d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1d4:	4a57      	ldr	r2, [pc, #348]	; (800b334 <HAL_GPIO_Init+0x2d8>)
 800b1d6:	f043 0301 	orr.w	r3, r3, #1
 800b1da:	6613      	str	r3, [r2, #96]	; 0x60
 800b1dc:	4b55      	ldr	r3, [pc, #340]	; (800b334 <HAL_GPIO_Init+0x2d8>)
 800b1de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1e0:	f003 0301 	and.w	r3, r3, #1
 800b1e4:	60bb      	str	r3, [r7, #8]
 800b1e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800b1e8:	4a53      	ldr	r2, [pc, #332]	; (800b338 <HAL_GPIO_Init+0x2dc>)
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	089b      	lsrs	r3, r3, #2
 800b1ee:	3302      	adds	r3, #2
 800b1f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	f003 0303 	and.w	r3, r3, #3
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	220f      	movs	r2, #15
 800b200:	fa02 f303 	lsl.w	r3, r2, r3
 800b204:	43db      	mvns	r3, r3
 800b206:	693a      	ldr	r2, [r7, #16]
 800b208:	4013      	ands	r3, r2
 800b20a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b212:	d019      	beq.n	800b248 <HAL_GPIO_Init+0x1ec>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	4a49      	ldr	r2, [pc, #292]	; (800b33c <HAL_GPIO_Init+0x2e0>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d013      	beq.n	800b244 <HAL_GPIO_Init+0x1e8>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	4a48      	ldr	r2, [pc, #288]	; (800b340 <HAL_GPIO_Init+0x2e4>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d00d      	beq.n	800b240 <HAL_GPIO_Init+0x1e4>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	4a47      	ldr	r2, [pc, #284]	; (800b344 <HAL_GPIO_Init+0x2e8>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d007      	beq.n	800b23c <HAL_GPIO_Init+0x1e0>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	4a46      	ldr	r2, [pc, #280]	; (800b348 <HAL_GPIO_Init+0x2ec>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d101      	bne.n	800b238 <HAL_GPIO_Init+0x1dc>
 800b234:	2304      	movs	r3, #4
 800b236:	e008      	b.n	800b24a <HAL_GPIO_Init+0x1ee>
 800b238:	2307      	movs	r3, #7
 800b23a:	e006      	b.n	800b24a <HAL_GPIO_Init+0x1ee>
 800b23c:	2303      	movs	r3, #3
 800b23e:	e004      	b.n	800b24a <HAL_GPIO_Init+0x1ee>
 800b240:	2302      	movs	r3, #2
 800b242:	e002      	b.n	800b24a <HAL_GPIO_Init+0x1ee>
 800b244:	2301      	movs	r3, #1
 800b246:	e000      	b.n	800b24a <HAL_GPIO_Init+0x1ee>
 800b248:	2300      	movs	r3, #0
 800b24a:	697a      	ldr	r2, [r7, #20]
 800b24c:	f002 0203 	and.w	r2, r2, #3
 800b250:	0092      	lsls	r2, r2, #2
 800b252:	4093      	lsls	r3, r2
 800b254:	693a      	ldr	r2, [r7, #16]
 800b256:	4313      	orrs	r3, r2
 800b258:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800b25a:	4937      	ldr	r1, [pc, #220]	; (800b338 <HAL_GPIO_Init+0x2dc>)
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	089b      	lsrs	r3, r3, #2
 800b260:	3302      	adds	r3, #2
 800b262:	693a      	ldr	r2, [r7, #16]
 800b264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b268:	4b38      	ldr	r3, [pc, #224]	; (800b34c <HAL_GPIO_Init+0x2f0>)
 800b26a:	689b      	ldr	r3, [r3, #8]
 800b26c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	43db      	mvns	r3, r3
 800b272:	693a      	ldr	r2, [r7, #16]
 800b274:	4013      	ands	r3, r2
 800b276:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b280:	2b00      	cmp	r3, #0
 800b282:	d003      	beq.n	800b28c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800b284:	693a      	ldr	r2, [r7, #16]
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	4313      	orrs	r3, r2
 800b28a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800b28c:	4a2f      	ldr	r2, [pc, #188]	; (800b34c <HAL_GPIO_Init+0x2f0>)
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800b292:	4b2e      	ldr	r3, [pc, #184]	; (800b34c <HAL_GPIO_Init+0x2f0>)
 800b294:	68db      	ldr	r3, [r3, #12]
 800b296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	43db      	mvns	r3, r3
 800b29c:	693a      	ldr	r2, [r7, #16]
 800b29e:	4013      	ands	r3, r2
 800b2a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d003      	beq.n	800b2b6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800b2ae:	693a      	ldr	r2, [r7, #16]
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b2b6:	4a25      	ldr	r2, [pc, #148]	; (800b34c <HAL_GPIO_Init+0x2f0>)
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800b2bc:	4b23      	ldr	r3, [pc, #140]	; (800b34c <HAL_GPIO_Init+0x2f0>)
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	43db      	mvns	r3, r3
 800b2c6:	693a      	ldr	r2, [r7, #16]
 800b2c8:	4013      	ands	r3, r2
 800b2ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	685b      	ldr	r3, [r3, #4]
 800b2d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d003      	beq.n	800b2e0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800b2d8:	693a      	ldr	r2, [r7, #16]
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	4313      	orrs	r3, r2
 800b2de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800b2e0:	4a1a      	ldr	r2, [pc, #104]	; (800b34c <HAL_GPIO_Init+0x2f0>)
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800b2e6:	4b19      	ldr	r3, [pc, #100]	; (800b34c <HAL_GPIO_Init+0x2f0>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	43db      	mvns	r3, r3
 800b2f0:	693a      	ldr	r2, [r7, #16]
 800b2f2:	4013      	ands	r3, r2
 800b2f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d003      	beq.n	800b30a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800b302:	693a      	ldr	r2, [r7, #16]
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	4313      	orrs	r3, r2
 800b308:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800b30a:	4a10      	ldr	r2, [pc, #64]	; (800b34c <HAL_GPIO_Init+0x2f0>)
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	3301      	adds	r3, #1
 800b314:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	681a      	ldr	r2, [r3, #0]
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	fa22 f303 	lsr.w	r3, r2, r3
 800b320:	2b00      	cmp	r3, #0
 800b322:	f47f aea3 	bne.w	800b06c <HAL_GPIO_Init+0x10>
  }
}
 800b326:	bf00      	nop
 800b328:	bf00      	nop
 800b32a:	371c      	adds	r7, #28
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr
 800b334:	40021000 	.word	0x40021000
 800b338:	40010000 	.word	0x40010000
 800b33c:	48000400 	.word	0x48000400
 800b340:	48000800 	.word	0x48000800
 800b344:	48000c00 	.word	0x48000c00
 800b348:	48001000 	.word	0x48001000
 800b34c:	40010400 	.word	0x40010400

0800b350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b350:	b480      	push	{r7}
 800b352:	b083      	sub	sp, #12
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	460b      	mov	r3, r1
 800b35a:	807b      	strh	r3, [r7, #2]
 800b35c:	4613      	mov	r3, r2
 800b35e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b360:	787b      	ldrb	r3, [r7, #1]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d003      	beq.n	800b36e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b366:	887a      	ldrh	r2, [r7, #2]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b36c:	e002      	b.n	800b374 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b36e:	887a      	ldrh	r2, [r7, #2]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b374:	bf00      	nop
 800b376:	370c      	adds	r7, #12
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr

0800b380 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b380:	b480      	push	{r7}
 800b382:	b085      	sub	sp, #20
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	460b      	mov	r3, r1
 800b38a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	695b      	ldr	r3, [r3, #20]
 800b390:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b392:	887a      	ldrh	r2, [r7, #2]
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	4013      	ands	r3, r2
 800b398:	041a      	lsls	r2, r3, #16
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	43d9      	mvns	r1, r3
 800b39e:	887b      	ldrh	r3, [r7, #2]
 800b3a0:	400b      	ands	r3, r1
 800b3a2:	431a      	orrs	r2, r3
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	619a      	str	r2, [r3, #24]
}
 800b3a8:	bf00      	nop
 800b3aa:	3714      	adds	r7, #20
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b082      	sub	sp, #8
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d101      	bne.n	800b3c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	e081      	b.n	800b4ca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d106      	bne.n	800b3e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f7f7 fafa 	bl	80029d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2224      	movs	r2, #36	; 0x24
 800b3e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	681a      	ldr	r2, [r3, #0]
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f022 0201 	bic.w	r2, r2, #1
 800b3f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	685a      	ldr	r2, [r3, #4]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b404:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	689a      	ldr	r2, [r3, #8]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b414:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	68db      	ldr	r3, [r3, #12]
 800b41a:	2b01      	cmp	r3, #1
 800b41c:	d107      	bne.n	800b42e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	689a      	ldr	r2, [r3, #8]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b42a:	609a      	str	r2, [r3, #8]
 800b42c:	e006      	b.n	800b43c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	689a      	ldr	r2, [r3, #8]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b43a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	68db      	ldr	r3, [r3, #12]
 800b440:	2b02      	cmp	r3, #2
 800b442:	d104      	bne.n	800b44e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b44c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	687a      	ldr	r2, [r7, #4]
 800b456:	6812      	ldr	r2, [r2, #0]
 800b458:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b45c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b460:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	68da      	ldr	r2, [r3, #12]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b470:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	691a      	ldr	r2, [r3, #16]
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	695b      	ldr	r3, [r3, #20]
 800b47a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	699b      	ldr	r3, [r3, #24]
 800b482:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	430a      	orrs	r2, r1
 800b48a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	69d9      	ldr	r1, [r3, #28]
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6a1a      	ldr	r2, [r3, #32]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	430a      	orrs	r2, r1
 800b49a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	681a      	ldr	r2, [r3, #0]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f042 0201 	orr.w	r2, r2, #1
 800b4aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2220      	movs	r2, #32
 800b4b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b4c8:	2300      	movs	r3, #0
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3708      	adds	r7, #8
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}

0800b4d2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b4d2:	b480      	push	{r7}
 800b4d4:	b083      	sub	sp, #12
 800b4d6:	af00      	add	r7, sp, #0
 800b4d8:	6078      	str	r0, [r7, #4]
 800b4da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b4e2:	b2db      	uxtb	r3, r3
 800b4e4:	2b20      	cmp	r3, #32
 800b4e6:	d138      	bne.n	800b55a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b4ee:	2b01      	cmp	r3, #1
 800b4f0:	d101      	bne.n	800b4f6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b4f2:	2302      	movs	r3, #2
 800b4f4:	e032      	b.n	800b55c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2224      	movs	r2, #36	; 0x24
 800b502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f022 0201 	bic.w	r2, r2, #1
 800b514:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b524:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	6819      	ldr	r1, [r3, #0]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	683a      	ldr	r2, [r7, #0]
 800b532:	430a      	orrs	r2, r1
 800b534:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f042 0201 	orr.w	r2, r2, #1
 800b544:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2220      	movs	r2, #32
 800b54a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2200      	movs	r2, #0
 800b552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b556:	2300      	movs	r3, #0
 800b558:	e000      	b.n	800b55c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b55a:	2302      	movs	r3, #2
  }
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	370c      	adds	r7, #12
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr

0800b568 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b568:	b480      	push	{r7}
 800b56a:	b085      	sub	sp, #20
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b578:	b2db      	uxtb	r3, r3
 800b57a:	2b20      	cmp	r3, #32
 800b57c:	d139      	bne.n	800b5f2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b584:	2b01      	cmp	r3, #1
 800b586:	d101      	bne.n	800b58c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b588:	2302      	movs	r3, #2
 800b58a:	e033      	b.n	800b5f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2201      	movs	r2, #1
 800b590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2224      	movs	r2, #36	; 0x24
 800b598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	681a      	ldr	r2, [r3, #0]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f022 0201 	bic.w	r2, r2, #1
 800b5aa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b5ba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	021b      	lsls	r3, r3, #8
 800b5c0:	68fa      	ldr	r2, [r7, #12]
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	68fa      	ldr	r2, [r7, #12]
 800b5cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f042 0201 	orr.w	r2, r2, #1
 800b5dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2220      	movs	r2, #32
 800b5e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	e000      	b.n	800b5f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b5f2:	2302      	movs	r3, #2
  }
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3714      	adds	r7, #20
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr

0800b600 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b600:	b480      	push	{r7}
 800b602:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800b604:	4b04      	ldr	r3, [pc, #16]	; (800b618 <HAL_PWREx_GetVoltageRange+0x18>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	46bd      	mov	sp, r7
 800b610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b614:	4770      	bx	lr
 800b616:	bf00      	nop
 800b618:	40007000 	.word	0x40007000

0800b61c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b085      	sub	sp, #20
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b62a:	d130      	bne.n	800b68e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800b62c:	4b23      	ldr	r3, [pc, #140]	; (800b6bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b634:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b638:	d038      	beq.n	800b6ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b63a:	4b20      	ldr	r3, [pc, #128]	; (800b6bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b642:	4a1e      	ldr	r2, [pc, #120]	; (800b6bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b644:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b648:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b64a:	4b1d      	ldr	r3, [pc, #116]	; (800b6c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	2232      	movs	r2, #50	; 0x32
 800b650:	fb02 f303 	mul.w	r3, r2, r3
 800b654:	4a1b      	ldr	r2, [pc, #108]	; (800b6c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800b656:	fba2 2303 	umull	r2, r3, r2, r3
 800b65a:	0c9b      	lsrs	r3, r3, #18
 800b65c:	3301      	adds	r3, #1
 800b65e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b660:	e002      	b.n	800b668 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	3b01      	subs	r3, #1
 800b666:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b668:	4b14      	ldr	r3, [pc, #80]	; (800b6bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b66a:	695b      	ldr	r3, [r3, #20]
 800b66c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b674:	d102      	bne.n	800b67c <HAL_PWREx_ControlVoltageScaling+0x60>
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d1f2      	bne.n	800b662 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b67c:	4b0f      	ldr	r3, [pc, #60]	; (800b6bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b67e:	695b      	ldr	r3, [r3, #20]
 800b680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b688:	d110      	bne.n	800b6ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800b68a:	2303      	movs	r3, #3
 800b68c:	e00f      	b.n	800b6ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800b68e:	4b0b      	ldr	r3, [pc, #44]	; (800b6bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b69a:	d007      	beq.n	800b6ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b69c:	4b07      	ldr	r3, [pc, #28]	; (800b6bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b6a4:	4a05      	ldr	r2, [pc, #20]	; (800b6bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b6a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b6aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800b6ac:	2300      	movs	r3, #0
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3714      	adds	r7, #20
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b8:	4770      	bx	lr
 800b6ba:	bf00      	nop
 800b6bc:	40007000 	.word	0x40007000
 800b6c0:	20000000 	.word	0x20000000
 800b6c4:	431bde83 	.word	0x431bde83

0800b6c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b088      	sub	sp, #32
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d102      	bne.n	800b6dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	f000 bc02 	b.w	800bee0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b6dc:	4b96      	ldr	r3, [pc, #600]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b6de:	689b      	ldr	r3, [r3, #8]
 800b6e0:	f003 030c 	and.w	r3, r3, #12
 800b6e4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b6e6:	4b94      	ldr	r3, [pc, #592]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b6e8:	68db      	ldr	r3, [r3, #12]
 800b6ea:	f003 0303 	and.w	r3, r3, #3
 800b6ee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f003 0310 	and.w	r3, r3, #16
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	f000 80e4 	beq.w	800b8c6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b6fe:	69bb      	ldr	r3, [r7, #24]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d007      	beq.n	800b714 <HAL_RCC_OscConfig+0x4c>
 800b704:	69bb      	ldr	r3, [r7, #24]
 800b706:	2b0c      	cmp	r3, #12
 800b708:	f040 808b 	bne.w	800b822 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	2b01      	cmp	r3, #1
 800b710:	f040 8087 	bne.w	800b822 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b714:	4b88      	ldr	r3, [pc, #544]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f003 0302 	and.w	r3, r3, #2
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d005      	beq.n	800b72c <HAL_RCC_OscConfig+0x64>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	699b      	ldr	r3, [r3, #24]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d101      	bne.n	800b72c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800b728:	2301      	movs	r3, #1
 800b72a:	e3d9      	b.n	800bee0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6a1a      	ldr	r2, [r3, #32]
 800b730:	4b81      	ldr	r3, [pc, #516]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f003 0308 	and.w	r3, r3, #8
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d004      	beq.n	800b746 <HAL_RCC_OscConfig+0x7e>
 800b73c:	4b7e      	ldr	r3, [pc, #504]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b744:	e005      	b.n	800b752 <HAL_RCC_OscConfig+0x8a>
 800b746:	4b7c      	ldr	r3, [pc, #496]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b74c:	091b      	lsrs	r3, r3, #4
 800b74e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b752:	4293      	cmp	r3, r2
 800b754:	d223      	bcs.n	800b79e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6a1b      	ldr	r3, [r3, #32]
 800b75a:	4618      	mov	r0, r3
 800b75c:	f000 fd8c 	bl	800c278 <RCC_SetFlashLatencyFromMSIRange>
 800b760:	4603      	mov	r3, r0
 800b762:	2b00      	cmp	r3, #0
 800b764:	d001      	beq.n	800b76a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800b766:	2301      	movs	r3, #1
 800b768:	e3ba      	b.n	800bee0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b76a:	4b73      	ldr	r3, [pc, #460]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4a72      	ldr	r2, [pc, #456]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b770:	f043 0308 	orr.w	r3, r3, #8
 800b774:	6013      	str	r3, [r2, #0]
 800b776:	4b70      	ldr	r3, [pc, #448]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6a1b      	ldr	r3, [r3, #32]
 800b782:	496d      	ldr	r1, [pc, #436]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b784:	4313      	orrs	r3, r2
 800b786:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b788:	4b6b      	ldr	r3, [pc, #428]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	69db      	ldr	r3, [r3, #28]
 800b794:	021b      	lsls	r3, r3, #8
 800b796:	4968      	ldr	r1, [pc, #416]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b798:	4313      	orrs	r3, r2
 800b79a:	604b      	str	r3, [r1, #4]
 800b79c:	e025      	b.n	800b7ea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b79e:	4b66      	ldr	r3, [pc, #408]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	4a65      	ldr	r2, [pc, #404]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b7a4:	f043 0308 	orr.w	r3, r3, #8
 800b7a8:	6013      	str	r3, [r2, #0]
 800b7aa:	4b63      	ldr	r3, [pc, #396]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6a1b      	ldr	r3, [r3, #32]
 800b7b6:	4960      	ldr	r1, [pc, #384]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b7bc:	4b5e      	ldr	r3, [pc, #376]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	69db      	ldr	r3, [r3, #28]
 800b7c8:	021b      	lsls	r3, r3, #8
 800b7ca:	495b      	ldr	r1, [pc, #364]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b7d0:	69bb      	ldr	r3, [r7, #24]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d109      	bne.n	800b7ea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6a1b      	ldr	r3, [r3, #32]
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f000 fd4c 	bl	800c278 <RCC_SetFlashLatencyFromMSIRange>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d001      	beq.n	800b7ea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e37a      	b.n	800bee0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b7ea:	f000 fc81 	bl	800c0f0 <HAL_RCC_GetSysClockFreq>
 800b7ee:	4602      	mov	r2, r0
 800b7f0:	4b51      	ldr	r3, [pc, #324]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b7f2:	689b      	ldr	r3, [r3, #8]
 800b7f4:	091b      	lsrs	r3, r3, #4
 800b7f6:	f003 030f 	and.w	r3, r3, #15
 800b7fa:	4950      	ldr	r1, [pc, #320]	; (800b93c <HAL_RCC_OscConfig+0x274>)
 800b7fc:	5ccb      	ldrb	r3, [r1, r3]
 800b7fe:	f003 031f 	and.w	r3, r3, #31
 800b802:	fa22 f303 	lsr.w	r3, r2, r3
 800b806:	4a4e      	ldr	r2, [pc, #312]	; (800b940 <HAL_RCC_OscConfig+0x278>)
 800b808:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800b80a:	4b4e      	ldr	r3, [pc, #312]	; (800b944 <HAL_RCC_OscConfig+0x27c>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	4618      	mov	r0, r3
 800b810:	f7ff fa14 	bl	800ac3c <HAL_InitTick>
 800b814:	4603      	mov	r3, r0
 800b816:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800b818:	7bfb      	ldrb	r3, [r7, #15]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d052      	beq.n	800b8c4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800b81e:	7bfb      	ldrb	r3, [r7, #15]
 800b820:	e35e      	b.n	800bee0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	699b      	ldr	r3, [r3, #24]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d032      	beq.n	800b890 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800b82a:	4b43      	ldr	r3, [pc, #268]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	4a42      	ldr	r2, [pc, #264]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b830:	f043 0301 	orr.w	r3, r3, #1
 800b834:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b836:	f7ff fa51 	bl	800acdc <HAL_GetTick>
 800b83a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b83c:	e008      	b.n	800b850 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b83e:	f7ff fa4d 	bl	800acdc <HAL_GetTick>
 800b842:	4602      	mov	r2, r0
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	1ad3      	subs	r3, r2, r3
 800b848:	2b02      	cmp	r3, #2
 800b84a:	d901      	bls.n	800b850 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800b84c:	2303      	movs	r3, #3
 800b84e:	e347      	b.n	800bee0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b850:	4b39      	ldr	r3, [pc, #228]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f003 0302 	and.w	r3, r3, #2
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d0f0      	beq.n	800b83e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b85c:	4b36      	ldr	r3, [pc, #216]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4a35      	ldr	r2, [pc, #212]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b862:	f043 0308 	orr.w	r3, r3, #8
 800b866:	6013      	str	r3, [r2, #0]
 800b868:	4b33      	ldr	r3, [pc, #204]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6a1b      	ldr	r3, [r3, #32]
 800b874:	4930      	ldr	r1, [pc, #192]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b876:	4313      	orrs	r3, r2
 800b878:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b87a:	4b2f      	ldr	r3, [pc, #188]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	69db      	ldr	r3, [r3, #28]
 800b886:	021b      	lsls	r3, r3, #8
 800b888:	492b      	ldr	r1, [pc, #172]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b88a:	4313      	orrs	r3, r2
 800b88c:	604b      	str	r3, [r1, #4]
 800b88e:	e01a      	b.n	800b8c6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800b890:	4b29      	ldr	r3, [pc, #164]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4a28      	ldr	r2, [pc, #160]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b896:	f023 0301 	bic.w	r3, r3, #1
 800b89a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b89c:	f7ff fa1e 	bl	800acdc <HAL_GetTick>
 800b8a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b8a2:	e008      	b.n	800b8b6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b8a4:	f7ff fa1a 	bl	800acdc <HAL_GetTick>
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	1ad3      	subs	r3, r2, r3
 800b8ae:	2b02      	cmp	r3, #2
 800b8b0:	d901      	bls.n	800b8b6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800b8b2:	2303      	movs	r3, #3
 800b8b4:	e314      	b.n	800bee0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b8b6:	4b20      	ldr	r3, [pc, #128]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f003 0302 	and.w	r3, r3, #2
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d1f0      	bne.n	800b8a4 <HAL_RCC_OscConfig+0x1dc>
 800b8c2:	e000      	b.n	800b8c6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b8c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f003 0301 	and.w	r3, r3, #1
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d073      	beq.n	800b9ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800b8d2:	69bb      	ldr	r3, [r7, #24]
 800b8d4:	2b08      	cmp	r3, #8
 800b8d6:	d005      	beq.n	800b8e4 <HAL_RCC_OscConfig+0x21c>
 800b8d8:	69bb      	ldr	r3, [r7, #24]
 800b8da:	2b0c      	cmp	r3, #12
 800b8dc:	d10e      	bne.n	800b8fc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	2b03      	cmp	r3, #3
 800b8e2:	d10b      	bne.n	800b8fc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b8e4:	4b14      	ldr	r3, [pc, #80]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d063      	beq.n	800b9b8 <HAL_RCC_OscConfig+0x2f0>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d15f      	bne.n	800b9b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	e2f1      	b.n	800bee0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b904:	d106      	bne.n	800b914 <HAL_RCC_OscConfig+0x24c>
 800b906:	4b0c      	ldr	r3, [pc, #48]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	4a0b      	ldr	r2, [pc, #44]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b90c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b910:	6013      	str	r3, [r2, #0]
 800b912:	e025      	b.n	800b960 <HAL_RCC_OscConfig+0x298>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b91c:	d114      	bne.n	800b948 <HAL_RCC_OscConfig+0x280>
 800b91e:	4b06      	ldr	r3, [pc, #24]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	4a05      	ldr	r2, [pc, #20]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b928:	6013      	str	r3, [r2, #0]
 800b92a:	4b03      	ldr	r3, [pc, #12]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4a02      	ldr	r2, [pc, #8]	; (800b938 <HAL_RCC_OscConfig+0x270>)
 800b930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b934:	6013      	str	r3, [r2, #0]
 800b936:	e013      	b.n	800b960 <HAL_RCC_OscConfig+0x298>
 800b938:	40021000 	.word	0x40021000
 800b93c:	0801059c 	.word	0x0801059c
 800b940:	20000000 	.word	0x20000000
 800b944:	20000004 	.word	0x20000004
 800b948:	4ba0      	ldr	r3, [pc, #640]	; (800bbcc <HAL_RCC_OscConfig+0x504>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	4a9f      	ldr	r2, [pc, #636]	; (800bbcc <HAL_RCC_OscConfig+0x504>)
 800b94e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b952:	6013      	str	r3, [r2, #0]
 800b954:	4b9d      	ldr	r3, [pc, #628]	; (800bbcc <HAL_RCC_OscConfig+0x504>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	4a9c      	ldr	r2, [pc, #624]	; (800bbcc <HAL_RCC_OscConfig+0x504>)
 800b95a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b95e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d013      	beq.n	800b990 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b968:	f7ff f9b8 	bl	800acdc <HAL_GetTick>
 800b96c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b96e:	e008      	b.n	800b982 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b970:	f7ff f9b4 	bl	800acdc <HAL_GetTick>
 800b974:	4602      	mov	r2, r0
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	1ad3      	subs	r3, r2, r3
 800b97a:	2b64      	cmp	r3, #100	; 0x64
 800b97c:	d901      	bls.n	800b982 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800b97e:	2303      	movs	r3, #3
 800b980:	e2ae      	b.n	800bee0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b982:	4b92      	ldr	r3, [pc, #584]	; (800bbcc <HAL_RCC_OscConfig+0x504>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d0f0      	beq.n	800b970 <HAL_RCC_OscConfig+0x2a8>
 800b98e:	e014      	b.n	800b9ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b990:	f7ff f9a4 	bl	800acdc <HAL_GetTick>
 800b994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b996:	e008      	b.n	800b9aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b998:	f7ff f9a0 	bl	800acdc <HAL_GetTick>
 800b99c:	4602      	mov	r2, r0
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	1ad3      	subs	r3, r2, r3
 800b9a2:	2b64      	cmp	r3, #100	; 0x64
 800b9a4:	d901      	bls.n	800b9aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800b9a6:	2303      	movs	r3, #3
 800b9a8:	e29a      	b.n	800bee0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b9aa:	4b88      	ldr	r3, [pc, #544]	; (800bbcc <HAL_RCC_OscConfig+0x504>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d1f0      	bne.n	800b998 <HAL_RCC_OscConfig+0x2d0>
 800b9b6:	e000      	b.n	800b9ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b9b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f003 0302 	and.w	r3, r3, #2
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d060      	beq.n	800ba88 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800b9c6:	69bb      	ldr	r3, [r7, #24]
 800b9c8:	2b04      	cmp	r3, #4
 800b9ca:	d005      	beq.n	800b9d8 <HAL_RCC_OscConfig+0x310>
 800b9cc:	69bb      	ldr	r3, [r7, #24]
 800b9ce:	2b0c      	cmp	r3, #12
 800b9d0:	d119      	bne.n	800ba06 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	2b02      	cmp	r3, #2
 800b9d6:	d116      	bne.n	800ba06 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b9d8:	4b7c      	ldr	r3, [pc, #496]	; (800bbcc <HAL_RCC_OscConfig+0x504>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d005      	beq.n	800b9f0 <HAL_RCC_OscConfig+0x328>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	68db      	ldr	r3, [r3, #12]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d101      	bne.n	800b9f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	e277      	b.n	800bee0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b9f0:	4b76      	ldr	r3, [pc, #472]	; (800bbcc <HAL_RCC_OscConfig+0x504>)
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	691b      	ldr	r3, [r3, #16]
 800b9fc:	061b      	lsls	r3, r3, #24
 800b9fe:	4973      	ldr	r1, [pc, #460]	; (800bbcc <HAL_RCC_OscConfig+0x504>)
 800ba00:	4313      	orrs	r3, r2
 800ba02:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ba04:	e040      	b.n	800ba88 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	68db      	ldr	r3, [r3, #12]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d023      	beq.n	800ba56 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ba0e:	4b6f      	ldr	r3, [pc, #444]	; (800bbcc <HAL_RCC_OscConfig+0x504>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	4a6e      	ldr	r2, [pc, #440]	; (800bbcc <HAL_RCC_OscConfig+0x504>)
 800ba14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba1a:	f7ff f95f 	bl	800acdc <HAL_GetTick>
 800ba1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ba20:	e008      	b.n	800ba34 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ba22:	f7ff f95b 	bl	800acdc <HAL_GetTick>
 800ba26:	4602      	mov	r2, r0
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	1ad3      	subs	r3, r2, r3
 800ba2c:	2b02      	cmp	r3, #2
 800ba2e:	d901      	bls.n	800ba34 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800ba30:	2303      	movs	r3, #3
 800ba32:	e255      	b.n	800bee0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ba34:	4b65      	ldr	r3, [pc, #404]	; (800bbcc <HAL_RCC_OscConfig+0x504>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d0f0      	beq.n	800ba22 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ba40:	4b62      	ldr	r3, [pc, #392]	; (800bbcc <HAL_RCC_OscConfig+0x504>)
 800ba42:	685b      	ldr	r3, [r3, #4]
 800ba44:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	691b      	ldr	r3, [r3, #16]
 800ba4c:	061b      	lsls	r3, r3, #24
 800ba4e:	495f      	ldr	r1, [pc, #380]	; (800bbcc <HAL_RCC_OscConfig+0x504>)
 800ba50:	4313      	orrs	r3, r2
 800ba52:	604b      	str	r3, [r1, #4]
 800ba54:	e018      	b.n	800ba88 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ba56:	4b5d      	ldr	r3, [pc, #372]	; (800bbcc <HAL_RCC_OscConfig+0x504>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4a5c      	ldr	r2, [pc, #368]	; (800bbcc <HAL_RCC_OscConfig+0x504>)
 800ba5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba62:	f7ff f93b 	bl	800acdc <HAL_GetTick>
 800ba66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ba68:	e008      	b.n	800ba7c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ba6a:	f7ff f937 	bl	800acdc <HAL_GetTick>
 800ba6e:	4602      	mov	r2, r0
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	1ad3      	subs	r3, r2, r3
 800ba74:	2b02      	cmp	r3, #2
 800ba76:	d901      	bls.n	800ba7c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800ba78:	2303      	movs	r3, #3
 800ba7a:	e231      	b.n	800bee0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ba7c:	4b53      	ldr	r3, [pc, #332]	; (800bbcc <HAL_RCC_OscConfig+0x504>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d1f0      	bne.n	800ba6a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f003 0308 	and.w	r3, r3, #8
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d03c      	beq.n	800bb0e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	695b      	ldr	r3, [r3, #20]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d01c      	beq.n	800bad6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ba9c:	4b4b      	ldr	r3, [pc, #300]	; (800bbcc <HAL_RCC_OscConfig+0x504>)
 800ba9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800baa2:	4a4a      	ldr	r2, [pc, #296]	; (800bbcc <HAL_RCC_OscConfig+0x504>)
 800baa4:	f043 0301 	orr.w	r3, r3, #1
 800baa8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800baac:	f7ff f916 	bl	800acdc <HAL_GetTick>
 800bab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bab2:	e008      	b.n	800bac6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bab4:	f7ff f912 	bl	800acdc <HAL_GetTick>
 800bab8:	4602      	mov	r2, r0
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	1ad3      	subs	r3, r2, r3
 800babe:	2b02      	cmp	r3, #2
 800bac0:	d901      	bls.n	800bac6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800bac2:	2303      	movs	r3, #3
 800bac4:	e20c      	b.n	800bee0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bac6:	4b41      	ldr	r3, [pc, #260]	; (800bbcc <HAL_RCC_OscConfig+0x504>)
 800bac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bacc:	f003 0302 	and.w	r3, r3, #2
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d0ef      	beq.n	800bab4 <HAL_RCC_OscConfig+0x3ec>
 800bad4:	e01b      	b.n	800bb0e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bad6:	4b3d      	ldr	r3, [pc, #244]	; (800bbcc <HAL_RCC_OscConfig+0x504>)
 800bad8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800badc:	4a3b      	ldr	r2, [pc, #236]	; (800bbcc <HAL_RCC_OscConfig+0x504>)
 800bade:	f023 0301 	bic.w	r3, r3, #1
 800bae2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bae6:	f7ff f8f9 	bl	800acdc <HAL_GetTick>
 800baea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800baec:	e008      	b.n	800bb00 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800baee:	f7ff f8f5 	bl	800acdc <HAL_GetTick>
 800baf2:	4602      	mov	r2, r0
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	1ad3      	subs	r3, r2, r3
 800baf8:	2b02      	cmp	r3, #2
 800bafa:	d901      	bls.n	800bb00 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800bafc:	2303      	movs	r3, #3
 800bafe:	e1ef      	b.n	800bee0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800bb00:	4b32      	ldr	r3, [pc, #200]	; (800bbcc <HAL_RCC_OscConfig+0x504>)
 800bb02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb06:	f003 0302 	and.w	r3, r3, #2
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d1ef      	bne.n	800baee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f003 0304 	and.w	r3, r3, #4
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	f000 80a6 	beq.w	800bc68 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800bb20:	4b2a      	ldr	r3, [pc, #168]	; (800bbcc <HAL_RCC_OscConfig+0x504>)
 800bb22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d10d      	bne.n	800bb48 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bb2c:	4b27      	ldr	r3, [pc, #156]	; (800bbcc <HAL_RCC_OscConfig+0x504>)
 800bb2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb30:	4a26      	ldr	r2, [pc, #152]	; (800bbcc <HAL_RCC_OscConfig+0x504>)
 800bb32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb36:	6593      	str	r3, [r2, #88]	; 0x58
 800bb38:	4b24      	ldr	r3, [pc, #144]	; (800bbcc <HAL_RCC_OscConfig+0x504>)
 800bb3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb40:	60bb      	str	r3, [r7, #8]
 800bb42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bb44:	2301      	movs	r3, #1
 800bb46:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bb48:	4b21      	ldr	r3, [pc, #132]	; (800bbd0 <HAL_RCC_OscConfig+0x508>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d118      	bne.n	800bb86 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bb54:	4b1e      	ldr	r3, [pc, #120]	; (800bbd0 <HAL_RCC_OscConfig+0x508>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	4a1d      	ldr	r2, [pc, #116]	; (800bbd0 <HAL_RCC_OscConfig+0x508>)
 800bb5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bb60:	f7ff f8bc 	bl	800acdc <HAL_GetTick>
 800bb64:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bb66:	e008      	b.n	800bb7a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bb68:	f7ff f8b8 	bl	800acdc <HAL_GetTick>
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	1ad3      	subs	r3, r2, r3
 800bb72:	2b02      	cmp	r3, #2
 800bb74:	d901      	bls.n	800bb7a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800bb76:	2303      	movs	r3, #3
 800bb78:	e1b2      	b.n	800bee0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bb7a:	4b15      	ldr	r3, [pc, #84]	; (800bbd0 <HAL_RCC_OscConfig+0x508>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d0f0      	beq.n	800bb68 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	689b      	ldr	r3, [r3, #8]
 800bb8a:	2b01      	cmp	r3, #1
 800bb8c:	d108      	bne.n	800bba0 <HAL_RCC_OscConfig+0x4d8>
 800bb8e:	4b0f      	ldr	r3, [pc, #60]	; (800bbcc <HAL_RCC_OscConfig+0x504>)
 800bb90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb94:	4a0d      	ldr	r2, [pc, #52]	; (800bbcc <HAL_RCC_OscConfig+0x504>)
 800bb96:	f043 0301 	orr.w	r3, r3, #1
 800bb9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bb9e:	e029      	b.n	800bbf4 <HAL_RCC_OscConfig+0x52c>
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	2b05      	cmp	r3, #5
 800bba6:	d115      	bne.n	800bbd4 <HAL_RCC_OscConfig+0x50c>
 800bba8:	4b08      	ldr	r3, [pc, #32]	; (800bbcc <HAL_RCC_OscConfig+0x504>)
 800bbaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbae:	4a07      	ldr	r2, [pc, #28]	; (800bbcc <HAL_RCC_OscConfig+0x504>)
 800bbb0:	f043 0304 	orr.w	r3, r3, #4
 800bbb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bbb8:	4b04      	ldr	r3, [pc, #16]	; (800bbcc <HAL_RCC_OscConfig+0x504>)
 800bbba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbbe:	4a03      	ldr	r2, [pc, #12]	; (800bbcc <HAL_RCC_OscConfig+0x504>)
 800bbc0:	f043 0301 	orr.w	r3, r3, #1
 800bbc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bbc8:	e014      	b.n	800bbf4 <HAL_RCC_OscConfig+0x52c>
 800bbca:	bf00      	nop
 800bbcc:	40021000 	.word	0x40021000
 800bbd0:	40007000 	.word	0x40007000
 800bbd4:	4b9a      	ldr	r3, [pc, #616]	; (800be40 <HAL_RCC_OscConfig+0x778>)
 800bbd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbda:	4a99      	ldr	r2, [pc, #612]	; (800be40 <HAL_RCC_OscConfig+0x778>)
 800bbdc:	f023 0301 	bic.w	r3, r3, #1
 800bbe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bbe4:	4b96      	ldr	r3, [pc, #600]	; (800be40 <HAL_RCC_OscConfig+0x778>)
 800bbe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbea:	4a95      	ldr	r2, [pc, #596]	; (800be40 <HAL_RCC_OscConfig+0x778>)
 800bbec:	f023 0304 	bic.w	r3, r3, #4
 800bbf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	689b      	ldr	r3, [r3, #8]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d016      	beq.n	800bc2a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bbfc:	f7ff f86e 	bl	800acdc <HAL_GetTick>
 800bc00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bc02:	e00a      	b.n	800bc1a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bc04:	f7ff f86a 	bl	800acdc <HAL_GetTick>
 800bc08:	4602      	mov	r2, r0
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	1ad3      	subs	r3, r2, r3
 800bc0e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc12:	4293      	cmp	r3, r2
 800bc14:	d901      	bls.n	800bc1a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800bc16:	2303      	movs	r3, #3
 800bc18:	e162      	b.n	800bee0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bc1a:	4b89      	ldr	r3, [pc, #548]	; (800be40 <HAL_RCC_OscConfig+0x778>)
 800bc1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc20:	f003 0302 	and.w	r3, r3, #2
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d0ed      	beq.n	800bc04 <HAL_RCC_OscConfig+0x53c>
 800bc28:	e015      	b.n	800bc56 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc2a:	f7ff f857 	bl	800acdc <HAL_GetTick>
 800bc2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bc30:	e00a      	b.n	800bc48 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bc32:	f7ff f853 	bl	800acdc <HAL_GetTick>
 800bc36:	4602      	mov	r2, r0
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	1ad3      	subs	r3, r2, r3
 800bc3c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc40:	4293      	cmp	r3, r2
 800bc42:	d901      	bls.n	800bc48 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800bc44:	2303      	movs	r3, #3
 800bc46:	e14b      	b.n	800bee0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bc48:	4b7d      	ldr	r3, [pc, #500]	; (800be40 <HAL_RCC_OscConfig+0x778>)
 800bc4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc4e:	f003 0302 	and.w	r3, r3, #2
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d1ed      	bne.n	800bc32 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bc56:	7ffb      	ldrb	r3, [r7, #31]
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d105      	bne.n	800bc68 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bc5c:	4b78      	ldr	r3, [pc, #480]	; (800be40 <HAL_RCC_OscConfig+0x778>)
 800bc5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc60:	4a77      	ldr	r2, [pc, #476]	; (800be40 <HAL_RCC_OscConfig+0x778>)
 800bc62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bc66:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f003 0320 	and.w	r3, r3, #32
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d03c      	beq.n	800bcee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d01c      	beq.n	800bcb6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bc7c:	4b70      	ldr	r3, [pc, #448]	; (800be40 <HAL_RCC_OscConfig+0x778>)
 800bc7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bc82:	4a6f      	ldr	r2, [pc, #444]	; (800be40 <HAL_RCC_OscConfig+0x778>)
 800bc84:	f043 0301 	orr.w	r3, r3, #1
 800bc88:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc8c:	f7ff f826 	bl	800acdc <HAL_GetTick>
 800bc90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800bc92:	e008      	b.n	800bca6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bc94:	f7ff f822 	bl	800acdc <HAL_GetTick>
 800bc98:	4602      	mov	r2, r0
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	1ad3      	subs	r3, r2, r3
 800bc9e:	2b02      	cmp	r3, #2
 800bca0:	d901      	bls.n	800bca6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800bca2:	2303      	movs	r3, #3
 800bca4:	e11c      	b.n	800bee0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800bca6:	4b66      	ldr	r3, [pc, #408]	; (800be40 <HAL_RCC_OscConfig+0x778>)
 800bca8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bcac:	f003 0302 	and.w	r3, r3, #2
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d0ef      	beq.n	800bc94 <HAL_RCC_OscConfig+0x5cc>
 800bcb4:	e01b      	b.n	800bcee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800bcb6:	4b62      	ldr	r3, [pc, #392]	; (800be40 <HAL_RCC_OscConfig+0x778>)
 800bcb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bcbc:	4a60      	ldr	r2, [pc, #384]	; (800be40 <HAL_RCC_OscConfig+0x778>)
 800bcbe:	f023 0301 	bic.w	r3, r3, #1
 800bcc2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bcc6:	f7ff f809 	bl	800acdc <HAL_GetTick>
 800bcca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800bccc:	e008      	b.n	800bce0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bcce:	f7ff f805 	bl	800acdc <HAL_GetTick>
 800bcd2:	4602      	mov	r2, r0
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	1ad3      	subs	r3, r2, r3
 800bcd8:	2b02      	cmp	r3, #2
 800bcda:	d901      	bls.n	800bce0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800bcdc:	2303      	movs	r3, #3
 800bcde:	e0ff      	b.n	800bee0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800bce0:	4b57      	ldr	r3, [pc, #348]	; (800be40 <HAL_RCC_OscConfig+0x778>)
 800bce2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bce6:	f003 0302 	and.w	r3, r3, #2
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d1ef      	bne.n	800bcce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	f000 80f3 	beq.w	800bede <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcfc:	2b02      	cmp	r3, #2
 800bcfe:	f040 80c9 	bne.w	800be94 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800bd02:	4b4f      	ldr	r3, [pc, #316]	; (800be40 <HAL_RCC_OscConfig+0x778>)
 800bd04:	68db      	ldr	r3, [r3, #12]
 800bd06:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	f003 0203 	and.w	r2, r3, #3
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d12c      	bne.n	800bd70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd20:	3b01      	subs	r3, #1
 800bd22:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d123      	bne.n	800bd70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd32:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bd34:	429a      	cmp	r2, r3
 800bd36:	d11b      	bne.n	800bd70 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd42:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d113      	bne.n	800bd70 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd52:	085b      	lsrs	r3, r3, #1
 800bd54:	3b01      	subs	r3, #1
 800bd56:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d109      	bne.n	800bd70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd66:	085b      	lsrs	r3, r3, #1
 800bd68:	3b01      	subs	r3, #1
 800bd6a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	d06b      	beq.n	800be48 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800bd70:	69bb      	ldr	r3, [r7, #24]
 800bd72:	2b0c      	cmp	r3, #12
 800bd74:	d062      	beq.n	800be3c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800bd76:	4b32      	ldr	r3, [pc, #200]	; (800be40 <HAL_RCC_OscConfig+0x778>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d001      	beq.n	800bd86 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800bd82:	2301      	movs	r3, #1
 800bd84:	e0ac      	b.n	800bee0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800bd86:	4b2e      	ldr	r3, [pc, #184]	; (800be40 <HAL_RCC_OscConfig+0x778>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	4a2d      	ldr	r2, [pc, #180]	; (800be40 <HAL_RCC_OscConfig+0x778>)
 800bd8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bd90:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800bd92:	f7fe ffa3 	bl	800acdc <HAL_GetTick>
 800bd96:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bd98:	e008      	b.n	800bdac <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bd9a:	f7fe ff9f 	bl	800acdc <HAL_GetTick>
 800bd9e:	4602      	mov	r2, r0
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	1ad3      	subs	r3, r2, r3
 800bda4:	2b02      	cmp	r3, #2
 800bda6:	d901      	bls.n	800bdac <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800bda8:	2303      	movs	r3, #3
 800bdaa:	e099      	b.n	800bee0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bdac:	4b24      	ldr	r3, [pc, #144]	; (800be40 <HAL_RCC_OscConfig+0x778>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d1f0      	bne.n	800bd9a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bdb8:	4b21      	ldr	r3, [pc, #132]	; (800be40 <HAL_RCC_OscConfig+0x778>)
 800bdba:	68da      	ldr	r2, [r3, #12]
 800bdbc:	4b21      	ldr	r3, [pc, #132]	; (800be44 <HAL_RCC_OscConfig+0x77c>)
 800bdbe:	4013      	ands	r3, r2
 800bdc0:	687a      	ldr	r2, [r7, #4]
 800bdc2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bdc8:	3a01      	subs	r2, #1
 800bdca:	0112      	lsls	r2, r2, #4
 800bdcc:	4311      	orrs	r1, r2
 800bdce:	687a      	ldr	r2, [r7, #4]
 800bdd0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800bdd2:	0212      	lsls	r2, r2, #8
 800bdd4:	4311      	orrs	r1, r2
 800bdd6:	687a      	ldr	r2, [r7, #4]
 800bdd8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bdda:	0852      	lsrs	r2, r2, #1
 800bddc:	3a01      	subs	r2, #1
 800bdde:	0552      	lsls	r2, r2, #21
 800bde0:	4311      	orrs	r1, r2
 800bde2:	687a      	ldr	r2, [r7, #4]
 800bde4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800bde6:	0852      	lsrs	r2, r2, #1
 800bde8:	3a01      	subs	r2, #1
 800bdea:	0652      	lsls	r2, r2, #25
 800bdec:	4311      	orrs	r1, r2
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bdf2:	06d2      	lsls	r2, r2, #27
 800bdf4:	430a      	orrs	r2, r1
 800bdf6:	4912      	ldr	r1, [pc, #72]	; (800be40 <HAL_RCC_OscConfig+0x778>)
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800bdfc:	4b10      	ldr	r3, [pc, #64]	; (800be40 <HAL_RCC_OscConfig+0x778>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	4a0f      	ldr	r2, [pc, #60]	; (800be40 <HAL_RCC_OscConfig+0x778>)
 800be02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800be06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800be08:	4b0d      	ldr	r3, [pc, #52]	; (800be40 <HAL_RCC_OscConfig+0x778>)
 800be0a:	68db      	ldr	r3, [r3, #12]
 800be0c:	4a0c      	ldr	r2, [pc, #48]	; (800be40 <HAL_RCC_OscConfig+0x778>)
 800be0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800be12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800be14:	f7fe ff62 	bl	800acdc <HAL_GetTick>
 800be18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800be1a:	e008      	b.n	800be2e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800be1c:	f7fe ff5e 	bl	800acdc <HAL_GetTick>
 800be20:	4602      	mov	r2, r0
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	1ad3      	subs	r3, r2, r3
 800be26:	2b02      	cmp	r3, #2
 800be28:	d901      	bls.n	800be2e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800be2a:	2303      	movs	r3, #3
 800be2c:	e058      	b.n	800bee0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800be2e:	4b04      	ldr	r3, [pc, #16]	; (800be40 <HAL_RCC_OscConfig+0x778>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be36:	2b00      	cmp	r3, #0
 800be38:	d0f0      	beq.n	800be1c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800be3a:	e050      	b.n	800bede <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800be3c:	2301      	movs	r3, #1
 800be3e:	e04f      	b.n	800bee0 <HAL_RCC_OscConfig+0x818>
 800be40:	40021000 	.word	0x40021000
 800be44:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800be48:	4b27      	ldr	r3, [pc, #156]	; (800bee8 <HAL_RCC_OscConfig+0x820>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be50:	2b00      	cmp	r3, #0
 800be52:	d144      	bne.n	800bede <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800be54:	4b24      	ldr	r3, [pc, #144]	; (800bee8 <HAL_RCC_OscConfig+0x820>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	4a23      	ldr	r2, [pc, #140]	; (800bee8 <HAL_RCC_OscConfig+0x820>)
 800be5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800be5e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800be60:	4b21      	ldr	r3, [pc, #132]	; (800bee8 <HAL_RCC_OscConfig+0x820>)
 800be62:	68db      	ldr	r3, [r3, #12]
 800be64:	4a20      	ldr	r2, [pc, #128]	; (800bee8 <HAL_RCC_OscConfig+0x820>)
 800be66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800be6a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800be6c:	f7fe ff36 	bl	800acdc <HAL_GetTick>
 800be70:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800be72:	e008      	b.n	800be86 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800be74:	f7fe ff32 	bl	800acdc <HAL_GetTick>
 800be78:	4602      	mov	r2, r0
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	1ad3      	subs	r3, r2, r3
 800be7e:	2b02      	cmp	r3, #2
 800be80:	d901      	bls.n	800be86 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800be82:	2303      	movs	r3, #3
 800be84:	e02c      	b.n	800bee0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800be86:	4b18      	ldr	r3, [pc, #96]	; (800bee8 <HAL_RCC_OscConfig+0x820>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d0f0      	beq.n	800be74 <HAL_RCC_OscConfig+0x7ac>
 800be92:	e024      	b.n	800bede <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800be94:	69bb      	ldr	r3, [r7, #24]
 800be96:	2b0c      	cmp	r3, #12
 800be98:	d01f      	beq.n	800beda <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800be9a:	4b13      	ldr	r3, [pc, #76]	; (800bee8 <HAL_RCC_OscConfig+0x820>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	4a12      	ldr	r2, [pc, #72]	; (800bee8 <HAL_RCC_OscConfig+0x820>)
 800bea0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bea4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bea6:	f7fe ff19 	bl	800acdc <HAL_GetTick>
 800beaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800beac:	e008      	b.n	800bec0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800beae:	f7fe ff15 	bl	800acdc <HAL_GetTick>
 800beb2:	4602      	mov	r2, r0
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	1ad3      	subs	r3, r2, r3
 800beb8:	2b02      	cmp	r3, #2
 800beba:	d901      	bls.n	800bec0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800bebc:	2303      	movs	r3, #3
 800bebe:	e00f      	b.n	800bee0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bec0:	4b09      	ldr	r3, [pc, #36]	; (800bee8 <HAL_RCC_OscConfig+0x820>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d1f0      	bne.n	800beae <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800becc:	4b06      	ldr	r3, [pc, #24]	; (800bee8 <HAL_RCC_OscConfig+0x820>)
 800bece:	68da      	ldr	r2, [r3, #12]
 800bed0:	4905      	ldr	r1, [pc, #20]	; (800bee8 <HAL_RCC_OscConfig+0x820>)
 800bed2:	4b06      	ldr	r3, [pc, #24]	; (800beec <HAL_RCC_OscConfig+0x824>)
 800bed4:	4013      	ands	r3, r2
 800bed6:	60cb      	str	r3, [r1, #12]
 800bed8:	e001      	b.n	800bede <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800beda:	2301      	movs	r3, #1
 800bedc:	e000      	b.n	800bee0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800bede:	2300      	movs	r3, #0
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3720      	adds	r7, #32
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}
 800bee8:	40021000 	.word	0x40021000
 800beec:	feeefffc 	.word	0xfeeefffc

0800bef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b084      	sub	sp, #16
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d101      	bne.n	800bf04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bf00:	2301      	movs	r3, #1
 800bf02:	e0e7      	b.n	800c0d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bf04:	4b75      	ldr	r3, [pc, #468]	; (800c0dc <HAL_RCC_ClockConfig+0x1ec>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f003 0307 	and.w	r3, r3, #7
 800bf0c:	683a      	ldr	r2, [r7, #0]
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d910      	bls.n	800bf34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bf12:	4b72      	ldr	r3, [pc, #456]	; (800c0dc <HAL_RCC_ClockConfig+0x1ec>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f023 0207 	bic.w	r2, r3, #7
 800bf1a:	4970      	ldr	r1, [pc, #448]	; (800c0dc <HAL_RCC_ClockConfig+0x1ec>)
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	4313      	orrs	r3, r2
 800bf20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bf22:	4b6e      	ldr	r3, [pc, #440]	; (800c0dc <HAL_RCC_ClockConfig+0x1ec>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	f003 0307 	and.w	r3, r3, #7
 800bf2a:	683a      	ldr	r2, [r7, #0]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d001      	beq.n	800bf34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bf30:	2301      	movs	r3, #1
 800bf32:	e0cf      	b.n	800c0d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f003 0302 	and.w	r3, r3, #2
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d010      	beq.n	800bf62 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	689a      	ldr	r2, [r3, #8]
 800bf44:	4b66      	ldr	r3, [pc, #408]	; (800c0e0 <HAL_RCC_ClockConfig+0x1f0>)
 800bf46:	689b      	ldr	r3, [r3, #8]
 800bf48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	d908      	bls.n	800bf62 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bf50:	4b63      	ldr	r3, [pc, #396]	; (800c0e0 <HAL_RCC_ClockConfig+0x1f0>)
 800bf52:	689b      	ldr	r3, [r3, #8]
 800bf54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	689b      	ldr	r3, [r3, #8]
 800bf5c:	4960      	ldr	r1, [pc, #384]	; (800c0e0 <HAL_RCC_ClockConfig+0x1f0>)
 800bf5e:	4313      	orrs	r3, r2
 800bf60:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f003 0301 	and.w	r3, r3, #1
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d04c      	beq.n	800c008 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	685b      	ldr	r3, [r3, #4]
 800bf72:	2b03      	cmp	r3, #3
 800bf74:	d107      	bne.n	800bf86 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bf76:	4b5a      	ldr	r3, [pc, #360]	; (800c0e0 <HAL_RCC_ClockConfig+0x1f0>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d121      	bne.n	800bfc6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800bf82:	2301      	movs	r3, #1
 800bf84:	e0a6      	b.n	800c0d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	2b02      	cmp	r3, #2
 800bf8c:	d107      	bne.n	800bf9e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bf8e:	4b54      	ldr	r3, [pc, #336]	; (800c0e0 <HAL_RCC_ClockConfig+0x1f0>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d115      	bne.n	800bfc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	e09a      	b.n	800c0d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d107      	bne.n	800bfb6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800bfa6:	4b4e      	ldr	r3, [pc, #312]	; (800c0e0 <HAL_RCC_ClockConfig+0x1f0>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f003 0302 	and.w	r3, r3, #2
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d109      	bne.n	800bfc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	e08e      	b.n	800c0d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bfb6:	4b4a      	ldr	r3, [pc, #296]	; (800c0e0 <HAL_RCC_ClockConfig+0x1f0>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d101      	bne.n	800bfc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	e086      	b.n	800c0d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bfc6:	4b46      	ldr	r3, [pc, #280]	; (800c0e0 <HAL_RCC_ClockConfig+0x1f0>)
 800bfc8:	689b      	ldr	r3, [r3, #8]
 800bfca:	f023 0203 	bic.w	r2, r3, #3
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	685b      	ldr	r3, [r3, #4]
 800bfd2:	4943      	ldr	r1, [pc, #268]	; (800c0e0 <HAL_RCC_ClockConfig+0x1f0>)
 800bfd4:	4313      	orrs	r3, r2
 800bfd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bfd8:	f7fe fe80 	bl	800acdc <HAL_GetTick>
 800bfdc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bfde:	e00a      	b.n	800bff6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bfe0:	f7fe fe7c 	bl	800acdc <HAL_GetTick>
 800bfe4:	4602      	mov	r2, r0
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	1ad3      	subs	r3, r2, r3
 800bfea:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d901      	bls.n	800bff6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800bff2:	2303      	movs	r3, #3
 800bff4:	e06e      	b.n	800c0d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bff6:	4b3a      	ldr	r3, [pc, #232]	; (800c0e0 <HAL_RCC_ClockConfig+0x1f0>)
 800bff8:	689b      	ldr	r3, [r3, #8]
 800bffa:	f003 020c 	and.w	r2, r3, #12
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	685b      	ldr	r3, [r3, #4]
 800c002:	009b      	lsls	r3, r3, #2
 800c004:	429a      	cmp	r2, r3
 800c006:	d1eb      	bne.n	800bfe0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f003 0302 	and.w	r3, r3, #2
 800c010:	2b00      	cmp	r3, #0
 800c012:	d010      	beq.n	800c036 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	689a      	ldr	r2, [r3, #8]
 800c018:	4b31      	ldr	r3, [pc, #196]	; (800c0e0 <HAL_RCC_ClockConfig+0x1f0>)
 800c01a:	689b      	ldr	r3, [r3, #8]
 800c01c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c020:	429a      	cmp	r2, r3
 800c022:	d208      	bcs.n	800c036 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c024:	4b2e      	ldr	r3, [pc, #184]	; (800c0e0 <HAL_RCC_ClockConfig+0x1f0>)
 800c026:	689b      	ldr	r3, [r3, #8]
 800c028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	689b      	ldr	r3, [r3, #8]
 800c030:	492b      	ldr	r1, [pc, #172]	; (800c0e0 <HAL_RCC_ClockConfig+0x1f0>)
 800c032:	4313      	orrs	r3, r2
 800c034:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c036:	4b29      	ldr	r3, [pc, #164]	; (800c0dc <HAL_RCC_ClockConfig+0x1ec>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f003 0307 	and.w	r3, r3, #7
 800c03e:	683a      	ldr	r2, [r7, #0]
 800c040:	429a      	cmp	r2, r3
 800c042:	d210      	bcs.n	800c066 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c044:	4b25      	ldr	r3, [pc, #148]	; (800c0dc <HAL_RCC_ClockConfig+0x1ec>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f023 0207 	bic.w	r2, r3, #7
 800c04c:	4923      	ldr	r1, [pc, #140]	; (800c0dc <HAL_RCC_ClockConfig+0x1ec>)
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	4313      	orrs	r3, r2
 800c052:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c054:	4b21      	ldr	r3, [pc, #132]	; (800c0dc <HAL_RCC_ClockConfig+0x1ec>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f003 0307 	and.w	r3, r3, #7
 800c05c:	683a      	ldr	r2, [r7, #0]
 800c05e:	429a      	cmp	r2, r3
 800c060:	d001      	beq.n	800c066 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800c062:	2301      	movs	r3, #1
 800c064:	e036      	b.n	800c0d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f003 0304 	and.w	r3, r3, #4
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d008      	beq.n	800c084 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c072:	4b1b      	ldr	r3, [pc, #108]	; (800c0e0 <HAL_RCC_ClockConfig+0x1f0>)
 800c074:	689b      	ldr	r3, [r3, #8]
 800c076:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	68db      	ldr	r3, [r3, #12]
 800c07e:	4918      	ldr	r1, [pc, #96]	; (800c0e0 <HAL_RCC_ClockConfig+0x1f0>)
 800c080:	4313      	orrs	r3, r2
 800c082:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f003 0308 	and.w	r3, r3, #8
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d009      	beq.n	800c0a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c090:	4b13      	ldr	r3, [pc, #76]	; (800c0e0 <HAL_RCC_ClockConfig+0x1f0>)
 800c092:	689b      	ldr	r3, [r3, #8]
 800c094:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	691b      	ldr	r3, [r3, #16]
 800c09c:	00db      	lsls	r3, r3, #3
 800c09e:	4910      	ldr	r1, [pc, #64]	; (800c0e0 <HAL_RCC_ClockConfig+0x1f0>)
 800c0a0:	4313      	orrs	r3, r2
 800c0a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c0a4:	f000 f824 	bl	800c0f0 <HAL_RCC_GetSysClockFreq>
 800c0a8:	4602      	mov	r2, r0
 800c0aa:	4b0d      	ldr	r3, [pc, #52]	; (800c0e0 <HAL_RCC_ClockConfig+0x1f0>)
 800c0ac:	689b      	ldr	r3, [r3, #8]
 800c0ae:	091b      	lsrs	r3, r3, #4
 800c0b0:	f003 030f 	and.w	r3, r3, #15
 800c0b4:	490b      	ldr	r1, [pc, #44]	; (800c0e4 <HAL_RCC_ClockConfig+0x1f4>)
 800c0b6:	5ccb      	ldrb	r3, [r1, r3]
 800c0b8:	f003 031f 	and.w	r3, r3, #31
 800c0bc:	fa22 f303 	lsr.w	r3, r2, r3
 800c0c0:	4a09      	ldr	r2, [pc, #36]	; (800c0e8 <HAL_RCC_ClockConfig+0x1f8>)
 800c0c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800c0c4:	4b09      	ldr	r3, [pc, #36]	; (800c0ec <HAL_RCC_ClockConfig+0x1fc>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f7fe fdb7 	bl	800ac3c <HAL_InitTick>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	72fb      	strb	r3, [r7, #11]

  return status;
 800c0d2:	7afb      	ldrb	r3, [r7, #11]
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3710      	adds	r7, #16
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}
 800c0dc:	40022000 	.word	0x40022000
 800c0e0:	40021000 	.word	0x40021000
 800c0e4:	0801059c 	.word	0x0801059c
 800c0e8:	20000000 	.word	0x20000000
 800c0ec:	20000004 	.word	0x20000004

0800c0f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b089      	sub	sp, #36	; 0x24
 800c0f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	61fb      	str	r3, [r7, #28]
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c0fe:	4b3e      	ldr	r3, [pc, #248]	; (800c1f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c100:	689b      	ldr	r3, [r3, #8]
 800c102:	f003 030c 	and.w	r3, r3, #12
 800c106:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c108:	4b3b      	ldr	r3, [pc, #236]	; (800c1f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c10a:	68db      	ldr	r3, [r3, #12]
 800c10c:	f003 0303 	and.w	r3, r3, #3
 800c110:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d005      	beq.n	800c124 <HAL_RCC_GetSysClockFreq+0x34>
 800c118:	693b      	ldr	r3, [r7, #16]
 800c11a:	2b0c      	cmp	r3, #12
 800c11c:	d121      	bne.n	800c162 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2b01      	cmp	r3, #1
 800c122:	d11e      	bne.n	800c162 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800c124:	4b34      	ldr	r3, [pc, #208]	; (800c1f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f003 0308 	and.w	r3, r3, #8
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d107      	bne.n	800c140 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800c130:	4b31      	ldr	r3, [pc, #196]	; (800c1f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c136:	0a1b      	lsrs	r3, r3, #8
 800c138:	f003 030f 	and.w	r3, r3, #15
 800c13c:	61fb      	str	r3, [r7, #28]
 800c13e:	e005      	b.n	800c14c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800c140:	4b2d      	ldr	r3, [pc, #180]	; (800c1f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	091b      	lsrs	r3, r3, #4
 800c146:	f003 030f 	and.w	r3, r3, #15
 800c14a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800c14c:	4a2b      	ldr	r2, [pc, #172]	; (800c1fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800c14e:	69fb      	ldr	r3, [r7, #28]
 800c150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c154:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d10d      	bne.n	800c178 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800c15c:	69fb      	ldr	r3, [r7, #28]
 800c15e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c160:	e00a      	b.n	800c178 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	2b04      	cmp	r3, #4
 800c166:	d102      	bne.n	800c16e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c168:	4b25      	ldr	r3, [pc, #148]	; (800c200 <HAL_RCC_GetSysClockFreq+0x110>)
 800c16a:	61bb      	str	r3, [r7, #24]
 800c16c:	e004      	b.n	800c178 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	2b08      	cmp	r3, #8
 800c172:	d101      	bne.n	800c178 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c174:	4b23      	ldr	r3, [pc, #140]	; (800c204 <HAL_RCC_GetSysClockFreq+0x114>)
 800c176:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	2b0c      	cmp	r3, #12
 800c17c:	d134      	bne.n	800c1e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c17e:	4b1e      	ldr	r3, [pc, #120]	; (800c1f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c180:	68db      	ldr	r3, [r3, #12]
 800c182:	f003 0303 	and.w	r3, r3, #3
 800c186:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	2b02      	cmp	r3, #2
 800c18c:	d003      	beq.n	800c196 <HAL_RCC_GetSysClockFreq+0xa6>
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	2b03      	cmp	r3, #3
 800c192:	d003      	beq.n	800c19c <HAL_RCC_GetSysClockFreq+0xac>
 800c194:	e005      	b.n	800c1a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800c196:	4b1a      	ldr	r3, [pc, #104]	; (800c200 <HAL_RCC_GetSysClockFreq+0x110>)
 800c198:	617b      	str	r3, [r7, #20]
      break;
 800c19a:	e005      	b.n	800c1a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800c19c:	4b19      	ldr	r3, [pc, #100]	; (800c204 <HAL_RCC_GetSysClockFreq+0x114>)
 800c19e:	617b      	str	r3, [r7, #20]
      break;
 800c1a0:	e002      	b.n	800c1a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800c1a2:	69fb      	ldr	r3, [r7, #28]
 800c1a4:	617b      	str	r3, [r7, #20]
      break;
 800c1a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c1a8:	4b13      	ldr	r3, [pc, #76]	; (800c1f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c1aa:	68db      	ldr	r3, [r3, #12]
 800c1ac:	091b      	lsrs	r3, r3, #4
 800c1ae:	f003 0307 	and.w	r3, r3, #7
 800c1b2:	3301      	adds	r3, #1
 800c1b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800c1b6:	4b10      	ldr	r3, [pc, #64]	; (800c1f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c1b8:	68db      	ldr	r3, [r3, #12]
 800c1ba:	0a1b      	lsrs	r3, r3, #8
 800c1bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1c0:	697a      	ldr	r2, [r7, #20]
 800c1c2:	fb03 f202 	mul.w	r2, r3, r2
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c1ce:	4b0a      	ldr	r3, [pc, #40]	; (800c1f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800c1d0:	68db      	ldr	r3, [r3, #12]
 800c1d2:	0e5b      	lsrs	r3, r3, #25
 800c1d4:	f003 0303 	and.w	r3, r3, #3
 800c1d8:	3301      	adds	r3, #1
 800c1da:	005b      	lsls	r3, r3, #1
 800c1dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800c1de:	697a      	ldr	r2, [r7, #20]
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800c1e8:	69bb      	ldr	r3, [r7, #24]
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3724      	adds	r7, #36	; 0x24
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr
 800c1f6:	bf00      	nop
 800c1f8:	40021000 	.word	0x40021000
 800c1fc:	080105b4 	.word	0x080105b4
 800c200:	00f42400 	.word	0x00f42400
 800c204:	007a1200 	.word	0x007a1200

0800c208 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c208:	b480      	push	{r7}
 800c20a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c20c:	4b03      	ldr	r3, [pc, #12]	; (800c21c <HAL_RCC_GetHCLKFreq+0x14>)
 800c20e:	681b      	ldr	r3, [r3, #0]
}
 800c210:	4618      	mov	r0, r3
 800c212:	46bd      	mov	sp, r7
 800c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c218:	4770      	bx	lr
 800c21a:	bf00      	nop
 800c21c:	20000000 	.word	0x20000000

0800c220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800c224:	f7ff fff0 	bl	800c208 <HAL_RCC_GetHCLKFreq>
 800c228:	4602      	mov	r2, r0
 800c22a:	4b06      	ldr	r3, [pc, #24]	; (800c244 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c22c:	689b      	ldr	r3, [r3, #8]
 800c22e:	0a1b      	lsrs	r3, r3, #8
 800c230:	f003 0307 	and.w	r3, r3, #7
 800c234:	4904      	ldr	r1, [pc, #16]	; (800c248 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c236:	5ccb      	ldrb	r3, [r1, r3]
 800c238:	f003 031f 	and.w	r3, r3, #31
 800c23c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c240:	4618      	mov	r0, r3
 800c242:	bd80      	pop	{r7, pc}
 800c244:	40021000 	.word	0x40021000
 800c248:	080105ac 	.word	0x080105ac

0800c24c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800c250:	f7ff ffda 	bl	800c208 <HAL_RCC_GetHCLKFreq>
 800c254:	4602      	mov	r2, r0
 800c256:	4b06      	ldr	r3, [pc, #24]	; (800c270 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c258:	689b      	ldr	r3, [r3, #8]
 800c25a:	0adb      	lsrs	r3, r3, #11
 800c25c:	f003 0307 	and.w	r3, r3, #7
 800c260:	4904      	ldr	r1, [pc, #16]	; (800c274 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c262:	5ccb      	ldrb	r3, [r1, r3]
 800c264:	f003 031f 	and.w	r3, r3, #31
 800c268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	bd80      	pop	{r7, pc}
 800c270:	40021000 	.word	0x40021000
 800c274:	080105ac 	.word	0x080105ac

0800c278 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b086      	sub	sp, #24
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800c280:	2300      	movs	r3, #0
 800c282:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800c284:	4b2a      	ldr	r3, [pc, #168]	; (800c330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d003      	beq.n	800c298 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800c290:	f7ff f9b6 	bl	800b600 <HAL_PWREx_GetVoltageRange>
 800c294:	6178      	str	r0, [r7, #20]
 800c296:	e014      	b.n	800c2c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800c298:	4b25      	ldr	r3, [pc, #148]	; (800c330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c29a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c29c:	4a24      	ldr	r2, [pc, #144]	; (800c330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c29e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2a2:	6593      	str	r3, [r2, #88]	; 0x58
 800c2a4:	4b22      	ldr	r3, [pc, #136]	; (800c330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c2a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2ac:	60fb      	str	r3, [r7, #12]
 800c2ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800c2b0:	f7ff f9a6 	bl	800b600 <HAL_PWREx_GetVoltageRange>
 800c2b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800c2b6:	4b1e      	ldr	r3, [pc, #120]	; (800c330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c2b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2ba:	4a1d      	ldr	r2, [pc, #116]	; (800c330 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c2bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c2c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c2c8:	d10b      	bne.n	800c2e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2b80      	cmp	r3, #128	; 0x80
 800c2ce:	d919      	bls.n	800c304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2ba0      	cmp	r3, #160	; 0xa0
 800c2d4:	d902      	bls.n	800c2dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c2d6:	2302      	movs	r3, #2
 800c2d8:	613b      	str	r3, [r7, #16]
 800c2da:	e013      	b.n	800c304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c2dc:	2301      	movs	r3, #1
 800c2de:	613b      	str	r3, [r7, #16]
 800c2e0:	e010      	b.n	800c304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2b80      	cmp	r3, #128	; 0x80
 800c2e6:	d902      	bls.n	800c2ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800c2e8:	2303      	movs	r3, #3
 800c2ea:	613b      	str	r3, [r7, #16]
 800c2ec:	e00a      	b.n	800c304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2b80      	cmp	r3, #128	; 0x80
 800c2f2:	d102      	bne.n	800c2fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c2f4:	2302      	movs	r3, #2
 800c2f6:	613b      	str	r3, [r7, #16]
 800c2f8:	e004      	b.n	800c304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2b70      	cmp	r3, #112	; 0x70
 800c2fe:	d101      	bne.n	800c304 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c300:	2301      	movs	r3, #1
 800c302:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800c304:	4b0b      	ldr	r3, [pc, #44]	; (800c334 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f023 0207 	bic.w	r2, r3, #7
 800c30c:	4909      	ldr	r1, [pc, #36]	; (800c334 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	4313      	orrs	r3, r2
 800c312:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800c314:	4b07      	ldr	r3, [pc, #28]	; (800c334 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f003 0307 	and.w	r3, r3, #7
 800c31c:	693a      	ldr	r2, [r7, #16]
 800c31e:	429a      	cmp	r2, r3
 800c320:	d001      	beq.n	800c326 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800c322:	2301      	movs	r3, #1
 800c324:	e000      	b.n	800c328 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800c326:	2300      	movs	r3, #0
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3718      	adds	r7, #24
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}
 800c330:	40021000 	.word	0x40021000
 800c334:	40022000 	.word	0x40022000

0800c338 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b086      	sub	sp, #24
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c340:	2300      	movs	r3, #0
 800c342:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c344:	2300      	movs	r3, #0
 800c346:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c350:	2b00      	cmp	r3, #0
 800c352:	d031      	beq.n	800c3b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c358:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c35c:	d01a      	beq.n	800c394 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800c35e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c362:	d814      	bhi.n	800c38e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c364:	2b00      	cmp	r3, #0
 800c366:	d009      	beq.n	800c37c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800c368:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c36c:	d10f      	bne.n	800c38e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800c36e:	4b5d      	ldr	r3, [pc, #372]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c370:	68db      	ldr	r3, [r3, #12]
 800c372:	4a5c      	ldr	r2, [pc, #368]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c378:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c37a:	e00c      	b.n	800c396 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	3304      	adds	r3, #4
 800c380:	2100      	movs	r1, #0
 800c382:	4618      	mov	r0, r3
 800c384:	f000 fa22 	bl	800c7cc <RCCEx_PLLSAI1_Config>
 800c388:	4603      	mov	r3, r0
 800c38a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c38c:	e003      	b.n	800c396 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c38e:	2301      	movs	r3, #1
 800c390:	74fb      	strb	r3, [r7, #19]
      break;
 800c392:	e000      	b.n	800c396 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800c394:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c396:	7cfb      	ldrb	r3, [r7, #19]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d10b      	bne.n	800c3b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c39c:	4b51      	ldr	r3, [pc, #324]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c39e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3aa:	494e      	ldr	r1, [pc, #312]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c3ac:	4313      	orrs	r3, r2
 800c3ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800c3b2:	e001      	b.n	800c3b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3b4:	7cfb      	ldrb	r3, [r7, #19]
 800c3b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	f000 809e 	beq.w	800c502 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c3ca:	4b46      	ldr	r3, [pc, #280]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c3cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d101      	bne.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	e000      	b.n	800c3dc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800c3da:	2300      	movs	r3, #0
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d00d      	beq.n	800c3fc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c3e0:	4b40      	ldr	r3, [pc, #256]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c3e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3e4:	4a3f      	ldr	r2, [pc, #252]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c3e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3ea:	6593      	str	r3, [r2, #88]	; 0x58
 800c3ec:	4b3d      	ldr	r3, [pc, #244]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c3ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3f4:	60bb      	str	r3, [r7, #8]
 800c3f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c3fc:	4b3a      	ldr	r3, [pc, #232]	; (800c4e8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4a39      	ldr	r2, [pc, #228]	; (800c4e8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c406:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c408:	f7fe fc68 	bl	800acdc <HAL_GetTick>
 800c40c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c40e:	e009      	b.n	800c424 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c410:	f7fe fc64 	bl	800acdc <HAL_GetTick>
 800c414:	4602      	mov	r2, r0
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	1ad3      	subs	r3, r2, r3
 800c41a:	2b02      	cmp	r3, #2
 800c41c:	d902      	bls.n	800c424 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800c41e:	2303      	movs	r3, #3
 800c420:	74fb      	strb	r3, [r7, #19]
        break;
 800c422:	e005      	b.n	800c430 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c424:	4b30      	ldr	r3, [pc, #192]	; (800c4e8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d0ef      	beq.n	800c410 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800c430:	7cfb      	ldrb	r3, [r7, #19]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d15a      	bne.n	800c4ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c436:	4b2b      	ldr	r3, [pc, #172]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c43c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c440:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d01e      	beq.n	800c486 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c44c:	697a      	ldr	r2, [r7, #20]
 800c44e:	429a      	cmp	r2, r3
 800c450:	d019      	beq.n	800c486 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c452:	4b24      	ldr	r3, [pc, #144]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c458:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c45c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c45e:	4b21      	ldr	r3, [pc, #132]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c464:	4a1f      	ldr	r2, [pc, #124]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c46a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c46e:	4b1d      	ldr	r3, [pc, #116]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c474:	4a1b      	ldr	r2, [pc, #108]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c47a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c47e:	4a19      	ldr	r2, [pc, #100]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	f003 0301 	and.w	r3, r3, #1
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d016      	beq.n	800c4be <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c490:	f7fe fc24 	bl	800acdc <HAL_GetTick>
 800c494:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c496:	e00b      	b.n	800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c498:	f7fe fc20 	bl	800acdc <HAL_GetTick>
 800c49c:	4602      	mov	r2, r0
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	1ad3      	subs	r3, r2, r3
 800c4a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d902      	bls.n	800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800c4aa:	2303      	movs	r3, #3
 800c4ac:	74fb      	strb	r3, [r7, #19]
            break;
 800c4ae:	e006      	b.n	800c4be <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c4b0:	4b0c      	ldr	r3, [pc, #48]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c4b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4b6:	f003 0302 	and.w	r3, r3, #2
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d0ec      	beq.n	800c498 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800c4be:	7cfb      	ldrb	r3, [r7, #19]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d10b      	bne.n	800c4dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c4c4:	4b07      	ldr	r3, [pc, #28]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c4c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4d2:	4904      	ldr	r1, [pc, #16]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c4d4:	4313      	orrs	r3, r2
 800c4d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800c4da:	e009      	b.n	800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c4dc:	7cfb      	ldrb	r3, [r7, #19]
 800c4de:	74bb      	strb	r3, [r7, #18]
 800c4e0:	e006      	b.n	800c4f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800c4e2:	bf00      	nop
 800c4e4:	40021000 	.word	0x40021000
 800c4e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4ec:	7cfb      	ldrb	r3, [r7, #19]
 800c4ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c4f0:	7c7b      	ldrb	r3, [r7, #17]
 800c4f2:	2b01      	cmp	r3, #1
 800c4f4:	d105      	bne.n	800c502 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c4f6:	4b8d      	ldr	r3, [pc, #564]	; (800c72c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c4f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4fa:	4a8c      	ldr	r2, [pc, #560]	; (800c72c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c4fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c500:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f003 0301 	and.w	r3, r3, #1
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d00a      	beq.n	800c524 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c50e:	4b87      	ldr	r3, [pc, #540]	; (800c72c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c514:	f023 0203 	bic.w	r2, r3, #3
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6a1b      	ldr	r3, [r3, #32]
 800c51c:	4983      	ldr	r1, [pc, #524]	; (800c72c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c51e:	4313      	orrs	r3, r2
 800c520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f003 0302 	and.w	r3, r3, #2
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d00a      	beq.n	800c546 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c530:	4b7e      	ldr	r3, [pc, #504]	; (800c72c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c536:	f023 020c 	bic.w	r2, r3, #12
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c53e:	497b      	ldr	r1, [pc, #492]	; (800c72c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c540:	4313      	orrs	r3, r2
 800c542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f003 0304 	and.w	r3, r3, #4
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d00a      	beq.n	800c568 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c552:	4b76      	ldr	r3, [pc, #472]	; (800c72c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c558:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c560:	4972      	ldr	r1, [pc, #456]	; (800c72c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c562:	4313      	orrs	r3, r2
 800c564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f003 0320 	and.w	r3, r3, #32
 800c570:	2b00      	cmp	r3, #0
 800c572:	d00a      	beq.n	800c58a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c574:	4b6d      	ldr	r3, [pc, #436]	; (800c72c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c57a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c582:	496a      	ldr	r1, [pc, #424]	; (800c72c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c584:	4313      	orrs	r3, r2
 800c586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c592:	2b00      	cmp	r3, #0
 800c594:	d00a      	beq.n	800c5ac <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c596:	4b65      	ldr	r3, [pc, #404]	; (800c72c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c59c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5a4:	4961      	ldr	r1, [pc, #388]	; (800c72c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c5a6:	4313      	orrs	r3, r2
 800c5a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d00a      	beq.n	800c5ce <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c5b8:	4b5c      	ldr	r3, [pc, #368]	; (800c72c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c5ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5c6:	4959      	ldr	r1, [pc, #356]	; (800c72c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d00a      	beq.n	800c5f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c5da:	4b54      	ldr	r3, [pc, #336]	; (800c72c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c5dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5e8:	4950      	ldr	r1, [pc, #320]	; (800c72c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c5ea:	4313      	orrs	r3, r2
 800c5ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d00a      	beq.n	800c612 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c5fc:	4b4b      	ldr	r3, [pc, #300]	; (800c72c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c5fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c602:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c60a:	4948      	ldr	r1, [pc, #288]	; (800c72c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c60c:	4313      	orrs	r3, r2
 800c60e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d00a      	beq.n	800c634 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c61e:	4b43      	ldr	r3, [pc, #268]	; (800c72c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c62c:	493f      	ldr	r1, [pc, #252]	; (800c72c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c62e:	4313      	orrs	r3, r2
 800c630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d028      	beq.n	800c692 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c640:	4b3a      	ldr	r3, [pc, #232]	; (800c72c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c646:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c64e:	4937      	ldr	r1, [pc, #220]	; (800c72c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c650:	4313      	orrs	r3, r2
 800c652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c65a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c65e:	d106      	bne.n	800c66e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c660:	4b32      	ldr	r3, [pc, #200]	; (800c72c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c662:	68db      	ldr	r3, [r3, #12]
 800c664:	4a31      	ldr	r2, [pc, #196]	; (800c72c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c666:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c66a:	60d3      	str	r3, [r2, #12]
 800c66c:	e011      	b.n	800c692 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c672:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c676:	d10c      	bne.n	800c692 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	3304      	adds	r3, #4
 800c67c:	2101      	movs	r1, #1
 800c67e:	4618      	mov	r0, r3
 800c680:	f000 f8a4 	bl	800c7cc <RCCEx_PLLSAI1_Config>
 800c684:	4603      	mov	r3, r0
 800c686:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800c688:	7cfb      	ldrb	r3, [r7, #19]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d001      	beq.n	800c692 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800c68e:	7cfb      	ldrb	r3, [r7, #19]
 800c690:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d028      	beq.n	800c6f0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c69e:	4b23      	ldr	r3, [pc, #140]	; (800c72c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c6a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6ac:	491f      	ldr	r1, [pc, #124]	; (800c72c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c6ae:	4313      	orrs	r3, r2
 800c6b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6bc:	d106      	bne.n	800c6cc <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c6be:	4b1b      	ldr	r3, [pc, #108]	; (800c72c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c6c0:	68db      	ldr	r3, [r3, #12]
 800c6c2:	4a1a      	ldr	r2, [pc, #104]	; (800c72c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c6c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c6c8:	60d3      	str	r3, [r2, #12]
 800c6ca:	e011      	b.n	800c6f0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c6d4:	d10c      	bne.n	800c6f0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	3304      	adds	r3, #4
 800c6da:	2101      	movs	r1, #1
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f000 f875 	bl	800c7cc <RCCEx_PLLSAI1_Config>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c6e6:	7cfb      	ldrb	r3, [r7, #19]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d001      	beq.n	800c6f0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800c6ec:	7cfb      	ldrb	r3, [r7, #19]
 800c6ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d02b      	beq.n	800c754 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c6fc:	4b0b      	ldr	r3, [pc, #44]	; (800c72c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c6fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c702:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c70a:	4908      	ldr	r1, [pc, #32]	; (800c72c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c70c:	4313      	orrs	r3, r2
 800c70e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c716:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c71a:	d109      	bne.n	800c730 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c71c:	4b03      	ldr	r3, [pc, #12]	; (800c72c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c71e:	68db      	ldr	r3, [r3, #12]
 800c720:	4a02      	ldr	r2, [pc, #8]	; (800c72c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c722:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c726:	60d3      	str	r3, [r2, #12]
 800c728:	e014      	b.n	800c754 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800c72a:	bf00      	nop
 800c72c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c734:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c738:	d10c      	bne.n	800c754 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	3304      	adds	r3, #4
 800c73e:	2101      	movs	r1, #1
 800c740:	4618      	mov	r0, r3
 800c742:	f000 f843 	bl	800c7cc <RCCEx_PLLSAI1_Config>
 800c746:	4603      	mov	r3, r0
 800c748:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c74a:	7cfb      	ldrb	r3, [r7, #19]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d001      	beq.n	800c754 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 800c750:	7cfb      	ldrb	r3, [r7, #19]
 800c752:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d01c      	beq.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c760:	4b19      	ldr	r3, [pc, #100]	; (800c7c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c766:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c76e:	4916      	ldr	r1, [pc, #88]	; (800c7c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c770:	4313      	orrs	r3, r2
 800c772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c77a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c77e:	d10c      	bne.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	3304      	adds	r3, #4
 800c784:	2102      	movs	r1, #2
 800c786:	4618      	mov	r0, r3
 800c788:	f000 f820 	bl	800c7cc <RCCEx_PLLSAI1_Config>
 800c78c:	4603      	mov	r3, r0
 800c78e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c790:	7cfb      	ldrb	r3, [r7, #19]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d001      	beq.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 800c796:	7cfb      	ldrb	r3, [r7, #19]
 800c798:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d00a      	beq.n	800c7bc <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c7a6:	4b08      	ldr	r3, [pc, #32]	; (800c7c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c7a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7ac:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7b4:	4904      	ldr	r1, [pc, #16]	; (800c7c8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c7b6:	4313      	orrs	r3, r2
 800c7b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800c7bc:	7cbb      	ldrb	r3, [r7, #18]
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3718      	adds	r7, #24
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
 800c7c6:	bf00      	nop
 800c7c8:	40021000 	.word	0x40021000

0800c7cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b084      	sub	sp, #16
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c7da:	4b74      	ldr	r3, [pc, #464]	; (800c9ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800c7dc:	68db      	ldr	r3, [r3, #12]
 800c7de:	f003 0303 	and.w	r3, r3, #3
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d018      	beq.n	800c818 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800c7e6:	4b71      	ldr	r3, [pc, #452]	; (800c9ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800c7e8:	68db      	ldr	r3, [r3, #12]
 800c7ea:	f003 0203 	and.w	r2, r3, #3
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d10d      	bne.n	800c812 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
       ||
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d009      	beq.n	800c812 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800c7fe:	4b6b      	ldr	r3, [pc, #428]	; (800c9ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800c800:	68db      	ldr	r3, [r3, #12]
 800c802:	091b      	lsrs	r3, r3, #4
 800c804:	f003 0307 	and.w	r3, r3, #7
 800c808:	1c5a      	adds	r2, r3, #1
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	685b      	ldr	r3, [r3, #4]
       ||
 800c80e:	429a      	cmp	r2, r3
 800c810:	d047      	beq.n	800c8a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800c812:	2301      	movs	r3, #1
 800c814:	73fb      	strb	r3, [r7, #15]
 800c816:	e044      	b.n	800c8a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	2b03      	cmp	r3, #3
 800c81e:	d018      	beq.n	800c852 <RCCEx_PLLSAI1_Config+0x86>
 800c820:	2b03      	cmp	r3, #3
 800c822:	d825      	bhi.n	800c870 <RCCEx_PLLSAI1_Config+0xa4>
 800c824:	2b01      	cmp	r3, #1
 800c826:	d002      	beq.n	800c82e <RCCEx_PLLSAI1_Config+0x62>
 800c828:	2b02      	cmp	r3, #2
 800c82a:	d009      	beq.n	800c840 <RCCEx_PLLSAI1_Config+0x74>
 800c82c:	e020      	b.n	800c870 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c82e:	4b5f      	ldr	r3, [pc, #380]	; (800c9ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f003 0302 	and.w	r3, r3, #2
 800c836:	2b00      	cmp	r3, #0
 800c838:	d11d      	bne.n	800c876 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800c83a:	2301      	movs	r3, #1
 800c83c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c83e:	e01a      	b.n	800c876 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c840:	4b5a      	ldr	r3, [pc, #360]	; (800c9ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d116      	bne.n	800c87a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800c84c:	2301      	movs	r3, #1
 800c84e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c850:	e013      	b.n	800c87a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800c852:	4b56      	ldr	r3, [pc, #344]	; (800c9ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d10f      	bne.n	800c87e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c85e:	4b53      	ldr	r3, [pc, #332]	; (800c9ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c866:	2b00      	cmp	r3, #0
 800c868:	d109      	bne.n	800c87e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800c86a:	2301      	movs	r3, #1
 800c86c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c86e:	e006      	b.n	800c87e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800c870:	2301      	movs	r3, #1
 800c872:	73fb      	strb	r3, [r7, #15]
      break;
 800c874:	e004      	b.n	800c880 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c876:	bf00      	nop
 800c878:	e002      	b.n	800c880 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c87a:	bf00      	nop
 800c87c:	e000      	b.n	800c880 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c87e:	bf00      	nop
    }

    if(status == HAL_OK)
 800c880:	7bfb      	ldrb	r3, [r7, #15]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d10d      	bne.n	800c8a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800c886:	4b49      	ldr	r3, [pc, #292]	; (800c9ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800c888:	68db      	ldr	r3, [r3, #12]
 800c88a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6819      	ldr	r1, [r3, #0]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	685b      	ldr	r3, [r3, #4]
 800c896:	3b01      	subs	r3, #1
 800c898:	011b      	lsls	r3, r3, #4
 800c89a:	430b      	orrs	r3, r1
 800c89c:	4943      	ldr	r1, [pc, #268]	; (800c9ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800c89e:	4313      	orrs	r3, r2
 800c8a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800c8a2:	7bfb      	ldrb	r3, [r7, #15]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d17c      	bne.n	800c9a2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800c8a8:	4b40      	ldr	r3, [pc, #256]	; (800c9ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	4a3f      	ldr	r2, [pc, #252]	; (800c9ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800c8ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c8b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c8b4:	f7fe fa12 	bl	800acdc <HAL_GetTick>
 800c8b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c8ba:	e009      	b.n	800c8d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c8bc:	f7fe fa0e 	bl	800acdc <HAL_GetTick>
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	1ad3      	subs	r3, r2, r3
 800c8c6:	2b02      	cmp	r3, #2
 800c8c8:	d902      	bls.n	800c8d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800c8ca:	2303      	movs	r3, #3
 800c8cc:	73fb      	strb	r3, [r7, #15]
        break;
 800c8ce:	e005      	b.n	800c8dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c8d0:	4b36      	ldr	r3, [pc, #216]	; (800c9ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d1ef      	bne.n	800c8bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800c8dc:	7bfb      	ldrb	r3, [r7, #15]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d15f      	bne.n	800c9a2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d110      	bne.n	800c90a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c8e8:	4b30      	ldr	r3, [pc, #192]	; (800c9ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800c8ea:	691b      	ldr	r3, [r3, #16]
 800c8ec:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800c8f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c8f4:	687a      	ldr	r2, [r7, #4]
 800c8f6:	6892      	ldr	r2, [r2, #8]
 800c8f8:	0211      	lsls	r1, r2, #8
 800c8fa:	687a      	ldr	r2, [r7, #4]
 800c8fc:	68d2      	ldr	r2, [r2, #12]
 800c8fe:	06d2      	lsls	r2, r2, #27
 800c900:	430a      	orrs	r2, r1
 800c902:	492a      	ldr	r1, [pc, #168]	; (800c9ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800c904:	4313      	orrs	r3, r2
 800c906:	610b      	str	r3, [r1, #16]
 800c908:	e027      	b.n	800c95a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	2b01      	cmp	r3, #1
 800c90e:	d112      	bne.n	800c936 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c910:	4b26      	ldr	r3, [pc, #152]	; (800c9ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800c912:	691b      	ldr	r3, [r3, #16]
 800c914:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800c918:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c91c:	687a      	ldr	r2, [r7, #4]
 800c91e:	6892      	ldr	r2, [r2, #8]
 800c920:	0211      	lsls	r1, r2, #8
 800c922:	687a      	ldr	r2, [r7, #4]
 800c924:	6912      	ldr	r2, [r2, #16]
 800c926:	0852      	lsrs	r2, r2, #1
 800c928:	3a01      	subs	r2, #1
 800c92a:	0552      	lsls	r2, r2, #21
 800c92c:	430a      	orrs	r2, r1
 800c92e:	491f      	ldr	r1, [pc, #124]	; (800c9ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800c930:	4313      	orrs	r3, r2
 800c932:	610b      	str	r3, [r1, #16]
 800c934:	e011      	b.n	800c95a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c936:	4b1d      	ldr	r3, [pc, #116]	; (800c9ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800c938:	691b      	ldr	r3, [r3, #16]
 800c93a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800c93e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	6892      	ldr	r2, [r2, #8]
 800c946:	0211      	lsls	r1, r2, #8
 800c948:	687a      	ldr	r2, [r7, #4]
 800c94a:	6952      	ldr	r2, [r2, #20]
 800c94c:	0852      	lsrs	r2, r2, #1
 800c94e:	3a01      	subs	r2, #1
 800c950:	0652      	lsls	r2, r2, #25
 800c952:	430a      	orrs	r2, r1
 800c954:	4915      	ldr	r1, [pc, #84]	; (800c9ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800c956:	4313      	orrs	r3, r2
 800c958:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800c95a:	4b14      	ldr	r3, [pc, #80]	; (800c9ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	4a13      	ldr	r2, [pc, #76]	; (800c9ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800c960:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c964:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c966:	f7fe f9b9 	bl	800acdc <HAL_GetTick>
 800c96a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c96c:	e009      	b.n	800c982 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c96e:	f7fe f9b5 	bl	800acdc <HAL_GetTick>
 800c972:	4602      	mov	r2, r0
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	1ad3      	subs	r3, r2, r3
 800c978:	2b02      	cmp	r3, #2
 800c97a:	d902      	bls.n	800c982 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800c97c:	2303      	movs	r3, #3
 800c97e:	73fb      	strb	r3, [r7, #15]
          break;
 800c980:	e005      	b.n	800c98e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c982:	4b0a      	ldr	r3, [pc, #40]	; (800c9ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d0ef      	beq.n	800c96e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800c98e:	7bfb      	ldrb	r3, [r7, #15]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d106      	bne.n	800c9a2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800c994:	4b05      	ldr	r3, [pc, #20]	; (800c9ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800c996:	691a      	ldr	r2, [r3, #16]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	699b      	ldr	r3, [r3, #24]
 800c99c:	4903      	ldr	r1, [pc, #12]	; (800c9ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800c99e:	4313      	orrs	r3, r2
 800c9a0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800c9a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	3710      	adds	r7, #16
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}
 800c9ac:	40021000 	.word	0x40021000

0800c9b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b084      	sub	sp, #16
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d101      	bne.n	800c9c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c9be:	2301      	movs	r3, #1
 800c9c0:	e095      	b.n	800caee <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d108      	bne.n	800c9dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	685b      	ldr	r3, [r3, #4]
 800c9ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c9d2:	d009      	beq.n	800c9e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	61da      	str	r2, [r3, #28]
 800c9da:	e005      	b.n	800c9e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c9f4:	b2db      	uxtb	r3, r3
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d106      	bne.n	800ca08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f7f6 f940 	bl	8002c88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2202      	movs	r2, #2
 800ca0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	681a      	ldr	r2, [r3, #0]
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ca1e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	68db      	ldr	r3, [r3, #12]
 800ca24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ca28:	d902      	bls.n	800ca30 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	60fb      	str	r3, [r7, #12]
 800ca2e:	e002      	b.n	800ca36 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ca30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ca34:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	68db      	ldr	r3, [r3, #12]
 800ca3a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800ca3e:	d007      	beq.n	800ca50 <HAL_SPI_Init+0xa0>
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	68db      	ldr	r3, [r3, #12]
 800ca44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ca48:	d002      	beq.n	800ca50 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	685b      	ldr	r3, [r3, #4]
 800ca54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	689b      	ldr	r3, [r3, #8]
 800ca5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ca60:	431a      	orrs	r2, r3
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	691b      	ldr	r3, [r3, #16]
 800ca66:	f003 0302 	and.w	r3, r3, #2
 800ca6a:	431a      	orrs	r2, r3
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	695b      	ldr	r3, [r3, #20]
 800ca70:	f003 0301 	and.w	r3, r3, #1
 800ca74:	431a      	orrs	r2, r3
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	699b      	ldr	r3, [r3, #24]
 800ca7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ca7e:	431a      	orrs	r2, r3
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	69db      	ldr	r3, [r3, #28]
 800ca84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ca88:	431a      	orrs	r2, r3
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6a1b      	ldr	r3, [r3, #32]
 800ca8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca92:	ea42 0103 	orr.w	r1, r2, r3
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca9a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	430a      	orrs	r2, r1
 800caa4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	699b      	ldr	r3, [r3, #24]
 800caaa:	0c1b      	lsrs	r3, r3, #16
 800caac:	f003 0204 	and.w	r2, r3, #4
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cab4:	f003 0310 	and.w	r3, r3, #16
 800cab8:	431a      	orrs	r2, r3
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cabe:	f003 0308 	and.w	r3, r3, #8
 800cac2:	431a      	orrs	r2, r3
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	68db      	ldr	r3, [r3, #12]
 800cac8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800cacc:	ea42 0103 	orr.w	r1, r2, r3
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	430a      	orrs	r2, r1
 800cadc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2200      	movs	r2, #0
 800cae2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2201      	movs	r2, #1
 800cae8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800caec:	2300      	movs	r3, #0
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3710      	adds	r7, #16
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}

0800caf6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800caf6:	b580      	push	{r7, lr}
 800caf8:	b088      	sub	sp, #32
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	60f8      	str	r0, [r7, #12]
 800cafe:	60b9      	str	r1, [r7, #8]
 800cb00:	603b      	str	r3, [r7, #0]
 800cb02:	4613      	mov	r3, r2
 800cb04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cb06:	2300      	movs	r3, #0
 800cb08:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800cb10:	2b01      	cmp	r3, #1
 800cb12:	d101      	bne.n	800cb18 <HAL_SPI_Transmit+0x22>
 800cb14:	2302      	movs	r3, #2
 800cb16:	e158      	b.n	800cdca <HAL_SPI_Transmit+0x2d4>
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	2201      	movs	r2, #1
 800cb1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cb20:	f7fe f8dc 	bl	800acdc <HAL_GetTick>
 800cb24:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800cb26:	88fb      	ldrh	r3, [r7, #6]
 800cb28:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cb30:	b2db      	uxtb	r3, r3
 800cb32:	2b01      	cmp	r3, #1
 800cb34:	d002      	beq.n	800cb3c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800cb36:	2302      	movs	r3, #2
 800cb38:	77fb      	strb	r3, [r7, #31]
    goto error;
 800cb3a:	e13d      	b.n	800cdb8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d002      	beq.n	800cb48 <HAL_SPI_Transmit+0x52>
 800cb42:	88fb      	ldrh	r3, [r7, #6]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d102      	bne.n	800cb4e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800cb48:	2301      	movs	r3, #1
 800cb4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800cb4c:	e134      	b.n	800cdb8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	2203      	movs	r2, #3
 800cb52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	2200      	movs	r2, #0
 800cb5a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	68ba      	ldr	r2, [r7, #8]
 800cb60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	88fa      	ldrh	r2, [r7, #6]
 800cb66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	88fa      	ldrh	r2, [r7, #6]
 800cb6c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	2200      	movs	r2, #0
 800cb72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	2200      	movs	r2, #0
 800cb78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	2200      	movs	r2, #0
 800cb80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	2200      	movs	r2, #0
 800cb88:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	689b      	ldr	r3, [r3, #8]
 800cb94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb98:	d10f      	bne.n	800cbba <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	681a      	ldr	r2, [r3, #0]
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cba8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	681a      	ldr	r2, [r3, #0]
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cbb8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbc4:	2b40      	cmp	r3, #64	; 0x40
 800cbc6:	d007      	beq.n	800cbd8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	681a      	ldr	r2, [r3, #0]
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cbd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	68db      	ldr	r3, [r3, #12]
 800cbdc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cbe0:	d94b      	bls.n	800cc7a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	685b      	ldr	r3, [r3, #4]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d002      	beq.n	800cbf0 <HAL_SPI_Transmit+0xfa>
 800cbea:	8afb      	ldrh	r3, [r7, #22]
 800cbec:	2b01      	cmp	r3, #1
 800cbee:	d13e      	bne.n	800cc6e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbf4:	881a      	ldrh	r2, [r3, #0]
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc00:	1c9a      	adds	r2, r3, #2
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cc0a:	b29b      	uxth	r3, r3
 800cc0c:	3b01      	subs	r3, #1
 800cc0e:	b29a      	uxth	r2, r3
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800cc14:	e02b      	b.n	800cc6e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	689b      	ldr	r3, [r3, #8]
 800cc1c:	f003 0302 	and.w	r3, r3, #2
 800cc20:	2b02      	cmp	r3, #2
 800cc22:	d112      	bne.n	800cc4a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc28:	881a      	ldrh	r2, [r3, #0]
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc34:	1c9a      	adds	r2, r3, #2
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cc3e:	b29b      	uxth	r3, r3
 800cc40:	3b01      	subs	r3, #1
 800cc42:	b29a      	uxth	r2, r3
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cc48:	e011      	b.n	800cc6e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cc4a:	f7fe f847 	bl	800acdc <HAL_GetTick>
 800cc4e:	4602      	mov	r2, r0
 800cc50:	69bb      	ldr	r3, [r7, #24]
 800cc52:	1ad3      	subs	r3, r2, r3
 800cc54:	683a      	ldr	r2, [r7, #0]
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d803      	bhi.n	800cc62 <HAL_SPI_Transmit+0x16c>
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc60:	d102      	bne.n	800cc68 <HAL_SPI_Transmit+0x172>
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d102      	bne.n	800cc6e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800cc68:	2303      	movs	r3, #3
 800cc6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800cc6c:	e0a4      	b.n	800cdb8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cc72:	b29b      	uxth	r3, r3
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d1ce      	bne.n	800cc16 <HAL_SPI_Transmit+0x120>
 800cc78:	e07c      	b.n	800cd74 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	685b      	ldr	r3, [r3, #4]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d002      	beq.n	800cc88 <HAL_SPI_Transmit+0x192>
 800cc82:	8afb      	ldrh	r3, [r7, #22]
 800cc84:	2b01      	cmp	r3, #1
 800cc86:	d170      	bne.n	800cd6a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cc8c:	b29b      	uxth	r3, r3
 800cc8e:	2b01      	cmp	r3, #1
 800cc90:	d912      	bls.n	800ccb8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc96:	881a      	ldrh	r2, [r3, #0]
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cca2:	1c9a      	adds	r2, r3, #2
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ccac:	b29b      	uxth	r3, r3
 800ccae:	3b02      	subs	r3, #2
 800ccb0:	b29a      	uxth	r2, r3
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ccb6:	e058      	b.n	800cd6a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	330c      	adds	r3, #12
 800ccc2:	7812      	ldrb	r2, [r2, #0]
 800ccc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccca:	1c5a      	adds	r2, r3, #1
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ccd4:	b29b      	uxth	r3, r3
 800ccd6:	3b01      	subs	r3, #1
 800ccd8:	b29a      	uxth	r2, r3
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800ccde:	e044      	b.n	800cd6a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	689b      	ldr	r3, [r3, #8]
 800cce6:	f003 0302 	and.w	r3, r3, #2
 800ccea:	2b02      	cmp	r3, #2
 800ccec:	d12b      	bne.n	800cd46 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ccf2:	b29b      	uxth	r3, r3
 800ccf4:	2b01      	cmp	r3, #1
 800ccf6:	d912      	bls.n	800cd1e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccfc:	881a      	ldrh	r2, [r3, #0]
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd08:	1c9a      	adds	r2, r3, #2
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cd12:	b29b      	uxth	r3, r3
 800cd14:	3b02      	subs	r3, #2
 800cd16:	b29a      	uxth	r2, r3
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cd1c:	e025      	b.n	800cd6a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	330c      	adds	r3, #12
 800cd28:	7812      	ldrb	r2, [r2, #0]
 800cd2a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd30:	1c5a      	adds	r2, r3, #1
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cd3a:	b29b      	uxth	r3, r3
 800cd3c:	3b01      	subs	r3, #1
 800cd3e:	b29a      	uxth	r2, r3
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cd44:	e011      	b.n	800cd6a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cd46:	f7fd ffc9 	bl	800acdc <HAL_GetTick>
 800cd4a:	4602      	mov	r2, r0
 800cd4c:	69bb      	ldr	r3, [r7, #24]
 800cd4e:	1ad3      	subs	r3, r2, r3
 800cd50:	683a      	ldr	r2, [r7, #0]
 800cd52:	429a      	cmp	r2, r3
 800cd54:	d803      	bhi.n	800cd5e <HAL_SPI_Transmit+0x268>
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd5c:	d102      	bne.n	800cd64 <HAL_SPI_Transmit+0x26e>
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d102      	bne.n	800cd6a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800cd64:	2303      	movs	r3, #3
 800cd66:	77fb      	strb	r3, [r7, #31]
          goto error;
 800cd68:	e026      	b.n	800cdb8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cd6e:	b29b      	uxth	r3, r3
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d1b5      	bne.n	800cce0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cd74:	69ba      	ldr	r2, [r7, #24]
 800cd76:	6839      	ldr	r1, [r7, #0]
 800cd78:	68f8      	ldr	r0, [r7, #12]
 800cd7a:	f000 fce3 	bl	800d744 <SPI_EndRxTxTransaction>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d002      	beq.n	800cd8a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	2220      	movs	r2, #32
 800cd88:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	689b      	ldr	r3, [r3, #8]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d10a      	bne.n	800cda8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cd92:	2300      	movs	r3, #0
 800cd94:	613b      	str	r3, [r7, #16]
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	68db      	ldr	r3, [r3, #12]
 800cd9c:	613b      	str	r3, [r7, #16]
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	689b      	ldr	r3, [r3, #8]
 800cda4:	613b      	str	r3, [r7, #16]
 800cda6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d002      	beq.n	800cdb6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	77fb      	strb	r3, [r7, #31]
 800cdb4:	e000      	b.n	800cdb8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800cdb6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	2201      	movs	r2, #1
 800cdbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800cdc8:	7ffb      	ldrb	r3, [r7, #31]
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3720      	adds	r7, #32
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}

0800cdd2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cdd2:	b580      	push	{r7, lr}
 800cdd4:	b088      	sub	sp, #32
 800cdd6:	af02      	add	r7, sp, #8
 800cdd8:	60f8      	str	r0, [r7, #12]
 800cdda:	60b9      	str	r1, [r7, #8]
 800cddc:	603b      	str	r3, [r7, #0]
 800cdde:	4613      	mov	r3, r2
 800cde0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cde2:	2300      	movs	r3, #0
 800cde4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	685b      	ldr	r3, [r3, #4]
 800cdea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cdee:	d112      	bne.n	800ce16 <HAL_SPI_Receive+0x44>
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	689b      	ldr	r3, [r3, #8]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d10e      	bne.n	800ce16 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	2204      	movs	r2, #4
 800cdfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ce00:	88fa      	ldrh	r2, [r7, #6]
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	9300      	str	r3, [sp, #0]
 800ce06:	4613      	mov	r3, r2
 800ce08:	68ba      	ldr	r2, [r7, #8]
 800ce0a:	68b9      	ldr	r1, [r7, #8]
 800ce0c:	68f8      	ldr	r0, [r7, #12]
 800ce0e:	f000 f910 	bl	800d032 <HAL_SPI_TransmitReceive>
 800ce12:	4603      	mov	r3, r0
 800ce14:	e109      	b.n	800d02a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ce1c:	2b01      	cmp	r3, #1
 800ce1e:	d101      	bne.n	800ce24 <HAL_SPI_Receive+0x52>
 800ce20:	2302      	movs	r3, #2
 800ce22:	e102      	b.n	800d02a <HAL_SPI_Receive+0x258>
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	2201      	movs	r2, #1
 800ce28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ce2c:	f7fd ff56 	bl	800acdc <HAL_GetTick>
 800ce30:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ce38:	b2db      	uxtb	r3, r3
 800ce3a:	2b01      	cmp	r3, #1
 800ce3c:	d002      	beq.n	800ce44 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800ce3e:	2302      	movs	r3, #2
 800ce40:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ce42:	e0e9      	b.n	800d018 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d002      	beq.n	800ce50 <HAL_SPI_Receive+0x7e>
 800ce4a:	88fb      	ldrh	r3, [r7, #6]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d102      	bne.n	800ce56 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800ce50:	2301      	movs	r3, #1
 800ce52:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ce54:	e0e0      	b.n	800d018 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	2204      	movs	r2, #4
 800ce5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	2200      	movs	r2, #0
 800ce62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	68ba      	ldr	r2, [r7, #8]
 800ce68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	88fa      	ldrh	r2, [r7, #6]
 800ce6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	88fa      	ldrh	r2, [r7, #6]
 800ce76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	2200      	movs	r2, #0
 800ce84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	2200      	movs	r2, #0
 800ce96:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	68db      	ldr	r3, [r3, #12]
 800ce9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cea0:	d908      	bls.n	800ceb4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	685a      	ldr	r2, [r3, #4]
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ceb0:	605a      	str	r2, [r3, #4]
 800ceb2:	e007      	b.n	800cec4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	685a      	ldr	r2, [r3, #4]
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cec2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	689b      	ldr	r3, [r3, #8]
 800cec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cecc:	d10f      	bne.n	800ceee <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	681a      	ldr	r2, [r3, #0]
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cedc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	681a      	ldr	r2, [r3, #0]
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ceec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cef8:	2b40      	cmp	r3, #64	; 0x40
 800cefa:	d007      	beq.n	800cf0c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	681a      	ldr	r2, [r3, #0]
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cf0a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	68db      	ldr	r3, [r3, #12]
 800cf10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cf14:	d867      	bhi.n	800cfe6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800cf16:	e030      	b.n	800cf7a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	689b      	ldr	r3, [r3, #8]
 800cf1e:	f003 0301 	and.w	r3, r3, #1
 800cf22:	2b01      	cmp	r3, #1
 800cf24:	d117      	bne.n	800cf56 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f103 020c 	add.w	r2, r3, #12
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf32:	7812      	ldrb	r2, [r2, #0]
 800cf34:	b2d2      	uxtb	r2, r2
 800cf36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf3c:	1c5a      	adds	r2, r3, #1
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cf48:	b29b      	uxth	r3, r3
 800cf4a:	3b01      	subs	r3, #1
 800cf4c:	b29a      	uxth	r2, r3
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800cf54:	e011      	b.n	800cf7a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cf56:	f7fd fec1 	bl	800acdc <HAL_GetTick>
 800cf5a:	4602      	mov	r2, r0
 800cf5c:	693b      	ldr	r3, [r7, #16]
 800cf5e:	1ad3      	subs	r3, r2, r3
 800cf60:	683a      	ldr	r2, [r7, #0]
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d803      	bhi.n	800cf6e <HAL_SPI_Receive+0x19c>
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf6c:	d102      	bne.n	800cf74 <HAL_SPI_Receive+0x1a2>
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d102      	bne.n	800cf7a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800cf74:	2303      	movs	r3, #3
 800cf76:	75fb      	strb	r3, [r7, #23]
          goto error;
 800cf78:	e04e      	b.n	800d018 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cf80:	b29b      	uxth	r3, r3
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d1c8      	bne.n	800cf18 <HAL_SPI_Receive+0x146>
 800cf86:	e034      	b.n	800cff2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	689b      	ldr	r3, [r3, #8]
 800cf8e:	f003 0301 	and.w	r3, r3, #1
 800cf92:	2b01      	cmp	r3, #1
 800cf94:	d115      	bne.n	800cfc2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	68da      	ldr	r2, [r3, #12]
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfa0:	b292      	uxth	r2, r2
 800cfa2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfa8:	1c9a      	adds	r2, r3, #2
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cfb4:	b29b      	uxth	r3, r3
 800cfb6:	3b01      	subs	r3, #1
 800cfb8:	b29a      	uxth	r2, r3
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800cfc0:	e011      	b.n	800cfe6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cfc2:	f7fd fe8b 	bl	800acdc <HAL_GetTick>
 800cfc6:	4602      	mov	r2, r0
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	1ad3      	subs	r3, r2, r3
 800cfcc:	683a      	ldr	r2, [r7, #0]
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d803      	bhi.n	800cfda <HAL_SPI_Receive+0x208>
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfd8:	d102      	bne.n	800cfe0 <HAL_SPI_Receive+0x20e>
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d102      	bne.n	800cfe6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800cfe0:	2303      	movs	r3, #3
 800cfe2:	75fb      	strb	r3, [r7, #23]
          goto error;
 800cfe4:	e018      	b.n	800d018 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d1ca      	bne.n	800cf88 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cff2:	693a      	ldr	r2, [r7, #16]
 800cff4:	6839      	ldr	r1, [r7, #0]
 800cff6:	68f8      	ldr	r0, [r7, #12]
 800cff8:	f000 fb4c 	bl	800d694 <SPI_EndRxTransaction>
 800cffc:	4603      	mov	r3, r0
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d002      	beq.n	800d008 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	2220      	movs	r2, #32
 800d006:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d002      	beq.n	800d016 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800d010:	2301      	movs	r3, #1
 800d012:	75fb      	strb	r3, [r7, #23]
 800d014:	e000      	b.n	800d018 <HAL_SPI_Receive+0x246>
  }

error :
 800d016:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	2201      	movs	r2, #1
 800d01c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2200      	movs	r2, #0
 800d024:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d028:	7dfb      	ldrb	r3, [r7, #23]
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3718      	adds	r7, #24
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}

0800d032 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d032:	b580      	push	{r7, lr}
 800d034:	b08a      	sub	sp, #40	; 0x28
 800d036:	af00      	add	r7, sp, #0
 800d038:	60f8      	str	r0, [r7, #12]
 800d03a:	60b9      	str	r1, [r7, #8]
 800d03c:	607a      	str	r2, [r7, #4]
 800d03e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d040:	2301      	movs	r3, #1
 800d042:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800d044:	2300      	movs	r3, #0
 800d046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800d050:	2b01      	cmp	r3, #1
 800d052:	d101      	bne.n	800d058 <HAL_SPI_TransmitReceive+0x26>
 800d054:	2302      	movs	r3, #2
 800d056:	e1fb      	b.n	800d450 <HAL_SPI_TransmitReceive+0x41e>
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	2201      	movs	r2, #1
 800d05c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d060:	f7fd fe3c 	bl	800acdc <HAL_GetTick>
 800d064:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d06c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	685b      	ldr	r3, [r3, #4]
 800d072:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800d074:	887b      	ldrh	r3, [r7, #2]
 800d076:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800d078:	887b      	ldrh	r3, [r7, #2]
 800d07a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d07c:	7efb      	ldrb	r3, [r7, #27]
 800d07e:	2b01      	cmp	r3, #1
 800d080:	d00e      	beq.n	800d0a0 <HAL_SPI_TransmitReceive+0x6e>
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d088:	d106      	bne.n	800d098 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	689b      	ldr	r3, [r3, #8]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d102      	bne.n	800d098 <HAL_SPI_TransmitReceive+0x66>
 800d092:	7efb      	ldrb	r3, [r7, #27]
 800d094:	2b04      	cmp	r3, #4
 800d096:	d003      	beq.n	800d0a0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800d098:	2302      	movs	r3, #2
 800d09a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800d09e:	e1cd      	b.n	800d43c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d005      	beq.n	800d0b2 <HAL_SPI_TransmitReceive+0x80>
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d002      	beq.n	800d0b2 <HAL_SPI_TransmitReceive+0x80>
 800d0ac:	887b      	ldrh	r3, [r7, #2]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d103      	bne.n	800d0ba <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800d0b8:	e1c0      	b.n	800d43c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d0c0:	b2db      	uxtb	r3, r3
 800d0c2:	2b04      	cmp	r3, #4
 800d0c4:	d003      	beq.n	800d0ce <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	2205      	movs	r2, #5
 800d0ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	687a      	ldr	r2, [r7, #4]
 800d0d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	887a      	ldrh	r2, [r7, #2]
 800d0de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	887a      	ldrh	r2, [r7, #2]
 800d0e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	68ba      	ldr	r2, [r7, #8]
 800d0ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	887a      	ldrh	r2, [r7, #2]
 800d0f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	887a      	ldrh	r2, [r7, #2]
 800d0fa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	2200      	movs	r2, #0
 800d100:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	2200      	movs	r2, #0
 800d106:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	68db      	ldr	r3, [r3, #12]
 800d10c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d110:	d802      	bhi.n	800d118 <HAL_SPI_TransmitReceive+0xe6>
 800d112:	8a3b      	ldrh	r3, [r7, #16]
 800d114:	2b01      	cmp	r3, #1
 800d116:	d908      	bls.n	800d12a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	685a      	ldr	r2, [r3, #4]
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d126:	605a      	str	r2, [r3, #4]
 800d128:	e007      	b.n	800d13a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	685a      	ldr	r2, [r3, #4]
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d138:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d144:	2b40      	cmp	r3, #64	; 0x40
 800d146:	d007      	beq.n	800d158 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	681a      	ldr	r2, [r3, #0]
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d156:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	68db      	ldr	r3, [r3, #12]
 800d15c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d160:	d97c      	bls.n	800d25c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	685b      	ldr	r3, [r3, #4]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d002      	beq.n	800d170 <HAL_SPI_TransmitReceive+0x13e>
 800d16a:	8a7b      	ldrh	r3, [r7, #18]
 800d16c:	2b01      	cmp	r3, #1
 800d16e:	d169      	bne.n	800d244 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d174:	881a      	ldrh	r2, [r3, #0]
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d180:	1c9a      	adds	r2, r3, #2
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d18a:	b29b      	uxth	r3, r3
 800d18c:	3b01      	subs	r3, #1
 800d18e:	b29a      	uxth	r2, r3
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d194:	e056      	b.n	800d244 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	689b      	ldr	r3, [r3, #8]
 800d19c:	f003 0302 	and.w	r3, r3, #2
 800d1a0:	2b02      	cmp	r3, #2
 800d1a2:	d11b      	bne.n	800d1dc <HAL_SPI_TransmitReceive+0x1aa>
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d1a8:	b29b      	uxth	r3, r3
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d016      	beq.n	800d1dc <HAL_SPI_TransmitReceive+0x1aa>
 800d1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b0:	2b01      	cmp	r3, #1
 800d1b2:	d113      	bne.n	800d1dc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1b8:	881a      	ldrh	r2, [r3, #0]
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1c4:	1c9a      	adds	r2, r3, #2
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d1ce:	b29b      	uxth	r3, r3
 800d1d0:	3b01      	subs	r3, #1
 800d1d2:	b29a      	uxth	r2, r3
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d1d8:	2300      	movs	r3, #0
 800d1da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	689b      	ldr	r3, [r3, #8]
 800d1e2:	f003 0301 	and.w	r3, r3, #1
 800d1e6:	2b01      	cmp	r3, #1
 800d1e8:	d11c      	bne.n	800d224 <HAL_SPI_TransmitReceive+0x1f2>
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d1f0:	b29b      	uxth	r3, r3
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d016      	beq.n	800d224 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	68da      	ldr	r2, [r3, #12]
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d200:	b292      	uxth	r2, r2
 800d202:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d208:	1c9a      	adds	r2, r3, #2
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d214:	b29b      	uxth	r3, r3
 800d216:	3b01      	subs	r3, #1
 800d218:	b29a      	uxth	r2, r3
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d220:	2301      	movs	r3, #1
 800d222:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d224:	f7fd fd5a 	bl	800acdc <HAL_GetTick>
 800d228:	4602      	mov	r2, r0
 800d22a:	69fb      	ldr	r3, [r7, #28]
 800d22c:	1ad3      	subs	r3, r2, r3
 800d22e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d230:	429a      	cmp	r2, r3
 800d232:	d807      	bhi.n	800d244 <HAL_SPI_TransmitReceive+0x212>
 800d234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d23a:	d003      	beq.n	800d244 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800d23c:	2303      	movs	r3, #3
 800d23e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800d242:	e0fb      	b.n	800d43c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d248:	b29b      	uxth	r3, r3
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d1a3      	bne.n	800d196 <HAL_SPI_TransmitReceive+0x164>
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d254:	b29b      	uxth	r3, r3
 800d256:	2b00      	cmp	r3, #0
 800d258:	d19d      	bne.n	800d196 <HAL_SPI_TransmitReceive+0x164>
 800d25a:	e0df      	b.n	800d41c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	685b      	ldr	r3, [r3, #4]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d003      	beq.n	800d26c <HAL_SPI_TransmitReceive+0x23a>
 800d264:	8a7b      	ldrh	r3, [r7, #18]
 800d266:	2b01      	cmp	r3, #1
 800d268:	f040 80cb 	bne.w	800d402 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d270:	b29b      	uxth	r3, r3
 800d272:	2b01      	cmp	r3, #1
 800d274:	d912      	bls.n	800d29c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d27a:	881a      	ldrh	r2, [r3, #0]
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d286:	1c9a      	adds	r2, r3, #2
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d290:	b29b      	uxth	r3, r3
 800d292:	3b02      	subs	r3, #2
 800d294:	b29a      	uxth	r2, r3
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d29a:	e0b2      	b.n	800d402 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	330c      	adds	r3, #12
 800d2a6:	7812      	ldrb	r2, [r2, #0]
 800d2a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2ae:	1c5a      	adds	r2, r3, #1
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d2b8:	b29b      	uxth	r3, r3
 800d2ba:	3b01      	subs	r3, #1
 800d2bc:	b29a      	uxth	r2, r3
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d2c2:	e09e      	b.n	800d402 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	689b      	ldr	r3, [r3, #8]
 800d2ca:	f003 0302 	and.w	r3, r3, #2
 800d2ce:	2b02      	cmp	r3, #2
 800d2d0:	d134      	bne.n	800d33c <HAL_SPI_TransmitReceive+0x30a>
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d2d6:	b29b      	uxth	r3, r3
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d02f      	beq.n	800d33c <HAL_SPI_TransmitReceive+0x30a>
 800d2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2de:	2b01      	cmp	r3, #1
 800d2e0:	d12c      	bne.n	800d33c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d2e6:	b29b      	uxth	r3, r3
 800d2e8:	2b01      	cmp	r3, #1
 800d2ea:	d912      	bls.n	800d312 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2f0:	881a      	ldrh	r2, [r3, #0]
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2fc:	1c9a      	adds	r2, r3, #2
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d306:	b29b      	uxth	r3, r3
 800d308:	3b02      	subs	r3, #2
 800d30a:	b29a      	uxth	r2, r3
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d310:	e012      	b.n	800d338 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	330c      	adds	r3, #12
 800d31c:	7812      	ldrb	r2, [r2, #0]
 800d31e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d324:	1c5a      	adds	r2, r3, #1
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d32e:	b29b      	uxth	r3, r3
 800d330:	3b01      	subs	r3, #1
 800d332:	b29a      	uxth	r2, r3
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d338:	2300      	movs	r3, #0
 800d33a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	689b      	ldr	r3, [r3, #8]
 800d342:	f003 0301 	and.w	r3, r3, #1
 800d346:	2b01      	cmp	r3, #1
 800d348:	d148      	bne.n	800d3dc <HAL_SPI_TransmitReceive+0x3aa>
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d350:	b29b      	uxth	r3, r3
 800d352:	2b00      	cmp	r3, #0
 800d354:	d042      	beq.n	800d3dc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d35c:	b29b      	uxth	r3, r3
 800d35e:	2b01      	cmp	r3, #1
 800d360:	d923      	bls.n	800d3aa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	68da      	ldr	r2, [r3, #12]
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d36c:	b292      	uxth	r2, r2
 800d36e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d374:	1c9a      	adds	r2, r3, #2
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d380:	b29b      	uxth	r3, r3
 800d382:	3b02      	subs	r3, #2
 800d384:	b29a      	uxth	r2, r3
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d392:	b29b      	uxth	r3, r3
 800d394:	2b01      	cmp	r3, #1
 800d396:	d81f      	bhi.n	800d3d8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	685a      	ldr	r2, [r3, #4]
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d3a6:	605a      	str	r2, [r3, #4]
 800d3a8:	e016      	b.n	800d3d8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f103 020c 	add.w	r2, r3, #12
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3b6:	7812      	ldrb	r2, [r2, #0]
 800d3b8:	b2d2      	uxtb	r2, r2
 800d3ba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3c0:	1c5a      	adds	r2, r3, #1
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d3cc:	b29b      	uxth	r3, r3
 800d3ce:	3b01      	subs	r3, #1
 800d3d0:	b29a      	uxth	r2, r3
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d3d8:	2301      	movs	r3, #1
 800d3da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d3dc:	f7fd fc7e 	bl	800acdc <HAL_GetTick>
 800d3e0:	4602      	mov	r2, r0
 800d3e2:	69fb      	ldr	r3, [r7, #28]
 800d3e4:	1ad3      	subs	r3, r2, r3
 800d3e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3e8:	429a      	cmp	r2, r3
 800d3ea:	d803      	bhi.n	800d3f4 <HAL_SPI_TransmitReceive+0x3c2>
 800d3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3f2:	d102      	bne.n	800d3fa <HAL_SPI_TransmitReceive+0x3c8>
 800d3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d103      	bne.n	800d402 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800d3fa:	2303      	movs	r3, #3
 800d3fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800d400:	e01c      	b.n	800d43c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d406:	b29b      	uxth	r3, r3
 800d408:	2b00      	cmp	r3, #0
 800d40a:	f47f af5b 	bne.w	800d2c4 <HAL_SPI_TransmitReceive+0x292>
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d414:	b29b      	uxth	r3, r3
 800d416:	2b00      	cmp	r3, #0
 800d418:	f47f af54 	bne.w	800d2c4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d41c:	69fa      	ldr	r2, [r7, #28]
 800d41e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d420:	68f8      	ldr	r0, [r7, #12]
 800d422:	f000 f98f 	bl	800d744 <SPI_EndRxTxTransaction>
 800d426:	4603      	mov	r3, r0
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d006      	beq.n	800d43a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800d42c:	2301      	movs	r3, #1
 800d42e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	2220      	movs	r2, #32
 800d436:	661a      	str	r2, [r3, #96]	; 0x60
 800d438:	e000      	b.n	800d43c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800d43a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	2201      	movs	r2, #1
 800d440:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	2200      	movs	r2, #0
 800d448:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d44c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800d450:	4618      	mov	r0, r3
 800d452:	3728      	adds	r7, #40	; 0x28
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}

0800d458 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b088      	sub	sp, #32
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	60f8      	str	r0, [r7, #12]
 800d460:	60b9      	str	r1, [r7, #8]
 800d462:	603b      	str	r3, [r7, #0]
 800d464:	4613      	mov	r3, r2
 800d466:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d468:	f7fd fc38 	bl	800acdc <HAL_GetTick>
 800d46c:	4602      	mov	r2, r0
 800d46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d470:	1a9b      	subs	r3, r3, r2
 800d472:	683a      	ldr	r2, [r7, #0]
 800d474:	4413      	add	r3, r2
 800d476:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d478:	f7fd fc30 	bl	800acdc <HAL_GetTick>
 800d47c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d47e:	4b39      	ldr	r3, [pc, #228]	; (800d564 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	015b      	lsls	r3, r3, #5
 800d484:	0d1b      	lsrs	r3, r3, #20
 800d486:	69fa      	ldr	r2, [r7, #28]
 800d488:	fb02 f303 	mul.w	r3, r2, r3
 800d48c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d48e:	e054      	b.n	800d53a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d496:	d050      	beq.n	800d53a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d498:	f7fd fc20 	bl	800acdc <HAL_GetTick>
 800d49c:	4602      	mov	r2, r0
 800d49e:	69bb      	ldr	r3, [r7, #24]
 800d4a0:	1ad3      	subs	r3, r2, r3
 800d4a2:	69fa      	ldr	r2, [r7, #28]
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	d902      	bls.n	800d4ae <SPI_WaitFlagStateUntilTimeout+0x56>
 800d4a8:	69fb      	ldr	r3, [r7, #28]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d13d      	bne.n	800d52a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	685a      	ldr	r2, [r3, #4]
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d4bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	685b      	ldr	r3, [r3, #4]
 800d4c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d4c6:	d111      	bne.n	800d4ec <SPI_WaitFlagStateUntilTimeout+0x94>
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	689b      	ldr	r3, [r3, #8]
 800d4cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d4d0:	d004      	beq.n	800d4dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	689b      	ldr	r3, [r3, #8]
 800d4d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d4da:	d107      	bne.n	800d4ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	681a      	ldr	r2, [r3, #0]
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d4ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d4f4:	d10f      	bne.n	800d516 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	681a      	ldr	r2, [r3, #0]
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d504:	601a      	str	r2, [r3, #0]
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	681a      	ldr	r2, [r3, #0]
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d514:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	2201      	movs	r2, #1
 800d51a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	2200      	movs	r2, #0
 800d522:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d526:	2303      	movs	r3, #3
 800d528:	e017      	b.n	800d55a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d101      	bne.n	800d534 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d530:	2300      	movs	r3, #0
 800d532:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	3b01      	subs	r3, #1
 800d538:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	689a      	ldr	r2, [r3, #8]
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	4013      	ands	r3, r2
 800d544:	68ba      	ldr	r2, [r7, #8]
 800d546:	429a      	cmp	r2, r3
 800d548:	bf0c      	ite	eq
 800d54a:	2301      	moveq	r3, #1
 800d54c:	2300      	movne	r3, #0
 800d54e:	b2db      	uxtb	r3, r3
 800d550:	461a      	mov	r2, r3
 800d552:	79fb      	ldrb	r3, [r7, #7]
 800d554:	429a      	cmp	r2, r3
 800d556:	d19b      	bne.n	800d490 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d558:	2300      	movs	r3, #0
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3720      	adds	r7, #32
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}
 800d562:	bf00      	nop
 800d564:	20000000 	.word	0x20000000

0800d568 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b08a      	sub	sp, #40	; 0x28
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	60f8      	str	r0, [r7, #12]
 800d570:	60b9      	str	r1, [r7, #8]
 800d572:	607a      	str	r2, [r7, #4]
 800d574:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800d576:	2300      	movs	r3, #0
 800d578:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d57a:	f7fd fbaf 	bl	800acdc <HAL_GetTick>
 800d57e:	4602      	mov	r2, r0
 800d580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d582:	1a9b      	subs	r3, r3, r2
 800d584:	683a      	ldr	r2, [r7, #0]
 800d586:	4413      	add	r3, r2
 800d588:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800d58a:	f7fd fba7 	bl	800acdc <HAL_GetTick>
 800d58e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	330c      	adds	r3, #12
 800d596:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d598:	4b3d      	ldr	r3, [pc, #244]	; (800d690 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800d59a:	681a      	ldr	r2, [r3, #0]
 800d59c:	4613      	mov	r3, r2
 800d59e:	009b      	lsls	r3, r3, #2
 800d5a0:	4413      	add	r3, r2
 800d5a2:	00da      	lsls	r2, r3, #3
 800d5a4:	1ad3      	subs	r3, r2, r3
 800d5a6:	0d1b      	lsrs	r3, r3, #20
 800d5a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5aa:	fb02 f303 	mul.w	r3, r2, r3
 800d5ae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800d5b0:	e060      	b.n	800d674 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d5b8:	d107      	bne.n	800d5ca <SPI_WaitFifoStateUntilTimeout+0x62>
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d104      	bne.n	800d5ca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800d5c0:	69fb      	ldr	r3, [r7, #28]
 800d5c2:	781b      	ldrb	r3, [r3, #0]
 800d5c4:	b2db      	uxtb	r3, r3
 800d5c6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800d5c8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5d0:	d050      	beq.n	800d674 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d5d2:	f7fd fb83 	bl	800acdc <HAL_GetTick>
 800d5d6:	4602      	mov	r2, r0
 800d5d8:	6a3b      	ldr	r3, [r7, #32]
 800d5da:	1ad3      	subs	r3, r2, r3
 800d5dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	d902      	bls.n	800d5e8 <SPI_WaitFifoStateUntilTimeout+0x80>
 800d5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d13d      	bne.n	800d664 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	685a      	ldr	r2, [r3, #4]
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d5f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	685b      	ldr	r3, [r3, #4]
 800d5fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d600:	d111      	bne.n	800d626 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	689b      	ldr	r3, [r3, #8]
 800d606:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d60a:	d004      	beq.n	800d616 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	689b      	ldr	r3, [r3, #8]
 800d610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d614:	d107      	bne.n	800d626 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	681a      	ldr	r2, [r3, #0]
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d624:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d62a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d62e:	d10f      	bne.n	800d650 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	681a      	ldr	r2, [r3, #0]
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d63e:	601a      	str	r2, [r3, #0]
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	681a      	ldr	r2, [r3, #0]
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d64e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	2201      	movs	r2, #1
 800d654:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	2200      	movs	r2, #0
 800d65c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d660:	2303      	movs	r3, #3
 800d662:	e010      	b.n	800d686 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d664:	69bb      	ldr	r3, [r7, #24]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d101      	bne.n	800d66e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800d66a:	2300      	movs	r3, #0
 800d66c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800d66e:	69bb      	ldr	r3, [r7, #24]
 800d670:	3b01      	subs	r3, #1
 800d672:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	689a      	ldr	r2, [r3, #8]
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	4013      	ands	r3, r2
 800d67e:	687a      	ldr	r2, [r7, #4]
 800d680:	429a      	cmp	r2, r3
 800d682:	d196      	bne.n	800d5b2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800d684:	2300      	movs	r3, #0
}
 800d686:	4618      	mov	r0, r3
 800d688:	3728      	adds	r7, #40	; 0x28
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}
 800d68e:	bf00      	nop
 800d690:	20000000 	.word	0x20000000

0800d694 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b086      	sub	sp, #24
 800d698:	af02      	add	r7, sp, #8
 800d69a:	60f8      	str	r0, [r7, #12]
 800d69c:	60b9      	str	r1, [r7, #8]
 800d69e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	685b      	ldr	r3, [r3, #4]
 800d6a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d6a8:	d111      	bne.n	800d6ce <SPI_EndRxTransaction+0x3a>
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	689b      	ldr	r3, [r3, #8]
 800d6ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d6b2:	d004      	beq.n	800d6be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	689b      	ldr	r3, [r3, #8]
 800d6b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d6bc:	d107      	bne.n	800d6ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	681a      	ldr	r2, [r3, #0]
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d6cc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	9300      	str	r3, [sp, #0]
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	2180      	movs	r1, #128	; 0x80
 800d6d8:	68f8      	ldr	r0, [r7, #12]
 800d6da:	f7ff febd 	bl	800d458 <SPI_WaitFlagStateUntilTimeout>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d007      	beq.n	800d6f4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d6e8:	f043 0220 	orr.w	r2, r3, #32
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d6f0:	2303      	movs	r3, #3
 800d6f2:	e023      	b.n	800d73c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	685b      	ldr	r3, [r3, #4]
 800d6f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d6fc:	d11d      	bne.n	800d73a <SPI_EndRxTransaction+0xa6>
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	689b      	ldr	r3, [r3, #8]
 800d702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d706:	d004      	beq.n	800d712 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	689b      	ldr	r3, [r3, #8]
 800d70c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d710:	d113      	bne.n	800d73a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	9300      	str	r3, [sp, #0]
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	2200      	movs	r2, #0
 800d71a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d71e:	68f8      	ldr	r0, [r7, #12]
 800d720:	f7ff ff22 	bl	800d568 <SPI_WaitFifoStateUntilTimeout>
 800d724:	4603      	mov	r3, r0
 800d726:	2b00      	cmp	r3, #0
 800d728:	d007      	beq.n	800d73a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d72e:	f043 0220 	orr.w	r2, r3, #32
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800d736:	2303      	movs	r3, #3
 800d738:	e000      	b.n	800d73c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800d73a:	2300      	movs	r3, #0
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3710      	adds	r7, #16
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}

0800d744 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b086      	sub	sp, #24
 800d748:	af02      	add	r7, sp, #8
 800d74a:	60f8      	str	r0, [r7, #12]
 800d74c:	60b9      	str	r1, [r7, #8]
 800d74e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	9300      	str	r3, [sp, #0]
 800d754:	68bb      	ldr	r3, [r7, #8]
 800d756:	2200      	movs	r2, #0
 800d758:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800d75c:	68f8      	ldr	r0, [r7, #12]
 800d75e:	f7ff ff03 	bl	800d568 <SPI_WaitFifoStateUntilTimeout>
 800d762:	4603      	mov	r3, r0
 800d764:	2b00      	cmp	r3, #0
 800d766:	d007      	beq.n	800d778 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d76c:	f043 0220 	orr.w	r2, r3, #32
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d774:	2303      	movs	r3, #3
 800d776:	e027      	b.n	800d7c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	9300      	str	r3, [sp, #0]
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	2200      	movs	r2, #0
 800d780:	2180      	movs	r1, #128	; 0x80
 800d782:	68f8      	ldr	r0, [r7, #12]
 800d784:	f7ff fe68 	bl	800d458 <SPI_WaitFlagStateUntilTimeout>
 800d788:	4603      	mov	r3, r0
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d007      	beq.n	800d79e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d792:	f043 0220 	orr.w	r2, r3, #32
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d79a:	2303      	movs	r3, #3
 800d79c:	e014      	b.n	800d7c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	9300      	str	r3, [sp, #0]
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d7aa:	68f8      	ldr	r0, [r7, #12]
 800d7ac:	f7ff fedc 	bl	800d568 <SPI_WaitFifoStateUntilTimeout>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d007      	beq.n	800d7c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7ba:	f043 0220 	orr.w	r2, r3, #32
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d7c2:	2303      	movs	r3, #3
 800d7c4:	e000      	b.n	800d7c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800d7c6:	2300      	movs	r3, #0
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3710      	adds	r7, #16
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}

0800d7d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b082      	sub	sp, #8
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d101      	bne.n	800d7e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d7de:	2301      	movs	r3, #1
 800d7e0:	e049      	b.n	800d876 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d7e8:	b2db      	uxtb	r3, r3
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d106      	bne.n	800d7fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f7f5 fabc 	bl	8002d74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2202      	movs	r2, #2
 800d800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681a      	ldr	r2, [r3, #0]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	3304      	adds	r3, #4
 800d80c:	4619      	mov	r1, r3
 800d80e:	4610      	mov	r0, r2
 800d810:	f000 fae6 	bl	800dde0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2201      	movs	r2, #1
 800d818:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2201      	movs	r2, #1
 800d820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2201      	movs	r2, #1
 800d828:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2201      	movs	r2, #1
 800d830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2201      	movs	r2, #1
 800d838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2201      	movs	r2, #1
 800d840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2201      	movs	r2, #1
 800d848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2201      	movs	r2, #1
 800d850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2201      	movs	r2, #1
 800d858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2201      	movs	r2, #1
 800d860:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2201      	movs	r2, #1
 800d868:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2201      	movs	r2, #1
 800d870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d874:	2300      	movs	r3, #0
}
 800d876:	4618      	mov	r0, r3
 800d878:	3708      	adds	r7, #8
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
	...

0800d880 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d880:	b480      	push	{r7}
 800d882:	b085      	sub	sp, #20
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d88e:	b2db      	uxtb	r3, r3
 800d890:	2b01      	cmp	r3, #1
 800d892:	d001      	beq.n	800d898 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d894:	2301      	movs	r3, #1
 800d896:	e033      	b.n	800d900 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2202      	movs	r2, #2
 800d89c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	4a19      	ldr	r2, [pc, #100]	; (800d90c <HAL_TIM_Base_Start+0x8c>)
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d009      	beq.n	800d8be <HAL_TIM_Base_Start+0x3e>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d8b2:	d004      	beq.n	800d8be <HAL_TIM_Base_Start+0x3e>
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	4a15      	ldr	r2, [pc, #84]	; (800d910 <HAL_TIM_Base_Start+0x90>)
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	d115      	bne.n	800d8ea <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	689a      	ldr	r2, [r3, #8]
 800d8c4:	4b13      	ldr	r3, [pc, #76]	; (800d914 <HAL_TIM_Base_Start+0x94>)
 800d8c6:	4013      	ands	r3, r2
 800d8c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	2b06      	cmp	r3, #6
 800d8ce:	d015      	beq.n	800d8fc <HAL_TIM_Base_Start+0x7c>
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8d6:	d011      	beq.n	800d8fc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	681a      	ldr	r2, [r3, #0]
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	f042 0201 	orr.w	r2, r2, #1
 800d8e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d8e8:	e008      	b.n	800d8fc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	681a      	ldr	r2, [r3, #0]
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	f042 0201 	orr.w	r2, r2, #1
 800d8f8:	601a      	str	r2, [r3, #0]
 800d8fa:	e000      	b.n	800d8fe <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d8fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d8fe:	2300      	movs	r3, #0
}
 800d900:	4618      	mov	r0, r3
 800d902:	3714      	adds	r7, #20
 800d904:	46bd      	mov	sp, r7
 800d906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90a:	4770      	bx	lr
 800d90c:	40012c00 	.word	0x40012c00
 800d910:	40014000 	.word	0x40014000
 800d914:	00010007 	.word	0x00010007

0800d918 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d918:	b480      	push	{r7}
 800d91a:	b085      	sub	sp, #20
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d926:	b2db      	uxtb	r3, r3
 800d928:	2b01      	cmp	r3, #1
 800d92a:	d001      	beq.n	800d930 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d92c:	2301      	movs	r3, #1
 800d92e:	e03b      	b.n	800d9a8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2202      	movs	r2, #2
 800d934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	68da      	ldr	r2, [r3, #12]
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	f042 0201 	orr.w	r2, r2, #1
 800d946:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	4a19      	ldr	r2, [pc, #100]	; (800d9b4 <HAL_TIM_Base_Start_IT+0x9c>)
 800d94e:	4293      	cmp	r3, r2
 800d950:	d009      	beq.n	800d966 <HAL_TIM_Base_Start_IT+0x4e>
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d95a:	d004      	beq.n	800d966 <HAL_TIM_Base_Start_IT+0x4e>
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	4a15      	ldr	r2, [pc, #84]	; (800d9b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800d962:	4293      	cmp	r3, r2
 800d964:	d115      	bne.n	800d992 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	689a      	ldr	r2, [r3, #8]
 800d96c:	4b13      	ldr	r3, [pc, #76]	; (800d9bc <HAL_TIM_Base_Start_IT+0xa4>)
 800d96e:	4013      	ands	r3, r2
 800d970:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	2b06      	cmp	r3, #6
 800d976:	d015      	beq.n	800d9a4 <HAL_TIM_Base_Start_IT+0x8c>
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d97e:	d011      	beq.n	800d9a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	681a      	ldr	r2, [r3, #0]
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f042 0201 	orr.w	r2, r2, #1
 800d98e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d990:	e008      	b.n	800d9a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	681a      	ldr	r2, [r3, #0]
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	f042 0201 	orr.w	r2, r2, #1
 800d9a0:	601a      	str	r2, [r3, #0]
 800d9a2:	e000      	b.n	800d9a6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d9a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d9a6:	2300      	movs	r3, #0
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3714      	adds	r7, #20
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b2:	4770      	bx	lr
 800d9b4:	40012c00 	.word	0x40012c00
 800d9b8:	40014000 	.word	0x40014000
 800d9bc:	00010007 	.word	0x00010007

0800d9c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b082      	sub	sp, #8
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	691b      	ldr	r3, [r3, #16]
 800d9ce:	f003 0302 	and.w	r3, r3, #2
 800d9d2:	2b02      	cmp	r3, #2
 800d9d4:	d122      	bne.n	800da1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	68db      	ldr	r3, [r3, #12]
 800d9dc:	f003 0302 	and.w	r3, r3, #2
 800d9e0:	2b02      	cmp	r3, #2
 800d9e2:	d11b      	bne.n	800da1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	f06f 0202 	mvn.w	r2, #2
 800d9ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2201      	movs	r2, #1
 800d9f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	699b      	ldr	r3, [r3, #24]
 800d9fa:	f003 0303 	and.w	r3, r3, #3
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d003      	beq.n	800da0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f000 f9ce 	bl	800dda4 <HAL_TIM_IC_CaptureCallback>
 800da08:	e005      	b.n	800da16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f000 f9c0 	bl	800dd90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f000 f9d1 	bl	800ddb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2200      	movs	r2, #0
 800da1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	691b      	ldr	r3, [r3, #16]
 800da22:	f003 0304 	and.w	r3, r3, #4
 800da26:	2b04      	cmp	r3, #4
 800da28:	d122      	bne.n	800da70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	68db      	ldr	r3, [r3, #12]
 800da30:	f003 0304 	and.w	r3, r3, #4
 800da34:	2b04      	cmp	r3, #4
 800da36:	d11b      	bne.n	800da70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	f06f 0204 	mvn.w	r2, #4
 800da40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2202      	movs	r2, #2
 800da46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	699b      	ldr	r3, [r3, #24]
 800da4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800da52:	2b00      	cmp	r3, #0
 800da54:	d003      	beq.n	800da5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da56:	6878      	ldr	r0, [r7, #4]
 800da58:	f000 f9a4 	bl	800dda4 <HAL_TIM_IC_CaptureCallback>
 800da5c:	e005      	b.n	800da6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f000 f996 	bl	800dd90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f000 f9a7 	bl	800ddb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2200      	movs	r2, #0
 800da6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	691b      	ldr	r3, [r3, #16]
 800da76:	f003 0308 	and.w	r3, r3, #8
 800da7a:	2b08      	cmp	r3, #8
 800da7c:	d122      	bne.n	800dac4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	68db      	ldr	r3, [r3, #12]
 800da84:	f003 0308 	and.w	r3, r3, #8
 800da88:	2b08      	cmp	r3, #8
 800da8a:	d11b      	bne.n	800dac4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	f06f 0208 	mvn.w	r2, #8
 800da94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2204      	movs	r2, #4
 800da9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	69db      	ldr	r3, [r3, #28]
 800daa2:	f003 0303 	and.w	r3, r3, #3
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d003      	beq.n	800dab2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f000 f97a 	bl	800dda4 <HAL_TIM_IC_CaptureCallback>
 800dab0:	e005      	b.n	800dabe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f000 f96c 	bl	800dd90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dab8:	6878      	ldr	r0, [r7, #4]
 800daba:	f000 f97d 	bl	800ddb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2200      	movs	r2, #0
 800dac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	691b      	ldr	r3, [r3, #16]
 800daca:	f003 0310 	and.w	r3, r3, #16
 800dace:	2b10      	cmp	r3, #16
 800dad0:	d122      	bne.n	800db18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	68db      	ldr	r3, [r3, #12]
 800dad8:	f003 0310 	and.w	r3, r3, #16
 800dadc:	2b10      	cmp	r3, #16
 800dade:	d11b      	bne.n	800db18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	f06f 0210 	mvn.w	r2, #16
 800dae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2208      	movs	r2, #8
 800daee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	69db      	ldr	r3, [r3, #28]
 800daf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d003      	beq.n	800db06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f000 f950 	bl	800dda4 <HAL_TIM_IC_CaptureCallback>
 800db04:	e005      	b.n	800db12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	f000 f942 	bl	800dd90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db0c:	6878      	ldr	r0, [r7, #4]
 800db0e:	f000 f953 	bl	800ddb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2200      	movs	r2, #0
 800db16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	691b      	ldr	r3, [r3, #16]
 800db1e:	f003 0301 	and.w	r3, r3, #1
 800db22:	2b01      	cmp	r3, #1
 800db24:	d10e      	bne.n	800db44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	68db      	ldr	r3, [r3, #12]
 800db2c:	f003 0301 	and.w	r3, r3, #1
 800db30:	2b01      	cmp	r3, #1
 800db32:	d107      	bne.n	800db44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	f06f 0201 	mvn.w	r2, #1
 800db3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f7f4 f8a0 	bl	8001c84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	691b      	ldr	r3, [r3, #16]
 800db4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db4e:	2b80      	cmp	r3, #128	; 0x80
 800db50:	d10e      	bne.n	800db70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	68db      	ldr	r3, [r3, #12]
 800db58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db5c:	2b80      	cmp	r3, #128	; 0x80
 800db5e:	d107      	bne.n	800db70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800db68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f000 faa6 	bl	800e0bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	691b      	ldr	r3, [r3, #16]
 800db76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db7e:	d10e      	bne.n	800db9e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	68db      	ldr	r3, [r3, #12]
 800db86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db8a:	2b80      	cmp	r3, #128	; 0x80
 800db8c:	d107      	bne.n	800db9e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800db96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f000 fa99 	bl	800e0d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	691b      	ldr	r3, [r3, #16]
 800dba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dba8:	2b40      	cmp	r3, #64	; 0x40
 800dbaa:	d10e      	bne.n	800dbca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	68db      	ldr	r3, [r3, #12]
 800dbb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbb6:	2b40      	cmp	r3, #64	; 0x40
 800dbb8:	d107      	bne.n	800dbca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dbc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dbc4:	6878      	ldr	r0, [r7, #4]
 800dbc6:	f000 f901 	bl	800ddcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	691b      	ldr	r3, [r3, #16]
 800dbd0:	f003 0320 	and.w	r3, r3, #32
 800dbd4:	2b20      	cmp	r3, #32
 800dbd6:	d10e      	bne.n	800dbf6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	68db      	ldr	r3, [r3, #12]
 800dbde:	f003 0320 	and.w	r3, r3, #32
 800dbe2:	2b20      	cmp	r3, #32
 800dbe4:	d107      	bne.n	800dbf6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	f06f 0220 	mvn.w	r2, #32
 800dbee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f000 fa59 	bl	800e0a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dbf6:	bf00      	nop
 800dbf8:	3708      	adds	r7, #8
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}

0800dbfe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dbfe:	b580      	push	{r7, lr}
 800dc00:	b084      	sub	sp, #16
 800dc02:	af00      	add	r7, sp, #0
 800dc04:	6078      	str	r0, [r7, #4]
 800dc06:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc12:	2b01      	cmp	r3, #1
 800dc14:	d101      	bne.n	800dc1a <HAL_TIM_ConfigClockSource+0x1c>
 800dc16:	2302      	movs	r3, #2
 800dc18:	e0b6      	b.n	800dd88 <HAL_TIM_ConfigClockSource+0x18a>
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	2201      	movs	r2, #1
 800dc1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2202      	movs	r2, #2
 800dc26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	689b      	ldr	r3, [r3, #8]
 800dc30:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dc38:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800dc3c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dc44:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	68ba      	ldr	r2, [r7, #8]
 800dc4c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dc56:	d03e      	beq.n	800dcd6 <HAL_TIM_ConfigClockSource+0xd8>
 800dc58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dc5c:	f200 8087 	bhi.w	800dd6e <HAL_TIM_ConfigClockSource+0x170>
 800dc60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc64:	f000 8086 	beq.w	800dd74 <HAL_TIM_ConfigClockSource+0x176>
 800dc68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc6c:	d87f      	bhi.n	800dd6e <HAL_TIM_ConfigClockSource+0x170>
 800dc6e:	2b70      	cmp	r3, #112	; 0x70
 800dc70:	d01a      	beq.n	800dca8 <HAL_TIM_ConfigClockSource+0xaa>
 800dc72:	2b70      	cmp	r3, #112	; 0x70
 800dc74:	d87b      	bhi.n	800dd6e <HAL_TIM_ConfigClockSource+0x170>
 800dc76:	2b60      	cmp	r3, #96	; 0x60
 800dc78:	d050      	beq.n	800dd1c <HAL_TIM_ConfigClockSource+0x11e>
 800dc7a:	2b60      	cmp	r3, #96	; 0x60
 800dc7c:	d877      	bhi.n	800dd6e <HAL_TIM_ConfigClockSource+0x170>
 800dc7e:	2b50      	cmp	r3, #80	; 0x50
 800dc80:	d03c      	beq.n	800dcfc <HAL_TIM_ConfigClockSource+0xfe>
 800dc82:	2b50      	cmp	r3, #80	; 0x50
 800dc84:	d873      	bhi.n	800dd6e <HAL_TIM_ConfigClockSource+0x170>
 800dc86:	2b40      	cmp	r3, #64	; 0x40
 800dc88:	d058      	beq.n	800dd3c <HAL_TIM_ConfigClockSource+0x13e>
 800dc8a:	2b40      	cmp	r3, #64	; 0x40
 800dc8c:	d86f      	bhi.n	800dd6e <HAL_TIM_ConfigClockSource+0x170>
 800dc8e:	2b30      	cmp	r3, #48	; 0x30
 800dc90:	d064      	beq.n	800dd5c <HAL_TIM_ConfigClockSource+0x15e>
 800dc92:	2b30      	cmp	r3, #48	; 0x30
 800dc94:	d86b      	bhi.n	800dd6e <HAL_TIM_ConfigClockSource+0x170>
 800dc96:	2b20      	cmp	r3, #32
 800dc98:	d060      	beq.n	800dd5c <HAL_TIM_ConfigClockSource+0x15e>
 800dc9a:	2b20      	cmp	r3, #32
 800dc9c:	d867      	bhi.n	800dd6e <HAL_TIM_ConfigClockSource+0x170>
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d05c      	beq.n	800dd5c <HAL_TIM_ConfigClockSource+0x15e>
 800dca2:	2b10      	cmp	r3, #16
 800dca4:	d05a      	beq.n	800dd5c <HAL_TIM_ConfigClockSource+0x15e>
 800dca6:	e062      	b.n	800dd6e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	6818      	ldr	r0, [r3, #0]
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	6899      	ldr	r1, [r3, #8]
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	685a      	ldr	r2, [r3, #4]
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	68db      	ldr	r3, [r3, #12]
 800dcb8:	f000 f970 	bl	800df9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	689b      	ldr	r3, [r3, #8]
 800dcc2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800dcca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	68ba      	ldr	r2, [r7, #8]
 800dcd2:	609a      	str	r2, [r3, #8]
      break;
 800dcd4:	e04f      	b.n	800dd76 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6818      	ldr	r0, [r3, #0]
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	6899      	ldr	r1, [r3, #8]
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	685a      	ldr	r2, [r3, #4]
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	68db      	ldr	r3, [r3, #12]
 800dce6:	f000 f959 	bl	800df9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	689a      	ldr	r2, [r3, #8]
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dcf8:	609a      	str	r2, [r3, #8]
      break;
 800dcfa:	e03c      	b.n	800dd76 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6818      	ldr	r0, [r3, #0]
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	6859      	ldr	r1, [r3, #4]
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	68db      	ldr	r3, [r3, #12]
 800dd08:	461a      	mov	r2, r3
 800dd0a:	f000 f8cd 	bl	800dea8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	2150      	movs	r1, #80	; 0x50
 800dd14:	4618      	mov	r0, r3
 800dd16:	f000 f926 	bl	800df66 <TIM_ITRx_SetConfig>
      break;
 800dd1a:	e02c      	b.n	800dd76 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6818      	ldr	r0, [r3, #0]
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	6859      	ldr	r1, [r3, #4]
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	68db      	ldr	r3, [r3, #12]
 800dd28:	461a      	mov	r2, r3
 800dd2a:	f000 f8ec 	bl	800df06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	2160      	movs	r1, #96	; 0x60
 800dd34:	4618      	mov	r0, r3
 800dd36:	f000 f916 	bl	800df66 <TIM_ITRx_SetConfig>
      break;
 800dd3a:	e01c      	b.n	800dd76 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6818      	ldr	r0, [r3, #0]
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	6859      	ldr	r1, [r3, #4]
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	68db      	ldr	r3, [r3, #12]
 800dd48:	461a      	mov	r2, r3
 800dd4a:	f000 f8ad 	bl	800dea8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	2140      	movs	r1, #64	; 0x40
 800dd54:	4618      	mov	r0, r3
 800dd56:	f000 f906 	bl	800df66 <TIM_ITRx_SetConfig>
      break;
 800dd5a:	e00c      	b.n	800dd76 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681a      	ldr	r2, [r3, #0]
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	4619      	mov	r1, r3
 800dd66:	4610      	mov	r0, r2
 800dd68:	f000 f8fd 	bl	800df66 <TIM_ITRx_SetConfig>
      break;
 800dd6c:	e003      	b.n	800dd76 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800dd6e:	2301      	movs	r3, #1
 800dd70:	73fb      	strb	r3, [r7, #15]
      break;
 800dd72:	e000      	b.n	800dd76 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800dd74:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2201      	movs	r2, #1
 800dd7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	2200      	movs	r2, #0
 800dd82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dd86:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	3710      	adds	r7, #16
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}

0800dd90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dd90:	b480      	push	{r7}
 800dd92:	b083      	sub	sp, #12
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dd98:	bf00      	nop
 800dd9a:	370c      	adds	r7, #12
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda2:	4770      	bx	lr

0800dda4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dda4:	b480      	push	{r7}
 800dda6:	b083      	sub	sp, #12
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ddac:	bf00      	nop
 800ddae:	370c      	adds	r7, #12
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb6:	4770      	bx	lr

0800ddb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ddb8:	b480      	push	{r7}
 800ddba:	b083      	sub	sp, #12
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ddc0:	bf00      	nop
 800ddc2:	370c      	adds	r7, #12
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddca:	4770      	bx	lr

0800ddcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ddcc:	b480      	push	{r7}
 800ddce:	b083      	sub	sp, #12
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ddd4:	bf00      	nop
 800ddd6:	370c      	adds	r7, #12
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddde:	4770      	bx	lr

0800dde0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dde0:	b480      	push	{r7}
 800dde2:	b085      	sub	sp, #20
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	4a2a      	ldr	r2, [pc, #168]	; (800de9c <TIM_Base_SetConfig+0xbc>)
 800ddf4:	4293      	cmp	r3, r2
 800ddf6:	d003      	beq.n	800de00 <TIM_Base_SetConfig+0x20>
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ddfe:	d108      	bne.n	800de12 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	685b      	ldr	r3, [r3, #4]
 800de0c:	68fa      	ldr	r2, [r7, #12]
 800de0e:	4313      	orrs	r3, r2
 800de10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	4a21      	ldr	r2, [pc, #132]	; (800de9c <TIM_Base_SetConfig+0xbc>)
 800de16:	4293      	cmp	r3, r2
 800de18:	d00b      	beq.n	800de32 <TIM_Base_SetConfig+0x52>
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de20:	d007      	beq.n	800de32 <TIM_Base_SetConfig+0x52>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	4a1e      	ldr	r2, [pc, #120]	; (800dea0 <TIM_Base_SetConfig+0xc0>)
 800de26:	4293      	cmp	r3, r2
 800de28:	d003      	beq.n	800de32 <TIM_Base_SetConfig+0x52>
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	4a1d      	ldr	r2, [pc, #116]	; (800dea4 <TIM_Base_SetConfig+0xc4>)
 800de2e:	4293      	cmp	r3, r2
 800de30:	d108      	bne.n	800de44 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800de38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	68db      	ldr	r3, [r3, #12]
 800de3e:	68fa      	ldr	r2, [r7, #12]
 800de40:	4313      	orrs	r3, r2
 800de42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	695b      	ldr	r3, [r3, #20]
 800de4e:	4313      	orrs	r3, r2
 800de50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	68fa      	ldr	r2, [r7, #12]
 800de56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	689a      	ldr	r2, [r3, #8]
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	681a      	ldr	r2, [r3, #0]
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	4a0c      	ldr	r2, [pc, #48]	; (800de9c <TIM_Base_SetConfig+0xbc>)
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d007      	beq.n	800de80 <TIM_Base_SetConfig+0xa0>
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	4a0b      	ldr	r2, [pc, #44]	; (800dea0 <TIM_Base_SetConfig+0xc0>)
 800de74:	4293      	cmp	r3, r2
 800de76:	d003      	beq.n	800de80 <TIM_Base_SetConfig+0xa0>
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	4a0a      	ldr	r2, [pc, #40]	; (800dea4 <TIM_Base_SetConfig+0xc4>)
 800de7c:	4293      	cmp	r3, r2
 800de7e:	d103      	bne.n	800de88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	691a      	ldr	r2, [r3, #16]
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2201      	movs	r2, #1
 800de8c:	615a      	str	r2, [r3, #20]
}
 800de8e:	bf00      	nop
 800de90:	3714      	adds	r7, #20
 800de92:	46bd      	mov	sp, r7
 800de94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de98:	4770      	bx	lr
 800de9a:	bf00      	nop
 800de9c:	40012c00 	.word	0x40012c00
 800dea0:	40014000 	.word	0x40014000
 800dea4:	40014400 	.word	0x40014400

0800dea8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dea8:	b480      	push	{r7}
 800deaa:	b087      	sub	sp, #28
 800deac:	af00      	add	r7, sp, #0
 800deae:	60f8      	str	r0, [r7, #12]
 800deb0:	60b9      	str	r1, [r7, #8]
 800deb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	6a1b      	ldr	r3, [r3, #32]
 800deb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	6a1b      	ldr	r3, [r3, #32]
 800debe:	f023 0201 	bic.w	r2, r3, #1
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	699b      	ldr	r3, [r3, #24]
 800deca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800decc:	693b      	ldr	r3, [r7, #16]
 800dece:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ded2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	011b      	lsls	r3, r3, #4
 800ded8:	693a      	ldr	r2, [r7, #16]
 800deda:	4313      	orrs	r3, r2
 800dedc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	f023 030a 	bic.w	r3, r3, #10
 800dee4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dee6:	697a      	ldr	r2, [r7, #20]
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	4313      	orrs	r3, r2
 800deec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	693a      	ldr	r2, [r7, #16]
 800def2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	697a      	ldr	r2, [r7, #20]
 800def8:	621a      	str	r2, [r3, #32]
}
 800defa:	bf00      	nop
 800defc:	371c      	adds	r7, #28
 800defe:	46bd      	mov	sp, r7
 800df00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df04:	4770      	bx	lr

0800df06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800df06:	b480      	push	{r7}
 800df08:	b087      	sub	sp, #28
 800df0a:	af00      	add	r7, sp, #0
 800df0c:	60f8      	str	r0, [r7, #12]
 800df0e:	60b9      	str	r1, [r7, #8]
 800df10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	6a1b      	ldr	r3, [r3, #32]
 800df16:	f023 0210 	bic.w	r2, r3, #16
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	699b      	ldr	r3, [r3, #24]
 800df22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	6a1b      	ldr	r3, [r3, #32]
 800df28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800df2a:	697b      	ldr	r3, [r7, #20]
 800df2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800df30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	031b      	lsls	r3, r3, #12
 800df36:	697a      	ldr	r2, [r7, #20]
 800df38:	4313      	orrs	r3, r2
 800df3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800df3c:	693b      	ldr	r3, [r7, #16]
 800df3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800df42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	011b      	lsls	r3, r3, #4
 800df48:	693a      	ldr	r2, [r7, #16]
 800df4a:	4313      	orrs	r3, r2
 800df4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	697a      	ldr	r2, [r7, #20]
 800df52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	693a      	ldr	r2, [r7, #16]
 800df58:	621a      	str	r2, [r3, #32]
}
 800df5a:	bf00      	nop
 800df5c:	371c      	adds	r7, #28
 800df5e:	46bd      	mov	sp, r7
 800df60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df64:	4770      	bx	lr

0800df66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800df66:	b480      	push	{r7}
 800df68:	b085      	sub	sp, #20
 800df6a:	af00      	add	r7, sp, #0
 800df6c:	6078      	str	r0, [r7, #4]
 800df6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	689b      	ldr	r3, [r3, #8]
 800df74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800df7e:	683a      	ldr	r2, [r7, #0]
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	4313      	orrs	r3, r2
 800df84:	f043 0307 	orr.w	r3, r3, #7
 800df88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	68fa      	ldr	r2, [r7, #12]
 800df8e:	609a      	str	r2, [r3, #8]
}
 800df90:	bf00      	nop
 800df92:	3714      	adds	r7, #20
 800df94:	46bd      	mov	sp, r7
 800df96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9a:	4770      	bx	lr

0800df9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800df9c:	b480      	push	{r7}
 800df9e:	b087      	sub	sp, #28
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	60f8      	str	r0, [r7, #12]
 800dfa4:	60b9      	str	r1, [r7, #8]
 800dfa6:	607a      	str	r2, [r7, #4]
 800dfa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	689b      	ldr	r3, [r3, #8]
 800dfae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dfb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	021a      	lsls	r2, r3, #8
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	431a      	orrs	r2, r3
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	4313      	orrs	r3, r2
 800dfc4:	697a      	ldr	r2, [r7, #20]
 800dfc6:	4313      	orrs	r3, r2
 800dfc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	697a      	ldr	r2, [r7, #20]
 800dfce:	609a      	str	r2, [r3, #8]
}
 800dfd0:	bf00      	nop
 800dfd2:	371c      	adds	r7, #28
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfda:	4770      	bx	lr

0800dfdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dfdc:	b480      	push	{r7}
 800dfde:	b085      	sub	sp, #20
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
 800dfe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dfec:	2b01      	cmp	r3, #1
 800dfee:	d101      	bne.n	800dff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dff0:	2302      	movs	r3, #2
 800dff2:	e04f      	b.n	800e094 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2201      	movs	r2, #1
 800dff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2202      	movs	r2, #2
 800e000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	685b      	ldr	r3, [r3, #4]
 800e00a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	689b      	ldr	r3, [r3, #8]
 800e012:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	4a21      	ldr	r2, [pc, #132]	; (800e0a0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800e01a:	4293      	cmp	r3, r2
 800e01c:	d108      	bne.n	800e030 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e024:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	685b      	ldr	r3, [r3, #4]
 800e02a:	68fa      	ldr	r2, [r7, #12]
 800e02c:	4313      	orrs	r3, r2
 800e02e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e036:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	68fa      	ldr	r2, [r7, #12]
 800e03e:	4313      	orrs	r3, r2
 800e040:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	68fa      	ldr	r2, [r7, #12]
 800e048:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	4a14      	ldr	r2, [pc, #80]	; (800e0a0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800e050:	4293      	cmp	r3, r2
 800e052:	d009      	beq.n	800e068 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e05c:	d004      	beq.n	800e068 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	4a10      	ldr	r2, [pc, #64]	; (800e0a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800e064:	4293      	cmp	r3, r2
 800e066:	d10c      	bne.n	800e082 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e06e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	689b      	ldr	r3, [r3, #8]
 800e074:	68ba      	ldr	r2, [r7, #8]
 800e076:	4313      	orrs	r3, r2
 800e078:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	68ba      	ldr	r2, [r7, #8]
 800e080:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2201      	movs	r2, #1
 800e086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	2200      	movs	r2, #0
 800e08e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e092:	2300      	movs	r3, #0
}
 800e094:	4618      	mov	r0, r3
 800e096:	3714      	adds	r7, #20
 800e098:	46bd      	mov	sp, r7
 800e09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09e:	4770      	bx	lr
 800e0a0:	40012c00 	.word	0x40012c00
 800e0a4:	40014000 	.word	0x40014000

0800e0a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e0a8:	b480      	push	{r7}
 800e0aa:	b083      	sub	sp, #12
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e0b0:	bf00      	nop
 800e0b2:	370c      	adds	r7, #12
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ba:	4770      	bx	lr

0800e0bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e0bc:	b480      	push	{r7}
 800e0be:	b083      	sub	sp, #12
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e0c4:	bf00      	nop
 800e0c6:	370c      	adds	r7, #12
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ce:	4770      	bx	lr

0800e0d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e0d0:	b480      	push	{r7}
 800e0d2:	b083      	sub	sp, #12
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e0d8:	bf00      	nop
 800e0da:	370c      	adds	r7, #12
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e2:	4770      	bx	lr

0800e0e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b082      	sub	sp, #8
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d101      	bne.n	800e0f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	e040      	b.n	800e178 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d106      	bne.n	800e10c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2200      	movs	r2, #0
 800e102:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f7f4 fcc0 	bl	8002a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2224      	movs	r2, #36	; 0x24
 800e110:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	681a      	ldr	r2, [r3, #0]
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	f022 0201 	bic.w	r2, r2, #1
 800e120:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f000 fbe8 	bl	800e8f8 <UART_SetConfig>
 800e128:	4603      	mov	r3, r0
 800e12a:	2b01      	cmp	r3, #1
 800e12c:	d101      	bne.n	800e132 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800e12e:	2301      	movs	r3, #1
 800e130:	e022      	b.n	800e178 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e136:	2b00      	cmp	r3, #0
 800e138:	d002      	beq.n	800e140 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f000 fe36 	bl	800edac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	685a      	ldr	r2, [r3, #4]
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e14e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	689a      	ldr	r2, [r3, #8]
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e15e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	681a      	ldr	r2, [r3, #0]
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	f042 0201 	orr.w	r2, r2, #1
 800e16e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e170:	6878      	ldr	r0, [r7, #4]
 800e172:	f000 febd 	bl	800eef0 <UART_CheckIdleState>
 800e176:	4603      	mov	r3, r0
}
 800e178:	4618      	mov	r0, r3
 800e17a:	3708      	adds	r7, #8
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}

0800e180 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e180:	b480      	push	{r7}
 800e182:	b08b      	sub	sp, #44	; 0x2c
 800e184:	af00      	add	r7, sp, #0
 800e186:	60f8      	str	r0, [r7, #12]
 800e188:	60b9      	str	r1, [r7, #8]
 800e18a:	4613      	mov	r3, r2
 800e18c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e192:	2b20      	cmp	r3, #32
 800e194:	d156      	bne.n	800e244 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d002      	beq.n	800e1a2 <HAL_UART_Transmit_IT+0x22>
 800e19c:	88fb      	ldrh	r3, [r7, #6]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d101      	bne.n	800e1a6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	e04f      	b.n	800e246 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e1ac:	2b01      	cmp	r3, #1
 800e1ae:	d101      	bne.n	800e1b4 <HAL_UART_Transmit_IT+0x34>
 800e1b0:	2302      	movs	r3, #2
 800e1b2:	e048      	b.n	800e246 <HAL_UART_Transmit_IT+0xc6>
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	68ba      	ldr	r2, [r7, #8]
 800e1c0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	88fa      	ldrh	r2, [r7, #6]
 800e1c6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	88fa      	ldrh	r2, [r7, #6]
 800e1ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	2221      	movs	r2, #33	; 0x21
 800e1e4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	689b      	ldr	r3, [r3, #8]
 800e1ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e1ee:	d107      	bne.n	800e200 <HAL_UART_Transmit_IT+0x80>
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	691b      	ldr	r3, [r3, #16]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d103      	bne.n	800e200 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	4a16      	ldr	r2, [pc, #88]	; (800e254 <HAL_UART_Transmit_IT+0xd4>)
 800e1fc:	669a      	str	r2, [r3, #104]	; 0x68
 800e1fe:	e002      	b.n	800e206 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	4a15      	ldr	r2, [pc, #84]	; (800e258 <HAL_UART_Transmit_IT+0xd8>)
 800e204:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	2200      	movs	r2, #0
 800e20a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	e853 3f00 	ldrex	r3, [r3]
 800e21a:	613b      	str	r3, [r7, #16]
   return(result);
 800e21c:	693b      	ldr	r3, [r7, #16]
 800e21e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e222:	627b      	str	r3, [r7, #36]	; 0x24
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	461a      	mov	r2, r3
 800e22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e22c:	623b      	str	r3, [r7, #32]
 800e22e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e230:	69f9      	ldr	r1, [r7, #28]
 800e232:	6a3a      	ldr	r2, [r7, #32]
 800e234:	e841 2300 	strex	r3, r2, [r1]
 800e238:	61bb      	str	r3, [r7, #24]
   return(result);
 800e23a:	69bb      	ldr	r3, [r7, #24]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d1e6      	bne.n	800e20e <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800e240:	2300      	movs	r3, #0
 800e242:	e000      	b.n	800e246 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800e244:	2302      	movs	r3, #2
  }
}
 800e246:	4618      	mov	r0, r3
 800e248:	372c      	adds	r7, #44	; 0x2c
 800e24a:	46bd      	mov	sp, r7
 800e24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e250:	4770      	bx	lr
 800e252:	bf00      	nop
 800e254:	0800f44b 	.word	0x0800f44b
 800e258:	0800f393 	.word	0x0800f393

0800e25c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b08a      	sub	sp, #40	; 0x28
 800e260:	af00      	add	r7, sp, #0
 800e262:	60f8      	str	r0, [r7, #12]
 800e264:	60b9      	str	r1, [r7, #8]
 800e266:	4613      	mov	r3, r2
 800e268:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e26e:	2b20      	cmp	r3, #32
 800e270:	d142      	bne.n	800e2f8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800e272:	68bb      	ldr	r3, [r7, #8]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d002      	beq.n	800e27e <HAL_UART_Receive_IT+0x22>
 800e278:	88fb      	ldrh	r3, [r7, #6]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d101      	bne.n	800e282 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800e27e:	2301      	movs	r3, #1
 800e280:	e03b      	b.n	800e2fa <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e288:	2b01      	cmp	r3, #1
 800e28a:	d101      	bne.n	800e290 <HAL_UART_Receive_IT+0x34>
 800e28c:	2302      	movs	r3, #2
 800e28e:	e034      	b.n	800e2fa <HAL_UART_Receive_IT+0x9e>
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	2201      	movs	r2, #1
 800e294:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	2200      	movs	r2, #0
 800e29c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	4a18      	ldr	r2, [pc, #96]	; (800e304 <HAL_UART_Receive_IT+0xa8>)
 800e2a4:	4293      	cmp	r3, r2
 800e2a6:	d01f      	beq.n	800e2e8 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	685b      	ldr	r3, [r3, #4]
 800e2ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d018      	beq.n	800e2e8 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2bc:	697b      	ldr	r3, [r7, #20]
 800e2be:	e853 3f00 	ldrex	r3, [r3]
 800e2c2:	613b      	str	r3, [r7, #16]
   return(result);
 800e2c4:	693b      	ldr	r3, [r7, #16]
 800e2c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e2ca:	627b      	str	r3, [r7, #36]	; 0x24
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	461a      	mov	r2, r3
 800e2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2d4:	623b      	str	r3, [r7, #32]
 800e2d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2d8:	69f9      	ldr	r1, [r7, #28]
 800e2da:	6a3a      	ldr	r2, [r7, #32]
 800e2dc:	e841 2300 	strex	r3, r2, [r1]
 800e2e0:	61bb      	str	r3, [r7, #24]
   return(result);
 800e2e2:	69bb      	ldr	r3, [r7, #24]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d1e6      	bne.n	800e2b6 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e2e8:	88fb      	ldrh	r3, [r7, #6]
 800e2ea:	461a      	mov	r2, r3
 800e2ec:	68b9      	ldr	r1, [r7, #8]
 800e2ee:	68f8      	ldr	r0, [r7, #12]
 800e2f0:	f000 ff0c 	bl	800f10c <UART_Start_Receive_IT>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	e000      	b.n	800e2fa <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800e2f8:	2302      	movs	r3, #2
  }
}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	3728      	adds	r7, #40	; 0x28
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}
 800e302:	bf00      	nop
 800e304:	40008000 	.word	0x40008000

0800e308 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b0ba      	sub	sp, #232	; 0xe8
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	69db      	ldr	r3, [r3, #28]
 800e316:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	689b      	ldr	r3, [r3, #8]
 800e32a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e32e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e332:	f640 030f 	movw	r3, #2063	; 0x80f
 800e336:	4013      	ands	r3, r2
 800e338:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e33c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e340:	2b00      	cmp	r3, #0
 800e342:	d115      	bne.n	800e370 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800e344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e348:	f003 0320 	and.w	r3, r3, #32
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d00f      	beq.n	800e370 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e354:	f003 0320 	and.w	r3, r3, #32
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d009      	beq.n	800e370 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e360:	2b00      	cmp	r3, #0
 800e362:	f000 82a6 	beq.w	800e8b2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	4798      	blx	r3
      }
      return;
 800e36e:	e2a0      	b.n	800e8b2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800e370:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e374:	2b00      	cmp	r3, #0
 800e376:	f000 8117 	beq.w	800e5a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800e37a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e37e:	f003 0301 	and.w	r3, r3, #1
 800e382:	2b00      	cmp	r3, #0
 800e384:	d106      	bne.n	800e394 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800e386:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e38a:	4b85      	ldr	r3, [pc, #532]	; (800e5a0 <HAL_UART_IRQHandler+0x298>)
 800e38c:	4013      	ands	r3, r2
 800e38e:	2b00      	cmp	r3, #0
 800e390:	f000 810a 	beq.w	800e5a8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e398:	f003 0301 	and.w	r3, r3, #1
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d011      	beq.n	800e3c4 <HAL_UART_IRQHandler+0xbc>
 800e3a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e3a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d00b      	beq.n	800e3c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	2201      	movs	r2, #1
 800e3b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3ba:	f043 0201 	orr.w	r2, r3, #1
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e3c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3c8:	f003 0302 	and.w	r3, r3, #2
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d011      	beq.n	800e3f4 <HAL_UART_IRQHandler+0xec>
 800e3d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e3d4:	f003 0301 	and.w	r3, r3, #1
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d00b      	beq.n	800e3f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	2202      	movs	r2, #2
 800e3e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3ea:	f043 0204 	orr.w	r2, r3, #4
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e3f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3f8:	f003 0304 	and.w	r3, r3, #4
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d011      	beq.n	800e424 <HAL_UART_IRQHandler+0x11c>
 800e400:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e404:	f003 0301 	and.w	r3, r3, #1
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d00b      	beq.n	800e424 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	2204      	movs	r2, #4
 800e412:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e41a:	f043 0202 	orr.w	r2, r3, #2
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e428:	f003 0308 	and.w	r3, r3, #8
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d017      	beq.n	800e460 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e434:	f003 0320 	and.w	r3, r3, #32
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d105      	bne.n	800e448 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800e43c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e440:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e444:	2b00      	cmp	r3, #0
 800e446:	d00b      	beq.n	800e460 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	2208      	movs	r2, #8
 800e44e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e456:	f043 0208 	orr.w	r2, r3, #8
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e464:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d012      	beq.n	800e492 <HAL_UART_IRQHandler+0x18a>
 800e46c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e470:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e474:	2b00      	cmp	r3, #0
 800e476:	d00c      	beq.n	800e492 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e480:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e488:	f043 0220 	orr.w	r2, r3, #32
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e498:	2b00      	cmp	r3, #0
 800e49a:	f000 820c 	beq.w	800e8b6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e49e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4a2:	f003 0320 	and.w	r3, r3, #32
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d00d      	beq.n	800e4c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e4aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4ae:	f003 0320 	and.w	r3, r3, #32
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d007      	beq.n	800e4c6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d003      	beq.n	800e4c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	689b      	ldr	r3, [r3, #8]
 800e4d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4da:	2b40      	cmp	r3, #64	; 0x40
 800e4dc:	d005      	beq.n	800e4ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e4de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e4e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d04f      	beq.n	800e58a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f000 fed8 	bl	800f2a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	689b      	ldr	r3, [r3, #8]
 800e4f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4fa:	2b40      	cmp	r3, #64	; 0x40
 800e4fc:	d141      	bne.n	800e582 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	3308      	adds	r3, #8
 800e504:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e508:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e50c:	e853 3f00 	ldrex	r3, [r3]
 800e510:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e514:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e518:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e51c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	3308      	adds	r3, #8
 800e526:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e52a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e52e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e532:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e536:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e53a:	e841 2300 	strex	r3, r2, [r1]
 800e53e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e542:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e546:	2b00      	cmp	r3, #0
 800e548:	d1d9      	bne.n	800e4fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d013      	beq.n	800e57a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e556:	4a13      	ldr	r2, [pc, #76]	; (800e5a4 <HAL_UART_IRQHandler+0x29c>)
 800e558:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e55e:	4618      	mov	r0, r3
 800e560:	f7fc fd3b 	bl	800afda <HAL_DMA_Abort_IT>
 800e564:	4603      	mov	r3, r0
 800e566:	2b00      	cmp	r3, #0
 800e568:	d017      	beq.n	800e59a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e570:	687a      	ldr	r2, [r7, #4]
 800e572:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800e574:	4610      	mov	r0, r2
 800e576:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e578:	e00f      	b.n	800e59a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f000 f9a6 	bl	800e8cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e580:	e00b      	b.n	800e59a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e582:	6878      	ldr	r0, [r7, #4]
 800e584:	f000 f9a2 	bl	800e8cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e588:	e007      	b.n	800e59a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f000 f99e 	bl	800e8cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2200      	movs	r2, #0
 800e594:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800e598:	e18d      	b.n	800e8b6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e59a:	bf00      	nop
    return;
 800e59c:	e18b      	b.n	800e8b6 <HAL_UART_IRQHandler+0x5ae>
 800e59e:	bf00      	nop
 800e5a0:	04000120 	.word	0x04000120
 800e5a4:	0800f367 	.word	0x0800f367

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e5ac:	2b01      	cmp	r3, #1
 800e5ae:	f040 8146 	bne.w	800e83e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e5b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5b6:	f003 0310 	and.w	r3, r3, #16
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	f000 813f 	beq.w	800e83e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e5c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e5c4:	f003 0310 	and.w	r3, r3, #16
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	f000 8138 	beq.w	800e83e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	2210      	movs	r2, #16
 800e5d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	689b      	ldr	r3, [r3, #8]
 800e5dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5e0:	2b40      	cmp	r3, #64	; 0x40
 800e5e2:	f040 80b4 	bne.w	800e74e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	685b      	ldr	r3, [r3, #4]
 800e5ee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e5f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	f000 815f 	beq.w	800e8ba <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e602:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e606:	429a      	cmp	r2, r3
 800e608:	f080 8157 	bcs.w	800e8ba <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e612:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	f003 0320 	and.w	r3, r3, #32
 800e622:	2b00      	cmp	r3, #0
 800e624:	f040 8085 	bne.w	800e732 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e630:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e634:	e853 3f00 	ldrex	r3, [r3]
 800e638:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e63c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e640:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e644:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	461a      	mov	r2, r3
 800e64e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e652:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e656:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e65a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e65e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e662:	e841 2300 	strex	r3, r2, [r1]
 800e666:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e66a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d1da      	bne.n	800e628 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	3308      	adds	r3, #8
 800e678:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e67a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e67c:	e853 3f00 	ldrex	r3, [r3]
 800e680:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e682:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e684:	f023 0301 	bic.w	r3, r3, #1
 800e688:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	3308      	adds	r3, #8
 800e692:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e696:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e69a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e69c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e69e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e6a2:	e841 2300 	strex	r3, r2, [r1]
 800e6a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e6a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d1e1      	bne.n	800e672 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	3308      	adds	r3, #8
 800e6b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e6b8:	e853 3f00 	ldrex	r3, [r3]
 800e6bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e6be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e6c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e6c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	3308      	adds	r3, #8
 800e6ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e6d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e6d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e6d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e6da:	e841 2300 	strex	r3, r2, [r1]
 800e6de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e6e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d1e3      	bne.n	800e6ae <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	2220      	movs	r2, #32
 800e6ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6fa:	e853 3f00 	ldrex	r3, [r3]
 800e6fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e702:	f023 0310 	bic.w	r3, r3, #16
 800e706:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	461a      	mov	r2, r3
 800e710:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e714:	65bb      	str	r3, [r7, #88]	; 0x58
 800e716:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e718:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e71a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e71c:	e841 2300 	strex	r3, r2, [r1]
 800e720:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e724:	2b00      	cmp	r3, #0
 800e726:	d1e4      	bne.n	800e6f2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e72c:	4618      	mov	r0, r3
 800e72e:	f7fc fc16 	bl	800af5e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e73e:	b29b      	uxth	r3, r3
 800e740:	1ad3      	subs	r3, r2, r3
 800e742:	b29b      	uxth	r3, r3
 800e744:	4619      	mov	r1, r3
 800e746:	6878      	ldr	r0, [r7, #4]
 800e748:	f000 f8ca 	bl	800e8e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e74c:	e0b5      	b.n	800e8ba <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e75a:	b29b      	uxth	r3, r3
 800e75c:	1ad3      	subs	r3, r2, r3
 800e75e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e768:	b29b      	uxth	r3, r3
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	f000 80a7 	beq.w	800e8be <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800e770:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e774:	2b00      	cmp	r3, #0
 800e776:	f000 80a2 	beq.w	800e8be <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e782:	e853 3f00 	ldrex	r3, [r3]
 800e786:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e78a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e78e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	461a      	mov	r2, r3
 800e798:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e79c:	647b      	str	r3, [r7, #68]	; 0x44
 800e79e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e7a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e7a4:	e841 2300 	strex	r3, r2, [r1]
 800e7a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e7aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d1e4      	bne.n	800e77a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	3308      	adds	r3, #8
 800e7b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ba:	e853 3f00 	ldrex	r3, [r3]
 800e7be:	623b      	str	r3, [r7, #32]
   return(result);
 800e7c0:	6a3b      	ldr	r3, [r7, #32]
 800e7c2:	f023 0301 	bic.w	r3, r3, #1
 800e7c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	3308      	adds	r3, #8
 800e7d0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e7d4:	633a      	str	r2, [r7, #48]	; 0x30
 800e7d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e7da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7dc:	e841 2300 	strex	r3, r2, [r1]
 800e7e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d1e3      	bne.n	800e7b0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2220      	movs	r2, #32
 800e7ec:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	e853 3f00 	ldrex	r3, [r3]
 800e806:	60fb      	str	r3, [r7, #12]
   return(result);
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	f023 0310 	bic.w	r3, r3, #16
 800e80e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	461a      	mov	r2, r3
 800e818:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e81c:	61fb      	str	r3, [r7, #28]
 800e81e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e820:	69b9      	ldr	r1, [r7, #24]
 800e822:	69fa      	ldr	r2, [r7, #28]
 800e824:	e841 2300 	strex	r3, r2, [r1]
 800e828:	617b      	str	r3, [r7, #20]
   return(result);
 800e82a:	697b      	ldr	r3, [r7, #20]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d1e4      	bne.n	800e7fa <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e830:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e834:	4619      	mov	r1, r3
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f000 f852 	bl	800e8e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e83c:	e03f      	b.n	800e8be <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e83e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e842:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e846:	2b00      	cmp	r3, #0
 800e848:	d00e      	beq.n	800e868 <HAL_UART_IRQHandler+0x560>
 800e84a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e84e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e852:	2b00      	cmp	r3, #0
 800e854:	d008      	beq.n	800e868 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e85e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	f000 ffdc 	bl	800f81e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e866:	e02d      	b.n	800e8c4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e86c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e870:	2b00      	cmp	r3, #0
 800e872:	d00e      	beq.n	800e892 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d008      	beq.n	800e892 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e884:	2b00      	cmp	r3, #0
 800e886:	d01c      	beq.n	800e8c2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	4798      	blx	r3
    }
    return;
 800e890:	e017      	b.n	800e8c2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d012      	beq.n	800e8c4 <HAL_UART_IRQHandler+0x5bc>
 800e89e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e8a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d00c      	beq.n	800e8c4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f000 fe2d 	bl	800f50a <UART_EndTransmit_IT>
    return;
 800e8b0:	e008      	b.n	800e8c4 <HAL_UART_IRQHandler+0x5bc>
      return;
 800e8b2:	bf00      	nop
 800e8b4:	e006      	b.n	800e8c4 <HAL_UART_IRQHandler+0x5bc>
    return;
 800e8b6:	bf00      	nop
 800e8b8:	e004      	b.n	800e8c4 <HAL_UART_IRQHandler+0x5bc>
      return;
 800e8ba:	bf00      	nop
 800e8bc:	e002      	b.n	800e8c4 <HAL_UART_IRQHandler+0x5bc>
      return;
 800e8be:	bf00      	nop
 800e8c0:	e000      	b.n	800e8c4 <HAL_UART_IRQHandler+0x5bc>
    return;
 800e8c2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800e8c4:	37e8      	adds	r7, #232	; 0xe8
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bd80      	pop	{r7, pc}
 800e8ca:	bf00      	nop

0800e8cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e8cc:	b480      	push	{r7}
 800e8ce:	b083      	sub	sp, #12
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e8d4:	bf00      	nop
 800e8d6:	370c      	adds	r7, #12
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8de:	4770      	bx	lr

0800e8e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e8e0:	b480      	push	{r7}
 800e8e2:	b083      	sub	sp, #12
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
 800e8e8:	460b      	mov	r3, r1
 800e8ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e8ec:	bf00      	nop
 800e8ee:	370c      	adds	r7, #12
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f6:	4770      	bx	lr

0800e8f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e8f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e8fc:	b08a      	sub	sp, #40	; 0x28
 800e8fe:	af00      	add	r7, sp, #0
 800e900:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e902:	2300      	movs	r3, #0
 800e904:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	689a      	ldr	r2, [r3, #8]
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	691b      	ldr	r3, [r3, #16]
 800e910:	431a      	orrs	r2, r3
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	695b      	ldr	r3, [r3, #20]
 800e916:	431a      	orrs	r2, r3
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	69db      	ldr	r3, [r3, #28]
 800e91c:	4313      	orrs	r3, r2
 800e91e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	681a      	ldr	r2, [r3, #0]
 800e926:	4b9e      	ldr	r3, [pc, #632]	; (800eba0 <UART_SetConfig+0x2a8>)
 800e928:	4013      	ands	r3, r2
 800e92a:	68fa      	ldr	r2, [r7, #12]
 800e92c:	6812      	ldr	r2, [r2, #0]
 800e92e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e930:	430b      	orrs	r3, r1
 800e932:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	685b      	ldr	r3, [r3, #4]
 800e93a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	68da      	ldr	r2, [r3, #12]
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	430a      	orrs	r2, r1
 800e948:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	699b      	ldr	r3, [r3, #24]
 800e94e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	4a93      	ldr	r2, [pc, #588]	; (800eba4 <UART_SetConfig+0x2ac>)
 800e956:	4293      	cmp	r3, r2
 800e958:	d004      	beq.n	800e964 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	6a1b      	ldr	r3, [r3, #32]
 800e95e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e960:	4313      	orrs	r3, r2
 800e962:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	689b      	ldr	r3, [r3, #8]
 800e96a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e974:	430a      	orrs	r2, r1
 800e976:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	4a8a      	ldr	r2, [pc, #552]	; (800eba8 <UART_SetConfig+0x2b0>)
 800e97e:	4293      	cmp	r3, r2
 800e980:	d126      	bne.n	800e9d0 <UART_SetConfig+0xd8>
 800e982:	4b8a      	ldr	r3, [pc, #552]	; (800ebac <UART_SetConfig+0x2b4>)
 800e984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e988:	f003 0303 	and.w	r3, r3, #3
 800e98c:	2b03      	cmp	r3, #3
 800e98e:	d81b      	bhi.n	800e9c8 <UART_SetConfig+0xd0>
 800e990:	a201      	add	r2, pc, #4	; (adr r2, 800e998 <UART_SetConfig+0xa0>)
 800e992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e996:	bf00      	nop
 800e998:	0800e9a9 	.word	0x0800e9a9
 800e99c:	0800e9b9 	.word	0x0800e9b9
 800e9a0:	0800e9b1 	.word	0x0800e9b1
 800e9a4:	0800e9c1 	.word	0x0800e9c1
 800e9a8:	2301      	movs	r3, #1
 800e9aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e9ae:	e0ab      	b.n	800eb08 <UART_SetConfig+0x210>
 800e9b0:	2302      	movs	r3, #2
 800e9b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e9b6:	e0a7      	b.n	800eb08 <UART_SetConfig+0x210>
 800e9b8:	2304      	movs	r3, #4
 800e9ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e9be:	e0a3      	b.n	800eb08 <UART_SetConfig+0x210>
 800e9c0:	2308      	movs	r3, #8
 800e9c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e9c6:	e09f      	b.n	800eb08 <UART_SetConfig+0x210>
 800e9c8:	2310      	movs	r3, #16
 800e9ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e9ce:	e09b      	b.n	800eb08 <UART_SetConfig+0x210>
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	4a76      	ldr	r2, [pc, #472]	; (800ebb0 <UART_SetConfig+0x2b8>)
 800e9d6:	4293      	cmp	r3, r2
 800e9d8:	d138      	bne.n	800ea4c <UART_SetConfig+0x154>
 800e9da:	4b74      	ldr	r3, [pc, #464]	; (800ebac <UART_SetConfig+0x2b4>)
 800e9dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e9e0:	f003 030c 	and.w	r3, r3, #12
 800e9e4:	2b0c      	cmp	r3, #12
 800e9e6:	d82d      	bhi.n	800ea44 <UART_SetConfig+0x14c>
 800e9e8:	a201      	add	r2, pc, #4	; (adr r2, 800e9f0 <UART_SetConfig+0xf8>)
 800e9ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9ee:	bf00      	nop
 800e9f0:	0800ea25 	.word	0x0800ea25
 800e9f4:	0800ea45 	.word	0x0800ea45
 800e9f8:	0800ea45 	.word	0x0800ea45
 800e9fc:	0800ea45 	.word	0x0800ea45
 800ea00:	0800ea35 	.word	0x0800ea35
 800ea04:	0800ea45 	.word	0x0800ea45
 800ea08:	0800ea45 	.word	0x0800ea45
 800ea0c:	0800ea45 	.word	0x0800ea45
 800ea10:	0800ea2d 	.word	0x0800ea2d
 800ea14:	0800ea45 	.word	0x0800ea45
 800ea18:	0800ea45 	.word	0x0800ea45
 800ea1c:	0800ea45 	.word	0x0800ea45
 800ea20:	0800ea3d 	.word	0x0800ea3d
 800ea24:	2300      	movs	r3, #0
 800ea26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ea2a:	e06d      	b.n	800eb08 <UART_SetConfig+0x210>
 800ea2c:	2302      	movs	r3, #2
 800ea2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ea32:	e069      	b.n	800eb08 <UART_SetConfig+0x210>
 800ea34:	2304      	movs	r3, #4
 800ea36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ea3a:	e065      	b.n	800eb08 <UART_SetConfig+0x210>
 800ea3c:	2308      	movs	r3, #8
 800ea3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ea42:	e061      	b.n	800eb08 <UART_SetConfig+0x210>
 800ea44:	2310      	movs	r3, #16
 800ea46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ea4a:	e05d      	b.n	800eb08 <UART_SetConfig+0x210>
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	4a58      	ldr	r2, [pc, #352]	; (800ebb4 <UART_SetConfig+0x2bc>)
 800ea52:	4293      	cmp	r3, r2
 800ea54:	d125      	bne.n	800eaa2 <UART_SetConfig+0x1aa>
 800ea56:	4b55      	ldr	r3, [pc, #340]	; (800ebac <UART_SetConfig+0x2b4>)
 800ea58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea5c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ea60:	2b30      	cmp	r3, #48	; 0x30
 800ea62:	d016      	beq.n	800ea92 <UART_SetConfig+0x19a>
 800ea64:	2b30      	cmp	r3, #48	; 0x30
 800ea66:	d818      	bhi.n	800ea9a <UART_SetConfig+0x1a2>
 800ea68:	2b20      	cmp	r3, #32
 800ea6a:	d00a      	beq.n	800ea82 <UART_SetConfig+0x18a>
 800ea6c:	2b20      	cmp	r3, #32
 800ea6e:	d814      	bhi.n	800ea9a <UART_SetConfig+0x1a2>
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d002      	beq.n	800ea7a <UART_SetConfig+0x182>
 800ea74:	2b10      	cmp	r3, #16
 800ea76:	d008      	beq.n	800ea8a <UART_SetConfig+0x192>
 800ea78:	e00f      	b.n	800ea9a <UART_SetConfig+0x1a2>
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ea80:	e042      	b.n	800eb08 <UART_SetConfig+0x210>
 800ea82:	2302      	movs	r3, #2
 800ea84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ea88:	e03e      	b.n	800eb08 <UART_SetConfig+0x210>
 800ea8a:	2304      	movs	r3, #4
 800ea8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ea90:	e03a      	b.n	800eb08 <UART_SetConfig+0x210>
 800ea92:	2308      	movs	r3, #8
 800ea94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ea98:	e036      	b.n	800eb08 <UART_SetConfig+0x210>
 800ea9a:	2310      	movs	r3, #16
 800ea9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800eaa0:	e032      	b.n	800eb08 <UART_SetConfig+0x210>
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	4a3f      	ldr	r2, [pc, #252]	; (800eba4 <UART_SetConfig+0x2ac>)
 800eaa8:	4293      	cmp	r3, r2
 800eaaa:	d12a      	bne.n	800eb02 <UART_SetConfig+0x20a>
 800eaac:	4b3f      	ldr	r3, [pc, #252]	; (800ebac <UART_SetConfig+0x2b4>)
 800eaae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eab2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800eab6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800eaba:	d01a      	beq.n	800eaf2 <UART_SetConfig+0x1fa>
 800eabc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800eac0:	d81b      	bhi.n	800eafa <UART_SetConfig+0x202>
 800eac2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eac6:	d00c      	beq.n	800eae2 <UART_SetConfig+0x1ea>
 800eac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eacc:	d815      	bhi.n	800eafa <UART_SetConfig+0x202>
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d003      	beq.n	800eada <UART_SetConfig+0x1e2>
 800ead2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ead6:	d008      	beq.n	800eaea <UART_SetConfig+0x1f2>
 800ead8:	e00f      	b.n	800eafa <UART_SetConfig+0x202>
 800eada:	2300      	movs	r3, #0
 800eadc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800eae0:	e012      	b.n	800eb08 <UART_SetConfig+0x210>
 800eae2:	2302      	movs	r3, #2
 800eae4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800eae8:	e00e      	b.n	800eb08 <UART_SetConfig+0x210>
 800eaea:	2304      	movs	r3, #4
 800eaec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800eaf0:	e00a      	b.n	800eb08 <UART_SetConfig+0x210>
 800eaf2:	2308      	movs	r3, #8
 800eaf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800eaf8:	e006      	b.n	800eb08 <UART_SetConfig+0x210>
 800eafa:	2310      	movs	r3, #16
 800eafc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800eb00:	e002      	b.n	800eb08 <UART_SetConfig+0x210>
 800eb02:	2310      	movs	r3, #16
 800eb04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	4a25      	ldr	r2, [pc, #148]	; (800eba4 <UART_SetConfig+0x2ac>)
 800eb0e:	4293      	cmp	r3, r2
 800eb10:	f040 808a 	bne.w	800ec28 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800eb14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eb18:	2b08      	cmp	r3, #8
 800eb1a:	d824      	bhi.n	800eb66 <UART_SetConfig+0x26e>
 800eb1c:	a201      	add	r2, pc, #4	; (adr r2, 800eb24 <UART_SetConfig+0x22c>)
 800eb1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb22:	bf00      	nop
 800eb24:	0800eb49 	.word	0x0800eb49
 800eb28:	0800eb67 	.word	0x0800eb67
 800eb2c:	0800eb51 	.word	0x0800eb51
 800eb30:	0800eb67 	.word	0x0800eb67
 800eb34:	0800eb57 	.word	0x0800eb57
 800eb38:	0800eb67 	.word	0x0800eb67
 800eb3c:	0800eb67 	.word	0x0800eb67
 800eb40:	0800eb67 	.word	0x0800eb67
 800eb44:	0800eb5f 	.word	0x0800eb5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eb48:	f7fd fb6a 	bl	800c220 <HAL_RCC_GetPCLK1Freq>
 800eb4c:	61f8      	str	r0, [r7, #28]
        break;
 800eb4e:	e010      	b.n	800eb72 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800eb50:	4b19      	ldr	r3, [pc, #100]	; (800ebb8 <UART_SetConfig+0x2c0>)
 800eb52:	61fb      	str	r3, [r7, #28]
        break;
 800eb54:	e00d      	b.n	800eb72 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800eb56:	f7fd facb 	bl	800c0f0 <HAL_RCC_GetSysClockFreq>
 800eb5a:	61f8      	str	r0, [r7, #28]
        break;
 800eb5c:	e009      	b.n	800eb72 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eb5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eb62:	61fb      	str	r3, [r7, #28]
        break;
 800eb64:	e005      	b.n	800eb72 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800eb66:	2300      	movs	r3, #0
 800eb68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800eb70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800eb72:	69fb      	ldr	r3, [r7, #28]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	f000 8109 	beq.w	800ed8c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	685a      	ldr	r2, [r3, #4]
 800eb7e:	4613      	mov	r3, r2
 800eb80:	005b      	lsls	r3, r3, #1
 800eb82:	4413      	add	r3, r2
 800eb84:	69fa      	ldr	r2, [r7, #28]
 800eb86:	429a      	cmp	r2, r3
 800eb88:	d305      	bcc.n	800eb96 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	685b      	ldr	r3, [r3, #4]
 800eb8e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800eb90:	69fa      	ldr	r2, [r7, #28]
 800eb92:	429a      	cmp	r2, r3
 800eb94:	d912      	bls.n	800ebbc <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800eb96:	2301      	movs	r3, #1
 800eb98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800eb9c:	e0f6      	b.n	800ed8c <UART_SetConfig+0x494>
 800eb9e:	bf00      	nop
 800eba0:	efff69f3 	.word	0xefff69f3
 800eba4:	40008000 	.word	0x40008000
 800eba8:	40013800 	.word	0x40013800
 800ebac:	40021000 	.word	0x40021000
 800ebb0:	40004400 	.word	0x40004400
 800ebb4:	40004800 	.word	0x40004800
 800ebb8:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800ebbc:	69fb      	ldr	r3, [r7, #28]
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	461c      	mov	r4, r3
 800ebc2:	4615      	mov	r5, r2
 800ebc4:	f04f 0200 	mov.w	r2, #0
 800ebc8:	f04f 0300 	mov.w	r3, #0
 800ebcc:	022b      	lsls	r3, r5, #8
 800ebce:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800ebd2:	0222      	lsls	r2, r4, #8
 800ebd4:	68f9      	ldr	r1, [r7, #12]
 800ebd6:	6849      	ldr	r1, [r1, #4]
 800ebd8:	0849      	lsrs	r1, r1, #1
 800ebda:	2000      	movs	r0, #0
 800ebdc:	4688      	mov	r8, r1
 800ebde:	4681      	mov	r9, r0
 800ebe0:	eb12 0a08 	adds.w	sl, r2, r8
 800ebe4:	eb43 0b09 	adc.w	fp, r3, r9
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	685b      	ldr	r3, [r3, #4]
 800ebec:	2200      	movs	r2, #0
 800ebee:	603b      	str	r3, [r7, #0]
 800ebf0:	607a      	str	r2, [r7, #4]
 800ebf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ebf6:	4650      	mov	r0, sl
 800ebf8:	4659      	mov	r1, fp
 800ebfa:	f7f1 fb39 	bl	8000270 <__aeabi_uldivmod>
 800ebfe:	4602      	mov	r2, r0
 800ec00:	460b      	mov	r3, r1
 800ec02:	4613      	mov	r3, r2
 800ec04:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ec06:	69bb      	ldr	r3, [r7, #24]
 800ec08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ec0c:	d308      	bcc.n	800ec20 <UART_SetConfig+0x328>
 800ec0e:	69bb      	ldr	r3, [r7, #24]
 800ec10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ec14:	d204      	bcs.n	800ec20 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	69ba      	ldr	r2, [r7, #24]
 800ec1c:	60da      	str	r2, [r3, #12]
 800ec1e:	e0b5      	b.n	800ed8c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800ec20:	2301      	movs	r3, #1
 800ec22:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ec26:	e0b1      	b.n	800ed8c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	69db      	ldr	r3, [r3, #28]
 800ec2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ec30:	d15d      	bne.n	800ecee <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800ec32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ec36:	2b08      	cmp	r3, #8
 800ec38:	d827      	bhi.n	800ec8a <UART_SetConfig+0x392>
 800ec3a:	a201      	add	r2, pc, #4	; (adr r2, 800ec40 <UART_SetConfig+0x348>)
 800ec3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec40:	0800ec65 	.word	0x0800ec65
 800ec44:	0800ec6d 	.word	0x0800ec6d
 800ec48:	0800ec75 	.word	0x0800ec75
 800ec4c:	0800ec8b 	.word	0x0800ec8b
 800ec50:	0800ec7b 	.word	0x0800ec7b
 800ec54:	0800ec8b 	.word	0x0800ec8b
 800ec58:	0800ec8b 	.word	0x0800ec8b
 800ec5c:	0800ec8b 	.word	0x0800ec8b
 800ec60:	0800ec83 	.word	0x0800ec83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ec64:	f7fd fadc 	bl	800c220 <HAL_RCC_GetPCLK1Freq>
 800ec68:	61f8      	str	r0, [r7, #28]
        break;
 800ec6a:	e014      	b.n	800ec96 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ec6c:	f7fd faee 	bl	800c24c <HAL_RCC_GetPCLK2Freq>
 800ec70:	61f8      	str	r0, [r7, #28]
        break;
 800ec72:	e010      	b.n	800ec96 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ec74:	4b4c      	ldr	r3, [pc, #304]	; (800eda8 <UART_SetConfig+0x4b0>)
 800ec76:	61fb      	str	r3, [r7, #28]
        break;
 800ec78:	e00d      	b.n	800ec96 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ec7a:	f7fd fa39 	bl	800c0f0 <HAL_RCC_GetSysClockFreq>
 800ec7e:	61f8      	str	r0, [r7, #28]
        break;
 800ec80:	e009      	b.n	800ec96 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ec82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec86:	61fb      	str	r3, [r7, #28]
        break;
 800ec88:	e005      	b.n	800ec96 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ec8e:	2301      	movs	r3, #1
 800ec90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ec94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ec96:	69fb      	ldr	r3, [r7, #28]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d077      	beq.n	800ed8c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ec9c:	69fb      	ldr	r3, [r7, #28]
 800ec9e:	005a      	lsls	r2, r3, #1
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	685b      	ldr	r3, [r3, #4]
 800eca4:	085b      	lsrs	r3, r3, #1
 800eca6:	441a      	add	r2, r3
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	685b      	ldr	r3, [r3, #4]
 800ecac:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecb0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ecb2:	69bb      	ldr	r3, [r7, #24]
 800ecb4:	2b0f      	cmp	r3, #15
 800ecb6:	d916      	bls.n	800ece6 <UART_SetConfig+0x3ee>
 800ecb8:	69bb      	ldr	r3, [r7, #24]
 800ecba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ecbe:	d212      	bcs.n	800ece6 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ecc0:	69bb      	ldr	r3, [r7, #24]
 800ecc2:	b29b      	uxth	r3, r3
 800ecc4:	f023 030f 	bic.w	r3, r3, #15
 800ecc8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ecca:	69bb      	ldr	r3, [r7, #24]
 800eccc:	085b      	lsrs	r3, r3, #1
 800ecce:	b29b      	uxth	r3, r3
 800ecd0:	f003 0307 	and.w	r3, r3, #7
 800ecd4:	b29a      	uxth	r2, r3
 800ecd6:	8afb      	ldrh	r3, [r7, #22]
 800ecd8:	4313      	orrs	r3, r2
 800ecda:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	8afa      	ldrh	r2, [r7, #22]
 800ece2:	60da      	str	r2, [r3, #12]
 800ece4:	e052      	b.n	800ed8c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800ece6:	2301      	movs	r3, #1
 800ece8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ecec:	e04e      	b.n	800ed8c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ecee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ecf2:	2b08      	cmp	r3, #8
 800ecf4:	d827      	bhi.n	800ed46 <UART_SetConfig+0x44e>
 800ecf6:	a201      	add	r2, pc, #4	; (adr r2, 800ecfc <UART_SetConfig+0x404>)
 800ecf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecfc:	0800ed21 	.word	0x0800ed21
 800ed00:	0800ed29 	.word	0x0800ed29
 800ed04:	0800ed31 	.word	0x0800ed31
 800ed08:	0800ed47 	.word	0x0800ed47
 800ed0c:	0800ed37 	.word	0x0800ed37
 800ed10:	0800ed47 	.word	0x0800ed47
 800ed14:	0800ed47 	.word	0x0800ed47
 800ed18:	0800ed47 	.word	0x0800ed47
 800ed1c:	0800ed3f 	.word	0x0800ed3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ed20:	f7fd fa7e 	bl	800c220 <HAL_RCC_GetPCLK1Freq>
 800ed24:	61f8      	str	r0, [r7, #28]
        break;
 800ed26:	e014      	b.n	800ed52 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ed28:	f7fd fa90 	bl	800c24c <HAL_RCC_GetPCLK2Freq>
 800ed2c:	61f8      	str	r0, [r7, #28]
        break;
 800ed2e:	e010      	b.n	800ed52 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ed30:	4b1d      	ldr	r3, [pc, #116]	; (800eda8 <UART_SetConfig+0x4b0>)
 800ed32:	61fb      	str	r3, [r7, #28]
        break;
 800ed34:	e00d      	b.n	800ed52 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ed36:	f7fd f9db 	bl	800c0f0 <HAL_RCC_GetSysClockFreq>
 800ed3a:	61f8      	str	r0, [r7, #28]
        break;
 800ed3c:	e009      	b.n	800ed52 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ed3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ed42:	61fb      	str	r3, [r7, #28]
        break;
 800ed44:	e005      	b.n	800ed52 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800ed46:	2300      	movs	r3, #0
 800ed48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ed4a:	2301      	movs	r3, #1
 800ed4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ed50:	bf00      	nop
    }

    if (pclk != 0U)
 800ed52:	69fb      	ldr	r3, [r7, #28]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d019      	beq.n	800ed8c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	685b      	ldr	r3, [r3, #4]
 800ed5c:	085a      	lsrs	r2, r3, #1
 800ed5e:	69fb      	ldr	r3, [r7, #28]
 800ed60:	441a      	add	r2, r3
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	685b      	ldr	r3, [r3, #4]
 800ed66:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed6a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ed6c:	69bb      	ldr	r3, [r7, #24]
 800ed6e:	2b0f      	cmp	r3, #15
 800ed70:	d909      	bls.n	800ed86 <UART_SetConfig+0x48e>
 800ed72:	69bb      	ldr	r3, [r7, #24]
 800ed74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed78:	d205      	bcs.n	800ed86 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ed7a:	69bb      	ldr	r3, [r7, #24]
 800ed7c:	b29a      	uxth	r2, r3
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	60da      	str	r2, [r3, #12]
 800ed84:	e002      	b.n	800ed8c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800ed86:	2301      	movs	r3, #1
 800ed88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	2200      	movs	r2, #0
 800ed90:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	2200      	movs	r2, #0
 800ed96:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800ed98:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3728      	adds	r7, #40	; 0x28
 800eda0:	46bd      	mov	sp, r7
 800eda2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eda6:	bf00      	nop
 800eda8:	00f42400 	.word	0x00f42400

0800edac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800edac:	b480      	push	{r7}
 800edae:	b083      	sub	sp, #12
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edb8:	f003 0301 	and.w	r3, r3, #1
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d00a      	beq.n	800edd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	685b      	ldr	r3, [r3, #4]
 800edc6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	430a      	orrs	r2, r1
 800edd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edda:	f003 0302 	and.w	r3, r3, #2
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d00a      	beq.n	800edf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	685b      	ldr	r3, [r3, #4]
 800ede8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	430a      	orrs	r2, r1
 800edf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edfc:	f003 0304 	and.w	r3, r3, #4
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d00a      	beq.n	800ee1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	685b      	ldr	r3, [r3, #4]
 800ee0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	430a      	orrs	r2, r1
 800ee18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee1e:	f003 0308 	and.w	r3, r3, #8
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d00a      	beq.n	800ee3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	685b      	ldr	r3, [r3, #4]
 800ee2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	430a      	orrs	r2, r1
 800ee3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee40:	f003 0310 	and.w	r3, r3, #16
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d00a      	beq.n	800ee5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	689b      	ldr	r3, [r3, #8]
 800ee4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	430a      	orrs	r2, r1
 800ee5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee62:	f003 0320 	and.w	r3, r3, #32
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d00a      	beq.n	800ee80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	689b      	ldr	r3, [r3, #8]
 800ee70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	430a      	orrs	r2, r1
 800ee7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d01a      	beq.n	800eec2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	685b      	ldr	r3, [r3, #4]
 800ee92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	430a      	orrs	r2, r1
 800eea0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eea6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eeaa:	d10a      	bne.n	800eec2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	685b      	ldr	r3, [r3, #4]
 800eeb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	430a      	orrs	r2, r1
 800eec0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d00a      	beq.n	800eee4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	685b      	ldr	r3, [r3, #4]
 800eed4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	430a      	orrs	r2, r1
 800eee2:	605a      	str	r2, [r3, #4]
  }
}
 800eee4:	bf00      	nop
 800eee6:	370c      	adds	r7, #12
 800eee8:	46bd      	mov	sp, r7
 800eeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeee:	4770      	bx	lr

0800eef0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b086      	sub	sp, #24
 800eef4:	af02      	add	r7, sp, #8
 800eef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	2200      	movs	r2, #0
 800eefc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ef00:	f7fb feec 	bl	800acdc <HAL_GetTick>
 800ef04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	f003 0308 	and.w	r3, r3, #8
 800ef10:	2b08      	cmp	r3, #8
 800ef12:	d10e      	bne.n	800ef32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ef14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ef18:	9300      	str	r3, [sp, #0]
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ef22:	6878      	ldr	r0, [r7, #4]
 800ef24:	f000 f82d 	bl	800ef82 <UART_WaitOnFlagUntilTimeout>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d001      	beq.n	800ef32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ef2e:	2303      	movs	r3, #3
 800ef30:	e023      	b.n	800ef7a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	f003 0304 	and.w	r3, r3, #4
 800ef3c:	2b04      	cmp	r3, #4
 800ef3e:	d10e      	bne.n	800ef5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ef40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ef44:	9300      	str	r3, [sp, #0]
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	2200      	movs	r2, #0
 800ef4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	f000 f817 	bl	800ef82 <UART_WaitOnFlagUntilTimeout>
 800ef54:	4603      	mov	r3, r0
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d001      	beq.n	800ef5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ef5a:	2303      	movs	r3, #3
 800ef5c:	e00d      	b.n	800ef7a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	2220      	movs	r2, #32
 800ef62:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	2220      	movs	r2, #32
 800ef68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	2200      	movs	r2, #0
 800ef74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800ef78:	2300      	movs	r3, #0
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	3710      	adds	r7, #16
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}

0800ef82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ef82:	b580      	push	{r7, lr}
 800ef84:	b09c      	sub	sp, #112	; 0x70
 800ef86:	af00      	add	r7, sp, #0
 800ef88:	60f8      	str	r0, [r7, #12]
 800ef8a:	60b9      	str	r1, [r7, #8]
 800ef8c:	603b      	str	r3, [r7, #0]
 800ef8e:	4613      	mov	r3, r2
 800ef90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ef92:	e0a5      	b.n	800f0e0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ef94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef9a:	f000 80a1 	beq.w	800f0e0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ef9e:	f7fb fe9d 	bl	800acdc <HAL_GetTick>
 800efa2:	4602      	mov	r2, r0
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	1ad3      	subs	r3, r2, r3
 800efa8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800efaa:	429a      	cmp	r2, r3
 800efac:	d302      	bcc.n	800efb4 <UART_WaitOnFlagUntilTimeout+0x32>
 800efae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d13e      	bne.n	800f032 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efbc:	e853 3f00 	ldrex	r3, [r3]
 800efc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800efc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efc4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800efc8:	667b      	str	r3, [r7, #100]	; 0x64
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	461a      	mov	r2, r3
 800efd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800efd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800efd4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800efd8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800efda:	e841 2300 	strex	r3, r2, [r1]
 800efde:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800efe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d1e6      	bne.n	800efb4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	3308      	adds	r3, #8
 800efec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eff0:	e853 3f00 	ldrex	r3, [r3]
 800eff4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eff8:	f023 0301 	bic.w	r3, r3, #1
 800effc:	663b      	str	r3, [r7, #96]	; 0x60
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	3308      	adds	r3, #8
 800f004:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f006:	64ba      	str	r2, [r7, #72]	; 0x48
 800f008:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f00a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f00c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f00e:	e841 2300 	strex	r3, r2, [r1]
 800f012:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f016:	2b00      	cmp	r3, #0
 800f018:	d1e5      	bne.n	800efe6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	2220      	movs	r2, #32
 800f01e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	2220      	movs	r2, #32
 800f024:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	2200      	movs	r2, #0
 800f02a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800f02e:	2303      	movs	r3, #3
 800f030:	e067      	b.n	800f102 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	f003 0304 	and.w	r3, r3, #4
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d04f      	beq.n	800f0e0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	69db      	ldr	r3, [r3, #28]
 800f046:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f04a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f04e:	d147      	bne.n	800f0e0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f058:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f062:	e853 3f00 	ldrex	r3, [r3]
 800f066:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f06a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f06e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	461a      	mov	r2, r3
 800f076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f078:	637b      	str	r3, [r7, #52]	; 0x34
 800f07a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f07c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f07e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f080:	e841 2300 	strex	r3, r2, [r1]
 800f084:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d1e6      	bne.n	800f05a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	3308      	adds	r3, #8
 800f092:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	e853 3f00 	ldrex	r3, [r3]
 800f09a:	613b      	str	r3, [r7, #16]
   return(result);
 800f09c:	693b      	ldr	r3, [r7, #16]
 800f09e:	f023 0301 	bic.w	r3, r3, #1
 800f0a2:	66bb      	str	r3, [r7, #104]	; 0x68
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	3308      	adds	r3, #8
 800f0aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f0ac:	623a      	str	r2, [r7, #32]
 800f0ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0b0:	69f9      	ldr	r1, [r7, #28]
 800f0b2:	6a3a      	ldr	r2, [r7, #32]
 800f0b4:	e841 2300 	strex	r3, r2, [r1]
 800f0b8:	61bb      	str	r3, [r7, #24]
   return(result);
 800f0ba:	69bb      	ldr	r3, [r7, #24]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d1e5      	bne.n	800f08c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	2220      	movs	r2, #32
 800f0c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	2220      	movs	r2, #32
 800f0ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	2220      	movs	r2, #32
 800f0d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800f0dc:	2303      	movs	r3, #3
 800f0de:	e010      	b.n	800f102 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	69da      	ldr	r2, [r3, #28]
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	4013      	ands	r3, r2
 800f0ea:	68ba      	ldr	r2, [r7, #8]
 800f0ec:	429a      	cmp	r2, r3
 800f0ee:	bf0c      	ite	eq
 800f0f0:	2301      	moveq	r3, #1
 800f0f2:	2300      	movne	r3, #0
 800f0f4:	b2db      	uxtb	r3, r3
 800f0f6:	461a      	mov	r2, r3
 800f0f8:	79fb      	ldrb	r3, [r7, #7]
 800f0fa:	429a      	cmp	r2, r3
 800f0fc:	f43f af4a 	beq.w	800ef94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f100:	2300      	movs	r3, #0
}
 800f102:	4618      	mov	r0, r3
 800f104:	3770      	adds	r7, #112	; 0x70
 800f106:	46bd      	mov	sp, r7
 800f108:	bd80      	pop	{r7, pc}
	...

0800f10c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f10c:	b480      	push	{r7}
 800f10e:	b097      	sub	sp, #92	; 0x5c
 800f110:	af00      	add	r7, sp, #0
 800f112:	60f8      	str	r0, [r7, #12]
 800f114:	60b9      	str	r1, [r7, #8]
 800f116:	4613      	mov	r3, r2
 800f118:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	68ba      	ldr	r2, [r7, #8]
 800f11e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	88fa      	ldrh	r2, [r7, #6]
 800f124:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	88fa      	ldrh	r2, [r7, #6]
 800f12c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	2200      	movs	r2, #0
 800f134:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	689b      	ldr	r3, [r3, #8]
 800f13a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f13e:	d10e      	bne.n	800f15e <UART_Start_Receive_IT+0x52>
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	691b      	ldr	r3, [r3, #16]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d105      	bne.n	800f154 <UART_Start_Receive_IT+0x48>
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f14e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f152:	e02d      	b.n	800f1b0 <UART_Start_Receive_IT+0xa4>
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	22ff      	movs	r2, #255	; 0xff
 800f158:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f15c:	e028      	b.n	800f1b0 <UART_Start_Receive_IT+0xa4>
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	689b      	ldr	r3, [r3, #8]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d10d      	bne.n	800f182 <UART_Start_Receive_IT+0x76>
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	691b      	ldr	r3, [r3, #16]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d104      	bne.n	800f178 <UART_Start_Receive_IT+0x6c>
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	22ff      	movs	r2, #255	; 0xff
 800f172:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f176:	e01b      	b.n	800f1b0 <UART_Start_Receive_IT+0xa4>
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	227f      	movs	r2, #127	; 0x7f
 800f17c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f180:	e016      	b.n	800f1b0 <UART_Start_Receive_IT+0xa4>
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	689b      	ldr	r3, [r3, #8]
 800f186:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f18a:	d10d      	bne.n	800f1a8 <UART_Start_Receive_IT+0x9c>
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	691b      	ldr	r3, [r3, #16]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d104      	bne.n	800f19e <UART_Start_Receive_IT+0x92>
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	227f      	movs	r2, #127	; 0x7f
 800f198:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f19c:	e008      	b.n	800f1b0 <UART_Start_Receive_IT+0xa4>
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	223f      	movs	r2, #63	; 0x3f
 800f1a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f1a6:	e003      	b.n	800f1b0 <UART_Start_Receive_IT+0xa4>
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	2222      	movs	r2, #34	; 0x22
 800f1bc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	3308      	adds	r3, #8
 800f1c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1c8:	e853 3f00 	ldrex	r3, [r3]
 800f1cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1d0:	f043 0301 	orr.w	r3, r3, #1
 800f1d4:	657b      	str	r3, [r7, #84]	; 0x54
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	3308      	adds	r3, #8
 800f1dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f1de:	64ba      	str	r2, [r7, #72]	; 0x48
 800f1e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f1e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f1e6:	e841 2300 	strex	r3, r2, [r1]
 800f1ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f1ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d1e5      	bne.n	800f1be <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	689b      	ldr	r3, [r3, #8]
 800f1f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f1fa:	d107      	bne.n	800f20c <UART_Start_Receive_IT+0x100>
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	691b      	ldr	r3, [r3, #16]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d103      	bne.n	800f20c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	4a24      	ldr	r2, [pc, #144]	; (800f298 <UART_Start_Receive_IT+0x18c>)
 800f208:	665a      	str	r2, [r3, #100]	; 0x64
 800f20a:	e002      	b.n	800f212 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	4a23      	ldr	r2, [pc, #140]	; (800f29c <UART_Start_Receive_IT+0x190>)
 800f210:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	2200      	movs	r2, #0
 800f216:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	691b      	ldr	r3, [r3, #16]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d019      	beq.n	800f256 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f22a:	e853 3f00 	ldrex	r3, [r3]
 800f22e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f232:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800f236:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	461a      	mov	r2, r3
 800f23e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f240:	637b      	str	r3, [r7, #52]	; 0x34
 800f242:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f244:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f246:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f248:	e841 2300 	strex	r3, r2, [r1]
 800f24c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f250:	2b00      	cmp	r3, #0
 800f252:	d1e6      	bne.n	800f222 <UART_Start_Receive_IT+0x116>
 800f254:	e018      	b.n	800f288 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f25c:	697b      	ldr	r3, [r7, #20]
 800f25e:	e853 3f00 	ldrex	r3, [r3]
 800f262:	613b      	str	r3, [r7, #16]
   return(result);
 800f264:	693b      	ldr	r3, [r7, #16]
 800f266:	f043 0320 	orr.w	r3, r3, #32
 800f26a:	653b      	str	r3, [r7, #80]	; 0x50
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	461a      	mov	r2, r3
 800f272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f274:	623b      	str	r3, [r7, #32]
 800f276:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f278:	69f9      	ldr	r1, [r7, #28]
 800f27a:	6a3a      	ldr	r2, [r7, #32]
 800f27c:	e841 2300 	strex	r3, r2, [r1]
 800f280:	61bb      	str	r3, [r7, #24]
   return(result);
 800f282:	69bb      	ldr	r3, [r7, #24]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d1e6      	bne.n	800f256 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800f288:	2300      	movs	r3, #0
}
 800f28a:	4618      	mov	r0, r3
 800f28c:	375c      	adds	r7, #92	; 0x5c
 800f28e:	46bd      	mov	sp, r7
 800f290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f294:	4770      	bx	lr
 800f296:	bf00      	nop
 800f298:	0800f6bf 	.word	0x0800f6bf
 800f29c:	0800f55f 	.word	0x0800f55f

0800f2a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f2a0:	b480      	push	{r7}
 800f2a2:	b095      	sub	sp, #84	; 0x54
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2b0:	e853 3f00 	ldrex	r3, [r3]
 800f2b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f2bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	461a      	mov	r2, r3
 800f2c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f2c6:	643b      	str	r3, [r7, #64]	; 0x40
 800f2c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f2cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f2ce:	e841 2300 	strex	r3, r2, [r1]
 800f2d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d1e6      	bne.n	800f2a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	3308      	adds	r3, #8
 800f2e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2e2:	6a3b      	ldr	r3, [r7, #32]
 800f2e4:	e853 3f00 	ldrex	r3, [r3]
 800f2e8:	61fb      	str	r3, [r7, #28]
   return(result);
 800f2ea:	69fb      	ldr	r3, [r7, #28]
 800f2ec:	f023 0301 	bic.w	r3, r3, #1
 800f2f0:	64bb      	str	r3, [r7, #72]	; 0x48
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	3308      	adds	r3, #8
 800f2f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f2fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f2fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f302:	e841 2300 	strex	r3, r2, [r1]
 800f306:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d1e5      	bne.n	800f2da <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f312:	2b01      	cmp	r3, #1
 800f314:	d118      	bne.n	800f348 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	e853 3f00 	ldrex	r3, [r3]
 800f322:	60bb      	str	r3, [r7, #8]
   return(result);
 800f324:	68bb      	ldr	r3, [r7, #8]
 800f326:	f023 0310 	bic.w	r3, r3, #16
 800f32a:	647b      	str	r3, [r7, #68]	; 0x44
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	461a      	mov	r2, r3
 800f332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f334:	61bb      	str	r3, [r7, #24]
 800f336:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f338:	6979      	ldr	r1, [r7, #20]
 800f33a:	69ba      	ldr	r2, [r7, #24]
 800f33c:	e841 2300 	strex	r3, r2, [r1]
 800f340:	613b      	str	r3, [r7, #16]
   return(result);
 800f342:	693b      	ldr	r3, [r7, #16]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d1e6      	bne.n	800f316 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2220      	movs	r2, #32
 800f34c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	2200      	movs	r2, #0
 800f352:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2200      	movs	r2, #0
 800f358:	665a      	str	r2, [r3, #100]	; 0x64
}
 800f35a:	bf00      	nop
 800f35c:	3754      	adds	r7, #84	; 0x54
 800f35e:	46bd      	mov	sp, r7
 800f360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f364:	4770      	bx	lr

0800f366 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f366:	b580      	push	{r7, lr}
 800f368:	b084      	sub	sp, #16
 800f36a:	af00      	add	r7, sp, #0
 800f36c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f372:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	2200      	movs	r2, #0
 800f378:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	2200      	movs	r2, #0
 800f380:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f384:	68f8      	ldr	r0, [r7, #12]
 800f386:	f7ff faa1 	bl	800e8cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f38a:	bf00      	nop
 800f38c:	3710      	adds	r7, #16
 800f38e:	46bd      	mov	sp, r7
 800f390:	bd80      	pop	{r7, pc}

0800f392 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f392:	b480      	push	{r7}
 800f394:	b08f      	sub	sp, #60	; 0x3c
 800f396:	af00      	add	r7, sp, #0
 800f398:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f39e:	2b21      	cmp	r3, #33	; 0x21
 800f3a0:	d14d      	bne.n	800f43e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f3a8:	b29b      	uxth	r3, r3
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d132      	bne.n	800f414 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3b4:	6a3b      	ldr	r3, [r7, #32]
 800f3b6:	e853 3f00 	ldrex	r3, [r3]
 800f3ba:	61fb      	str	r3, [r7, #28]
   return(result);
 800f3bc:	69fb      	ldr	r3, [r7, #28]
 800f3be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f3c2:	637b      	str	r3, [r7, #52]	; 0x34
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	461a      	mov	r2, r3
 800f3ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f3ce:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f3d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3d4:	e841 2300 	strex	r3, r2, [r1]
 800f3d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d1e6      	bne.n	800f3ae <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	e853 3f00 	ldrex	r3, [r3]
 800f3ec:	60bb      	str	r3, [r7, #8]
   return(result);
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3f4:	633b      	str	r3, [r7, #48]	; 0x30
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	461a      	mov	r2, r3
 800f3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3fe:	61bb      	str	r3, [r7, #24]
 800f400:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f402:	6979      	ldr	r1, [r7, #20]
 800f404:	69ba      	ldr	r2, [r7, #24]
 800f406:	e841 2300 	strex	r3, r2, [r1]
 800f40a:	613b      	str	r3, [r7, #16]
   return(result);
 800f40c:	693b      	ldr	r3, [r7, #16]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d1e6      	bne.n	800f3e0 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800f412:	e014      	b.n	800f43e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f418:	781a      	ldrb	r2, [r3, #0]
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	b292      	uxth	r2, r2
 800f420:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f426:	1c5a      	adds	r2, r3, #1
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f432:	b29b      	uxth	r3, r3
 800f434:	3b01      	subs	r3, #1
 800f436:	b29a      	uxth	r2, r3
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800f43e:	bf00      	nop
 800f440:	373c      	adds	r7, #60	; 0x3c
 800f442:	46bd      	mov	sp, r7
 800f444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f448:	4770      	bx	lr

0800f44a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f44a:	b480      	push	{r7}
 800f44c:	b091      	sub	sp, #68	; 0x44
 800f44e:	af00      	add	r7, sp, #0
 800f450:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f456:	2b21      	cmp	r3, #33	; 0x21
 800f458:	d151      	bne.n	800f4fe <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f460:	b29b      	uxth	r3, r3
 800f462:	2b00      	cmp	r3, #0
 800f464:	d132      	bne.n	800f4cc <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f46e:	e853 3f00 	ldrex	r3, [r3]
 800f472:	623b      	str	r3, [r7, #32]
   return(result);
 800f474:	6a3b      	ldr	r3, [r7, #32]
 800f476:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f47a:	63bb      	str	r3, [r7, #56]	; 0x38
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	461a      	mov	r2, r3
 800f482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f484:	633b      	str	r3, [r7, #48]	; 0x30
 800f486:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f488:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f48a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f48c:	e841 2300 	strex	r3, r2, [r1]
 800f490:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f494:	2b00      	cmp	r3, #0
 800f496:	d1e6      	bne.n	800f466 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f49e:	693b      	ldr	r3, [r7, #16]
 800f4a0:	e853 3f00 	ldrex	r3, [r3]
 800f4a4:	60fb      	str	r3, [r7, #12]
   return(result);
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4ac:	637b      	str	r3, [r7, #52]	; 0x34
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	461a      	mov	r2, r3
 800f4b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4b6:	61fb      	str	r3, [r7, #28]
 800f4b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4ba:	69b9      	ldr	r1, [r7, #24]
 800f4bc:	69fa      	ldr	r2, [r7, #28]
 800f4be:	e841 2300 	strex	r3, r2, [r1]
 800f4c2:	617b      	str	r3, [r7, #20]
   return(result);
 800f4c4:	697b      	ldr	r3, [r7, #20]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d1e6      	bne.n	800f498 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800f4ca:	e018      	b.n	800f4fe <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800f4d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4d4:	881a      	ldrh	r2, [r3, #0]
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f4de:	b292      	uxth	r2, r2
 800f4e0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f4e6:	1c9a      	adds	r2, r3, #2
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f4f2:	b29b      	uxth	r3, r3
 800f4f4:	3b01      	subs	r3, #1
 800f4f6:	b29a      	uxth	r2, r3
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800f4fe:	bf00      	nop
 800f500:	3744      	adds	r7, #68	; 0x44
 800f502:	46bd      	mov	sp, r7
 800f504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f508:	4770      	bx	lr

0800f50a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f50a:	b580      	push	{r7, lr}
 800f50c:	b088      	sub	sp, #32
 800f50e:	af00      	add	r7, sp, #0
 800f510:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	e853 3f00 	ldrex	r3, [r3]
 800f51e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f526:	61fb      	str	r3, [r7, #28]
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	461a      	mov	r2, r3
 800f52e:	69fb      	ldr	r3, [r7, #28]
 800f530:	61bb      	str	r3, [r7, #24]
 800f532:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f534:	6979      	ldr	r1, [r7, #20]
 800f536:	69ba      	ldr	r2, [r7, #24]
 800f538:	e841 2300 	strex	r3, r2, [r1]
 800f53c:	613b      	str	r3, [r7, #16]
   return(result);
 800f53e:	693b      	ldr	r3, [r7, #16]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d1e6      	bne.n	800f512 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	2220      	movs	r2, #32
 800f548:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	2200      	movs	r2, #0
 800f54e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f550:	6878      	ldr	r0, [r7, #4]
 800f552:	f7f9 fd1b 	bl	8008f8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f556:	bf00      	nop
 800f558:	3720      	adds	r7, #32
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}

0800f55e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f55e:	b580      	push	{r7, lr}
 800f560:	b096      	sub	sp, #88	; 0x58
 800f562:	af00      	add	r7, sp, #0
 800f564:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f56c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f574:	2b22      	cmp	r3, #34	; 0x22
 800f576:	f040 8094 	bne.w	800f6a2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f580:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f584:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f588:	b2d9      	uxtb	r1, r3
 800f58a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f58e:	b2da      	uxtb	r2, r3
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f594:	400a      	ands	r2, r1
 800f596:	b2d2      	uxtb	r2, r2
 800f598:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f59e:	1c5a      	adds	r2, r3, #1
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f5aa:	b29b      	uxth	r3, r3
 800f5ac:	3b01      	subs	r3, #1
 800f5ae:	b29a      	uxth	r2, r3
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f5bc:	b29b      	uxth	r3, r3
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d179      	bne.n	800f6b6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ca:	e853 3f00 	ldrex	r3, [r3]
 800f5ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f5d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f5d6:	653b      	str	r3, [r7, #80]	; 0x50
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	461a      	mov	r2, r3
 800f5de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5e0:	647b      	str	r3, [r7, #68]	; 0x44
 800f5e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f5e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f5e8:	e841 2300 	strex	r3, r2, [r1]
 800f5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f5ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d1e6      	bne.n	800f5c2 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	3308      	adds	r3, #8
 800f5fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5fe:	e853 3f00 	ldrex	r3, [r3]
 800f602:	623b      	str	r3, [r7, #32]
   return(result);
 800f604:	6a3b      	ldr	r3, [r7, #32]
 800f606:	f023 0301 	bic.w	r3, r3, #1
 800f60a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	3308      	adds	r3, #8
 800f612:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f614:	633a      	str	r2, [r7, #48]	; 0x30
 800f616:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f618:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f61a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f61c:	e841 2300 	strex	r3, r2, [r1]
 800f620:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f624:	2b00      	cmp	r3, #0
 800f626:	d1e5      	bne.n	800f5f4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2220      	movs	r2, #32
 800f62c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	2200      	movs	r2, #0
 800f632:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f638:	2b01      	cmp	r3, #1
 800f63a:	d12e      	bne.n	800f69a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2200      	movs	r2, #0
 800f640:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f648:	693b      	ldr	r3, [r7, #16]
 800f64a:	e853 3f00 	ldrex	r3, [r3]
 800f64e:	60fb      	str	r3, [r7, #12]
   return(result);
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	f023 0310 	bic.w	r3, r3, #16
 800f656:	64bb      	str	r3, [r7, #72]	; 0x48
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	461a      	mov	r2, r3
 800f65e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f660:	61fb      	str	r3, [r7, #28]
 800f662:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f664:	69b9      	ldr	r1, [r7, #24]
 800f666:	69fa      	ldr	r2, [r7, #28]
 800f668:	e841 2300 	strex	r3, r2, [r1]
 800f66c:	617b      	str	r3, [r7, #20]
   return(result);
 800f66e:	697b      	ldr	r3, [r7, #20]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d1e6      	bne.n	800f642 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	69db      	ldr	r3, [r3, #28]
 800f67a:	f003 0310 	and.w	r3, r3, #16
 800f67e:	2b10      	cmp	r3, #16
 800f680:	d103      	bne.n	800f68a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	2210      	movs	r2, #16
 800f688:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f690:	4619      	mov	r1, r3
 800f692:	6878      	ldr	r0, [r7, #4]
 800f694:	f7ff f924 	bl	800e8e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f698:	e00d      	b.n	800f6b6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f69a:	6878      	ldr	r0, [r7, #4]
 800f69c:	f7f2 fc78 	bl	8001f90 <HAL_UART_RxCpltCallback>
}
 800f6a0:	e009      	b.n	800f6b6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	8b1b      	ldrh	r3, [r3, #24]
 800f6a8:	b29a      	uxth	r2, r3
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	f042 0208 	orr.w	r2, r2, #8
 800f6b2:	b292      	uxth	r2, r2
 800f6b4:	831a      	strh	r2, [r3, #24]
}
 800f6b6:	bf00      	nop
 800f6b8:	3758      	adds	r7, #88	; 0x58
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}

0800f6be <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f6be:	b580      	push	{r7, lr}
 800f6c0:	b096      	sub	sp, #88	; 0x58
 800f6c2:	af00      	add	r7, sp, #0
 800f6c4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f6cc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f6d4:	2b22      	cmp	r3, #34	; 0x22
 800f6d6:	f040 8094 	bne.w	800f802 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f6e0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6e8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800f6ea:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800f6ee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f6f2:	4013      	ands	r3, r2
 800f6f4:	b29a      	uxth	r2, r3
 800f6f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6f8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6fe:	1c9a      	adds	r2, r3, #2
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f70a:	b29b      	uxth	r3, r3
 800f70c:	3b01      	subs	r3, #1
 800f70e:	b29a      	uxth	r2, r3
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f71c:	b29b      	uxth	r3, r3
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d179      	bne.n	800f816 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f72a:	e853 3f00 	ldrex	r3, [r3]
 800f72e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f732:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f736:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	461a      	mov	r2, r3
 800f73e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f740:	643b      	str	r3, [r7, #64]	; 0x40
 800f742:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f744:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f746:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f748:	e841 2300 	strex	r3, r2, [r1]
 800f74c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f750:	2b00      	cmp	r3, #0
 800f752:	d1e6      	bne.n	800f722 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	3308      	adds	r3, #8
 800f75a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f75c:	6a3b      	ldr	r3, [r7, #32]
 800f75e:	e853 3f00 	ldrex	r3, [r3]
 800f762:	61fb      	str	r3, [r7, #28]
   return(result);
 800f764:	69fb      	ldr	r3, [r7, #28]
 800f766:	f023 0301 	bic.w	r3, r3, #1
 800f76a:	64bb      	str	r3, [r7, #72]	; 0x48
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	3308      	adds	r3, #8
 800f772:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f774:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f776:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f778:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f77a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f77c:	e841 2300 	strex	r3, r2, [r1]
 800f780:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f784:	2b00      	cmp	r3, #0
 800f786:	d1e5      	bne.n	800f754 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2220      	movs	r2, #32
 800f78c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	2200      	movs	r2, #0
 800f792:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f798:	2b01      	cmp	r3, #1
 800f79a:	d12e      	bne.n	800f7fa <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	2200      	movs	r2, #0
 800f7a0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	e853 3f00 	ldrex	r3, [r3]
 800f7ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800f7b0:	68bb      	ldr	r3, [r7, #8]
 800f7b2:	f023 0310 	bic.w	r3, r3, #16
 800f7b6:	647b      	str	r3, [r7, #68]	; 0x44
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	461a      	mov	r2, r3
 800f7be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f7c0:	61bb      	str	r3, [r7, #24]
 800f7c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7c4:	6979      	ldr	r1, [r7, #20]
 800f7c6:	69ba      	ldr	r2, [r7, #24]
 800f7c8:	e841 2300 	strex	r3, r2, [r1]
 800f7cc:	613b      	str	r3, [r7, #16]
   return(result);
 800f7ce:	693b      	ldr	r3, [r7, #16]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d1e6      	bne.n	800f7a2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	69db      	ldr	r3, [r3, #28]
 800f7da:	f003 0310 	and.w	r3, r3, #16
 800f7de:	2b10      	cmp	r3, #16
 800f7e0:	d103      	bne.n	800f7ea <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	2210      	movs	r2, #16
 800f7e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f7f0:	4619      	mov	r1, r3
 800f7f2:	6878      	ldr	r0, [r7, #4]
 800f7f4:	f7ff f874 	bl	800e8e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f7f8:	e00d      	b.n	800f816 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f7fa:	6878      	ldr	r0, [r7, #4]
 800f7fc:	f7f2 fbc8 	bl	8001f90 <HAL_UART_RxCpltCallback>
}
 800f800:	e009      	b.n	800f816 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	8b1b      	ldrh	r3, [r3, #24]
 800f808:	b29a      	uxth	r2, r3
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	f042 0208 	orr.w	r2, r2, #8
 800f812:	b292      	uxth	r2, r2
 800f814:	831a      	strh	r2, [r3, #24]
}
 800f816:	bf00      	nop
 800f818:	3758      	adds	r7, #88	; 0x58
 800f81a:	46bd      	mov	sp, r7
 800f81c:	bd80      	pop	{r7, pc}

0800f81e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f81e:	b480      	push	{r7}
 800f820:	b083      	sub	sp, #12
 800f822:	af00      	add	r7, sp, #0
 800f824:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f826:	bf00      	nop
 800f828:	370c      	adds	r7, #12
 800f82a:	46bd      	mov	sp, r7
 800f82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f830:	4770      	bx	lr

0800f832 <_ZdlPvj>:
 800f832:	f000 b800 	b.w	800f836 <_ZdlPv>

0800f836 <_ZdlPv>:
 800f836:	f000 b82b 	b.w	800f890 <free>
	...

0800f83c <__errno>:
 800f83c:	4b01      	ldr	r3, [pc, #4]	; (800f844 <__errno+0x8>)
 800f83e:	6818      	ldr	r0, [r3, #0]
 800f840:	4770      	bx	lr
 800f842:	bf00      	nop
 800f844:	2000000c 	.word	0x2000000c

0800f848 <__libc_init_array>:
 800f848:	b570      	push	{r4, r5, r6, lr}
 800f84a:	4d0d      	ldr	r5, [pc, #52]	; (800f880 <__libc_init_array+0x38>)
 800f84c:	4c0d      	ldr	r4, [pc, #52]	; (800f884 <__libc_init_array+0x3c>)
 800f84e:	1b64      	subs	r4, r4, r5
 800f850:	10a4      	asrs	r4, r4, #2
 800f852:	2600      	movs	r6, #0
 800f854:	42a6      	cmp	r6, r4
 800f856:	d109      	bne.n	800f86c <__libc_init_array+0x24>
 800f858:	4d0b      	ldr	r5, [pc, #44]	; (800f888 <__libc_init_array+0x40>)
 800f85a:	4c0c      	ldr	r4, [pc, #48]	; (800f88c <__libc_init_array+0x44>)
 800f85c:	f000 fc96 	bl	801018c <_init>
 800f860:	1b64      	subs	r4, r4, r5
 800f862:	10a4      	asrs	r4, r4, #2
 800f864:	2600      	movs	r6, #0
 800f866:	42a6      	cmp	r6, r4
 800f868:	d105      	bne.n	800f876 <__libc_init_array+0x2e>
 800f86a:	bd70      	pop	{r4, r5, r6, pc}
 800f86c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f870:	4798      	blx	r3
 800f872:	3601      	adds	r6, #1
 800f874:	e7ee      	b.n	800f854 <__libc_init_array+0xc>
 800f876:	f855 3b04 	ldr.w	r3, [r5], #4
 800f87a:	4798      	blx	r3
 800f87c:	3601      	adds	r6, #1
 800f87e:	e7f2      	b.n	800f866 <__libc_init_array+0x1e>
 800f880:	08010700 	.word	0x08010700
 800f884:	08010700 	.word	0x08010700
 800f888:	08010700 	.word	0x08010700
 800f88c:	08010708 	.word	0x08010708

0800f890 <free>:
 800f890:	4b02      	ldr	r3, [pc, #8]	; (800f89c <free+0xc>)
 800f892:	4601      	mov	r1, r0
 800f894:	6818      	ldr	r0, [r3, #0]
 800f896:	f000 b819 	b.w	800f8cc <_free_r>
 800f89a:	bf00      	nop
 800f89c:	2000000c 	.word	0x2000000c

0800f8a0 <memcpy>:
 800f8a0:	440a      	add	r2, r1
 800f8a2:	4291      	cmp	r1, r2
 800f8a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800f8a8:	d100      	bne.n	800f8ac <memcpy+0xc>
 800f8aa:	4770      	bx	lr
 800f8ac:	b510      	push	{r4, lr}
 800f8ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f8b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f8b6:	4291      	cmp	r1, r2
 800f8b8:	d1f9      	bne.n	800f8ae <memcpy+0xe>
 800f8ba:	bd10      	pop	{r4, pc}

0800f8bc <memset>:
 800f8bc:	4402      	add	r2, r0
 800f8be:	4603      	mov	r3, r0
 800f8c0:	4293      	cmp	r3, r2
 800f8c2:	d100      	bne.n	800f8c6 <memset+0xa>
 800f8c4:	4770      	bx	lr
 800f8c6:	f803 1b01 	strb.w	r1, [r3], #1
 800f8ca:	e7f9      	b.n	800f8c0 <memset+0x4>

0800f8cc <_free_r>:
 800f8cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f8ce:	2900      	cmp	r1, #0
 800f8d0:	d044      	beq.n	800f95c <_free_r+0x90>
 800f8d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f8d6:	9001      	str	r0, [sp, #4]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	f1a1 0404 	sub.w	r4, r1, #4
 800f8de:	bfb8      	it	lt
 800f8e0:	18e4      	addlt	r4, r4, r3
 800f8e2:	f000 f905 	bl	800faf0 <__malloc_lock>
 800f8e6:	4a1e      	ldr	r2, [pc, #120]	; (800f960 <_free_r+0x94>)
 800f8e8:	9801      	ldr	r0, [sp, #4]
 800f8ea:	6813      	ldr	r3, [r2, #0]
 800f8ec:	b933      	cbnz	r3, 800f8fc <_free_r+0x30>
 800f8ee:	6063      	str	r3, [r4, #4]
 800f8f0:	6014      	str	r4, [r2, #0]
 800f8f2:	b003      	add	sp, #12
 800f8f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f8f8:	f000 b900 	b.w	800fafc <__malloc_unlock>
 800f8fc:	42a3      	cmp	r3, r4
 800f8fe:	d908      	bls.n	800f912 <_free_r+0x46>
 800f900:	6825      	ldr	r5, [r4, #0]
 800f902:	1961      	adds	r1, r4, r5
 800f904:	428b      	cmp	r3, r1
 800f906:	bf01      	itttt	eq
 800f908:	6819      	ldreq	r1, [r3, #0]
 800f90a:	685b      	ldreq	r3, [r3, #4]
 800f90c:	1949      	addeq	r1, r1, r5
 800f90e:	6021      	streq	r1, [r4, #0]
 800f910:	e7ed      	b.n	800f8ee <_free_r+0x22>
 800f912:	461a      	mov	r2, r3
 800f914:	685b      	ldr	r3, [r3, #4]
 800f916:	b10b      	cbz	r3, 800f91c <_free_r+0x50>
 800f918:	42a3      	cmp	r3, r4
 800f91a:	d9fa      	bls.n	800f912 <_free_r+0x46>
 800f91c:	6811      	ldr	r1, [r2, #0]
 800f91e:	1855      	adds	r5, r2, r1
 800f920:	42a5      	cmp	r5, r4
 800f922:	d10b      	bne.n	800f93c <_free_r+0x70>
 800f924:	6824      	ldr	r4, [r4, #0]
 800f926:	4421      	add	r1, r4
 800f928:	1854      	adds	r4, r2, r1
 800f92a:	42a3      	cmp	r3, r4
 800f92c:	6011      	str	r1, [r2, #0]
 800f92e:	d1e0      	bne.n	800f8f2 <_free_r+0x26>
 800f930:	681c      	ldr	r4, [r3, #0]
 800f932:	685b      	ldr	r3, [r3, #4]
 800f934:	6053      	str	r3, [r2, #4]
 800f936:	4421      	add	r1, r4
 800f938:	6011      	str	r1, [r2, #0]
 800f93a:	e7da      	b.n	800f8f2 <_free_r+0x26>
 800f93c:	d902      	bls.n	800f944 <_free_r+0x78>
 800f93e:	230c      	movs	r3, #12
 800f940:	6003      	str	r3, [r0, #0]
 800f942:	e7d6      	b.n	800f8f2 <_free_r+0x26>
 800f944:	6825      	ldr	r5, [r4, #0]
 800f946:	1961      	adds	r1, r4, r5
 800f948:	428b      	cmp	r3, r1
 800f94a:	bf04      	itt	eq
 800f94c:	6819      	ldreq	r1, [r3, #0]
 800f94e:	685b      	ldreq	r3, [r3, #4]
 800f950:	6063      	str	r3, [r4, #4]
 800f952:	bf04      	itt	eq
 800f954:	1949      	addeq	r1, r1, r5
 800f956:	6021      	streq	r1, [r4, #0]
 800f958:	6054      	str	r4, [r2, #4]
 800f95a:	e7ca      	b.n	800f8f2 <_free_r+0x26>
 800f95c:	b003      	add	sp, #12
 800f95e:	bd30      	pop	{r4, r5, pc}
 800f960:	200007b4 	.word	0x200007b4

0800f964 <sbrk_aligned>:
 800f964:	b570      	push	{r4, r5, r6, lr}
 800f966:	4e0e      	ldr	r6, [pc, #56]	; (800f9a0 <sbrk_aligned+0x3c>)
 800f968:	460c      	mov	r4, r1
 800f96a:	6831      	ldr	r1, [r6, #0]
 800f96c:	4605      	mov	r5, r0
 800f96e:	b911      	cbnz	r1, 800f976 <sbrk_aligned+0x12>
 800f970:	f000 f88c 	bl	800fa8c <_sbrk_r>
 800f974:	6030      	str	r0, [r6, #0]
 800f976:	4621      	mov	r1, r4
 800f978:	4628      	mov	r0, r5
 800f97a:	f000 f887 	bl	800fa8c <_sbrk_r>
 800f97e:	1c43      	adds	r3, r0, #1
 800f980:	d00a      	beq.n	800f998 <sbrk_aligned+0x34>
 800f982:	1cc4      	adds	r4, r0, #3
 800f984:	f024 0403 	bic.w	r4, r4, #3
 800f988:	42a0      	cmp	r0, r4
 800f98a:	d007      	beq.n	800f99c <sbrk_aligned+0x38>
 800f98c:	1a21      	subs	r1, r4, r0
 800f98e:	4628      	mov	r0, r5
 800f990:	f000 f87c 	bl	800fa8c <_sbrk_r>
 800f994:	3001      	adds	r0, #1
 800f996:	d101      	bne.n	800f99c <sbrk_aligned+0x38>
 800f998:	f04f 34ff 	mov.w	r4, #4294967295
 800f99c:	4620      	mov	r0, r4
 800f99e:	bd70      	pop	{r4, r5, r6, pc}
 800f9a0:	200007b8 	.word	0x200007b8

0800f9a4 <_malloc_r>:
 800f9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9a8:	1ccd      	adds	r5, r1, #3
 800f9aa:	f025 0503 	bic.w	r5, r5, #3
 800f9ae:	3508      	adds	r5, #8
 800f9b0:	2d0c      	cmp	r5, #12
 800f9b2:	bf38      	it	cc
 800f9b4:	250c      	movcc	r5, #12
 800f9b6:	2d00      	cmp	r5, #0
 800f9b8:	4607      	mov	r7, r0
 800f9ba:	db01      	blt.n	800f9c0 <_malloc_r+0x1c>
 800f9bc:	42a9      	cmp	r1, r5
 800f9be:	d905      	bls.n	800f9cc <_malloc_r+0x28>
 800f9c0:	230c      	movs	r3, #12
 800f9c2:	603b      	str	r3, [r7, #0]
 800f9c4:	2600      	movs	r6, #0
 800f9c6:	4630      	mov	r0, r6
 800f9c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9cc:	4e2e      	ldr	r6, [pc, #184]	; (800fa88 <_malloc_r+0xe4>)
 800f9ce:	f000 f88f 	bl	800faf0 <__malloc_lock>
 800f9d2:	6833      	ldr	r3, [r6, #0]
 800f9d4:	461c      	mov	r4, r3
 800f9d6:	bb34      	cbnz	r4, 800fa26 <_malloc_r+0x82>
 800f9d8:	4629      	mov	r1, r5
 800f9da:	4638      	mov	r0, r7
 800f9dc:	f7ff ffc2 	bl	800f964 <sbrk_aligned>
 800f9e0:	1c43      	adds	r3, r0, #1
 800f9e2:	4604      	mov	r4, r0
 800f9e4:	d14d      	bne.n	800fa82 <_malloc_r+0xde>
 800f9e6:	6834      	ldr	r4, [r6, #0]
 800f9e8:	4626      	mov	r6, r4
 800f9ea:	2e00      	cmp	r6, #0
 800f9ec:	d140      	bne.n	800fa70 <_malloc_r+0xcc>
 800f9ee:	6823      	ldr	r3, [r4, #0]
 800f9f0:	4631      	mov	r1, r6
 800f9f2:	4638      	mov	r0, r7
 800f9f4:	eb04 0803 	add.w	r8, r4, r3
 800f9f8:	f000 f848 	bl	800fa8c <_sbrk_r>
 800f9fc:	4580      	cmp	r8, r0
 800f9fe:	d13a      	bne.n	800fa76 <_malloc_r+0xd2>
 800fa00:	6821      	ldr	r1, [r4, #0]
 800fa02:	3503      	adds	r5, #3
 800fa04:	1a6d      	subs	r5, r5, r1
 800fa06:	f025 0503 	bic.w	r5, r5, #3
 800fa0a:	3508      	adds	r5, #8
 800fa0c:	2d0c      	cmp	r5, #12
 800fa0e:	bf38      	it	cc
 800fa10:	250c      	movcc	r5, #12
 800fa12:	4629      	mov	r1, r5
 800fa14:	4638      	mov	r0, r7
 800fa16:	f7ff ffa5 	bl	800f964 <sbrk_aligned>
 800fa1a:	3001      	adds	r0, #1
 800fa1c:	d02b      	beq.n	800fa76 <_malloc_r+0xd2>
 800fa1e:	6823      	ldr	r3, [r4, #0]
 800fa20:	442b      	add	r3, r5
 800fa22:	6023      	str	r3, [r4, #0]
 800fa24:	e00e      	b.n	800fa44 <_malloc_r+0xa0>
 800fa26:	6822      	ldr	r2, [r4, #0]
 800fa28:	1b52      	subs	r2, r2, r5
 800fa2a:	d41e      	bmi.n	800fa6a <_malloc_r+0xc6>
 800fa2c:	2a0b      	cmp	r2, #11
 800fa2e:	d916      	bls.n	800fa5e <_malloc_r+0xba>
 800fa30:	1961      	adds	r1, r4, r5
 800fa32:	42a3      	cmp	r3, r4
 800fa34:	6025      	str	r5, [r4, #0]
 800fa36:	bf18      	it	ne
 800fa38:	6059      	strne	r1, [r3, #4]
 800fa3a:	6863      	ldr	r3, [r4, #4]
 800fa3c:	bf08      	it	eq
 800fa3e:	6031      	streq	r1, [r6, #0]
 800fa40:	5162      	str	r2, [r4, r5]
 800fa42:	604b      	str	r3, [r1, #4]
 800fa44:	4638      	mov	r0, r7
 800fa46:	f104 060b 	add.w	r6, r4, #11
 800fa4a:	f000 f857 	bl	800fafc <__malloc_unlock>
 800fa4e:	f026 0607 	bic.w	r6, r6, #7
 800fa52:	1d23      	adds	r3, r4, #4
 800fa54:	1af2      	subs	r2, r6, r3
 800fa56:	d0b6      	beq.n	800f9c6 <_malloc_r+0x22>
 800fa58:	1b9b      	subs	r3, r3, r6
 800fa5a:	50a3      	str	r3, [r4, r2]
 800fa5c:	e7b3      	b.n	800f9c6 <_malloc_r+0x22>
 800fa5e:	6862      	ldr	r2, [r4, #4]
 800fa60:	42a3      	cmp	r3, r4
 800fa62:	bf0c      	ite	eq
 800fa64:	6032      	streq	r2, [r6, #0]
 800fa66:	605a      	strne	r2, [r3, #4]
 800fa68:	e7ec      	b.n	800fa44 <_malloc_r+0xa0>
 800fa6a:	4623      	mov	r3, r4
 800fa6c:	6864      	ldr	r4, [r4, #4]
 800fa6e:	e7b2      	b.n	800f9d6 <_malloc_r+0x32>
 800fa70:	4634      	mov	r4, r6
 800fa72:	6876      	ldr	r6, [r6, #4]
 800fa74:	e7b9      	b.n	800f9ea <_malloc_r+0x46>
 800fa76:	230c      	movs	r3, #12
 800fa78:	603b      	str	r3, [r7, #0]
 800fa7a:	4638      	mov	r0, r7
 800fa7c:	f000 f83e 	bl	800fafc <__malloc_unlock>
 800fa80:	e7a1      	b.n	800f9c6 <_malloc_r+0x22>
 800fa82:	6025      	str	r5, [r4, #0]
 800fa84:	e7de      	b.n	800fa44 <_malloc_r+0xa0>
 800fa86:	bf00      	nop
 800fa88:	200007b4 	.word	0x200007b4

0800fa8c <_sbrk_r>:
 800fa8c:	b538      	push	{r3, r4, r5, lr}
 800fa8e:	4d06      	ldr	r5, [pc, #24]	; (800faa8 <_sbrk_r+0x1c>)
 800fa90:	2300      	movs	r3, #0
 800fa92:	4604      	mov	r4, r0
 800fa94:	4608      	mov	r0, r1
 800fa96:	602b      	str	r3, [r5, #0]
 800fa98:	f7f3 fa1e 	bl	8002ed8 <_sbrk>
 800fa9c:	1c43      	adds	r3, r0, #1
 800fa9e:	d102      	bne.n	800faa6 <_sbrk_r+0x1a>
 800faa0:	682b      	ldr	r3, [r5, #0]
 800faa2:	b103      	cbz	r3, 800faa6 <_sbrk_r+0x1a>
 800faa4:	6023      	str	r3, [r4, #0]
 800faa6:	bd38      	pop	{r3, r4, r5, pc}
 800faa8:	200007c0 	.word	0x200007c0

0800faac <siprintf>:
 800faac:	b40e      	push	{r1, r2, r3}
 800faae:	b500      	push	{lr}
 800fab0:	b09c      	sub	sp, #112	; 0x70
 800fab2:	ab1d      	add	r3, sp, #116	; 0x74
 800fab4:	9002      	str	r0, [sp, #8]
 800fab6:	9006      	str	r0, [sp, #24]
 800fab8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fabc:	4809      	ldr	r0, [pc, #36]	; (800fae4 <siprintf+0x38>)
 800fabe:	9107      	str	r1, [sp, #28]
 800fac0:	9104      	str	r1, [sp, #16]
 800fac2:	4909      	ldr	r1, [pc, #36]	; (800fae8 <siprintf+0x3c>)
 800fac4:	f853 2b04 	ldr.w	r2, [r3], #4
 800fac8:	9105      	str	r1, [sp, #20]
 800faca:	6800      	ldr	r0, [r0, #0]
 800facc:	9301      	str	r3, [sp, #4]
 800face:	a902      	add	r1, sp, #8
 800fad0:	f000 f876 	bl	800fbc0 <_svfiprintf_r>
 800fad4:	9b02      	ldr	r3, [sp, #8]
 800fad6:	2200      	movs	r2, #0
 800fad8:	701a      	strb	r2, [r3, #0]
 800fada:	b01c      	add	sp, #112	; 0x70
 800fadc:	f85d eb04 	ldr.w	lr, [sp], #4
 800fae0:	b003      	add	sp, #12
 800fae2:	4770      	bx	lr
 800fae4:	2000000c 	.word	0x2000000c
 800fae8:	ffff0208 	.word	0xffff0208

0800faec <__retarget_lock_acquire_recursive>:
 800faec:	4770      	bx	lr

0800faee <__retarget_lock_release_recursive>:
 800faee:	4770      	bx	lr

0800faf0 <__malloc_lock>:
 800faf0:	4801      	ldr	r0, [pc, #4]	; (800faf8 <__malloc_lock+0x8>)
 800faf2:	f7ff bffb 	b.w	800faec <__retarget_lock_acquire_recursive>
 800faf6:	bf00      	nop
 800faf8:	200007bc 	.word	0x200007bc

0800fafc <__malloc_unlock>:
 800fafc:	4801      	ldr	r0, [pc, #4]	; (800fb04 <__malloc_unlock+0x8>)
 800fafe:	f7ff bff6 	b.w	800faee <__retarget_lock_release_recursive>
 800fb02:	bf00      	nop
 800fb04:	200007bc 	.word	0x200007bc

0800fb08 <__ssputs_r>:
 800fb08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb0c:	688e      	ldr	r6, [r1, #8]
 800fb0e:	429e      	cmp	r6, r3
 800fb10:	4682      	mov	sl, r0
 800fb12:	460c      	mov	r4, r1
 800fb14:	4690      	mov	r8, r2
 800fb16:	461f      	mov	r7, r3
 800fb18:	d838      	bhi.n	800fb8c <__ssputs_r+0x84>
 800fb1a:	898a      	ldrh	r2, [r1, #12]
 800fb1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fb20:	d032      	beq.n	800fb88 <__ssputs_r+0x80>
 800fb22:	6825      	ldr	r5, [r4, #0]
 800fb24:	6909      	ldr	r1, [r1, #16]
 800fb26:	eba5 0901 	sub.w	r9, r5, r1
 800fb2a:	6965      	ldr	r5, [r4, #20]
 800fb2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fb30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fb34:	3301      	adds	r3, #1
 800fb36:	444b      	add	r3, r9
 800fb38:	106d      	asrs	r5, r5, #1
 800fb3a:	429d      	cmp	r5, r3
 800fb3c:	bf38      	it	cc
 800fb3e:	461d      	movcc	r5, r3
 800fb40:	0553      	lsls	r3, r2, #21
 800fb42:	d531      	bpl.n	800fba8 <__ssputs_r+0xa0>
 800fb44:	4629      	mov	r1, r5
 800fb46:	f7ff ff2d 	bl	800f9a4 <_malloc_r>
 800fb4a:	4606      	mov	r6, r0
 800fb4c:	b950      	cbnz	r0, 800fb64 <__ssputs_r+0x5c>
 800fb4e:	230c      	movs	r3, #12
 800fb50:	f8ca 3000 	str.w	r3, [sl]
 800fb54:	89a3      	ldrh	r3, [r4, #12]
 800fb56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb5a:	81a3      	strh	r3, [r4, #12]
 800fb5c:	f04f 30ff 	mov.w	r0, #4294967295
 800fb60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb64:	6921      	ldr	r1, [r4, #16]
 800fb66:	464a      	mov	r2, r9
 800fb68:	f7ff fe9a 	bl	800f8a0 <memcpy>
 800fb6c:	89a3      	ldrh	r3, [r4, #12]
 800fb6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fb72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb76:	81a3      	strh	r3, [r4, #12]
 800fb78:	6126      	str	r6, [r4, #16]
 800fb7a:	6165      	str	r5, [r4, #20]
 800fb7c:	444e      	add	r6, r9
 800fb7e:	eba5 0509 	sub.w	r5, r5, r9
 800fb82:	6026      	str	r6, [r4, #0]
 800fb84:	60a5      	str	r5, [r4, #8]
 800fb86:	463e      	mov	r6, r7
 800fb88:	42be      	cmp	r6, r7
 800fb8a:	d900      	bls.n	800fb8e <__ssputs_r+0x86>
 800fb8c:	463e      	mov	r6, r7
 800fb8e:	6820      	ldr	r0, [r4, #0]
 800fb90:	4632      	mov	r2, r6
 800fb92:	4641      	mov	r1, r8
 800fb94:	f000 faa8 	bl	80100e8 <memmove>
 800fb98:	68a3      	ldr	r3, [r4, #8]
 800fb9a:	1b9b      	subs	r3, r3, r6
 800fb9c:	60a3      	str	r3, [r4, #8]
 800fb9e:	6823      	ldr	r3, [r4, #0]
 800fba0:	4433      	add	r3, r6
 800fba2:	6023      	str	r3, [r4, #0]
 800fba4:	2000      	movs	r0, #0
 800fba6:	e7db      	b.n	800fb60 <__ssputs_r+0x58>
 800fba8:	462a      	mov	r2, r5
 800fbaa:	f000 fab7 	bl	801011c <_realloc_r>
 800fbae:	4606      	mov	r6, r0
 800fbb0:	2800      	cmp	r0, #0
 800fbb2:	d1e1      	bne.n	800fb78 <__ssputs_r+0x70>
 800fbb4:	6921      	ldr	r1, [r4, #16]
 800fbb6:	4650      	mov	r0, sl
 800fbb8:	f7ff fe88 	bl	800f8cc <_free_r>
 800fbbc:	e7c7      	b.n	800fb4e <__ssputs_r+0x46>
	...

0800fbc0 <_svfiprintf_r>:
 800fbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbc4:	4698      	mov	r8, r3
 800fbc6:	898b      	ldrh	r3, [r1, #12]
 800fbc8:	061b      	lsls	r3, r3, #24
 800fbca:	b09d      	sub	sp, #116	; 0x74
 800fbcc:	4607      	mov	r7, r0
 800fbce:	460d      	mov	r5, r1
 800fbd0:	4614      	mov	r4, r2
 800fbd2:	d50e      	bpl.n	800fbf2 <_svfiprintf_r+0x32>
 800fbd4:	690b      	ldr	r3, [r1, #16]
 800fbd6:	b963      	cbnz	r3, 800fbf2 <_svfiprintf_r+0x32>
 800fbd8:	2140      	movs	r1, #64	; 0x40
 800fbda:	f7ff fee3 	bl	800f9a4 <_malloc_r>
 800fbde:	6028      	str	r0, [r5, #0]
 800fbe0:	6128      	str	r0, [r5, #16]
 800fbe2:	b920      	cbnz	r0, 800fbee <_svfiprintf_r+0x2e>
 800fbe4:	230c      	movs	r3, #12
 800fbe6:	603b      	str	r3, [r7, #0]
 800fbe8:	f04f 30ff 	mov.w	r0, #4294967295
 800fbec:	e0d1      	b.n	800fd92 <_svfiprintf_r+0x1d2>
 800fbee:	2340      	movs	r3, #64	; 0x40
 800fbf0:	616b      	str	r3, [r5, #20]
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	9309      	str	r3, [sp, #36]	; 0x24
 800fbf6:	2320      	movs	r3, #32
 800fbf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fbfc:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc00:	2330      	movs	r3, #48	; 0x30
 800fc02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fdac <_svfiprintf_r+0x1ec>
 800fc06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fc0a:	f04f 0901 	mov.w	r9, #1
 800fc0e:	4623      	mov	r3, r4
 800fc10:	469a      	mov	sl, r3
 800fc12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc16:	b10a      	cbz	r2, 800fc1c <_svfiprintf_r+0x5c>
 800fc18:	2a25      	cmp	r2, #37	; 0x25
 800fc1a:	d1f9      	bne.n	800fc10 <_svfiprintf_r+0x50>
 800fc1c:	ebba 0b04 	subs.w	fp, sl, r4
 800fc20:	d00b      	beq.n	800fc3a <_svfiprintf_r+0x7a>
 800fc22:	465b      	mov	r3, fp
 800fc24:	4622      	mov	r2, r4
 800fc26:	4629      	mov	r1, r5
 800fc28:	4638      	mov	r0, r7
 800fc2a:	f7ff ff6d 	bl	800fb08 <__ssputs_r>
 800fc2e:	3001      	adds	r0, #1
 800fc30:	f000 80aa 	beq.w	800fd88 <_svfiprintf_r+0x1c8>
 800fc34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc36:	445a      	add	r2, fp
 800fc38:	9209      	str	r2, [sp, #36]	; 0x24
 800fc3a:	f89a 3000 	ldrb.w	r3, [sl]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	f000 80a2 	beq.w	800fd88 <_svfiprintf_r+0x1c8>
 800fc44:	2300      	movs	r3, #0
 800fc46:	f04f 32ff 	mov.w	r2, #4294967295
 800fc4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc4e:	f10a 0a01 	add.w	sl, sl, #1
 800fc52:	9304      	str	r3, [sp, #16]
 800fc54:	9307      	str	r3, [sp, #28]
 800fc56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fc5a:	931a      	str	r3, [sp, #104]	; 0x68
 800fc5c:	4654      	mov	r4, sl
 800fc5e:	2205      	movs	r2, #5
 800fc60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc64:	4851      	ldr	r0, [pc, #324]	; (800fdac <_svfiprintf_r+0x1ec>)
 800fc66:	f7f0 fab3 	bl	80001d0 <memchr>
 800fc6a:	9a04      	ldr	r2, [sp, #16]
 800fc6c:	b9d8      	cbnz	r0, 800fca6 <_svfiprintf_r+0xe6>
 800fc6e:	06d0      	lsls	r0, r2, #27
 800fc70:	bf44      	itt	mi
 800fc72:	2320      	movmi	r3, #32
 800fc74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc78:	0711      	lsls	r1, r2, #28
 800fc7a:	bf44      	itt	mi
 800fc7c:	232b      	movmi	r3, #43	; 0x2b
 800fc7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc82:	f89a 3000 	ldrb.w	r3, [sl]
 800fc86:	2b2a      	cmp	r3, #42	; 0x2a
 800fc88:	d015      	beq.n	800fcb6 <_svfiprintf_r+0xf6>
 800fc8a:	9a07      	ldr	r2, [sp, #28]
 800fc8c:	4654      	mov	r4, sl
 800fc8e:	2000      	movs	r0, #0
 800fc90:	f04f 0c0a 	mov.w	ip, #10
 800fc94:	4621      	mov	r1, r4
 800fc96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc9a:	3b30      	subs	r3, #48	; 0x30
 800fc9c:	2b09      	cmp	r3, #9
 800fc9e:	d94e      	bls.n	800fd3e <_svfiprintf_r+0x17e>
 800fca0:	b1b0      	cbz	r0, 800fcd0 <_svfiprintf_r+0x110>
 800fca2:	9207      	str	r2, [sp, #28]
 800fca4:	e014      	b.n	800fcd0 <_svfiprintf_r+0x110>
 800fca6:	eba0 0308 	sub.w	r3, r0, r8
 800fcaa:	fa09 f303 	lsl.w	r3, r9, r3
 800fcae:	4313      	orrs	r3, r2
 800fcb0:	9304      	str	r3, [sp, #16]
 800fcb2:	46a2      	mov	sl, r4
 800fcb4:	e7d2      	b.n	800fc5c <_svfiprintf_r+0x9c>
 800fcb6:	9b03      	ldr	r3, [sp, #12]
 800fcb8:	1d19      	adds	r1, r3, #4
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	9103      	str	r1, [sp, #12]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	bfbb      	ittet	lt
 800fcc2:	425b      	neglt	r3, r3
 800fcc4:	f042 0202 	orrlt.w	r2, r2, #2
 800fcc8:	9307      	strge	r3, [sp, #28]
 800fcca:	9307      	strlt	r3, [sp, #28]
 800fccc:	bfb8      	it	lt
 800fcce:	9204      	strlt	r2, [sp, #16]
 800fcd0:	7823      	ldrb	r3, [r4, #0]
 800fcd2:	2b2e      	cmp	r3, #46	; 0x2e
 800fcd4:	d10c      	bne.n	800fcf0 <_svfiprintf_r+0x130>
 800fcd6:	7863      	ldrb	r3, [r4, #1]
 800fcd8:	2b2a      	cmp	r3, #42	; 0x2a
 800fcda:	d135      	bne.n	800fd48 <_svfiprintf_r+0x188>
 800fcdc:	9b03      	ldr	r3, [sp, #12]
 800fcde:	1d1a      	adds	r2, r3, #4
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	9203      	str	r2, [sp, #12]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	bfb8      	it	lt
 800fce8:	f04f 33ff 	movlt.w	r3, #4294967295
 800fcec:	3402      	adds	r4, #2
 800fcee:	9305      	str	r3, [sp, #20]
 800fcf0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fdbc <_svfiprintf_r+0x1fc>
 800fcf4:	7821      	ldrb	r1, [r4, #0]
 800fcf6:	2203      	movs	r2, #3
 800fcf8:	4650      	mov	r0, sl
 800fcfa:	f7f0 fa69 	bl	80001d0 <memchr>
 800fcfe:	b140      	cbz	r0, 800fd12 <_svfiprintf_r+0x152>
 800fd00:	2340      	movs	r3, #64	; 0x40
 800fd02:	eba0 000a 	sub.w	r0, r0, sl
 800fd06:	fa03 f000 	lsl.w	r0, r3, r0
 800fd0a:	9b04      	ldr	r3, [sp, #16]
 800fd0c:	4303      	orrs	r3, r0
 800fd0e:	3401      	adds	r4, #1
 800fd10:	9304      	str	r3, [sp, #16]
 800fd12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd16:	4826      	ldr	r0, [pc, #152]	; (800fdb0 <_svfiprintf_r+0x1f0>)
 800fd18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fd1c:	2206      	movs	r2, #6
 800fd1e:	f7f0 fa57 	bl	80001d0 <memchr>
 800fd22:	2800      	cmp	r0, #0
 800fd24:	d038      	beq.n	800fd98 <_svfiprintf_r+0x1d8>
 800fd26:	4b23      	ldr	r3, [pc, #140]	; (800fdb4 <_svfiprintf_r+0x1f4>)
 800fd28:	bb1b      	cbnz	r3, 800fd72 <_svfiprintf_r+0x1b2>
 800fd2a:	9b03      	ldr	r3, [sp, #12]
 800fd2c:	3307      	adds	r3, #7
 800fd2e:	f023 0307 	bic.w	r3, r3, #7
 800fd32:	3308      	adds	r3, #8
 800fd34:	9303      	str	r3, [sp, #12]
 800fd36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd38:	4433      	add	r3, r6
 800fd3a:	9309      	str	r3, [sp, #36]	; 0x24
 800fd3c:	e767      	b.n	800fc0e <_svfiprintf_r+0x4e>
 800fd3e:	fb0c 3202 	mla	r2, ip, r2, r3
 800fd42:	460c      	mov	r4, r1
 800fd44:	2001      	movs	r0, #1
 800fd46:	e7a5      	b.n	800fc94 <_svfiprintf_r+0xd4>
 800fd48:	2300      	movs	r3, #0
 800fd4a:	3401      	adds	r4, #1
 800fd4c:	9305      	str	r3, [sp, #20]
 800fd4e:	4619      	mov	r1, r3
 800fd50:	f04f 0c0a 	mov.w	ip, #10
 800fd54:	4620      	mov	r0, r4
 800fd56:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd5a:	3a30      	subs	r2, #48	; 0x30
 800fd5c:	2a09      	cmp	r2, #9
 800fd5e:	d903      	bls.n	800fd68 <_svfiprintf_r+0x1a8>
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d0c5      	beq.n	800fcf0 <_svfiprintf_r+0x130>
 800fd64:	9105      	str	r1, [sp, #20]
 800fd66:	e7c3      	b.n	800fcf0 <_svfiprintf_r+0x130>
 800fd68:	fb0c 2101 	mla	r1, ip, r1, r2
 800fd6c:	4604      	mov	r4, r0
 800fd6e:	2301      	movs	r3, #1
 800fd70:	e7f0      	b.n	800fd54 <_svfiprintf_r+0x194>
 800fd72:	ab03      	add	r3, sp, #12
 800fd74:	9300      	str	r3, [sp, #0]
 800fd76:	462a      	mov	r2, r5
 800fd78:	4b0f      	ldr	r3, [pc, #60]	; (800fdb8 <_svfiprintf_r+0x1f8>)
 800fd7a:	a904      	add	r1, sp, #16
 800fd7c:	4638      	mov	r0, r7
 800fd7e:	f3af 8000 	nop.w
 800fd82:	1c42      	adds	r2, r0, #1
 800fd84:	4606      	mov	r6, r0
 800fd86:	d1d6      	bne.n	800fd36 <_svfiprintf_r+0x176>
 800fd88:	89ab      	ldrh	r3, [r5, #12]
 800fd8a:	065b      	lsls	r3, r3, #25
 800fd8c:	f53f af2c 	bmi.w	800fbe8 <_svfiprintf_r+0x28>
 800fd90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd92:	b01d      	add	sp, #116	; 0x74
 800fd94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd98:	ab03      	add	r3, sp, #12
 800fd9a:	9300      	str	r3, [sp, #0]
 800fd9c:	462a      	mov	r2, r5
 800fd9e:	4b06      	ldr	r3, [pc, #24]	; (800fdb8 <_svfiprintf_r+0x1f8>)
 800fda0:	a904      	add	r1, sp, #16
 800fda2:	4638      	mov	r0, r7
 800fda4:	f000 f87a 	bl	800fe9c <_printf_i>
 800fda8:	e7eb      	b.n	800fd82 <_svfiprintf_r+0x1c2>
 800fdaa:	bf00      	nop
 800fdac:	080106c4 	.word	0x080106c4
 800fdb0:	080106ce 	.word	0x080106ce
 800fdb4:	00000000 	.word	0x00000000
 800fdb8:	0800fb09 	.word	0x0800fb09
 800fdbc:	080106ca 	.word	0x080106ca

0800fdc0 <_printf_common>:
 800fdc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdc4:	4616      	mov	r6, r2
 800fdc6:	4699      	mov	r9, r3
 800fdc8:	688a      	ldr	r2, [r1, #8]
 800fdca:	690b      	ldr	r3, [r1, #16]
 800fdcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fdd0:	4293      	cmp	r3, r2
 800fdd2:	bfb8      	it	lt
 800fdd4:	4613      	movlt	r3, r2
 800fdd6:	6033      	str	r3, [r6, #0]
 800fdd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fddc:	4607      	mov	r7, r0
 800fdde:	460c      	mov	r4, r1
 800fde0:	b10a      	cbz	r2, 800fde6 <_printf_common+0x26>
 800fde2:	3301      	adds	r3, #1
 800fde4:	6033      	str	r3, [r6, #0]
 800fde6:	6823      	ldr	r3, [r4, #0]
 800fde8:	0699      	lsls	r1, r3, #26
 800fdea:	bf42      	ittt	mi
 800fdec:	6833      	ldrmi	r3, [r6, #0]
 800fdee:	3302      	addmi	r3, #2
 800fdf0:	6033      	strmi	r3, [r6, #0]
 800fdf2:	6825      	ldr	r5, [r4, #0]
 800fdf4:	f015 0506 	ands.w	r5, r5, #6
 800fdf8:	d106      	bne.n	800fe08 <_printf_common+0x48>
 800fdfa:	f104 0a19 	add.w	sl, r4, #25
 800fdfe:	68e3      	ldr	r3, [r4, #12]
 800fe00:	6832      	ldr	r2, [r6, #0]
 800fe02:	1a9b      	subs	r3, r3, r2
 800fe04:	42ab      	cmp	r3, r5
 800fe06:	dc26      	bgt.n	800fe56 <_printf_common+0x96>
 800fe08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fe0c:	1e13      	subs	r3, r2, #0
 800fe0e:	6822      	ldr	r2, [r4, #0]
 800fe10:	bf18      	it	ne
 800fe12:	2301      	movne	r3, #1
 800fe14:	0692      	lsls	r2, r2, #26
 800fe16:	d42b      	bmi.n	800fe70 <_printf_common+0xb0>
 800fe18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fe1c:	4649      	mov	r1, r9
 800fe1e:	4638      	mov	r0, r7
 800fe20:	47c0      	blx	r8
 800fe22:	3001      	adds	r0, #1
 800fe24:	d01e      	beq.n	800fe64 <_printf_common+0xa4>
 800fe26:	6823      	ldr	r3, [r4, #0]
 800fe28:	68e5      	ldr	r5, [r4, #12]
 800fe2a:	6832      	ldr	r2, [r6, #0]
 800fe2c:	f003 0306 	and.w	r3, r3, #6
 800fe30:	2b04      	cmp	r3, #4
 800fe32:	bf08      	it	eq
 800fe34:	1aad      	subeq	r5, r5, r2
 800fe36:	68a3      	ldr	r3, [r4, #8]
 800fe38:	6922      	ldr	r2, [r4, #16]
 800fe3a:	bf0c      	ite	eq
 800fe3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fe40:	2500      	movne	r5, #0
 800fe42:	4293      	cmp	r3, r2
 800fe44:	bfc4      	itt	gt
 800fe46:	1a9b      	subgt	r3, r3, r2
 800fe48:	18ed      	addgt	r5, r5, r3
 800fe4a:	2600      	movs	r6, #0
 800fe4c:	341a      	adds	r4, #26
 800fe4e:	42b5      	cmp	r5, r6
 800fe50:	d11a      	bne.n	800fe88 <_printf_common+0xc8>
 800fe52:	2000      	movs	r0, #0
 800fe54:	e008      	b.n	800fe68 <_printf_common+0xa8>
 800fe56:	2301      	movs	r3, #1
 800fe58:	4652      	mov	r2, sl
 800fe5a:	4649      	mov	r1, r9
 800fe5c:	4638      	mov	r0, r7
 800fe5e:	47c0      	blx	r8
 800fe60:	3001      	adds	r0, #1
 800fe62:	d103      	bne.n	800fe6c <_printf_common+0xac>
 800fe64:	f04f 30ff 	mov.w	r0, #4294967295
 800fe68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe6c:	3501      	adds	r5, #1
 800fe6e:	e7c6      	b.n	800fdfe <_printf_common+0x3e>
 800fe70:	18e1      	adds	r1, r4, r3
 800fe72:	1c5a      	adds	r2, r3, #1
 800fe74:	2030      	movs	r0, #48	; 0x30
 800fe76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fe7a:	4422      	add	r2, r4
 800fe7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fe80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fe84:	3302      	adds	r3, #2
 800fe86:	e7c7      	b.n	800fe18 <_printf_common+0x58>
 800fe88:	2301      	movs	r3, #1
 800fe8a:	4622      	mov	r2, r4
 800fe8c:	4649      	mov	r1, r9
 800fe8e:	4638      	mov	r0, r7
 800fe90:	47c0      	blx	r8
 800fe92:	3001      	adds	r0, #1
 800fe94:	d0e6      	beq.n	800fe64 <_printf_common+0xa4>
 800fe96:	3601      	adds	r6, #1
 800fe98:	e7d9      	b.n	800fe4e <_printf_common+0x8e>
	...

0800fe9c <_printf_i>:
 800fe9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fea0:	7e0f      	ldrb	r7, [r1, #24]
 800fea2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fea4:	2f78      	cmp	r7, #120	; 0x78
 800fea6:	4691      	mov	r9, r2
 800fea8:	4680      	mov	r8, r0
 800feaa:	460c      	mov	r4, r1
 800feac:	469a      	mov	sl, r3
 800feae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800feb2:	d807      	bhi.n	800fec4 <_printf_i+0x28>
 800feb4:	2f62      	cmp	r7, #98	; 0x62
 800feb6:	d80a      	bhi.n	800fece <_printf_i+0x32>
 800feb8:	2f00      	cmp	r7, #0
 800feba:	f000 80d8 	beq.w	801006e <_printf_i+0x1d2>
 800febe:	2f58      	cmp	r7, #88	; 0x58
 800fec0:	f000 80a3 	beq.w	801000a <_printf_i+0x16e>
 800fec4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fec8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fecc:	e03a      	b.n	800ff44 <_printf_i+0xa8>
 800fece:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fed2:	2b15      	cmp	r3, #21
 800fed4:	d8f6      	bhi.n	800fec4 <_printf_i+0x28>
 800fed6:	a101      	add	r1, pc, #4	; (adr r1, 800fedc <_printf_i+0x40>)
 800fed8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fedc:	0800ff35 	.word	0x0800ff35
 800fee0:	0800ff49 	.word	0x0800ff49
 800fee4:	0800fec5 	.word	0x0800fec5
 800fee8:	0800fec5 	.word	0x0800fec5
 800feec:	0800fec5 	.word	0x0800fec5
 800fef0:	0800fec5 	.word	0x0800fec5
 800fef4:	0800ff49 	.word	0x0800ff49
 800fef8:	0800fec5 	.word	0x0800fec5
 800fefc:	0800fec5 	.word	0x0800fec5
 800ff00:	0800fec5 	.word	0x0800fec5
 800ff04:	0800fec5 	.word	0x0800fec5
 800ff08:	08010055 	.word	0x08010055
 800ff0c:	0800ff79 	.word	0x0800ff79
 800ff10:	08010037 	.word	0x08010037
 800ff14:	0800fec5 	.word	0x0800fec5
 800ff18:	0800fec5 	.word	0x0800fec5
 800ff1c:	08010077 	.word	0x08010077
 800ff20:	0800fec5 	.word	0x0800fec5
 800ff24:	0800ff79 	.word	0x0800ff79
 800ff28:	0800fec5 	.word	0x0800fec5
 800ff2c:	0800fec5 	.word	0x0800fec5
 800ff30:	0801003f 	.word	0x0801003f
 800ff34:	682b      	ldr	r3, [r5, #0]
 800ff36:	1d1a      	adds	r2, r3, #4
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	602a      	str	r2, [r5, #0]
 800ff3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ff40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ff44:	2301      	movs	r3, #1
 800ff46:	e0a3      	b.n	8010090 <_printf_i+0x1f4>
 800ff48:	6820      	ldr	r0, [r4, #0]
 800ff4a:	6829      	ldr	r1, [r5, #0]
 800ff4c:	0606      	lsls	r6, r0, #24
 800ff4e:	f101 0304 	add.w	r3, r1, #4
 800ff52:	d50a      	bpl.n	800ff6a <_printf_i+0xce>
 800ff54:	680e      	ldr	r6, [r1, #0]
 800ff56:	602b      	str	r3, [r5, #0]
 800ff58:	2e00      	cmp	r6, #0
 800ff5a:	da03      	bge.n	800ff64 <_printf_i+0xc8>
 800ff5c:	232d      	movs	r3, #45	; 0x2d
 800ff5e:	4276      	negs	r6, r6
 800ff60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff64:	485e      	ldr	r0, [pc, #376]	; (80100e0 <_printf_i+0x244>)
 800ff66:	230a      	movs	r3, #10
 800ff68:	e019      	b.n	800ff9e <_printf_i+0x102>
 800ff6a:	680e      	ldr	r6, [r1, #0]
 800ff6c:	602b      	str	r3, [r5, #0]
 800ff6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ff72:	bf18      	it	ne
 800ff74:	b236      	sxthne	r6, r6
 800ff76:	e7ef      	b.n	800ff58 <_printf_i+0xbc>
 800ff78:	682b      	ldr	r3, [r5, #0]
 800ff7a:	6820      	ldr	r0, [r4, #0]
 800ff7c:	1d19      	adds	r1, r3, #4
 800ff7e:	6029      	str	r1, [r5, #0]
 800ff80:	0601      	lsls	r1, r0, #24
 800ff82:	d501      	bpl.n	800ff88 <_printf_i+0xec>
 800ff84:	681e      	ldr	r6, [r3, #0]
 800ff86:	e002      	b.n	800ff8e <_printf_i+0xf2>
 800ff88:	0646      	lsls	r6, r0, #25
 800ff8a:	d5fb      	bpl.n	800ff84 <_printf_i+0xe8>
 800ff8c:	881e      	ldrh	r6, [r3, #0]
 800ff8e:	4854      	ldr	r0, [pc, #336]	; (80100e0 <_printf_i+0x244>)
 800ff90:	2f6f      	cmp	r7, #111	; 0x6f
 800ff92:	bf0c      	ite	eq
 800ff94:	2308      	moveq	r3, #8
 800ff96:	230a      	movne	r3, #10
 800ff98:	2100      	movs	r1, #0
 800ff9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ff9e:	6865      	ldr	r5, [r4, #4]
 800ffa0:	60a5      	str	r5, [r4, #8]
 800ffa2:	2d00      	cmp	r5, #0
 800ffa4:	bfa2      	ittt	ge
 800ffa6:	6821      	ldrge	r1, [r4, #0]
 800ffa8:	f021 0104 	bicge.w	r1, r1, #4
 800ffac:	6021      	strge	r1, [r4, #0]
 800ffae:	b90e      	cbnz	r6, 800ffb4 <_printf_i+0x118>
 800ffb0:	2d00      	cmp	r5, #0
 800ffb2:	d04d      	beq.n	8010050 <_printf_i+0x1b4>
 800ffb4:	4615      	mov	r5, r2
 800ffb6:	fbb6 f1f3 	udiv	r1, r6, r3
 800ffba:	fb03 6711 	mls	r7, r3, r1, r6
 800ffbe:	5dc7      	ldrb	r7, [r0, r7]
 800ffc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ffc4:	4637      	mov	r7, r6
 800ffc6:	42bb      	cmp	r3, r7
 800ffc8:	460e      	mov	r6, r1
 800ffca:	d9f4      	bls.n	800ffb6 <_printf_i+0x11a>
 800ffcc:	2b08      	cmp	r3, #8
 800ffce:	d10b      	bne.n	800ffe8 <_printf_i+0x14c>
 800ffd0:	6823      	ldr	r3, [r4, #0]
 800ffd2:	07de      	lsls	r6, r3, #31
 800ffd4:	d508      	bpl.n	800ffe8 <_printf_i+0x14c>
 800ffd6:	6923      	ldr	r3, [r4, #16]
 800ffd8:	6861      	ldr	r1, [r4, #4]
 800ffda:	4299      	cmp	r1, r3
 800ffdc:	bfde      	ittt	le
 800ffde:	2330      	movle	r3, #48	; 0x30
 800ffe0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ffe4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ffe8:	1b52      	subs	r2, r2, r5
 800ffea:	6122      	str	r2, [r4, #16]
 800ffec:	f8cd a000 	str.w	sl, [sp]
 800fff0:	464b      	mov	r3, r9
 800fff2:	aa03      	add	r2, sp, #12
 800fff4:	4621      	mov	r1, r4
 800fff6:	4640      	mov	r0, r8
 800fff8:	f7ff fee2 	bl	800fdc0 <_printf_common>
 800fffc:	3001      	adds	r0, #1
 800fffe:	d14c      	bne.n	801009a <_printf_i+0x1fe>
 8010000:	f04f 30ff 	mov.w	r0, #4294967295
 8010004:	b004      	add	sp, #16
 8010006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801000a:	4835      	ldr	r0, [pc, #212]	; (80100e0 <_printf_i+0x244>)
 801000c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010010:	6829      	ldr	r1, [r5, #0]
 8010012:	6823      	ldr	r3, [r4, #0]
 8010014:	f851 6b04 	ldr.w	r6, [r1], #4
 8010018:	6029      	str	r1, [r5, #0]
 801001a:	061d      	lsls	r5, r3, #24
 801001c:	d514      	bpl.n	8010048 <_printf_i+0x1ac>
 801001e:	07df      	lsls	r7, r3, #31
 8010020:	bf44      	itt	mi
 8010022:	f043 0320 	orrmi.w	r3, r3, #32
 8010026:	6023      	strmi	r3, [r4, #0]
 8010028:	b91e      	cbnz	r6, 8010032 <_printf_i+0x196>
 801002a:	6823      	ldr	r3, [r4, #0]
 801002c:	f023 0320 	bic.w	r3, r3, #32
 8010030:	6023      	str	r3, [r4, #0]
 8010032:	2310      	movs	r3, #16
 8010034:	e7b0      	b.n	800ff98 <_printf_i+0xfc>
 8010036:	6823      	ldr	r3, [r4, #0]
 8010038:	f043 0320 	orr.w	r3, r3, #32
 801003c:	6023      	str	r3, [r4, #0]
 801003e:	2378      	movs	r3, #120	; 0x78
 8010040:	4828      	ldr	r0, [pc, #160]	; (80100e4 <_printf_i+0x248>)
 8010042:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010046:	e7e3      	b.n	8010010 <_printf_i+0x174>
 8010048:	0659      	lsls	r1, r3, #25
 801004a:	bf48      	it	mi
 801004c:	b2b6      	uxthmi	r6, r6
 801004e:	e7e6      	b.n	801001e <_printf_i+0x182>
 8010050:	4615      	mov	r5, r2
 8010052:	e7bb      	b.n	800ffcc <_printf_i+0x130>
 8010054:	682b      	ldr	r3, [r5, #0]
 8010056:	6826      	ldr	r6, [r4, #0]
 8010058:	6961      	ldr	r1, [r4, #20]
 801005a:	1d18      	adds	r0, r3, #4
 801005c:	6028      	str	r0, [r5, #0]
 801005e:	0635      	lsls	r5, r6, #24
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	d501      	bpl.n	8010068 <_printf_i+0x1cc>
 8010064:	6019      	str	r1, [r3, #0]
 8010066:	e002      	b.n	801006e <_printf_i+0x1d2>
 8010068:	0670      	lsls	r0, r6, #25
 801006a:	d5fb      	bpl.n	8010064 <_printf_i+0x1c8>
 801006c:	8019      	strh	r1, [r3, #0]
 801006e:	2300      	movs	r3, #0
 8010070:	6123      	str	r3, [r4, #16]
 8010072:	4615      	mov	r5, r2
 8010074:	e7ba      	b.n	800ffec <_printf_i+0x150>
 8010076:	682b      	ldr	r3, [r5, #0]
 8010078:	1d1a      	adds	r2, r3, #4
 801007a:	602a      	str	r2, [r5, #0]
 801007c:	681d      	ldr	r5, [r3, #0]
 801007e:	6862      	ldr	r2, [r4, #4]
 8010080:	2100      	movs	r1, #0
 8010082:	4628      	mov	r0, r5
 8010084:	f7f0 f8a4 	bl	80001d0 <memchr>
 8010088:	b108      	cbz	r0, 801008e <_printf_i+0x1f2>
 801008a:	1b40      	subs	r0, r0, r5
 801008c:	6060      	str	r0, [r4, #4]
 801008e:	6863      	ldr	r3, [r4, #4]
 8010090:	6123      	str	r3, [r4, #16]
 8010092:	2300      	movs	r3, #0
 8010094:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010098:	e7a8      	b.n	800ffec <_printf_i+0x150>
 801009a:	6923      	ldr	r3, [r4, #16]
 801009c:	462a      	mov	r2, r5
 801009e:	4649      	mov	r1, r9
 80100a0:	4640      	mov	r0, r8
 80100a2:	47d0      	blx	sl
 80100a4:	3001      	adds	r0, #1
 80100a6:	d0ab      	beq.n	8010000 <_printf_i+0x164>
 80100a8:	6823      	ldr	r3, [r4, #0]
 80100aa:	079b      	lsls	r3, r3, #30
 80100ac:	d413      	bmi.n	80100d6 <_printf_i+0x23a>
 80100ae:	68e0      	ldr	r0, [r4, #12]
 80100b0:	9b03      	ldr	r3, [sp, #12]
 80100b2:	4298      	cmp	r0, r3
 80100b4:	bfb8      	it	lt
 80100b6:	4618      	movlt	r0, r3
 80100b8:	e7a4      	b.n	8010004 <_printf_i+0x168>
 80100ba:	2301      	movs	r3, #1
 80100bc:	4632      	mov	r2, r6
 80100be:	4649      	mov	r1, r9
 80100c0:	4640      	mov	r0, r8
 80100c2:	47d0      	blx	sl
 80100c4:	3001      	adds	r0, #1
 80100c6:	d09b      	beq.n	8010000 <_printf_i+0x164>
 80100c8:	3501      	adds	r5, #1
 80100ca:	68e3      	ldr	r3, [r4, #12]
 80100cc:	9903      	ldr	r1, [sp, #12]
 80100ce:	1a5b      	subs	r3, r3, r1
 80100d0:	42ab      	cmp	r3, r5
 80100d2:	dcf2      	bgt.n	80100ba <_printf_i+0x21e>
 80100d4:	e7eb      	b.n	80100ae <_printf_i+0x212>
 80100d6:	2500      	movs	r5, #0
 80100d8:	f104 0619 	add.w	r6, r4, #25
 80100dc:	e7f5      	b.n	80100ca <_printf_i+0x22e>
 80100de:	bf00      	nop
 80100e0:	080106d5 	.word	0x080106d5
 80100e4:	080106e6 	.word	0x080106e6

080100e8 <memmove>:
 80100e8:	4288      	cmp	r0, r1
 80100ea:	b510      	push	{r4, lr}
 80100ec:	eb01 0402 	add.w	r4, r1, r2
 80100f0:	d902      	bls.n	80100f8 <memmove+0x10>
 80100f2:	4284      	cmp	r4, r0
 80100f4:	4623      	mov	r3, r4
 80100f6:	d807      	bhi.n	8010108 <memmove+0x20>
 80100f8:	1e43      	subs	r3, r0, #1
 80100fa:	42a1      	cmp	r1, r4
 80100fc:	d008      	beq.n	8010110 <memmove+0x28>
 80100fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010102:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010106:	e7f8      	b.n	80100fa <memmove+0x12>
 8010108:	4402      	add	r2, r0
 801010a:	4601      	mov	r1, r0
 801010c:	428a      	cmp	r2, r1
 801010e:	d100      	bne.n	8010112 <memmove+0x2a>
 8010110:	bd10      	pop	{r4, pc}
 8010112:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010116:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801011a:	e7f7      	b.n	801010c <memmove+0x24>

0801011c <_realloc_r>:
 801011c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010120:	4680      	mov	r8, r0
 8010122:	4614      	mov	r4, r2
 8010124:	460e      	mov	r6, r1
 8010126:	b921      	cbnz	r1, 8010132 <_realloc_r+0x16>
 8010128:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801012c:	4611      	mov	r1, r2
 801012e:	f7ff bc39 	b.w	800f9a4 <_malloc_r>
 8010132:	b92a      	cbnz	r2, 8010140 <_realloc_r+0x24>
 8010134:	f7ff fbca 	bl	800f8cc <_free_r>
 8010138:	4625      	mov	r5, r4
 801013a:	4628      	mov	r0, r5
 801013c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010140:	f000 f81b 	bl	801017a <_malloc_usable_size_r>
 8010144:	4284      	cmp	r4, r0
 8010146:	4607      	mov	r7, r0
 8010148:	d802      	bhi.n	8010150 <_realloc_r+0x34>
 801014a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801014e:	d812      	bhi.n	8010176 <_realloc_r+0x5a>
 8010150:	4621      	mov	r1, r4
 8010152:	4640      	mov	r0, r8
 8010154:	f7ff fc26 	bl	800f9a4 <_malloc_r>
 8010158:	4605      	mov	r5, r0
 801015a:	2800      	cmp	r0, #0
 801015c:	d0ed      	beq.n	801013a <_realloc_r+0x1e>
 801015e:	42bc      	cmp	r4, r7
 8010160:	4622      	mov	r2, r4
 8010162:	4631      	mov	r1, r6
 8010164:	bf28      	it	cs
 8010166:	463a      	movcs	r2, r7
 8010168:	f7ff fb9a 	bl	800f8a0 <memcpy>
 801016c:	4631      	mov	r1, r6
 801016e:	4640      	mov	r0, r8
 8010170:	f7ff fbac 	bl	800f8cc <_free_r>
 8010174:	e7e1      	b.n	801013a <_realloc_r+0x1e>
 8010176:	4635      	mov	r5, r6
 8010178:	e7df      	b.n	801013a <_realloc_r+0x1e>

0801017a <_malloc_usable_size_r>:
 801017a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801017e:	1f18      	subs	r0, r3, #4
 8010180:	2b00      	cmp	r3, #0
 8010182:	bfbc      	itt	lt
 8010184:	580b      	ldrlt	r3, [r1, r0]
 8010186:	18c0      	addlt	r0, r0, r3
 8010188:	4770      	bx	lr
	...

0801018c <_init>:
 801018c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801018e:	bf00      	nop
 8010190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010192:	bc08      	pop	{r3}
 8010194:	469e      	mov	lr, r3
 8010196:	4770      	bx	lr

08010198 <_fini>:
 8010198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801019a:	bf00      	nop
 801019c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801019e:	bc08      	pop	{r3}
 80101a0:	469e      	mov	lr, r3
 80101a2:	4770      	bx	lr
