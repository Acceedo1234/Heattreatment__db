
heattreatment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fec0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  08010050  08010050  00020050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080105a4  080105a4  00030070  2**0
                  CONTENTS
  4 .ARM          00000008  080105a4  080105a4  000205a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080105ac  080105ac  00030070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080105ac  080105ac  000205ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080105b4  080105b4  000205b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080105bc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000720  20000070  0801062c  00030070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000790  0801062c  00030790  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eb75  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000480f  00000000  00000000  0004ec15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b8  00000000  00000000  00053428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001728  00000000  00000000  00054ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006b75  00000000  00000000  00056408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000218e5  00000000  00000000  0005cf7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df1a1  00000000  00000000  0007e862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015da03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c30  00000000  00000000  0015da54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010038 	.word	0x08010038

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08010038 	.word	0x08010038

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ReadOnlineData>:
	}

}

void ReadOnlineData(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
	uint8_t FlashReadOLdata[10];
	W25qxx_ReadSector(FlashReadOLdata,602,0,10);
 800057a:	1d38      	adds	r0, r7, #4
 800057c:	230a      	movs	r3, #10
 800057e:	2200      	movs	r2, #0
 8000580:	f240 215a 	movw	r1, #602	; 0x25a
 8000584:	f003 f8d2 	bl	800372c <W25qxx_ReadSector>
	temperatureSetOL 		= (FlashReadOLdata[1]<<8|FlashReadOLdata[0]);
 8000588:	797b      	ldrb	r3, [r7, #5]
 800058a:	021b      	lsls	r3, r3, #8
 800058c:	b21a      	sxth	r2, r3
 800058e:	793b      	ldrb	r3, [r7, #4]
 8000590:	b21b      	sxth	r3, r3
 8000592:	4313      	orrs	r3, r2
 8000594:	b21b      	sxth	r3, r3
 8000596:	b29a      	uxth	r2, r3
 8000598:	4b14      	ldr	r3, [pc, #80]	; (80005ec <ReadOnlineData+0x78>)
 800059a:	801a      	strh	r2, [r3, #0]
	temperaturehighSetOL 	= (FlashReadOLdata[3]<<8|FlashReadOLdata[2]);
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	021b      	lsls	r3, r3, #8
 80005a0:	b21a      	sxth	r2, r3
 80005a2:	79bb      	ldrb	r3, [r7, #6]
 80005a4:	b21b      	sxth	r3, r3
 80005a6:	4313      	orrs	r3, r2
 80005a8:	b21b      	sxth	r3, r3
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <ReadOnlineData+0x7c>)
 80005ae:	801a      	strh	r2, [r3, #0]
	temperatureLowSetOL 	= (FlashReadOLdata[5]<<8|FlashReadOLdata[4]);
 80005b0:	7a7b      	ldrb	r3, [r7, #9]
 80005b2:	021b      	lsls	r3, r3, #8
 80005b4:	b21a      	sxth	r2, r3
 80005b6:	7a3b      	ldrb	r3, [r7, #8]
 80005b8:	b21b      	sxth	r3, r3
 80005ba:	4313      	orrs	r3, r2
 80005bc:	b21b      	sxth	r3, r3
 80005be:	b29a      	uxth	r2, r3
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <ReadOnlineData+0x80>)
 80005c2:	801a      	strh	r2, [r3, #0]
	productiontimeSetOL 	= (FlashReadOLdata[7]<<8|FlashReadOLdata[6]);
 80005c4:	7afb      	ldrb	r3, [r7, #11]
 80005c6:	021b      	lsls	r3, r3, #8
 80005c8:	b21a      	sxth	r2, r3
 80005ca:	7abb      	ldrb	r3, [r7, #10]
 80005cc:	b21b      	sxth	r3, r3
 80005ce:	4313      	orrs	r3, r2
 80005d0:	b21b      	sxth	r3, r3
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <ReadOnlineData+0x84>)
 80005d6:	801a      	strh	r2, [r3, #0]
	productionhysPosSetOL 	= FlashReadOLdata[8];
 80005d8:	7b3a      	ldrb	r2, [r7, #12]
 80005da:	4b08      	ldr	r3, [pc, #32]	; (80005fc <ReadOnlineData+0x88>)
 80005dc:	701a      	strb	r2, [r3, #0]
	productionhysNegSetOL   = FlashReadOLdata[9];
 80005de:	7b7a      	ldrb	r2, [r7, #13]
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <ReadOnlineData+0x8c>)
 80005e2:	701a      	strb	r2, [r3, #0]
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	200000da 	.word	0x200000da
 80005f0:	200000dc 	.word	0x200000dc
 80005f4:	200000de 	.word	0x200000de
 80005f8:	200000e0 	.word	0x200000e0
 80005fc:	200000e2 	.word	0x200000e2
 8000600:	200000e3 	.word	0x200000e3

08000604 <ESPRxDecoder>:


void ESPRxDecoder(unsigned char Rxwifi_data,unsigned char Rxseqdecoder)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	460a      	mov	r2, r1
 800060e:	71fb      	strb	r3, [r7, #7]
 8000610:	4613      	mov	r3, r2
 8000612:	71bb      	strb	r3, [r7, #6]

   static unsigned char Error_Retry;
	 switch(Rxseqdecoder)
 8000614:	79bb      	ldrb	r3, [r7, #6]
 8000616:	3b01      	subs	r3, #1
 8000618:	2b07      	cmp	r3, #7
 800061a:	f201 82eb 	bhi.w	8001bf4 <ESPRxDecoder+0x15f0>
 800061e:	a201      	add	r2, pc, #4	; (adr r2, 8000624 <ESPRxDecoder+0x20>)
 8000620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000624:	08000645 	.word	0x08000645
 8000628:	08000761 	.word	0x08000761
 800062c:	0800079f 	.word	0x0800079f
 8000630:	08000995 	.word	0x08000995
 8000634:	080009d3 	.word	0x080009d3
 8000638:	08000be5 	.word	0x08000be5
 800063c:	08000c11 	.word	0x08000c11
 8000640:	08001bbf 	.word	0x08001bbf
	   {
	   	case 1:
			 if((Rxwifi_data=='O')&&(bufferptr==0))
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	2b4f      	cmp	r3, #79	; 0x4f
 8000648:	d107      	bne.n	800065a <ESPRxDecoder+0x56>
 800064a:	4b91      	ldr	r3, [pc, #580]	; (8000890 <ESPRxDecoder+0x28c>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d103      	bne.n	800065a <ESPRxDecoder+0x56>
			 {
			 	bufferptr=1;
 8000652:	4b8f      	ldr	r3, [pc, #572]	; (8000890 <ESPRxDecoder+0x28c>)
 8000654:	2201      	movs	r2, #1
 8000656:	701a      	strb	r2, [r3, #0]
 8000658:	e014      	b.n	8000684 <ESPRxDecoder+0x80>
			 }
			 else if((Rxwifi_data=='K')&&(bufferptr==1))
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	2b4b      	cmp	r3, #75	; 0x4b
 800065e:	d111      	bne.n	8000684 <ESPRxDecoder+0x80>
 8000660:	4b8b      	ldr	r3, [pc, #556]	; (8000890 <ESPRxDecoder+0x28c>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d10d      	bne.n	8000684 <ESPRxDecoder+0x80>
			 {
			 	bufferptr=0;
 8000668:	4b89      	ldr	r3, [pc, #548]	; (8000890 <ESPRxDecoder+0x28c>)
 800066a:	2200      	movs	r2, #0
 800066c:	701a      	strb	r2, [r3, #0]
			 	wifi_command=30;
 800066e:	4b89      	ldr	r3, [pc, #548]	; (8000894 <ESPRxDecoder+0x290>)
 8000670:	221e      	movs	r2, #30
 8000672:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000674:	2300      	movs	r3, #0
 8000676:	71bb      	strb	r3, [r7, #6]
				wifi_command=30;
 8000678:	4b86      	ldr	r3, [pc, #536]	; (8000894 <ESPRxDecoder+0x290>)
 800067a:	221e      	movs	r2, #30
 800067c:	701a      	strb	r2, [r3, #0]
//				WifiStatusVar = 1;
				Check_CWMODE_For_Hang=0;
 800067e:	4b86      	ldr	r3, [pc, #536]	; (8000898 <ESPRxDecoder+0x294>)
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]
			 }
			 else{;}

			 if((Rxwifi_data=='n')&&(bufferptr==0))
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	2b6e      	cmp	r3, #110	; 0x6e
 8000688:	d107      	bne.n	800069a <ESPRxDecoder+0x96>
 800068a:	4b81      	ldr	r3, [pc, #516]	; (8000890 <ESPRxDecoder+0x28c>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d103      	bne.n	800069a <ESPRxDecoder+0x96>
			 {
			 	bufferptr=1;
 8000692:	4b7f      	ldr	r3, [pc, #508]	; (8000890 <ESPRxDecoder+0x28c>)
 8000694:	2201      	movs	r2, #1
 8000696:	701a      	strb	r2, [r3, #0]
 8000698:	e060      	b.n	800075c <ESPRxDecoder+0x158>
			 }
			 else if((Rxwifi_data=='o')&&(bufferptr==1))
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	2b6f      	cmp	r3, #111	; 0x6f
 800069e:	d107      	bne.n	80006b0 <ESPRxDecoder+0xac>
 80006a0:	4b7b      	ldr	r3, [pc, #492]	; (8000890 <ESPRxDecoder+0x28c>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d103      	bne.n	80006b0 <ESPRxDecoder+0xac>
			 {
			 	bufferptr=2;
 80006a8:	4b79      	ldr	r3, [pc, #484]	; (8000890 <ESPRxDecoder+0x28c>)
 80006aa:	2202      	movs	r2, #2
 80006ac:	701a      	strb	r2, [r3, #0]
 80006ae:	e055      	b.n	800075c <ESPRxDecoder+0x158>
			 }
			 else if(bufferptr==2)
 80006b0:	4b77      	ldr	r3, [pc, #476]	; (8000890 <ESPRxDecoder+0x28c>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b02      	cmp	r3, #2
 80006b6:	d104      	bne.n	80006c2 <ESPRxDecoder+0xbe>
			 {
			 	bufferptr=3;
 80006b8:	4b75      	ldr	r3, [pc, #468]	; (8000890 <ESPRxDecoder+0x28c>)
 80006ba:	2203      	movs	r2, #3
 80006bc:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
				wifi_command=30;
				Check_CWMODE_For_Hang=0;
			 }
			 else{;}
		break;
 80006be:	f001 ba9b 	b.w	8001bf8 <ESPRxDecoder+0x15f4>
			 else if((Rxwifi_data=='c')&&(bufferptr==3))
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	2b63      	cmp	r3, #99	; 0x63
 80006c6:	d107      	bne.n	80006d8 <ESPRxDecoder+0xd4>
 80006c8:	4b71      	ldr	r3, [pc, #452]	; (8000890 <ESPRxDecoder+0x28c>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b03      	cmp	r3, #3
 80006ce:	d103      	bne.n	80006d8 <ESPRxDecoder+0xd4>
			 	bufferptr=4;
 80006d0:	4b6f      	ldr	r3, [pc, #444]	; (8000890 <ESPRxDecoder+0x28c>)
 80006d2:	2204      	movs	r2, #4
 80006d4:	701a      	strb	r2, [r3, #0]
 80006d6:	e041      	b.n	800075c <ESPRxDecoder+0x158>
			 else if((Rxwifi_data=='h')&&(bufferptr==4))
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	2b68      	cmp	r3, #104	; 0x68
 80006dc:	d107      	bne.n	80006ee <ESPRxDecoder+0xea>
 80006de:	4b6c      	ldr	r3, [pc, #432]	; (8000890 <ESPRxDecoder+0x28c>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b04      	cmp	r3, #4
 80006e4:	d103      	bne.n	80006ee <ESPRxDecoder+0xea>
			 	bufferptr=5;
 80006e6:	4b6a      	ldr	r3, [pc, #424]	; (8000890 <ESPRxDecoder+0x28c>)
 80006e8:	2205      	movs	r2, #5
 80006ea:	701a      	strb	r2, [r3, #0]
 80006ec:	e036      	b.n	800075c <ESPRxDecoder+0x158>
			 else if((Rxwifi_data=='a')&&(bufferptr==5))
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	2b61      	cmp	r3, #97	; 0x61
 80006f2:	d107      	bne.n	8000704 <ESPRxDecoder+0x100>
 80006f4:	4b66      	ldr	r3, [pc, #408]	; (8000890 <ESPRxDecoder+0x28c>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b05      	cmp	r3, #5
 80006fa:	d103      	bne.n	8000704 <ESPRxDecoder+0x100>
			 	bufferptr=6;
 80006fc:	4b64      	ldr	r3, [pc, #400]	; (8000890 <ESPRxDecoder+0x28c>)
 80006fe:	2206      	movs	r2, #6
 8000700:	701a      	strb	r2, [r3, #0]
 8000702:	e02b      	b.n	800075c <ESPRxDecoder+0x158>
			 else if((Rxwifi_data=='n')&&(bufferptr==6))
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	2b6e      	cmp	r3, #110	; 0x6e
 8000708:	d107      	bne.n	800071a <ESPRxDecoder+0x116>
 800070a:	4b61      	ldr	r3, [pc, #388]	; (8000890 <ESPRxDecoder+0x28c>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b06      	cmp	r3, #6
 8000710:	d103      	bne.n	800071a <ESPRxDecoder+0x116>
			 	bufferptr=7;
 8000712:	4b5f      	ldr	r3, [pc, #380]	; (8000890 <ESPRxDecoder+0x28c>)
 8000714:	2207      	movs	r2, #7
 8000716:	701a      	strb	r2, [r3, #0]
 8000718:	e020      	b.n	800075c <ESPRxDecoder+0x158>
			 else if((Rxwifi_data=='g')&&(bufferptr==7))
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	2b67      	cmp	r3, #103	; 0x67
 800071e:	d107      	bne.n	8000730 <ESPRxDecoder+0x12c>
 8000720:	4b5b      	ldr	r3, [pc, #364]	; (8000890 <ESPRxDecoder+0x28c>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b07      	cmp	r3, #7
 8000726:	d103      	bne.n	8000730 <ESPRxDecoder+0x12c>
			 	bufferptr=8;
 8000728:	4b59      	ldr	r3, [pc, #356]	; (8000890 <ESPRxDecoder+0x28c>)
 800072a:	2208      	movs	r2, #8
 800072c:	701a      	strb	r2, [r3, #0]
 800072e:	e015      	b.n	800075c <ESPRxDecoder+0x158>
			 else if((Rxwifi_data=='e')&&(bufferptr==8))
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	2b65      	cmp	r3, #101	; 0x65
 8000734:	f041 8260 	bne.w	8001bf8 <ESPRxDecoder+0x15f4>
 8000738:	4b55      	ldr	r3, [pc, #340]	; (8000890 <ESPRxDecoder+0x28c>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b08      	cmp	r3, #8
 800073e:	f041 825b 	bne.w	8001bf8 <ESPRxDecoder+0x15f4>
			 	bufferptr=0;
 8000742:	4b53      	ldr	r3, [pc, #332]	; (8000890 <ESPRxDecoder+0x28c>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000748:	2300      	movs	r3, #0
 800074a:	71bb      	strb	r3, [r7, #6]
				wifi_command=30;
 800074c:	4b51      	ldr	r3, [pc, #324]	; (8000894 <ESPRxDecoder+0x290>)
 800074e:	221e      	movs	r2, #30
 8000750:	701a      	strb	r2, [r3, #0]
				Check_CWMODE_For_Hang=0;
 8000752:	4b51      	ldr	r3, [pc, #324]	; (8000898 <ESPRxDecoder+0x294>)
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
		break;
 8000758:	f001 ba4e 	b.w	8001bf8 <ESPRxDecoder+0x15f4>
 800075c:	f001 ba4c 	b.w	8001bf8 <ESPRxDecoder+0x15f4>
		case 2:
			if((Rxwifi_data=='O')&&(bufferptr==0))
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	2b4f      	cmp	r3, #79	; 0x4f
 8000764:	d108      	bne.n	8000778 <ESPRxDecoder+0x174>
 8000766:	4b4a      	ldr	r3, [pc, #296]	; (8000890 <ESPRxDecoder+0x28c>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d104      	bne.n	8000778 <ESPRxDecoder+0x174>
			 {
			 	bufferptr=1;
 800076e:	4b48      	ldr	r3, [pc, #288]	; (8000890 <ESPRxDecoder+0x28c>)
 8000770:	2201      	movs	r2, #1
 8000772:	701a      	strb	r2, [r3, #0]
			 {
			 	bufferptr=0;
				Rxseqdecoder=0;
				wifi_command=49;
			 }
		break;
 8000774:	f001 ba42 	b.w	8001bfc <ESPRxDecoder+0x15f8>
			 else if((Rxwifi_data=='K')&&(bufferptr==1))
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	2b4b      	cmp	r3, #75	; 0x4b
 800077c:	f041 823e 	bne.w	8001bfc <ESPRxDecoder+0x15f8>
 8000780:	4b43      	ldr	r3, [pc, #268]	; (8000890 <ESPRxDecoder+0x28c>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b01      	cmp	r3, #1
 8000786:	f041 8239 	bne.w	8001bfc <ESPRxDecoder+0x15f8>
			 	bufferptr=0;
 800078a:	4b41      	ldr	r3, [pc, #260]	; (8000890 <ESPRxDecoder+0x28c>)
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000790:	2300      	movs	r3, #0
 8000792:	71bb      	strb	r3, [r7, #6]
				wifi_command=49;
 8000794:	4b3f      	ldr	r3, [pc, #252]	; (8000894 <ESPRxDecoder+0x290>)
 8000796:	2231      	movs	r2, #49	; 0x31
 8000798:	701a      	strb	r2, [r3, #0]
		break;
 800079a:	f001 ba2f 	b.w	8001bfc <ESPRxDecoder+0x15f8>
		case 3:
			if((Rxwifi_data=='A')&&(bufferptr==0))
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	2b41      	cmp	r3, #65	; 0x41
 80007a2:	d107      	bne.n	80007b4 <ESPRxDecoder+0x1b0>
 80007a4:	4b3a      	ldr	r3, [pc, #232]	; (8000890 <ESPRxDecoder+0x28c>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d103      	bne.n	80007b4 <ESPRxDecoder+0x1b0>
			 {
			 	bufferptr=1;
 80007ac:	4b38      	ldr	r3, [pc, #224]	; (8000890 <ESPRxDecoder+0x28c>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	701a      	strb	r2, [r3, #0]
 80007b2:	e0a1      	b.n	80008f8 <ESPRxDecoder+0x2f4>
			 }
			 else if((Rxwifi_data=='C')&&(bufferptr==1))
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	2b43      	cmp	r3, #67	; 0x43
 80007b8:	d107      	bne.n	80007ca <ESPRxDecoder+0x1c6>
 80007ba:	4b35      	ldr	r3, [pc, #212]	; (8000890 <ESPRxDecoder+0x28c>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d103      	bne.n	80007ca <ESPRxDecoder+0x1c6>
			 {
			 	bufferptr=2;
 80007c2:	4b33      	ldr	r3, [pc, #204]	; (8000890 <ESPRxDecoder+0x28c>)
 80007c4:	2202      	movs	r2, #2
 80007c6:	701a      	strb	r2, [r3, #0]
 80007c8:	e096      	b.n	80008f8 <ESPRxDecoder+0x2f4>
			 }
			 else if((Rxwifi_data=='C')&&(bufferptr==2))
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b43      	cmp	r3, #67	; 0x43
 80007ce:	d107      	bne.n	80007e0 <ESPRxDecoder+0x1dc>
 80007d0:	4b2f      	ldr	r3, [pc, #188]	; (8000890 <ESPRxDecoder+0x28c>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b02      	cmp	r3, #2
 80007d6:	d103      	bne.n	80007e0 <ESPRxDecoder+0x1dc>
			 {
			 	bufferptr=3;
 80007d8:	4b2d      	ldr	r3, [pc, #180]	; (8000890 <ESPRxDecoder+0x28c>)
 80007da:	2203      	movs	r2, #3
 80007dc:	701a      	strb	r2, [r3, #0]
 80007de:	e08b      	b.n	80008f8 <ESPRxDecoder+0x2f4>
			 }

			 else if((Rxwifi_data=='E')&&(bufferptr==3))
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	2b45      	cmp	r3, #69	; 0x45
 80007e4:	d107      	bne.n	80007f6 <ESPRxDecoder+0x1f2>
 80007e6:	4b2a      	ldr	r3, [pc, #168]	; (8000890 <ESPRxDecoder+0x28c>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b03      	cmp	r3, #3
 80007ec:	d103      	bne.n	80007f6 <ESPRxDecoder+0x1f2>
			 {
			 	bufferptr=4;
 80007ee:	4b28      	ldr	r3, [pc, #160]	; (8000890 <ESPRxDecoder+0x28c>)
 80007f0:	2204      	movs	r2, #4
 80007f2:	701a      	strb	r2, [r3, #0]
 80007f4:	e080      	b.n	80008f8 <ESPRxDecoder+0x2f4>
			 }
			 else if((Rxwifi_data=='E')&&(bufferptr==4))
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	2b45      	cmp	r3, #69	; 0x45
 80007fa:	d107      	bne.n	800080c <ESPRxDecoder+0x208>
 80007fc:	4b24      	ldr	r3, [pc, #144]	; (8000890 <ESPRxDecoder+0x28c>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b04      	cmp	r3, #4
 8000802:	d103      	bne.n	800080c <ESPRxDecoder+0x208>
			 {
			 	bufferptr=5;
 8000804:	4b22      	ldr	r3, [pc, #136]	; (8000890 <ESPRxDecoder+0x28c>)
 8000806:	2205      	movs	r2, #5
 8000808:	701a      	strb	r2, [r3, #0]
 800080a:	e075      	b.n	80008f8 <ESPRxDecoder+0x2f4>
			 }
			 else if((Rxwifi_data=='D')&&(bufferptr==5))
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	2b44      	cmp	r3, #68	; 0x44
 8000810:	d107      	bne.n	8000822 <ESPRxDecoder+0x21e>
 8000812:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <ESPRxDecoder+0x28c>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b05      	cmp	r3, #5
 8000818:	d103      	bne.n	8000822 <ESPRxDecoder+0x21e>
			 {
			 	bufferptr=6;
 800081a:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <ESPRxDecoder+0x28c>)
 800081c:	2206      	movs	r2, #6
 800081e:	701a      	strb	r2, [r3, #0]
 8000820:	e06a      	b.n	80008f8 <ESPRxDecoder+0x2f4>
			 }
			 else if((Rxwifi_data=='O')&&(bufferptr==6))
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	2b4f      	cmp	r3, #79	; 0x4f
 8000826:	d107      	bne.n	8000838 <ESPRxDecoder+0x234>
 8000828:	4b19      	ldr	r3, [pc, #100]	; (8000890 <ESPRxDecoder+0x28c>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b06      	cmp	r3, #6
 800082e:	d103      	bne.n	8000838 <ESPRxDecoder+0x234>
			 {
			 	bufferptr=7;
 8000830:	4b17      	ldr	r3, [pc, #92]	; (8000890 <ESPRxDecoder+0x28c>)
 8000832:	2207      	movs	r2, #7
 8000834:	701a      	strb	r2, [r3, #0]
 8000836:	e05f      	b.n	80008f8 <ESPRxDecoder+0x2f4>
			 }
			 else if((Rxwifi_data=='_')&&(bufferptr==7))
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	2b5f      	cmp	r3, #95	; 0x5f
 800083c:	d107      	bne.n	800084e <ESPRxDecoder+0x24a>
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <ESPRxDecoder+0x28c>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b07      	cmp	r3, #7
 8000844:	d103      	bne.n	800084e <ESPRxDecoder+0x24a>
			 {
			 	bufferptr=8;
 8000846:	4b12      	ldr	r3, [pc, #72]	; (8000890 <ESPRxDecoder+0x28c>)
 8000848:	2208      	movs	r2, #8
 800084a:	701a      	strb	r2, [r3, #0]
 800084c:	e054      	b.n	80008f8 <ESPRxDecoder+0x2f4>
			 }
			 else if((Rxwifi_data=='E')&&(bufferptr==8))
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	2b45      	cmp	r3, #69	; 0x45
 8000852:	d107      	bne.n	8000864 <ESPRxDecoder+0x260>
 8000854:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <ESPRxDecoder+0x28c>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b08      	cmp	r3, #8
 800085a:	d103      	bne.n	8000864 <ESPRxDecoder+0x260>
			 {
			 	bufferptr=9;
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <ESPRxDecoder+0x28c>)
 800085e:	2209      	movs	r2, #9
 8000860:	701a      	strb	r2, [r3, #0]
 8000862:	e049      	b.n	80008f8 <ESPRxDecoder+0x2f4>
			 }
			 else if((Rxwifi_data=='D')&&(bufferptr==9))
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	2b44      	cmp	r3, #68	; 0x44
 8000868:	d107      	bne.n	800087a <ESPRxDecoder+0x276>
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <ESPRxDecoder+0x28c>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b09      	cmp	r3, #9
 8000870:	d103      	bne.n	800087a <ESPRxDecoder+0x276>
			 {
			 	bufferptr=10;
 8000872:	4b07      	ldr	r3, [pc, #28]	; (8000890 <ESPRxDecoder+0x28c>)
 8000874:	220a      	movs	r2, #10
 8000876:	701a      	strb	r2, [r3, #0]
 8000878:	e03e      	b.n	80008f8 <ESPRxDecoder+0x2f4>
			 }
			 else if((Rxwifi_data=='I')&&(bufferptr==10))
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	2b49      	cmp	r3, #73	; 0x49
 800087e:	d10d      	bne.n	800089c <ESPRxDecoder+0x298>
 8000880:	4b03      	ldr	r3, [pc, #12]	; (8000890 <ESPRxDecoder+0x28c>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b0a      	cmp	r3, #10
 8000886:	d109      	bne.n	800089c <ESPRxDecoder+0x298>
			 {
			 	bufferptr=11;
 8000888:	4b01      	ldr	r3, [pc, #4]	; (8000890 <ESPRxDecoder+0x28c>)
 800088a:	220b      	movs	r2, #11
 800088c:	701a      	strb	r2, [r3, #0]
 800088e:	e033      	b.n	80008f8 <ESPRxDecoder+0x2f4>
 8000890:	20000762 	.word	0x20000762
 8000894:	20000664 	.word	0x20000664
 8000898:	20000764 	.word	0x20000764
			 }
			 else if((Rxwifi_data=='M')&&(bufferptr==11))
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	2b4d      	cmp	r3, #77	; 0x4d
 80008a0:	d107      	bne.n	80008b2 <ESPRxDecoder+0x2ae>
 80008a2:	4b94      	ldr	r3, [pc, #592]	; (8000af4 <ESPRxDecoder+0x4f0>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b0b      	cmp	r3, #11
 80008a8:	d103      	bne.n	80008b2 <ESPRxDecoder+0x2ae>
			 {
			 	bufferptr=12;
 80008aa:	4b92      	ldr	r3, [pc, #584]	; (8000af4 <ESPRxDecoder+0x4f0>)
 80008ac:	220c      	movs	r2, #12
 80008ae:	701a      	strb	r2, [r3, #0]
 80008b0:	e022      	b.n	80008f8 <ESPRxDecoder+0x2f4>
			 }
			 else if((Rxwifi_data=='A')&&(bufferptr==12))
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	2b41      	cmp	r3, #65	; 0x41
 80008b6:	d107      	bne.n	80008c8 <ESPRxDecoder+0x2c4>
 80008b8:	4b8e      	ldr	r3, [pc, #568]	; (8000af4 <ESPRxDecoder+0x4f0>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b0c      	cmp	r3, #12
 80008be:	d103      	bne.n	80008c8 <ESPRxDecoder+0x2c4>
			 {
			 	bufferptr=13;
 80008c0:	4b8c      	ldr	r3, [pc, #560]	; (8000af4 <ESPRxDecoder+0x4f0>)
 80008c2:	220d      	movs	r2, #13
 80008c4:	701a      	strb	r2, [r3, #0]
 80008c6:	e017      	b.n	80008f8 <ESPRxDecoder+0x2f4>
			 }
			 else if((Rxwifi_data=='X')&&(bufferptr==13))
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	2b58      	cmp	r3, #88	; 0x58
 80008cc:	d114      	bne.n	80008f8 <ESPRxDecoder+0x2f4>
 80008ce:	4b89      	ldr	r3, [pc, #548]	; (8000af4 <ESPRxDecoder+0x4f0>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b0d      	cmp	r3, #13
 80008d4:	d110      	bne.n	80008f8 <ESPRxDecoder+0x2f4>
				 {
			 	bufferptr=0;
 80008d6:	4b87      	ldr	r3, [pc, #540]	; (8000af4 <ESPRxDecoder+0x4f0>)
 80008d8:	2200      	movs	r2, #0
 80008da:	701a      	strb	r2, [r3, #0]
				Err_bufferptr=0;
 80008dc:	4b86      	ldr	r3, [pc, #536]	; (8000af8 <ESPRxDecoder+0x4f4>)
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	71bb      	strb	r3, [r7, #6]
				wifi_command=70;
 80008e6:	4b85      	ldr	r3, [pc, #532]	; (8000afc <ESPRxDecoder+0x4f8>)
 80008e8:	2246      	movs	r2, #70	; 0x46
 80008ea:	701a      	strb	r2, [r3, #0]
				Error_Retry=0;
 80008ec:	4b84      	ldr	r3, [pc, #528]	; (8000b00 <ESPRxDecoder+0x4fc>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
				WifiDisplay = 1;
 80008f2:	4b84      	ldr	r3, [pc, #528]	; (8000b04 <ESPRxDecoder+0x500>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
				wifi_command=70;
				Error_Retry=0;
			 }	*/

			 if((Rxwifi_data=='N')&&(Err_bufferptr==0))
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	2b4e      	cmp	r3, #78	; 0x4e
 80008fc:	d107      	bne.n	800090e <ESPRxDecoder+0x30a>
 80008fe:	4b7e      	ldr	r3, [pc, #504]	; (8000af8 <ESPRxDecoder+0x4f4>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d103      	bne.n	800090e <ESPRxDecoder+0x30a>
			 {
			 	Err_bufferptr=1;
 8000906:	4b7c      	ldr	r3, [pc, #496]	; (8000af8 <ESPRxDecoder+0x4f4>)
 8000908:	2201      	movs	r2, #1
 800090a:	701a      	strb	r2, [r3, #0]
 800090c:	e040      	b.n	8000990 <ESPRxDecoder+0x38c>
			 }
			 else if((Rxwifi_data=='o')&&(Err_bufferptr==1))
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	2b6f      	cmp	r3, #111	; 0x6f
 8000912:	d107      	bne.n	8000924 <ESPRxDecoder+0x320>
 8000914:	4b78      	ldr	r3, [pc, #480]	; (8000af8 <ESPRxDecoder+0x4f4>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d103      	bne.n	8000924 <ESPRxDecoder+0x320>
			 {
			 	Err_bufferptr=2;
 800091c:	4b76      	ldr	r3, [pc, #472]	; (8000af8 <ESPRxDecoder+0x4f4>)
 800091e:	2202      	movs	r2, #2
 8000920:	701a      	strb	r2, [r3, #0]
 8000922:	e035      	b.n	8000990 <ESPRxDecoder+0x38c>
			 }
			 else if((Rxwifi_data=='A')&&(Err_bufferptr==2))
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	2b41      	cmp	r3, #65	; 0x41
 8000928:	d107      	bne.n	800093a <ESPRxDecoder+0x336>
 800092a:	4b73      	ldr	r3, [pc, #460]	; (8000af8 <ESPRxDecoder+0x4f4>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b02      	cmp	r3, #2
 8000930:	d103      	bne.n	800093a <ESPRxDecoder+0x336>
			 {
			 	Err_bufferptr=3;
 8000932:	4b71      	ldr	r3, [pc, #452]	; (8000af8 <ESPRxDecoder+0x4f4>)
 8000934:	2203      	movs	r2, #3
 8000936:	701a      	strb	r2, [r3, #0]
 8000938:	e02a      	b.n	8000990 <ESPRxDecoder+0x38c>
			 }
			 else if((Rxwifi_data=='P')&&(Err_bufferptr==3))
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	2b50      	cmp	r3, #80	; 0x50
 800093e:	f041 815f 	bne.w	8001c00 <ESPRxDecoder+0x15fc>
 8000942:	4b6d      	ldr	r3, [pc, #436]	; (8000af8 <ESPRxDecoder+0x4f4>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b03      	cmp	r3, #3
 8000948:	f041 815a 	bne.w	8001c00 <ESPRxDecoder+0x15fc>
			 {
			 	Err_bufferptr=0;
 800094c:	4b6a      	ldr	r3, [pc, #424]	; (8000af8 <ESPRxDecoder+0x4f4>)
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]
				bufferptr=0;
 8000952:	4b68      	ldr	r3, [pc, #416]	; (8000af4 <ESPRxDecoder+0x4f0>)
 8000954:	2200      	movs	r2, #0
 8000956:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000958:	2300      	movs	r3, #0
 800095a:	71bb      	strb	r3, [r7, #6]
				WifiDisplay = 3;
 800095c:	4b69      	ldr	r3, [pc, #420]	; (8000b04 <ESPRxDecoder+0x500>)
 800095e:	2203      	movs	r2, #3
 8000960:	701a      	strb	r2, [r3, #0]
				if(++Error_Retry<3)		//retry for error
 8000962:	4b67      	ldr	r3, [pc, #412]	; (8000b00 <ESPRxDecoder+0x4fc>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	3301      	adds	r3, #1
 8000968:	b2da      	uxtb	r2, r3
 800096a:	4b65      	ldr	r3, [pc, #404]	; (8000b00 <ESPRxDecoder+0x4fc>)
 800096c:	701a      	strb	r2, [r3, #0]
 800096e:	4b64      	ldr	r3, [pc, #400]	; (8000b00 <ESPRxDecoder+0x4fc>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b02      	cmp	r3, #2
 8000974:	d804      	bhi.n	8000980 <ESPRxDecoder+0x37c>
				{
				   wifi_command=50;
 8000976:	4b61      	ldr	r3, [pc, #388]	; (8000afc <ESPRxDecoder+0x4f8>)
 8000978:	2232      	movs	r2, #50	; 0x32
 800097a:	701a      	strb	r2, [r3, #0]
				{
				   wifi_command=10;
				   Error_Retry=0;
				}
			 }
		break;
 800097c:	f001 b940 	b.w	8001c00 <ESPRxDecoder+0x15fc>
				   wifi_command=10;
 8000980:	4b5e      	ldr	r3, [pc, #376]	; (8000afc <ESPRxDecoder+0x4f8>)
 8000982:	220a      	movs	r2, #10
 8000984:	701a      	strb	r2, [r3, #0]
				   Error_Retry=0;
 8000986:	4b5e      	ldr	r3, [pc, #376]	; (8000b00 <ESPRxDecoder+0x4fc>)
 8000988:	2200      	movs	r2, #0
 800098a:	701a      	strb	r2, [r3, #0]
		break;
 800098c:	f001 b938 	b.w	8001c00 <ESPRxDecoder+0x15fc>
 8000990:	f001 b936 	b.w	8001c00 <ESPRxDecoder+0x15fc>
		case 4:	   //retry need to be added
			 if((Rxwifi_data=='O')&&(bufferptr==0))
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	2b4f      	cmp	r3, #79	; 0x4f
 8000998:	d108      	bne.n	80009ac <ESPRxDecoder+0x3a8>
 800099a:	4b56      	ldr	r3, [pc, #344]	; (8000af4 <ESPRxDecoder+0x4f0>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d104      	bne.n	80009ac <ESPRxDecoder+0x3a8>
			 {
			 	bufferptr=1;
 80009a2:	4b54      	ldr	r3, [pc, #336]	; (8000af4 <ESPRxDecoder+0x4f0>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	701a      	strb	r2, [r3, #0]
			 {
			 	bufferptr=0;
				Rxseqdecoder=0;
				wifi_command=80;
			 }
		break;
 80009a8:	f001 b92c 	b.w	8001c04 <ESPRxDecoder+0x1600>
			 else if((Rxwifi_data=='K')&&(bufferptr==1))
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	2b4b      	cmp	r3, #75	; 0x4b
 80009b0:	f041 8128 	bne.w	8001c04 <ESPRxDecoder+0x1600>
 80009b4:	4b4f      	ldr	r3, [pc, #316]	; (8000af4 <ESPRxDecoder+0x4f0>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	f041 8123 	bne.w	8001c04 <ESPRxDecoder+0x1600>
			 	bufferptr=0;
 80009be:	4b4d      	ldr	r3, [pc, #308]	; (8000af4 <ESPRxDecoder+0x4f0>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	71bb      	strb	r3, [r7, #6]
				wifi_command=80;
 80009c8:	4b4c      	ldr	r3, [pc, #304]	; (8000afc <ESPRxDecoder+0x4f8>)
 80009ca:	2250      	movs	r2, #80	; 0x50
 80009cc:	701a      	strb	r2, [r3, #0]
		break;
 80009ce:	f001 b919 	b.w	8001c04 <ESPRxDecoder+0x1600>
		case 5:

			if((Rxwifi_data=='C')&&(bufferptr==0))
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2b43      	cmp	r3, #67	; 0x43
 80009d6:	d107      	bne.n	80009e8 <ESPRxDecoder+0x3e4>
 80009d8:	4b46      	ldr	r3, [pc, #280]	; (8000af4 <ESPRxDecoder+0x4f0>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d103      	bne.n	80009e8 <ESPRxDecoder+0x3e4>
			 {
			 	bufferptr=1;
 80009e0:	4b44      	ldr	r3, [pc, #272]	; (8000af4 <ESPRxDecoder+0x4f0>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	701a      	strb	r2, [r3, #0]
 80009e6:	e04e      	b.n	8000a86 <ESPRxDecoder+0x482>
			 }
			 else if((Rxwifi_data=='O')&&(bufferptr==1))
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	2b4f      	cmp	r3, #79	; 0x4f
 80009ec:	d107      	bne.n	80009fe <ESPRxDecoder+0x3fa>
 80009ee:	4b41      	ldr	r3, [pc, #260]	; (8000af4 <ESPRxDecoder+0x4f0>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d103      	bne.n	80009fe <ESPRxDecoder+0x3fa>
			 {
			 	bufferptr=2;
 80009f6:	4b3f      	ldr	r3, [pc, #252]	; (8000af4 <ESPRxDecoder+0x4f0>)
 80009f8:	2202      	movs	r2, #2
 80009fa:	701a      	strb	r2, [r3, #0]
 80009fc:	e043      	b.n	8000a86 <ESPRxDecoder+0x482>
			 }
			 else if((Rxwifi_data=='N')&&(bufferptr==2))
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	2b4e      	cmp	r3, #78	; 0x4e
 8000a02:	d107      	bne.n	8000a14 <ESPRxDecoder+0x410>
 8000a04:	4b3b      	ldr	r3, [pc, #236]	; (8000af4 <ESPRxDecoder+0x4f0>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	d103      	bne.n	8000a14 <ESPRxDecoder+0x410>
			 {
			 	bufferptr=3;
 8000a0c:	4b39      	ldr	r3, [pc, #228]	; (8000af4 <ESPRxDecoder+0x4f0>)
 8000a0e:	2203      	movs	r2, #3
 8000a10:	701a      	strb	r2, [r3, #0]
 8000a12:	e038      	b.n	8000a86 <ESPRxDecoder+0x482>
			 }
			 else if((Rxwifi_data=='N')&&(bufferptr==3))
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	2b4e      	cmp	r3, #78	; 0x4e
 8000a18:	d107      	bne.n	8000a2a <ESPRxDecoder+0x426>
 8000a1a:	4b36      	ldr	r3, [pc, #216]	; (8000af4 <ESPRxDecoder+0x4f0>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b03      	cmp	r3, #3
 8000a20:	d103      	bne.n	8000a2a <ESPRxDecoder+0x426>
			 {
			 	bufferptr=4;
 8000a22:	4b34      	ldr	r3, [pc, #208]	; (8000af4 <ESPRxDecoder+0x4f0>)
 8000a24:	2204      	movs	r2, #4
 8000a26:	701a      	strb	r2, [r3, #0]
 8000a28:	e02d      	b.n	8000a86 <ESPRxDecoder+0x482>
			 }
			 else if((Rxwifi_data=='E')&&(bufferptr==4))
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	2b45      	cmp	r3, #69	; 0x45
 8000a2e:	d107      	bne.n	8000a40 <ESPRxDecoder+0x43c>
 8000a30:	4b30      	ldr	r3, [pc, #192]	; (8000af4 <ESPRxDecoder+0x4f0>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b04      	cmp	r3, #4
 8000a36:	d103      	bne.n	8000a40 <ESPRxDecoder+0x43c>
			 {
			 	bufferptr=5;
 8000a38:	4b2e      	ldr	r3, [pc, #184]	; (8000af4 <ESPRxDecoder+0x4f0>)
 8000a3a:	2205      	movs	r2, #5
 8000a3c:	701a      	strb	r2, [r3, #0]
 8000a3e:	e022      	b.n	8000a86 <ESPRxDecoder+0x482>
			 }
			 else if((Rxwifi_data=='C')&&(bufferptr==5))
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	2b43      	cmp	r3, #67	; 0x43
 8000a44:	d107      	bne.n	8000a56 <ESPRxDecoder+0x452>
 8000a46:	4b2b      	ldr	r3, [pc, #172]	; (8000af4 <ESPRxDecoder+0x4f0>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b05      	cmp	r3, #5
 8000a4c:	d103      	bne.n	8000a56 <ESPRxDecoder+0x452>
			 {
			 	bufferptr=6;
 8000a4e:	4b29      	ldr	r3, [pc, #164]	; (8000af4 <ESPRxDecoder+0x4f0>)
 8000a50:	2206      	movs	r2, #6
 8000a52:	701a      	strb	r2, [r3, #0]
 8000a54:	e017      	b.n	8000a86 <ESPRxDecoder+0x482>
			 }
			 else if((Rxwifi_data=='T')&&(bufferptr==6))
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	2b54      	cmp	r3, #84	; 0x54
 8000a5a:	d114      	bne.n	8000a86 <ESPRxDecoder+0x482>
 8000a5c:	4b25      	ldr	r3, [pc, #148]	; (8000af4 <ESPRxDecoder+0x4f0>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b06      	cmp	r3, #6
 8000a62:	d110      	bne.n	8000a86 <ESPRxDecoder+0x482>
			 {
			 	Rxseqdecoder=0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	71bb      	strb	r3, [r7, #6]
				wifi_command=90;
 8000a68:	4b24      	ldr	r3, [pc, #144]	; (8000afc <ESPRxDecoder+0x4f8>)
 8000a6a:	225a      	movs	r2, #90	; 0x5a
 8000a6c:	701a      	strb	r2, [r3, #0]
				bufferptr=0;
 8000a6e:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <ESPRxDecoder+0x4f0>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	701a      	strb	r2, [r3, #0]
				Error_Retry=0;
 8000a74:	4b22      	ldr	r3, [pc, #136]	; (8000b00 <ESPRxDecoder+0x4fc>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]
				Err_bufferptr=0; //wifi connected
 8000a7a:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <ESPRxDecoder+0x4f4>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
			   WifiDisplay = 2;
 8000a80:	4b20      	ldr	r3, [pc, #128]	; (8000b04 <ESPRxDecoder+0x500>)
 8000a82:	2202      	movs	r2, #2
 8000a84:	701a      	strb	r2, [r3, #0]
			 }
			 	if((Rxwifi_data=='L')&&(bufferptr==0))	  //linked
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	2b4c      	cmp	r3, #76	; 0x4c
 8000a8a:	d107      	bne.n	8000a9c <ESPRxDecoder+0x498>
 8000a8c:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <ESPRxDecoder+0x4f0>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d103      	bne.n	8000a9c <ESPRxDecoder+0x498>
			 {
			 	bufferptr=1;
 8000a94:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <ESPRxDecoder+0x4f0>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]
 8000a9a:	e04a      	b.n	8000b32 <ESPRxDecoder+0x52e>
			 }
			 else if((Rxwifi_data=='i')&&(bufferptr==1))
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	2b69      	cmp	r3, #105	; 0x69
 8000aa0:	d107      	bne.n	8000ab2 <ESPRxDecoder+0x4ae>
 8000aa2:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <ESPRxDecoder+0x4f0>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d103      	bne.n	8000ab2 <ESPRxDecoder+0x4ae>
			 {
			 	bufferptr=2;
 8000aaa:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <ESPRxDecoder+0x4f0>)
 8000aac:	2202      	movs	r2, #2
 8000aae:	701a      	strb	r2, [r3, #0]
 8000ab0:	e03f      	b.n	8000b32 <ESPRxDecoder+0x52e>
			 }
			 else if((Rxwifi_data=='n')&&(bufferptr==2))
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	2b6e      	cmp	r3, #110	; 0x6e
 8000ab6:	d107      	bne.n	8000ac8 <ESPRxDecoder+0x4c4>
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <ESPRxDecoder+0x4f0>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d103      	bne.n	8000ac8 <ESPRxDecoder+0x4c4>
			 {
			 	bufferptr=3;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <ESPRxDecoder+0x4f0>)
 8000ac2:	2203      	movs	r2, #3
 8000ac4:	701a      	strb	r2, [r3, #0]
 8000ac6:	e034      	b.n	8000b32 <ESPRxDecoder+0x52e>
			 }
			 else if((Rxwifi_data=='k')&&(bufferptr==3))
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	2b6b      	cmp	r3, #107	; 0x6b
 8000acc:	d107      	bne.n	8000ade <ESPRxDecoder+0x4da>
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <ESPRxDecoder+0x4f0>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b03      	cmp	r3, #3
 8000ad4:	d103      	bne.n	8000ade <ESPRxDecoder+0x4da>
			 {
			 	bufferptr=4;
 8000ad6:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <ESPRxDecoder+0x4f0>)
 8000ad8:	2204      	movs	r2, #4
 8000ada:	701a      	strb	r2, [r3, #0]
 8000adc:	e029      	b.n	8000b32 <ESPRxDecoder+0x52e>
			 }
			 else if((Rxwifi_data=='e')&&(bufferptr==4))
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	2b65      	cmp	r3, #101	; 0x65
 8000ae2:	d111      	bne.n	8000b08 <ESPRxDecoder+0x504>
 8000ae4:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <ESPRxDecoder+0x4f0>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b04      	cmp	r3, #4
 8000aea:	d10d      	bne.n	8000b08 <ESPRxDecoder+0x504>
			 {
			 	bufferptr=5;
 8000aec:	4b01      	ldr	r3, [pc, #4]	; (8000af4 <ESPRxDecoder+0x4f0>)
 8000aee:	2205      	movs	r2, #5
 8000af0:	701a      	strb	r2, [r3, #0]
 8000af2:	e01e      	b.n	8000b32 <ESPRxDecoder+0x52e>
 8000af4:	20000762 	.word	0x20000762
 8000af8:	200000d3 	.word	0x200000d3
 8000afc:	20000664 	.word	0x20000664
 8000b00:	20000100 	.word	0x20000100
 8000b04:	200000d4 	.word	0x200000d4
			 }
			 else if((Rxwifi_data=='d')&&(bufferptr==5))
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	2b64      	cmp	r3, #100	; 0x64
 8000b0c:	d111      	bne.n	8000b32 <ESPRxDecoder+0x52e>
 8000b0e:	4ba5      	ldr	r3, [pc, #660]	; (8000da4 <ESPRxDecoder+0x7a0>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2b05      	cmp	r3, #5
 8000b14:	d10d      	bne.n	8000b32 <ESPRxDecoder+0x52e>
			 {
			 	Rxseqdecoder=0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	71bb      	strb	r3, [r7, #6]
				wifi_command=90;
 8000b1a:	4ba3      	ldr	r3, [pc, #652]	; (8000da8 <ESPRxDecoder+0x7a4>)
 8000b1c:	225a      	movs	r2, #90	; 0x5a
 8000b1e:	701a      	strb	r2, [r3, #0]
				bufferptr=0;
 8000b20:	4ba0      	ldr	r3, [pc, #640]	; (8000da4 <ESPRxDecoder+0x7a0>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]
				Error_Retry=0;
 8000b26:	4ba1      	ldr	r3, [pc, #644]	; (8000dac <ESPRxDecoder+0x7a8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]
				Err_bufferptr=0;
 8000b2c:	4ba0      	ldr	r3, [pc, #640]	; (8000db0 <ESPRxDecoder+0x7ac>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]
			 }
			 if((Rxwifi_data=='E')&&(Err_bufferptr==0))
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	2b45      	cmp	r3, #69	; 0x45
 8000b36:	d107      	bne.n	8000b48 <ESPRxDecoder+0x544>
 8000b38:	4b9d      	ldr	r3, [pc, #628]	; (8000db0 <ESPRxDecoder+0x7ac>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d103      	bne.n	8000b48 <ESPRxDecoder+0x544>
			 {
			 	Err_bufferptr=1;
 8000b40:	4b9b      	ldr	r3, [pc, #620]	; (8000db0 <ESPRxDecoder+0x7ac>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	701a      	strb	r2, [r3, #0]
 8000b46:	e04b      	b.n	8000be0 <ESPRxDecoder+0x5dc>
			 }
			 else if((Rxwifi_data=='R')&&(Err_bufferptr==1))
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	2b52      	cmp	r3, #82	; 0x52
 8000b4c:	d107      	bne.n	8000b5e <ESPRxDecoder+0x55a>
 8000b4e:	4b98      	ldr	r3, [pc, #608]	; (8000db0 <ESPRxDecoder+0x7ac>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d103      	bne.n	8000b5e <ESPRxDecoder+0x55a>
			 {
			 	Err_bufferptr=2;
 8000b56:	4b96      	ldr	r3, [pc, #600]	; (8000db0 <ESPRxDecoder+0x7ac>)
 8000b58:	2202      	movs	r2, #2
 8000b5a:	701a      	strb	r2, [r3, #0]
 8000b5c:	e040      	b.n	8000be0 <ESPRxDecoder+0x5dc>
			 }
			 else if((Rxwifi_data=='R')&&(Err_bufferptr==2))
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	2b52      	cmp	r3, #82	; 0x52
 8000b62:	d107      	bne.n	8000b74 <ESPRxDecoder+0x570>
 8000b64:	4b92      	ldr	r3, [pc, #584]	; (8000db0 <ESPRxDecoder+0x7ac>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d103      	bne.n	8000b74 <ESPRxDecoder+0x570>
			 {
			 	Err_bufferptr=3;
 8000b6c:	4b90      	ldr	r3, [pc, #576]	; (8000db0 <ESPRxDecoder+0x7ac>)
 8000b6e:	2203      	movs	r2, #3
 8000b70:	701a      	strb	r2, [r3, #0]
 8000b72:	e035      	b.n	8000be0 <ESPRxDecoder+0x5dc>
			 }
			 else if((Rxwifi_data=='O')&&(Err_bufferptr==3))
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	2b4f      	cmp	r3, #79	; 0x4f
 8000b78:	d107      	bne.n	8000b8a <ESPRxDecoder+0x586>
 8000b7a:	4b8d      	ldr	r3, [pc, #564]	; (8000db0 <ESPRxDecoder+0x7ac>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b03      	cmp	r3, #3
 8000b80:	d103      	bne.n	8000b8a <ESPRxDecoder+0x586>
			 {
			 	Err_bufferptr=4;
 8000b82:	4b8b      	ldr	r3, [pc, #556]	; (8000db0 <ESPRxDecoder+0x7ac>)
 8000b84:	2204      	movs	r2, #4
 8000b86:	701a      	strb	r2, [r3, #0]
 8000b88:	e02a      	b.n	8000be0 <ESPRxDecoder+0x5dc>
			 }
			 else if((Rxwifi_data=='R')&&(Err_bufferptr==4))
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	2b52      	cmp	r3, #82	; 0x52
 8000b8e:	f041 803b 	bne.w	8001c08 <ESPRxDecoder+0x1604>
 8000b92:	4b87      	ldr	r3, [pc, #540]	; (8000db0 <ESPRxDecoder+0x7ac>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b04      	cmp	r3, #4
 8000b98:	f041 8036 	bne.w	8001c08 <ESPRxDecoder+0x1604>
			 {
			   	Err_bufferptr=0;
 8000b9c:	4b84      	ldr	r3, [pc, #528]	; (8000db0 <ESPRxDecoder+0x7ac>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	701a      	strb	r2, [r3, #0]
				bufferptr=0;
 8000ba2:	4b80      	ldr	r3, [pc, #512]	; (8000da4 <ESPRxDecoder+0x7a0>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	71bb      	strb	r3, [r7, #6]
				WifiDisplay = 4;
 8000bac:	4b81      	ldr	r3, [pc, #516]	; (8000db4 <ESPRxDecoder+0x7b0>)
 8000bae:	2204      	movs	r2, #4
 8000bb0:	701a      	strb	r2, [r3, #0]
				if(++Error_Retry<3)		//retry for error
 8000bb2:	4b7e      	ldr	r3, [pc, #504]	; (8000dac <ESPRxDecoder+0x7a8>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4b7c      	ldr	r3, [pc, #496]	; (8000dac <ESPRxDecoder+0x7a8>)
 8000bbc:	701a      	strb	r2, [r3, #0]
 8000bbe:	4b7b      	ldr	r3, [pc, #492]	; (8000dac <ESPRxDecoder+0x7a8>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d804      	bhi.n	8000bd0 <ESPRxDecoder+0x5cc>
				{
				   wifi_command=80;
 8000bc6:	4b78      	ldr	r3, [pc, #480]	; (8000da8 <ESPRxDecoder+0x7a4>)
 8000bc8:	2250      	movs	r2, #80	; 0x50
 8000bca:	701a      	strb	r2, [r3, #0]
				{
				   wifi_command=50;	 // modified by satheesh
				   Error_Retry=0;
				}
			 }
		break;
 8000bcc:	f001 b81c 	b.w	8001c08 <ESPRxDecoder+0x1604>
				   wifi_command=50;	 // modified by satheesh
 8000bd0:	4b75      	ldr	r3, [pc, #468]	; (8000da8 <ESPRxDecoder+0x7a4>)
 8000bd2:	2232      	movs	r2, #50	; 0x32
 8000bd4:	701a      	strb	r2, [r3, #0]
				   Error_Retry=0;
 8000bd6:	4b75      	ldr	r3, [pc, #468]	; (8000dac <ESPRxDecoder+0x7a8>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]
		break;
 8000bdc:	f001 b814 	b.w	8001c08 <ESPRxDecoder+0x1604>
 8000be0:	f001 b812 	b.w	8001c08 <ESPRxDecoder+0x1604>
		case 6:
			 if((Rxwifi_data=='>')&&(bufferptr==0))
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	2b3e      	cmp	r3, #62	; 0x3e
 8000be8:	f041 8010 	bne.w	8001c0c <ESPRxDecoder+0x1608>
 8000bec:	4b6d      	ldr	r3, [pc, #436]	; (8000da4 <ESPRxDecoder+0x7a0>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	f041 800b 	bne.w	8001c0c <ESPRxDecoder+0x1608>
			 {
			 	bufferptr=0;
 8000bf6:	4b6b      	ldr	r3, [pc, #428]	; (8000da4 <ESPRxDecoder+0x7a0>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	71bb      	strb	r3, [r7, #6]
				refinc=0;
 8000c00:	4b6d      	ldr	r3, [pc, #436]	; (8000db8 <ESPRxDecoder+0x7b4>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
				wifi_command=100;
 8000c06:	4b68      	ldr	r3, [pc, #416]	; (8000da8 <ESPRxDecoder+0x7a4>)
 8000c08:	2264      	movs	r2, #100	; 0x64
 8000c0a:	701a      	strb	r2, [r3, #0]
			 }
		break;
 8000c0c:	f000 bffe 	b.w	8001c0c <ESPRxDecoder+0x1608>
		case 7:
			checkbuff[refinc]= Rxwifi_data;
 8000c10:	4b69      	ldr	r3, [pc, #420]	; (8000db8 <ESPRxDecoder+0x7b4>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	4a69      	ldr	r2, [pc, #420]	; (8000dbc <ESPRxDecoder+0x7b8>)
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	5453      	strb	r3, [r2, r1]
			refinc++;
 8000c1c:	4b66      	ldr	r3, [pc, #408]	; (8000db8 <ESPRxDecoder+0x7b4>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	3301      	adds	r3, #1
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	4b64      	ldr	r3, [pc, #400]	; (8000db8 <ESPRxDecoder+0x7b4>)
 8000c26:	701a      	strb	r2, [r3, #0]
			if((Rxwifi_data=='$')&&(Data_bufferptr==0))
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	2b24      	cmp	r3, #36	; 0x24
 8000c2c:	d10b      	bne.n	8000c46 <ESPRxDecoder+0x642>
 8000c2e:	4b64      	ldr	r3, [pc, #400]	; (8000dc0 <ESPRxDecoder+0x7bc>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d107      	bne.n	8000c46 <ESPRxDecoder+0x642>
			 {
				Data_bufferptr=1;
 8000c36:	4b62      	ldr	r3, [pc, #392]	; (8000dc0 <ESPRxDecoder+0x7bc>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	701a      	strb	r2, [r3, #0]
				Valid_DataWifi1= 1;
 8000c3c:	4b61      	ldr	r3, [pc, #388]	; (8000dc4 <ESPRxDecoder+0x7c0>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	701a      	strb	r2, [r3, #0]
 8000c42:	f000 be60 	b.w	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==1)	 //unit id
 8000c46:	4b5e      	ldr	r3, [pc, #376]	; (8000dc0 <ESPRxDecoder+0x7bc>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d10c      	bne.n	8000c68 <ESPRxDecoder+0x664>
			 {
				 Uart_rx_buffer[0] = DecToASCIIFun(Rxwifi_data); Data_bufferptr=2;
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f000 ffed 	bl	8001c30 <DecToASCIIFun>
 8000c56:	4603      	mov	r3, r0
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4b5b      	ldr	r3, [pc, #364]	; (8000dc8 <ESPRxDecoder+0x7c4>)
 8000c5c:	701a      	strb	r2, [r3, #0]
 8000c5e:	4b58      	ldr	r3, [pc, #352]	; (8000dc0 <ESPRxDecoder+0x7bc>)
 8000c60:	2202      	movs	r2, #2
 8000c62:	701a      	strb	r2, [r3, #0]
 8000c64:	f000 be4f 	b.w	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==2)
 8000c68:	4b55      	ldr	r3, [pc, #340]	; (8000dc0 <ESPRxDecoder+0x7bc>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d119      	bne.n	8000ca4 <ESPRxDecoder+0x6a0>
			 {
				 Uart_rx_buffer[1] = DecToASCIIFun(Rxwifi_data);
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 ffdc 	bl	8001c30 <DecToASCIIFun>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	4b52      	ldr	r3, [pc, #328]	; (8000dc8 <ESPRxDecoder+0x7c4>)
 8000c7e:	705a      	strb	r2, [r3, #1]
				 UnitId_Http = Uart_rx_buffer[1]+Uart_rx_buffer[0]*10;
 8000c80:	4b51      	ldr	r3, [pc, #324]	; (8000dc8 <ESPRxDecoder+0x7c4>)
 8000c82:	785a      	ldrb	r2, [r3, #1]
 8000c84:	4b50      	ldr	r3, [pc, #320]	; (8000dc8 <ESPRxDecoder+0x7c4>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	0089      	lsls	r1, r1, #2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	4413      	add	r3, r2
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4b4d      	ldr	r3, [pc, #308]	; (8000dcc <ESPRxDecoder+0x7c8>)
 8000c98:	701a      	strb	r2, [r3, #0]
				 Data_bufferptr=3;
 8000c9a:	4b49      	ldr	r3, [pc, #292]	; (8000dc0 <ESPRxDecoder+0x7bc>)
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	701a      	strb	r2, [r3, #0]
 8000ca0:	f000 be31 	b.w	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==3)	 //,
 8000ca4:	4b46      	ldr	r3, [pc, #280]	; (8000dc0 <ESPRxDecoder+0x7bc>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b03      	cmp	r3, #3
 8000caa:	d104      	bne.n	8000cb6 <ESPRxDecoder+0x6b2>
			 {
				 Data_bufferptr=4;
 8000cac:	4b44      	ldr	r3, [pc, #272]	; (8000dc0 <ESPRxDecoder+0x7bc>)
 8000cae:	2204      	movs	r2, #4
 8000cb0:	701a      	strb	r2, [r3, #0]
 8000cb2:	f000 be28 	b.w	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==4)	 //process id
 8000cb6:	4b42      	ldr	r3, [pc, #264]	; (8000dc0 <ESPRxDecoder+0x7bc>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	d10c      	bne.n	8000cd8 <ESPRxDecoder+0x6d4>
			 {
				 Data_bufferptr=5;
 8000cbe:	4b40      	ldr	r3, [pc, #256]	; (8000dc0 <ESPRxDecoder+0x7bc>)
 8000cc0:	2205      	movs	r2, #5
 8000cc2:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[2] = DecToASCIIFun(Rxwifi_data);
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 ffb2 	bl	8001c30 <DecToASCIIFun>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	461a      	mov	r2, r3
 8000cd0:	4b3d      	ldr	r3, [pc, #244]	; (8000dc8 <ESPRxDecoder+0x7c4>)
 8000cd2:	709a      	strb	r2, [r3, #2]
 8000cd4:	f000 be17 	b.w	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==5)
 8000cd8:	4b39      	ldr	r3, [pc, #228]	; (8000dc0 <ESPRxDecoder+0x7bc>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b05      	cmp	r3, #5
 8000cde:	d10c      	bne.n	8000cfa <ESPRxDecoder+0x6f6>
			 {
				 Data_bufferptr=6;
 8000ce0:	4b37      	ldr	r3, [pc, #220]	; (8000dc0 <ESPRxDecoder+0x7bc>)
 8000ce2:	2206      	movs	r2, #6
 8000ce4:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[3] = DecToASCIIFun(Rxwifi_data);
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f000 ffa1 	bl	8001c30 <DecToASCIIFun>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b35      	ldr	r3, [pc, #212]	; (8000dc8 <ESPRxDecoder+0x7c4>)
 8000cf4:	70da      	strb	r2, [r3, #3]
 8000cf6:	f000 be06 	b.w	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==6)
 8000cfa:	4b31      	ldr	r3, [pc, #196]	; (8000dc0 <ESPRxDecoder+0x7bc>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b06      	cmp	r3, #6
 8000d00:	d10c      	bne.n	8000d1c <ESPRxDecoder+0x718>
			 {
				 Data_bufferptr=7;
 8000d02:	4b2f      	ldr	r3, [pc, #188]	; (8000dc0 <ESPRxDecoder+0x7bc>)
 8000d04:	2207      	movs	r2, #7
 8000d06:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[4] = DecToASCIIFun(Rxwifi_data);
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 ff90 	bl	8001c30 <DecToASCIIFun>
 8000d10:	4603      	mov	r3, r0
 8000d12:	461a      	mov	r2, r3
 8000d14:	4b2c      	ldr	r3, [pc, #176]	; (8000dc8 <ESPRxDecoder+0x7c4>)
 8000d16:	711a      	strb	r2, [r3, #4]
 8000d18:	f000 bdf5 	b.w	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==7)
 8000d1c:	4b28      	ldr	r3, [pc, #160]	; (8000dc0 <ESPRxDecoder+0x7bc>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b07      	cmp	r3, #7
 8000d22:	d10c      	bne.n	8000d3e <ESPRxDecoder+0x73a>
			 {
				 Data_bufferptr=8;
 8000d24:	4b26      	ldr	r3, [pc, #152]	; (8000dc0 <ESPRxDecoder+0x7bc>)
 8000d26:	2208      	movs	r2, #8
 8000d28:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[5] = DecToASCIIFun(Rxwifi_data);
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f000 ff7f 	bl	8001c30 <DecToASCIIFun>
 8000d32:	4603      	mov	r3, r0
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b24      	ldr	r3, [pc, #144]	; (8000dc8 <ESPRxDecoder+0x7c4>)
 8000d38:	715a      	strb	r2, [r3, #5]
 8000d3a:	f000 bde4 	b.w	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==8)
 8000d3e:	4b20      	ldr	r3, [pc, #128]	; (8000dc0 <ESPRxDecoder+0x7bc>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b08      	cmp	r3, #8
 8000d44:	d10c      	bne.n	8000d60 <ESPRxDecoder+0x75c>
			 {
				 Data_bufferptr=9;
 8000d46:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <ESPRxDecoder+0x7bc>)
 8000d48:	2209      	movs	r2, #9
 8000d4a:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[6] = DecToASCIIFun(Rxwifi_data);
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 ff6e 	bl	8001c30 <DecToASCIIFun>
 8000d54:	4603      	mov	r3, r0
 8000d56:	461a      	mov	r2, r3
 8000d58:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <ESPRxDecoder+0x7c4>)
 8000d5a:	719a      	strb	r2, [r3, #6]
 8000d5c:	f000 bdd3 	b.w	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==9)
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <ESPRxDecoder+0x7bc>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b09      	cmp	r3, #9
 8000d66:	d10c      	bne.n	8000d82 <ESPRxDecoder+0x77e>
			 {
				 Data_bufferptr=10;
 8000d68:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <ESPRxDecoder+0x7bc>)
 8000d6a:	220a      	movs	r2, #10
 8000d6c:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[7] = DecToASCIIFun(Rxwifi_data);
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 ff5d 	bl	8001c30 <DecToASCIIFun>
 8000d76:	4603      	mov	r3, r0
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <ESPRxDecoder+0x7c4>)
 8000d7c:	71da      	strb	r2, [r3, #7]
 8000d7e:	f000 bdc2 	b.w	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==10)
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <ESPRxDecoder+0x7bc>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b0a      	cmp	r3, #10
 8000d88:	d122      	bne.n	8000dd0 <ESPRxDecoder+0x7cc>
			 {
				 Data_bufferptr=11;
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <ESPRxDecoder+0x7bc>)
 8000d8c:	220b      	movs	r2, #11
 8000d8e:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[8] = DecToASCIIFun(Rxwifi_data);
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 ff4c 	bl	8001c30 <DecToASCIIFun>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <ESPRxDecoder+0x7c4>)
 8000d9e:	721a      	strb	r2, [r3, #8]
 8000da0:	f000 bdb1 	b.w	8001906 <ESPRxDecoder+0x1302>
 8000da4:	20000762 	.word	0x20000762
 8000da8:	20000664 	.word	0x20000664
 8000dac:	20000100 	.word	0x20000100
 8000db0:	200000d3 	.word	0x200000d3
 8000db4:	200000d4 	.word	0x200000d4
 8000db8:	2000024c 	.word	0x2000024c
 8000dbc:	20000120 	.word	0x20000120
 8000dc0:	200000d2 	.word	0x200000d2
 8000dc4:	200000d8 	.word	0x200000d8
 8000dc8:	2000008c 	.word	0x2000008c
 8000dcc:	200000e4 	.word	0x200000e4
			 }
			 else if(Data_bufferptr==11)
 8000dd0:	4b9c      	ldr	r3, [pc, #624]	; (8001044 <ESPRxDecoder+0xa40>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b0b      	cmp	r3, #11
 8000dd6:	d10c      	bne.n	8000df2 <ESPRxDecoder+0x7ee>
			 {
				 Data_bufferptr=12;
 8000dd8:	4b9a      	ldr	r3, [pc, #616]	; (8001044 <ESPRxDecoder+0xa40>)
 8000dda:	220c      	movs	r2, #12
 8000ddc:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[9] = DecToASCIIFun(Rxwifi_data);
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f000 ff25 	bl	8001c30 <DecToASCIIFun>
 8000de6:	4603      	mov	r3, r0
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b97      	ldr	r3, [pc, #604]	; (8001048 <ESPRxDecoder+0xa44>)
 8000dec:	725a      	strb	r2, [r3, #9]
 8000dee:	f000 bd8a 	b.w	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==12)
 8000df2:	4b94      	ldr	r3, [pc, #592]	; (8001044 <ESPRxDecoder+0xa40>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b0c      	cmp	r3, #12
 8000df8:	d10c      	bne.n	8000e14 <ESPRxDecoder+0x810>
			 {
				 Data_bufferptr=13;
 8000dfa:	4b92      	ldr	r3, [pc, #584]	; (8001044 <ESPRxDecoder+0xa40>)
 8000dfc:	220d      	movs	r2, #13
 8000dfe:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[10] = DecToASCIIFun(Rxwifi_data);
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 ff14 	bl	8001c30 <DecToASCIIFun>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	4b8e      	ldr	r3, [pc, #568]	; (8001048 <ESPRxDecoder+0xa44>)
 8000e0e:	729a      	strb	r2, [r3, #10]
 8000e10:	f000 bd79 	b.w	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==13)
 8000e14:	4b8b      	ldr	r3, [pc, #556]	; (8001044 <ESPRxDecoder+0xa40>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b0d      	cmp	r3, #13
 8000e1a:	d160      	bne.n	8000ede <ESPRxDecoder+0x8da>
			 {
				 Data_bufferptr=14;
 8000e1c:	4b89      	ldr	r3, [pc, #548]	; (8001044 <ESPRxDecoder+0xa40>)
 8000e1e:	220e      	movs	r2, #14
 8000e20:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[11] = DecToASCIIFun(Rxwifi_data);
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f000 ff03 	bl	8001c30 <DecToASCIIFun>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b86      	ldr	r3, [pc, #536]	; (8001048 <ESPRxDecoder+0xa44>)
 8000e30:	72da      	strb	r2, [r3, #11]
				 ProcessId_Http_Msb = Uart_rx_buffer[5]+ (Uart_rx_buffer[4]*10)+(Uart_rx_buffer[3]*100)+(Uart_rx_buffer[2]*1000);
 8000e32:	4b85      	ldr	r3, [pc, #532]	; (8001048 <ESPRxDecoder+0xa44>)
 8000e34:	795b      	ldrb	r3, [r3, #5]
 8000e36:	b29a      	uxth	r2, r3
 8000e38:	4b83      	ldr	r3, [pc, #524]	; (8001048 <ESPRxDecoder+0xa44>)
 8000e3a:	78db      	ldrb	r3, [r3, #3]
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	4619      	mov	r1, r3
 8000e40:	0089      	lsls	r1, r1, #2
 8000e42:	440b      	add	r3, r1
 8000e44:	4619      	mov	r1, r3
 8000e46:	0088      	lsls	r0, r1, #2
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	440b      	add	r3, r1
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	b299      	uxth	r1, r3
 8000e52:	4b7d      	ldr	r3, [pc, #500]	; (8001048 <ESPRxDecoder+0xa44>)
 8000e54:	791b      	ldrb	r3, [r3, #4]
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	4618      	mov	r0, r3
 8000e5a:	0080      	lsls	r0, r0, #2
 8000e5c:	4403      	add	r3, r0
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	440b      	add	r3, r1
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	4413      	add	r3, r2
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	4b77      	ldr	r3, [pc, #476]	; (8001048 <ESPRxDecoder+0xa44>)
 8000e6c:	789b      	ldrb	r3, [r3, #2]
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	4619      	mov	r1, r3
 8000e72:	0149      	lsls	r1, r1, #5
 8000e74:	1ac9      	subs	r1, r1, r3
 8000e76:	0089      	lsls	r1, r1, #2
 8000e78:	440b      	add	r3, r1
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	4413      	add	r3, r2
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	4b72      	ldr	r3, [pc, #456]	; (800104c <ESPRxDecoder+0xa48>)
 8000e84:	801a      	strh	r2, [r3, #0]
				 ProcessId_Http_LSB = Uart_rx_buffer[9]+(Uart_rx_buffer[8]*10)+(Uart_rx_buffer[7]*100)+(Uart_rx_buffer[6]*1000);
 8000e86:	4b70      	ldr	r3, [pc, #448]	; (8001048 <ESPRxDecoder+0xa44>)
 8000e88:	7a5b      	ldrb	r3, [r3, #9]
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	4b6e      	ldr	r3, [pc, #440]	; (8001048 <ESPRxDecoder+0xa44>)
 8000e8e:	79db      	ldrb	r3, [r3, #7]
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	4619      	mov	r1, r3
 8000e94:	0089      	lsls	r1, r1, #2
 8000e96:	440b      	add	r3, r1
 8000e98:	4619      	mov	r1, r3
 8000e9a:	0088      	lsls	r0, r1, #2
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	440b      	add	r3, r1
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	b299      	uxth	r1, r3
 8000ea6:	4b68      	ldr	r3, [pc, #416]	; (8001048 <ESPRxDecoder+0xa44>)
 8000ea8:	7a1b      	ldrb	r3, [r3, #8]
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	4618      	mov	r0, r3
 8000eae:	0080      	lsls	r0, r0, #2
 8000eb0:	4403      	add	r3, r0
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	440b      	add	r3, r1
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	4413      	add	r3, r2
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	4b62      	ldr	r3, [pc, #392]	; (8001048 <ESPRxDecoder+0xa44>)
 8000ec0:	799b      	ldrb	r3, [r3, #6]
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	0149      	lsls	r1, r1, #5
 8000ec8:	1ac9      	subs	r1, r1, r3
 8000eca:	0089      	lsls	r1, r1, #2
 8000ecc:	440b      	add	r3, r1
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	4413      	add	r3, r2
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	4b5e      	ldr	r3, [pc, #376]	; (8001050 <ESPRxDecoder+0xa4c>)
 8000ed8:	801a      	strh	r2, [r3, #0]
 8000eda:	f000 bd14 	b.w	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==14)	//,
 8000ede:	4b59      	ldr	r3, [pc, #356]	; (8001044 <ESPRxDecoder+0xa40>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b0e      	cmp	r3, #14
 8000ee4:	d104      	bne.n	8000ef0 <ESPRxDecoder+0x8ec>
			 {
				 Data_bufferptr=15;
 8000ee6:	4b57      	ldr	r3, [pc, #348]	; (8001044 <ESPRxDecoder+0xa40>)
 8000ee8:	220f      	movs	r2, #15
 8000eea:	701a      	strb	r2, [r3, #0]
 8000eec:	f000 bd0b 	b.w	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==15)   //Rising_Temperature_High_Http
 8000ef0:	4b54      	ldr	r3, [pc, #336]	; (8001044 <ESPRxDecoder+0xa40>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b0f      	cmp	r3, #15
 8000ef6:	d10c      	bne.n	8000f12 <ESPRxDecoder+0x90e>
			 {
				 Data_bufferptr=16;
 8000ef8:	4b52      	ldr	r3, [pc, #328]	; (8001044 <ESPRxDecoder+0xa40>)
 8000efa:	2210      	movs	r2, #16
 8000efc:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[12] = DecToASCIIFun(Rxwifi_data);
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f000 fe95 	bl	8001c30 <DecToASCIIFun>
 8000f06:	4603      	mov	r3, r0
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b4f      	ldr	r3, [pc, #316]	; (8001048 <ESPRxDecoder+0xa44>)
 8000f0c:	731a      	strb	r2, [r3, #12]
 8000f0e:	f000 bcfa 	b.w	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==16)
 8000f12:	4b4c      	ldr	r3, [pc, #304]	; (8001044 <ESPRxDecoder+0xa40>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b10      	cmp	r3, #16
 8000f18:	d10c      	bne.n	8000f34 <ESPRxDecoder+0x930>
			 {
				 Data_bufferptr=17;
 8000f1a:	4b4a      	ldr	r3, [pc, #296]	; (8001044 <ESPRxDecoder+0xa40>)
 8000f1c:	2211      	movs	r2, #17
 8000f1e:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[13] = DecToASCIIFun(Rxwifi_data);
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 fe84 	bl	8001c30 <DecToASCIIFun>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	4b46      	ldr	r3, [pc, #280]	; (8001048 <ESPRxDecoder+0xa44>)
 8000f2e:	735a      	strb	r2, [r3, #13]
 8000f30:	f000 bce9 	b.w	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==17)
 8000f34:	4b43      	ldr	r3, [pc, #268]	; (8001044 <ESPRxDecoder+0xa40>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b11      	cmp	r3, #17
 8000f3a:	d10c      	bne.n	8000f56 <ESPRxDecoder+0x952>
			 {
				 Data_bufferptr=18;
 8000f3c:	4b41      	ldr	r3, [pc, #260]	; (8001044 <ESPRxDecoder+0xa40>)
 8000f3e:	2212      	movs	r2, #18
 8000f40:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[14] = DecToASCIIFun(Rxwifi_data);
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f000 fe73 	bl	8001c30 <DecToASCIIFun>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b3e      	ldr	r3, [pc, #248]	; (8001048 <ESPRxDecoder+0xa44>)
 8000f50:	739a      	strb	r2, [r3, #14]
 8000f52:	f000 bcd8 	b.w	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==18)
 8000f56:	4b3b      	ldr	r3, [pc, #236]	; (8001044 <ESPRxDecoder+0xa40>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b12      	cmp	r3, #18
 8000f5c:	d136      	bne.n	8000fcc <ESPRxDecoder+0x9c8>
			 {
				 Data_bufferptr=19;
 8000f5e:	4b39      	ldr	r3, [pc, #228]	; (8001044 <ESPRxDecoder+0xa40>)
 8000f60:	2213      	movs	r2, #19
 8000f62:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[15] = DecToASCIIFun(Rxwifi_data);
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 fe62 	bl	8001c30 <DecToASCIIFun>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4b35      	ldr	r3, [pc, #212]	; (8001048 <ESPRxDecoder+0xa44>)
 8000f72:	73da      	strb	r2, [r3, #15]
				 R_Temperature_High_Http = Uart_rx_buffer[15]+ (Uart_rx_buffer[14]*10)+(Uart_rx_buffer[13]*100)+(Uart_rx_buffer[12]*1000);
 8000f74:	4b34      	ldr	r3, [pc, #208]	; (8001048 <ESPRxDecoder+0xa44>)
 8000f76:	7bdb      	ldrb	r3, [r3, #15]
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	4b33      	ldr	r3, [pc, #204]	; (8001048 <ESPRxDecoder+0xa44>)
 8000f7c:	7b5b      	ldrb	r3, [r3, #13]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	4619      	mov	r1, r3
 8000f82:	0089      	lsls	r1, r1, #2
 8000f84:	440b      	add	r3, r1
 8000f86:	4619      	mov	r1, r3
 8000f88:	0088      	lsls	r0, r1, #2
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	440b      	add	r3, r1
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	b299      	uxth	r1, r3
 8000f94:	4b2c      	ldr	r3, [pc, #176]	; (8001048 <ESPRxDecoder+0xa44>)
 8000f96:	7b9b      	ldrb	r3, [r3, #14]
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	0080      	lsls	r0, r0, #2
 8000f9e:	4403      	add	r3, r0
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	440b      	add	r3, r1
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	4413      	add	r3, r2
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	4b26      	ldr	r3, [pc, #152]	; (8001048 <ESPRxDecoder+0xa44>)
 8000fae:	7b1b      	ldrb	r3, [r3, #12]
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	0149      	lsls	r1, r1, #5
 8000fb6:	1ac9      	subs	r1, r1, r3
 8000fb8:	0089      	lsls	r1, r1, #2
 8000fba:	440b      	add	r3, r1
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	4413      	add	r3, r2
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	4b23      	ldr	r3, [pc, #140]	; (8001054 <ESPRxDecoder+0xa50>)
 8000fc6:	801a      	strh	r2, [r3, #0]
 8000fc8:	f000 bc9d 	b.w	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==19)	//,
 8000fcc:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <ESPRxDecoder+0xa40>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b13      	cmp	r3, #19
 8000fd2:	d104      	bne.n	8000fde <ESPRxDecoder+0x9da>
			 {
				 Data_bufferptr=20;
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <ESPRxDecoder+0xa40>)
 8000fd6:	2214      	movs	r2, #20
 8000fd8:	701a      	strb	r2, [r3, #0]
 8000fda:	f000 bc94 	b.w	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==20)   //Temperature_High_Http
 8000fde:	4b19      	ldr	r3, [pc, #100]	; (8001044 <ESPRxDecoder+0xa40>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b14      	cmp	r3, #20
 8000fe4:	d10c      	bne.n	8001000 <ESPRxDecoder+0x9fc>
			 {
				 Data_bufferptr=21;
 8000fe6:	4b17      	ldr	r3, [pc, #92]	; (8001044 <ESPRxDecoder+0xa40>)
 8000fe8:	2215      	movs	r2, #21
 8000fea:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[16] = DecToASCIIFun(Rxwifi_data);
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 fe1e 	bl	8001c30 <DecToASCIIFun>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	4b13      	ldr	r3, [pc, #76]	; (8001048 <ESPRxDecoder+0xa44>)
 8000ffa:	741a      	strb	r2, [r3, #16]
 8000ffc:	f000 bc83 	b.w	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==21)
 8001000:	4b10      	ldr	r3, [pc, #64]	; (8001044 <ESPRxDecoder+0xa40>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b15      	cmp	r3, #21
 8001006:	d10c      	bne.n	8001022 <ESPRxDecoder+0xa1e>
			 {
				 Data_bufferptr=22;
 8001008:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <ESPRxDecoder+0xa40>)
 800100a:	2216      	movs	r2, #22
 800100c:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[17] = DecToASCIIFun(Rxwifi_data);
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	4618      	mov	r0, r3
 8001012:	f000 fe0d 	bl	8001c30 <DecToASCIIFun>
 8001016:	4603      	mov	r3, r0
 8001018:	461a      	mov	r2, r3
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <ESPRxDecoder+0xa44>)
 800101c:	745a      	strb	r2, [r3, #17]
 800101e:	f000 bc72 	b.w	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==22)
 8001022:	4b08      	ldr	r3, [pc, #32]	; (8001044 <ESPRxDecoder+0xa40>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b16      	cmp	r3, #22
 8001028:	d116      	bne.n	8001058 <ESPRxDecoder+0xa54>
			 {
				 Data_bufferptr=23;
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <ESPRxDecoder+0xa40>)
 800102c:	2217      	movs	r2, #23
 800102e:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[18] = DecToASCIIFun(Rxwifi_data);
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	4618      	mov	r0, r3
 8001034:	f000 fdfc 	bl	8001c30 <DecToASCIIFun>
 8001038:	4603      	mov	r3, r0
 800103a:	461a      	mov	r2, r3
 800103c:	4b02      	ldr	r3, [pc, #8]	; (8001048 <ESPRxDecoder+0xa44>)
 800103e:	749a      	strb	r2, [r3, #18]
 8001040:	f000 bc61 	b.w	8001906 <ESPRxDecoder+0x1302>
 8001044:	200000d2 	.word	0x200000d2
 8001048:	2000008c 	.word	0x2000008c
 800104c:	200000e6 	.word	0x200000e6
 8001050:	200000e8 	.word	0x200000e8
 8001054:	200000ea 	.word	0x200000ea
			 }
			 else if(Data_bufferptr==23)
 8001058:	4b9c      	ldr	r3, [pc, #624]	; (80012cc <ESPRxDecoder+0xcc8>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b17      	cmp	r3, #23
 800105e:	d136      	bne.n	80010ce <ESPRxDecoder+0xaca>
			 {
				 Data_bufferptr=24;
 8001060:	4b9a      	ldr	r3, [pc, #616]	; (80012cc <ESPRxDecoder+0xcc8>)
 8001062:	2218      	movs	r2, #24
 8001064:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[19] = DecToASCIIFun(Rxwifi_data);
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	4618      	mov	r0, r3
 800106a:	f000 fde1 	bl	8001c30 <DecToASCIIFun>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	4b97      	ldr	r3, [pc, #604]	; (80012d0 <ESPRxDecoder+0xccc>)
 8001074:	74da      	strb	r2, [r3, #19]
				 Temperature_High_Http = Uart_rx_buffer[19]+ (Uart_rx_buffer[18]*10)+(Uart_rx_buffer[17]*100)+(Uart_rx_buffer[16]*1000);
 8001076:	4b96      	ldr	r3, [pc, #600]	; (80012d0 <ESPRxDecoder+0xccc>)
 8001078:	7cdb      	ldrb	r3, [r3, #19]
 800107a:	b29a      	uxth	r2, r3
 800107c:	4b94      	ldr	r3, [pc, #592]	; (80012d0 <ESPRxDecoder+0xccc>)
 800107e:	7c5b      	ldrb	r3, [r3, #17]
 8001080:	b29b      	uxth	r3, r3
 8001082:	4619      	mov	r1, r3
 8001084:	0089      	lsls	r1, r1, #2
 8001086:	440b      	add	r3, r1
 8001088:	4619      	mov	r1, r3
 800108a:	0088      	lsls	r0, r1, #2
 800108c:	4619      	mov	r1, r3
 800108e:	4603      	mov	r3, r0
 8001090:	440b      	add	r3, r1
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	b299      	uxth	r1, r3
 8001096:	4b8e      	ldr	r3, [pc, #568]	; (80012d0 <ESPRxDecoder+0xccc>)
 8001098:	7c9b      	ldrb	r3, [r3, #18]
 800109a:	b29b      	uxth	r3, r3
 800109c:	4618      	mov	r0, r3
 800109e:	0080      	lsls	r0, r0, #2
 80010a0:	4403      	add	r3, r0
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	440b      	add	r3, r1
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	4413      	add	r3, r2
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	4b88      	ldr	r3, [pc, #544]	; (80012d0 <ESPRxDecoder+0xccc>)
 80010b0:	7c1b      	ldrb	r3, [r3, #16]
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	4619      	mov	r1, r3
 80010b6:	0149      	lsls	r1, r1, #5
 80010b8:	1ac9      	subs	r1, r1, r3
 80010ba:	0089      	lsls	r1, r1, #2
 80010bc:	440b      	add	r3, r1
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	4413      	add	r3, r2
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	4b83      	ldr	r3, [pc, #524]	; (80012d4 <ESPRxDecoder+0xcd0>)
 80010c8:	801a      	strh	r2, [r3, #0]
 80010ca:	f000 bc1c 	b.w	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==24)   //,
 80010ce:	4b7f      	ldr	r3, [pc, #508]	; (80012cc <ESPRxDecoder+0xcc8>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b18      	cmp	r3, #24
 80010d4:	d104      	bne.n	80010e0 <ESPRxDecoder+0xadc>
			 {
				 Data_bufferptr=25;
 80010d6:	4b7d      	ldr	r3, [pc, #500]	; (80012cc <ESPRxDecoder+0xcc8>)
 80010d8:	2219      	movs	r2, #25
 80010da:	701a      	strb	r2, [r3, #0]
 80010dc:	f000 bc13 	b.w	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==25)  //Temperature_Low_Http
 80010e0:	4b7a      	ldr	r3, [pc, #488]	; (80012cc <ESPRxDecoder+0xcc8>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b19      	cmp	r3, #25
 80010e6:	d10c      	bne.n	8001102 <ESPRxDecoder+0xafe>
			 {
				 Data_bufferptr=26;
 80010e8:	4b78      	ldr	r3, [pc, #480]	; (80012cc <ESPRxDecoder+0xcc8>)
 80010ea:	221a      	movs	r2, #26
 80010ec:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[20] = DecToASCIIFun(Rxwifi_data);
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 fd9d 	bl	8001c30 <DecToASCIIFun>
 80010f6:	4603      	mov	r3, r0
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b75      	ldr	r3, [pc, #468]	; (80012d0 <ESPRxDecoder+0xccc>)
 80010fc:	751a      	strb	r2, [r3, #20]
 80010fe:	f000 bc02 	b.w	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==26)
 8001102:	4b72      	ldr	r3, [pc, #456]	; (80012cc <ESPRxDecoder+0xcc8>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b1a      	cmp	r3, #26
 8001108:	d10b      	bne.n	8001122 <ESPRxDecoder+0xb1e>
			 {
				 Data_bufferptr=27;
 800110a:	4b70      	ldr	r3, [pc, #448]	; (80012cc <ESPRxDecoder+0xcc8>)
 800110c:	221b      	movs	r2, #27
 800110e:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[21] = DecToASCIIFun(Rxwifi_data);
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	4618      	mov	r0, r3
 8001114:	f000 fd8c 	bl	8001c30 <DecToASCIIFun>
 8001118:	4603      	mov	r3, r0
 800111a:	461a      	mov	r2, r3
 800111c:	4b6c      	ldr	r3, [pc, #432]	; (80012d0 <ESPRxDecoder+0xccc>)
 800111e:	755a      	strb	r2, [r3, #21]
 8001120:	e3f1      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==27)
 8001122:	4b6a      	ldr	r3, [pc, #424]	; (80012cc <ESPRxDecoder+0xcc8>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b1b      	cmp	r3, #27
 8001128:	d10b      	bne.n	8001142 <ESPRxDecoder+0xb3e>
			 {
				 Data_bufferptr=28;
 800112a:	4b68      	ldr	r3, [pc, #416]	; (80012cc <ESPRxDecoder+0xcc8>)
 800112c:	221c      	movs	r2, #28
 800112e:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[22] = DecToASCIIFun(Rxwifi_data);
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	4618      	mov	r0, r3
 8001134:	f000 fd7c 	bl	8001c30 <DecToASCIIFun>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	4b64      	ldr	r3, [pc, #400]	; (80012d0 <ESPRxDecoder+0xccc>)
 800113e:	759a      	strb	r2, [r3, #22]
 8001140:	e3e1      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==28)
 8001142:	4b62      	ldr	r3, [pc, #392]	; (80012cc <ESPRxDecoder+0xcc8>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b1c      	cmp	r3, #28
 8001148:	d135      	bne.n	80011b6 <ESPRxDecoder+0xbb2>
			 {
				 Data_bufferptr=29;
 800114a:	4b60      	ldr	r3, [pc, #384]	; (80012cc <ESPRxDecoder+0xcc8>)
 800114c:	221d      	movs	r2, #29
 800114e:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[23] = DecToASCIIFun(Rxwifi_data);
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	4618      	mov	r0, r3
 8001154:	f000 fd6c 	bl	8001c30 <DecToASCIIFun>
 8001158:	4603      	mov	r3, r0
 800115a:	461a      	mov	r2, r3
 800115c:	4b5c      	ldr	r3, [pc, #368]	; (80012d0 <ESPRxDecoder+0xccc>)
 800115e:	75da      	strb	r2, [r3, #23]
				 R_Temperature_Low_Http = Uart_rx_buffer[23]+ (Uart_rx_buffer[22]*10)+(Uart_rx_buffer[21]*100)+(Uart_rx_buffer[20]*1000);
 8001160:	4b5b      	ldr	r3, [pc, #364]	; (80012d0 <ESPRxDecoder+0xccc>)
 8001162:	7ddb      	ldrb	r3, [r3, #23]
 8001164:	b29a      	uxth	r2, r3
 8001166:	4b5a      	ldr	r3, [pc, #360]	; (80012d0 <ESPRxDecoder+0xccc>)
 8001168:	7d5b      	ldrb	r3, [r3, #21]
 800116a:	b29b      	uxth	r3, r3
 800116c:	4619      	mov	r1, r3
 800116e:	0089      	lsls	r1, r1, #2
 8001170:	440b      	add	r3, r1
 8001172:	4619      	mov	r1, r3
 8001174:	0088      	lsls	r0, r1, #2
 8001176:	4619      	mov	r1, r3
 8001178:	4603      	mov	r3, r0
 800117a:	440b      	add	r3, r1
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	b299      	uxth	r1, r3
 8001180:	4b53      	ldr	r3, [pc, #332]	; (80012d0 <ESPRxDecoder+0xccc>)
 8001182:	7d9b      	ldrb	r3, [r3, #22]
 8001184:	b29b      	uxth	r3, r3
 8001186:	4618      	mov	r0, r3
 8001188:	0080      	lsls	r0, r0, #2
 800118a:	4403      	add	r3, r0
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	b29b      	uxth	r3, r3
 8001190:	440b      	add	r3, r1
 8001192:	b29b      	uxth	r3, r3
 8001194:	4413      	add	r3, r2
 8001196:	b29a      	uxth	r2, r3
 8001198:	4b4d      	ldr	r3, [pc, #308]	; (80012d0 <ESPRxDecoder+0xccc>)
 800119a:	7d1b      	ldrb	r3, [r3, #20]
 800119c:	b29b      	uxth	r3, r3
 800119e:	4619      	mov	r1, r3
 80011a0:	0149      	lsls	r1, r1, #5
 80011a2:	1ac9      	subs	r1, r1, r3
 80011a4:	0089      	lsls	r1, r1, #2
 80011a6:	440b      	add	r3, r1
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	4413      	add	r3, r2
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	4b49      	ldr	r3, [pc, #292]	; (80012d8 <ESPRxDecoder+0xcd4>)
 80011b2:	801a      	strh	r2, [r3, #0]
 80011b4:	e3a7      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==29)  //,
 80011b6:	4b45      	ldr	r3, [pc, #276]	; (80012cc <ESPRxDecoder+0xcc8>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b1d      	cmp	r3, #29
 80011bc:	d103      	bne.n	80011c6 <ESPRxDecoder+0xbc2>
			 {
				 Data_bufferptr=30;
 80011be:	4b43      	ldr	r3, [pc, #268]	; (80012cc <ESPRxDecoder+0xcc8>)
 80011c0:	221e      	movs	r2, #30
 80011c2:	701a      	strb	r2, [r3, #0]
 80011c4:	e39f      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			else if(Data_bufferptr==30)  //Temperature_Low_Http
 80011c6:	4b41      	ldr	r3, [pc, #260]	; (80012cc <ESPRxDecoder+0xcc8>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b1e      	cmp	r3, #30
 80011cc:	d10b      	bne.n	80011e6 <ESPRxDecoder+0xbe2>
			 {
				 Data_bufferptr=32;
 80011ce:	4b3f      	ldr	r3, [pc, #252]	; (80012cc <ESPRxDecoder+0xcc8>)
 80011d0:	2220      	movs	r2, #32
 80011d2:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[24] = DecToASCIIFun(Rxwifi_data);
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 fd2a 	bl	8001c30 <DecToASCIIFun>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
 80011e0:	4b3b      	ldr	r3, [pc, #236]	; (80012d0 <ESPRxDecoder+0xccc>)
 80011e2:	761a      	strb	r2, [r3, #24]
 80011e4:	e38f      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==32)
 80011e6:	4b39      	ldr	r3, [pc, #228]	; (80012cc <ESPRxDecoder+0xcc8>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b20      	cmp	r3, #32
 80011ec:	d10b      	bne.n	8001206 <ESPRxDecoder+0xc02>
			 {
				 Data_bufferptr=33;
 80011ee:	4b37      	ldr	r3, [pc, #220]	; (80012cc <ESPRxDecoder+0xcc8>)
 80011f0:	2221      	movs	r2, #33	; 0x21
 80011f2:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[25] = DecToASCIIFun(Rxwifi_data);
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 fd1a 	bl	8001c30 <DecToASCIIFun>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	4b33      	ldr	r3, [pc, #204]	; (80012d0 <ESPRxDecoder+0xccc>)
 8001202:	765a      	strb	r2, [r3, #25]
 8001204:	e37f      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==33)
 8001206:	4b31      	ldr	r3, [pc, #196]	; (80012cc <ESPRxDecoder+0xcc8>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b21      	cmp	r3, #33	; 0x21
 800120c:	d10b      	bne.n	8001226 <ESPRxDecoder+0xc22>
			 {
				 Data_bufferptr=34;
 800120e:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <ESPRxDecoder+0xcc8>)
 8001210:	2222      	movs	r2, #34	; 0x22
 8001212:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[26] = DecToASCIIFun(Rxwifi_data);
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	4618      	mov	r0, r3
 8001218:	f000 fd0a 	bl	8001c30 <DecToASCIIFun>
 800121c:	4603      	mov	r3, r0
 800121e:	461a      	mov	r2, r3
 8001220:	4b2b      	ldr	r3, [pc, #172]	; (80012d0 <ESPRxDecoder+0xccc>)
 8001222:	769a      	strb	r2, [r3, #26]
 8001224:	e36f      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==34)
 8001226:	4b29      	ldr	r3, [pc, #164]	; (80012cc <ESPRxDecoder+0xcc8>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b22      	cmp	r3, #34	; 0x22
 800122c:	d135      	bne.n	800129a <ESPRxDecoder+0xc96>
			 {
				 Data_bufferptr=35;
 800122e:	4b27      	ldr	r3, [pc, #156]	; (80012cc <ESPRxDecoder+0xcc8>)
 8001230:	2223      	movs	r2, #35	; 0x23
 8001232:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[27] = DecToASCIIFun(Rxwifi_data);
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	4618      	mov	r0, r3
 8001238:	f000 fcfa 	bl	8001c30 <DecToASCIIFun>
 800123c:	4603      	mov	r3, r0
 800123e:	461a      	mov	r2, r3
 8001240:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <ESPRxDecoder+0xccc>)
 8001242:	76da      	strb	r2, [r3, #27]
				 Temperature_Low_Http = Uart_rx_buffer[27]+ (Uart_rx_buffer[26]*10)+(Uart_rx_buffer[25]*100)+(Uart_rx_buffer[24]*1000);
 8001244:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <ESPRxDecoder+0xccc>)
 8001246:	7edb      	ldrb	r3, [r3, #27]
 8001248:	b29a      	uxth	r2, r3
 800124a:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <ESPRxDecoder+0xccc>)
 800124c:	7e5b      	ldrb	r3, [r3, #25]
 800124e:	b29b      	uxth	r3, r3
 8001250:	4619      	mov	r1, r3
 8001252:	0089      	lsls	r1, r1, #2
 8001254:	440b      	add	r3, r1
 8001256:	4619      	mov	r1, r3
 8001258:	0088      	lsls	r0, r1, #2
 800125a:	4619      	mov	r1, r3
 800125c:	4603      	mov	r3, r0
 800125e:	440b      	add	r3, r1
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	b299      	uxth	r1, r3
 8001264:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <ESPRxDecoder+0xccc>)
 8001266:	7e9b      	ldrb	r3, [r3, #26]
 8001268:	b29b      	uxth	r3, r3
 800126a:	4618      	mov	r0, r3
 800126c:	0080      	lsls	r0, r0, #2
 800126e:	4403      	add	r3, r0
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	b29b      	uxth	r3, r3
 8001274:	440b      	add	r3, r1
 8001276:	b29b      	uxth	r3, r3
 8001278:	4413      	add	r3, r2
 800127a:	b29a      	uxth	r2, r3
 800127c:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <ESPRxDecoder+0xccc>)
 800127e:	7e1b      	ldrb	r3, [r3, #24]
 8001280:	b29b      	uxth	r3, r3
 8001282:	4619      	mov	r1, r3
 8001284:	0149      	lsls	r1, r1, #5
 8001286:	1ac9      	subs	r1, r1, r3
 8001288:	0089      	lsls	r1, r1, #2
 800128a:	440b      	add	r3, r1
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	b29b      	uxth	r3, r3
 8001290:	4413      	add	r3, r2
 8001292:	b29a      	uxth	r2, r3
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <ESPRxDecoder+0xcd8>)
 8001296:	801a      	strh	r2, [r3, #0]
 8001298:	e335      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==35)  //,
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <ESPRxDecoder+0xcc8>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b23      	cmp	r3, #35	; 0x23
 80012a0:	d103      	bne.n	80012aa <ESPRxDecoder+0xca6>
			 {
				 Data_bufferptr=36;
 80012a2:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <ESPRxDecoder+0xcc8>)
 80012a4:	2224      	movs	r2, #36	; 0x24
 80012a6:	701a      	strb	r2, [r3, #0]
 80012a8:	e32d      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==36)  //R_seq1_hour
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <ESPRxDecoder+0xcc8>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b24      	cmp	r3, #36	; 0x24
 80012b0:	d116      	bne.n	80012e0 <ESPRxDecoder+0xcdc>
			 {
				 Data_bufferptr=37;
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <ESPRxDecoder+0xcc8>)
 80012b4:	2225      	movs	r2, #37	; 0x25
 80012b6:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[28] = DecToASCIIFun(Rxwifi_data);
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 fcb8 	bl	8001c30 <DecToASCIIFun>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b02      	ldr	r3, [pc, #8]	; (80012d0 <ESPRxDecoder+0xccc>)
 80012c6:	771a      	strb	r2, [r3, #28]
 80012c8:	e31d      	b.n	8001906 <ESPRxDecoder+0x1302>
 80012ca:	bf00      	nop
 80012cc:	200000d2 	.word	0x200000d2
 80012d0:	2000008c 	.word	0x2000008c
 80012d4:	200000ec 	.word	0x200000ec
 80012d8:	200000ee 	.word	0x200000ee
 80012dc:	200000f0 	.word	0x200000f0
			 }
			 else if(Data_bufferptr==37)
 80012e0:	4bab      	ldr	r3, [pc, #684]	; (8001590 <ESPRxDecoder+0xf8c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b25      	cmp	r3, #37	; 0x25
 80012e6:	d118      	bne.n	800131a <ESPRxDecoder+0xd16>
			 {
				 Data_bufferptr=38;
 80012e8:	4ba9      	ldr	r3, [pc, #676]	; (8001590 <ESPRxDecoder+0xf8c>)
 80012ea:	2226      	movs	r2, #38	; 0x26
 80012ec:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[29] = DecToASCIIFun(Rxwifi_data);
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 fc9d 	bl	8001c30 <DecToASCIIFun>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	4ba6      	ldr	r3, [pc, #664]	; (8001594 <ESPRxDecoder+0xf90>)
 80012fc:	775a      	strb	r2, [r3, #29]
				 R_Sequence1_hour_http = Uart_rx_buffer[29]+(Uart_rx_buffer[28]*10);
 80012fe:	4ba5      	ldr	r3, [pc, #660]	; (8001594 <ESPRxDecoder+0xf90>)
 8001300:	7f5a      	ldrb	r2, [r3, #29]
 8001302:	4ba4      	ldr	r3, [pc, #656]	; (8001594 <ESPRxDecoder+0xf90>)
 8001304:	7f1b      	ldrb	r3, [r3, #28]
 8001306:	4619      	mov	r1, r3
 8001308:	0089      	lsls	r1, r1, #2
 800130a:	440b      	add	r3, r1
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	b2db      	uxtb	r3, r3
 8001310:	4413      	add	r3, r2
 8001312:	b2da      	uxtb	r2, r3
 8001314:	4ba0      	ldr	r3, [pc, #640]	; (8001598 <ESPRxDecoder+0xf94>)
 8001316:	701a      	strb	r2, [r3, #0]
 8001318:	e2f5      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==38)  //R_seq1_min
 800131a:	4b9d      	ldr	r3, [pc, #628]	; (8001590 <ESPRxDecoder+0xf8c>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b26      	cmp	r3, #38	; 0x26
 8001320:	d10b      	bne.n	800133a <ESPRxDecoder+0xd36>
			 {
				 Data_bufferptr=39;
 8001322:	4b9b      	ldr	r3, [pc, #620]	; (8001590 <ESPRxDecoder+0xf8c>)
 8001324:	2227      	movs	r2, #39	; 0x27
 8001326:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[30] = DecToASCIIFun(Rxwifi_data);
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	4618      	mov	r0, r3
 800132c:	f000 fc80 	bl	8001c30 <DecToASCIIFun>
 8001330:	4603      	mov	r3, r0
 8001332:	461a      	mov	r2, r3
 8001334:	4b97      	ldr	r3, [pc, #604]	; (8001594 <ESPRxDecoder+0xf90>)
 8001336:	779a      	strb	r2, [r3, #30]
 8001338:	e2e5      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==39)
 800133a:	4b95      	ldr	r3, [pc, #596]	; (8001590 <ESPRxDecoder+0xf8c>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b27      	cmp	r3, #39	; 0x27
 8001340:	d118      	bne.n	8001374 <ESPRxDecoder+0xd70>
			 {
				 Data_bufferptr=40;
 8001342:	4b93      	ldr	r3, [pc, #588]	; (8001590 <ESPRxDecoder+0xf8c>)
 8001344:	2228      	movs	r2, #40	; 0x28
 8001346:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[31] = DecToASCIIFun(Rxwifi_data);
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	4618      	mov	r0, r3
 800134c:	f000 fc70 	bl	8001c30 <DecToASCIIFun>
 8001350:	4603      	mov	r3, r0
 8001352:	461a      	mov	r2, r3
 8001354:	4b8f      	ldr	r3, [pc, #572]	; (8001594 <ESPRxDecoder+0xf90>)
 8001356:	77da      	strb	r2, [r3, #31]
				 R_Sequence1_minute_http = Uart_rx_buffer[31]+(Uart_rx_buffer[30]*10);
 8001358:	4b8e      	ldr	r3, [pc, #568]	; (8001594 <ESPRxDecoder+0xf90>)
 800135a:	7fda      	ldrb	r2, [r3, #31]
 800135c:	4b8d      	ldr	r3, [pc, #564]	; (8001594 <ESPRxDecoder+0xf90>)
 800135e:	7f9b      	ldrb	r3, [r3, #30]
 8001360:	4619      	mov	r1, r3
 8001362:	0089      	lsls	r1, r1, #2
 8001364:	440b      	add	r3, r1
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	b2db      	uxtb	r3, r3
 800136a:	4413      	add	r3, r2
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4b8b      	ldr	r3, [pc, #556]	; (800159c <ESPRxDecoder+0xf98>)
 8001370:	701a      	strb	r2, [r3, #0]
 8001372:	e2c8      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==40)  //,
 8001374:	4b86      	ldr	r3, [pc, #536]	; (8001590 <ESPRxDecoder+0xf8c>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b28      	cmp	r3, #40	; 0x28
 800137a:	d103      	bne.n	8001384 <ESPRxDecoder+0xd80>
			 {
				 Data_bufferptr=41;
 800137c:	4b84      	ldr	r3, [pc, #528]	; (8001590 <ESPRxDecoder+0xf8c>)
 800137e:	2229      	movs	r2, #41	; 0x29
 8001380:	701a      	strb	r2, [r3, #0]
 8001382:	e2c0      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==41)  //seq1_hour
 8001384:	4b82      	ldr	r3, [pc, #520]	; (8001590 <ESPRxDecoder+0xf8c>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b29      	cmp	r3, #41	; 0x29
 800138a:	d10c      	bne.n	80013a6 <ESPRxDecoder+0xda2>
			 {
				 Data_bufferptr=42;
 800138c:	4b80      	ldr	r3, [pc, #512]	; (8001590 <ESPRxDecoder+0xf8c>)
 800138e:	222a      	movs	r2, #42	; 0x2a
 8001390:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[32] = DecToASCIIFun(Rxwifi_data);
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	4618      	mov	r0, r3
 8001396:	f000 fc4b 	bl	8001c30 <DecToASCIIFun>
 800139a:	4603      	mov	r3, r0
 800139c:	461a      	mov	r2, r3
 800139e:	4b7d      	ldr	r3, [pc, #500]	; (8001594 <ESPRxDecoder+0xf90>)
 80013a0:	f883 2020 	strb.w	r2, [r3, #32]
 80013a4:	e2af      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==42)
 80013a6:	4b7a      	ldr	r3, [pc, #488]	; (8001590 <ESPRxDecoder+0xf8c>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b2a      	cmp	r3, #42	; 0x2a
 80013ac:	d11b      	bne.n	80013e6 <ESPRxDecoder+0xde2>
			 {
				 Data_bufferptr=43;
 80013ae:	4b78      	ldr	r3, [pc, #480]	; (8001590 <ESPRxDecoder+0xf8c>)
 80013b0:	222b      	movs	r2, #43	; 0x2b
 80013b2:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[33] = DecToASCIIFun(Rxwifi_data);
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 fc3a 	bl	8001c30 <DecToASCIIFun>
 80013bc:	4603      	mov	r3, r0
 80013be:	461a      	mov	r2, r3
 80013c0:	4b74      	ldr	r3, [pc, #464]	; (8001594 <ESPRxDecoder+0xf90>)
 80013c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				 Sequence1_hour_http = Uart_rx_buffer[33]+(Uart_rx_buffer[32]*10);
 80013c6:	4b73      	ldr	r3, [pc, #460]	; (8001594 <ESPRxDecoder+0xf90>)
 80013c8:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80013cc:	4b71      	ldr	r3, [pc, #452]	; (8001594 <ESPRxDecoder+0xf90>)
 80013ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013d2:	4619      	mov	r1, r3
 80013d4:	0089      	lsls	r1, r1, #2
 80013d6:	440b      	add	r3, r1
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	4413      	add	r3, r2
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	4b6f      	ldr	r3, [pc, #444]	; (80015a0 <ESPRxDecoder+0xf9c>)
 80013e2:	701a      	strb	r2, [r3, #0]
 80013e4:	e28f      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==43)  //seq1_min
 80013e6:	4b6a      	ldr	r3, [pc, #424]	; (8001590 <ESPRxDecoder+0xf8c>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b2b      	cmp	r3, #43	; 0x2b
 80013ec:	d10c      	bne.n	8001408 <ESPRxDecoder+0xe04>
			 {
				 Data_bufferptr=44;
 80013ee:	4b68      	ldr	r3, [pc, #416]	; (8001590 <ESPRxDecoder+0xf8c>)
 80013f0:	222c      	movs	r2, #44	; 0x2c
 80013f2:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[34] = DecToASCIIFun(Rxwifi_data);
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 fc1a 	bl	8001c30 <DecToASCIIFun>
 80013fc:	4603      	mov	r3, r0
 80013fe:	461a      	mov	r2, r3
 8001400:	4b64      	ldr	r3, [pc, #400]	; (8001594 <ESPRxDecoder+0xf90>)
 8001402:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001406:	e27e      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==44)
 8001408:	4b61      	ldr	r3, [pc, #388]	; (8001590 <ESPRxDecoder+0xf8c>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b2c      	cmp	r3, #44	; 0x2c
 800140e:	d11b      	bne.n	8001448 <ESPRxDecoder+0xe44>
			 {
				 Data_bufferptr=45;
 8001410:	4b5f      	ldr	r3, [pc, #380]	; (8001590 <ESPRxDecoder+0xf8c>)
 8001412:	222d      	movs	r2, #45	; 0x2d
 8001414:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[35] = DecToASCIIFun(Rxwifi_data);
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	4618      	mov	r0, r3
 800141a:	f000 fc09 	bl	8001c30 <DecToASCIIFun>
 800141e:	4603      	mov	r3, r0
 8001420:	461a      	mov	r2, r3
 8001422:	4b5c      	ldr	r3, [pc, #368]	; (8001594 <ESPRxDecoder+0xf90>)
 8001424:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				 Sequence1_minute_http = Uart_rx_buffer[35]+(Uart_rx_buffer[34]*10);
 8001428:	4b5a      	ldr	r3, [pc, #360]	; (8001594 <ESPRxDecoder+0xf90>)
 800142a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800142e:	4b59      	ldr	r3, [pc, #356]	; (8001594 <ESPRxDecoder+0xf90>)
 8001430:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001434:	4619      	mov	r1, r3
 8001436:	0089      	lsls	r1, r1, #2
 8001438:	440b      	add	r3, r1
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	b2db      	uxtb	r3, r3
 800143e:	4413      	add	r3, r2
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4b58      	ldr	r3, [pc, #352]	; (80015a4 <ESPRxDecoder+0xfa0>)
 8001444:	701a      	strb	r2, [r3, #0]
 8001446:	e25e      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==45)  //,
 8001448:	4b51      	ldr	r3, [pc, #324]	; (8001590 <ESPRxDecoder+0xf8c>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b2d      	cmp	r3, #45	; 0x2d
 800144e:	d103      	bne.n	8001458 <ESPRxDecoder+0xe54>
			 {
				 Data_bufferptr=46;
 8001450:	4b4f      	ldr	r3, [pc, #316]	; (8001590 <ESPRxDecoder+0xf8c>)
 8001452:	222e      	movs	r2, #46	; 0x2e
 8001454:	701a      	strb	r2, [r3, #0]
 8001456:	e256      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==46)  //R_seq2_hour
 8001458:	4b4d      	ldr	r3, [pc, #308]	; (8001590 <ESPRxDecoder+0xf8c>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b2e      	cmp	r3, #46	; 0x2e
 800145e:	d10c      	bne.n	800147a <ESPRxDecoder+0xe76>
			 {
				 Data_bufferptr=47;
 8001460:	4b4b      	ldr	r3, [pc, #300]	; (8001590 <ESPRxDecoder+0xf8c>)
 8001462:	222f      	movs	r2, #47	; 0x2f
 8001464:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[36] = DecToASCIIFun(Rxwifi_data);
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	4618      	mov	r0, r3
 800146a:	f000 fbe1 	bl	8001c30 <DecToASCIIFun>
 800146e:	4603      	mov	r3, r0
 8001470:	461a      	mov	r2, r3
 8001472:	4b48      	ldr	r3, [pc, #288]	; (8001594 <ESPRxDecoder+0xf90>)
 8001474:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001478:	e245      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==47)
 800147a:	4b45      	ldr	r3, [pc, #276]	; (8001590 <ESPRxDecoder+0xf8c>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b2f      	cmp	r3, #47	; 0x2f
 8001480:	d11b      	bne.n	80014ba <ESPRxDecoder+0xeb6>
			 {
				 Data_bufferptr=48;
 8001482:	4b43      	ldr	r3, [pc, #268]	; (8001590 <ESPRxDecoder+0xf8c>)
 8001484:	2230      	movs	r2, #48	; 0x30
 8001486:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[37] = DecToASCIIFun(Rxwifi_data);
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	4618      	mov	r0, r3
 800148c:	f000 fbd0 	bl	8001c30 <DecToASCIIFun>
 8001490:	4603      	mov	r3, r0
 8001492:	461a      	mov	r2, r3
 8001494:	4b3f      	ldr	r3, [pc, #252]	; (8001594 <ESPRxDecoder+0xf90>)
 8001496:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				 R_Sequence2_hour_http = Uart_rx_buffer[37]+(Uart_rx_buffer[36]*10);
 800149a:	4b3e      	ldr	r3, [pc, #248]	; (8001594 <ESPRxDecoder+0xf90>)
 800149c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80014a0:	4b3c      	ldr	r3, [pc, #240]	; (8001594 <ESPRxDecoder+0xf90>)
 80014a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014a6:	4619      	mov	r1, r3
 80014a8:	0089      	lsls	r1, r1, #2
 80014aa:	440b      	add	r3, r1
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	4413      	add	r3, r2
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	4b3c      	ldr	r3, [pc, #240]	; (80015a8 <ESPRxDecoder+0xfa4>)
 80014b6:	701a      	strb	r2, [r3, #0]
 80014b8:	e225      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==48)  //R_seq2_hour
 80014ba:	4b35      	ldr	r3, [pc, #212]	; (8001590 <ESPRxDecoder+0xf8c>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b30      	cmp	r3, #48	; 0x30
 80014c0:	d10c      	bne.n	80014dc <ESPRxDecoder+0xed8>
			 {
				 Data_bufferptr=49;
 80014c2:	4b33      	ldr	r3, [pc, #204]	; (8001590 <ESPRxDecoder+0xf8c>)
 80014c4:	2231      	movs	r2, #49	; 0x31
 80014c6:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[38] = DecToASCIIFun(Rxwifi_data);
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 fbb0 	bl	8001c30 <DecToASCIIFun>
 80014d0:	4603      	mov	r3, r0
 80014d2:	461a      	mov	r2, r3
 80014d4:	4b2f      	ldr	r3, [pc, #188]	; (8001594 <ESPRxDecoder+0xf90>)
 80014d6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80014da:	e214      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==49)
 80014dc:	4b2c      	ldr	r3, [pc, #176]	; (8001590 <ESPRxDecoder+0xf8c>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b31      	cmp	r3, #49	; 0x31
 80014e2:	d11b      	bne.n	800151c <ESPRxDecoder+0xf18>
			 {
				 Data_bufferptr=50;
 80014e4:	4b2a      	ldr	r3, [pc, #168]	; (8001590 <ESPRxDecoder+0xf8c>)
 80014e6:	2232      	movs	r2, #50	; 0x32
 80014e8:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[39] = DecToASCIIFun(Rxwifi_data);
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 fb9f 	bl	8001c30 <DecToASCIIFun>
 80014f2:	4603      	mov	r3, r0
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b27      	ldr	r3, [pc, #156]	; (8001594 <ESPRxDecoder+0xf90>)
 80014f8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				 R_Sequence2_minute_http = Uart_rx_buffer[39]+(Uart_rx_buffer[38]*10);
 80014fc:	4b25      	ldr	r3, [pc, #148]	; (8001594 <ESPRxDecoder+0xf90>)
 80014fe:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8001502:	4b24      	ldr	r3, [pc, #144]	; (8001594 <ESPRxDecoder+0xf90>)
 8001504:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001508:	4619      	mov	r1, r3
 800150a:	0089      	lsls	r1, r1, #2
 800150c:	440b      	add	r3, r1
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	b2db      	uxtb	r3, r3
 8001512:	4413      	add	r3, r2
 8001514:	b2da      	uxtb	r2, r3
 8001516:	4b25      	ldr	r3, [pc, #148]	; (80015ac <ESPRxDecoder+0xfa8>)
 8001518:	701a      	strb	r2, [r3, #0]
 800151a:	e1f4      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==50)  //seq1_minute
 800151c:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <ESPRxDecoder+0xf8c>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b32      	cmp	r3, #50	; 0x32
 8001522:	d103      	bne.n	800152c <ESPRxDecoder+0xf28>
			 {
				 Data_bufferptr=52;
 8001524:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <ESPRxDecoder+0xf8c>)
 8001526:	2234      	movs	r2, #52	; 0x34
 8001528:	701a      	strb	r2, [r3, #0]
 800152a:	e1ec      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==52)  //seq2_hour
 800152c:	4b18      	ldr	r3, [pc, #96]	; (8001590 <ESPRxDecoder+0xf8c>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b34      	cmp	r3, #52	; 0x34
 8001532:	d10c      	bne.n	800154e <ESPRxDecoder+0xf4a>
			 {
				 Data_bufferptr=53;
 8001534:	4b16      	ldr	r3, [pc, #88]	; (8001590 <ESPRxDecoder+0xf8c>)
 8001536:	2235      	movs	r2, #53	; 0x35
 8001538:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[40] = DecToASCIIFun(Rxwifi_data);
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	4618      	mov	r0, r3
 800153e:	f000 fb77 	bl	8001c30 <DecToASCIIFun>
 8001542:	4603      	mov	r3, r0
 8001544:	461a      	mov	r2, r3
 8001546:	4b13      	ldr	r3, [pc, #76]	; (8001594 <ESPRxDecoder+0xf90>)
 8001548:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800154c:	e1db      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==53)
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <ESPRxDecoder+0xf8c>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b35      	cmp	r3, #53	; 0x35
 8001554:	d12e      	bne.n	80015b4 <ESPRxDecoder+0xfb0>
			 {
				 Data_bufferptr=54;
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <ESPRxDecoder+0xf8c>)
 8001558:	2236      	movs	r2, #54	; 0x36
 800155a:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[41] = DecToASCIIFun(Rxwifi_data);
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	4618      	mov	r0, r3
 8001560:	f000 fb66 	bl	8001c30 <DecToASCIIFun>
 8001564:	4603      	mov	r3, r0
 8001566:	461a      	mov	r2, r3
 8001568:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <ESPRxDecoder+0xf90>)
 800156a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				 Sequence2_hour_http = Uart_rx_buffer[41]+(Uart_rx_buffer[40]*10);
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <ESPRxDecoder+0xf90>)
 8001570:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8001574:	4b07      	ldr	r3, [pc, #28]	; (8001594 <ESPRxDecoder+0xf90>)
 8001576:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800157a:	4619      	mov	r1, r3
 800157c:	0089      	lsls	r1, r1, #2
 800157e:	440b      	add	r3, r1
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	b2db      	uxtb	r3, r3
 8001584:	4413      	add	r3, r2
 8001586:	b2da      	uxtb	r2, r3
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <ESPRxDecoder+0xfac>)
 800158a:	701a      	strb	r2, [r3, #0]
 800158c:	e1bb      	b.n	8001906 <ESPRxDecoder+0x1302>
 800158e:	bf00      	nop
 8001590:	200000d2 	.word	0x200000d2
 8001594:	2000008c 	.word	0x2000008c
 8001598:	200000f4 	.word	0x200000f4
 800159c:	200000f5 	.word	0x200000f5
 80015a0:	200000f2 	.word	0x200000f2
 80015a4:	200000f3 	.word	0x200000f3
 80015a8:	200000f6 	.word	0x200000f6
 80015ac:	200000f7 	.word	0x200000f7
 80015b0:	200000f8 	.word	0x200000f8

			 }
			 else if(Data_bufferptr==54)  //seq2_minute
 80015b4:	4ba9      	ldr	r3, [pc, #676]	; (800185c <ESPRxDecoder+0x1258>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b36      	cmp	r3, #54	; 0x36
 80015ba:	d10c      	bne.n	80015d6 <ESPRxDecoder+0xfd2>
			 {
				 Data_bufferptr=55;
 80015bc:	4ba7      	ldr	r3, [pc, #668]	; (800185c <ESPRxDecoder+0x1258>)
 80015be:	2237      	movs	r2, #55	; 0x37
 80015c0:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[42] = DecToASCIIFun(Rxwifi_data);
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 fb33 	bl	8001c30 <DecToASCIIFun>
 80015ca:	4603      	mov	r3, r0
 80015cc:	461a      	mov	r2, r3
 80015ce:	4ba4      	ldr	r3, [pc, #656]	; (8001860 <ESPRxDecoder+0x125c>)
 80015d0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 80015d4:	e197      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==55)
 80015d6:	4ba1      	ldr	r3, [pc, #644]	; (800185c <ESPRxDecoder+0x1258>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b37      	cmp	r3, #55	; 0x37
 80015dc:	d11b      	bne.n	8001616 <ESPRxDecoder+0x1012>
			 {
				 Data_bufferptr=56;
 80015de:	4b9f      	ldr	r3, [pc, #636]	; (800185c <ESPRxDecoder+0x1258>)
 80015e0:	2238      	movs	r2, #56	; 0x38
 80015e2:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[43] = DecToASCIIFun(Rxwifi_data);
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 fb22 	bl	8001c30 <DecToASCIIFun>
 80015ec:	4603      	mov	r3, r0
 80015ee:	461a      	mov	r2, r3
 80015f0:	4b9b      	ldr	r3, [pc, #620]	; (8001860 <ESPRxDecoder+0x125c>)
 80015f2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				 Sequence2_minute_http = Uart_rx_buffer[43]+(Uart_rx_buffer[42]*10);
 80015f6:	4b9a      	ldr	r3, [pc, #616]	; (8001860 <ESPRxDecoder+0x125c>)
 80015f8:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80015fc:	4b98      	ldr	r3, [pc, #608]	; (8001860 <ESPRxDecoder+0x125c>)
 80015fe:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001602:	4619      	mov	r1, r3
 8001604:	0089      	lsls	r1, r1, #2
 8001606:	440b      	add	r3, r1
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	b2db      	uxtb	r3, r3
 800160c:	4413      	add	r3, r2
 800160e:	b2da      	uxtb	r2, r3
 8001610:	4b94      	ldr	r3, [pc, #592]	; (8001864 <ESPRxDecoder+0x1260>)
 8001612:	701a      	strb	r2, [r3, #0]
 8001614:	e177      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==56)  //,
 8001616:	4b91      	ldr	r3, [pc, #580]	; (800185c <ESPRxDecoder+0x1258>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b38      	cmp	r3, #56	; 0x38
 800161c:	d103      	bne.n	8001626 <ESPRxDecoder+0x1022>
			 {
				 Data_bufferptr=57;
 800161e:	4b8f      	ldr	r3, [pc, #572]	; (800185c <ESPRxDecoder+0x1258>)
 8001620:	2239      	movs	r2, #57	; 0x39
 8001622:	701a      	strb	r2, [r3, #0]
 8001624:	e16f      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==57)  //Type of process
 8001626:	4b8d      	ldr	r3, [pc, #564]	; (800185c <ESPRxDecoder+0x1258>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b39      	cmp	r3, #57	; 0x39
 800162c:	d111      	bne.n	8001652 <ESPRxDecoder+0x104e>
			 {
				 Data_bufferptr=58;
 800162e:	4b8b      	ldr	r3, [pc, #556]	; (800185c <ESPRxDecoder+0x1258>)
 8001630:	223a      	movs	r2, #58	; 0x3a
 8001632:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[44] = DecToASCIIFun(Rxwifi_data);
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	4618      	mov	r0, r3
 8001638:	f000 fafa 	bl	8001c30 <DecToASCIIFun>
 800163c:	4603      	mov	r3, r0
 800163e:	461a      	mov	r2, r3
 8001640:	4b87      	ldr	r3, [pc, #540]	; (8001860 <ESPRxDecoder+0x125c>)
 8001642:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				 TypeofProcess = Uart_rx_buffer[44];
 8001646:	4b86      	ldr	r3, [pc, #536]	; (8001860 <ESPRxDecoder+0x125c>)
 8001648:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800164c:	4b86      	ldr	r3, [pc, #536]	; (8001868 <ESPRxDecoder+0x1264>)
 800164e:	701a      	strb	r2, [r3, #0]
 8001650:	e159      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==58)  //,
 8001652:	4b82      	ldr	r3, [pc, #520]	; (800185c <ESPRxDecoder+0x1258>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b3a      	cmp	r3, #58	; 0x3a
 8001658:	d103      	bne.n	8001662 <ESPRxDecoder+0x105e>
			 {
				 Data_bufferptr=59;
 800165a:	4b80      	ldr	r3, [pc, #512]	; (800185c <ESPRxDecoder+0x1258>)
 800165c:	223b      	movs	r2, #59	; 0x3b
 800165e:	701a      	strb	r2, [r3, #0]
 8001660:	e151      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==59)  //Offset time before timer
 8001662:	4b7e      	ldr	r3, [pc, #504]	; (800185c <ESPRxDecoder+0x1258>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b3b      	cmp	r3, #59	; 0x3b
 8001668:	d10c      	bne.n	8001684 <ESPRxDecoder+0x1080>
			 {
				 Data_bufferptr=60;
 800166a:	4b7c      	ldr	r3, [pc, #496]	; (800185c <ESPRxDecoder+0x1258>)
 800166c:	223c      	movs	r2, #60	; 0x3c
 800166e:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[45] = DecToASCIIFun(Rxwifi_data);
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	4618      	mov	r0, r3
 8001674:	f000 fadc 	bl	8001c30 <DecToASCIIFun>
 8001678:	4603      	mov	r3, r0
 800167a:	461a      	mov	r2, r3
 800167c:	4b78      	ldr	r3, [pc, #480]	; (8001860 <ESPRxDecoder+0x125c>)
 800167e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8001682:	e140      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==60)
 8001684:	4b75      	ldr	r3, [pc, #468]	; (800185c <ESPRxDecoder+0x1258>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b3c      	cmp	r3, #60	; 0x3c
 800168a:	d11b      	bne.n	80016c4 <ESPRxDecoder+0x10c0>
			 {
				 Data_bufferptr=61;
 800168c:	4b73      	ldr	r3, [pc, #460]	; (800185c <ESPRxDecoder+0x1258>)
 800168e:	223d      	movs	r2, #61	; 0x3d
 8001690:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[46] = DecToASCIIFun(Rxwifi_data);
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	4618      	mov	r0, r3
 8001696:	f000 facb 	bl	8001c30 <DecToASCIIFun>
 800169a:	4603      	mov	r3, r0
 800169c:	461a      	mov	r2, r3
 800169e:	4b70      	ldr	r3, [pc, #448]	; (8001860 <ESPRxDecoder+0x125c>)
 80016a0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				 TypeofProcess = Uart_rx_buffer[46]+(Uart_rx_buffer[45]*10);
 80016a4:	4b6e      	ldr	r3, [pc, #440]	; (8001860 <ESPRxDecoder+0x125c>)
 80016a6:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80016aa:	4b6d      	ldr	r3, [pc, #436]	; (8001860 <ESPRxDecoder+0x125c>)
 80016ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80016b0:	4619      	mov	r1, r3
 80016b2:	0089      	lsls	r1, r1, #2
 80016b4:	440b      	add	r3, r1
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	4413      	add	r3, r2
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4b6a      	ldr	r3, [pc, #424]	; (8001868 <ESPRxDecoder+0x1264>)
 80016c0:	701a      	strb	r2, [r3, #0]
 80016c2:	e120      	b.n	8001906 <ESPRxDecoder+0x1302>

			 }
			 else if(Data_bufferptr==61)  //,
 80016c4:	4b65      	ldr	r3, [pc, #404]	; (800185c <ESPRxDecoder+0x1258>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b3d      	cmp	r3, #61	; 0x3d
 80016ca:	d103      	bne.n	80016d4 <ESPRxDecoder+0x10d0>
			 {
				 Data_bufferptr=62;
 80016cc:	4b63      	ldr	r3, [pc, #396]	; (800185c <ESPRxDecoder+0x1258>)
 80016ce:	223e      	movs	r2, #62	; 0x3e
 80016d0:	701a      	strb	r2, [r3, #0]
 80016d2:	e118      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==62)  //Offset time after timer
 80016d4:	4b61      	ldr	r3, [pc, #388]	; (800185c <ESPRxDecoder+0x1258>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b3e      	cmp	r3, #62	; 0x3e
 80016da:	d10c      	bne.n	80016f6 <ESPRxDecoder+0x10f2>
			 {
				 Data_bufferptr=63;
 80016dc:	4b5f      	ldr	r3, [pc, #380]	; (800185c <ESPRxDecoder+0x1258>)
 80016de:	223f      	movs	r2, #63	; 0x3f
 80016e0:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[47] = DecToASCIIFun(Rxwifi_data);
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f000 faa3 	bl	8001c30 <DecToASCIIFun>
 80016ea:	4603      	mov	r3, r0
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b5c      	ldr	r3, [pc, #368]	; (8001860 <ESPRxDecoder+0x125c>)
 80016f0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 80016f4:	e107      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==63)
 80016f6:	4b59      	ldr	r3, [pc, #356]	; (800185c <ESPRxDecoder+0x1258>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b3f      	cmp	r3, #63	; 0x3f
 80016fc:	d11b      	bne.n	8001736 <ESPRxDecoder+0x1132>
			 {
				 Data_bufferptr=64;
 80016fe:	4b57      	ldr	r3, [pc, #348]	; (800185c <ESPRxDecoder+0x1258>)
 8001700:	2240      	movs	r2, #64	; 0x40
 8001702:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[48] = DecToASCIIFun(Rxwifi_data);
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	4618      	mov	r0, r3
 8001708:	f000 fa92 	bl	8001c30 <DecToASCIIFun>
 800170c:	4603      	mov	r3, r0
 800170e:	461a      	mov	r2, r3
 8001710:	4b53      	ldr	r3, [pc, #332]	; (8001860 <ESPRxDecoder+0x125c>)
 8001712:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				 TypeofProcess = Uart_rx_buffer[48]+(Uart_rx_buffer[47]*10);
 8001716:	4b52      	ldr	r3, [pc, #328]	; (8001860 <ESPRxDecoder+0x125c>)
 8001718:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800171c:	4b50      	ldr	r3, [pc, #320]	; (8001860 <ESPRxDecoder+0x125c>)
 800171e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001722:	4619      	mov	r1, r3
 8001724:	0089      	lsls	r1, r1, #2
 8001726:	440b      	add	r3, r1
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	b2db      	uxtb	r3, r3
 800172c:	4413      	add	r3, r2
 800172e:	b2da      	uxtb	r2, r3
 8001730:	4b4d      	ldr	r3, [pc, #308]	; (8001868 <ESPRxDecoder+0x1264>)
 8001732:	701a      	strb	r2, [r3, #0]
 8001734:	e0e7      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==64)  //No of temperture controller
 8001736:	4b49      	ldr	r3, [pc, #292]	; (800185c <ESPRxDecoder+0x1258>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b40      	cmp	r3, #64	; 0x40
 800173c:	d103      	bne.n	8001746 <ESPRxDecoder+0x1142>
			 {
				 Data_bufferptr=65;
 800173e:	4b47      	ldr	r3, [pc, #284]	; (800185c <ESPRxDecoder+0x1258>)
 8001740:	2241      	movs	r2, #65	; 0x41
 8001742:	701a      	strb	r2, [r3, #0]
 8001744:	e0df      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==65)
 8001746:	4b45      	ldr	r3, [pc, #276]	; (800185c <ESPRxDecoder+0x1258>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b41      	cmp	r3, #65	; 0x41
 800174c:	d111      	bne.n	8001772 <ESPRxDecoder+0x116e>
			 {
				 Data_bufferptr=66;
 800174e:	4b43      	ldr	r3, [pc, #268]	; (800185c <ESPRxDecoder+0x1258>)
 8001750:	2242      	movs	r2, #66	; 0x42
 8001752:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[49] = DecToASCIIFun(Rxwifi_data);
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	4618      	mov	r0, r3
 8001758:	f000 fa6a 	bl	8001c30 <DecToASCIIFun>
 800175c:	4603      	mov	r3, r0
 800175e:	461a      	mov	r2, r3
 8001760:	4b3f      	ldr	r3, [pc, #252]	; (8001860 <ESPRxDecoder+0x125c>)
 8001762:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				 No_of_temp_Controller = Uart_rx_buffer[49];
 8001766:	4b3e      	ldr	r3, [pc, #248]	; (8001860 <ESPRxDecoder+0x125c>)
 8001768:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 800176c:	4b3f      	ldr	r3, [pc, #252]	; (800186c <ESPRxDecoder+0x1268>)
 800176e:	701a      	strb	r2, [r3, #0]
 8001770:	e0c9      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==66)  //Type of temperture controller
 8001772:	4b3a      	ldr	r3, [pc, #232]	; (800185c <ESPRxDecoder+0x1258>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b42      	cmp	r3, #66	; 0x42
 8001778:	d103      	bne.n	8001782 <ESPRxDecoder+0x117e>
			 {
				 Data_bufferptr=67;
 800177a:	4b38      	ldr	r3, [pc, #224]	; (800185c <ESPRxDecoder+0x1258>)
 800177c:	2243      	movs	r2, #67	; 0x43
 800177e:	701a      	strb	r2, [r3, #0]
 8001780:	e0c1      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==67)
 8001782:	4b36      	ldr	r3, [pc, #216]	; (800185c <ESPRxDecoder+0x1258>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b43      	cmp	r3, #67	; 0x43
 8001788:	d111      	bne.n	80017ae <ESPRxDecoder+0x11aa>
			 {
				 Data_bufferptr=68;
 800178a:	4b34      	ldr	r3, [pc, #208]	; (800185c <ESPRxDecoder+0x1258>)
 800178c:	2244      	movs	r2, #68	; 0x44
 800178e:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[50] = DecToASCIIFun(Rxwifi_data);
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	4618      	mov	r0, r3
 8001794:	f000 fa4c 	bl	8001c30 <DecToASCIIFun>
 8001798:	4603      	mov	r3, r0
 800179a:	461a      	mov	r2, r3
 800179c:	4b30      	ldr	r3, [pc, #192]	; (8001860 <ESPRxDecoder+0x125c>)
 800179e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				 Type_of_temp_Controller = Uart_rx_buffer[50];
 80017a2:	4b2f      	ldr	r3, [pc, #188]	; (8001860 <ESPRxDecoder+0x125c>)
 80017a4:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80017a8:	4b31      	ldr	r3, [pc, #196]	; (8001870 <ESPRxDecoder+0x126c>)
 80017aa:	701a      	strb	r2, [r3, #0]
 80017ac:	e0ab      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==68)  //Type of power meter
 80017ae:	4b2b      	ldr	r3, [pc, #172]	; (800185c <ESPRxDecoder+0x1258>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b44      	cmp	r3, #68	; 0x44
 80017b4:	d103      	bne.n	80017be <ESPRxDecoder+0x11ba>
			 {
				 Data_bufferptr=69;
 80017b6:	4b29      	ldr	r3, [pc, #164]	; (800185c <ESPRxDecoder+0x1258>)
 80017b8:	2245      	movs	r2, #69	; 0x45
 80017ba:	701a      	strb	r2, [r3, #0]
 80017bc:	e0a3      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==69)
 80017be:	4b27      	ldr	r3, [pc, #156]	; (800185c <ESPRxDecoder+0x1258>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b45      	cmp	r3, #69	; 0x45
 80017c4:	d111      	bne.n	80017ea <ESPRxDecoder+0x11e6>
			 {
				 Data_bufferptr=70;
 80017c6:	4b25      	ldr	r3, [pc, #148]	; (800185c <ESPRxDecoder+0x1258>)
 80017c8:	2246      	movs	r2, #70	; 0x46
 80017ca:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[51] = DecToASCIIFun(Rxwifi_data);
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 fa2e 	bl	8001c30 <DecToASCIIFun>
 80017d4:	4603      	mov	r3, r0
 80017d6:	461a      	mov	r2, r3
 80017d8:	4b21      	ldr	r3, [pc, #132]	; (8001860 <ESPRxDecoder+0x125c>)
 80017da:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
				 Type_of_powermeter = Uart_rx_buffer[51];
 80017de:	4b20      	ldr	r3, [pc, #128]	; (8001860 <ESPRxDecoder+0x125c>)
 80017e0:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 80017e4:	4b23      	ldr	r3, [pc, #140]	; (8001874 <ESPRxDecoder+0x1270>)
 80017e6:	701a      	strb	r2, [r3, #0]
 80017e8:	e08d      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==70)  //,
 80017ea:	4b1c      	ldr	r3, [pc, #112]	; (800185c <ESPRxDecoder+0x1258>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b46      	cmp	r3, #70	; 0x46
 80017f0:	d103      	bne.n	80017fa <ESPRxDecoder+0x11f6>
			 {
				 Data_bufferptr=71;
 80017f2:	4b1a      	ldr	r3, [pc, #104]	; (800185c <ESPRxDecoder+0x1258>)
 80017f4:	2247      	movs	r2, #71	; 0x47
 80017f6:	701a      	strb	r2, [r3, #0]
 80017f8:	e085      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==71)  //status
 80017fa:	4b18      	ldr	r3, [pc, #96]	; (800185c <ESPRxDecoder+0x1258>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b47      	cmp	r3, #71	; 0x47
 8001800:	d10c      	bne.n	800181c <ESPRxDecoder+0x1218>
			 {
				 Data_bufferptr=72;
 8001802:	4b16      	ldr	r3, [pc, #88]	; (800185c <ESPRxDecoder+0x1258>)
 8001804:	2248      	movs	r2, #72	; 0x48
 8001806:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[52] = DecToASCIIFun(Rxwifi_data);
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	4618      	mov	r0, r3
 800180c:	f000 fa10 	bl	8001c30 <DecToASCIIFun>
 8001810:	4603      	mov	r3, r0
 8001812:	461a      	mov	r2, r3
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <ESPRxDecoder+0x125c>)
 8001816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800181a:	e074      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==72)
 800181c:	4b0f      	ldr	r3, [pc, #60]	; (800185c <ESPRxDecoder+0x1258>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b48      	cmp	r3, #72	; 0x48
 8001822:	d12b      	bne.n	800187c <ESPRxDecoder+0x1278>
			 {
				 Data_bufferptr=73;
 8001824:	4b0d      	ldr	r3, [pc, #52]	; (800185c <ESPRxDecoder+0x1258>)
 8001826:	2249      	movs	r2, #73	; 0x49
 8001828:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[53] = DecToASCIIFun(Rxwifi_data);
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	4618      	mov	r0, r3
 800182e:	f000 f9ff 	bl	8001c30 <DecToASCIIFun>
 8001832:	4603      	mov	r3, r0
 8001834:	461a      	mov	r2, r3
 8001836:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <ESPRxDecoder+0x125c>)
 8001838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				 Status_Http = Uart_rx_buffer[53]+(Uart_rx_buffer[52]*10);
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <ESPRxDecoder+0x125c>)
 800183e:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8001842:	4b07      	ldr	r3, [pc, #28]	; (8001860 <ESPRxDecoder+0x125c>)
 8001844:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001848:	4619      	mov	r1, r3
 800184a:	0089      	lsls	r1, r1, #2
 800184c:	440b      	add	r3, r1
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	b2db      	uxtb	r3, r3
 8001852:	4413      	add	r3, r2
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4b08      	ldr	r3, [pc, #32]	; (8001878 <ESPRxDecoder+0x1274>)
 8001858:	701a      	strb	r2, [r3, #0]
 800185a:	e054      	b.n	8001906 <ESPRxDecoder+0x1302>
 800185c:	200000d2 	.word	0x200000d2
 8001860:	2000008c 	.word	0x2000008c
 8001864:	200000f9 	.word	0x200000f9
 8001868:	200000fa 	.word	0x200000fa
 800186c:	200000fb 	.word	0x200000fb
 8001870:	200000fc 	.word	0x200000fc
 8001874:	200000fd 	.word	0x200000fd
 8001878:	200000fe 	.word	0x200000fe
			 }
			  else if(Data_bufferptr==73)  //,
 800187c:	4b8d      	ldr	r3, [pc, #564]	; (8001ab4 <ESPRxDecoder+0x14b0>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b49      	cmp	r3, #73	; 0x49
 8001882:	d103      	bne.n	800188c <ESPRxDecoder+0x1288>
			 {
				 Data_bufferptr=74;
 8001884:	4b8b      	ldr	r3, [pc, #556]	; (8001ab4 <ESPRxDecoder+0x14b0>)
 8001886:	224a      	movs	r2, #74	; 0x4a
 8001888:	701a      	strb	r2, [r3, #0]
 800188a:	e03c      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==74)  //status
 800188c:	4b89      	ldr	r3, [pc, #548]	; (8001ab4 <ESPRxDecoder+0x14b0>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b4a      	cmp	r3, #74	; 0x4a
 8001892:	d10c      	bne.n	80018ae <ESPRxDecoder+0x12aa>
			 {
				 Data_bufferptr=75;
 8001894:	4b87      	ldr	r3, [pc, #540]	; (8001ab4 <ESPRxDecoder+0x14b0>)
 8001896:	224b      	movs	r2, #75	; 0x4b
 8001898:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[54] = DecToASCIIFun(Rxwifi_data);
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	4618      	mov	r0, r3
 800189e:	f000 f9c7 	bl	8001c30 <DecToASCIIFun>
 80018a2:	4603      	mov	r3, r0
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b84      	ldr	r3, [pc, #528]	; (8001ab8 <ESPRxDecoder+0x14b4>)
 80018a8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 80018ac:	e02b      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else if(Data_bufferptr==75)
 80018ae:	4b81      	ldr	r3, [pc, #516]	; (8001ab4 <ESPRxDecoder+0x14b0>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b4b      	cmp	r3, #75	; 0x4b
 80018b4:	d124      	bne.n	8001900 <ESPRxDecoder+0x12fc>
			 {
				 Data_bufferptr=0;
 80018b6:	4b7f      	ldr	r3, [pc, #508]	; (8001ab4 <ESPRxDecoder+0x14b0>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[55] = DecToASCIIFun(Rxwifi_data);
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 f9b6 	bl	8001c30 <DecToASCIIFun>
 80018c4:	4603      	mov	r3, r0
 80018c6:	461a      	mov	r2, r3
 80018c8:	4b7b      	ldr	r3, [pc, #492]	; (8001ab8 <ESPRxDecoder+0x14b4>)
 80018ca:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
				 IDGen_Skip_Http = Uart_rx_buffer[55]+(Uart_rx_buffer[54]*10);
 80018ce:	4b7a      	ldr	r3, [pc, #488]	; (8001ab8 <ESPRxDecoder+0x14b4>)
 80018d0:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80018d4:	4b78      	ldr	r3, [pc, #480]	; (8001ab8 <ESPRxDecoder+0x14b4>)
 80018d6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80018da:	4619      	mov	r1, r3
 80018dc:	0089      	lsls	r1, r1, #2
 80018de:	440b      	add	r3, r1
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	4413      	add	r3, r2
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	4b74      	ldr	r3, [pc, #464]	; (8001abc <ESPRxDecoder+0x14b8>)
 80018ea:	701a      	strb	r2, [r3, #0]
				 RefreshBlockInfo = 0;
 80018ec:	4b74      	ldr	r3, [pc, #464]	; (8001ac0 <ESPRxDecoder+0x14bc>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
				 RxCompleteU2C1WIFI=1;
 80018f2:	4b74      	ldr	r3, [pc, #464]	; (8001ac4 <ESPRxDecoder+0x14c0>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	701a      	strb	r2, [r3, #0]
				 Updatetimeinfo=1;
 80018f8:	4b73      	ldr	r3, [pc, #460]	; (8001ac8 <ESPRxDecoder+0x14c4>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	701a      	strb	r2, [r3, #0]
 80018fe:	e002      	b.n	8001906 <ESPRxDecoder+0x1302>
			 }
			 else
			 {
				 Data_bufferptr=0;
 8001900:	4b6c      	ldr	r3, [pc, #432]	; (8001ab4 <ESPRxDecoder+0x14b0>)
 8001902:	2200      	movs	r2, #0
 8001904:	701a      	strb	r2, [r3, #0]
			 }

		   if(Valid_DataWifi1)
 8001906:	4b71      	ldr	r3, [pc, #452]	; (8001acc <ESPRxDecoder+0x14c8>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 809b 	beq.w	8001a46 <ESPRxDecoder+0x1442>
		   {
			 if((Rxwifi_data=='U')&&(bufferptr==0))
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	2b55      	cmp	r3, #85	; 0x55
 8001914:	d107      	bne.n	8001926 <ESPRxDecoder+0x1322>
 8001916:	4b6e      	ldr	r3, [pc, #440]	; (8001ad0 <ESPRxDecoder+0x14cc>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d103      	bne.n	8001926 <ESPRxDecoder+0x1322>
			 {
			 	bufferptr=1;
 800191e:	4b6c      	ldr	r3, [pc, #432]	; (8001ad0 <ESPRxDecoder+0x14cc>)
 8001920:	2201      	movs	r2, #1
 8001922:	701a      	strb	r2, [r3, #0]
 8001924:	e040      	b.n	80019a8 <ESPRxDecoder+0x13a4>
			 }
			 else if((Rxwifi_data=='n')&&(bufferptr==1))
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	2b6e      	cmp	r3, #110	; 0x6e
 800192a:	d107      	bne.n	800193c <ESPRxDecoder+0x1338>
 800192c:	4b68      	ldr	r3, [pc, #416]	; (8001ad0 <ESPRxDecoder+0x14cc>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d103      	bne.n	800193c <ESPRxDecoder+0x1338>
			 {
			 	bufferptr=2;
 8001934:	4b66      	ldr	r3, [pc, #408]	; (8001ad0 <ESPRxDecoder+0x14cc>)
 8001936:	2202      	movs	r2, #2
 8001938:	701a      	strb	r2, [r3, #0]
 800193a:	e035      	b.n	80019a8 <ESPRxDecoder+0x13a4>
			 }
			 else if((Rxwifi_data=='l')&&(bufferptr==2))
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	2b6c      	cmp	r3, #108	; 0x6c
 8001940:	d107      	bne.n	8001952 <ESPRxDecoder+0x134e>
 8001942:	4b63      	ldr	r3, [pc, #396]	; (8001ad0 <ESPRxDecoder+0x14cc>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b02      	cmp	r3, #2
 8001948:	d103      	bne.n	8001952 <ESPRxDecoder+0x134e>
			 {
			    bufferptr=3;
 800194a:	4b61      	ldr	r3, [pc, #388]	; (8001ad0 <ESPRxDecoder+0x14cc>)
 800194c:	2203      	movs	r2, #3
 800194e:	701a      	strb	r2, [r3, #0]
 8001950:	e02a      	b.n	80019a8 <ESPRxDecoder+0x13a4>
			 }
			 else if((Rxwifi_data=='i')&&(bufferptr==3))
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	2b69      	cmp	r3, #105	; 0x69
 8001956:	d107      	bne.n	8001968 <ESPRxDecoder+0x1364>
 8001958:	4b5d      	ldr	r3, [pc, #372]	; (8001ad0 <ESPRxDecoder+0x14cc>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b03      	cmp	r3, #3
 800195e:	d103      	bne.n	8001968 <ESPRxDecoder+0x1364>
			 {
			    bufferptr=4;
 8001960:	4b5b      	ldr	r3, [pc, #364]	; (8001ad0 <ESPRxDecoder+0x14cc>)
 8001962:	2204      	movs	r2, #4
 8001964:	701a      	strb	r2, [r3, #0]
 8001966:	e01f      	b.n	80019a8 <ESPRxDecoder+0x13a4>
			 }
			 else if((Rxwifi_data=='n')&&(bufferptr==4))
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	2b6e      	cmp	r3, #110	; 0x6e
 800196c:	d107      	bne.n	800197e <ESPRxDecoder+0x137a>
 800196e:	4b58      	ldr	r3, [pc, #352]	; (8001ad0 <ESPRxDecoder+0x14cc>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b04      	cmp	r3, #4
 8001974:	d103      	bne.n	800197e <ESPRxDecoder+0x137a>
			 {
			    bufferptr=5;
 8001976:	4b56      	ldr	r3, [pc, #344]	; (8001ad0 <ESPRxDecoder+0x14cc>)
 8001978:	2205      	movs	r2, #5
 800197a:	701a      	strb	r2, [r3, #0]
 800197c:	e014      	b.n	80019a8 <ESPRxDecoder+0x13a4>
			 }
			 else if((Rxwifi_data=='k')&&(bufferptr==5))
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	2b6b      	cmp	r3, #107	; 0x6b
 8001982:	d111      	bne.n	80019a8 <ESPRxDecoder+0x13a4>
 8001984:	4b52      	ldr	r3, [pc, #328]	; (8001ad0 <ESPRxDecoder+0x14cc>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b05      	cmp	r3, #5
 800198a:	d10d      	bne.n	80019a8 <ESPRxDecoder+0x13a4>
			 {
			    bufferptr=0;
 800198c:	4b50      	ldr	r3, [pc, #320]	; (8001ad0 <ESPRxDecoder+0x14cc>)
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8001992:	2300      	movs	r3, #0
 8001994:	71bb      	strb	r3, [r7, #6]
				wifi_command=102;
 8001996:	4b4f      	ldr	r3, [pc, #316]	; (8001ad4 <ESPRxDecoder+0x14d0>)
 8001998:	2266      	movs	r2, #102	; 0x66
 800199a:	701a      	strb	r2, [r3, #0]
				//RefreshBlockInfo=0;//update at rx end
				Error_Close=0;
 800199c:	4b4e      	ldr	r3, [pc, #312]	; (8001ad8 <ESPRxDecoder+0x14d4>)
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
				Valid_DataWifi1=0;
 80019a2:	4b4a      	ldr	r3, [pc, #296]	; (8001acc <ESPRxDecoder+0x14c8>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]
				//RxCompleteU2C1WIFI=1;			  /*receive complete*/
			 }
			 if((Rxwifi_data=='C')&&(bufferptr==0))
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	2b43      	cmp	r3, #67	; 0x43
 80019ac:	d107      	bne.n	80019be <ESPRxDecoder+0x13ba>
 80019ae:	4b48      	ldr	r3, [pc, #288]	; (8001ad0 <ESPRxDecoder+0x14cc>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d103      	bne.n	80019be <ESPRxDecoder+0x13ba>
			 {
			 	bufferptr=1;
 80019b6:	4b46      	ldr	r3, [pc, #280]	; (8001ad0 <ESPRxDecoder+0x14cc>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	701a      	strb	r2, [r3, #0]
 80019bc:	e0fe      	b.n	8001bbc <ESPRxDecoder+0x15b8>
			 }
			 else if((Rxwifi_data=='L')&&(bufferptr==1))
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	2b4c      	cmp	r3, #76	; 0x4c
 80019c2:	d107      	bne.n	80019d4 <ESPRxDecoder+0x13d0>
 80019c4:	4b42      	ldr	r3, [pc, #264]	; (8001ad0 <ESPRxDecoder+0x14cc>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d103      	bne.n	80019d4 <ESPRxDecoder+0x13d0>
			 {
			 	bufferptr=2;
 80019cc:	4b40      	ldr	r3, [pc, #256]	; (8001ad0 <ESPRxDecoder+0x14cc>)
 80019ce:	2202      	movs	r2, #2
 80019d0:	701a      	strb	r2, [r3, #0]
 80019d2:	e0f3      	b.n	8001bbc <ESPRxDecoder+0x15b8>
			 }
			 else if((Rxwifi_data=='O')&&(bufferptr==2))
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	2b4f      	cmp	r3, #79	; 0x4f
 80019d8:	d107      	bne.n	80019ea <ESPRxDecoder+0x13e6>
 80019da:	4b3d      	ldr	r3, [pc, #244]	; (8001ad0 <ESPRxDecoder+0x14cc>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d103      	bne.n	80019ea <ESPRxDecoder+0x13e6>
			 {
			    bufferptr=3;
 80019e2:	4b3b      	ldr	r3, [pc, #236]	; (8001ad0 <ESPRxDecoder+0x14cc>)
 80019e4:	2203      	movs	r2, #3
 80019e6:	701a      	strb	r2, [r3, #0]
 80019e8:	e0e8      	b.n	8001bbc <ESPRxDecoder+0x15b8>
			 }
			 else if((Rxwifi_data=='S')&&(bufferptr==3))
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	2b53      	cmp	r3, #83	; 0x53
 80019ee:	d107      	bne.n	8001a00 <ESPRxDecoder+0x13fc>
 80019f0:	4b37      	ldr	r3, [pc, #220]	; (8001ad0 <ESPRxDecoder+0x14cc>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b03      	cmp	r3, #3
 80019f6:	d103      	bne.n	8001a00 <ESPRxDecoder+0x13fc>
			 {
			    bufferptr=4;
 80019f8:	4b35      	ldr	r3, [pc, #212]	; (8001ad0 <ESPRxDecoder+0x14cc>)
 80019fa:	2204      	movs	r2, #4
 80019fc:	701a      	strb	r2, [r3, #0]
 80019fe:	e0dd      	b.n	8001bbc <ESPRxDecoder+0x15b8>
			 }
			 else if((Rxwifi_data=='E')&&(bufferptr==4))
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	2b45      	cmp	r3, #69	; 0x45
 8001a04:	d107      	bne.n	8001a16 <ESPRxDecoder+0x1412>
 8001a06:	4b32      	ldr	r3, [pc, #200]	; (8001ad0 <ESPRxDecoder+0x14cc>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	d103      	bne.n	8001a16 <ESPRxDecoder+0x1412>
			 {
			    bufferptr=5;
 8001a0e:	4b30      	ldr	r3, [pc, #192]	; (8001ad0 <ESPRxDecoder+0x14cc>)
 8001a10:	2205      	movs	r2, #5
 8001a12:	701a      	strb	r2, [r3, #0]
 8001a14:	e0d2      	b.n	8001bbc <ESPRxDecoder+0x15b8>
			 }
			 else if((Rxwifi_data=='D')&&(bufferptr==5))
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	2b44      	cmp	r3, #68	; 0x44
 8001a1a:	f040 80f9 	bne.w	8001c10 <ESPRxDecoder+0x160c>
 8001a1e:	4b2c      	ldr	r3, [pc, #176]	; (8001ad0 <ESPRxDecoder+0x14cc>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b05      	cmp	r3, #5
 8001a24:	f040 80f4 	bne.w	8001c10 <ESPRxDecoder+0x160c>
			 {
			    bufferptr=0;
 8001a28:	4b29      	ldr	r3, [pc, #164]	; (8001ad0 <ESPRxDecoder+0x14cc>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	71bb      	strb	r3, [r7, #6]
				wifi_command=102;
 8001a32:	4b28      	ldr	r3, [pc, #160]	; (8001ad4 <ESPRxDecoder+0x14d0>)
 8001a34:	2266      	movs	r2, #102	; 0x66
 8001a36:	701a      	strb	r2, [r3, #0]
				//RefreshBlockInfo=0;//update at rx end
				Error_Close=0;
 8001a38:	4b27      	ldr	r3, [pc, #156]	; (8001ad8 <ESPRxDecoder+0x14d4>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
				Valid_DataWifi1=0;
 8001a3e:	4b23      	ldr	r3, [pc, #140]	; (8001acc <ESPRxDecoder+0x14c8>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]
					wifi_command=102;}
				Valid_DataWifi1=0;
				//RxCompleteU2C1WIFI=0;   /*Wrong receive*/
			 }
			}
		break;
 8001a44:	e0e4      	b.n	8001c10 <ESPRxDecoder+0x160c>
			  if((Rxwifi_data=='U')&&(bufferptr==0))
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	2b55      	cmp	r3, #85	; 0x55
 8001a4a:	d107      	bne.n	8001a5c <ESPRxDecoder+0x1458>
 8001a4c:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <ESPRxDecoder+0x14cc>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d103      	bne.n	8001a5c <ESPRxDecoder+0x1458>
			 	bufferptr=1;
 8001a54:	4b1e      	ldr	r3, [pc, #120]	; (8001ad0 <ESPRxDecoder+0x14cc>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	701a      	strb	r2, [r3, #0]
 8001a5a:	e054      	b.n	8001b06 <ESPRxDecoder+0x1502>
			 else if((Rxwifi_data=='n')&&(bufferptr==1))
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	2b6e      	cmp	r3, #110	; 0x6e
 8001a60:	d107      	bne.n	8001a72 <ESPRxDecoder+0x146e>
 8001a62:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <ESPRxDecoder+0x14cc>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d103      	bne.n	8001a72 <ESPRxDecoder+0x146e>
			 	bufferptr=2;
 8001a6a:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <ESPRxDecoder+0x14cc>)
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	701a      	strb	r2, [r3, #0]
 8001a70:	e049      	b.n	8001b06 <ESPRxDecoder+0x1502>
			 else if((Rxwifi_data=='l')&&(bufferptr==2))
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	2b6c      	cmp	r3, #108	; 0x6c
 8001a76:	d107      	bne.n	8001a88 <ESPRxDecoder+0x1484>
 8001a78:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <ESPRxDecoder+0x14cc>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d103      	bne.n	8001a88 <ESPRxDecoder+0x1484>
			    bufferptr=3;
 8001a80:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <ESPRxDecoder+0x14cc>)
 8001a82:	2203      	movs	r2, #3
 8001a84:	701a      	strb	r2, [r3, #0]
 8001a86:	e03e      	b.n	8001b06 <ESPRxDecoder+0x1502>
			 else if((Rxwifi_data=='i')&&(bufferptr==3))
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	2b69      	cmp	r3, #105	; 0x69
 8001a8c:	d107      	bne.n	8001a9e <ESPRxDecoder+0x149a>
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <ESPRxDecoder+0x14cc>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	d103      	bne.n	8001a9e <ESPRxDecoder+0x149a>
			    bufferptr=4;
 8001a96:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <ESPRxDecoder+0x14cc>)
 8001a98:	2204      	movs	r2, #4
 8001a9a:	701a      	strb	r2, [r3, #0]
 8001a9c:	e033      	b.n	8001b06 <ESPRxDecoder+0x1502>
			 else if((Rxwifi_data=='n')&&(bufferptr==4))
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	2b6e      	cmp	r3, #110	; 0x6e
 8001aa2:	d11b      	bne.n	8001adc <ESPRxDecoder+0x14d8>
 8001aa4:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <ESPRxDecoder+0x14cc>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b04      	cmp	r3, #4
 8001aaa:	d117      	bne.n	8001adc <ESPRxDecoder+0x14d8>
			    bufferptr=5;
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <ESPRxDecoder+0x14cc>)
 8001aae:	2205      	movs	r2, #5
 8001ab0:	701a      	strb	r2, [r3, #0]
 8001ab2:	e028      	b.n	8001b06 <ESPRxDecoder+0x1502>
 8001ab4:	200000d2 	.word	0x200000d2
 8001ab8:	2000008c 	.word	0x2000008c
 8001abc:	200000ff 	.word	0x200000ff
 8001ac0:	20000769 	.word	0x20000769
 8001ac4:	200000d7 	.word	0x200000d7
 8001ac8:	200000d6 	.word	0x200000d6
 8001acc:	200000d8 	.word	0x200000d8
 8001ad0:	20000762 	.word	0x20000762
 8001ad4:	20000664 	.word	0x20000664
 8001ad8:	200000d5 	.word	0x200000d5
			 else if((Rxwifi_data=='k')&&(bufferptr==5))
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	2b6b      	cmp	r3, #107	; 0x6b
 8001ae0:	d111      	bne.n	8001b06 <ESPRxDecoder+0x1502>
 8001ae2:	4b4f      	ldr	r3, [pc, #316]	; (8001c20 <ESPRxDecoder+0x161c>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b05      	cmp	r3, #5
 8001ae8:	d10d      	bne.n	8001b06 <ESPRxDecoder+0x1502>
			    bufferptr=0;
 8001aea:	4b4d      	ldr	r3, [pc, #308]	; (8001c20 <ESPRxDecoder+0x161c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	71bb      	strb	r3, [r7, #6]
				wifi_command=102;
 8001af4:	4b4b      	ldr	r3, [pc, #300]	; (8001c24 <ESPRxDecoder+0x1620>)
 8001af6:	2266      	movs	r2, #102	; 0x66
 8001af8:	701a      	strb	r2, [r3, #0]
				Error_Close=0;
 8001afa:	4b4b      	ldr	r3, [pc, #300]	; (8001c28 <ESPRxDecoder+0x1624>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	701a      	strb	r2, [r3, #0]
				Valid_DataWifi1=0;
 8001b00:	4b4a      	ldr	r3, [pc, #296]	; (8001c2c <ESPRxDecoder+0x1628>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	701a      	strb	r2, [r3, #0]
			   if((Rxwifi_data=='C')&&(bufferptr==0))
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	2b43      	cmp	r3, #67	; 0x43
 8001b0a:	d107      	bne.n	8001b1c <ESPRxDecoder+0x1518>
 8001b0c:	4b44      	ldr	r3, [pc, #272]	; (8001c20 <ESPRxDecoder+0x161c>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d103      	bne.n	8001b1c <ESPRxDecoder+0x1518>
			 	bufferptr=1;
 8001b14:	4b42      	ldr	r3, [pc, #264]	; (8001c20 <ESPRxDecoder+0x161c>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	701a      	strb	r2, [r3, #0]
 8001b1a:	e04f      	b.n	8001bbc <ESPRxDecoder+0x15b8>
			 else if((Rxwifi_data=='L')&&(bufferptr==1))
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	2b4c      	cmp	r3, #76	; 0x4c
 8001b20:	d107      	bne.n	8001b32 <ESPRxDecoder+0x152e>
 8001b22:	4b3f      	ldr	r3, [pc, #252]	; (8001c20 <ESPRxDecoder+0x161c>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d103      	bne.n	8001b32 <ESPRxDecoder+0x152e>
			 	bufferptr=2;
 8001b2a:	4b3d      	ldr	r3, [pc, #244]	; (8001c20 <ESPRxDecoder+0x161c>)
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	701a      	strb	r2, [r3, #0]
 8001b30:	e044      	b.n	8001bbc <ESPRxDecoder+0x15b8>
			 else if((Rxwifi_data=='O')&&(bufferptr==2))
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	2b4f      	cmp	r3, #79	; 0x4f
 8001b36:	d107      	bne.n	8001b48 <ESPRxDecoder+0x1544>
 8001b38:	4b39      	ldr	r3, [pc, #228]	; (8001c20 <ESPRxDecoder+0x161c>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d103      	bne.n	8001b48 <ESPRxDecoder+0x1544>
			    bufferptr=3;
 8001b40:	4b37      	ldr	r3, [pc, #220]	; (8001c20 <ESPRxDecoder+0x161c>)
 8001b42:	2203      	movs	r2, #3
 8001b44:	701a      	strb	r2, [r3, #0]
 8001b46:	e039      	b.n	8001bbc <ESPRxDecoder+0x15b8>
			 else if((Rxwifi_data=='S')&&(bufferptr==3))
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	2b53      	cmp	r3, #83	; 0x53
 8001b4c:	d107      	bne.n	8001b5e <ESPRxDecoder+0x155a>
 8001b4e:	4b34      	ldr	r3, [pc, #208]	; (8001c20 <ESPRxDecoder+0x161c>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	d103      	bne.n	8001b5e <ESPRxDecoder+0x155a>
			    bufferptr=4;
 8001b56:	4b32      	ldr	r3, [pc, #200]	; (8001c20 <ESPRxDecoder+0x161c>)
 8001b58:	2204      	movs	r2, #4
 8001b5a:	701a      	strb	r2, [r3, #0]
 8001b5c:	e02e      	b.n	8001bbc <ESPRxDecoder+0x15b8>
			 else if((Rxwifi_data=='E')&&(bufferptr==4))
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	2b45      	cmp	r3, #69	; 0x45
 8001b62:	d107      	bne.n	8001b74 <ESPRxDecoder+0x1570>
 8001b64:	4b2e      	ldr	r3, [pc, #184]	; (8001c20 <ESPRxDecoder+0x161c>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d103      	bne.n	8001b74 <ESPRxDecoder+0x1570>
			    bufferptr=5;
 8001b6c:	4b2c      	ldr	r3, [pc, #176]	; (8001c20 <ESPRxDecoder+0x161c>)
 8001b6e:	2205      	movs	r2, #5
 8001b70:	701a      	strb	r2, [r3, #0]
 8001b72:	e023      	b.n	8001bbc <ESPRxDecoder+0x15b8>
			 else if((Rxwifi_data=='D')&&(bufferptr==5))
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	2b44      	cmp	r3, #68	; 0x44
 8001b78:	d14a      	bne.n	8001c10 <ESPRxDecoder+0x160c>
 8001b7a:	4b29      	ldr	r3, [pc, #164]	; (8001c20 <ESPRxDecoder+0x161c>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b05      	cmp	r3, #5
 8001b80:	d146      	bne.n	8001c10 <ESPRxDecoder+0x160c>
			    bufferptr=0;
 8001b82:	4b27      	ldr	r3, [pc, #156]	; (8001c20 <ESPRxDecoder+0x161c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	71bb      	strb	r3, [r7, #6]
				if(++Error_Close>3){wifi_command=10;Error_Close=0;}
 8001b8c:	4b26      	ldr	r3, [pc, #152]	; (8001c28 <ESPRxDecoder+0x1624>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	3301      	adds	r3, #1
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <ESPRxDecoder+0x1624>)
 8001b96:	701a      	strb	r2, [r3, #0]
 8001b98:	4b23      	ldr	r3, [pc, #140]	; (8001c28 <ESPRxDecoder+0x1624>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b03      	cmp	r3, #3
 8001b9e:	d906      	bls.n	8001bae <ESPRxDecoder+0x15aa>
 8001ba0:	4b20      	ldr	r3, [pc, #128]	; (8001c24 <ESPRxDecoder+0x1620>)
 8001ba2:	220a      	movs	r2, #10
 8001ba4:	701a      	strb	r2, [r3, #0]
 8001ba6:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <ESPRxDecoder+0x1624>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	701a      	strb	r2, [r3, #0]
 8001bac:	e002      	b.n	8001bb4 <ESPRxDecoder+0x15b0>
					wifi_command=102;}
 8001bae:	4b1d      	ldr	r3, [pc, #116]	; (8001c24 <ESPRxDecoder+0x1620>)
 8001bb0:	2266      	movs	r2, #102	; 0x66
 8001bb2:	701a      	strb	r2, [r3, #0]
				Valid_DataWifi1=0;
 8001bb4:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <ESPRxDecoder+0x1628>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
		break;
 8001bba:	e029      	b.n	8001c10 <ESPRxDecoder+0x160c>
 8001bbc:	e028      	b.n	8001c10 <ESPRxDecoder+0x160c>
		case 8:
			 if((Rxwifi_data=='O')&&(bufferptr==0))
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	2b4f      	cmp	r3, #79	; 0x4f
 8001bc2:	d107      	bne.n	8001bd4 <ESPRxDecoder+0x15d0>
 8001bc4:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <ESPRxDecoder+0x161c>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d103      	bne.n	8001bd4 <ESPRxDecoder+0x15d0>
			 {
			 	bufferptr=1;
 8001bcc:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <ESPRxDecoder+0x161c>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	701a      	strb	r2, [r3, #0]
			 {
			 	bufferptr=0;
				Rxseqdecoder=0;
				wifi_command=20;
			 }
		break;
 8001bd2:	e01f      	b.n	8001c14 <ESPRxDecoder+0x1610>
			 else if((Rxwifi_data=='K')&&(bufferptr==1))
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	2b4b      	cmp	r3, #75	; 0x4b
 8001bd8:	d11c      	bne.n	8001c14 <ESPRxDecoder+0x1610>
 8001bda:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <ESPRxDecoder+0x161c>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d118      	bne.n	8001c14 <ESPRxDecoder+0x1610>
			 	bufferptr=0;
 8001be2:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <ESPRxDecoder+0x161c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	71bb      	strb	r3, [r7, #6]
				wifi_command=20;
 8001bec:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <ESPRxDecoder+0x1620>)
 8001bee:	2214      	movs	r2, #20
 8001bf0:	701a      	strb	r2, [r3, #0]
		break;
 8001bf2:	e00f      	b.n	8001c14 <ESPRxDecoder+0x1610>
	   	default:
		break;
 8001bf4:	bf00      	nop
 8001bf6:	e00e      	b.n	8001c16 <ESPRxDecoder+0x1612>
		break;
 8001bf8:	bf00      	nop
 8001bfa:	e00c      	b.n	8001c16 <ESPRxDecoder+0x1612>
		break;
 8001bfc:	bf00      	nop
 8001bfe:	e00a      	b.n	8001c16 <ESPRxDecoder+0x1612>
		break;
 8001c00:	bf00      	nop
 8001c02:	e008      	b.n	8001c16 <ESPRxDecoder+0x1612>
		break;
 8001c04:	bf00      	nop
 8001c06:	e006      	b.n	8001c16 <ESPRxDecoder+0x1612>
		break;
 8001c08:	bf00      	nop
 8001c0a:	e004      	b.n	8001c16 <ESPRxDecoder+0x1612>
		break;
 8001c0c:	bf00      	nop
 8001c0e:	e002      	b.n	8001c16 <ESPRxDecoder+0x1612>
		break;
 8001c10:	bf00      	nop
 8001c12:	e000      	b.n	8001c16 <ESPRxDecoder+0x1612>
		break;
 8001c14:	bf00      	nop
		}
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000762 	.word	0x20000762
 8001c24:	20000664 	.word	0x20000664
 8001c28:	200000d5 	.word	0x200000d5
 8001c2c:	200000d8 	.word	0x200000d8

08001c30 <DecToASCIIFun>:

unsigned char DecToASCIIFun(unsigned char TempVar)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]
	unsigned char  ASCIIHex;
	switch(TempVar)
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	3b30      	subs	r3, #48	; 0x30
 8001c3e:	2b16      	cmp	r3, #22
 8001c40:	d860      	bhi.n	8001d04 <DecToASCIIFun+0xd4>
 8001c42:	a201      	add	r2, pc, #4	; (adr r2, 8001c48 <DecToASCIIFun+0x18>)
 8001c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c48:	08001ca5 	.word	0x08001ca5
 8001c4c:	08001cab 	.word	0x08001cab
 8001c50:	08001cb1 	.word	0x08001cb1
 8001c54:	08001cb7 	.word	0x08001cb7
 8001c58:	08001cbd 	.word	0x08001cbd
 8001c5c:	08001cc3 	.word	0x08001cc3
 8001c60:	08001cc9 	.word	0x08001cc9
 8001c64:	08001ccf 	.word	0x08001ccf
 8001c68:	08001cd5 	.word	0x08001cd5
 8001c6c:	08001cdb 	.word	0x08001cdb
 8001c70:	08001d05 	.word	0x08001d05
 8001c74:	08001d05 	.word	0x08001d05
 8001c78:	08001d05 	.word	0x08001d05
 8001c7c:	08001d05 	.word	0x08001d05
 8001c80:	08001d05 	.word	0x08001d05
 8001c84:	08001d05 	.word	0x08001d05
 8001c88:	08001d05 	.word	0x08001d05
 8001c8c:	08001ce1 	.word	0x08001ce1
 8001c90:	08001ce7 	.word	0x08001ce7
 8001c94:	08001ced 	.word	0x08001ced
 8001c98:	08001cf3 	.word	0x08001cf3
 8001c9c:	08001cf9 	.word	0x08001cf9
 8001ca0:	08001cff 	.word	0x08001cff
	{
	case 48:
			ASCIIHex = 0x00;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	73fb      	strb	r3, [r7, #15]
			break;
 8001ca8:	e02c      	b.n	8001d04 <DecToASCIIFun+0xd4>
	case 49:
			ASCIIHex = 0x01;
 8001caa:	2301      	movs	r3, #1
 8001cac:	73fb      	strb	r3, [r7, #15]
			break;
 8001cae:	e029      	b.n	8001d04 <DecToASCIIFun+0xd4>
	case 50:
			ASCIIHex = 0x02;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	73fb      	strb	r3, [r7, #15]
			break;
 8001cb4:	e026      	b.n	8001d04 <DecToASCIIFun+0xd4>
	case 51:
			ASCIIHex = 0x03;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	73fb      	strb	r3, [r7, #15]
			break;
 8001cba:	e023      	b.n	8001d04 <DecToASCIIFun+0xd4>
	case 52:
			ASCIIHex = 0x04;
 8001cbc:	2304      	movs	r3, #4
 8001cbe:	73fb      	strb	r3, [r7, #15]
			break;
 8001cc0:	e020      	b.n	8001d04 <DecToASCIIFun+0xd4>
	case 53:
			ASCIIHex = 0x05;
 8001cc2:	2305      	movs	r3, #5
 8001cc4:	73fb      	strb	r3, [r7, #15]
			break;
 8001cc6:	e01d      	b.n	8001d04 <DecToASCIIFun+0xd4>
	case 54:
			ASCIIHex = 0x06;
 8001cc8:	2306      	movs	r3, #6
 8001cca:	73fb      	strb	r3, [r7, #15]
			break;
 8001ccc:	e01a      	b.n	8001d04 <DecToASCIIFun+0xd4>
	case 55:
			ASCIIHex = 0x07;
 8001cce:	2307      	movs	r3, #7
 8001cd0:	73fb      	strb	r3, [r7, #15]
			break;
 8001cd2:	e017      	b.n	8001d04 <DecToASCIIFun+0xd4>
	case 56:
			ASCIIHex = 0x08;
 8001cd4:	2308      	movs	r3, #8
 8001cd6:	73fb      	strb	r3, [r7, #15]
			break;
 8001cd8:	e014      	b.n	8001d04 <DecToASCIIFun+0xd4>
	case 57:
			ASCIIHex = 0x09;
 8001cda:	2309      	movs	r3, #9
 8001cdc:	73fb      	strb	r3, [r7, #15]
			break;
 8001cde:	e011      	b.n	8001d04 <DecToASCIIFun+0xd4>
	case 65:
			ASCIIHex = 0x0A;
 8001ce0:	230a      	movs	r3, #10
 8001ce2:	73fb      	strb	r3, [r7, #15]
			break;
 8001ce4:	e00e      	b.n	8001d04 <DecToASCIIFun+0xd4>
	case 66:
			ASCIIHex = 0x0B;
 8001ce6:	230b      	movs	r3, #11
 8001ce8:	73fb      	strb	r3, [r7, #15]
			break;
 8001cea:	e00b      	b.n	8001d04 <DecToASCIIFun+0xd4>
	case 67:
			ASCIIHex = 0x0C;
 8001cec:	230c      	movs	r3, #12
 8001cee:	73fb      	strb	r3, [r7, #15]
			break;
 8001cf0:	e008      	b.n	8001d04 <DecToASCIIFun+0xd4>
	case 68:
			ASCIIHex = 0x0D;
 8001cf2:	230d      	movs	r3, #13
 8001cf4:	73fb      	strb	r3, [r7, #15]
			break;
 8001cf6:	e005      	b.n	8001d04 <DecToASCIIFun+0xd4>
	case 69:
			ASCIIHex = 0x0E;
 8001cf8:	230e      	movs	r3, #14
 8001cfa:	73fb      	strb	r3, [r7, #15]
			break;
 8001cfc:	e002      	b.n	8001d04 <DecToASCIIFun+0xd4>
	case 70:
			ASCIIHex = 0x0F;
 8001cfe:	230f      	movs	r3, #15
 8001d00:	73fb      	strb	r3, [r7, #15]
			break;
 8001d02:	bf00      	nop
	}
	return (ASCIIHex);
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop

08001d14 <HAL_TIM_PeriodElapsedCallback>:
 uint8_t Seccount1,Seccount2;

 extern uint16_t ProcessTotalMin1,ProcessTotalMin2;

 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 	if(htim == &htim7)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a90      	ldr	r2, [pc, #576]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d102      	bne.n	8001d2a <HAL_TIM_PeriodElapsedCallback+0x16>
 	{
 		Flag1MS=1;
 8001d24:	4b8f      	ldr	r3, [pc, #572]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
 	}
 	if(htim == &htim6)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a8e      	ldr	r2, [pc, #568]	; (8001f68 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	f040 8169 	bne.w	8002006 <HAL_TIM_PeriodElapsedCallback+0x2f2>
	{
 		Flag100milliSeconds=1;
 8001d34:	4b8d      	ldr	r3, [pc, #564]	; (8001f6c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	701a      	strb	r2, [r3, #0]
 		if(++LocCount1S >= 10)
 8001d3a:	4b8d      	ldr	r3, [pc, #564]	; (8001f70 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	4b8b      	ldr	r3, [pc, #556]	; (8001f70 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001d44:	701a      	strb	r2, [r3, #0]
 8001d46:	4b8a      	ldr	r3, [pc, #552]	; (8001f70 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b09      	cmp	r3, #9
 8001d4c:	f240 80a6 	bls.w	8001e9c <HAL_TIM_PeriodElapsedCallback+0x188>
		{
			LocCount1S=0;
 8001d50:	4b87      	ldr	r3, [pc, #540]	; (8001f70 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
			if(++SimCount >= 20)
 8001d56:	4b87      	ldr	r3, [pc, #540]	; (8001f74 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	4b85      	ldr	r3, [pc, #532]	; (8001f74 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001d60:	701a      	strb	r2, [r3, #0]
 8001d62:	4b84      	ldr	r3, [pc, #528]	; (8001f74 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b13      	cmp	r3, #19
 8001d68:	d906      	bls.n	8001d78 <HAL_TIM_PeriodElapsedCallback+0x64>
			{
				SimCount=0;
 8001d6a:	4b82      	ldr	r3, [pc, #520]	; (8001f74 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOC, RELAY4_Pin);
 8001d70:	2120      	movs	r1, #32
 8001d72:	4881      	ldr	r0, [pc, #516]	; (8001f78 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001d74:	f009 fa5a 	bl	800b22c <HAL_GPIO_TogglePin>
			}
			Flag1Second =1;
 8001d78:	4b80      	ldr	r3, [pc, #512]	; (8001f7c <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	701a      	strb	r2, [r3, #0]
			//DHCP_time_handler( );
			if(!stop_timer_count){
 8001d7e:	4b80      	ldr	r3, [pc, #512]	; (8001f80 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d148      	bne.n	8001e18 <HAL_TIM_PeriodElapsedCallback+0x104>
				if(start_process_control_timer ==1){
 8001d86:	4b7f      	ldr	r3, [pc, #508]	; (8001f84 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d120      	bne.n	8001dd0 <HAL_TIM_PeriodElapsedCallback+0xbc>
					if(++Seccount1 >= 59){
 8001d8e:	4b7e      	ldr	r3, [pc, #504]	; (8001f88 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	3301      	adds	r3, #1
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	4b7c      	ldr	r3, [pc, #496]	; (8001f88 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001d98:	701a      	strb	r2, [r3, #0]
 8001d9a:	4b7b      	ldr	r3, [pc, #492]	; (8001f88 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b3a      	cmp	r3, #58	; 0x3a
 8001da0:	d93a      	bls.n	8001e18 <HAL_TIM_PeriodElapsedCallback+0x104>
						Seccount1=0;
 8001da2:	4b79      	ldr	r3, [pc, #484]	; (8001f88 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	701a      	strb	r2, [r3, #0]
						if(++seq1_count_inc >= ProcessTotalMin1){
 8001da8:	4b78      	ldr	r3, [pc, #480]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	3301      	adds	r3, #1
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	4b76      	ldr	r3, [pc, #472]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001db2:	801a      	strh	r2, [r3, #0]
 8001db4:	4b75      	ldr	r3, [pc, #468]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001db6:	881a      	ldrh	r2, [r3, #0]
 8001db8:	4b75      	ldr	r3, [pc, #468]	; (8001f90 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d32b      	bcc.n	8001e18 <HAL_TIM_PeriodElapsedCallback+0x104>
							seq1_count_inc = ProcessTotalMin1;
 8001dc0:	4b73      	ldr	r3, [pc, #460]	; (8001f90 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001dc2:	881a      	ldrh	r2, [r3, #0]
 8001dc4:	4b71      	ldr	r3, [pc, #452]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001dc6:	801a      	strh	r2, [r3, #0]
							process_complete=1;
 8001dc8:	4b72      	ldr	r3, [pc, #456]	; (8001f94 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	701a      	strb	r2, [r3, #0]
 8001dce:	e023      	b.n	8001e18 <HAL_TIM_PeriodElapsedCallback+0x104>
						}
					}
				}
				else if(start_process_control_timer == 2){
 8001dd0:	4b6c      	ldr	r3, [pc, #432]	; (8001f84 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d11f      	bne.n	8001e18 <HAL_TIM_PeriodElapsedCallback+0x104>
					if(++Seccount2 >=59){
 8001dd8:	4b6f      	ldr	r3, [pc, #444]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	4b6d      	ldr	r3, [pc, #436]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001de2:	701a      	strb	r2, [r3, #0]
 8001de4:	4b6c      	ldr	r3, [pc, #432]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b3a      	cmp	r3, #58	; 0x3a
 8001dea:	d915      	bls.n	8001e18 <HAL_TIM_PeriodElapsedCallback+0x104>
						Seccount2=0;
 8001dec:	4b6a      	ldr	r3, [pc, #424]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	701a      	strb	r2, [r3, #0]
						if(++seq2_count_inc >= ProcessTotalMin2){
 8001df2:	4b6a      	ldr	r3, [pc, #424]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001df4:	881b      	ldrh	r3, [r3, #0]
 8001df6:	3301      	adds	r3, #1
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	4b68      	ldr	r3, [pc, #416]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001dfc:	801a      	strh	r2, [r3, #0]
 8001dfe:	4b67      	ldr	r3, [pc, #412]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001e00:	881a      	ldrh	r2, [r3, #0]
 8001e02:	4b67      	ldr	r3, [pc, #412]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d306      	bcc.n	8001e18 <HAL_TIM_PeriodElapsedCallback+0x104>
							seq2_count_inc = ProcessTotalMin2;
 8001e0a:	4b65      	ldr	r3, [pc, #404]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001e0c:	881a      	ldrh	r2, [r3, #0]
 8001e0e:	4b63      	ldr	r3, [pc, #396]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001e10:	801a      	strh	r2, [r3, #0]
							process_complete=2;
 8001e12:	4b60      	ldr	r3, [pc, #384]	; (8001f94 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001e14:	2202      	movs	r2, #2
 8001e16:	701a      	strb	r2, [r3, #0]
						}
					}
				}
			}

			seq1_remaining_time_total_min = ProcessTotalMin1-seq1_count_inc;
 8001e18:	4b5d      	ldr	r3, [pc, #372]	; (8001f90 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001e1a:	881a      	ldrh	r2, [r3, #0]
 8001e1c:	4b5b      	ldr	r3, [pc, #364]	; (8001f8c <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	4b5f      	ldr	r3, [pc, #380]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001e26:	801a      	strh	r2, [r3, #0]
			seq2_remaining_time_total_min = ProcessTotalMin2-seq2_count_inc;
 8001e28:	4b5d      	ldr	r3, [pc, #372]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001e2a:	881a      	ldrh	r2, [r3, #0]
 8001e2c:	4b5b      	ldr	r3, [pc, #364]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	4b5c      	ldr	r3, [pc, #368]	; (8001fa8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001e36:	801a      	strh	r2, [r3, #0]
			seq1_remaining_time_Hr  = (seq1_remaining_time_total_min/60);
 8001e38:	4b5a      	ldr	r3, [pc, #360]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	4a5b      	ldr	r2, [pc, #364]	; (8001fac <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e42:	095b      	lsrs	r3, r3, #5
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	4b59      	ldr	r3, [pc, #356]	; (8001fb0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001e4a:	701a      	strb	r2, [r3, #0]
			seq1_remaining_time_min = (seq1_remaining_time_total_min%60);
 8001e4c:	4b55      	ldr	r3, [pc, #340]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001e4e:	881a      	ldrh	r2, [r3, #0]
 8001e50:	4b56      	ldr	r3, [pc, #344]	; (8001fac <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001e52:	fba3 1302 	umull	r1, r3, r3, r2
 8001e56:	0959      	lsrs	r1, r3, #5
 8001e58:	460b      	mov	r3, r1
 8001e5a:	011b      	lsls	r3, r3, #4
 8001e5c:	1a5b      	subs	r3, r3, r1
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	4b53      	ldr	r3, [pc, #332]	; (8001fb4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001e68:	701a      	strb	r2, [r3, #0]
			seq2_remaining_time_Hr  = (seq2_remaining_time_total_min/60);
 8001e6a:	4b4f      	ldr	r3, [pc, #316]	; (8001fa8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001e6c:	881b      	ldrh	r3, [r3, #0]
 8001e6e:	4a4f      	ldr	r2, [pc, #316]	; (8001fac <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001e70:	fba2 2303 	umull	r2, r3, r2, r3
 8001e74:	095b      	lsrs	r3, r3, #5
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	4b4f      	ldr	r3, [pc, #316]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001e7c:	701a      	strb	r2, [r3, #0]
			seq2_remaining_time_min = (seq2_remaining_time_total_min%60);
 8001e7e:	4b4a      	ldr	r3, [pc, #296]	; (8001fa8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001e80:	881a      	ldrh	r2, [r3, #0]
 8001e82:	4b4a      	ldr	r3, [pc, #296]	; (8001fac <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001e84:	fba3 1302 	umull	r1, r3, r3, r2
 8001e88:	0959      	lsrs	r1, r3, #5
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	011b      	lsls	r3, r3, #4
 8001e8e:	1a5b      	subs	r3, r3, r1
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	4b48      	ldr	r3, [pc, #288]	; (8001fbc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001e9a:	701a      	strb	r2, [r3, #0]

		}

		if(++CountAT_Quench > 9)
 8001e9c:	4b48      	ldr	r3, [pc, #288]	; (8001fc0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	4b46      	ldr	r3, [pc, #280]	; (8001fc0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001ea6:	701a      	strb	r2, [r3, #0]
 8001ea8:	4b45      	ldr	r3, [pc, #276]	; (8001fc0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b09      	cmp	r3, #9
 8001eae:	f240 80aa 	bls.w	8002006 <HAL_TIM_PeriodElapsedCallback+0x2f2>
		{
			CountAT_Quench=0;
 8001eb2:	4b43      	ldr	r3, [pc, #268]	; (8001fc0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	701a      	strb	r2, [r3, #0]
			Read_Quench_IP_Start = 0;//(IO1PIN & (1<<25));
 8001eb8:	4b42      	ldr	r3, [pc, #264]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	801a      	strh	r2, [r3, #0]
			Read_Quench_IP_Stop  = 0;// (IO1PIN &(1<<24));
 8001ebe:	4b42      	ldr	r3, [pc, #264]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	801a      	strh	r2, [r3, #0]

			if((NewQuenchingReq)
 8001ec4:	4b41      	ldr	r3, [pc, #260]	; (8001fcc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d015      	beq.n	8001ef8 <HAL_TIM_PeriodElapsedCallback+0x1e4>
				&&(!Read_Quench_IP_Start)
 8001ecc:	4b3d      	ldr	r3, [pc, #244]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d111      	bne.n	8001ef8 <HAL_TIM_PeriodElapsedCallback+0x1e4>
				&&(status_to_server != 30)
 8001ed4:	4b3e      	ldr	r3, [pc, #248]	; (8001fd0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b1e      	cmp	r3, #30
 8001eda:	d00d      	beq.n	8001ef8 <HAL_TIM_PeriodElapsedCallback+0x1e4>
				&&(Status_Quench_Duration==0))
 8001edc:	4b3d      	ldr	r3, [pc, #244]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d109      	bne.n	8001ef8 <HAL_TIM_PeriodElapsedCallback+0x1e4>
			{
				NewQuenchingReq=0;
 8001ee4:	4b39      	ldr	r3, [pc, #228]	; (8001fcc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	701a      	strb	r2, [r3, #0]
				Status_Quench_Duration  = 1;
 8001eea:	4b3a      	ldr	r3, [pc, #232]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	701a      	strb	r2, [r3, #0]
				Quenching_Seconds_Cont = 0;
 8001ef0:	4b39      	ldr	r3, [pc, #228]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	801a      	strh	r2, [r3, #0]
 8001ef6:	e086      	b.n	8002006 <HAL_TIM_PeriodElapsedCallback+0x2f2>
			}
			else if((Status_Quench_Duration==1)&&(Read_Quench_IP_Stop))
 8001ef8:	4b36      	ldr	r3, [pc, #216]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d10a      	bne.n	8001f16 <HAL_TIM_PeriodElapsedCallback+0x202>
 8001f00:	4b31      	ldr	r3, [pc, #196]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d006      	beq.n	8001f16 <HAL_TIM_PeriodElapsedCallback+0x202>
			{
				Quenching_Seconds_Cont	 += 1;
 8001f08:	4b33      	ldr	r3, [pc, #204]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	4b31      	ldr	r3, [pc, #196]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001f12:	801a      	strh	r2, [r3, #0]
 8001f14:	e077      	b.n	8002006 <HAL_TIM_PeriodElapsedCallback+0x2f2>
			}
			else if((Status_Quench_Duration==1)&&(!Read_Quench_IP_Stop))
 8001f16:	4b2f      	ldr	r3, [pc, #188]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d10d      	bne.n	8001f3a <HAL_TIM_PeriodElapsedCallback+0x226>
 8001f1e:	4b2a      	ldr	r3, [pc, #168]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d109      	bne.n	8001f3a <HAL_TIM_PeriodElapsedCallback+0x226>
			{
				Quenching_Seconds_Cont	 += 1;
 8001f26:	4b2c      	ldr	r3, [pc, #176]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	4b2a      	ldr	r3, [pc, #168]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001f30:	801a      	strh	r2, [r3, #0]
				Status_Quench_Duration=2;
 8001f32:	4b28      	ldr	r3, [pc, #160]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001f34:	2202      	movs	r2, #2
 8001f36:	701a      	strb	r2, [r3, #0]
 8001f38:	e065      	b.n	8002006 <HAL_TIM_PeriodElapsedCallback+0x2f2>
			}
			else if((Status_Quench_Duration==2)&&(!Read_Quench_IP_Stop))
 8001f3a:	4b26      	ldr	r3, [pc, #152]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d14c      	bne.n	8001fdc <HAL_TIM_PeriodElapsedCallback+0x2c8>
 8001f42:	4b21      	ldr	r3, [pc, #132]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d148      	bne.n	8001fdc <HAL_TIM_PeriodElapsedCallback+0x2c8>
			{
				Quenching_Seconds_Cont	 += 1;
 8001f4a:	4b23      	ldr	r3, [pc, #140]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	4b21      	ldr	r3, [pc, #132]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001f54:	801a      	strh	r2, [r3, #0]
				Status_Quench_Duration=2;
 8001f56:	4b1f      	ldr	r3, [pc, #124]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001f58:	2202      	movs	r2, #2
 8001f5a:	701a      	strb	r2, [r3, #0]
 8001f5c:	e053      	b.n	8002006 <HAL_TIM_PeriodElapsedCallback+0x2f2>
 8001f5e:	bf00      	nop
 8001f60:	20000598 	.word	0x20000598
 8001f64:	20000101 	.word	0x20000101
 8001f68:	2000054c 	.word	0x2000054c
 8001f6c:	20000103 	.word	0x20000103
 8001f70:	20000105 	.word	0x20000105
 8001f74:	20000104 	.word	0x20000104
 8001f78:	48000800 	.word	0x48000800
 8001f7c:	20000102 	.word	0x20000102
 8001f80:	20000638 	.word	0x20000638
 8001f84:	20000637 	.word	0x20000637
 8001f88:	2000011c 	.word	0x2000011c
 8001f8c:	2000010a 	.word	0x2000010a
 8001f90:	2000063e 	.word	0x2000063e
 8001f94:	20000639 	.word	0x20000639
 8001f98:	2000011d 	.word	0x2000011d
 8001f9c:	2000010c 	.word	0x2000010c
 8001fa0:	20000640 	.word	0x20000640
 8001fa4:	2000010e 	.word	0x2000010e
 8001fa8:	20000110 	.word	0x20000110
 8001fac:	88888889 	.word	0x88888889
 8001fb0:	20000112 	.word	0x20000112
 8001fb4:	20000113 	.word	0x20000113
 8001fb8:	20000114 	.word	0x20000114
 8001fbc:	20000115 	.word	0x20000115
 8001fc0:	20000106 	.word	0x20000106
 8001fc4:	20000116 	.word	0x20000116
 8001fc8:	20000118 	.word	0x20000118
 8001fcc:	20000623 	.word	0x20000623
 8001fd0:	20000624 	.word	0x20000624
 8001fd4:	20000107 	.word	0x20000107
 8001fd8:	2000011a 	.word	0x2000011a
			}
			else if((Status_Quench_Duration==2)&&(Read_Quench_IP_Stop))
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d110      	bne.n	8002006 <HAL_TIM_PeriodElapsedCallback+0x2f2>
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00c      	beq.n	8002006 <HAL_TIM_PeriodElapsedCallback+0x2f2>
			{
				Quenching_Seconds_Cont	 += 1;
 8001fec:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	4b08      	ldr	r3, [pc, #32]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001ff6:	801a      	strh	r2, [r3, #0]
				Status_Quench_Duration=0;
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
				Write_memory_Once=1;
 8001ffe:	4b07      	ldr	r3, [pc, #28]	; (800201c <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002000:	2201      	movs	r2, #1
 8002002:	701a      	strb	r2, [r3, #0]
			}
		 }

	}
 
 }
 8002004:	e7ff      	b.n	8002006 <HAL_TIM_PeriodElapsedCallback+0x2f2>
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000107 	.word	0x20000107
 8002014:	20000118 	.word	0x20000118
 8002018:	2000011a 	.word	0x2000011a
 800201c:	20000108 	.word	0x20000108

08002020 <HAL_UART_RxCpltCallback>:

extern uint8_t Rxseqdecoder;
extern void ESPRxDecoder(unsigned char Rxwifi_data,unsigned char Rxseqdecoder);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	if(huart == &hlpuart1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a8d      	ldr	r2, [pc, #564]	; (8002260 <HAL_UART_RxCpltCallback+0x240>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d10c      	bne.n	800204a <HAL_UART_RxCpltCallback+0x2a>
	{
		ESPRxDecoder(rxTempBuff[0],Rxseqdecoder);
 8002030:	4b8c      	ldr	r3, [pc, #560]	; (8002264 <HAL_UART_RxCpltCallback+0x244>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	4a8c      	ldr	r2, [pc, #560]	; (8002268 <HAL_UART_RxCpltCallback+0x248>)
 8002036:	7812      	ldrb	r2, [r2, #0]
 8002038:	4611      	mov	r1, r2
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe fae2 	bl	8000604 <ESPRxDecoder>

		HAL_UART_Receive_IT(&hlpuart1,rxTempBuff,1);
 8002040:	2201      	movs	r2, #1
 8002042:	4988      	ldr	r1, [pc, #544]	; (8002264 <HAL_UART_RxCpltCallback+0x244>)
 8002044:	4886      	ldr	r0, [pc, #536]	; (8002260 <HAL_UART_RxCpltCallback+0x240>)
 8002046:	f00c f85f 	bl	800e108 <HAL_UART_Receive_IT>
	}

	if(huart == &huart1)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a87      	ldr	r2, [pc, #540]	; (800226c <HAL_UART_RxCpltCallback+0x24c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	f040 8102 	bne.w	8002258 <HAL_UART_RxCpltCallback+0x238>
	{
		if(((u8rxbuf[0]==0x01)||(u8rxbuf[0]==0x02)||(u8rxbuf[0]==0x03)||(u8rxbuf[0]==0x04))&&
 8002054:	4b86      	ldr	r3, [pc, #536]	; (8002270 <HAL_UART_RxCpltCallback+0x250>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d00b      	beq.n	8002074 <HAL_UART_RxCpltCallback+0x54>
 800205c:	4b84      	ldr	r3, [pc, #528]	; (8002270 <HAL_UART_RxCpltCallback+0x250>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d007      	beq.n	8002074 <HAL_UART_RxCpltCallback+0x54>
 8002064:	4b82      	ldr	r3, [pc, #520]	; (8002270 <HAL_UART_RxCpltCallback+0x250>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b03      	cmp	r3, #3
 800206a:	d003      	beq.n	8002074 <HAL_UART_RxCpltCallback+0x54>
 800206c:	4b80      	ldr	r3, [pc, #512]	; (8002270 <HAL_UART_RxCpltCallback+0x250>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b04      	cmp	r3, #4
 8002072:	d10b      	bne.n	800208c <HAL_UART_RxCpltCallback+0x6c>
				(rx_seq==0))
 8002074:	4b7f      	ldr	r3, [pc, #508]	; (8002274 <HAL_UART_RxCpltCallback+0x254>)
 8002076:	781b      	ldrb	r3, [r3, #0]
		if(((u8rxbuf[0]==0x01)||(u8rxbuf[0]==0x02)||(u8rxbuf[0]==0x03)||(u8rxbuf[0]==0x04))&&
 8002078:	2b00      	cmp	r3, #0
 800207a:	d107      	bne.n	800208c <HAL_UART_RxCpltCallback+0x6c>
		{
			rx_seq=1;
 800207c:	4b7d      	ldr	r3, [pc, #500]	; (8002274 <HAL_UART_RxCpltCallback+0x254>)
 800207e:	2201      	movs	r2, #1
 8002080:	701a      	strb	r2, [r3, #0]
			rx_meter_id = u8rxbuf[0];
 8002082:	4b7b      	ldr	r3, [pc, #492]	; (8002270 <HAL_UART_RxCpltCallback+0x250>)
 8002084:	781a      	ldrb	r2, [r3, #0]
 8002086:	4b7c      	ldr	r3, [pc, #496]	; (8002278 <HAL_UART_RxCpltCallback+0x258>)
 8002088:	701a      	strb	r2, [r3, #0]
 800208a:	e099      	b.n	80021c0 <HAL_UART_RxCpltCallback+0x1a0>
		}
		else if((rx_seq==1)&&(u8rxbuf[0]==0x03))
 800208c:	4b79      	ldr	r3, [pc, #484]	; (8002274 <HAL_UART_RxCpltCallback+0x254>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d107      	bne.n	80020a4 <HAL_UART_RxCpltCallback+0x84>
 8002094:	4b76      	ldr	r3, [pc, #472]	; (8002270 <HAL_UART_RxCpltCallback+0x250>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b03      	cmp	r3, #3
 800209a:	d103      	bne.n	80020a4 <HAL_UART_RxCpltCallback+0x84>
		{
			rx_seq=2;
 800209c:	4b75      	ldr	r3, [pc, #468]	; (8002274 <HAL_UART_RxCpltCallback+0x254>)
 800209e:	2202      	movs	r2, #2
 80020a0:	701a      	strb	r2, [r3, #0]
 80020a2:	e08d      	b.n	80021c0 <HAL_UART_RxCpltCallback+0x1a0>
		}
		else if((rx_seq==2)&&(u8rxbuf[0]==0x01))
 80020a4:	4b73      	ldr	r3, [pc, #460]	; (8002274 <HAL_UART_RxCpltCallback+0x254>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d107      	bne.n	80020bc <HAL_UART_RxCpltCallback+0x9c>
 80020ac:	4b70      	ldr	r3, [pc, #448]	; (8002270 <HAL_UART_RxCpltCallback+0x250>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d103      	bne.n	80020bc <HAL_UART_RxCpltCallback+0x9c>
		{
			rx_seq=3;
 80020b4:	4b6f      	ldr	r3, [pc, #444]	; (8002274 <HAL_UART_RxCpltCallback+0x254>)
 80020b6:	2203      	movs	r2, #3
 80020b8:	701a      	strb	r2, [r3, #0]
 80020ba:	e081      	b.n	80021c0 <HAL_UART_RxCpltCallback+0x1a0>
		}
		else if(rx_seq==3)
 80020bc:	4b6d      	ldr	r3, [pc, #436]	; (8002274 <HAL_UART_RxCpltCallback+0x254>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	d107      	bne.n	80020d4 <HAL_UART_RxCpltCallback+0xb4>
		{
			rx_msb_h_data =u8rxbuf[0];
 80020c4:	4b6a      	ldr	r3, [pc, #424]	; (8002270 <HAL_UART_RxCpltCallback+0x250>)
 80020c6:	781a      	ldrb	r2, [r3, #0]
 80020c8:	4b6c      	ldr	r3, [pc, #432]	; (800227c <HAL_UART_RxCpltCallback+0x25c>)
 80020ca:	701a      	strb	r2, [r3, #0]
			rx_seq=4;
 80020cc:	4b69      	ldr	r3, [pc, #420]	; (8002274 <HAL_UART_RxCpltCallback+0x254>)
 80020ce:	2204      	movs	r2, #4
 80020d0:	701a      	strb	r2, [r3, #0]
 80020d2:	e075      	b.n	80021c0 <HAL_UART_RxCpltCallback+0x1a0>
		}
		else if(rx_seq==4)
 80020d4:	4b67      	ldr	r3, [pc, #412]	; (8002274 <HAL_UART_RxCpltCallback+0x254>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b04      	cmp	r3, #4
 80020da:	d107      	bne.n	80020ec <HAL_UART_RxCpltCallback+0xcc>
		{
			rx_seq=5;
 80020dc:	4b65      	ldr	r3, [pc, #404]	; (8002274 <HAL_UART_RxCpltCallback+0x254>)
 80020de:	2205      	movs	r2, #5
 80020e0:	701a      	strb	r2, [r3, #0]
			rx_msb_data = u8rxbuf[0];
 80020e2:	4b63      	ldr	r3, [pc, #396]	; (8002270 <HAL_UART_RxCpltCallback+0x250>)
 80020e4:	781a      	ldrb	r2, [r3, #0]
 80020e6:	4b66      	ldr	r3, [pc, #408]	; (8002280 <HAL_UART_RxCpltCallback+0x260>)
 80020e8:	701a      	strb	r2, [r3, #0]
 80020ea:	e069      	b.n	80021c0 <HAL_UART_RxCpltCallback+0x1a0>
		}
		else if(rx_seq==5)
 80020ec:	4b61      	ldr	r3, [pc, #388]	; (8002274 <HAL_UART_RxCpltCallback+0x254>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b05      	cmp	r3, #5
 80020f2:	d162      	bne.n	80021ba <HAL_UART_RxCpltCallback+0x19a>
		{
			rx_lsb_data =u8rxbuf[0];
 80020f4:	4b5e      	ldr	r3, [pc, #376]	; (8002270 <HAL_UART_RxCpltCallback+0x250>)
 80020f6:	781a      	ldrb	r2, [r3, #0]
 80020f8:	4b62      	ldr	r3, [pc, #392]	; (8002284 <HAL_UART_RxCpltCallback+0x264>)
 80020fa:	701a      	strb	r2, [r3, #0]
			if(rx_meter_id==1){act_temperature_c1 = (rx_msb_h_data<<16 |rx_msb_data<<8 | rx_lsb_data); }
 80020fc:	4b5e      	ldr	r3, [pc, #376]	; (8002278 <HAL_UART_RxCpltCallback+0x258>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d112      	bne.n	800212a <HAL_UART_RxCpltCallback+0x10a>
 8002104:	4b5d      	ldr	r3, [pc, #372]	; (800227c <HAL_UART_RxCpltCallback+0x25c>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	041b      	lsls	r3, r3, #16
 800210a:	b21a      	sxth	r2, r3
 800210c:	4b5c      	ldr	r3, [pc, #368]	; (8002280 <HAL_UART_RxCpltCallback+0x260>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	021b      	lsls	r3, r3, #8
 8002112:	b21b      	sxth	r3, r3
 8002114:	4313      	orrs	r3, r2
 8002116:	b21a      	sxth	r2, r3
 8002118:	4b5a      	ldr	r3, [pc, #360]	; (8002284 <HAL_UART_RxCpltCallback+0x264>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b21b      	sxth	r3, r3
 800211e:	4313      	orrs	r3, r2
 8002120:	b21b      	sxth	r3, r3
 8002122:	b29a      	uxth	r2, r3
 8002124:	4b58      	ldr	r3, [pc, #352]	; (8002288 <HAL_UART_RxCpltCallback+0x268>)
 8002126:	801a      	strh	r2, [r3, #0]
 8002128:	e043      	b.n	80021b2 <HAL_UART_RxCpltCallback+0x192>
			else if(rx_meter_id==2){act_temperature_c2 = (rx_msb_h_data<<16 |rx_msb_data<<8 | rx_lsb_data); }
 800212a:	4b53      	ldr	r3, [pc, #332]	; (8002278 <HAL_UART_RxCpltCallback+0x258>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b02      	cmp	r3, #2
 8002130:	d112      	bne.n	8002158 <HAL_UART_RxCpltCallback+0x138>
 8002132:	4b52      	ldr	r3, [pc, #328]	; (800227c <HAL_UART_RxCpltCallback+0x25c>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	041b      	lsls	r3, r3, #16
 8002138:	b21a      	sxth	r2, r3
 800213a:	4b51      	ldr	r3, [pc, #324]	; (8002280 <HAL_UART_RxCpltCallback+0x260>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	021b      	lsls	r3, r3, #8
 8002140:	b21b      	sxth	r3, r3
 8002142:	4313      	orrs	r3, r2
 8002144:	b21a      	sxth	r2, r3
 8002146:	4b4f      	ldr	r3, [pc, #316]	; (8002284 <HAL_UART_RxCpltCallback+0x264>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	b21b      	sxth	r3, r3
 800214c:	4313      	orrs	r3, r2
 800214e:	b21b      	sxth	r3, r3
 8002150:	b29a      	uxth	r2, r3
 8002152:	4b4e      	ldr	r3, [pc, #312]	; (800228c <HAL_UART_RxCpltCallback+0x26c>)
 8002154:	801a      	strh	r2, [r3, #0]
 8002156:	e02c      	b.n	80021b2 <HAL_UART_RxCpltCallback+0x192>
			else if(rx_meter_id==3){act_temperature_c3 = (rx_msb_h_data<<16 |rx_msb_data<<8 | rx_lsb_data); }
 8002158:	4b47      	ldr	r3, [pc, #284]	; (8002278 <HAL_UART_RxCpltCallback+0x258>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b03      	cmp	r3, #3
 800215e:	d112      	bne.n	8002186 <HAL_UART_RxCpltCallback+0x166>
 8002160:	4b46      	ldr	r3, [pc, #280]	; (800227c <HAL_UART_RxCpltCallback+0x25c>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	041b      	lsls	r3, r3, #16
 8002166:	b21a      	sxth	r2, r3
 8002168:	4b45      	ldr	r3, [pc, #276]	; (8002280 <HAL_UART_RxCpltCallback+0x260>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	021b      	lsls	r3, r3, #8
 800216e:	b21b      	sxth	r3, r3
 8002170:	4313      	orrs	r3, r2
 8002172:	b21a      	sxth	r2, r3
 8002174:	4b43      	ldr	r3, [pc, #268]	; (8002284 <HAL_UART_RxCpltCallback+0x264>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	b21b      	sxth	r3, r3
 800217a:	4313      	orrs	r3, r2
 800217c:	b21b      	sxth	r3, r3
 800217e:	b29a      	uxth	r2, r3
 8002180:	4b43      	ldr	r3, [pc, #268]	; (8002290 <HAL_UART_RxCpltCallback+0x270>)
 8002182:	801a      	strh	r2, [r3, #0]
 8002184:	e015      	b.n	80021b2 <HAL_UART_RxCpltCallback+0x192>
			else if(rx_meter_id==4){act_temperature_c4 = (rx_msb_h_data<<16 |rx_msb_data<<8 | rx_lsb_data); }
 8002186:	4b3c      	ldr	r3, [pc, #240]	; (8002278 <HAL_UART_RxCpltCallback+0x258>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b04      	cmp	r3, #4
 800218c:	d111      	bne.n	80021b2 <HAL_UART_RxCpltCallback+0x192>
 800218e:	4b3b      	ldr	r3, [pc, #236]	; (800227c <HAL_UART_RxCpltCallback+0x25c>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	041b      	lsls	r3, r3, #16
 8002194:	b21a      	sxth	r2, r3
 8002196:	4b3a      	ldr	r3, [pc, #232]	; (8002280 <HAL_UART_RxCpltCallback+0x260>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	021b      	lsls	r3, r3, #8
 800219c:	b21b      	sxth	r3, r3
 800219e:	4313      	orrs	r3, r2
 80021a0:	b21a      	sxth	r2, r3
 80021a2:	4b38      	ldr	r3, [pc, #224]	; (8002284 <HAL_UART_RxCpltCallback+0x264>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	b21b      	sxth	r3, r3
 80021a8:	4313      	orrs	r3, r2
 80021aa:	b21b      	sxth	r3, r3
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	4b39      	ldr	r3, [pc, #228]	; (8002294 <HAL_UART_RxCpltCallback+0x274>)
 80021b0:	801a      	strh	r2, [r3, #0]
			else{}
			rx_seq=0;
 80021b2:	4b30      	ldr	r3, [pc, #192]	; (8002274 <HAL_UART_RxCpltCallback+0x254>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	701a      	strb	r2, [r3, #0]
 80021b8:	e002      	b.n	80021c0 <HAL_UART_RxCpltCallback+0x1a0>
		}
		else
		{
			rx_seq=0;
 80021ba:	4b2e      	ldr	r3, [pc, #184]	; (8002274 <HAL_UART_RxCpltCallback+0x254>)
 80021bc:	2200      	movs	r2, #0
 80021be:	701a      	strb	r2, [r3, #0]
		}

		if((u8rxbuf[0] == 0x05)&&(rx_seq_1 == 0x0))
 80021c0:	4b2b      	ldr	r3, [pc, #172]	; (8002270 <HAL_UART_RxCpltCallback+0x250>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b05      	cmp	r3, #5
 80021c6:	d107      	bne.n	80021d8 <HAL_UART_RxCpltCallback+0x1b8>
 80021c8:	4b33      	ldr	r3, [pc, #204]	; (8002298 <HAL_UART_RxCpltCallback+0x278>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d103      	bne.n	80021d8 <HAL_UART_RxCpltCallback+0x1b8>
		{
			rx_seq_1=1;
 80021d0:	4b31      	ldr	r3, [pc, #196]	; (8002298 <HAL_UART_RxCpltCallback+0x278>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	701a      	strb	r2, [r3, #0]
 80021d6:	e03a      	b.n	800224e <HAL_UART_RxCpltCallback+0x22e>
		}
		else if((u8rxbuf[0] == 0x03)&&(rx_seq_1 == 0x1))
 80021d8:	4b25      	ldr	r3, [pc, #148]	; (8002270 <HAL_UART_RxCpltCallback+0x250>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b03      	cmp	r3, #3
 80021de:	d107      	bne.n	80021f0 <HAL_UART_RxCpltCallback+0x1d0>
 80021e0:	4b2d      	ldr	r3, [pc, #180]	; (8002298 <HAL_UART_RxCpltCallback+0x278>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d103      	bne.n	80021f0 <HAL_UART_RxCpltCallback+0x1d0>
		{
			rx_seq_1=2;
 80021e8:	4b2b      	ldr	r3, [pc, #172]	; (8002298 <HAL_UART_RxCpltCallback+0x278>)
 80021ea:	2202      	movs	r2, #2
 80021ec:	701a      	strb	r2, [r3, #0]
 80021ee:	e02e      	b.n	800224e <HAL_UART_RxCpltCallback+0x22e>
		}
		else if((rx_seq_1==2)&&(u8rxbuf[0]==0x08))
 80021f0:	4b29      	ldr	r3, [pc, #164]	; (8002298 <HAL_UART_RxCpltCallback+0x278>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d107      	bne.n	8002208 <HAL_UART_RxCpltCallback+0x1e8>
 80021f8:	4b1d      	ldr	r3, [pc, #116]	; (8002270 <HAL_UART_RxCpltCallback+0x250>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	d103      	bne.n	8002208 <HAL_UART_RxCpltCallback+0x1e8>
		{
			rx_seq_1=3;
 8002200:	4b25      	ldr	r3, [pc, #148]	; (8002298 <HAL_UART_RxCpltCallback+0x278>)
 8002202:	2203      	movs	r2, #3
 8002204:	701a      	strb	r2, [r3, #0]
 8002206:	e022      	b.n	800224e <HAL_UART_RxCpltCallback+0x22e>
		}
		else if(rx_seq_1==3)
 8002208:	4b23      	ldr	r3, [pc, #140]	; (8002298 <HAL_UART_RxCpltCallback+0x278>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b03      	cmp	r3, #3
 800220e:	d107      	bne.n	8002220 <HAL_UART_RxCpltCallback+0x200>
		{
			rx_msb_data_w =u8rxbuf[0];
 8002210:	4b17      	ldr	r3, [pc, #92]	; (8002270 <HAL_UART_RxCpltCallback+0x250>)
 8002212:	781a      	ldrb	r2, [r3, #0]
 8002214:	4b21      	ldr	r3, [pc, #132]	; (800229c <HAL_UART_RxCpltCallback+0x27c>)
 8002216:	701a      	strb	r2, [r3, #0]
			rx_seq_1=4;
 8002218:	4b1f      	ldr	r3, [pc, #124]	; (8002298 <HAL_UART_RxCpltCallback+0x278>)
 800221a:	2204      	movs	r2, #4
 800221c:	701a      	strb	r2, [r3, #0]
 800221e:	e016      	b.n	800224e <HAL_UART_RxCpltCallback+0x22e>
		}
		else if(rx_seq_1==4)
 8002220:	4b1d      	ldr	r3, [pc, #116]	; (8002298 <HAL_UART_RxCpltCallback+0x278>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b04      	cmp	r3, #4
 8002226:	d112      	bne.n	800224e <HAL_UART_RxCpltCallback+0x22e>
		{
			rx_seq_1=5;
 8002228:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <HAL_UART_RxCpltCallback+0x278>)
 800222a:	2205      	movs	r2, #5
 800222c:	701a      	strb	r2, [r3, #0]
			rx_lsb_data_w = u8rxbuf[0];
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <HAL_UART_RxCpltCallback+0x250>)
 8002230:	781a      	ldrb	r2, [r3, #0]
 8002232:	4b1b      	ldr	r3, [pc, #108]	; (80022a0 <HAL_UART_RxCpltCallback+0x280>)
 8002234:	701a      	strb	r2, [r3, #0]
			water_temperature = (rx_msb_data_w<<8 | rx_lsb_data_w);
 8002236:	4b19      	ldr	r3, [pc, #100]	; (800229c <HAL_UART_RxCpltCallback+0x27c>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	021b      	lsls	r3, r3, #8
 800223c:	b21a      	sxth	r2, r3
 800223e:	4b18      	ldr	r3, [pc, #96]	; (80022a0 <HAL_UART_RxCpltCallback+0x280>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	b21b      	sxth	r3, r3
 8002244:	4313      	orrs	r3, r2
 8002246:	b21b      	sxth	r3, r3
 8002248:	b29a      	uxth	r2, r3
 800224a:	4b16      	ldr	r3, [pc, #88]	; (80022a4 <HAL_UART_RxCpltCallback+0x284>)
 800224c:	801a      	strh	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart1,u8rxbuf,1);
 800224e:	2201      	movs	r2, #1
 8002250:	4907      	ldr	r1, [pc, #28]	; (8002270 <HAL_UART_RxCpltCallback+0x250>)
 8002252:	4806      	ldr	r0, [pc, #24]	; (800226c <HAL_UART_RxCpltCallback+0x24c>)
 8002254:	f00b ff58 	bl	800e108 <HAL_UART_Receive_IT>
	}
}
 8002258:	bf00      	nop
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	200002ac 	.word	0x200002ac
 8002264:	200005e4 	.word	0x200005e4
 8002268:	20000763 	.word	0x20000763
 800226c:	20000330 	.word	0x20000330
 8002270:	2000064c 	.word	0x2000064c
 8002274:	20000250 	.word	0x20000250
 8002278:	20000251 	.word	0x20000251
 800227c:	2000024f 	.word	0x2000024f
 8002280:	2000024d 	.word	0x2000024d
 8002284:	2000024e 	.word	0x2000024e
 8002288:	2000062e 	.word	0x2000062e
 800228c:	20000630 	.word	0x20000630
 8002290:	20000632 	.word	0x20000632
 8002294:	20000634 	.word	0x20000634
 8002298:	20000252 	.word	0x20000252
 800229c:	20000253 	.word	0x20000253
 80022a0:	20000254 	.word	0x20000254
 80022a4:	20000256 	.word	0x20000256

080022a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022ac:	f008 fc04 	bl	800aab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022b0:	f000 f84c 	bl	800234c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022b4:	f000 faba 	bl	800282c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80022b8:	f000 f936 	bl	8002528 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80022bc:	f000 f898 	bl	80023f0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80022c0:	f000 f902 	bl	80024c8 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80022c4:	f000 fa44 	bl	8002750 <MX_TIM6_Init>
  MX_SPI2_Init();
 80022c8:	f000 f9a6 	bl	8002618 <MX_SPI2_Init>
  MX_TIM1_Init();
 80022cc:	f000 f9ec 	bl	80026a8 <MX_TIM1_Init>
  MX_LPUART1_UART_Init();
 80022d0:	f000 f8ce 	bl	8002470 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 80022d4:	f000 f958 	bl	8002588 <MX_SPI1_Init>
  MX_TIM7_Init();
 80022d8:	f000 fa70 	bl	80027bc <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80022dc:	4814      	ldr	r0, [pc, #80]	; (8002330 <main+0x88>)
 80022de:	f00b fa71 	bl	800d7c4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80022e2:	4814      	ldr	r0, [pc, #80]	; (8002334 <main+0x8c>)
 80022e4:	f00b fa6e 	bl	800d7c4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 80022e8:	4813      	ldr	r0, [pc, #76]	; (8002338 <main+0x90>)
 80022ea:	f00b fa1f 	bl	800d72c <HAL_TIM_Base_Start>
//  for(i=0;i<=250;i++)
//  {
//	  data[i]=i;
//  }

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80022ee:	2200      	movs	r2, #0
 80022f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022f8:	f008 ff80 	bl	800b1fc <HAL_GPIO_WritePin>
  HAL_Delay(2);
 80022fc:	2002      	movs	r0, #2
 80022fe:	f008 fc4f 	bl	800aba0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002302:	2201      	movs	r2, #1
 8002304:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800230c:	f008 ff76 	bl	800b1fc <HAL_GPIO_WritePin>
/*Ethernet Init
  wiz5500Init();*/

  W25qxx_Init();
 8002310:	f000 ff68 	bl	80031e4 <W25qxx_Init>
  //rtc_set_time(13,14,30);
  //rtc_set_date(2,20,2,23);
  HAL_UART_Receive_IT(&huart1,u8rxbuf,1);
 8002314:	2201      	movs	r2, #1
 8002316:	4909      	ldr	r1, [pc, #36]	; (800233c <main+0x94>)
 8002318:	4809      	ldr	r0, [pc, #36]	; (8002340 <main+0x98>)
 800231a:	f00b fef5 	bl	800e108 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&hlpuart1,rxTempBuff,1);
 800231e:	2201      	movs	r2, #1
 8002320:	4908      	ldr	r1, [pc, #32]	; (8002344 <main+0x9c>)
 8002322:	4809      	ldr	r0, [pc, #36]	; (8002348 <main+0xa0>)
 8002324:	f00b fef0 	bl	800e108 <HAL_UART_Receive_IT>
  while (1)
  {
	  cppMain();
 8002328:	f008 fb4c 	bl	800a9c4 <cppMain>
 800232c:	e7fc      	b.n	8002328 <main+0x80>
 800232e:	bf00      	nop
 8002330:	2000054c 	.word	0x2000054c
 8002334:	20000598 	.word	0x20000598
 8002338:	20000500 	.word	0x20000500
 800233c:	2000064c 	.word	0x2000064c
 8002340:	20000330 	.word	0x20000330
 8002344:	200005e4 	.word	0x200005e4
 8002348:	200002ac 	.word	0x200002ac

0800234c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b096      	sub	sp, #88	; 0x58
 8002350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002352:	f107 0314 	add.w	r3, r7, #20
 8002356:	2244      	movs	r2, #68	; 0x44
 8002358:	2100      	movs	r1, #0
 800235a:	4618      	mov	r0, r3
 800235c:	f00d fa04 	bl	800f768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002360:	463b      	mov	r3, r7
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	605a      	str	r2, [r3, #4]
 8002368:	609a      	str	r2, [r3, #8]
 800236a:	60da      	str	r2, [r3, #12]
 800236c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800236e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002372:	f009 f8a9 	bl	800b4c8 <HAL_PWREx_ControlVoltageScaling>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800237c:	f000 fb48 	bl	8002a10 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002380:	2310      	movs	r3, #16
 8002382:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002384:	2301      	movs	r3, #1
 8002386:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800238c:	2360      	movs	r3, #96	; 0x60
 800238e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002390:	2302      	movs	r3, #2
 8002392:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002394:	2301      	movs	r3, #1
 8002396:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002398:	2301      	movs	r3, #1
 800239a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 86;
 800239c:	2356      	movs	r3, #86	; 0x56
 800239e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80023a0:	2307      	movs	r3, #7
 80023a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80023a4:	2302      	movs	r3, #2
 80023a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 80023a8:	2308      	movs	r3, #8
 80023aa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023ac:	f107 0314 	add.w	r3, r7, #20
 80023b0:	4618      	mov	r0, r3
 80023b2:	f009 f8df 	bl	800b574 <HAL_RCC_OscConfig>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80023bc:	f000 fb28 	bl	8002a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023c0:	230f      	movs	r3, #15
 80023c2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023c4:	2303      	movs	r3, #3
 80023c6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023d0:	2300      	movs	r3, #0
 80023d2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023d4:	463b      	mov	r3, r7
 80023d6:	2102      	movs	r1, #2
 80023d8:	4618      	mov	r0, r3
 80023da:	f009 fcdf 	bl	800bd9c <HAL_RCC_ClockConfig>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80023e4:	f000 fb14 	bl	8002a10 <Error_Handler>
  }
}
 80023e8:	bf00      	nop
 80023ea:	3758      	adds	r7, #88	; 0x58
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023f4:	4b1b      	ldr	r3, [pc, #108]	; (8002464 <MX_I2C1_Init+0x74>)
 80023f6:	4a1c      	ldr	r2, [pc, #112]	; (8002468 <MX_I2C1_Init+0x78>)
 80023f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00A0A7FD;
 80023fa:	4b1a      	ldr	r3, [pc, #104]	; (8002464 <MX_I2C1_Init+0x74>)
 80023fc:	4a1b      	ldr	r2, [pc, #108]	; (800246c <MX_I2C1_Init+0x7c>)
 80023fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002400:	4b18      	ldr	r3, [pc, #96]	; (8002464 <MX_I2C1_Init+0x74>)
 8002402:	2200      	movs	r2, #0
 8002404:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002406:	4b17      	ldr	r3, [pc, #92]	; (8002464 <MX_I2C1_Init+0x74>)
 8002408:	2201      	movs	r2, #1
 800240a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800240c:	4b15      	ldr	r3, [pc, #84]	; (8002464 <MX_I2C1_Init+0x74>)
 800240e:	2200      	movs	r2, #0
 8002410:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002412:	4b14      	ldr	r3, [pc, #80]	; (8002464 <MX_I2C1_Init+0x74>)
 8002414:	2200      	movs	r2, #0
 8002416:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002418:	4b12      	ldr	r3, [pc, #72]	; (8002464 <MX_I2C1_Init+0x74>)
 800241a:	2200      	movs	r2, #0
 800241c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800241e:	4b11      	ldr	r3, [pc, #68]	; (8002464 <MX_I2C1_Init+0x74>)
 8002420:	2200      	movs	r2, #0
 8002422:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002424:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <MX_I2C1_Init+0x74>)
 8002426:	2200      	movs	r2, #0
 8002428:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800242a:	480e      	ldr	r0, [pc, #56]	; (8002464 <MX_I2C1_Init+0x74>)
 800242c:	f008 ff18 	bl	800b260 <HAL_I2C_Init>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002436:	f000 faeb 	bl	8002a10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800243a:	2100      	movs	r1, #0
 800243c:	4809      	ldr	r0, [pc, #36]	; (8002464 <MX_I2C1_Init+0x74>)
 800243e:	f008 ff9e 	bl	800b37e <HAL_I2CEx_ConfigAnalogFilter>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002448:	f000 fae2 	bl	8002a10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800244c:	2100      	movs	r1, #0
 800244e:	4805      	ldr	r0, [pc, #20]	; (8002464 <MX_I2C1_Init+0x74>)
 8002450:	f008 ffe0 	bl	800b414 <HAL_I2CEx_ConfigDigitalFilter>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800245a:	f000 fad9 	bl	8002a10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000258 	.word	0x20000258
 8002468:	40005400 	.word	0x40005400
 800246c:	00a0a7fd 	.word	0x00a0a7fd

08002470 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002474:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <MX_LPUART1_UART_Init+0x50>)
 8002476:	4a13      	ldr	r2, [pc, #76]	; (80024c4 <MX_LPUART1_UART_Init+0x54>)
 8002478:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800247a:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <MX_LPUART1_UART_Init+0x50>)
 800247c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002480:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002482:	4b0f      	ldr	r3, [pc, #60]	; (80024c0 <MX_LPUART1_UART_Init+0x50>)
 8002484:	2200      	movs	r2, #0
 8002486:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002488:	4b0d      	ldr	r3, [pc, #52]	; (80024c0 <MX_LPUART1_UART_Init+0x50>)
 800248a:	2200      	movs	r2, #0
 800248c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800248e:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <MX_LPUART1_UART_Init+0x50>)
 8002490:	2200      	movs	r2, #0
 8002492:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002494:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <MX_LPUART1_UART_Init+0x50>)
 8002496:	220c      	movs	r2, #12
 8002498:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800249a:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <MX_LPUART1_UART_Init+0x50>)
 800249c:	2200      	movs	r2, #0
 800249e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024a0:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <MX_LPUART1_UART_Init+0x50>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <MX_LPUART1_UART_Init+0x50>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80024ac:	4804      	ldr	r0, [pc, #16]	; (80024c0 <MX_LPUART1_UART_Init+0x50>)
 80024ae:	f00b fd6f 	bl	800df90 <HAL_UART_Init>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80024b8:	f000 faaa 	bl	8002a10 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80024bc:	bf00      	nop
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	200002ac 	.word	0x200002ac
 80024c4:	40008000 	.word	0x40008000

080024c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024cc:	4b14      	ldr	r3, [pc, #80]	; (8002520 <MX_USART1_UART_Init+0x58>)
 80024ce:	4a15      	ldr	r2, [pc, #84]	; (8002524 <MX_USART1_UART_Init+0x5c>)
 80024d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80024d2:	4b13      	ldr	r3, [pc, #76]	; (8002520 <MX_USART1_UART_Init+0x58>)
 80024d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80024d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024da:	4b11      	ldr	r3, [pc, #68]	; (8002520 <MX_USART1_UART_Init+0x58>)
 80024dc:	2200      	movs	r2, #0
 80024de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024e0:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <MX_USART1_UART_Init+0x58>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024e6:	4b0e      	ldr	r3, [pc, #56]	; (8002520 <MX_USART1_UART_Init+0x58>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024ec:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <MX_USART1_UART_Init+0x58>)
 80024ee:	220c      	movs	r2, #12
 80024f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024f2:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <MX_USART1_UART_Init+0x58>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024f8:	4b09      	ldr	r3, [pc, #36]	; (8002520 <MX_USART1_UART_Init+0x58>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024fe:	4b08      	ldr	r3, [pc, #32]	; (8002520 <MX_USART1_UART_Init+0x58>)
 8002500:	2200      	movs	r2, #0
 8002502:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002504:	4b06      	ldr	r3, [pc, #24]	; (8002520 <MX_USART1_UART_Init+0x58>)
 8002506:	2200      	movs	r2, #0
 8002508:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800250a:	4805      	ldr	r0, [pc, #20]	; (8002520 <MX_USART1_UART_Init+0x58>)
 800250c:	f00b fd40 	bl	800df90 <HAL_UART_Init>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002516:	f000 fa7b 	bl	8002a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	20000330 	.word	0x20000330
 8002524:	40013800 	.word	0x40013800

08002528 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800252c:	4b14      	ldr	r3, [pc, #80]	; (8002580 <MX_USART2_UART_Init+0x58>)
 800252e:	4a15      	ldr	r2, [pc, #84]	; (8002584 <MX_USART2_UART_Init+0x5c>)
 8002530:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002532:	4b13      	ldr	r3, [pc, #76]	; (8002580 <MX_USART2_UART_Init+0x58>)
 8002534:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002538:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800253a:	4b11      	ldr	r3, [pc, #68]	; (8002580 <MX_USART2_UART_Init+0x58>)
 800253c:	2200      	movs	r2, #0
 800253e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002540:	4b0f      	ldr	r3, [pc, #60]	; (8002580 <MX_USART2_UART_Init+0x58>)
 8002542:	2200      	movs	r2, #0
 8002544:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002546:	4b0e      	ldr	r3, [pc, #56]	; (8002580 <MX_USART2_UART_Init+0x58>)
 8002548:	2200      	movs	r2, #0
 800254a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <MX_USART2_UART_Init+0x58>)
 800254e:	220c      	movs	r2, #12
 8002550:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002552:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <MX_USART2_UART_Init+0x58>)
 8002554:	2200      	movs	r2, #0
 8002556:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002558:	4b09      	ldr	r3, [pc, #36]	; (8002580 <MX_USART2_UART_Init+0x58>)
 800255a:	2200      	movs	r2, #0
 800255c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800255e:	4b08      	ldr	r3, [pc, #32]	; (8002580 <MX_USART2_UART_Init+0x58>)
 8002560:	2200      	movs	r2, #0
 8002562:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002564:	4b06      	ldr	r3, [pc, #24]	; (8002580 <MX_USART2_UART_Init+0x58>)
 8002566:	2200      	movs	r2, #0
 8002568:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800256a:	4805      	ldr	r0, [pc, #20]	; (8002580 <MX_USART2_UART_Init+0x58>)
 800256c:	f00b fd10 	bl	800df90 <HAL_UART_Init>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002576:	f000 fa4b 	bl	8002a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	200003b4 	.word	0x200003b4
 8002584:	40004400 	.word	0x40004400

08002588 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800258c:	4b1f      	ldr	r3, [pc, #124]	; (800260c <MX_SPI1_Init+0x84>)
 800258e:	4a20      	ldr	r2, [pc, #128]	; (8002610 <MX_SPI1_Init+0x88>)
 8002590:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002592:	4b1e      	ldr	r3, [pc, #120]	; (800260c <MX_SPI1_Init+0x84>)
 8002594:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002598:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800259a:	4b1c      	ldr	r3, [pc, #112]	; (800260c <MX_SPI1_Init+0x84>)
 800259c:	2200      	movs	r2, #0
 800259e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025a0:	4b1a      	ldr	r3, [pc, #104]	; (800260c <MX_SPI1_Init+0x84>)
 80025a2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80025a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025a8:	4b18      	ldr	r3, [pc, #96]	; (800260c <MX_SPI1_Init+0x84>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025ae:	4b17      	ldr	r3, [pc, #92]	; (800260c <MX_SPI1_Init+0x84>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025b4:	4b15      	ldr	r3, [pc, #84]	; (800260c <MX_SPI1_Init+0x84>)
 80025b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80025bc:	4b13      	ldr	r3, [pc, #76]	; (800260c <MX_SPI1_Init+0x84>)
 80025be:	2210      	movs	r2, #16
 80025c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025c2:	4b12      	ldr	r3, [pc, #72]	; (800260c <MX_SPI1_Init+0x84>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025c8:	4b10      	ldr	r3, [pc, #64]	; (800260c <MX_SPI1_Init+0x84>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025ce:	4b0f      	ldr	r3, [pc, #60]	; (800260c <MX_SPI1_Init+0x84>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80025d4:	4b0d      	ldr	r3, [pc, #52]	; (800260c <MX_SPI1_Init+0x84>)
 80025d6:	2207      	movs	r2, #7
 80025d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80025da:	4b0c      	ldr	r3, [pc, #48]	; (800260c <MX_SPI1_Init+0x84>)
 80025dc:	2200      	movs	r2, #0
 80025de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80025e0:	4b0a      	ldr	r3, [pc, #40]	; (800260c <MX_SPI1_Init+0x84>)
 80025e2:	2208      	movs	r2, #8
 80025e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025e6:	4809      	ldr	r0, [pc, #36]	; (800260c <MX_SPI1_Init+0x84>)
 80025e8:	f00a f938 	bl	800c85c <HAL_SPI_Init>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80025f2:	f000 fa0d 	bl	8002a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi2);
 80025f6:	4b07      	ldr	r3, [pc, #28]	; (8002614 <MX_SPI1_Init+0x8c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	4b05      	ldr	r3, [pc, #20]	; (8002614 <MX_SPI1_Init+0x8c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002604:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000438 	.word	0x20000438
 8002610:	40013000 	.word	0x40013000
 8002614:	2000049c 	.word	0x2000049c

08002618 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800261c:	4b1f      	ldr	r3, [pc, #124]	; (800269c <MX_SPI2_Init+0x84>)
 800261e:	4a20      	ldr	r2, [pc, #128]	; (80026a0 <MX_SPI2_Init+0x88>)
 8002620:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002622:	4b1e      	ldr	r3, [pc, #120]	; (800269c <MX_SPI2_Init+0x84>)
 8002624:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002628:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800262a:	4b1c      	ldr	r3, [pc, #112]	; (800269c <MX_SPI2_Init+0x84>)
 800262c:	2200      	movs	r2, #0
 800262e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002630:	4b1a      	ldr	r3, [pc, #104]	; (800269c <MX_SPI2_Init+0x84>)
 8002632:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002636:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002638:	4b18      	ldr	r3, [pc, #96]	; (800269c <MX_SPI2_Init+0x84>)
 800263a:	2200      	movs	r2, #0
 800263c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800263e:	4b17      	ldr	r3, [pc, #92]	; (800269c <MX_SPI2_Init+0x84>)
 8002640:	2200      	movs	r2, #0
 8002642:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002644:	4b15      	ldr	r3, [pc, #84]	; (800269c <MX_SPI2_Init+0x84>)
 8002646:	f44f 7200 	mov.w	r2, #512	; 0x200
 800264a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800264c:	4b13      	ldr	r3, [pc, #76]	; (800269c <MX_SPI2_Init+0x84>)
 800264e:	2208      	movs	r2, #8
 8002650:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002652:	4b12      	ldr	r3, [pc, #72]	; (800269c <MX_SPI2_Init+0x84>)
 8002654:	2200      	movs	r2, #0
 8002656:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002658:	4b10      	ldr	r3, [pc, #64]	; (800269c <MX_SPI2_Init+0x84>)
 800265a:	2200      	movs	r2, #0
 800265c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800265e:	4b0f      	ldr	r3, [pc, #60]	; (800269c <MX_SPI2_Init+0x84>)
 8002660:	2200      	movs	r2, #0
 8002662:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002664:	4b0d      	ldr	r3, [pc, #52]	; (800269c <MX_SPI2_Init+0x84>)
 8002666:	2207      	movs	r2, #7
 8002668:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800266a:	4b0c      	ldr	r3, [pc, #48]	; (800269c <MX_SPI2_Init+0x84>)
 800266c:	2200      	movs	r2, #0
 800266e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002670:	4b0a      	ldr	r3, [pc, #40]	; (800269c <MX_SPI2_Init+0x84>)
 8002672:	2208      	movs	r2, #8
 8002674:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002676:	4809      	ldr	r0, [pc, #36]	; (800269c <MX_SPI2_Init+0x84>)
 8002678:	f00a f8f0 	bl	800c85c <HAL_SPI_Init>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002682:	f000 f9c5 	bl	8002a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8002686:	4b07      	ldr	r3, [pc, #28]	; (80026a4 <MX_SPI2_Init+0x8c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <MX_SPI2_Init+0x8c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002694:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI2_Init 2 */

}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	2000049c 	.word	0x2000049c
 80026a0:	40003800 	.word	0x40003800
 80026a4:	20000438 	.word	0x20000438

080026a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ae:	f107 0310 	add.w	r3, r7, #16
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	605a      	str	r2, [r3, #4]
 80026b8:	609a      	str	r2, [r3, #8]
 80026ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026bc:	1d3b      	adds	r3, r7, #4
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	605a      	str	r2, [r3, #4]
 80026c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026c6:	4b20      	ldr	r3, [pc, #128]	; (8002748 <MX_TIM1_Init+0xa0>)
 80026c8:	4a20      	ldr	r2, [pc, #128]	; (800274c <MX_TIM1_Init+0xa4>)
 80026ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80026cc:	4b1e      	ldr	r3, [pc, #120]	; (8002748 <MX_TIM1_Init+0xa0>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d2:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <MX_TIM1_Init+0xa0>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80026d8:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <MX_TIM1_Init+0xa0>)
 80026da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026e0:	4b19      	ldr	r3, [pc, #100]	; (8002748 <MX_TIM1_Init+0xa0>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026e6:	4b18      	ldr	r3, [pc, #96]	; (8002748 <MX_TIM1_Init+0xa0>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ec:	4b16      	ldr	r3, [pc, #88]	; (8002748 <MX_TIM1_Init+0xa0>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80026f2:	4815      	ldr	r0, [pc, #84]	; (8002748 <MX_TIM1_Init+0xa0>)
 80026f4:	f00a ffc2 	bl	800d67c <HAL_TIM_Base_Init>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80026fe:	f000 f987 	bl	8002a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002706:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002708:	f107 0310 	add.w	r3, r7, #16
 800270c:	4619      	mov	r1, r3
 800270e:	480e      	ldr	r0, [pc, #56]	; (8002748 <MX_TIM1_Init+0xa0>)
 8002710:	f00b f9cb 	bl	800daaa <HAL_TIM_ConfigClockSource>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800271a:	f000 f979 	bl	8002a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800271e:	2300      	movs	r3, #0
 8002720:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002722:	2300      	movs	r3, #0
 8002724:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800272a:	1d3b      	adds	r3, r7, #4
 800272c:	4619      	mov	r1, r3
 800272e:	4806      	ldr	r0, [pc, #24]	; (8002748 <MX_TIM1_Init+0xa0>)
 8002730:	f00b fbaa 	bl	800de88 <HAL_TIMEx_MasterConfigSynchronization>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800273a:	f000 f969 	bl	8002a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800273e:	bf00      	nop
 8002740:	3720      	adds	r7, #32
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20000500 	.word	0x20000500
 800274c:	40012c00 	.word	0x40012c00

08002750 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002756:	1d3b      	adds	r3, r7, #4
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002760:	4b14      	ldr	r3, [pc, #80]	; (80027b4 <MX_TIM6_Init+0x64>)
 8002762:	4a15      	ldr	r2, [pc, #84]	; (80027b8 <MX_TIM6_Init+0x68>)
 8002764:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 43000-1;
 8002766:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <MX_TIM6_Init+0x64>)
 8002768:	f24a 72f7 	movw	r2, #42999	; 0xa7f7
 800276c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800276e:	4b11      	ldr	r3, [pc, #68]	; (80027b4 <MX_TIM6_Init+0x64>)
 8002770:	2200      	movs	r2, #0
 8002772:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 8002774:	4b0f      	ldr	r3, [pc, #60]	; (80027b4 <MX_TIM6_Init+0x64>)
 8002776:	2264      	movs	r2, #100	; 0x64
 8002778:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800277a:	4b0e      	ldr	r3, [pc, #56]	; (80027b4 <MX_TIM6_Init+0x64>)
 800277c:	2200      	movs	r2, #0
 800277e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002780:	480c      	ldr	r0, [pc, #48]	; (80027b4 <MX_TIM6_Init+0x64>)
 8002782:	f00a ff7b 	bl	800d67c <HAL_TIM_Base_Init>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800278c:	f000 f940 	bl	8002a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002790:	2300      	movs	r3, #0
 8002792:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002794:	2300      	movs	r3, #0
 8002796:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002798:	1d3b      	adds	r3, r7, #4
 800279a:	4619      	mov	r1, r3
 800279c:	4805      	ldr	r0, [pc, #20]	; (80027b4 <MX_TIM6_Init+0x64>)
 800279e:	f00b fb73 	bl	800de88 <HAL_TIMEx_MasterConfigSynchronization>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80027a8:	f000 f932 	bl	8002a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80027ac:	bf00      	nop
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	2000054c 	.word	0x2000054c
 80027b8:	40001000 	.word	0x40001000

080027bc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027c2:	1d3b      	adds	r3, r7, #4
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80027cc:	4b15      	ldr	r3, [pc, #84]	; (8002824 <MX_TIM7_Init+0x68>)
 80027ce:	4a16      	ldr	r2, [pc, #88]	; (8002828 <MX_TIM7_Init+0x6c>)
 80027d0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 43000-1;
 80027d2:	4b14      	ldr	r3, [pc, #80]	; (8002824 <MX_TIM7_Init+0x68>)
 80027d4:	f24a 72f7 	movw	r2, #42999	; 0xa7f7
 80027d8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027da:	4b12      	ldr	r3, [pc, #72]	; (8002824 <MX_TIM7_Init+0x68>)
 80027dc:	2200      	movs	r2, #0
 80027de:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 80027e0:	4b10      	ldr	r3, [pc, #64]	; (8002824 <MX_TIM7_Init+0x68>)
 80027e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027e6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e8:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <MX_TIM7_Init+0x68>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80027ee:	480d      	ldr	r0, [pc, #52]	; (8002824 <MX_TIM7_Init+0x68>)
 80027f0:	f00a ff44 	bl	800d67c <HAL_TIM_Base_Init>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80027fa:	f000 f909 	bl	8002a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027fe:	2300      	movs	r3, #0
 8002800:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002802:	2300      	movs	r3, #0
 8002804:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002806:	1d3b      	adds	r3, r7, #4
 8002808:	4619      	mov	r1, r3
 800280a:	4806      	ldr	r0, [pc, #24]	; (8002824 <MX_TIM7_Init+0x68>)
 800280c:	f00b fb3c 	bl	800de88 <HAL_TIMEx_MasterConfigSynchronization>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8002816:	f000 f8fb 	bl	8002a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800281a:	bf00      	nop
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	20000598 	.word	0x20000598
 8002828:	40001400 	.word	0x40001400

0800282c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08a      	sub	sp, #40	; 0x28
 8002830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002832:	f107 0314 	add.w	r3, r7, #20
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	605a      	str	r2, [r3, #4]
 800283c:	609a      	str	r2, [r3, #8]
 800283e:	60da      	str	r2, [r3, #12]
 8002840:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002842:	4b6f      	ldr	r3, [pc, #444]	; (8002a00 <MX_GPIO_Init+0x1d4>)
 8002844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002846:	4a6e      	ldr	r2, [pc, #440]	; (8002a00 <MX_GPIO_Init+0x1d4>)
 8002848:	f043 0304 	orr.w	r3, r3, #4
 800284c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800284e:	4b6c      	ldr	r3, [pc, #432]	; (8002a00 <MX_GPIO_Init+0x1d4>)
 8002850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800285a:	4b69      	ldr	r3, [pc, #420]	; (8002a00 <MX_GPIO_Init+0x1d4>)
 800285c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285e:	4a68      	ldr	r2, [pc, #416]	; (8002a00 <MX_GPIO_Init+0x1d4>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002866:	4b66      	ldr	r3, [pc, #408]	; (8002a00 <MX_GPIO_Init+0x1d4>)
 8002868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002872:	4b63      	ldr	r3, [pc, #396]	; (8002a00 <MX_GPIO_Init+0x1d4>)
 8002874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002876:	4a62      	ldr	r2, [pc, #392]	; (8002a00 <MX_GPIO_Init+0x1d4>)
 8002878:	f043 0302 	orr.w	r3, r3, #2
 800287c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800287e:	4b60      	ldr	r3, [pc, #384]	; (8002a00 <MX_GPIO_Init+0x1d4>)
 8002880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800288a:	4b5d      	ldr	r3, [pc, #372]	; (8002a00 <MX_GPIO_Init+0x1d4>)
 800288c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288e:	4a5c      	ldr	r2, [pc, #368]	; (8002a00 <MX_GPIO_Init+0x1d4>)
 8002890:	f043 0308 	orr.w	r3, r3, #8
 8002894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002896:	4b5a      	ldr	r3, [pc, #360]	; (8002a00 <MX_GPIO_Init+0x1d4>)
 8002898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	607b      	str	r3, [r7, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCDD6_Pin|LCDD5_Pin|LCDD4_Pin|LCDD3_Pin
 80028a2:	2200      	movs	r2, #0
 80028a4:	f64f 417f 	movw	r1, #64639	; 0xfc7f
 80028a8:	4856      	ldr	r0, [pc, #344]	; (8002a04 <MX_GPIO_Init+0x1d8>)
 80028aa:	f008 fca7 	bl	800b1fc <HAL_GPIO_WritePin>
                          |LCDD2_Pin|LCDD1_Pin|LCDD0_Pin|RELAY3_Pin
                          |RELAY4_Pin|W5500_INT_Pin|GLCDEN_Pin|GLCDCS2_Pin
                          |GLCDRW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RELAY2_Pin|LCDRS_Pin, GPIO_PIN_RESET);
 80028ae:	2200      	movs	r2, #0
 80028b0:	2112      	movs	r1, #18
 80028b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028b6:	f008 fca1 	bl	800b1fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _W25QXX_CS_PIN_Pin|WIFIRST_Pin|LCDD7_Pin, GPIO_PIN_RESET);
 80028ba:	2200      	movs	r2, #0
 80028bc:	2125      	movs	r1, #37	; 0x25
 80028be:	4852      	ldr	r0, [pc, #328]	; (8002a08 <MX_GPIO_Init+0x1dc>)
 80028c0:	f008 fc9c 	bl	800b1fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 80028c4:	2201      	movs	r2, #1
 80028c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028ca:	484f      	ldr	r0, [pc, #316]	; (8002a08 <MX_GPIO_Init+0x1dc>)
 80028cc:	f008 fc96 	bl	800b1fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500RST_GPIO_Port, W5500RST_Pin, GPIO_PIN_SET);
 80028d0:	2201      	movs	r2, #1
 80028d2:	2180      	movs	r1, #128	; 0x80
 80028d4:	484b      	ldr	r0, [pc, #300]	; (8002a04 <MX_GPIO_Init+0x1d8>)
 80028d6:	f008 fc91 	bl	800b1fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(InputMachine_GPIO_Port, InputMachine_Pin, GPIO_PIN_SET);
 80028da:	2201      	movs	r2, #1
 80028dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028e4:	f008 fc8a 	bl	800b1fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 80028e8:	2200      	movs	r2, #0
 80028ea:	2104      	movs	r1, #4
 80028ec:	4847      	ldr	r0, [pc, #284]	; (8002a0c <MX_GPIO_Init+0x1e0>)
 80028ee:	f008 fc85 	bl	800b1fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCDD6_Pin LCDD5_Pin LCDD4_Pin LCDD3_Pin
                           LCDD2_Pin LCDD1_Pin LCDD0_Pin RELAY3_Pin
                           RELAY4_Pin W5500_INT_Pin W5500RST_Pin */
  GPIO_InitStruct.Pin = LCDD6_Pin|LCDD5_Pin|LCDD4_Pin|LCDD3_Pin
 80028f2:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 80028f6:	617b      	str	r3, [r7, #20]
                          |LCDD2_Pin|LCDD1_Pin|LCDD0_Pin|RELAY3_Pin
                          |RELAY4_Pin|W5500_INT_Pin|W5500RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f8:	2301      	movs	r3, #1
 80028fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002900:	2300      	movs	r3, #0
 8002902:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002904:	f107 0314 	add.w	r3, r7, #20
 8002908:	4619      	mov	r1, r3
 800290a:	483e      	ldr	r0, [pc, #248]	; (8002a04 <MX_GPIO_Init+0x1d8>)
 800290c:	f008 fafc 	bl	800af08 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY2_Pin InputMachine_Pin */
  GPIO_InitStruct.Pin = RELAY2_Pin|InputMachine_Pin;
 8002910:	f241 0302 	movw	r3, #4098	; 0x1002
 8002914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002916:	2301      	movs	r3, #1
 8002918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291e:	2300      	movs	r3, #0
 8002920:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002922:	f107 0314 	add.w	r3, r7, #20
 8002926:	4619      	mov	r1, r3
 8002928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800292c:	f008 faec 	bl	800af08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCDRS_Pin */
  GPIO_InitStruct.Pin = LCDRS_Pin;
 8002930:	2310      	movs	r3, #16
 8002932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002934:	2301      	movs	r3, #1
 8002936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002938:	2301      	movs	r3, #1
 800293a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293c:	2300      	movs	r3, #0
 800293e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCDRS_GPIO_Port, &GPIO_InitStruct);
 8002940:	f107 0314 	add.w	r3, r7, #20
 8002944:	4619      	mov	r1, r3
 8002946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800294a:	f008 fadd 	bl	800af08 <HAL_GPIO_Init>

  /*Configure GPIO pins : _W25QXX_CS_PIN_Pin WIFIRST_Pin LCDD7_Pin */
  GPIO_InitStruct.Pin = _W25QXX_CS_PIN_Pin|WIFIRST_Pin|LCDD7_Pin;
 800294e:	2325      	movs	r3, #37	; 0x25
 8002950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002952:	2301      	movs	r3, #1
 8002954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002956:	2300      	movs	r3, #0
 8002958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295a:	2300      	movs	r3, #0
 800295c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800295e:	f107 0314 	add.w	r3, r7, #20
 8002962:	4619      	mov	r1, r3
 8002964:	4828      	ldr	r0, [pc, #160]	; (8002a08 <MX_GPIO_Init+0x1dc>)
 8002966:	f008 facf 	bl	800af08 <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_CS_Pin */
  GPIO_InitStruct.Pin = W5500_CS_Pin;
 800296a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800296e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002970:	2301      	movs	r3, #1
 8002972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002974:	2300      	movs	r3, #0
 8002976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002978:	2302      	movs	r3, #2
 800297a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(W5500_CS_GPIO_Port, &GPIO_InitStruct);
 800297c:	f107 0314 	add.w	r3, r7, #20
 8002980:	4619      	mov	r1, r3
 8002982:	4821      	ldr	r0, [pc, #132]	; (8002a08 <MX_GPIO_Init+0x1dc>)
 8002984:	f008 fac0 	bl	800af08 <HAL_GPIO_Init>

  /*Configure GPIO pins : InputMachine1_Pin InputMachine2_Pin */
  GPIO_InitStruct.Pin = InputMachine1_Pin|InputMachine2_Pin;
 8002988:	f44f 7340 	mov.w	r3, #768	; 0x300
 800298c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800298e:	2300      	movs	r3, #0
 8002990:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002992:	2300      	movs	r3, #0
 8002994:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002996:	f107 0314 	add.w	r3, r7, #20
 800299a:	4619      	mov	r1, r3
 800299c:	4819      	ldr	r0, [pc, #100]	; (8002a04 <MX_GPIO_Init+0x1d8>)
 800299e:	f008 fab3 	bl	800af08 <HAL_GPIO_Init>

  /*Configure GPIO pins : InputMachine3_Pin InputMachine4_Pin InputMachine5_Pin InputMachine6_Pin */
  GPIO_InitStruct.Pin = InputMachine3_Pin|InputMachine4_Pin|InputMachine5_Pin|InputMachine6_Pin;
 80029a2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80029a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029a8:	2300      	movs	r3, #0
 80029aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b0:	f107 0314 	add.w	r3, r7, #20
 80029b4:	4619      	mov	r1, r3
 80029b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029ba:	f008 faa5 	bl	800af08 <HAL_GPIO_Init>

  /*Configure GPIO pins : GLCDEN_Pin GLCDCS2_Pin GLCDRW_Pin */
  GPIO_InitStruct.Pin = GLCDEN_Pin|GLCDCS2_Pin|GLCDRW_Pin;
 80029be:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80029c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c4:	2301      	movs	r3, #1
 80029c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029c8:	2301      	movs	r3, #1
 80029ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029cc:	2300      	movs	r3, #0
 80029ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029d0:	f107 0314 	add.w	r3, r7, #20
 80029d4:	4619      	mov	r1, r3
 80029d6:	480b      	ldr	r0, [pc, #44]	; (8002a04 <MX_GPIO_Init+0x1d8>)
 80029d8:	f008 fa96 	bl	800af08 <HAL_GPIO_Init>

  /*Configure GPIO pin : GLCDCS1_Pin */
  GPIO_InitStruct.Pin = GLCDCS1_Pin;
 80029dc:	2304      	movs	r3, #4
 80029de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029e0:	2301      	movs	r3, #1
 80029e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029e4:	2301      	movs	r3, #1
 80029e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e8:	2300      	movs	r3, #0
 80029ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GLCDCS1_GPIO_Port, &GPIO_InitStruct);
 80029ec:	f107 0314 	add.w	r3, r7, #20
 80029f0:	4619      	mov	r1, r3
 80029f2:	4806      	ldr	r0, [pc, #24]	; (8002a0c <MX_GPIO_Init+0x1e0>)
 80029f4:	f008 fa88 	bl	800af08 <HAL_GPIO_Init>

}
 80029f8:	bf00      	nop
 80029fa:	3728      	adds	r7, #40	; 0x28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40021000 	.word	0x40021000
 8002a04:	48000800 	.word	0x48000800
 8002a08:	48000400 	.word	0x48000400
 8002a0c:	48000c00 	.word	0x48000c00

08002a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a14:	b672      	cpsid	i
}
 8002a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a18:	e7fe      	b.n	8002a18 <Error_Handler+0x8>
	...

08002a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a22:	4b0f      	ldr	r3, [pc, #60]	; (8002a60 <HAL_MspInit+0x44>)
 8002a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a26:	4a0e      	ldr	r2, [pc, #56]	; (8002a60 <HAL_MspInit+0x44>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	6613      	str	r3, [r2, #96]	; 0x60
 8002a2e:	4b0c      	ldr	r3, [pc, #48]	; (8002a60 <HAL_MspInit+0x44>)
 8002a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	607b      	str	r3, [r7, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a3a:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <HAL_MspInit+0x44>)
 8002a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3e:	4a08      	ldr	r2, [pc, #32]	; (8002a60 <HAL_MspInit+0x44>)
 8002a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a44:	6593      	str	r3, [r2, #88]	; 0x58
 8002a46:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <HAL_MspInit+0x44>)
 8002a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4e:	603b      	str	r3, [r7, #0]
 8002a50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	40021000 	.word	0x40021000

08002a64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b0a2      	sub	sp, #136	; 0x88
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	60da      	str	r2, [r3, #12]
 8002a7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a7c:	f107 0314 	add.w	r3, r7, #20
 8002a80:	2260      	movs	r2, #96	; 0x60
 8002a82:	2100      	movs	r1, #0
 8002a84:	4618      	mov	r0, r3
 8002a86:	f00c fe6f 	bl	800f768 <memset>
  if(hi2c->Instance==I2C1)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a20      	ldr	r2, [pc, #128]	; (8002b10 <HAL_I2C_MspInit+0xac>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d138      	bne.n	8002b06 <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002a94:	2340      	movs	r3, #64	; 0x40
 8002a96:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a9c:	f107 0314 	add.w	r3, r7, #20
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f009 fb9f 	bl	800c1e4 <HAL_RCCEx_PeriphCLKConfig>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002aac:	f7ff ffb0 	bl	8002a10 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab0:	4b18      	ldr	r3, [pc, #96]	; (8002b14 <HAL_I2C_MspInit+0xb0>)
 8002ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab4:	4a17      	ldr	r2, [pc, #92]	; (8002b14 <HAL_I2C_MspInit+0xb0>)
 8002ab6:	f043 0302 	orr.w	r3, r3, #2
 8002aba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002abc:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <HAL_I2C_MspInit+0xb0>)
 8002abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ac8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002acc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ace:	2312      	movs	r3, #18
 8002ad0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002adc:	2304      	movs	r3, #4
 8002ade:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	480b      	ldr	r0, [pc, #44]	; (8002b18 <HAL_I2C_MspInit+0xb4>)
 8002aea:	f008 fa0d 	bl	800af08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002aee:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <HAL_I2C_MspInit+0xb0>)
 8002af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af2:	4a08      	ldr	r2, [pc, #32]	; (8002b14 <HAL_I2C_MspInit+0xb0>)
 8002af4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002af8:	6593      	str	r3, [r2, #88]	; 0x58
 8002afa:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <HAL_I2C_MspInit+0xb0>)
 8002afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b06:	bf00      	nop
 8002b08:	3788      	adds	r7, #136	; 0x88
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40005400 	.word	0x40005400
 8002b14:	40021000 	.word	0x40021000
 8002b18:	48000400 	.word	0x48000400

08002b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b0a6      	sub	sp, #152	; 0x98
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b24:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	60da      	str	r2, [r3, #12]
 8002b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b38:	2260      	movs	r2, #96	; 0x60
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f00c fe13 	bl	800f768 <memset>
  if(huart->Instance==LPUART1)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a6b      	ldr	r2, [pc, #428]	; (8002cf4 <HAL_UART_MspInit+0x1d8>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d144      	bne.n	8002bd6 <HAL_UART_MspInit+0xba>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002b4c:	2320      	movs	r3, #32
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002b50:	2300      	movs	r3, #0
 8002b52:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f009 fb43 	bl	800c1e4 <HAL_RCCEx_PeriphCLKConfig>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b64:	f7ff ff54 	bl	8002a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002b68:	4b63      	ldr	r3, [pc, #396]	; (8002cf8 <HAL_UART_MspInit+0x1dc>)
 8002b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6c:	4a62      	ldr	r2, [pc, #392]	; (8002cf8 <HAL_UART_MspInit+0x1dc>)
 8002b6e:	f043 0301 	orr.w	r3, r3, #1
 8002b72:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002b74:	4b60      	ldr	r3, [pc, #384]	; (8002cf8 <HAL_UART_MspInit+0x1dc>)
 8002b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	623b      	str	r3, [r7, #32]
 8002b7e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b80:	4b5d      	ldr	r3, [pc, #372]	; (8002cf8 <HAL_UART_MspInit+0x1dc>)
 8002b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b84:	4a5c      	ldr	r2, [pc, #368]	; (8002cf8 <HAL_UART_MspInit+0x1dc>)
 8002b86:	f043 0302 	orr.w	r3, r3, #2
 8002b8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b8c:	4b5a      	ldr	r3, [pc, #360]	; (8002cf8 <HAL_UART_MspInit+0x1dc>)
 8002b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	61fb      	str	r3, [r7, #28]
 8002b96:	69fb      	ldr	r3, [r7, #28]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b98:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bac:	2303      	movs	r3, #3
 8002bae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002bb2:	2308      	movs	r3, #8
 8002bb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	484f      	ldr	r0, [pc, #316]	; (8002cfc <HAL_UART_MspInit+0x1e0>)
 8002bc0:	f008 f9a2 	bl	800af08 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	2046      	movs	r0, #70	; 0x46
 8002bca:	f008 f8e8 	bl	800ad9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002bce:	2046      	movs	r0, #70	; 0x46
 8002bd0:	f008 f901 	bl	800add6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002bd4:	e089      	b.n	8002cea <HAL_UART_MspInit+0x1ce>
  else if(huart->Instance==USART1)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a49      	ldr	r2, [pc, #292]	; (8002d00 <HAL_UART_MspInit+0x1e4>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d143      	bne.n	8002c68 <HAL_UART_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002be0:	2301      	movs	r3, #1
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002be4:	2300      	movs	r3, #0
 8002be6:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bec:	4618      	mov	r0, r3
 8002bee:	f009 faf9 	bl	800c1e4 <HAL_RCCEx_PeriphCLKConfig>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8002bf8:	f7ff ff0a 	bl	8002a10 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bfc:	4b3e      	ldr	r3, [pc, #248]	; (8002cf8 <HAL_UART_MspInit+0x1dc>)
 8002bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c00:	4a3d      	ldr	r2, [pc, #244]	; (8002cf8 <HAL_UART_MspInit+0x1dc>)
 8002c02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c06:	6613      	str	r3, [r2, #96]	; 0x60
 8002c08:	4b3b      	ldr	r3, [pc, #236]	; (8002cf8 <HAL_UART_MspInit+0x1dc>)
 8002c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c10:	61bb      	str	r3, [r7, #24]
 8002c12:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c14:	4b38      	ldr	r3, [pc, #224]	; (8002cf8 <HAL_UART_MspInit+0x1dc>)
 8002c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c18:	4a37      	ldr	r2, [pc, #220]	; (8002cf8 <HAL_UART_MspInit+0x1dc>)
 8002c1a:	f043 0302 	orr.w	r3, r3, #2
 8002c1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c20:	4b35      	ldr	r3, [pc, #212]	; (8002cf8 <HAL_UART_MspInit+0x1dc>)
 8002c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	617b      	str	r3, [r7, #20]
 8002c2a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c2c:	23c0      	movs	r3, #192	; 0xc0
 8002c2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c32:	2302      	movs	r3, #2
 8002c34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c44:	2307      	movs	r3, #7
 8002c46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c4a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002c4e:	4619      	mov	r1, r3
 8002c50:	482a      	ldr	r0, [pc, #168]	; (8002cfc <HAL_UART_MspInit+0x1e0>)
 8002c52:	f008 f959 	bl	800af08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c56:	2200      	movs	r2, #0
 8002c58:	2100      	movs	r1, #0
 8002c5a:	2025      	movs	r0, #37	; 0x25
 8002c5c:	f008 f89f 	bl	800ad9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c60:	2025      	movs	r0, #37	; 0x25
 8002c62:	f008 f8b8 	bl	800add6 <HAL_NVIC_EnableIRQ>
}
 8002c66:	e040      	b.n	8002cea <HAL_UART_MspInit+0x1ce>
  else if(huart->Instance==USART2)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a25      	ldr	r2, [pc, #148]	; (8002d04 <HAL_UART_MspInit+0x1e8>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d13b      	bne.n	8002cea <HAL_UART_MspInit+0x1ce>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002c72:	2302      	movs	r3, #2
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002c76:	2300      	movs	r3, #0
 8002c78:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f009 fab0 	bl	800c1e4 <HAL_RCCEx_PeriphCLKConfig>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <HAL_UART_MspInit+0x172>
      Error_Handler();
 8002c8a:	f7ff fec1 	bl	8002a10 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c8e:	4b1a      	ldr	r3, [pc, #104]	; (8002cf8 <HAL_UART_MspInit+0x1dc>)
 8002c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c92:	4a19      	ldr	r2, [pc, #100]	; (8002cf8 <HAL_UART_MspInit+0x1dc>)
 8002c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c98:	6593      	str	r3, [r2, #88]	; 0x58
 8002c9a:	4b17      	ldr	r3, [pc, #92]	; (8002cf8 <HAL_UART_MspInit+0x1dc>)
 8002c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca2:	613b      	str	r3, [r7, #16]
 8002ca4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca6:	4b14      	ldr	r3, [pc, #80]	; (8002cf8 <HAL_UART_MspInit+0x1dc>)
 8002ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002caa:	4a13      	ldr	r2, [pc, #76]	; (8002cf8 <HAL_UART_MspInit+0x1dc>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cb2:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <HAL_UART_MspInit+0x1dc>)
 8002cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002cbe:	230c      	movs	r3, #12
 8002cc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cd6:	2307      	movs	r3, #7
 8002cd8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cdc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ce6:	f008 f90f 	bl	800af08 <HAL_GPIO_Init>
}
 8002cea:	bf00      	nop
 8002cec:	3798      	adds	r7, #152	; 0x98
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40008000 	.word	0x40008000
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	48000400 	.word	0x48000400
 8002d00:	40013800 	.word	0x40013800
 8002d04:	40004400 	.word	0x40004400

08002d08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08c      	sub	sp, #48	; 0x30
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d10:	f107 031c 	add.w	r3, r7, #28
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	60da      	str	r2, [r3, #12]
 8002d1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a2f      	ldr	r2, [pc, #188]	; (8002de4 <HAL_SPI_MspInit+0xdc>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d129      	bne.n	8002d7e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d2a:	4b2f      	ldr	r3, [pc, #188]	; (8002de8 <HAL_SPI_MspInit+0xe0>)
 8002d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d2e:	4a2e      	ldr	r2, [pc, #184]	; (8002de8 <HAL_SPI_MspInit+0xe0>)
 8002d30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d34:	6613      	str	r3, [r2, #96]	; 0x60
 8002d36:	4b2c      	ldr	r3, [pc, #176]	; (8002de8 <HAL_SPI_MspInit+0xe0>)
 8002d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d3e:	61bb      	str	r3, [r7, #24]
 8002d40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d42:	4b29      	ldr	r3, [pc, #164]	; (8002de8 <HAL_SPI_MspInit+0xe0>)
 8002d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d46:	4a28      	ldr	r2, [pc, #160]	; (8002de8 <HAL_SPI_MspInit+0xe0>)
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d4e:	4b26      	ldr	r3, [pc, #152]	; (8002de8 <HAL_SPI_MspInit+0xe0>)
 8002d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002d5a:	23e0      	movs	r3, #224	; 0xe0
 8002d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5e:	2302      	movs	r3, #2
 8002d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d62:	2300      	movs	r3, #0
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d66:	2303      	movs	r3, #3
 8002d68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d6a:	2305      	movs	r3, #5
 8002d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d6e:	f107 031c 	add.w	r3, r7, #28
 8002d72:	4619      	mov	r1, r3
 8002d74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d78:	f008 f8c6 	bl	800af08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002d7c:	e02d      	b.n	8002dda <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI2)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a1a      	ldr	r2, [pc, #104]	; (8002dec <HAL_SPI_MspInit+0xe4>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d128      	bne.n	8002dda <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d88:	4b17      	ldr	r3, [pc, #92]	; (8002de8 <HAL_SPI_MspInit+0xe0>)
 8002d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8c:	4a16      	ldr	r2, [pc, #88]	; (8002de8 <HAL_SPI_MspInit+0xe0>)
 8002d8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d92:	6593      	str	r3, [r2, #88]	; 0x58
 8002d94:	4b14      	ldr	r3, [pc, #80]	; (8002de8 <HAL_SPI_MspInit+0xe0>)
 8002d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d9c:	613b      	str	r3, [r7, #16]
 8002d9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002da0:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <HAL_SPI_MspInit+0xe0>)
 8002da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da4:	4a10      	ldr	r2, [pc, #64]	; (8002de8 <HAL_SPI_MspInit+0xe0>)
 8002da6:	f043 0302 	orr.w	r3, r3, #2
 8002daa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dac:	4b0e      	ldr	r3, [pc, #56]	; (8002de8 <HAL_SPI_MspInit+0xe0>)
 8002dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002db8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002dca:	2305      	movs	r3, #5
 8002dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dce:	f107 031c 	add.w	r3, r7, #28
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4806      	ldr	r0, [pc, #24]	; (8002df0 <HAL_SPI_MspInit+0xe8>)
 8002dd6:	f008 f897 	bl	800af08 <HAL_GPIO_Init>
}
 8002dda:	bf00      	nop
 8002ddc:	3730      	adds	r7, #48	; 0x30
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40013000 	.word	0x40013000
 8002de8:	40021000 	.word	0x40021000
 8002dec:	40003800 	.word	0x40003800
 8002df0:	48000400 	.word	0x48000400

08002df4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a23      	ldr	r2, [pc, #140]	; (8002e90 <HAL_TIM_Base_MspInit+0x9c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d10c      	bne.n	8002e20 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e06:	4b23      	ldr	r3, [pc, #140]	; (8002e94 <HAL_TIM_Base_MspInit+0xa0>)
 8002e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e0a:	4a22      	ldr	r2, [pc, #136]	; (8002e94 <HAL_TIM_Base_MspInit+0xa0>)
 8002e0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e10:	6613      	str	r3, [r2, #96]	; 0x60
 8002e12:	4b20      	ldr	r3, [pc, #128]	; (8002e94 <HAL_TIM_Base_MspInit+0xa0>)
 8002e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002e1e:	e032      	b.n	8002e86 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a1c      	ldr	r2, [pc, #112]	; (8002e98 <HAL_TIM_Base_MspInit+0xa4>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d114      	bne.n	8002e54 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002e2a:	4b1a      	ldr	r3, [pc, #104]	; (8002e94 <HAL_TIM_Base_MspInit+0xa0>)
 8002e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2e:	4a19      	ldr	r2, [pc, #100]	; (8002e94 <HAL_TIM_Base_MspInit+0xa0>)
 8002e30:	f043 0310 	orr.w	r3, r3, #16
 8002e34:	6593      	str	r3, [r2, #88]	; 0x58
 8002e36:	4b17      	ldr	r3, [pc, #92]	; (8002e94 <HAL_TIM_Base_MspInit+0xa0>)
 8002e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3a:	f003 0310 	and.w	r3, r3, #16
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002e42:	2200      	movs	r2, #0
 8002e44:	2100      	movs	r1, #0
 8002e46:	2036      	movs	r0, #54	; 0x36
 8002e48:	f007 ffa9 	bl	800ad9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e4c:	2036      	movs	r0, #54	; 0x36
 8002e4e:	f007 ffc2 	bl	800add6 <HAL_NVIC_EnableIRQ>
}
 8002e52:	e018      	b.n	8002e86 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM7)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a10      	ldr	r2, [pc, #64]	; (8002e9c <HAL_TIM_Base_MspInit+0xa8>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d113      	bne.n	8002e86 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002e5e:	4b0d      	ldr	r3, [pc, #52]	; (8002e94 <HAL_TIM_Base_MspInit+0xa0>)
 8002e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e62:	4a0c      	ldr	r2, [pc, #48]	; (8002e94 <HAL_TIM_Base_MspInit+0xa0>)
 8002e64:	f043 0320 	orr.w	r3, r3, #32
 8002e68:	6593      	str	r3, [r2, #88]	; 0x58
 8002e6a:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <HAL_TIM_Base_MspInit+0xa0>)
 8002e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6e:	f003 0320 	and.w	r3, r3, #32
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002e76:	2200      	movs	r2, #0
 8002e78:	2100      	movs	r1, #0
 8002e7a:	2037      	movs	r0, #55	; 0x37
 8002e7c:	f007 ff8f 	bl	800ad9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002e80:	2037      	movs	r0, #55	; 0x37
 8002e82:	f007 ffa8 	bl	800add6 <HAL_NVIC_EnableIRQ>
}
 8002e86:	bf00      	nop
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40012c00 	.word	0x40012c00
 8002e94:	40021000 	.word	0x40021000
 8002e98:	40001000 	.word	0x40001000
 8002e9c:	40001400 	.word	0x40001400

08002ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ea4:	e7fe      	b.n	8002ea4 <NMI_Handler+0x4>

08002ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eaa:	e7fe      	b.n	8002eaa <HardFault_Handler+0x4>

08002eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002eb0:	e7fe      	b.n	8002eb0 <MemManage_Handler+0x4>

08002eb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002eb6:	e7fe      	b.n	8002eb6 <BusFault_Handler+0x4>

08002eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ebc:	e7fe      	b.n	8002ebc <UsageFault_Handler+0x4>

08002ebe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ec2:	bf00      	nop
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ed0:	bf00      	nop
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eda:	b480      	push	{r7}
 8002edc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002eec:	f007 fe38 	bl	800ab60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ef0:	bf00      	nop
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ef8:	4802      	ldr	r0, [pc, #8]	; (8002f04 <USART1_IRQHandler+0x10>)
 8002efa:	f00b f95b 	bl	800e1b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002efe:	bf00      	nop
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	20000330 	.word	0x20000330

08002f08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f0c:	4802      	ldr	r0, [pc, #8]	; (8002f18 <TIM6_DAC_IRQHandler+0x10>)
 8002f0e:	f00a fcad 	bl	800d86c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f12:	bf00      	nop
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	2000054c 	.word	0x2000054c

08002f1c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002f20:	4802      	ldr	r0, [pc, #8]	; (8002f2c <TIM7_IRQHandler+0x10>)
 8002f22:	f00a fca3 	bl	800d86c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002f26:	bf00      	nop
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	20000598 	.word	0x20000598

08002f30 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002f34:	4802      	ldr	r0, [pc, #8]	; (8002f40 <LPUART1_IRQHandler+0x10>)
 8002f36:	f00b f93d 	bl	800e1b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002f3a:	bf00      	nop
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	200002ac 	.word	0x200002ac

08002f44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f4c:	4a14      	ldr	r2, [pc, #80]	; (8002fa0 <_sbrk+0x5c>)
 8002f4e:	4b15      	ldr	r3, [pc, #84]	; (8002fa4 <_sbrk+0x60>)
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f58:	4b13      	ldr	r3, [pc, #76]	; (8002fa8 <_sbrk+0x64>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d102      	bne.n	8002f66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f60:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <_sbrk+0x64>)
 8002f62:	4a12      	ldr	r2, [pc, #72]	; (8002fac <_sbrk+0x68>)
 8002f64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f66:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <_sbrk+0x64>)
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d207      	bcs.n	8002f84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f74:	f00c fbb8 	bl	800f6e8 <__errno>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	220c      	movs	r2, #12
 8002f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f82:	e009      	b.n	8002f98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f84:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <_sbrk+0x64>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f8a:	4b07      	ldr	r3, [pc, #28]	; (8002fa8 <_sbrk+0x64>)
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4413      	add	r3, r2
 8002f92:	4a05      	ldr	r2, [pc, #20]	; (8002fa8 <_sbrk+0x64>)
 8002f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f96:	68fb      	ldr	r3, [r7, #12]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	20010000 	.word	0x20010000
 8002fa4:	00000400 	.word	0x00000400
 8002fa8:	200005ec 	.word	0x200005ec
 8002fac:	20000790 	.word	0x20000790

08002fb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002fb4:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <SystemInit+0x20>)
 8002fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fba:	4a05      	ldr	r2, [pc, #20]	; (8002fd0 <SystemInit+0x20>)
 8002fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af02      	add	r7, sp, #8
 8002fda:	4603      	mov	r3, r0
 8002fdc:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8002fde:	f107 020f 	add.w	r2, r7, #15
 8002fe2:	1df9      	adds	r1, r7, #7
 8002fe4:	2364      	movs	r3, #100	; 0x64
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	2301      	movs	r3, #1
 8002fea:	4804      	ldr	r0, [pc, #16]	; (8002ffc <W25qxx_Spi+0x28>)
 8002fec:	f009 ff77 	bl	800cede <HAL_SPI_TransmitReceive>
	return ret;
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20000438 	.word	0x20000438

08003000 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8003006:	2300      	movs	r3, #0
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	2300      	movs	r3, #0
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	2300      	movs	r3, #0
 8003010:	607b      	str	r3, [r7, #4]
 8003012:	2300      	movs	r3, #0
 8003014:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003016:	2200      	movs	r2, #0
 8003018:	2101      	movs	r1, #1
 800301a:	4813      	ldr	r0, [pc, #76]	; (8003068 <W25qxx_ReadID+0x68>)
 800301c:	f008 f8ee 	bl	800b1fc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8003020:	209f      	movs	r0, #159	; 0x9f
 8003022:	f7ff ffd7 	bl	8002fd4 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003026:	20a5      	movs	r0, #165	; 0xa5
 8003028:	f7ff ffd4 	bl	8002fd4 <W25qxx_Spi>
 800302c:	4603      	mov	r3, r0
 800302e:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003030:	20a5      	movs	r0, #165	; 0xa5
 8003032:	f7ff ffcf 	bl	8002fd4 <W25qxx_Spi>
 8003036:	4603      	mov	r3, r0
 8003038:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800303a:	20a5      	movs	r0, #165	; 0xa5
 800303c:	f7ff ffca 	bl	8002fd4 <W25qxx_Spi>
 8003040:	4603      	mov	r3, r0
 8003042:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003044:	2201      	movs	r2, #1
 8003046:	2101      	movs	r1, #1
 8003048:	4807      	ldr	r0, [pc, #28]	; (8003068 <W25qxx_ReadID+0x68>)
 800304a:	f008 f8d7 	bl	800b1fc <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	041a      	lsls	r2, r3, #16
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	021b      	lsls	r3, r3, #8
 8003056:	4313      	orrs	r3, r2
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]
	return Temp;
 800305e:	68fb      	ldr	r3, [r7, #12]
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	48000400 	.word	0x48000400

0800306c <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 800306c:	b590      	push	{r4, r7, lr}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003072:	2200      	movs	r2, #0
 8003074:	2101      	movs	r1, #1
 8003076:	4816      	ldr	r0, [pc, #88]	; (80030d0 <W25qxx_ReadUniqID+0x64>)
 8003078:	f008 f8c0 	bl	800b1fc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 800307c:	204b      	movs	r0, #75	; 0x4b
 800307e:	f7ff ffa9 	bl	8002fd4 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003082:	2300      	movs	r3, #0
 8003084:	71fb      	strb	r3, [r7, #7]
 8003086:	e005      	b.n	8003094 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003088:	20a5      	movs	r0, #165	; 0xa5
 800308a:	f7ff ffa3 	bl	8002fd4 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	3301      	adds	r3, #1
 8003092:	71fb      	strb	r3, [r7, #7]
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	2b03      	cmp	r3, #3
 8003098:	d9f6      	bls.n	8003088 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 800309a:	2300      	movs	r3, #0
 800309c:	71bb      	strb	r3, [r7, #6]
 800309e:	e00b      	b.n	80030b8 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80030a0:	79bc      	ldrb	r4, [r7, #6]
 80030a2:	20a5      	movs	r0, #165	; 0xa5
 80030a4:	f7ff ff96 	bl	8002fd4 <W25qxx_Spi>
 80030a8:	4603      	mov	r3, r0
 80030aa:	461a      	mov	r2, r3
 80030ac:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <W25qxx_ReadUniqID+0x68>)
 80030ae:	4423      	add	r3, r4
 80030b0:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 80030b2:	79bb      	ldrb	r3, [r7, #6]
 80030b4:	3301      	adds	r3, #1
 80030b6:	71bb      	strb	r3, [r7, #6]
 80030b8:	79bb      	ldrb	r3, [r7, #6]
 80030ba:	2b07      	cmp	r3, #7
 80030bc:	d9f0      	bls.n	80030a0 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80030be:	2201      	movs	r2, #1
 80030c0:	2101      	movs	r1, #1
 80030c2:	4803      	ldr	r0, [pc, #12]	; (80030d0 <W25qxx_ReadUniqID+0x64>)
 80030c4:	f008 f89a 	bl	800b1fc <HAL_GPIO_WritePin>
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd90      	pop	{r4, r7, pc}
 80030d0:	48000400 	.word	0x48000400
 80030d4:	200005f0 	.word	0x200005f0

080030d8 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80030dc:	2200      	movs	r2, #0
 80030de:	2101      	movs	r1, #1
 80030e0:	4807      	ldr	r0, [pc, #28]	; (8003100 <W25qxx_WriteEnable+0x28>)
 80030e2:	f008 f88b 	bl	800b1fc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 80030e6:	2006      	movs	r0, #6
 80030e8:	f7ff ff74 	bl	8002fd4 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80030ec:	2201      	movs	r2, #1
 80030ee:	2101      	movs	r1, #1
 80030f0:	4803      	ldr	r0, [pc, #12]	; (8003100 <W25qxx_WriteEnable+0x28>)
 80030f2:	f008 f883 	bl	800b1fc <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 80030f6:	2001      	movs	r0, #1
 80030f8:	f007 fd52 	bl	800aba0 <HAL_Delay>
}
 80030fc:	bf00      	nop
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	48000400 	.word	0x48000400

08003104 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	4603      	mov	r3, r0
 800310c:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 800310e:	2300      	movs	r3, #0
 8003110:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003112:	2200      	movs	r2, #0
 8003114:	2101      	movs	r1, #1
 8003116:	481c      	ldr	r0, [pc, #112]	; (8003188 <W25qxx_ReadStatusRegister+0x84>)
 8003118:	f008 f870 	bl	800b1fc <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d10c      	bne.n	800313c <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8003122:	2005      	movs	r0, #5
 8003124:	f7ff ff56 	bl	8002fd4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003128:	20a5      	movs	r0, #165	; 0xa5
 800312a:	f7ff ff53 	bl	8002fd4 <W25qxx_Spi>
 800312e:	4603      	mov	r3, r0
 8003130:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8003132:	4a16      	ldr	r2, [pc, #88]	; (800318c <W25qxx_ReadStatusRegister+0x88>)
 8003134:	7bfb      	ldrb	r3, [r7, #15]
 8003136:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800313a:	e01b      	b.n	8003174 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 800313c:	79fb      	ldrb	r3, [r7, #7]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d10c      	bne.n	800315c <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8003142:	2035      	movs	r0, #53	; 0x35
 8003144:	f7ff ff46 	bl	8002fd4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003148:	20a5      	movs	r0, #165	; 0xa5
 800314a:	f7ff ff43 	bl	8002fd4 <W25qxx_Spi>
 800314e:	4603      	mov	r3, r0
 8003150:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8003152:	4a0e      	ldr	r2, [pc, #56]	; (800318c <W25qxx_ReadStatusRegister+0x88>)
 8003154:	7bfb      	ldrb	r3, [r7, #15]
 8003156:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 800315a:	e00b      	b.n	8003174 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 800315c:	2015      	movs	r0, #21
 800315e:	f7ff ff39 	bl	8002fd4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003162:	20a5      	movs	r0, #165	; 0xa5
 8003164:	f7ff ff36 	bl	8002fd4 <W25qxx_Spi>
 8003168:	4603      	mov	r3, r0
 800316a:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 800316c:	4a07      	ldr	r2, [pc, #28]	; (800318c <W25qxx_ReadStatusRegister+0x88>)
 800316e:	7bfb      	ldrb	r3, [r7, #15]
 8003170:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003174:	2201      	movs	r2, #1
 8003176:	2101      	movs	r1, #1
 8003178:	4803      	ldr	r0, [pc, #12]	; (8003188 <W25qxx_ReadStatusRegister+0x84>)
 800317a:	f008 f83f 	bl	800b1fc <HAL_GPIO_WritePin>
	return status;
 800317e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	48000400 	.word	0x48000400
 800318c:	200005f0 	.word	0x200005f0

08003190 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8003194:	2001      	movs	r0, #1
 8003196:	f007 fd03 	bl	800aba0 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800319a:	2200      	movs	r2, #0
 800319c:	2101      	movs	r1, #1
 800319e:	480f      	ldr	r0, [pc, #60]	; (80031dc <W25qxx_WaitForWriteEnd+0x4c>)
 80031a0:	f008 f82c 	bl	800b1fc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 80031a4:	2005      	movs	r0, #5
 80031a6:	f7ff ff15 	bl	8002fd4 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80031aa:	20a5      	movs	r0, #165	; 0xa5
 80031ac:	f7ff ff12 	bl	8002fd4 <W25qxx_Spi>
 80031b0:	4603      	mov	r3, r0
 80031b2:	461a      	mov	r2, r3
 80031b4:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <W25qxx_WaitForWriteEnd+0x50>)
 80031b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 80031ba:	2001      	movs	r0, #1
 80031bc:	f007 fcf0 	bl	800aba0 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 80031c0:	4b07      	ldr	r3, [pc, #28]	; (80031e0 <W25qxx_WaitForWriteEnd+0x50>)
 80031c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1ed      	bne.n	80031aa <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80031ce:	2201      	movs	r2, #1
 80031d0:	2101      	movs	r1, #1
 80031d2:	4802      	ldr	r0, [pc, #8]	; (80031dc <W25qxx_WaitForWriteEnd+0x4c>)
 80031d4:	f008 f812 	bl	800b1fc <HAL_GPIO_WritePin>
}
 80031d8:	bf00      	nop
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	48000400 	.word	0x48000400
 80031e0:	200005f0 	.word	0x200005f0

080031e4 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 80031ea:	4b65      	ldr	r3, [pc, #404]	; (8003380 <W25qxx_Init+0x19c>)
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 80031f2:	e002      	b.n	80031fa <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 80031f4:	2001      	movs	r0, #1
 80031f6:	f007 fcd3 	bl	800aba0 <HAL_Delay>
	while (HAL_GetTick() < 100)
 80031fa:	f007 fcc5 	bl	800ab88 <HAL_GetTick>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b63      	cmp	r3, #99	; 0x63
 8003202:	d9f7      	bls.n	80031f4 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003204:	2201      	movs	r2, #1
 8003206:	2101      	movs	r1, #1
 8003208:	485e      	ldr	r0, [pc, #376]	; (8003384 <W25qxx_Init+0x1a0>)
 800320a:	f007 fff7 	bl	800b1fc <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 800320e:	2064      	movs	r0, #100	; 0x64
 8003210:	f007 fcc6 	bl	800aba0 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8003214:	f7ff fef4 	bl	8003000 <W25qxx_ReadID>
 8003218:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	b2db      	uxtb	r3, r3
 800321e:	3b11      	subs	r3, #17
 8003220:	2b0f      	cmp	r3, #15
 8003222:	d86c      	bhi.n	80032fe <W25qxx_Init+0x11a>
 8003224:	a201      	add	r2, pc, #4	; (adr r2, 800322c <W25qxx_Init+0x48>)
 8003226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322a:	bf00      	nop
 800322c:	080032f1 	.word	0x080032f1
 8003230:	080032e3 	.word	0x080032e3
 8003234:	080032d5 	.word	0x080032d5
 8003238:	080032c7 	.word	0x080032c7
 800323c:	080032b9 	.word	0x080032b9
 8003240:	080032ab 	.word	0x080032ab
 8003244:	0800329d 	.word	0x0800329d
 8003248:	0800328d 	.word	0x0800328d
 800324c:	0800327d 	.word	0x0800327d
 8003250:	080032ff 	.word	0x080032ff
 8003254:	080032ff 	.word	0x080032ff
 8003258:	080032ff 	.word	0x080032ff
 800325c:	080032ff 	.word	0x080032ff
 8003260:	080032ff 	.word	0x080032ff
 8003264:	080032ff 	.word	0x080032ff
 8003268:	0800326d 	.word	0x0800326d
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 800326c:	4b44      	ldr	r3, [pc, #272]	; (8003380 <W25qxx_Init+0x19c>)
 800326e:	220a      	movs	r2, #10
 8003270:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8003272:	4b43      	ldr	r3, [pc, #268]	; (8003380 <W25qxx_Init+0x19c>)
 8003274:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003278:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 800327a:	e046      	b.n	800330a <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 800327c:	4b40      	ldr	r3, [pc, #256]	; (8003380 <W25qxx_Init+0x19c>)
 800327e:	2209      	movs	r2, #9
 8003280:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8003282:	4b3f      	ldr	r3, [pc, #252]	; (8003380 <W25qxx_Init+0x19c>)
 8003284:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003288:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 800328a:	e03e      	b.n	800330a <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 800328c:	4b3c      	ldr	r3, [pc, #240]	; (8003380 <W25qxx_Init+0x19c>)
 800328e:	2208      	movs	r2, #8
 8003290:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8003292:	4b3b      	ldr	r3, [pc, #236]	; (8003380 <W25qxx_Init+0x19c>)
 8003294:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003298:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 800329a:	e036      	b.n	800330a <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 800329c:	4b38      	ldr	r3, [pc, #224]	; (8003380 <W25qxx_Init+0x19c>)
 800329e:	2207      	movs	r2, #7
 80032a0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 80032a2:	4b37      	ldr	r3, [pc, #220]	; (8003380 <W25qxx_Init+0x19c>)
 80032a4:	2280      	movs	r2, #128	; 0x80
 80032a6:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 80032a8:	e02f      	b.n	800330a <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 80032aa:	4b35      	ldr	r3, [pc, #212]	; (8003380 <W25qxx_Init+0x19c>)
 80032ac:	2206      	movs	r2, #6
 80032ae:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 80032b0:	4b33      	ldr	r3, [pc, #204]	; (8003380 <W25qxx_Init+0x19c>)
 80032b2:	2240      	movs	r2, #64	; 0x40
 80032b4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 80032b6:	e028      	b.n	800330a <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 80032b8:	4b31      	ldr	r3, [pc, #196]	; (8003380 <W25qxx_Init+0x19c>)
 80032ba:	2205      	movs	r2, #5
 80032bc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 80032be:	4b30      	ldr	r3, [pc, #192]	; (8003380 <W25qxx_Init+0x19c>)
 80032c0:	2220      	movs	r2, #32
 80032c2:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 80032c4:	e021      	b.n	800330a <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 80032c6:	4b2e      	ldr	r3, [pc, #184]	; (8003380 <W25qxx_Init+0x19c>)
 80032c8:	2204      	movs	r2, #4
 80032ca:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 80032cc:	4b2c      	ldr	r3, [pc, #176]	; (8003380 <W25qxx_Init+0x19c>)
 80032ce:	2210      	movs	r2, #16
 80032d0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 80032d2:	e01a      	b.n	800330a <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 80032d4:	4b2a      	ldr	r3, [pc, #168]	; (8003380 <W25qxx_Init+0x19c>)
 80032d6:	2203      	movs	r2, #3
 80032d8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 80032da:	4b29      	ldr	r3, [pc, #164]	; (8003380 <W25qxx_Init+0x19c>)
 80032dc:	2208      	movs	r2, #8
 80032de:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 80032e0:	e013      	b.n	800330a <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 80032e2:	4b27      	ldr	r3, [pc, #156]	; (8003380 <W25qxx_Init+0x19c>)
 80032e4:	2202      	movs	r2, #2
 80032e6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 80032e8:	4b25      	ldr	r3, [pc, #148]	; (8003380 <W25qxx_Init+0x19c>)
 80032ea:	2204      	movs	r2, #4
 80032ec:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 80032ee:	e00c      	b.n	800330a <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 80032f0:	4b23      	ldr	r3, [pc, #140]	; (8003380 <W25qxx_Init+0x19c>)
 80032f2:	2201      	movs	r2, #1
 80032f4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 80032f6:	4b22      	ldr	r3, [pc, #136]	; (8003380 <W25qxx_Init+0x19c>)
 80032f8:	2202      	movs	r2, #2
 80032fa:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 80032fc:	e005      	b.n	800330a <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 80032fe:	4b20      	ldr	r3, [pc, #128]	; (8003380 <W25qxx_Init+0x19c>)
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8003306:	2300      	movs	r3, #0
 8003308:	e036      	b.n	8003378 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 800330a:	4b1d      	ldr	r3, [pc, #116]	; (8003380 <W25qxx_Init+0x19c>)
 800330c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003310:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8003312:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <W25qxx_Init+0x19c>)
 8003314:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003318:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 800331a:	4b19      	ldr	r3, [pc, #100]	; (8003380 <W25qxx_Init+0x19c>)
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	011b      	lsls	r3, r3, #4
 8003320:	4a17      	ldr	r2, [pc, #92]	; (8003380 <W25qxx_Init+0x19c>)
 8003322:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8003324:	4b16      	ldr	r3, [pc, #88]	; (8003380 <W25qxx_Init+0x19c>)
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	4a15      	ldr	r2, [pc, #84]	; (8003380 <W25qxx_Init+0x19c>)
 800332a:	6912      	ldr	r2, [r2, #16]
 800332c:	fb02 f303 	mul.w	r3, r2, r3
 8003330:	4a13      	ldr	r2, [pc, #76]	; (8003380 <W25qxx_Init+0x19c>)
 8003332:	8952      	ldrh	r2, [r2, #10]
 8003334:	fbb3 f3f2 	udiv	r3, r3, r2
 8003338:	4a11      	ldr	r2, [pc, #68]	; (8003380 <W25qxx_Init+0x19c>)
 800333a:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 800333c:	4b10      	ldr	r3, [pc, #64]	; (8003380 <W25qxx_Init+0x19c>)
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	4a0f      	ldr	r2, [pc, #60]	; (8003380 <W25qxx_Init+0x19c>)
 8003344:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8003346:	4b0e      	ldr	r3, [pc, #56]	; (8003380 <W25qxx_Init+0x19c>)
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	4a0d      	ldr	r2, [pc, #52]	; (8003380 <W25qxx_Init+0x19c>)
 800334c:	6912      	ldr	r2, [r2, #16]
 800334e:	fb02 f303 	mul.w	r3, r2, r3
 8003352:	0a9b      	lsrs	r3, r3, #10
 8003354:	4a0a      	ldr	r2, [pc, #40]	; (8003380 <W25qxx_Init+0x19c>)
 8003356:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8003358:	f7ff fe88 	bl	800306c <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 800335c:	2001      	movs	r0, #1
 800335e:	f7ff fed1 	bl	8003104 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8003362:	2002      	movs	r0, #2
 8003364:	f7ff fece 	bl	8003104 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8003368:	2003      	movs	r0, #3
 800336a:	f7ff fecb 	bl	8003104 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 800336e:	4b04      	ldr	r3, [pc, #16]	; (8003380 <W25qxx_Init+0x19c>)
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8003376:	2301      	movs	r3, #1
}
 8003378:	4618      	mov	r0, r3
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	200005f0 	.word	0x200005f0
 8003384:	48000400 	.word	0x48000400

08003388 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8003390:	e002      	b.n	8003398 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8003392:	2001      	movs	r0, #1
 8003394:	f007 fc04 	bl	800aba0 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8003398:	4b25      	ldr	r3, [pc, #148]	; (8003430 <W25qxx_EraseSector+0xa8>)
 800339a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d0f7      	beq.n	8003392 <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 80033a2:	4b23      	ldr	r3, [pc, #140]	; (8003430 <W25qxx_EraseSector+0xa8>)
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 80033aa:	f7ff fef1 	bl	8003190 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 80033ae:	4b20      	ldr	r3, [pc, #128]	; (8003430 <W25qxx_EraseSector+0xa8>)
 80033b0:	691a      	ldr	r2, [r3, #16]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	fb02 f303 	mul.w	r3, r2, r3
 80033b8:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 80033ba:	f7ff fe8d 	bl	80030d8 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80033be:	2200      	movs	r2, #0
 80033c0:	2101      	movs	r1, #1
 80033c2:	481c      	ldr	r0, [pc, #112]	; (8003434 <W25qxx_EraseSector+0xac>)
 80033c4:	f007 ff1a 	bl	800b1fc <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80033c8:	4b19      	ldr	r3, [pc, #100]	; (8003430 <W25qxx_EraseSector+0xa8>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d909      	bls.n	80033e4 <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 80033d0:	2021      	movs	r0, #33	; 0x21
 80033d2:	f7ff fdff 	bl	8002fd4 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	0e1b      	lsrs	r3, r3, #24
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff fdf9 	bl	8002fd4 <W25qxx_Spi>
 80033e2:	e002      	b.n	80033ea <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 80033e4:	2020      	movs	r0, #32
 80033e6:	f7ff fdf5 	bl	8002fd4 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	0c1b      	lsrs	r3, r3, #16
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff fdef 	bl	8002fd4 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	0a1b      	lsrs	r3, r3, #8
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff fde9 	bl	8002fd4 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	b2db      	uxtb	r3, r3
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff fde4 	bl	8002fd4 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800340c:	2201      	movs	r2, #1
 800340e:	2101      	movs	r1, #1
 8003410:	4808      	ldr	r0, [pc, #32]	; (8003434 <W25qxx_EraseSector+0xac>)
 8003412:	f007 fef3 	bl	800b1fc <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8003416:	f7ff febb 	bl	8003190 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 800341a:	2001      	movs	r0, #1
 800341c:	f007 fbc0 	bl	800aba0 <HAL_Delay>
	w25qxx.Lock = 0;
 8003420:	4b03      	ldr	r3, [pc, #12]	; (8003430 <W25qxx_EraseSector+0xa8>)
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003428:	bf00      	nop
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	200005f0 	.word	0x200005f0
 8003434:	48000400 	.word	0x48000400

08003438 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8003440:	4b07      	ldr	r3, [pc, #28]	; (8003460 <W25qxx_SectorToPage+0x28>)
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	fb02 f303 	mul.w	r3, r2, r3
 800344a:	4a05      	ldr	r2, [pc, #20]	; (8003460 <W25qxx_SectorToPage+0x28>)
 800344c:	8952      	ldrh	r2, [r2, #10]
 800344e:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8003452:	4618      	mov	r0, r3
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	200005f0 	.word	0x200005f0

08003464 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
 8003470:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8003472:	e002      	b.n	800347a <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8003474:	2001      	movs	r0, #1
 8003476:	f007 fb93 	bl	800aba0 <HAL_Delay>
	while (w25qxx.Lock == 1)
 800347a:	4b39      	ldr	r3, [pc, #228]	; (8003560 <W25qxx_WritePage+0xfc>)
 800347c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003480:	2b01      	cmp	r3, #1
 8003482:	d0f7      	beq.n	8003474 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8003484:	4b36      	ldr	r3, [pc, #216]	; (8003560 <W25qxx_WritePage+0xfc>)
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4413      	add	r3, r2
 8003492:	4a33      	ldr	r2, [pc, #204]	; (8003560 <W25qxx_WritePage+0xfc>)
 8003494:	8952      	ldrh	r2, [r2, #10]
 8003496:	4293      	cmp	r3, r2
 8003498:	d802      	bhi.n	80034a0 <W25qxx_WritePage+0x3c>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d105      	bne.n	80034ac <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80034a0:	4b2f      	ldr	r3, [pc, #188]	; (8003560 <W25qxx_WritePage+0xfc>)
 80034a2:	895b      	ldrh	r3, [r3, #10]
 80034a4:	461a      	mov	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	4413      	add	r3, r2
 80034b2:	4a2b      	ldr	r2, [pc, #172]	; (8003560 <W25qxx_WritePage+0xfc>)
 80034b4:	8952      	ldrh	r2, [r2, #10]
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d905      	bls.n	80034c6 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80034ba:	4b29      	ldr	r3, [pc, #164]	; (8003560 <W25qxx_WritePage+0xfc>)
 80034bc:	895b      	ldrh	r3, [r3, #10]
 80034be:	461a      	mov	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 80034c6:	f7ff fe63 	bl	8003190 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 80034ca:	f7ff fe05 	bl	80030d8 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80034ce:	2200      	movs	r2, #0
 80034d0:	2101      	movs	r1, #1
 80034d2:	4824      	ldr	r0, [pc, #144]	; (8003564 <W25qxx_WritePage+0x100>)
 80034d4:	f007 fe92 	bl	800b1fc <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 80034d8:	4b21      	ldr	r3, [pc, #132]	; (8003560 <W25qxx_WritePage+0xfc>)
 80034da:	895b      	ldrh	r3, [r3, #10]
 80034dc:	461a      	mov	r2, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	fb02 f303 	mul.w	r3, r2, r3
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	4413      	add	r3, r2
 80034e8:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 80034ea:	4b1d      	ldr	r3, [pc, #116]	; (8003560 <W25qxx_WritePage+0xfc>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d909      	bls.n	8003506 <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 80034f2:	2012      	movs	r0, #18
 80034f4:	f7ff fd6e 	bl	8002fd4 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	0e1b      	lsrs	r3, r3, #24
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff fd68 	bl	8002fd4 <W25qxx_Spi>
 8003504:	e002      	b.n	800350c <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 8003506:	2002      	movs	r0, #2
 8003508:	f7ff fd64 	bl	8002fd4 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	0c1b      	lsrs	r3, r3, #16
 8003510:	b2db      	uxtb	r3, r3
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff fd5e 	bl	8002fd4 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	0a1b      	lsrs	r3, r3, #8
 800351c:	b2db      	uxtb	r3, r3
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff fd58 	bl	8002fd4 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	b2db      	uxtb	r3, r3
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff fd53 	bl	8002fd4 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	b29a      	uxth	r2, r3
 8003532:	2364      	movs	r3, #100	; 0x64
 8003534:	68f9      	ldr	r1, [r7, #12]
 8003536:	480c      	ldr	r0, [pc, #48]	; (8003568 <W25qxx_WritePage+0x104>)
 8003538:	f009 fa33 	bl	800c9a2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800353c:	2201      	movs	r2, #1
 800353e:	2101      	movs	r1, #1
 8003540:	4808      	ldr	r0, [pc, #32]	; (8003564 <W25qxx_WritePage+0x100>)
 8003542:	f007 fe5b 	bl	800b1fc <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8003546:	f7ff fe23 	bl	8003190 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 800354a:	2001      	movs	r0, #1
 800354c:	f007 fb28 	bl	800aba0 <HAL_Delay>
	w25qxx.Lock = 0;
 8003550:	4b03      	ldr	r3, [pc, #12]	; (8003560 <W25qxx_WritePage+0xfc>)
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003558:	bf00      	nop
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	200005f0 	.word	0x200005f0
 8003564:	48000400 	.word	0x48000400
 8003568:	20000438 	.word	0x20000438

0800356c <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b088      	sub	sp, #32
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
 8003578:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 800357a:	4b2c      	ldr	r3, [pc, #176]	; (800362c <W25qxx_WriteSector+0xc0>)
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d802      	bhi.n	800358a <W25qxx_WriteSector+0x1e>
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d102      	bne.n	8003590 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 800358a:	4b28      	ldr	r3, [pc, #160]	; (800362c <W25qxx_WriteSector+0xc0>)
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8003590:	4b26      	ldr	r3, [pc, #152]	; (800362c <W25qxx_WriteSector+0xc0>)
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	429a      	cmp	r2, r3
 8003598:	d243      	bcs.n	8003622 <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	441a      	add	r2, r3
 80035a0:	4b22      	ldr	r3, [pc, #136]	; (800362c <W25qxx_WriteSector+0xc0>)
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d905      	bls.n	80035b4 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 80035a8:	4b20      	ldr	r3, [pc, #128]	; (800362c <W25qxx_WriteSector+0xc0>)
 80035aa:	691a      	ldr	r2, [r3, #16]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	61bb      	str	r3, [r7, #24]
 80035b2:	e001      	b.n	80035b8 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80035b8:	68b8      	ldr	r0, [r7, #8]
 80035ba:	f7ff ff3d 	bl	8003438 <W25qxx_SectorToPage>
 80035be:	4602      	mov	r2, r0
 80035c0:	4b1a      	ldr	r3, [pc, #104]	; (800362c <W25qxx_WriteSector+0xc0>)
 80035c2:	895b      	ldrh	r3, [r3, #10]
 80035c4:	4619      	mov	r1, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80035cc:	4413      	add	r3, r2
 80035ce:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80035d0:	4b16      	ldr	r3, [pc, #88]	; (800362c <W25qxx_WriteSector+0xc0>)
 80035d2:	895b      	ldrh	r3, [r3, #10]
 80035d4:	461a      	mov	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80035dc:	fb01 f202 	mul.w	r2, r1, r2
 80035e0:	1a9b      	subs	r3, r3, r2
 80035e2:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	69f9      	ldr	r1, [r7, #28]
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f7ff ff3a 	bl	8003464 <W25qxx_WritePage>
		StartPage++;
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	3301      	adds	r3, #1
 80035f4:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 80035f6:	4b0d      	ldr	r3, [pc, #52]	; (800362c <W25qxx_WriteSector+0xc0>)
 80035f8:	895b      	ldrh	r3, [r3, #10]
 80035fa:	461a      	mov	r2, r3
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	1a9a      	subs	r2, r3, r2
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	4413      	add	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8003606:	4b09      	ldr	r3, [pc, #36]	; (800362c <W25qxx_WriteSector+0xc0>)
 8003608:	895b      	ldrh	r3, [r3, #10]
 800360a:	461a      	mov	r2, r3
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	4413      	add	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8003616:	2300      	movs	r3, #0
 8003618:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	2b00      	cmp	r3, #0
 800361e:	dce1      	bgt.n	80035e4 <W25qxx_WriteSector+0x78>
 8003620:	e000      	b.n	8003624 <W25qxx_WriteSector+0xb8>
		return;
 8003622:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8003624:	3720      	adds	r7, #32
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	200005f0 	.word	0x200005f0

08003630 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
 800363c:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800363e:	e002      	b.n	8003646 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8003640:	2001      	movs	r0, #1
 8003642:	f007 faad 	bl	800aba0 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8003646:	4b36      	ldr	r3, [pc, #216]	; (8003720 <W25qxx_ReadPage+0xf0>)
 8003648:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800364c:	2b01      	cmp	r3, #1
 800364e:	d0f7      	beq.n	8003640 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8003650:	4b33      	ldr	r3, [pc, #204]	; (8003720 <W25qxx_ReadPage+0xf0>)
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8003658:	4b31      	ldr	r3, [pc, #196]	; (8003720 <W25qxx_ReadPage+0xf0>)
 800365a:	895b      	ldrh	r3, [r3, #10]
 800365c:	461a      	mov	r2, r3
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	4293      	cmp	r3, r2
 8003662:	d802      	bhi.n	800366a <W25qxx_ReadPage+0x3a>
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d102      	bne.n	8003670 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 800366a:	4b2d      	ldr	r3, [pc, #180]	; (8003720 <W25qxx_ReadPage+0xf0>)
 800366c:	895b      	ldrh	r3, [r3, #10]
 800366e:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	4413      	add	r3, r2
 8003676:	4a2a      	ldr	r2, [pc, #168]	; (8003720 <W25qxx_ReadPage+0xf0>)
 8003678:	8952      	ldrh	r2, [r2, #10]
 800367a:	4293      	cmp	r3, r2
 800367c:	d905      	bls.n	800368a <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800367e:	4b28      	ldr	r3, [pc, #160]	; (8003720 <W25qxx_ReadPage+0xf0>)
 8003680:	895b      	ldrh	r3, [r3, #10]
 8003682:	461a      	mov	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 800368a:	4b25      	ldr	r3, [pc, #148]	; (8003720 <W25qxx_ReadPage+0xf0>)
 800368c:	895b      	ldrh	r3, [r3, #10]
 800368e:	461a      	mov	r2, r3
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	fb02 f303 	mul.w	r3, r2, r3
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	4413      	add	r3, r2
 800369a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800369c:	2200      	movs	r2, #0
 800369e:	2101      	movs	r1, #1
 80036a0:	4820      	ldr	r0, [pc, #128]	; (8003724 <W25qxx_ReadPage+0xf4>)
 80036a2:	f007 fdab 	bl	800b1fc <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80036a6:	4b1e      	ldr	r3, [pc, #120]	; (8003720 <W25qxx_ReadPage+0xf0>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d909      	bls.n	80036c2 <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 80036ae:	200c      	movs	r0, #12
 80036b0:	f7ff fc90 	bl	8002fd4 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	0e1b      	lsrs	r3, r3, #24
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff fc8a 	bl	8002fd4 <W25qxx_Spi>
 80036c0:	e002      	b.n	80036c8 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 80036c2:	200b      	movs	r0, #11
 80036c4:	f7ff fc86 	bl	8002fd4 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	0c1b      	lsrs	r3, r3, #16
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff fc80 	bl	8002fd4 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	0a1b      	lsrs	r3, r3, #8
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff fc7a 	bl	8002fd4 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff fc75 	bl	8002fd4 <W25qxx_Spi>
	W25qxx_Spi(0);
 80036ea:	2000      	movs	r0, #0
 80036ec:	f7ff fc72 	bl	8002fd4 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	2364      	movs	r3, #100	; 0x64
 80036f6:	68f9      	ldr	r1, [r7, #12]
 80036f8:	480b      	ldr	r0, [pc, #44]	; (8003728 <W25qxx_ReadPage+0xf8>)
 80036fa:	f009 fac0 	bl	800cc7e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80036fe:	2201      	movs	r2, #1
 8003700:	2101      	movs	r1, #1
 8003702:	4808      	ldr	r0, [pc, #32]	; (8003724 <W25qxx_ReadPage+0xf4>)
 8003704:	f007 fd7a 	bl	800b1fc <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8003708:	2001      	movs	r0, #1
 800370a:	f007 fa49 	bl	800aba0 <HAL_Delay>
	w25qxx.Lock = 0;
 800370e:	4b04      	ldr	r3, [pc, #16]	; (8003720 <W25qxx_ReadPage+0xf0>)
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003716:	bf00      	nop
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	200005f0 	.word	0x200005f0
 8003724:	48000400 	.word	0x48000400
 8003728:	20000438 	.word	0x20000438

0800372c <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
 8003738:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 800373a:	4b2c      	ldr	r3, [pc, #176]	; (80037ec <W25qxx_ReadSector+0xc0>)
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	429a      	cmp	r2, r3
 8003742:	d802      	bhi.n	800374a <W25qxx_ReadSector+0x1e>
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d102      	bne.n	8003750 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 800374a:	4b28      	ldr	r3, [pc, #160]	; (80037ec <W25qxx_ReadSector+0xc0>)
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8003750:	4b26      	ldr	r3, [pc, #152]	; (80037ec <W25qxx_ReadSector+0xc0>)
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	429a      	cmp	r2, r3
 8003758:	d243      	bcs.n	80037e2 <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	441a      	add	r2, r3
 8003760:	4b22      	ldr	r3, [pc, #136]	; (80037ec <W25qxx_ReadSector+0xc0>)
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	429a      	cmp	r2, r3
 8003766:	d905      	bls.n	8003774 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8003768:	4b20      	ldr	r3, [pc, #128]	; (80037ec <W25qxx_ReadSector+0xc0>)
 800376a:	691a      	ldr	r2, [r3, #16]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	61bb      	str	r3, [r7, #24]
 8003772:	e001      	b.n	8003778 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8003778:	68b8      	ldr	r0, [r7, #8]
 800377a:	f7ff fe5d 	bl	8003438 <W25qxx_SectorToPage>
 800377e:	4602      	mov	r2, r0
 8003780:	4b1a      	ldr	r3, [pc, #104]	; (80037ec <W25qxx_ReadSector+0xc0>)
 8003782:	895b      	ldrh	r3, [r3, #10]
 8003784:	4619      	mov	r1, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	fbb3 f3f1 	udiv	r3, r3, r1
 800378c:	4413      	add	r3, r2
 800378e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8003790:	4b16      	ldr	r3, [pc, #88]	; (80037ec <W25qxx_ReadSector+0xc0>)
 8003792:	895b      	ldrh	r3, [r3, #10]
 8003794:	461a      	mov	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	fbb3 f1f2 	udiv	r1, r3, r2
 800379c:	fb01 f202 	mul.w	r2, r1, r2
 80037a0:	1a9b      	subs	r3, r3, r2
 80037a2:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	69f9      	ldr	r1, [r7, #28]
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f7ff ff40 	bl	8003630 <W25qxx_ReadPage>
		StartPage++;
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	3301      	adds	r3, #1
 80037b4:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 80037b6:	4b0d      	ldr	r3, [pc, #52]	; (80037ec <W25qxx_ReadSector+0xc0>)
 80037b8:	895b      	ldrh	r3, [r3, #10]
 80037ba:	461a      	mov	r2, r3
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	1a9a      	subs	r2, r3, r2
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	4413      	add	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80037c6:	4b09      	ldr	r3, [pc, #36]	; (80037ec <W25qxx_ReadSector+0xc0>)
 80037c8:	895b      	ldrh	r3, [r3, #10]
 80037ca:	461a      	mov	r2, r3
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	4413      	add	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80037d6:	2300      	movs	r3, #0
 80037d8:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	dce1      	bgt.n	80037a4 <W25qxx_ReadSector+0x78>
 80037e0:	e000      	b.n	80037e4 <W25qxx_ReadSector+0xb8>
		return;
 80037e2:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 80037e4:	3720      	adds	r7, #32
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	200005f0 	.word	0x200005f0

080037f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80037f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003828 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80037f4:	f7ff fbdc 	bl	8002fb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037f8:	480c      	ldr	r0, [pc, #48]	; (800382c <LoopForever+0x6>)
  ldr r1, =_edata
 80037fa:	490d      	ldr	r1, [pc, #52]	; (8003830 <LoopForever+0xa>)
  ldr r2, =_sidata
 80037fc:	4a0d      	ldr	r2, [pc, #52]	; (8003834 <LoopForever+0xe>)
  movs r3, #0
 80037fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003800:	e002      	b.n	8003808 <LoopCopyDataInit>

08003802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003806:	3304      	adds	r3, #4

08003808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800380a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800380c:	d3f9      	bcc.n	8003802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800380e:	4a0a      	ldr	r2, [pc, #40]	; (8003838 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003810:	4c0a      	ldr	r4, [pc, #40]	; (800383c <LoopForever+0x16>)
  movs r3, #0
 8003812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003814:	e001      	b.n	800381a <LoopFillZerobss>

08003816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003818:	3204      	adds	r2, #4

0800381a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800381a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800381c:	d3fb      	bcc.n	8003816 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800381e:	f00b ff69 	bl	800f6f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003822:	f7fe fd41 	bl	80022a8 <main>

08003826 <LoopForever>:

LoopForever:
    b LoopForever
 8003826:	e7fe      	b.n	8003826 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003828:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800382c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003830:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003834:	080105bc 	.word	0x080105bc
  ldr r2, =_sbss
 8003838:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800383c:	20000790 	.word	0x20000790

08003840 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003840:	e7fe      	b.n	8003840 <ADC1_IRQHandler>
	...

08003844 <_ZN6commonC1Ev>:
 *      Author: MKS
 */

#include "common.h"

common::common() {
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	4a04      	ldr	r2, [pc, #16]	; (8003860 <_ZN6commonC1Ev+0x1c>)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4618      	mov	r0, r3
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	08010498 	.word	0x08010498

08003864 <_ZN6commonD1Ev>:

common::~common() {
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	4a04      	ldr	r2, [pc, #16]	; (8003880 <_ZN6commonD1Ev+0x1c>)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4618      	mov	r0, r3
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	08010498 	.word	0x08010498

08003884 <_ZN6commonD0Ev>:
common::~common() {
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
}
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7ff ffe9 	bl	8003864 <_ZN6commonD1Ev>
 8003892:	2104      	movs	r1, #4
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f00b ff22 	bl	800f6de <_ZdlPvj>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4618      	mov	r0, r3
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <_ZN14DisplayRoutineC1Ev>:
extern uint16_t MAC_Gen_Prod_Input1_Production,Production_Zeit;
extern uint16_t MAC_Gen_Rej_Input_Production,Rejection_Zeit;
extern uint16_t Manual_RejectionCount;
extern uint16_t SectorPos;

DisplayRoutine::DisplayRoutine() {
 80038a4:	b5b0      	push	{r4, r5, r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	4a39      	ldr	r2, [pc, #228]	; (8003994 <_ZN14DisplayRoutineC1Ev+0xf0>)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	3304      	adds	r3, #4
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 fa02 	bl	8003cc0 <_ZN4GLCDC1Ev>
 80038bc:	687d      	ldr	r5, [r7, #4]
 80038be:	4b36      	ldr	r3, [pc, #216]	; (8003998 <_ZN14DisplayRoutineC1Ev+0xf4>)
 80038c0:	f605 2408 	addw	r4, r5, #2568	; 0xa08
 80038c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038c6:	c407      	stmia	r4!, {r0, r1, r2}
 80038c8:	7023      	strb	r3, [r4, #0]
 80038ca:	f605 2315 	addw	r3, r5, #2581	; 0xa15
 80038ce:	2200      	movs	r2, #0
 80038d0:	801a      	strh	r2, [r3, #0]
 80038d2:	687c      	ldr	r4, [r7, #4]
 80038d4:	4b31      	ldr	r3, [pc, #196]	; (800399c <_ZN14DisplayRoutineC1Ev+0xf8>)
 80038d6:	f604 2217 	addw	r2, r4, #2583	; 0xa17
 80038da:	cb03      	ldmia	r3!, {r0, r1}
 80038dc:	6010      	str	r0, [r2, #0]
 80038de:	6051      	str	r1, [r2, #4]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	7213      	strb	r3, [r2, #8]
 80038e4:	f504 6322 	add.w	r3, r4, #2592	; 0xa20
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	711a      	strb	r2, [r3, #4]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a2b      	ldr	r2, [pc, #172]	; (80039a0 <_ZN14DisplayRoutineC1Ev+0xfc>)
 80038f2:	f603 2325 	addw	r3, r3, #2597	; 0xa25
 80038f6:	8812      	ldrh	r2, [r2, #0]
 80038f8:	801a      	strh	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a29      	ldr	r2, [pc, #164]	; (80039a4 <_ZN14DisplayRoutineC1Ev+0x100>)
 80038fe:	f603 2327 	addw	r3, r3, #2599	; 0xa27
 8003902:	6810      	ldr	r0, [r2, #0]
 8003904:	6018      	str	r0, [r3, #0]
 8003906:	8891      	ldrh	r1, [r2, #4]
 8003908:	7992      	ldrb	r2, [r2, #6]
 800390a:	8099      	strh	r1, [r3, #4]
 800390c:	719a      	strb	r2, [r3, #6]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	222f      	movs	r2, #47	; 0x2f
 8003912:	f8a3 2a2e 	strh.w	r2, [r3, #2606]	; 0xa2e
 8003916:	687c      	ldr	r4, [r7, #4]
 8003918:	4a23      	ldr	r2, [pc, #140]	; (80039a8 <_ZN14DisplayRoutineC1Ev+0x104>)
 800391a:	f504 6323 	add.w	r3, r4, #2608	; 0xa30
 800391e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003920:	c303      	stmia	r3!, {r0, r1}
 8003922:	701a      	strb	r2, [r3, #0]
 8003924:	2300      	movs	r3, #0
 8003926:	f884 3a39 	strb.w	r3, [r4, #2617]	; 0xa39
 800392a:	687c      	ldr	r4, [r7, #4]
 800392c:	4b1f      	ldr	r3, [pc, #124]	; (80039ac <_ZN14DisplayRoutineC1Ev+0x108>)
 800392e:	f604 223a 	addw	r2, r4, #2618	; 0xa3a
 8003932:	cb03      	ldmia	r3!, {r0, r1}
 8003934:	6010      	str	r0, [r2, #0]
 8003936:	6051      	str	r1, [r2, #4]
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	7213      	strb	r3, [r2, #8]
 800393c:	2300      	movs	r3, #0
 800393e:	f884 3a43 	strb.w	r3, [r4, #2627]	; 0xa43
 8003942:	687c      	ldr	r4, [r7, #4]
 8003944:	4a1a      	ldr	r2, [pc, #104]	; (80039b0 <_ZN14DisplayRoutineC1Ev+0x10c>)
 8003946:	f604 2344 	addw	r3, r4, #2628	; 0xa44
 800394a:	ca07      	ldmia	r2, {r0, r1, r2}
 800394c:	c303      	stmia	r3!, {r0, r1}
 800394e:	701a      	strb	r2, [r3, #0]
 8003950:	f604 234d 	addw	r3, r4, #2637	; 0xa4d
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	687c      	ldr	r4, [r7, #4]
 800395a:	4b16      	ldr	r3, [pc, #88]	; (80039b4 <_ZN14DisplayRoutineC1Ev+0x110>)
 800395c:	f604 2251 	addw	r2, r4, #2641	; 0xa51
 8003960:	cb03      	ldmia	r3!, {r0, r1}
 8003962:	6010      	str	r0, [r2, #0]
 8003964:	6051      	str	r1, [r2, #4]
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	7213      	strb	r3, [r2, #8]
 800396a:	f604 235a 	addw	r3, r4, #2650	; 0xa5a
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	687c      	ldr	r4, [r7, #4]
 8003974:	4b10      	ldr	r3, [pc, #64]	; (80039b8 <_ZN14DisplayRoutineC1Ev+0x114>)
 8003976:	f604 225e 	addw	r2, r4, #2654	; 0xa5e
 800397a:	cb03      	ldmia	r3!, {r0, r1}
 800397c:	6010      	str	r0, [r2, #0]
 800397e:	6051      	str	r1, [r2, #4]
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	8113      	strh	r3, [r2, #8]
 8003984:	2300      	movs	r3, #0
 8003986:	f8a4 3a68 	strh.w	r3, [r4, #2664]	; 0xa68
	// TODO Auto-generated constructor stub

}
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4618      	mov	r0, r3
 800398e:	3708      	adds	r7, #8
 8003990:	46bd      	mov	sp, r7
 8003992:	bdb0      	pop	{r4, r5, r7, pc}
 8003994:	080104a8 	.word	0x080104a8
 8003998:	08010050 	.word	0x08010050
 800399c:	08010060 	.word	0x08010060
 80039a0:	08010070 	.word	0x08010070
 80039a4:	08010074 	.word	0x08010074
 80039a8:	0801007c 	.word	0x0801007c
 80039ac:	08010088 	.word	0x08010088
 80039b0:	08010094 	.word	0x08010094
 80039b4:	080100a4 	.word	0x080100a4
 80039b8:	080100b4 	.word	0x080100b4

080039bc <_ZN14DisplayRoutineD1Ev>:

DisplayRoutine::~DisplayRoutine() {
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	4a06      	ldr	r2, [pc, #24]	; (80039e0 <_ZN14DisplayRoutineD1Ev+0x24>)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3304      	adds	r3, #4
 80039ce:	4618      	mov	r0, r3
 80039d0:	f004 f8f2 	bl	8007bb8 <_ZN4GLCDD1Ev>
	// TODO Auto-generated destructor stub
}
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4618      	mov	r0, r3
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	080104a8 	.word	0x080104a8

080039e4 <_ZN14DisplayRoutineD0Ev>:
DisplayRoutine::~DisplayRoutine() {
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
}
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7ff ffe5 	bl	80039bc <_ZN14DisplayRoutineD1Ev>
 80039f2:	f44f 6127 	mov.w	r1, #2672	; 0xa70
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f00b fe71 	bl	800f6de <_ZdlPvj>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4618      	mov	r0, r3
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
	...

08003a08 <_ZN14DisplayRoutine3runEv>:

void DisplayRoutine::run()
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
	//m_gLCDDrive.m_clrlcd();/*  Try in local if not need comment out*/
	m_gLCDDrive.m_lcdputs1(0,1,Lpdc);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	1d18      	adds	r0, r3, #4
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	f004 fb8b 	bl	8008138 <_ZN4GLCD10m_lcdputs1EhhPh>
//	value2Digit(date_Rtc,2,65);
//	m_gLCDDrive.m_lcdputs1(81,2,backslash);
//	value2Digit(month_Rtc,2,86);
//	m_gLCDDrive.m_lcdputs1(103,2,backslash);
//	value2Digit(year_Rtc,2,110);
	m_gLCDDrive.m_lcdputs1(0,2,Prod);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	1d18      	adds	r0, r3, #4
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f603 2317 	addw	r3, r3, #2583	; 0xa17
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	2100      	movs	r1, #0
 8003a30:	f004 fb82 	bl	8008138 <_ZN4GLCD10m_lcdputs1EhhPh>
	value4Digit(MAC_Gen_Prod_Input1_Production,2,66);
 8003a34:	4b48      	ldr	r3, [pc, #288]	; (8003b58 <_ZN14DisplayRoutine3runEv+0x150>)
 8003a36:	8819      	ldrh	r1, [r3, #0]
 8003a38:	2342      	movs	r3, #66	; 0x42
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f893 	bl	8003b68 <_ZN14DisplayRoutine11value4DigitEthh>
	m_gLCDDrive.m_lcdputs1(98,2,space);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	1d18      	adds	r0, r3, #4
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f603 2327 	addw	r3, r3, #2599	; 0xa27
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	2162      	movs	r1, #98	; 0x62
 8003a50:	f004 fb72 	bl	8008138 <_ZN4GLCD10m_lcdputs1EhhPh>

	m_gLCDDrive.m_lcdputs1(0,3,production);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	1d18      	adds	r0, r3, #4
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 8003a5e:	2203      	movs	r2, #3
 8003a60:	2100      	movs	r1, #0
 8003a62:	f004 fb69 	bl	8008138 <_ZN4GLCD10m_lcdputs1EhhPh>
	value4Digit(MAC_Gen_Prod_Input1_Production,3,66);
 8003a66:	4b3c      	ldr	r3, [pc, #240]	; (8003b58 <_ZN14DisplayRoutine3runEv+0x150>)
 8003a68:	8819      	ldrh	r1, [r3, #0]
 8003a6a:	2342      	movs	r3, #66	; 0x42
 8003a6c:	2203      	movs	r2, #3
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f87a 	bl	8003b68 <_ZN14DisplayRoutine11value4DigitEthh>
	m_gLCDDrive.m_lcdputs1(98,3,space);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	1d18      	adds	r0, r3, #4
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f603 2327 	addw	r3, r3, #2599	; 0xa27
 8003a7e:	2203      	movs	r2, #3
 8003a80:	2162      	movs	r1, #98	; 0x62
 8003a82:	f004 fb59 	bl	8008138 <_ZN4GLCD10m_lcdputs1EhhPh>

	m_gLCDDrive.m_lcdputs1(0,4,rejection);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	1d18      	adds	r0, r3, #4
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f603 233a 	addw	r3, r3, #2618	; 0xa3a
 8003a90:	2204      	movs	r2, #4
 8003a92:	2100      	movs	r1, #0
 8003a94:	f004 fb50 	bl	8008138 <_ZN4GLCD10m_lcdputs1EhhPh>
	value4Digit(MAC_Gen_Rej_Input_Production,4,66);
 8003a98:	4b30      	ldr	r3, [pc, #192]	; (8003b5c <_ZN14DisplayRoutine3runEv+0x154>)
 8003a9a:	8819      	ldrh	r1, [r3, #0]
 8003a9c:	2342      	movs	r3, #66	; 0x42
 8003a9e:	2204      	movs	r2, #4
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 f861 	bl	8003b68 <_ZN14DisplayRoutine11value4DigitEthh>
	m_gLCDDrive.m_lcdputs1(98,4,space);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	1d18      	adds	r0, r3, #4
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f603 2327 	addw	r3, r3, #2599	; 0xa27
 8003ab0:	2204      	movs	r2, #4
 8003ab2:	2162      	movs	r1, #98	; 0x62
 8003ab4:	f004 fb40 	bl	8008138 <_ZN4GLCD10m_lcdputs1EhhPh>

	m_gLCDDrive.m_lcdputs1(0,5,Mrejection);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	1d18      	adds	r0, r3, #4
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f603 2344 	addw	r3, r3, #2628	; 0xa44
 8003ac2:	2205      	movs	r2, #5
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	f004 fb37 	bl	8008138 <_ZN4GLCD10m_lcdputs1EhhPh>
	value4Digit(Manual_RejectionCount,5,66);
 8003aca:	4b25      	ldr	r3, [pc, #148]	; (8003b60 <_ZN14DisplayRoutine3runEv+0x158>)
 8003acc:	8819      	ldrh	r1, [r3, #0]
 8003ace:	2342      	movs	r3, #66	; 0x42
 8003ad0:	2205      	movs	r2, #5
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f848 	bl	8003b68 <_ZN14DisplayRoutine11value4DigitEthh>
	m_gLCDDrive.m_lcdputs1(98,5,space);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	1d18      	adds	r0, r3, #4
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f603 2327 	addw	r3, r3, #2599	; 0xa27
 8003ae2:	2205      	movs	r2, #5
 8003ae4:	2162      	movs	r1, #98	; 0x62
 8003ae6:	f004 fb27 	bl	8008138 <_ZN4GLCD10m_lcdputs1EhhPh>

	m_gLCDDrive.m_lcdputs1(0,6,Mtimer);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	1d18      	adds	r0, r3, #4
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f603 2351 	addw	r3, r3, #2641	; 0xa51
 8003af4:	2206      	movs	r2, #6
 8003af6:	2100      	movs	r1, #0
 8003af8:	f004 fb1e 	bl	8008138 <_ZN4GLCD10m_lcdputs1EhhPh>
	value4Digit(Manual_RejectionCount,6,66);
 8003afc:	4b18      	ldr	r3, [pc, #96]	; (8003b60 <_ZN14DisplayRoutine3runEv+0x158>)
 8003afe:	8819      	ldrh	r1, [r3, #0]
 8003b00:	2342      	movs	r3, #66	; 0x42
 8003b02:	2206      	movs	r2, #6
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f82f 	bl	8003b68 <_ZN14DisplayRoutine11value4DigitEthh>
	m_gLCDDrive.m_lcdputs1(98,6,space);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	1d18      	adds	r0, r3, #4
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f603 2327 	addw	r3, r3, #2599	; 0xa27
 8003b14:	2206      	movs	r2, #6
 8003b16:	2162      	movs	r1, #98	; 0x62
 8003b18:	f004 fb0e 	bl	8008138 <_ZN4GLCD10m_lcdputs1EhhPh>

	m_gLCDDrive.m_lcdputs1(0,7,Wifi);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	1d18      	adds	r0, r3, #4
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f603 235e 	addw	r3, r3, #2654	; 0xa5e
 8003b26:	2207      	movs	r2, #7
 8003b28:	2100      	movs	r1, #0
 8003b2a:	f004 fb05 	bl	8008138 <_ZN4GLCD10m_lcdputs1EhhPh>
	value4Digit(wifi_command,7,66);
 8003b2e:	4b0d      	ldr	r3, [pc, #52]	; (8003b64 <_ZN14DisplayRoutine3runEv+0x15c>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	b299      	uxth	r1, r3
 8003b34:	2342      	movs	r3, #66	; 0x42
 8003b36:	2207      	movs	r2, #7
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 f815 	bl	8003b68 <_ZN14DisplayRoutine11value4DigitEthh>
	m_gLCDDrive.m_lcdputs1(98,7,space);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	1d18      	adds	r0, r3, #4
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f603 2327 	addw	r3, r3, #2599	; 0xa27
 8003b48:	2207      	movs	r2, #7
 8003b4a:	2162      	movs	r1, #98	; 0x62
 8003b4c:	f004 faf4 	bl	8008138 <_ZN4GLCD10m_lcdputs1EhhPh>
//	value2Digit(SectorPos,6,95);
	//Prod

}
 8003b50:	bf00      	nop
 8003b52:	3708      	adds	r7, #8
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	2000061c 	.word	0x2000061c
 8003b5c:	2000061e 	.word	0x2000061e
 8003b60:	20000620 	.word	0x20000620
 8003b64:	20000664 	.word	0x20000664

08003b68 <_ZN14DisplayRoutine11value4DigitEthh>:
	GLCDNumericArray[0] =(unsigned int)(((value%100)/10)+0x30);
    GLCDNumericArray[1] =(unsigned int)((value%10)+0x30);
	m_gLCDDrive.m_lcdputs1(posCol,posLine,GLCDNumericArray);
}
void DisplayRoutine::value4Digit(uint16_t value4dig,uint8_t posLine,uint8_t posCol)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	4608      	mov	r0, r1
 8003b72:	4611      	mov	r1, r2
 8003b74:	461a      	mov	r2, r3
 8003b76:	4603      	mov	r3, r0
 8003b78:	807b      	strh	r3, [r7, #2]
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	707b      	strb	r3, [r7, #1]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	703b      	strb	r3, [r7, #0]
	gLCDNumericArraySize_4[0] =(unsigned char)(((value4dig%10000)/1000)+0x30);
 8003b82:	887b      	ldrh	r3, [r7, #2]
 8003b84:	4a2e      	ldr	r2, [pc, #184]	; (8003c40 <_ZN14DisplayRoutine11value4DigitEthh+0xd8>)
 8003b86:	fba2 1203 	umull	r1, r2, r2, r3
 8003b8a:	0b52      	lsrs	r2, r2, #13
 8003b8c:	f242 7110 	movw	r1, #10000	; 0x2710
 8003b90:	fb01 f202 	mul.w	r2, r1, r2
 8003b94:	1a9b      	subs	r3, r3, r2
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	4a2a      	ldr	r2, [pc, #168]	; (8003c44 <_ZN14DisplayRoutine11value4DigitEthh+0xdc>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	099b      	lsrs	r3, r3, #6
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	3330      	adds	r3, #48	; 0x30
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f883 2a6c 	strb.w	r2, [r3, #2668]	; 0xa6c
	gLCDNumericArraySize_4[1] =(unsigned char)((value4dig%1000)/100+0x30);
 8003bae:	887b      	ldrh	r3, [r7, #2]
 8003bb0:	4a24      	ldr	r2, [pc, #144]	; (8003c44 <_ZN14DisplayRoutine11value4DigitEthh+0xdc>)
 8003bb2:	fba2 1203 	umull	r1, r2, r2, r3
 8003bb6:	0992      	lsrs	r2, r2, #6
 8003bb8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003bbc:	fb01 f202 	mul.w	r2, r1, r2
 8003bc0:	1a9b      	subs	r3, r3, r2
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	4a20      	ldr	r2, [pc, #128]	; (8003c48 <_ZN14DisplayRoutine11value4DigitEthh+0xe0>)
 8003bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bca:	095b      	lsrs	r3, r3, #5
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	3330      	adds	r3, #48	; 0x30
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f883 2a6d 	strb.w	r2, [r3, #2669]	; 0xa6d
	gLCDNumericArraySize_4[2] =(unsigned char)(((value4dig%100)/10)+0x30);
 8003bda:	887b      	ldrh	r3, [r7, #2]
 8003bdc:	4a1a      	ldr	r2, [pc, #104]	; (8003c48 <_ZN14DisplayRoutine11value4DigitEthh+0xe0>)
 8003bde:	fba2 1203 	umull	r1, r2, r2, r3
 8003be2:	0952      	lsrs	r2, r2, #5
 8003be4:	2164      	movs	r1, #100	; 0x64
 8003be6:	fb01 f202 	mul.w	r2, r1, r2
 8003bea:	1a9b      	subs	r3, r3, r2
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	4a17      	ldr	r2, [pc, #92]	; (8003c4c <_ZN14DisplayRoutine11value4DigitEthh+0xe4>)
 8003bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf4:	08db      	lsrs	r3, r3, #3
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	3330      	adds	r3, #48	; 0x30
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f883 2a6e 	strb.w	r2, [r3, #2670]	; 0xa6e
	gLCDNumericArraySize_4[3] =(unsigned char)((value4dig%10)+0x30);
 8003c04:	887a      	ldrh	r2, [r7, #2]
 8003c06:	4b11      	ldr	r3, [pc, #68]	; (8003c4c <_ZN14DisplayRoutine11value4DigitEthh+0xe4>)
 8003c08:	fba3 1302 	umull	r1, r3, r3, r2
 8003c0c:	08d9      	lsrs	r1, r3, #3
 8003c0e:	460b      	mov	r3, r1
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	440b      	add	r3, r1
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	3330      	adds	r3, #48	; 0x30
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f883 2a6f 	strb.w	r2, [r3, #2671]	; 0xa6f
	m_gLCDDrive.m_lcdputs1(posCol,posLine,gLCDNumericArraySize_4);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	1d18      	adds	r0, r3, #4
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f603 236c 	addw	r3, r3, #2668	; 0xa6c
 8003c30:	787a      	ldrb	r2, [r7, #1]
 8003c32:	7839      	ldrb	r1, [r7, #0]
 8003c34:	f004 fa80 	bl	8008138 <_ZN4GLCD10m_lcdputs1EhhPh>
}
 8003c38:	bf00      	nop
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	d1b71759 	.word	0xd1b71759
 8003c44:	10624dd3 	.word	0x10624dd3
 8003c48:	51eb851f 	.word	0x51eb851f
 8003c4c:	cccccccd 	.word	0xcccccccd

08003c50 <_ZN14DisplayRoutine4InitEv>:

void DisplayRoutine::Init()
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
	m_gLCDDrive.m_displayon();
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f004 f88d 	bl	8007d7c <_ZN4GLCD11m_displayonEv>
	m_gLCDDrive.m_setstartline(0);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	3304      	adds	r3, #4
 8003c66:	2100      	movs	r1, #0
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f004 f989 	bl	8007f80 <_ZN4GLCD14m_setstartlineEh>
	m_gLCDDrive.m_clrlcd();
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	3304      	adds	r3, #4
 8003c72:	4618      	mov	r0, r3
 8003c74:	f004 fa95 	bl	80081a2 <_ZN4GLCD8m_clrlcdEv>


}
 8003c78:	bf00      	nop
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <_ZN6common26ReadtheValueAssignPinstateEhh>:

class common {
public:
	common();
	virtual ~common();
	GPIO_PinState ReadtheValueAssignPinstate(uint8_t position, uint8_t value)
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	460b      	mov	r3, r1
 8003c8a:	70fb      	strb	r3, [r7, #3]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	70bb      	strb	r3, [r7, #2]
	{
		GPIO_PinState pinstate;
		position = 1 << position;
 8003c90:	78fb      	ldrb	r3, [r7, #3]
 8003c92:	2201      	movs	r2, #1
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	70fb      	strb	r3, [r7, #3]
		if(position & value){
 8003c9a:	78fa      	ldrb	r2, [r7, #3]
 8003c9c:	78bb      	ldrb	r3, [r7, #2]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d002      	beq.n	8003cac <_ZN6common26ReadtheValueAssignPinstateEhh+0x2c>
			pinstate = GPIO_PIN_SET;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	73fb      	strb	r3, [r7, #15]
 8003caa:	e001      	b.n	8003cb0 <_ZN6common26ReadtheValueAssignPinstateEhh+0x30>
		}
		else
		{
			pinstate = GPIO_PIN_RESET;
 8003cac:	2300      	movs	r3, #0
 8003cae:	73fb      	strb	r3, [r7, #15]
		}
		return(pinstate);
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
	}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
	...

08003cc0 <_ZN4GLCDC1Ev>:

#include "GLCD.h"
#include "main.h"
#define GLCDDELAY 10
extern TIM_HandleTypeDef htim1;
GLCD::GLCD() {
 8003cc0:	b5b0      	push	{r4, r5, r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7ff fdba 	bl	8003844 <_ZN6commonC1Ev>
 8003cd0:	4ac8      	ldr	r2, [pc, #800]	; (8003ff4 <_ZN4GLCDC1Ev+0x334>)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	687d      	ldr	r5, [r7, #4]
 8003cd8:	4bc7      	ldr	r3, [pc, #796]	; (8003ff8 <_ZN4GLCDC1Ev+0x338>)
 8003cda:	1d2c      	adds	r4, r5, #4
 8003cdc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cde:	c407      	stmia	r4!, {r0, r1, r2}
 8003ce0:	8023      	strh	r3, [r4, #0]
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	74ab      	strb	r3, [r5, #18]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	615a      	str	r2, [r3, #20]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	619a      	str	r2, [r3, #24]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	775a      	strb	r2, [r3, #29]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	331e      	adds	r3, #30
 8003cfc:	f640 0208 	movw	r2, #2056	; 0x808
 8003d00:	2100      	movs	r1, #0
 8003d02:	4618      	mov	r0, r3
 8003d04:	f00b fd30 	bl	800f768 <memset>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	227e      	movs	r2, #126	; 0x7e
 8003d0c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2281      	movs	r2, #129	; 0x81
 8003d14:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2295      	movs	r2, #149	; 0x95
 8003d1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	22b1      	movs	r2, #177	; 0xb1
 8003d24:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	22b1      	movs	r2, #177	; 0xb1
 8003d2c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2295      	movs	r2, #149	; 0x95
 8003d34:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2281      	movs	r2, #129	; 0x81
 8003d3c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	227e      	movs	r2, #126	; 0x7e
 8003d44:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	227e      	movs	r2, #126	; 0x7e
 8003d4c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	22ff      	movs	r2, #255	; 0xff
 8003d54:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	22eb      	movs	r2, #235	; 0xeb
 8003d5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	22cf      	movs	r2, #207	; 0xcf
 8003d64:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	22cf      	movs	r2, #207	; 0xcf
 8003d6c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	22eb      	movs	r2, #235	; 0xeb
 8003d74:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	22ff      	movs	r2, #255	; 0xff
 8003d7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	227e      	movs	r2, #126	; 0x7e
 8003d84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	220e      	movs	r2, #14
 8003d8c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	221f      	movs	r2, #31
 8003d94:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	223f      	movs	r2, #63	; 0x3f
 8003d9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	227e      	movs	r2, #126	; 0x7e
 8003da4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	223f      	movs	r2, #63	; 0x3f
 8003dac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	221f      	movs	r2, #31
 8003db4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	220e      	movs	r2, #14
 8003dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2208      	movs	r2, #8
 8003dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	221c      	movs	r2, #28
 8003dcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	223e      	movs	r2, #62	; 0x3e
 8003dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	227f      	movs	r2, #127	; 0x7f
 8003ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	223e      	movs	r2, #62	; 0x3e
 8003de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	221c      	movs	r2, #28
 8003dec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2208      	movs	r2, #8
 8003df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2218      	movs	r2, #24
 8003dfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	22ba      	movs	r2, #186	; 0xba
 8003e04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	22ff      	movs	r2, #255	; 0xff
 8003e0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	22ff      	movs	r2, #255	; 0xff
 8003e14:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	22ff      	movs	r2, #255	; 0xff
 8003e1c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	22ba      	movs	r2, #186	; 0xba
 8003e24:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2218      	movs	r2, #24
 8003e2c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2210      	movs	r2, #16
 8003e34:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	22b8      	movs	r2, #184	; 0xb8
 8003e3c:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	22fc      	movs	r2, #252	; 0xfc
 8003e44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	22ff      	movs	r2, #255	; 0xff
 8003e4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	22fc      	movs	r2, #252	; 0xfc
 8003e54:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	22b8      	movs	r2, #184	; 0xb8
 8003e5c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2210      	movs	r2, #16
 8003e64:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2218      	movs	r2, #24
 8003e6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	223c      	movs	r2, #60	; 0x3c
 8003e74:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	223c      	movs	r2, #60	; 0x3c
 8003e7c:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2218      	movs	r2, #24
 8003e84:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	22ff      	movs	r2, #255	; 0xff
 8003e8c:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	22ff      	movs	r2, #255	; 0xff
 8003e94:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	22e7      	movs	r2, #231	; 0xe7
 8003e9c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	22c3      	movs	r2, #195	; 0xc3
 8003ea4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	22c3      	movs	r2, #195	; 0xc3
 8003eac:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	22e7      	movs	r2, #231	; 0xe7
 8003eb4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	22ff      	movs	r2, #255	; 0xff
 8003ebc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	22ff      	movs	r2, #255	; 0xff
 8003ec4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	223c      	movs	r2, #60	; 0x3c
 8003ecc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2266      	movs	r2, #102	; 0x66
 8003ed4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2242      	movs	r2, #66	; 0x42
 8003edc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2242      	movs	r2, #66	; 0x42
 8003ee4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2266      	movs	r2, #102	; 0x66
 8003eec:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	223c      	movs	r2, #60	; 0x3c
 8003ef4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	22ff      	movs	r2, #255	; 0xff
 8003efc:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	22c3      	movs	r2, #195	; 0xc3
 8003f04:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2299      	movs	r2, #153	; 0x99
 8003f0c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	22bd      	movs	r2, #189	; 0xbd
 8003f14:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	22bd      	movs	r2, #189	; 0xbd
 8003f1c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2299      	movs	r2, #153	; 0x99
 8003f24:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	22c3      	movs	r2, #195	; 0xc3
 8003f2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	22ff      	movs	r2, #255	; 0xff
 8003f34:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2270      	movs	r2, #112	; 0x70
 8003f3c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	22f8      	movs	r2, #248	; 0xf8
 8003f44:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2288      	movs	r2, #136	; 0x88
 8003f4c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2288      	movs	r2, #136	; 0x88
 8003f54:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	22fd      	movs	r2, #253	; 0xfd
 8003f5c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	227f      	movs	r2, #127	; 0x7f
 8003f64:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2207      	movs	r2, #7
 8003f6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	220f      	movs	r2, #15
 8003f74:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	224e      	movs	r2, #78	; 0x4e
 8003f7c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	225f      	movs	r2, #95	; 0x5f
 8003f84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	22f1      	movs	r2, #241	; 0xf1
 8003f8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	22f1      	movs	r2, #241	; 0xf1
 8003f94:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	225f      	movs	r2, #95	; 0x5f
 8003f9c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	224e      	movs	r2, #78	; 0x4e
 8003fa4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	22c0      	movs	r2, #192	; 0xc0
 8003fac:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	22e0      	movs	r2, #224	; 0xe0
 8003fb4:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	22ff      	movs	r2, #255	; 0xff
 8003fbc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	227f      	movs	r2, #127	; 0x7f
 8003fc4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2205      	movs	r2, #5
 8003fcc:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2205      	movs	r2, #5
 8003fd4:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2207      	movs	r2, #7
 8003fdc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2207      	movs	r2, #7
 8003fe4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	22c0      	movs	r2, #192	; 0xc0
 8003fec:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 8003ff0:	e004      	b.n	8003ffc <_ZN4GLCDC1Ev+0x33c>
 8003ff2:	bf00      	nop
 8003ff4:	080104b8 	.word	0x080104b8
 8003ff8:	080100c0 	.word	0x080100c0
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	22ff      	movs	r2, #255	; 0xff
 8004000:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	227f      	movs	r2, #127	; 0x7f
 8004008:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2205      	movs	r2, #5
 8004010:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2205      	movs	r2, #5
 8004018:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2265      	movs	r2, #101	; 0x65
 8004020:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	227f      	movs	r2, #127	; 0x7f
 8004028:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	223f      	movs	r2, #63	; 0x3f
 8004030:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2299      	movs	r2, #153	; 0x99
 8004038:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	225a      	movs	r2, #90	; 0x5a
 8004040:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	223c      	movs	r2, #60	; 0x3c
 8004048:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	22e7      	movs	r2, #231	; 0xe7
 8004050:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	22e7      	movs	r2, #231	; 0xe7
 8004058:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	223c      	movs	r2, #60	; 0x3c
 8004060:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	225a      	movs	r2, #90	; 0x5a
 8004068:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2299      	movs	r2, #153	; 0x99
 8004070:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	227f      	movs	r2, #127	; 0x7f
 8004078:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	223e      	movs	r2, #62	; 0x3e
 8004080:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	223e      	movs	r2, #62	; 0x3e
 8004088:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	221c      	movs	r2, #28
 8004090:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	221c      	movs	r2, #28
 8004098:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2208      	movs	r2, #8
 80040a0:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2208      	movs	r2, #8
 80040a8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2208      	movs	r2, #8
 80040b0:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2208      	movs	r2, #8
 80040b8:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	221c      	movs	r2, #28
 80040c0:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	221c      	movs	r2, #28
 80040c8:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	223e      	movs	r2, #62	; 0x3e
 80040d0:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	223e      	movs	r2, #62	; 0x3e
 80040d8:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	227f      	movs	r2, #127	; 0x7f
 80040e0:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2224      	movs	r2, #36	; 0x24
 80040e8:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2266      	movs	r2, #102	; 0x66
 80040f0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	22ff      	movs	r2, #255	; 0xff
 80040f8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	22ff      	movs	r2, #255	; 0xff
 8004100:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2266      	movs	r2, #102	; 0x66
 8004108:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2224      	movs	r2, #36	; 0x24
 8004110:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	225f      	movs	r2, #95	; 0x5f
 8004118:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	225f      	movs	r2, #95	; 0x5f
 8004120:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	225f      	movs	r2, #95	; 0x5f
 8004128:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	225f      	movs	r2, #95	; 0x5f
 8004130:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2206      	movs	r2, #6
 8004138:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	220f      	movs	r2, #15
 8004140:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2209      	movs	r2, #9
 8004148:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	227f      	movs	r2, #127	; 0x7f
 8004150:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	227f      	movs	r2, #127	; 0x7f
 8004158:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	227f      	movs	r2, #127	; 0x7f
 8004168:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	227f      	movs	r2, #127	; 0x7f
 8004170:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2240      	movs	r2, #64	; 0x40
 8004178:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	22da      	movs	r2, #218	; 0xda
 8004180:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	22bf      	movs	r2, #191	; 0xbf
 8004188:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	22a5      	movs	r2, #165	; 0xa5
 8004190:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	22fd      	movs	r2, #253	; 0xfd
 8004198:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2259      	movs	r2, #89	; 0x59
 80041a0:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2203      	movs	r2, #3
 80041a8:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2270      	movs	r2, #112	; 0x70
 80041b8:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2270      	movs	r2, #112	; 0x70
 80041c0:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2270      	movs	r2, #112	; 0x70
 80041c8:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2270      	movs	r2, #112	; 0x70
 80041d0:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2270      	movs	r2, #112	; 0x70
 80041d8:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2270      	movs	r2, #112	; 0x70
 80041e0:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2280      	movs	r2, #128	; 0x80
 80041e8:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2294      	movs	r2, #148	; 0x94
 80041f0:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	22b6      	movs	r2, #182	; 0xb6
 80041f8:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	22ff      	movs	r2, #255	; 0xff
 8004200:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	22ff      	movs	r2, #255	; 0xff
 8004208:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	22b6      	movs	r2, #182	; 0xb6
 8004210:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2294      	movs	r2, #148	; 0x94
 8004218:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2280      	movs	r2, #128	; 0x80
 8004220:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2204      	movs	r2, #4
 8004228:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2206      	movs	r2, #6
 8004230:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	227f      	movs	r2, #127	; 0x7f
 8004238:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	227f      	movs	r2, #127	; 0x7f
 8004240:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2206      	movs	r2, #6
 8004248:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2204      	movs	r2, #4
 8004250:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2210      	movs	r2, #16
 8004258:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2230      	movs	r2, #48	; 0x30
 8004260:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	227f      	movs	r2, #127	; 0x7f
 8004268:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	227f      	movs	r2, #127	; 0x7f
 8004270:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2230      	movs	r2, #48	; 0x30
 8004278:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2210      	movs	r2, #16
 8004280:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2208      	movs	r2, #8
 8004288:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2208      	movs	r2, #8
 8004290:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2208      	movs	r2, #8
 8004298:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	222a      	movs	r2, #42	; 0x2a
 80042a0:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	223e      	movs	r2, #62	; 0x3e
 80042a8:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	221c      	movs	r2, #28
 80042b0:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2208      	movs	r2, #8
 80042b8:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2208      	movs	r2, #8
 80042c0:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	221c      	movs	r2, #28
 80042c8:	f883 20f7 	strb.w	r2, [r3, #247]	; 0xf7
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	223e      	movs	r2, #62	; 0x3e
 80042d0:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	222a      	movs	r2, #42	; 0x2a
 80042d8:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2208      	movs	r2, #8
 80042e0:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2208      	movs	r2, #8
 80042e8:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2208      	movs	r2, #8
 80042f0:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	223c      	movs	r2, #60	; 0x3c
 80042f8:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	223c      	movs	r2, #60	; 0x3c
 8004300:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2220      	movs	r2, #32
 8004310:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2220      	movs	r2, #32
 8004318:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2220      	movs	r2, #32
 8004320:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2208      	movs	r2, #8
 8004330:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	221c      	movs	r2, #28
 8004338:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	223e      	movs	r2, #62	; 0x3e
 8004340:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2208      	movs	r2, #8
 8004348:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2208      	movs	r2, #8
 8004350:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	223e      	movs	r2, #62	; 0x3e
 8004358:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	221c      	movs	r2, #28
 8004360:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2208      	movs	r2, #8
 8004368:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2230      	movs	r2, #48	; 0x30
 8004370:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2238      	movs	r2, #56	; 0x38
 8004378:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	223c      	movs	r2, #60	; 0x3c
 8004380:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	223e      	movs	r2, #62	; 0x3e
 8004388:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	223e      	movs	r2, #62	; 0x3e
 8004390:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	223c      	movs	r2, #60	; 0x3c
 8004398:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2238      	movs	r2, #56	; 0x38
 80043a0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2230      	movs	r2, #48	; 0x30
 80043a8:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2206      	movs	r2, #6
 80043b0:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	220e      	movs	r2, #14
 80043b8:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	221e      	movs	r2, #30
 80043c0:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	223e      	movs	r2, #62	; 0x3e
 80043c8:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	223e      	movs	r2, #62	; 0x3e
 80043d0:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	221e      	movs	r2, #30
 80043d8:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	220e      	movs	r2, #14
 80043e0:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2206      	movs	r2, #6
 80043e8:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2206      	movs	r2, #6
 80043f0:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	225f      	movs	r2, #95	; 0x5f
 80043f8:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	225f      	movs	r2, #95	; 0x5f
 8004400:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2206      	movs	r2, #6
 8004408:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2207      	movs	r2, #7
 8004410:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2207      	movs	r2, #7
 8004418:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2207      	movs	r2, #7
 8004420:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2207      	movs	r2, #7
 8004428:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2214      	movs	r2, #20
 8004430:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	227f      	movs	r2, #127	; 0x7f
 8004438:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	227f      	movs	r2, #127	; 0x7f
 8004440:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2214      	movs	r2, #20
 8004448:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	227f      	movs	r2, #127	; 0x7f
 8004450:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	227f      	movs	r2, #127	; 0x7f
 8004458:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2214      	movs	r2, #20
 8004460:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2224      	movs	r2, #36	; 0x24
 8004468:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	222e      	movs	r2, #46	; 0x2e
 8004470:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	226b      	movs	r2, #107	; 0x6b
 8004478:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	226b      	movs	r2, #107	; 0x6b
 8004480:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	223a      	movs	r2, #58	; 0x3a
 8004488:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2212      	movs	r2, #18
 8004490:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2246      	movs	r2, #70	; 0x46
 8004498:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2266      	movs	r2, #102	; 0x66
 80044a0:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2230      	movs	r2, #48	; 0x30
 80044a8:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2218      	movs	r2, #24
 80044b0:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	220c      	movs	r2, #12
 80044b8:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2266      	movs	r2, #102	; 0x66
 80044c0:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2262      	movs	r2, #98	; 0x62
 80044c8:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2230      	movs	r2, #48	; 0x30
 80044d0:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	227a      	movs	r2, #122	; 0x7a
 80044d8:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	224f      	movs	r2, #79	; 0x4f
 80044e0:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	225d      	movs	r2, #93	; 0x5d
 80044e8:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2237      	movs	r2, #55	; 0x37
 80044f0:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	227a      	movs	r2, #122	; 0x7a
 80044f8:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2248      	movs	r2, #72	; 0x48
 8004500:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2204      	movs	r2, #4
 8004508:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2207      	movs	r2, #7
 8004510:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2203      	movs	r2, #3
 8004518:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	221c      	movs	r2, #28
 8004520:	f883 215f 	strb.w	r2, [r3, #351]	; 0x15f
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	223e      	movs	r2, #62	; 0x3e
 8004528:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2263      	movs	r2, #99	; 0x63
 8004530:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2241      	movs	r2, #65	; 0x41
 8004538:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2241      	movs	r2, #65	; 0x41
 8004540:	f883 2167 	strb.w	r2, [r3, #359]	; 0x167
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2263      	movs	r2, #99	; 0x63
 8004548:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	223e      	movs	r2, #62	; 0x3e
 8004550:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	221c      	movs	r2, #28
 8004558:	f883 216a 	strb.w	r2, [r3, #362]	; 0x16a
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2208      	movs	r2, #8
 8004560:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	222a      	movs	r2, #42	; 0x2a
 8004568:	f883 216f 	strb.w	r2, [r3, #367]	; 0x16f
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	223e      	movs	r2, #62	; 0x3e
 8004570:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	221c      	movs	r2, #28
 8004578:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	221c      	movs	r2, #28
 8004580:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	223e      	movs	r2, #62	; 0x3e
 8004588:	f883 2173 	strb.w	r2, [r3, #371]	; 0x173
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	222a      	movs	r2, #42	; 0x2a
 8004590:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2208      	movs	r2, #8
 8004598:	f883 2175 	strb.w	r2, [r3, #373]	; 0x175
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2208      	movs	r2, #8
 80045a0:	f883 2176 	strb.w	r2, [r3, #374]	; 0x176
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2208      	movs	r2, #8
 80045a8:	f883 2177 	strb.w	r2, [r3, #375]	; 0x177
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	223e      	movs	r2, #62	; 0x3e
 80045b0:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	223e      	movs	r2, #62	; 0x3e
 80045b8:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2208      	movs	r2, #8
 80045c0:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2208      	movs	r2, #8
 80045c8:	f883 217b 	strb.w	r2, [r3, #379]	; 0x17b
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2280      	movs	r2, #128	; 0x80
 80045d0:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	22e0      	movs	r2, #224	; 0xe0
 80045d8:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2260      	movs	r2, #96	; 0x60
 80045e0:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2208      	movs	r2, #8
 80045e8:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2208      	movs	r2, #8
 80045f0:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2208      	movs	r2, #8
 80045f8:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2208      	movs	r2, #8
 8004600:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2208      	movs	r2, #8
 8004608:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2208      	movs	r2, #8
 8004610:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2260      	movs	r2, #96	; 0x60
 8004618:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2260      	movs	r2, #96	; 0x60
 8004620:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2260      	movs	r2, #96	; 0x60
 8004628:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2230      	movs	r2, #48	; 0x30
 8004630:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2218      	movs	r2, #24
 8004638:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	220c      	movs	r2, #12
 8004640:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2206      	movs	r2, #6
 8004648:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2203      	movs	r2, #3
 8004650:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	223e      	movs	r2, #62	; 0x3e
 8004660:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	227f      	movs	r2, #127	; 0x7f
 8004668:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2271      	movs	r2, #113	; 0x71
 8004670:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2259      	movs	r2, #89	; 0x59
 8004678:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	224d      	movs	r2, #77	; 0x4d
 8004680:	f883 21a2 	strb.w	r2, [r3, #418]	; 0x1a2
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	227f      	movs	r2, #127	; 0x7f
 8004688:	f883 21a3 	strb.w	r2, [r3, #419]	; 0x1a3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	223e      	movs	r2, #62	; 0x3e
 8004690:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2240      	movs	r2, #64	; 0x40
 8004698:	f883 21a6 	strb.w	r2, [r3, #422]	; 0x1a6
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2242      	movs	r2, #66	; 0x42
 80046a0:	f883 21a7 	strb.w	r2, [r3, #423]	; 0x1a7
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	227f      	movs	r2, #127	; 0x7f
 80046a8:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	227f      	movs	r2, #127	; 0x7f
 80046b0:	f883 21a9 	strb.w	r2, [r3, #425]	; 0x1a9
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2240      	movs	r2, #64	; 0x40
 80046b8:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2240      	movs	r2, #64	; 0x40
 80046c0:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2262      	movs	r2, #98	; 0x62
 80046c8:	f883 21ae 	strb.w	r2, [r3, #430]	; 0x1ae
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2273      	movs	r2, #115	; 0x73
 80046d0:	f883 21af 	strb.w	r2, [r3, #431]	; 0x1af
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2259      	movs	r2, #89	; 0x59
 80046d8:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2249      	movs	r2, #73	; 0x49
 80046e0:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	226f      	movs	r2, #111	; 0x6f
 80046e8:	f883 21b2 	strb.w	r2, [r3, #434]	; 0x1b2
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2266      	movs	r2, #102	; 0x66
 80046f0:	f883 21b3 	strb.w	r2, [r3, #435]	; 0x1b3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2222      	movs	r2, #34	; 0x22
 80046f8:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2263      	movs	r2, #99	; 0x63
 8004700:	f883 21b7 	strb.w	r2, [r3, #439]	; 0x1b7
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2249      	movs	r2, #73	; 0x49
 8004708:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2249      	movs	r2, #73	; 0x49
 8004710:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	227f      	movs	r2, #127	; 0x7f
 8004718:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2236      	movs	r2, #54	; 0x36
 8004720:	f883 21bb 	strb.w	r2, [r3, #443]	; 0x1bb
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2218      	movs	r2, #24
 8004728:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	221c      	movs	r2, #28
 8004730:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2216      	movs	r2, #22
 8004738:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2253      	movs	r2, #83	; 0x53
 8004740:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	227f      	movs	r2, #127	; 0x7f
 8004748:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	227f      	movs	r2, #127	; 0x7f
 8004750:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2250      	movs	r2, #80	; 0x50
 8004758:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2227      	movs	r2, #39	; 0x27
 8004760:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2267      	movs	r2, #103	; 0x67
 8004768:	f883 21c7 	strb.w	r2, [r3, #455]	; 0x1c7
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2245      	movs	r2, #69	; 0x45
 8004770:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2245      	movs	r2, #69	; 0x45
 8004778:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	227d      	movs	r2, #125	; 0x7d
 8004780:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2239      	movs	r2, #57	; 0x39
 8004788:	f883 21cb 	strb.w	r2, [r3, #459]	; 0x1cb
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	223c      	movs	r2, #60	; 0x3c
 8004790:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	227e      	movs	r2, #126	; 0x7e
 8004798:	f883 21cf 	strb.w	r2, [r3, #463]	; 0x1cf
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	224b      	movs	r2, #75	; 0x4b
 80047a0:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2249      	movs	r2, #73	; 0x49
 80047a8:	f883 21d1 	strb.w	r2, [r3, #465]	; 0x1d1
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2279      	movs	r2, #121	; 0x79
 80047b0:	f883 21d2 	strb.w	r2, [r3, #466]	; 0x1d2
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2230      	movs	r2, #48	; 0x30
 80047b8:	f883 21d3 	strb.w	r2, [r3, #467]	; 0x1d3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2203      	movs	r2, #3
 80047c0:	f883 21d6 	strb.w	r2, [r3, #470]	; 0x1d6
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2203      	movs	r2, #3
 80047c8:	f883 21d7 	strb.w	r2, [r3, #471]	; 0x1d7
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2271      	movs	r2, #113	; 0x71
 80047d0:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2279      	movs	r2, #121	; 0x79
 80047d8:	f883 21d9 	strb.w	r2, [r3, #473]	; 0x1d9
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	220f      	movs	r2, #15
 80047e0:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2207      	movs	r2, #7
 80047e8:	f883 21db 	strb.w	r2, [r3, #475]	; 0x1db
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2236      	movs	r2, #54	; 0x36
 80047f0:	f883 21de 	strb.w	r2, [r3, #478]	; 0x1de
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	227f      	movs	r2, #127	; 0x7f
 80047f8:	f883 21df 	strb.w	r2, [r3, #479]	; 0x1df
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2249      	movs	r2, #73	; 0x49
 8004800:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2249      	movs	r2, #73	; 0x49
 8004808:	f883 21e1 	strb.w	r2, [r3, #481]	; 0x1e1
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	227f      	movs	r2, #127	; 0x7f
 8004810:	f883 21e2 	strb.w	r2, [r3, #482]	; 0x1e2
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2236      	movs	r2, #54	; 0x36
 8004818:	f883 21e3 	strb.w	r2, [r3, #483]	; 0x1e3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2206      	movs	r2, #6
 8004820:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	224f      	movs	r2, #79	; 0x4f
 8004828:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2249      	movs	r2, #73	; 0x49
 8004830:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2269      	movs	r2, #105	; 0x69
 8004838:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	223f      	movs	r2, #63	; 0x3f
 8004840:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	221e      	movs	r2, #30
 8004848:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2266      	movs	r2, #102	; 0x66
 8004850:	f883 21f0 	strb.w	r2, [r3, #496]	; 0x1f0
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2266      	movs	r2, #102	; 0x66
 8004858:	f883 21f1 	strb.w	r2, [r3, #497]	; 0x1f1
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2280      	movs	r2, #128	; 0x80
 8004860:	f883 21f7 	strb.w	r2, [r3, #503]	; 0x1f7
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	22e6      	movs	r2, #230	; 0xe6
 8004868:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2266      	movs	r2, #102	; 0x66
 8004870:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2208      	movs	r2, #8
 8004878:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	221c      	movs	r2, #28
 8004880:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2236      	movs	r2, #54	; 0x36
 8004888:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2263      	movs	r2, #99	; 0x63
 8004890:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2241      	movs	r2, #65	; 0x41
 8004898:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2224      	movs	r2, #36	; 0x24
 80048a0:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2224      	movs	r2, #36	; 0x24
 80048a8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2224      	movs	r2, #36	; 0x24
 80048b0:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2224      	movs	r2, #36	; 0x24
 80048b8:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2224      	movs	r2, #36	; 0x24
 80048c0:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2224      	movs	r2, #36	; 0x24
 80048c8:	f883 220b 	strb.w	r2, [r3, #523]	; 0x20b
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2241      	movs	r2, #65	; 0x41
 80048d0:	f883 220f 	strb.w	r2, [r3, #527]	; 0x20f
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2263      	movs	r2, #99	; 0x63
 80048d8:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2236      	movs	r2, #54	; 0x36
 80048e0:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	221c      	movs	r2, #28
 80048e8:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2208      	movs	r2, #8
 80048f0:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2202      	movs	r2, #2
 80048f8:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2203      	movs	r2, #3
 8004900:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2251      	movs	r2, #81	; 0x51
 8004908:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2259      	movs	r2, #89	; 0x59
 8004910:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	220f      	movs	r2, #15
 8004918:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2206      	movs	r2, #6
 8004920:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	223e      	movs	r2, #62	; 0x3e
 8004928:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	227f      	movs	r2, #127	; 0x7f
 8004930:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2241      	movs	r2, #65	; 0x41
 8004938:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	225d      	movs	r2, #93	; 0x5d
 8004940:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	225d      	movs	r2, #93	; 0x5d
 8004948:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	221f      	movs	r2, #31
 8004950:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	221e      	movs	r2, #30
 8004958:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	227c      	movs	r2, #124	; 0x7c
 8004960:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	227e      	movs	r2, #126	; 0x7e
 8004968:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2213      	movs	r2, #19
 8004970:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2213      	movs	r2, #19
 8004978:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	227e      	movs	r2, #126	; 0x7e
 8004980:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	227c      	movs	r2, #124	; 0x7c
 8004988:	f883 222b 	strb.w	r2, [r3, #555]	; 0x22b
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2241      	movs	r2, #65	; 0x41
 8004990:	f883 222e 	strb.w	r2, [r3, #558]	; 0x22e
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	227f      	movs	r2, #127	; 0x7f
 8004998:	f883 222f 	strb.w	r2, [r3, #559]	; 0x22f
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	227f      	movs	r2, #127	; 0x7f
 80049a0:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2249      	movs	r2, #73	; 0x49
 80049a8:	f883 2231 	strb.w	r2, [r3, #561]	; 0x231
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2249      	movs	r2, #73	; 0x49
 80049b0:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	227f      	movs	r2, #127	; 0x7f
 80049b8:	f883 2233 	strb.w	r2, [r3, #563]	; 0x233
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2236      	movs	r2, #54	; 0x36
 80049c0:	f883 2234 	strb.w	r2, [r3, #564]	; 0x234
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	221c      	movs	r2, #28
 80049c8:	f883 2236 	strb.w	r2, [r3, #566]	; 0x236
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	223e      	movs	r2, #62	; 0x3e
 80049d0:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2263      	movs	r2, #99	; 0x63
 80049d8:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2241      	movs	r2, #65	; 0x41
 80049e0:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2241      	movs	r2, #65	; 0x41
 80049e8:	f883 223a 	strb.w	r2, [r3, #570]	; 0x23a
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2263      	movs	r2, #99	; 0x63
 80049f0:	f883 223b 	strb.w	r2, [r3, #571]	; 0x23b
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2222      	movs	r2, #34	; 0x22
 80049f8:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2241      	movs	r2, #65	; 0x41
 8004a00:	f883 223e 	strb.w	r2, [r3, #574]	; 0x23e
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	227f      	movs	r2, #127	; 0x7f
 8004a08:	f883 223f 	strb.w	r2, [r3, #575]	; 0x23f
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	227f      	movs	r2, #127	; 0x7f
 8004a10:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2241      	movs	r2, #65	; 0x41
 8004a18:	f883 2241 	strb.w	r2, [r3, #577]	; 0x241
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2263      	movs	r2, #99	; 0x63
 8004a20:	f883 2242 	strb.w	r2, [r3, #578]	; 0x242
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	223e      	movs	r2, #62	; 0x3e
 8004a28:	f883 2243 	strb.w	r2, [r3, #579]	; 0x243
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	221c      	movs	r2, #28
 8004a30:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2241      	movs	r2, #65	; 0x41
 8004a38:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	227f      	movs	r2, #127	; 0x7f
 8004a40:	f883 2247 	strb.w	r2, [r3, #583]	; 0x247
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	227f      	movs	r2, #127	; 0x7f
 8004a48:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2249      	movs	r2, #73	; 0x49
 8004a50:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	225d      	movs	r2, #93	; 0x5d
 8004a58:	f883 224a 	strb.w	r2, [r3, #586]	; 0x24a
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2241      	movs	r2, #65	; 0x41
 8004a60:	f883 224b 	strb.w	r2, [r3, #587]	; 0x24b
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2263      	movs	r2, #99	; 0x63
 8004a68:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2241      	movs	r2, #65	; 0x41
 8004a70:	f883 224e 	strb.w	r2, [r3, #590]	; 0x24e
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	227f      	movs	r2, #127	; 0x7f
 8004a78:	f883 224f 	strb.w	r2, [r3, #591]	; 0x24f
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	227f      	movs	r2, #127	; 0x7f
 8004a80:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2249      	movs	r2, #73	; 0x49
 8004a88:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	221d      	movs	r2, #29
 8004a90:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2253 	strb.w	r2, [r3, #595]	; 0x253
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2203      	movs	r2, #3
 8004aa0:	f883 2254 	strb.w	r2, [r3, #596]	; 0x254
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	221c      	movs	r2, #28
 8004aa8:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	223e      	movs	r2, #62	; 0x3e
 8004ab0:	f883 2257 	strb.w	r2, [r3, #599]	; 0x257
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2263      	movs	r2, #99	; 0x63
 8004ab8:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2241      	movs	r2, #65	; 0x41
 8004ac0:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2251      	movs	r2, #81	; 0x51
 8004ac8:	f883 225a 	strb.w	r2, [r3, #602]	; 0x25a
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2273      	movs	r2, #115	; 0x73
 8004ad0:	f883 225b 	strb.w	r2, [r3, #603]	; 0x25b
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2272      	movs	r2, #114	; 0x72
 8004ad8:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	227f      	movs	r2, #127	; 0x7f
 8004ae0:	f883 225e 	strb.w	r2, [r3, #606]	; 0x25e
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	227f      	movs	r2, #127	; 0x7f
 8004ae8:	f883 225f 	strb.w	r2, [r3, #607]	; 0x25f
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2208      	movs	r2, #8
 8004af0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2208      	movs	r2, #8
 8004af8:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	227f      	movs	r2, #127	; 0x7f
 8004b00:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	227f      	movs	r2, #127	; 0x7f
 8004b08:	f883 2263 	strb.w	r2, [r3, #611]	; 0x263
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2241      	movs	r2, #65	; 0x41
 8004b10:	f883 2267 	strb.w	r2, [r3, #615]	; 0x267
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	227f      	movs	r2, #127	; 0x7f
 8004b18:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	227f      	movs	r2, #127	; 0x7f
 8004b20:	f883 2269 	strb.w	r2, [r3, #617]	; 0x269
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2241      	movs	r2, #65	; 0x41
 8004b28:	f883 226a 	strb.w	r2, [r3, #618]	; 0x26a
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2230      	movs	r2, #48	; 0x30
 8004b30:	f883 226e 	strb.w	r2, [r3, #622]	; 0x26e
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2270      	movs	r2, #112	; 0x70
 8004b38:	f883 226f 	strb.w	r2, [r3, #623]	; 0x26f
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2240      	movs	r2, #64	; 0x40
 8004b40:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2241      	movs	r2, #65	; 0x41
 8004b48:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	227f      	movs	r2, #127	; 0x7f
 8004b50:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	223f      	movs	r2, #63	; 0x3f
 8004b58:	f883 2273 	strb.w	r2, [r3, #627]	; 0x273
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2241      	movs	r2, #65	; 0x41
 8004b68:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	227f      	movs	r2, #127	; 0x7f
 8004b70:	f883 2277 	strb.w	r2, [r3, #631]	; 0x277
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	227f      	movs	r2, #127	; 0x7f
 8004b78:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2208      	movs	r2, #8
 8004b80:	f883 2279 	strb.w	r2, [r3, #633]	; 0x279
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	221c      	movs	r2, #28
 8004b88:	f883 227a 	strb.w	r2, [r3, #634]	; 0x27a
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2277      	movs	r2, #119	; 0x77
 8004b90:	f883 227b 	strb.w	r2, [r3, #635]	; 0x27b
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2263      	movs	r2, #99	; 0x63
 8004b98:	f883 227c 	strb.w	r2, [r3, #636]	; 0x27c
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2241      	movs	r2, #65	; 0x41
 8004ba0:	f883 227e 	strb.w	r2, [r3, #638]	; 0x27e
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	227f      	movs	r2, #127	; 0x7f
 8004ba8:	f883 227f 	strb.w	r2, [r3, #639]	; 0x27f
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	227f      	movs	r2, #127	; 0x7f
 8004bb0:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2241      	movs	r2, #65	; 0x41
 8004bb8:	f883 2281 	strb.w	r2, [r3, #641]	; 0x281
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2240      	movs	r2, #64	; 0x40
 8004bc0:	f883 2282 	strb.w	r2, [r3, #642]	; 0x282
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2260      	movs	r2, #96	; 0x60
 8004bc8:	f883 2283 	strb.w	r2, [r3, #643]	; 0x283
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2270      	movs	r2, #112	; 0x70
 8004bd0:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	227f      	movs	r2, #127	; 0x7f
 8004bd8:	f883 2286 	strb.w	r2, [r3, #646]	; 0x286
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	227f      	movs	r2, #127	; 0x7f
 8004be0:	f883 2287 	strb.w	r2, [r3, #647]	; 0x287
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	220e      	movs	r2, #14
 8004be8:	f883 2288 	strb.w	r2, [r3, #648]	; 0x288
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	221c      	movs	r2, #28
 8004bf0:	f883 2289 	strb.w	r2, [r3, #649]	; 0x289
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	220e      	movs	r2, #14
 8004bf8:	f883 228a 	strb.w	r2, [r3, #650]	; 0x28a
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	227f      	movs	r2, #127	; 0x7f
 8004c00:	f883 228b 	strb.w	r2, [r3, #651]	; 0x28b
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	227f      	movs	r2, #127	; 0x7f
 8004c08:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	227f      	movs	r2, #127	; 0x7f
 8004c10:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	227f      	movs	r2, #127	; 0x7f
 8004c18:	f883 228f 	strb.w	r2, [r3, #655]	; 0x28f
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2206      	movs	r2, #6
 8004c20:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	220c      	movs	r2, #12
 8004c28:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2218      	movs	r2, #24
 8004c30:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	227f      	movs	r2, #127	; 0x7f
 8004c38:	f883 2293 	strb.w	r2, [r3, #659]	; 0x293
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	227f      	movs	r2, #127	; 0x7f
 8004c40:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	221c      	movs	r2, #28
 8004c48:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	223e      	movs	r2, #62	; 0x3e
 8004c50:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2263      	movs	r2, #99	; 0x63
 8004c58:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2241      	movs	r2, #65	; 0x41
 8004c60:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2263      	movs	r2, #99	; 0x63
 8004c68:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	223e      	movs	r2, #62	; 0x3e
 8004c70:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	221c      	movs	r2, #28
 8004c78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2241      	movs	r2, #65	; 0x41
 8004c80:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	227f      	movs	r2, #127	; 0x7f
 8004c88:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	227f      	movs	r2, #127	; 0x7f
 8004c90:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2249      	movs	r2, #73	; 0x49
 8004c98:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2209      	movs	r2, #9
 8004ca0:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	220f      	movs	r2, #15
 8004ca8:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2206      	movs	r2, #6
 8004cb0:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	221e      	movs	r2, #30
 8004cb8:	f883 22a6 	strb.w	r2, [r3, #678]	; 0x2a6
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	223f      	movs	r2, #63	; 0x3f
 8004cc0:	f883 22a7 	strb.w	r2, [r3, #679]	; 0x2a7
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2221      	movs	r2, #33	; 0x21
 8004cc8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2271      	movs	r2, #113	; 0x71
 8004cd0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	227f      	movs	r2, #127	; 0x7f
 8004cd8:	f883 22aa 	strb.w	r2, [r3, #682]	; 0x2aa
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	225e      	movs	r2, #94	; 0x5e
 8004ce0:	f883 22ab 	strb.w	r2, [r3, #683]	; 0x2ab
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2241      	movs	r2, #65	; 0x41
 8004ce8:	f883 22ae 	strb.w	r2, [r3, #686]	; 0x2ae
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	227f      	movs	r2, #127	; 0x7f
 8004cf0:	f883 22af 	strb.w	r2, [r3, #687]	; 0x2af
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	227f      	movs	r2, #127	; 0x7f
 8004cf8:	f883 22b0 	strb.w	r2, [r3, #688]	; 0x2b0
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2209      	movs	r2, #9
 8004d00:	f883 22b1 	strb.w	r2, [r3, #689]	; 0x2b1
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2219      	movs	r2, #25
 8004d08:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	227f      	movs	r2, #127	; 0x7f
 8004d10:	f883 22b3 	strb.w	r2, [r3, #691]	; 0x2b3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2266      	movs	r2, #102	; 0x66
 8004d18:	f883 22b4 	strb.w	r2, [r3, #692]	; 0x2b4
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2226      	movs	r2, #38	; 0x26
 8004d20:	f883 22b6 	strb.w	r2, [r3, #694]	; 0x2b6
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	226f      	movs	r2, #111	; 0x6f
 8004d28:	f883 22b7 	strb.w	r2, [r3, #695]	; 0x2b7
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	224d      	movs	r2, #77	; 0x4d
 8004d30:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2259      	movs	r2, #89	; 0x59
 8004d38:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2273      	movs	r2, #115	; 0x73
 8004d40:	f883 22ba 	strb.w	r2, [r3, #698]	; 0x2ba
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2232      	movs	r2, #50	; 0x32
 8004d48:	f883 22bb 	strb.w	r2, [r3, #699]	; 0x2bb
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2203      	movs	r2, #3
 8004d50:	f883 22be 	strb.w	r2, [r3, #702]	; 0x2be
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2241      	movs	r2, #65	; 0x41
 8004d58:	f883 22bf 	strb.w	r2, [r3, #703]	; 0x2bf
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	227f      	movs	r2, #127	; 0x7f
 8004d60:	f883 22c0 	strb.w	r2, [r3, #704]	; 0x2c0
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	227f      	movs	r2, #127	; 0x7f
 8004d68:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2241      	movs	r2, #65	; 0x41
 8004d70:	f883 22c2 	strb.w	r2, [r3, #706]	; 0x2c2
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2203      	movs	r2, #3
 8004d78:	f883 22c3 	strb.w	r2, [r3, #707]	; 0x2c3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	227f      	movs	r2, #127	; 0x7f
 8004d80:	f883 22c6 	strb.w	r2, [r3, #710]	; 0x2c6
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	227f      	movs	r2, #127	; 0x7f
 8004d88:	f883 22c7 	strb.w	r2, [r3, #711]	; 0x2c7
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2240      	movs	r2, #64	; 0x40
 8004d90:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2240      	movs	r2, #64	; 0x40
 8004d98:	f883 22c9 	strb.w	r2, [r3, #713]	; 0x2c9
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	227f      	movs	r2, #127	; 0x7f
 8004da0:	f883 22ca 	strb.w	r2, [r3, #714]	; 0x2ca
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	227f      	movs	r2, #127	; 0x7f
 8004da8:	f883 22cb 	strb.w	r2, [r3, #715]	; 0x2cb
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	221f      	movs	r2, #31
 8004db0:	f883 22ce 	strb.w	r2, [r3, #718]	; 0x2ce
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	223f      	movs	r2, #63	; 0x3f
 8004db8:	f883 22cf 	strb.w	r2, [r3, #719]	; 0x2cf
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2260      	movs	r2, #96	; 0x60
 8004dc0:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2260      	movs	r2, #96	; 0x60
 8004dc8:	f883 22d1 	strb.w	r2, [r3, #721]	; 0x2d1
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	223f      	movs	r2, #63	; 0x3f
 8004dd0:	f883 22d2 	strb.w	r2, [r3, #722]	; 0x2d2
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	221f      	movs	r2, #31
 8004dd8:	f883 22d3 	strb.w	r2, [r3, #723]	; 0x2d3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	227f      	movs	r2, #127	; 0x7f
 8004de0:	f883 22d6 	strb.w	r2, [r3, #726]	; 0x2d6
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	227f      	movs	r2, #127	; 0x7f
 8004de8:	f883 22d7 	strb.w	r2, [r3, #727]	; 0x2d7
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2230      	movs	r2, #48	; 0x30
 8004df0:	f883 22d8 	strb.w	r2, [r3, #728]	; 0x2d8
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2218      	movs	r2, #24
 8004df8:	f883 22d9 	strb.w	r2, [r3, #729]	; 0x2d9
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2230      	movs	r2, #48	; 0x30
 8004e00:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	227f      	movs	r2, #127	; 0x7f
 8004e08:	f883 22db 	strb.w	r2, [r3, #731]	; 0x2db
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	227f      	movs	r2, #127	; 0x7f
 8004e10:	f883 22dc 	strb.w	r2, [r3, #732]	; 0x2dc
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2243      	movs	r2, #67	; 0x43
 8004e18:	f883 22de 	strb.w	r2, [r3, #734]	; 0x2de
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2267      	movs	r2, #103	; 0x67
 8004e20:	f883 22df 	strb.w	r2, [r3, #735]	; 0x2df
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	223c      	movs	r2, #60	; 0x3c
 8004e28:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2218      	movs	r2, #24
 8004e30:	f883 22e1 	strb.w	r2, [r3, #737]	; 0x2e1
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	223c      	movs	r2, #60	; 0x3c
 8004e38:	f883 22e2 	strb.w	r2, [r3, #738]	; 0x2e2
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2267      	movs	r2, #103	; 0x67
 8004e40:	f883 22e3 	strb.w	r2, [r3, #739]	; 0x2e3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2243      	movs	r2, #67	; 0x43
 8004e48:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2207      	movs	r2, #7
 8004e50:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	224f      	movs	r2, #79	; 0x4f
 8004e58:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2278      	movs	r2, #120	; 0x78
 8004e60:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2278      	movs	r2, #120	; 0x78
 8004e68:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	224f      	movs	r2, #79	; 0x4f
 8004e70:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2207      	movs	r2, #7
 8004e78:	f883 22eb 	strb.w	r2, [r3, #747]	; 0x2eb
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2247      	movs	r2, #71	; 0x47
 8004e80:	f883 22ee 	strb.w	r2, [r3, #750]	; 0x2ee
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2263      	movs	r2, #99	; 0x63
 8004e88:	f883 22ef 	strb.w	r2, [r3, #751]	; 0x2ef
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2271      	movs	r2, #113	; 0x71
 8004e90:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2259      	movs	r2, #89	; 0x59
 8004e98:	f883 22f1 	strb.w	r2, [r3, #753]	; 0x2f1
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	224d      	movs	r2, #77	; 0x4d
 8004ea0:	f883 22f2 	strb.w	r2, [r3, #754]	; 0x2f2
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2267      	movs	r2, #103	; 0x67
 8004ea8:	f883 22f3 	strb.w	r2, [r3, #755]	; 0x2f3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2273      	movs	r2, #115	; 0x73
 8004eb0:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	227f      	movs	r2, #127	; 0x7f
 8004eb8:	f883 22f7 	strb.w	r2, [r3, #759]	; 0x2f7
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	227f      	movs	r2, #127	; 0x7f
 8004ec0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2241      	movs	r2, #65	; 0x41
 8004ec8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2241      	movs	r2, #65	; 0x41
 8004ed0:	f883 22fa 	strb.w	r2, [r3, #762]	; 0x2fa
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 22fe 	strb.w	r2, [r3, #766]	; 0x2fe
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2203      	movs	r2, #3
 8004ee0:	f883 22ff 	strb.w	r2, [r3, #767]	; 0x2ff
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2206      	movs	r2, #6
 8004ee8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	220c      	movs	r2, #12
 8004ef0:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2218      	movs	r2, #24
 8004ef8:	f883 2302 	strb.w	r2, [r3, #770]	; 0x302
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2230      	movs	r2, #48	; 0x30
 8004f00:	f883 2303 	strb.w	r2, [r3, #771]	; 0x303
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2260      	movs	r2, #96	; 0x60
 8004f08:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2241      	movs	r2, #65	; 0x41
 8004f10:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2241      	movs	r2, #65	; 0x41
 8004f18:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	227f      	movs	r2, #127	; 0x7f
 8004f20:	f883 2309 	strb.w	r2, [r3, #777]	; 0x309
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	227f      	movs	r2, #127	; 0x7f
 8004f28:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2208      	movs	r2, #8
 8004f30:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	220c      	movs	r2, #12
 8004f38:	f883 230f 	strb.w	r2, [r3, #783]	; 0x30f
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2206      	movs	r2, #6
 8004f40:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2203      	movs	r2, #3
 8004f48:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2206      	movs	r2, #6
 8004f50:	f883 2312 	strb.w	r2, [r3, #786]	; 0x312
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	220c      	movs	r2, #12
 8004f58:	f883 2313 	strb.w	r2, [r3, #787]	; 0x313
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2208      	movs	r2, #8
 8004f60:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2280      	movs	r2, #128	; 0x80
 8004f68:	f883 2316 	strb.w	r2, [r3, #790]	; 0x316
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2280      	movs	r2, #128	; 0x80
 8004f70:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2280      	movs	r2, #128	; 0x80
 8004f78:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2280      	movs	r2, #128	; 0x80
 8004f80:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2280      	movs	r2, #128	; 0x80
 8004f88:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2280      	movs	r2, #128	; 0x80
 8004f90:	f883 231b 	strb.w	r2, [r3, #795]	; 0x31b
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2280      	movs	r2, #128	; 0x80
 8004f98:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2280      	movs	r2, #128	; 0x80
 8004fa0:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2203      	movs	r2, #3
 8004fa8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2207      	movs	r2, #7
 8004fb0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2204      	movs	r2, #4
 8004fb8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f883 2326 	strb.w	r2, [r3, #806]	; 0x326
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2274      	movs	r2, #116	; 0x74
 8004fc8:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2254      	movs	r2, #84	; 0x54
 8004fd0:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2254      	movs	r2, #84	; 0x54
 8004fd8:	f883 2329 	strb.w	r2, [r3, #809]	; 0x329
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	223c      	movs	r2, #60	; 0x3c
 8004fe0:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2278      	movs	r2, #120	; 0x78
 8004fe8:	f883 232b 	strb.w	r2, [r3, #811]	; 0x32b
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2240      	movs	r2, #64	; 0x40
 8004ff0:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2241      	movs	r2, #65	; 0x41
 8004ff8:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	227f      	movs	r2, #127	; 0x7f
 8005000:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	223f      	movs	r2, #63	; 0x3f
 8005008:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2248      	movs	r2, #72	; 0x48
 8005010:	f883 2331 	strb.w	r2, [r3, #817]	; 0x331
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2248      	movs	r2, #72	; 0x48
 8005018:	f883 2332 	strb.w	r2, [r3, #818]	; 0x332
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2278      	movs	r2, #120	; 0x78
 8005020:	f883 2333 	strb.w	r2, [r3, #819]	; 0x333
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2230      	movs	r2, #48	; 0x30
 8005028:	f883 2334 	strb.w	r2, [r3, #820]	; 0x334
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2238      	movs	r2, #56	; 0x38
 8005030:	f883 2336 	strb.w	r2, [r3, #822]	; 0x336
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	227c      	movs	r2, #124	; 0x7c
 8005038:	f883 2337 	strb.w	r2, [r3, #823]	; 0x337
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2244      	movs	r2, #68	; 0x44
 8005040:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2244      	movs	r2, #68	; 0x44
 8005048:	f883 2339 	strb.w	r2, [r3, #825]	; 0x339
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	226c      	movs	r2, #108	; 0x6c
 8005050:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2228      	movs	r2, #40	; 0x28
 8005058:	f883 233b 	strb.w	r2, [r3, #827]	; 0x33b
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2230      	movs	r2, #48	; 0x30
 8005060:	f883 233e 	strb.w	r2, [r3, #830]	; 0x33e
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2278      	movs	r2, #120	; 0x78
 8005068:	f883 233f 	strb.w	r2, [r3, #831]	; 0x33f
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2248      	movs	r2, #72	; 0x48
 8005070:	f883 2340 	strb.w	r2, [r3, #832]	; 0x340
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2249      	movs	r2, #73	; 0x49
 8005078:	f883 2341 	strb.w	r2, [r3, #833]	; 0x341
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	223f      	movs	r2, #63	; 0x3f
 8005080:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	227f      	movs	r2, #127	; 0x7f
 8005088:	f883 2343 	strb.w	r2, [r3, #835]	; 0x343
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2240      	movs	r2, #64	; 0x40
 8005090:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2238      	movs	r2, #56	; 0x38
 8005098:	f883 2346 	strb.w	r2, [r3, #838]	; 0x346
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	227c      	movs	r2, #124	; 0x7c
 80050a0:	f883 2347 	strb.w	r2, [r3, #839]	; 0x347
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2254      	movs	r2, #84	; 0x54
 80050a8:	f883 2348 	strb.w	r2, [r3, #840]	; 0x348
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2254      	movs	r2, #84	; 0x54
 80050b0:	f883 2349 	strb.w	r2, [r3, #841]	; 0x349
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	225c      	movs	r2, #92	; 0x5c
 80050b8:	f883 234a 	strb.w	r2, [r3, #842]	; 0x34a
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2218      	movs	r2, #24
 80050c0:	f883 234b 	strb.w	r2, [r3, #843]	; 0x34b
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2248      	movs	r2, #72	; 0x48
 80050c8:	f883 234e 	strb.w	r2, [r3, #846]	; 0x34e
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	227e      	movs	r2, #126	; 0x7e
 80050d0:	f883 234f 	strb.w	r2, [r3, #847]	; 0x34f
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	227f      	movs	r2, #127	; 0x7f
 80050d8:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2249      	movs	r2, #73	; 0x49
 80050e0:	f883 2351 	strb.w	r2, [r3, #849]	; 0x351
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2203      	movs	r2, #3
 80050e8:	f883 2352 	strb.w	r2, [r3, #850]	; 0x352
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 2353 	strb.w	r2, [r3, #851]	; 0x353
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2298      	movs	r2, #152	; 0x98
 80050f8:	f883 2356 	strb.w	r2, [r3, #854]	; 0x356
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	22bc      	movs	r2, #188	; 0xbc
 8005100:	f883 2357 	strb.w	r2, [r3, #855]	; 0x357
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	22a4      	movs	r2, #164	; 0xa4
 8005108:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	22a4      	movs	r2, #164	; 0xa4
 8005110:	f883 2359 	strb.w	r2, [r3, #857]	; 0x359
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	22f8      	movs	r2, #248	; 0xf8
 8005118:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	227c      	movs	r2, #124	; 0x7c
 8005120:	f883 235b 	strb.w	r2, [r3, #859]	; 0x35b
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2204      	movs	r2, #4
 8005128:	f883 235c 	strb.w	r2, [r3, #860]	; 0x35c
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2241      	movs	r2, #65	; 0x41
 8005130:	f883 235e 	strb.w	r2, [r3, #862]	; 0x35e
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	227f      	movs	r2, #127	; 0x7f
 8005138:	f883 235f 	strb.w	r2, [r3, #863]	; 0x35f
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	227f      	movs	r2, #127	; 0x7f
 8005140:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2208      	movs	r2, #8
 8005148:	f883 2361 	strb.w	r2, [r3, #865]	; 0x361
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2204      	movs	r2, #4
 8005150:	f883 2362 	strb.w	r2, [r3, #866]	; 0x362
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	227c      	movs	r2, #124	; 0x7c
 8005158:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2278      	movs	r2, #120	; 0x78
 8005160:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2244      	movs	r2, #68	; 0x44
 8005168:	f883 2367 	strb.w	r2, [r3, #871]	; 0x367
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	227d      	movs	r2, #125	; 0x7d
 8005170:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	227d      	movs	r2, #125	; 0x7d
 8005178:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2240      	movs	r2, #64	; 0x40
 8005180:	f883 236a 	strb.w	r2, [r3, #874]	; 0x36a
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2260      	movs	r2, #96	; 0x60
 8005188:	f883 236e 	strb.w	r2, [r3, #878]	; 0x36e
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	22e0      	movs	r2, #224	; 0xe0
 8005190:	f883 236f 	strb.w	r2, [r3, #879]	; 0x36f
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2280      	movs	r2, #128	; 0x80
 8005198:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2280      	movs	r2, #128	; 0x80
 80051a0:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	22fd      	movs	r2, #253	; 0xfd
 80051a8:	f883 2372 	strb.w	r2, [r3, #882]	; 0x372
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	227d      	movs	r2, #125	; 0x7d
 80051b0:	f883 2373 	strb.w	r2, [r3, #883]	; 0x373
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2241      	movs	r2, #65	; 0x41
 80051b8:	f883 2376 	strb.w	r2, [r3, #886]	; 0x376
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	227f      	movs	r2, #127	; 0x7f
 80051c0:	f883 2377 	strb.w	r2, [r3, #887]	; 0x377
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	227f      	movs	r2, #127	; 0x7f
 80051c8:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2210      	movs	r2, #16
 80051d0:	f883 2379 	strb.w	r2, [r3, #889]	; 0x379
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2238      	movs	r2, #56	; 0x38
 80051d8:	f883 237a 	strb.w	r2, [r3, #890]	; 0x37a
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	226c      	movs	r2, #108	; 0x6c
 80051e0:	f883 237b 	strb.w	r2, [r3, #891]	; 0x37b
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2244      	movs	r2, #68	; 0x44
 80051e8:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2241      	movs	r2, #65	; 0x41
 80051f0:	f883 237f 	strb.w	r2, [r3, #895]	; 0x37f
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	227f      	movs	r2, #127	; 0x7f
 80051f8:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	227f      	movs	r2, #127	; 0x7f
 8005200:	f883 2381 	strb.w	r2, [r3, #897]	; 0x381
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2240      	movs	r2, #64	; 0x40
 8005208:	f883 2382 	strb.w	r2, [r3, #898]	; 0x382
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	227c      	movs	r2, #124	; 0x7c
 8005210:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	227c      	movs	r2, #124	; 0x7c
 8005218:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2218      	movs	r2, #24
 8005220:	f883 2388 	strb.w	r2, [r3, #904]	; 0x388
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2238      	movs	r2, #56	; 0x38
 8005228:	f883 2389 	strb.w	r2, [r3, #905]	; 0x389
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	221c      	movs	r2, #28
 8005230:	f883 238a 	strb.w	r2, [r3, #906]	; 0x38a
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	227c      	movs	r2, #124	; 0x7c
 8005238:	f883 238b 	strb.w	r2, [r3, #907]	; 0x38b
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2278      	movs	r2, #120	; 0x78
 8005240:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	227c      	movs	r2, #124	; 0x7c
 8005248:	f883 238e 	strb.w	r2, [r3, #910]	; 0x38e
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	227c      	movs	r2, #124	; 0x7c
 8005250:	f883 238f 	strb.w	r2, [r3, #911]	; 0x38f
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2204      	movs	r2, #4
 8005258:	f883 2390 	strb.w	r2, [r3, #912]	; 0x390
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2204      	movs	r2, #4
 8005260:	f883 2391 	strb.w	r2, [r3, #913]	; 0x391
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	227c      	movs	r2, #124	; 0x7c
 8005268:	f883 2392 	strb.w	r2, [r3, #914]	; 0x392
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2278      	movs	r2, #120	; 0x78
 8005270:	f883 2393 	strb.w	r2, [r3, #915]	; 0x393
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2238      	movs	r2, #56	; 0x38
 8005278:	f883 2396 	strb.w	r2, [r3, #918]	; 0x396
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	227c      	movs	r2, #124	; 0x7c
 8005280:	f883 2397 	strb.w	r2, [r3, #919]	; 0x397
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2244      	movs	r2, #68	; 0x44
 8005288:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2244      	movs	r2, #68	; 0x44
 8005290:	f883 2399 	strb.w	r2, [r3, #921]	; 0x399
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	227c      	movs	r2, #124	; 0x7c
 8005298:	f883 239a 	strb.w	r2, [r3, #922]	; 0x39a
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2238      	movs	r2, #56	; 0x38
 80052a0:	f883 239b 	strb.w	r2, [r3, #923]	; 0x39b
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2284      	movs	r2, #132	; 0x84
 80052a8:	f883 239e 	strb.w	r2, [r3, #926]	; 0x39e
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	22fc      	movs	r2, #252	; 0xfc
 80052b0:	f883 239f 	strb.w	r2, [r3, #927]	; 0x39f
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	22f8      	movs	r2, #248	; 0xf8
 80052b8:	f883 23a0 	strb.w	r2, [r3, #928]	; 0x3a0
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	22a4      	movs	r2, #164	; 0xa4
 80052c0:	f883 23a1 	strb.w	r2, [r3, #929]	; 0x3a1
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2224      	movs	r2, #36	; 0x24
 80052c8:	f883 23a2 	strb.w	r2, [r3, #930]	; 0x3a2
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	223c      	movs	r2, #60	; 0x3c
 80052d0:	f883 23a3 	strb.w	r2, [r3, #931]	; 0x3a3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2218      	movs	r2, #24
 80052d8:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2218      	movs	r2, #24
 80052e0:	f883 23a6 	strb.w	r2, [r3, #934]	; 0x3a6
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	223c      	movs	r2, #60	; 0x3c
 80052e8:	f883 23a7 	strb.w	r2, [r3, #935]	; 0x3a7
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2224      	movs	r2, #36	; 0x24
 80052f0:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	22a4      	movs	r2, #164	; 0xa4
 80052f8:	f883 23a9 	strb.w	r2, [r3, #937]	; 0x3a9
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	22f8      	movs	r2, #248	; 0xf8
 8005300:	f883 23aa 	strb.w	r2, [r3, #938]	; 0x3aa
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	22fc      	movs	r2, #252	; 0xfc
 8005308:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2284      	movs	r2, #132	; 0x84
 8005310:	f883 23ac 	strb.w	r2, [r3, #940]	; 0x3ac
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2244      	movs	r2, #68	; 0x44
 8005318:	f883 23ae 	strb.w	r2, [r3, #942]	; 0x3ae
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	227c      	movs	r2, #124	; 0x7c
 8005320:	f883 23af 	strb.w	r2, [r3, #943]	; 0x3af
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2278      	movs	r2, #120	; 0x78
 8005328:	f883 23b0 	strb.w	r2, [r3, #944]	; 0x3b0
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	224c      	movs	r2, #76	; 0x4c
 8005330:	f883 23b1 	strb.w	r2, [r3, #945]	; 0x3b1
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2204      	movs	r2, #4
 8005338:	f883 23b2 	strb.w	r2, [r3, #946]	; 0x3b2
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	221c      	movs	r2, #28
 8005340:	f883 23b3 	strb.w	r2, [r3, #947]	; 0x3b3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2218      	movs	r2, #24
 8005348:	f883 23b4 	strb.w	r2, [r3, #948]	; 0x3b4
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2248      	movs	r2, #72	; 0x48
 8005350:	f883 23b6 	strb.w	r2, [r3, #950]	; 0x3b6
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	225c      	movs	r2, #92	; 0x5c
 8005358:	f883 23b7 	strb.w	r2, [r3, #951]	; 0x3b7
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2254      	movs	r2, #84	; 0x54
 8005360:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2254      	movs	r2, #84	; 0x54
 8005368:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2274      	movs	r2, #116	; 0x74
 8005370:	f883 23ba 	strb.w	r2, [r3, #954]	; 0x3ba
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2224      	movs	r2, #36	; 0x24
 8005378:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2204      	movs	r2, #4
 8005380:	f883 23bf 	strb.w	r2, [r3, #959]	; 0x3bf
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	223e      	movs	r2, #62	; 0x3e
 8005388:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	227f      	movs	r2, #127	; 0x7f
 8005390:	f883 23c1 	strb.w	r2, [r3, #961]	; 0x3c1
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2244      	movs	r2, #68	; 0x44
 8005398:	f883 23c2 	strb.w	r2, [r3, #962]	; 0x3c2
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2224      	movs	r2, #36	; 0x24
 80053a0:	f883 23c3 	strb.w	r2, [r3, #963]	; 0x3c3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	223c      	movs	r2, #60	; 0x3c
 80053a8:	f883 23c6 	strb.w	r2, [r3, #966]	; 0x3c6
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	227c      	movs	r2, #124	; 0x7c
 80053b0:	f883 23c7 	strb.w	r2, [r3, #967]	; 0x3c7
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2240      	movs	r2, #64	; 0x40
 80053b8:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2240      	movs	r2, #64	; 0x40
 80053c0:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	223c      	movs	r2, #60	; 0x3c
 80053c8:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	227c      	movs	r2, #124	; 0x7c
 80053d0:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2240      	movs	r2, #64	; 0x40
 80053d8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	221c      	movs	r2, #28
 80053e0:	f883 23ce 	strb.w	r2, [r3, #974]	; 0x3ce
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	223c      	movs	r2, #60	; 0x3c
 80053e8:	f883 23cf 	strb.w	r2, [r3, #975]	; 0x3cf
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2260      	movs	r2, #96	; 0x60
 80053f0:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2260      	movs	r2, #96	; 0x60
 80053f8:	f883 23d1 	strb.w	r2, [r3, #977]	; 0x3d1
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	223c      	movs	r2, #60	; 0x3c
 8005400:	f883 23d2 	strb.w	r2, [r3, #978]	; 0x3d2
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	221c      	movs	r2, #28
 8005408:	f883 23d3 	strb.w	r2, [r3, #979]	; 0x3d3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	223c      	movs	r2, #60	; 0x3c
 8005410:	f883 23d6 	strb.w	r2, [r3, #982]	; 0x3d6
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	227c      	movs	r2, #124	; 0x7c
 8005418:	f883 23d7 	strb.w	r2, [r3, #983]	; 0x3d7
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2270      	movs	r2, #112	; 0x70
 8005420:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2238      	movs	r2, #56	; 0x38
 8005428:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2270      	movs	r2, #112	; 0x70
 8005430:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	227c      	movs	r2, #124	; 0x7c
 8005438:	f883 23db 	strb.w	r2, [r3, #987]	; 0x3db
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	223c      	movs	r2, #60	; 0x3c
 8005440:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2244      	movs	r2, #68	; 0x44
 8005448:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	226c      	movs	r2, #108	; 0x6c
 8005450:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2238      	movs	r2, #56	; 0x38
 8005458:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2210      	movs	r2, #16
 8005460:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2238      	movs	r2, #56	; 0x38
 8005468:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	226c      	movs	r2, #108	; 0x6c
 8005470:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2244      	movs	r2, #68	; 0x44
 8005478:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	229c      	movs	r2, #156	; 0x9c
 8005480:	f883 23e6 	strb.w	r2, [r3, #998]	; 0x3e6
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	22bc      	movs	r2, #188	; 0xbc
 8005488:	f883 23e7 	strb.w	r2, [r3, #999]	; 0x3e7
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	22a0      	movs	r2, #160	; 0xa0
 8005490:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	22a0      	movs	r2, #160	; 0xa0
 8005498:	f883 23e9 	strb.w	r2, [r3, #1001]	; 0x3e9
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	22fc      	movs	r2, #252	; 0xfc
 80054a0:	f883 23ea 	strb.w	r2, [r3, #1002]	; 0x3ea
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	227c      	movs	r2, #124	; 0x7c
 80054a8:	f883 23eb 	strb.w	r2, [r3, #1003]	; 0x3eb
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	224c      	movs	r2, #76	; 0x4c
 80054b0:	f883 23ee 	strb.w	r2, [r3, #1006]	; 0x3ee
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2264      	movs	r2, #100	; 0x64
 80054b8:	f883 23ef 	strb.w	r2, [r3, #1007]	; 0x3ef
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2274      	movs	r2, #116	; 0x74
 80054c0:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	225c      	movs	r2, #92	; 0x5c
 80054c8:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	224c      	movs	r2, #76	; 0x4c
 80054d0:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2264      	movs	r2, #100	; 0x64
 80054d8:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2208      	movs	r2, #8
 80054e0:	f883 23f6 	strb.w	r2, [r3, #1014]	; 0x3f6
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2208      	movs	r2, #8
 80054e8:	f883 23f7 	strb.w	r2, [r3, #1015]	; 0x3f7
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	223e      	movs	r2, #62	; 0x3e
 80054f0:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2277      	movs	r2, #119	; 0x77
 80054f8:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2241      	movs	r2, #65	; 0x41
 8005500:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2241      	movs	r2, #65	; 0x41
 8005508:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2277      	movs	r2, #119	; 0x77
 8005510:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2277      	movs	r2, #119	; 0x77
 8005518:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2241      	movs	r2, #65	; 0x41
 8005520:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2241      	movs	r2, #65	; 0x41
 8005528:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2277      	movs	r2, #119	; 0x77
 8005530:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	223e      	movs	r2, #62	; 0x3e
 8005538:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2208      	movs	r2, #8
 8005540:	f883 240a 	strb.w	r2, [r3, #1034]	; 0x40a
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2208      	movs	r2, #8
 8005548:	f883 240b 	strb.w	r2, [r3, #1035]	; 0x40b
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2202      	movs	r2, #2
 8005550:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2203      	movs	r2, #3
 8005558:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2203      	movs	r2, #3
 8005568:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2202      	movs	r2, #2
 8005570:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2203      	movs	r2, #3
 8005578:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2270      	movs	r2, #112	; 0x70
 8005588:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2278      	movs	r2, #120	; 0x78
 8005590:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	224c      	movs	r2, #76	; 0x4c
 8005598:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2246      	movs	r2, #70	; 0x46
 80055a0:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	224c      	movs	r2, #76	; 0x4c
 80055a8:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2278      	movs	r2, #120	; 0x78
 80055b0:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2270      	movs	r2, #112	; 0x70
 80055b8:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	220e      	movs	r2, #14
 80055c0:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	229f      	movs	r2, #159	; 0x9f
 80055c8:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2291      	movs	r2, #145	; 0x91
 80055d0:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	22b1      	movs	r2, #177	; 0xb1
 80055d8:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	22fb      	movs	r2, #251	; 0xfb
 80055e0:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	224a      	movs	r2, #74	; 0x4a
 80055e8:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	223a      	movs	r2, #58	; 0x3a
 80055f0:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	227a      	movs	r2, #122	; 0x7a
 80055f8:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2240      	movs	r2, #64	; 0x40
 8005600:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2240      	movs	r2, #64	; 0x40
 8005608:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	227a      	movs	r2, #122	; 0x7a
 8005610:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	227a      	movs	r2, #122	; 0x7a
 8005618:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2240      	movs	r2, #64	; 0x40
 8005620:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2238      	movs	r2, #56	; 0x38
 8005628:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	227c      	movs	r2, #124	; 0x7c
 8005630:	f883 242f 	strb.w	r2, [r3, #1071]	; 0x42f
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2254      	movs	r2, #84	; 0x54
 8005638:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2255      	movs	r2, #85	; 0x55
 8005640:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	225d      	movs	r2, #93	; 0x5d
 8005648:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2219      	movs	r2, #25
 8005650:	f883 2433 	strb.w	r2, [r3, #1075]	; 0x433
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2202      	movs	r2, #2
 8005658:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2223      	movs	r2, #35	; 0x23
 8005660:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2275      	movs	r2, #117	; 0x75
 8005668:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2255      	movs	r2, #85	; 0x55
 8005670:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2255      	movs	r2, #85	; 0x55
 8005678:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	227d      	movs	r2, #125	; 0x7d
 8005680:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	227b      	movs	r2, #123	; 0x7b
 8005688:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2242      	movs	r2, #66	; 0x42
 8005690:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2221      	movs	r2, #33	; 0x21
 8005698:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2275      	movs	r2, #117	; 0x75
 80056a0:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2254      	movs	r2, #84	; 0x54
 80056a8:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2254      	movs	r2, #84	; 0x54
 80056b0:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	227d      	movs	r2, #125	; 0x7d
 80056b8:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2279      	movs	r2, #121	; 0x79
 80056c0:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2240      	movs	r2, #64	; 0x40
 80056c8:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2221      	movs	r2, #33	; 0x21
 80056d0:	f883 2446 	strb.w	r2, [r3, #1094]	; 0x446
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2275      	movs	r2, #117	; 0x75
 80056d8:	f883 2447 	strb.w	r2, [r3, #1095]	; 0x447
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2255      	movs	r2, #85	; 0x55
 80056e0:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2254      	movs	r2, #84	; 0x54
 80056e8:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	227c      	movs	r2, #124	; 0x7c
 80056f0:	f883 244a 	strb.w	r2, [r3, #1098]	; 0x44a
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2278      	movs	r2, #120	; 0x78
 80056f8:	f883 244b 	strb.w	r2, [r3, #1099]	; 0x44b
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2240      	movs	r2, #64	; 0x40
 8005700:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2220      	movs	r2, #32
 8005708:	f883 244e 	strb.w	r2, [r3, #1102]	; 0x44e
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2274      	movs	r2, #116	; 0x74
 8005710:	f883 244f 	strb.w	r2, [r3, #1103]	; 0x44f
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2257      	movs	r2, #87	; 0x57
 8005718:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2257      	movs	r2, #87	; 0x57
 8005720:	f883 2451 	strb.w	r2, [r3, #1105]	; 0x451
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	227c      	movs	r2, #124	; 0x7c
 8005728:	f883 2452 	strb.w	r2, [r3, #1106]	; 0x452
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2278      	movs	r2, #120	; 0x78
 8005730:	f883 2453 	strb.w	r2, [r3, #1107]	; 0x453
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2240      	movs	r2, #64	; 0x40
 8005738:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2218      	movs	r2, #24
 8005740:	f883 2456 	strb.w	r2, [r3, #1110]	; 0x456
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	223c      	movs	r2, #60	; 0x3c
 8005748:	f883 2457 	strb.w	r2, [r3, #1111]	; 0x457
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	22a4      	movs	r2, #164	; 0xa4
 8005750:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	22a4      	movs	r2, #164	; 0xa4
 8005758:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	22e4      	movs	r2, #228	; 0xe4
 8005760:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2240      	movs	r2, #64	; 0x40
 8005768:	f883 245b 	strb.w	r2, [r3, #1115]	; 0x45b
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	f883 245e 	strb.w	r2, [r3, #1118]	; 0x45e
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	223b      	movs	r2, #59	; 0x3b
 8005778:	f883 245f 	strb.w	r2, [r3, #1119]	; 0x45f
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	227d      	movs	r2, #125	; 0x7d
 8005780:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2255      	movs	r2, #85	; 0x55
 8005788:	f883 2461 	strb.w	r2, [r3, #1121]	; 0x461
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2255      	movs	r2, #85	; 0x55
 8005790:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	225d      	movs	r2, #93	; 0x5d
 8005798:	f883 2463 	strb.w	r2, [r3, #1123]	; 0x463
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	221b      	movs	r2, #27
 80057a0:	f883 2464 	strb.w	r2, [r3, #1124]	; 0x464
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2202      	movs	r2, #2
 80057a8:	f883 2465 	strb.w	r2, [r3, #1125]	; 0x465
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2239      	movs	r2, #57	; 0x39
 80057b0:	f883 2466 	strb.w	r2, [r3, #1126]	; 0x466
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	227d      	movs	r2, #125	; 0x7d
 80057b8:	f883 2467 	strb.w	r2, [r3, #1127]	; 0x467
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2254      	movs	r2, #84	; 0x54
 80057c0:	f883 2468 	strb.w	r2, [r3, #1128]	; 0x468
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2254      	movs	r2, #84	; 0x54
 80057c8:	f883 2469 	strb.w	r2, [r3, #1129]	; 0x469
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	225d      	movs	r2, #93	; 0x5d
 80057d0:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2219      	movs	r2, #25
 80057d8:	f883 246b 	strb.w	r2, [r3, #1131]	; 0x46b
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2239      	movs	r2, #57	; 0x39
 80057e0:	f883 246e 	strb.w	r2, [r3, #1134]	; 0x46e
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	227d      	movs	r2, #125	; 0x7d
 80057e8:	f883 246f 	strb.w	r2, [r3, #1135]	; 0x46f
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2255      	movs	r2, #85	; 0x55
 80057f0:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2254      	movs	r2, #84	; 0x54
 80057f8:	f883 2471 	strb.w	r2, [r3, #1137]	; 0x471
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	225c      	movs	r2, #92	; 0x5c
 8005800:	f883 2472 	strb.w	r2, [r3, #1138]	; 0x472
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2218      	movs	r2, #24
 8005808:	f883 2473 	strb.w	r2, [r3, #1139]	; 0x473
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2476 	strb.w	r2, [r3, #1142]	; 0x476
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2245      	movs	r2, #69	; 0x45
 8005818:	f883 2477 	strb.w	r2, [r3, #1143]	; 0x477
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	227c      	movs	r2, #124	; 0x7c
 8005820:	f883 2478 	strb.w	r2, [r3, #1144]	; 0x478
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	227c      	movs	r2, #124	; 0x7c
 8005828:	f883 2479 	strb.w	r2, [r3, #1145]	; 0x479
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2241      	movs	r2, #65	; 0x41
 8005830:	f883 247a 	strb.w	r2, [r3, #1146]	; 0x47a
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 247b 	strb.w	r2, [r3, #1147]	; 0x47b
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	f883 247e 	strb.w	r2, [r3, #1150]	; 0x47e
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2203      	movs	r2, #3
 8005848:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2245      	movs	r2, #69	; 0x45
 8005850:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	227d      	movs	r2, #125	; 0x7d
 8005858:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	227d      	movs	r2, #125	; 0x7d
 8005860:	f883 2482 	strb.w	r2, [r3, #1154]	; 0x482
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2243      	movs	r2, #67	; 0x43
 8005868:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2202      	movs	r2, #2
 8005870:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2486 	strb.w	r2, [r3, #1158]	; 0x486
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2245      	movs	r2, #69	; 0x45
 8005880:	f883 2487 	strb.w	r2, [r3, #1159]	; 0x487
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	227d      	movs	r2, #125	; 0x7d
 8005888:	f883 2488 	strb.w	r2, [r3, #1160]	; 0x488
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	227c      	movs	r2, #124	; 0x7c
 8005890:	f883 2489 	strb.w	r2, [r3, #1161]	; 0x489
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2240      	movs	r2, #64	; 0x40
 8005898:	f883 248a 	strb.w	r2, [r3, #1162]	; 0x48a
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2279      	movs	r2, #121	; 0x79
 80058a0:	f883 248e 	strb.w	r2, [r3, #1166]	; 0x48e
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	227d      	movs	r2, #125	; 0x7d
 80058a8:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2216      	movs	r2, #22
 80058b0:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2212      	movs	r2, #18
 80058b8:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2216      	movs	r2, #22
 80058c0:	f883 2492 	strb.w	r2, [r3, #1170]	; 0x492
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	227d      	movs	r2, #125	; 0x7d
 80058c8:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2279      	movs	r2, #121	; 0x79
 80058d0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2270      	movs	r2, #112	; 0x70
 80058d8:	f883 2496 	strb.w	r2, [r3, #1174]	; 0x496
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2278      	movs	r2, #120	; 0x78
 80058e0:	f883 2497 	strb.w	r2, [r3, #1175]	; 0x497
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	222b      	movs	r2, #43	; 0x2b
 80058e8:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	222b      	movs	r2, #43	; 0x2b
 80058f0:	f883 2499 	strb.w	r2, [r3, #1177]	; 0x499
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2278      	movs	r2, #120	; 0x78
 80058f8:	f883 249a 	strb.w	r2, [r3, #1178]	; 0x49a
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2270      	movs	r2, #112	; 0x70
 8005900:	f883 249b 	strb.w	r2, [r3, #1179]	; 0x49b
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2244      	movs	r2, #68	; 0x44
 8005908:	f883 249e 	strb.w	r2, [r3, #1182]	; 0x49e
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	227c      	movs	r2, #124	; 0x7c
 8005910:	f883 249f 	strb.w	r2, [r3, #1183]	; 0x49f
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	227c      	movs	r2, #124	; 0x7c
 8005918:	f883 24a0 	strb.w	r2, [r3, #1184]	; 0x4a0
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2255      	movs	r2, #85	; 0x55
 8005920:	f883 24a1 	strb.w	r2, [r3, #1185]	; 0x4a1
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2255      	movs	r2, #85	; 0x55
 8005928:	f883 24a2 	strb.w	r2, [r3, #1186]	; 0x4a2
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2245      	movs	r2, #69	; 0x45
 8005930:	f883 24a3 	strb.w	r2, [r3, #1187]	; 0x4a3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2220      	movs	r2, #32
 8005938:	f883 24a6 	strb.w	r2, [r3, #1190]	; 0x4a6
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2274      	movs	r2, #116	; 0x74
 8005940:	f883 24a7 	strb.w	r2, [r3, #1191]	; 0x4a7
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2254      	movs	r2, #84	; 0x54
 8005948:	f883 24a8 	strb.w	r2, [r3, #1192]	; 0x4a8
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2254      	movs	r2, #84	; 0x54
 8005950:	f883 24a9 	strb.w	r2, [r3, #1193]	; 0x4a9
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	227c      	movs	r2, #124	; 0x7c
 8005958:	f883 24aa 	strb.w	r2, [r3, #1194]	; 0x4aa
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	227c      	movs	r2, #124	; 0x7c
 8005960:	f883 24ab 	strb.w	r2, [r3, #1195]	; 0x4ab
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2254      	movs	r2, #84	; 0x54
 8005968:	f883 24ac 	strb.w	r2, [r3, #1196]	; 0x4ac
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2254      	movs	r2, #84	; 0x54
 8005970:	f883 24ad 	strb.w	r2, [r3, #1197]	; 0x4ad
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	227c      	movs	r2, #124	; 0x7c
 8005978:	f883 24ae 	strb.w	r2, [r3, #1198]	; 0x4ae
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	227e      	movs	r2, #126	; 0x7e
 8005980:	f883 24af 	strb.w	r2, [r3, #1199]	; 0x4af
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	220b      	movs	r2, #11
 8005988:	f883 24b0 	strb.w	r2, [r3, #1200]	; 0x4b0
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2209      	movs	r2, #9
 8005990:	f883 24b1 	strb.w	r2, [r3, #1201]	; 0x4b1
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	227f      	movs	r2, #127	; 0x7f
 8005998:	f883 24b2 	strb.w	r2, [r3, #1202]	; 0x4b2
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	227f      	movs	r2, #127	; 0x7f
 80059a0:	f883 24b3 	strb.w	r2, [r3, #1203]	; 0x4b3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2249      	movs	r2, #73	; 0x49
 80059a8:	f883 24b4 	strb.w	r2, [r3, #1204]	; 0x4b4
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2232      	movs	r2, #50	; 0x32
 80059b0:	f883 24b6 	strb.w	r2, [r3, #1206]	; 0x4b6
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	227b      	movs	r2, #123	; 0x7b
 80059b8:	f883 24b7 	strb.w	r2, [r3, #1207]	; 0x4b7
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2249      	movs	r2, #73	; 0x49
 80059c0:	f883 24b8 	strb.w	r2, [r3, #1208]	; 0x4b8
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2249      	movs	r2, #73	; 0x49
 80059c8:	f883 24b9 	strb.w	r2, [r3, #1209]	; 0x4b9
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	227b      	movs	r2, #123	; 0x7b
 80059d0:	f883 24ba 	strb.w	r2, [r3, #1210]	; 0x4ba
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2232      	movs	r2, #50	; 0x32
 80059d8:	f883 24bb 	strb.w	r2, [r3, #1211]	; 0x4bb
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2232      	movs	r2, #50	; 0x32
 80059e0:	f883 24be 	strb.w	r2, [r3, #1214]	; 0x4be
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	227a      	movs	r2, #122	; 0x7a
 80059e8:	f883 24bf 	strb.w	r2, [r3, #1215]	; 0x4bf
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2248      	movs	r2, #72	; 0x48
 80059f0:	f883 24c0 	strb.w	r2, [r3, #1216]	; 0x4c0
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2248      	movs	r2, #72	; 0x48
 80059f8:	f883 24c1 	strb.w	r2, [r3, #1217]	; 0x4c1
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	227a      	movs	r2, #122	; 0x7a
 8005a00:	f883 24c2 	strb.w	r2, [r3, #1218]	; 0x4c2
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2232      	movs	r2, #50	; 0x32
 8005a08:	f883 24c3 	strb.w	r2, [r3, #1219]	; 0x4c3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2232      	movs	r2, #50	; 0x32
 8005a10:	f883 24c6 	strb.w	r2, [r3, #1222]	; 0x4c6
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	227a      	movs	r2, #122	; 0x7a
 8005a18:	f883 24c7 	strb.w	r2, [r3, #1223]	; 0x4c7
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	224a      	movs	r2, #74	; 0x4a
 8005a20:	f883 24c8 	strb.w	r2, [r3, #1224]	; 0x4c8
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2248      	movs	r2, #72	; 0x48
 8005a28:	f883 24c9 	strb.w	r2, [r3, #1225]	; 0x4c9
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2278      	movs	r2, #120	; 0x78
 8005a30:	f883 24ca 	strb.w	r2, [r3, #1226]	; 0x4ca
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2230      	movs	r2, #48	; 0x30
 8005a38:	f883 24cb 	strb.w	r2, [r3, #1227]	; 0x4cb
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	223a      	movs	r2, #58	; 0x3a
 8005a40:	f883 24ce 	strb.w	r2, [r3, #1230]	; 0x4ce
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	227b      	movs	r2, #123	; 0x7b
 8005a48:	f883 24cf 	strb.w	r2, [r3, #1231]	; 0x4cf
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2241      	movs	r2, #65	; 0x41
 8005a50:	f883 24d0 	strb.w	r2, [r3, #1232]	; 0x4d0
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2241      	movs	r2, #65	; 0x41
 8005a58:	f883 24d1 	strb.w	r2, [r3, #1233]	; 0x4d1
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	227b      	movs	r2, #123	; 0x7b
 8005a60:	f883 24d2 	strb.w	r2, [r3, #1234]	; 0x4d2
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	227a      	movs	r2, #122	; 0x7a
 8005a68:	f883 24d3 	strb.w	r2, [r3, #1235]	; 0x4d3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2240      	movs	r2, #64	; 0x40
 8005a70:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	223a      	movs	r2, #58	; 0x3a
 8005a78:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	227a      	movs	r2, #122	; 0x7a
 8005a80:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2242      	movs	r2, #66	; 0x42
 8005a88:	f883 24d8 	strb.w	r2, [r3, #1240]	; 0x4d8
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2240      	movs	r2, #64	; 0x40
 8005a90:	f883 24d9 	strb.w	r2, [r3, #1241]	; 0x4d9
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2278      	movs	r2, #120	; 0x78
 8005a98:	f883 24da 	strb.w	r2, [r3, #1242]	; 0x4da
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2278      	movs	r2, #120	; 0x78
 8005aa0:	f883 24db 	strb.w	r2, [r3, #1243]	; 0x4db
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2240      	movs	r2, #64	; 0x40
 8005aa8:	f883 24dc 	strb.w	r2, [r3, #1244]	; 0x4dc
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	229a      	movs	r2, #154	; 0x9a
 8005ab0:	f883 24de 	strb.w	r2, [r3, #1246]	; 0x4de
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	22ba      	movs	r2, #186	; 0xba
 8005ab8:	f883 24df 	strb.w	r2, [r3, #1247]	; 0x4df
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	22a0      	movs	r2, #160	; 0xa0
 8005ac0:	f883 24e0 	strb.w	r2, [r3, #1248]	; 0x4e0
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	22a0      	movs	r2, #160	; 0xa0
 8005ac8:	f883 24e1 	strb.w	r2, [r3, #1249]	; 0x4e1
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	22fa      	movs	r2, #250	; 0xfa
 8005ad0:	f883 24e2 	strb.w	r2, [r3, #1250]	; 0x4e2
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	227a      	movs	r2, #122	; 0x7a
 8005ad8:	f883 24e3 	strb.w	r2, [r3, #1251]	; 0x4e3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 24e6 	strb.w	r2, [r3, #1254]	; 0x4e6
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2219      	movs	r2, #25
 8005ae8:	f883 24e7 	strb.w	r2, [r3, #1255]	; 0x4e7
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	223c      	movs	r2, #60	; 0x3c
 8005af0:	f883 24e8 	strb.w	r2, [r3, #1256]	; 0x4e8
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2266      	movs	r2, #102	; 0x66
 8005af8:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2266      	movs	r2, #102	; 0x66
 8005b00:	f883 24ea 	strb.w	r2, [r3, #1258]	; 0x4ea
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	223c      	movs	r2, #60	; 0x3c
 8005b08:	f883 24eb 	strb.w	r2, [r3, #1259]	; 0x4eb
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2219      	movs	r2, #25
 8005b10:	f883 24ec 	strb.w	r2, [r3, #1260]	; 0x4ec
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 24ed 	strb.w	r2, [r3, #1261]	; 0x4ed
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	223d      	movs	r2, #61	; 0x3d
 8005b20:	f883 24ee 	strb.w	r2, [r3, #1262]	; 0x4ee
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	227d      	movs	r2, #125	; 0x7d
 8005b28:	f883 24ef 	strb.w	r2, [r3, #1263]	; 0x4ef
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2240      	movs	r2, #64	; 0x40
 8005b30:	f883 24f0 	strb.w	r2, [r3, #1264]	; 0x4f0
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2240      	movs	r2, #64	; 0x40
 8005b38:	f883 24f1 	strb.w	r2, [r3, #1265]	; 0x4f1
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	227d      	movs	r2, #125	; 0x7d
 8005b40:	f883 24f2 	strb.w	r2, [r3, #1266]	; 0x4f2
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	223d      	movs	r2, #61	; 0x3d
 8005b48:	f883 24f3 	strb.w	r2, [r3, #1267]	; 0x4f3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2218      	movs	r2, #24
 8005b50:	f883 24f6 	strb.w	r2, [r3, #1270]	; 0x4f6
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	223c      	movs	r2, #60	; 0x3c
 8005b58:	f883 24f7 	strb.w	r2, [r3, #1271]	; 0x4f7
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2224      	movs	r2, #36	; 0x24
 8005b60:	f883 24f8 	strb.w	r2, [r3, #1272]	; 0x4f8
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	22e7      	movs	r2, #231	; 0xe7
 8005b68:	f883 24f9 	strb.w	r2, [r3, #1273]	; 0x4f9
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	22e7      	movs	r2, #231	; 0xe7
 8005b70:	f883 24fa 	strb.w	r2, [r3, #1274]	; 0x4fa
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2224      	movs	r2, #36	; 0x24
 8005b78:	f883 24fb 	strb.w	r2, [r3, #1275]	; 0x4fb
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2224      	movs	r2, #36	; 0x24
 8005b80:	f883 24fc 	strb.w	r2, [r3, #1276]	; 0x4fc
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2268      	movs	r2, #104	; 0x68
 8005b88:	f883 24fe 	strb.w	r2, [r3, #1278]	; 0x4fe
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	227e      	movs	r2, #126	; 0x7e
 8005b90:	f883 24ff 	strb.w	r2, [r3, #1279]	; 0x4ff
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	227f      	movs	r2, #127	; 0x7f
 8005b98:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2249      	movs	r2, #73	; 0x49
 8005ba0:	f883 2501 	strb.w	r2, [r3, #1281]	; 0x501
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2243      	movs	r2, #67	; 0x43
 8005ba8:	f883 2502 	strb.w	r2, [r3, #1282]	; 0x502
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2266      	movs	r2, #102	; 0x66
 8005bb0:	f883 2503 	strb.w	r2, [r3, #1283]	; 0x503
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	222b      	movs	r2, #43	; 0x2b
 8005bc0:	f883 2506 	strb.w	r2, [r3, #1286]	; 0x506
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	222f      	movs	r2, #47	; 0x2f
 8005bc8:	f883 2507 	strb.w	r2, [r3, #1287]	; 0x507
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	22fc      	movs	r2, #252	; 0xfc
 8005bd0:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	22fc      	movs	r2, #252	; 0xfc
 8005bd8:	f883 2509 	strb.w	r2, [r3, #1289]	; 0x509
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	222f      	movs	r2, #47	; 0x2f
 8005be0:	f883 250a 	strb.w	r2, [r3, #1290]	; 0x50a
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	222b      	movs	r2, #43	; 0x2b
 8005be8:	f883 250b 	strb.w	r2, [r3, #1291]	; 0x50b
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	22ff      	movs	r2, #255	; 0xff
 8005bf0:	f883 250e 	strb.w	r2, [r3, #1294]	; 0x50e
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	22ff      	movs	r2, #255	; 0xff
 8005bf8:	f883 250f 	strb.w	r2, [r3, #1295]	; 0x50f
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2209      	movs	r2, #9
 8005c00:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2209      	movs	r2, #9
 8005c08:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	222f      	movs	r2, #47	; 0x2f
 8005c10:	f883 2512 	strb.w	r2, [r3, #1298]	; 0x512
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	22f6      	movs	r2, #246	; 0xf6
 8005c18:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	22f8      	movs	r2, #248	; 0xf8
 8005c20:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	22a0      	movs	r2, #160	; 0xa0
 8005c28:	f883 2515 	strb.w	r2, [r3, #1301]	; 0x515
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2240      	movs	r2, #64	; 0x40
 8005c30:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	22c0      	movs	r2, #192	; 0xc0
 8005c38:	f883 2517 	strb.w	r2, [r3, #1303]	; 0x517
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2288      	movs	r2, #136	; 0x88
 8005c40:	f883 2518 	strb.w	r2, [r3, #1304]	; 0x518
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	22fe      	movs	r2, #254	; 0xfe
 8005c48:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	227f      	movs	r2, #127	; 0x7f
 8005c50:	f883 251a 	strb.w	r2, [r3, #1306]	; 0x51a
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2209      	movs	r2, #9
 8005c58:	f883 251b 	strb.w	r2, [r3, #1307]	; 0x51b
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2203      	movs	r2, #3
 8005c60:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2202      	movs	r2, #2
 8005c68:	f883 251d 	strb.w	r2, [r3, #1309]	; 0x51d
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2220      	movs	r2, #32
 8005c70:	f883 251e 	strb.w	r2, [r3, #1310]	; 0x51e
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2274      	movs	r2, #116	; 0x74
 8005c78:	f883 251f 	strb.w	r2, [r3, #1311]	; 0x51f
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2254      	movs	r2, #84	; 0x54
 8005c80:	f883 2520 	strb.w	r2, [r3, #1312]	; 0x520
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2255      	movs	r2, #85	; 0x55
 8005c88:	f883 2521 	strb.w	r2, [r3, #1313]	; 0x521
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	227d      	movs	r2, #125	; 0x7d
 8005c90:	f883 2522 	strb.w	r2, [r3, #1314]	; 0x522
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2279      	movs	r2, #121	; 0x79
 8005c98:	f883 2523 	strb.w	r2, [r3, #1315]	; 0x523
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2240      	movs	r2, #64	; 0x40
 8005ca0:	f883 2524 	strb.w	r2, [r3, #1316]	; 0x524
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2244      	movs	r2, #68	; 0x44
 8005ca8:	f883 2527 	strb.w	r2, [r3, #1319]	; 0x527
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	227d      	movs	r2, #125	; 0x7d
 8005cb0:	f883 2528 	strb.w	r2, [r3, #1320]	; 0x528
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	227d      	movs	r2, #125	; 0x7d
 8005cb8:	f883 2529 	strb.w	r2, [r3, #1321]	; 0x529
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2241      	movs	r2, #65	; 0x41
 8005cc0:	f883 252a 	strb.w	r2, [r3, #1322]	; 0x52a
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2230      	movs	r2, #48	; 0x30
 8005cc8:	f883 252e 	strb.w	r2, [r3, #1326]	; 0x52e
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2278      	movs	r2, #120	; 0x78
 8005cd0:	f883 252f 	strb.w	r2, [r3, #1327]	; 0x52f
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2248      	movs	r2, #72	; 0x48
 8005cd8:	f883 2530 	strb.w	r2, [r3, #1328]	; 0x530
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	224a      	movs	r2, #74	; 0x4a
 8005ce0:	f883 2531 	strb.w	r2, [r3, #1329]	; 0x531
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	227a      	movs	r2, #122	; 0x7a
 8005ce8:	f883 2532 	strb.w	r2, [r3, #1330]	; 0x532
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2232      	movs	r2, #50	; 0x32
 8005cf0:	f883 2533 	strb.w	r2, [r3, #1331]	; 0x533
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2238      	movs	r2, #56	; 0x38
 8005cf8:	f883 2536 	strb.w	r2, [r3, #1334]	; 0x536
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2278      	movs	r2, #120	; 0x78
 8005d00:	f883 2537 	strb.w	r2, [r3, #1335]	; 0x537
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2240      	movs	r2, #64	; 0x40
 8005d08:	f883 2538 	strb.w	r2, [r3, #1336]	; 0x538
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2242      	movs	r2, #66	; 0x42
 8005d10:	f883 2539 	strb.w	r2, [r3, #1337]	; 0x539
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	227a      	movs	r2, #122	; 0x7a
 8005d18:	f883 253a 	strb.w	r2, [r3, #1338]	; 0x53a
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	227a      	movs	r2, #122	; 0x7a
 8005d20:	f883 253b 	strb.w	r2, [r3, #1339]	; 0x53b
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2240      	movs	r2, #64	; 0x40
 8005d28:	f883 253c 	strb.w	r2, [r3, #1340]	; 0x53c
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	227a      	movs	r2, #122	; 0x7a
 8005d30:	f883 253e 	strb.w	r2, [r3, #1342]	; 0x53e
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	227a      	movs	r2, #122	; 0x7a
 8005d38:	f883 253f 	strb.w	r2, [r3, #1343]	; 0x53f
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	220a      	movs	r2, #10
 8005d40:	f883 2540 	strb.w	r2, [r3, #1344]	; 0x540
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	220a      	movs	r2, #10
 8005d48:	f883 2541 	strb.w	r2, [r3, #1345]	; 0x541
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	227a      	movs	r2, #122	; 0x7a
 8005d50:	f883 2542 	strb.w	r2, [r3, #1346]	; 0x542
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2270      	movs	r2, #112	; 0x70
 8005d58:	f883 2543 	strb.w	r2, [r3, #1347]	; 0x543
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	227d      	movs	r2, #125	; 0x7d
 8005d60:	f883 2546 	strb.w	r2, [r3, #1350]	; 0x546
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	227d      	movs	r2, #125	; 0x7d
 8005d68:	f883 2547 	strb.w	r2, [r3, #1351]	; 0x547
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2219      	movs	r2, #25
 8005d70:	f883 2548 	strb.w	r2, [r3, #1352]	; 0x548
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2231      	movs	r2, #49	; 0x31
 8005d78:	f883 2549 	strb.w	r2, [r3, #1353]	; 0x549
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	227d      	movs	r2, #125	; 0x7d
 8005d80:	f883 254a 	strb.w	r2, [r3, #1354]	; 0x54a
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	227d      	movs	r2, #125	; 0x7d
 8005d88:	f883 254b 	strb.w	r2, [r3, #1355]	; 0x54b
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2226      	movs	r2, #38	; 0x26
 8005d90:	f883 254f 	strb.w	r2, [r3, #1359]	; 0x54f
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	222f      	movs	r2, #47	; 0x2f
 8005d98:	f883 2550 	strb.w	r2, [r3, #1360]	; 0x550
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2229      	movs	r2, #41	; 0x29
 8005da0:	f883 2551 	strb.w	r2, [r3, #1361]	; 0x551
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	222f      	movs	r2, #47	; 0x2f
 8005da8:	f883 2552 	strb.w	r2, [r3, #1362]	; 0x552
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	222f      	movs	r2, #47	; 0x2f
 8005db0:	f883 2553 	strb.w	r2, [r3, #1363]	; 0x553
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2228      	movs	r2, #40	; 0x28
 8005db8:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2226      	movs	r2, #38	; 0x26
 8005dc0:	f883 2557 	strb.w	r2, [r3, #1367]	; 0x557
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	222f      	movs	r2, #47	; 0x2f
 8005dc8:	f883 2558 	strb.w	r2, [r3, #1368]	; 0x558
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2229      	movs	r2, #41	; 0x29
 8005dd0:	f883 2559 	strb.w	r2, [r3, #1369]	; 0x559
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	222f      	movs	r2, #47	; 0x2f
 8005dd8:	f883 255a 	strb.w	r2, [r3, #1370]	; 0x55a
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2226      	movs	r2, #38	; 0x26
 8005de0:	f883 255b 	strb.w	r2, [r3, #1371]	; 0x55b
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2230      	movs	r2, #48	; 0x30
 8005de8:	f883 255e 	strb.w	r2, [r3, #1374]	; 0x55e
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2278      	movs	r2, #120	; 0x78
 8005df0:	f883 255f 	strb.w	r2, [r3, #1375]	; 0x55f
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	224d      	movs	r2, #77	; 0x4d
 8005df8:	f883 2560 	strb.w	r2, [r3, #1376]	; 0x560
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2245      	movs	r2, #69	; 0x45
 8005e00:	f883 2561 	strb.w	r2, [r3, #1377]	; 0x561
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2260      	movs	r2, #96	; 0x60
 8005e08:	f883 2562 	strb.w	r2, [r3, #1378]	; 0x562
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	f883 2563 	strb.w	r2, [r3, #1379]	; 0x563
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2238      	movs	r2, #56	; 0x38
 8005e18:	f883 2566 	strb.w	r2, [r3, #1382]	; 0x566
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2238      	movs	r2, #56	; 0x38
 8005e20:	f883 2567 	strb.w	r2, [r3, #1383]	; 0x567
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2208      	movs	r2, #8
 8005e28:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2208      	movs	r2, #8
 8005e30:	f883 2569 	strb.w	r2, [r3, #1385]	; 0x569
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2208      	movs	r2, #8
 8005e38:	f883 256a 	strb.w	r2, [r3, #1386]	; 0x56a
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2208      	movs	r2, #8
 8005e40:	f883 256b 	strb.w	r2, [r3, #1387]	; 0x56b
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2208      	movs	r2, #8
 8005e48:	f883 256e 	strb.w	r2, [r3, #1390]	; 0x56e
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2208      	movs	r2, #8
 8005e50:	f883 256f 	strb.w	r2, [r3, #1391]	; 0x56f
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2208      	movs	r2, #8
 8005e58:	f883 2570 	strb.w	r2, [r3, #1392]	; 0x570
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2208      	movs	r2, #8
 8005e60:	f883 2571 	strb.w	r2, [r3, #1393]	; 0x571
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2238      	movs	r2, #56	; 0x38
 8005e68:	f883 2572 	strb.w	r2, [r3, #1394]	; 0x572
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2238      	movs	r2, #56	; 0x38
 8005e70:	f883 2573 	strb.w	r2, [r3, #1395]	; 0x573
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	224f      	movs	r2, #79	; 0x4f
 8005e78:	f883 2576 	strb.w	r2, [r3, #1398]	; 0x576
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	226f      	movs	r2, #111	; 0x6f
 8005e80:	f883 2577 	strb.w	r2, [r3, #1399]	; 0x577
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2230      	movs	r2, #48	; 0x30
 8005e88:	f883 2578 	strb.w	r2, [r3, #1400]	; 0x578
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2218      	movs	r2, #24
 8005e90:	f883 2579 	strb.w	r2, [r3, #1401]	; 0x579
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	22cc      	movs	r2, #204	; 0xcc
 8005e98:	f883 257a 	strb.w	r2, [r3, #1402]	; 0x57a
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	22ee      	movs	r2, #238	; 0xee
 8005ea0:	f883 257b 	strb.w	r2, [r3, #1403]	; 0x57b
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	22bb      	movs	r2, #187	; 0xbb
 8005ea8:	f883 257c 	strb.w	r2, [r3, #1404]	; 0x57c
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2291      	movs	r2, #145	; 0x91
 8005eb0:	f883 257d 	strb.w	r2, [r3, #1405]	; 0x57d
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	224f      	movs	r2, #79	; 0x4f
 8005eb8:	f883 257e 	strb.w	r2, [r3, #1406]	; 0x57e
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	226f      	movs	r2, #111	; 0x6f
 8005ec0:	f883 257f 	strb.w	r2, [r3, #1407]	; 0x57f
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2230      	movs	r2, #48	; 0x30
 8005ec8:	f883 2580 	strb.w	r2, [r3, #1408]	; 0x580
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2218      	movs	r2, #24
 8005ed0:	f883 2581 	strb.w	r2, [r3, #1409]	; 0x581
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	226c      	movs	r2, #108	; 0x6c
 8005ed8:	f883 2582 	strb.w	r2, [r3, #1410]	; 0x582
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2276      	movs	r2, #118	; 0x76
 8005ee0:	f883 2583 	strb.w	r2, [r3, #1411]	; 0x583
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	22fb      	movs	r2, #251	; 0xfb
 8005ee8:	f883 2584 	strb.w	r2, [r3, #1412]	; 0x584
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	22f9      	movs	r2, #249	; 0xf9
 8005ef0:	f883 2585 	strb.w	r2, [r3, #1413]	; 0x585
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	227b      	movs	r2, #123	; 0x7b
 8005ef8:	f883 2589 	strb.w	r2, [r3, #1417]	; 0x589
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	227b      	movs	r2, #123	; 0x7b
 8005f00:	f883 258a 	strb.w	r2, [r3, #1418]	; 0x58a
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2208      	movs	r2, #8
 8005f08:	f883 258e 	strb.w	r2, [r3, #1422]	; 0x58e
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	221c      	movs	r2, #28
 8005f10:	f883 258f 	strb.w	r2, [r3, #1423]	; 0x58f
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2236      	movs	r2, #54	; 0x36
 8005f18:	f883 2590 	strb.w	r2, [r3, #1424]	; 0x590
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2222      	movs	r2, #34	; 0x22
 8005f20:	f883 2591 	strb.w	r2, [r3, #1425]	; 0x591
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2208      	movs	r2, #8
 8005f28:	f883 2592 	strb.w	r2, [r3, #1426]	; 0x592
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	221c      	movs	r2, #28
 8005f30:	f883 2593 	strb.w	r2, [r3, #1427]	; 0x593
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2236      	movs	r2, #54	; 0x36
 8005f38:	f883 2594 	strb.w	r2, [r3, #1428]	; 0x594
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2222      	movs	r2, #34	; 0x22
 8005f40:	f883 2595 	strb.w	r2, [r3, #1429]	; 0x595
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2222      	movs	r2, #34	; 0x22
 8005f48:	f883 2596 	strb.w	r2, [r3, #1430]	; 0x596
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2236      	movs	r2, #54	; 0x36
 8005f50:	f883 2597 	strb.w	r2, [r3, #1431]	; 0x597
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	221c      	movs	r2, #28
 8005f58:	f883 2598 	strb.w	r2, [r3, #1432]	; 0x598
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2208      	movs	r2, #8
 8005f60:	f883 2599 	strb.w	r2, [r3, #1433]	; 0x599
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2222      	movs	r2, #34	; 0x22
 8005f68:	f883 259a 	strb.w	r2, [r3, #1434]	; 0x59a
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2236      	movs	r2, #54	; 0x36
 8005f70:	f883 259b 	strb.w	r2, [r3, #1435]	; 0x59b
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	221c      	movs	r2, #28
 8005f78:	f883 259c 	strb.w	r2, [r3, #1436]	; 0x59c
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2208      	movs	r2, #8
 8005f80:	f883 259d 	strb.w	r2, [r3, #1437]	; 0x59d
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	22aa      	movs	r2, #170	; 0xaa
 8005f88:	f883 259e 	strb.w	r2, [r3, #1438]	; 0x59e
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2255      	movs	r2, #85	; 0x55
 8005f90:	f883 25a0 	strb.w	r2, [r3, #1440]	; 0x5a0
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	22aa      	movs	r2, #170	; 0xaa
 8005f98:	f883 25a2 	strb.w	r2, [r3, #1442]	; 0x5a2
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2255      	movs	r2, #85	; 0x55
 8005fa0:	f883 25a4 	strb.w	r2, [r3, #1444]	; 0x5a4
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	22aa      	movs	r2, #170	; 0xaa
 8005fa8:	f883 25a6 	strb.w	r2, [r3, #1446]	; 0x5a6
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2255      	movs	r2, #85	; 0x55
 8005fb0:	f883 25a7 	strb.w	r2, [r3, #1447]	; 0x5a7
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	22aa      	movs	r2, #170	; 0xaa
 8005fb8:	f883 25a8 	strb.w	r2, [r3, #1448]	; 0x5a8
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2255      	movs	r2, #85	; 0x55
 8005fc0:	f883 25a9 	strb.w	r2, [r3, #1449]	; 0x5a9
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	22aa      	movs	r2, #170	; 0xaa
 8005fc8:	f883 25aa 	strb.w	r2, [r3, #1450]	; 0x5aa
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2255      	movs	r2, #85	; 0x55
 8005fd0:	f883 25ab 	strb.w	r2, [r3, #1451]	; 0x5ab
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	22aa      	movs	r2, #170	; 0xaa
 8005fd8:	f883 25ac 	strb.w	r2, [r3, #1452]	; 0x5ac
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2255      	movs	r2, #85	; 0x55
 8005fe0:	f883 25ad 	strb.w	r2, [r3, #1453]	; 0x5ad
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	22dd      	movs	r2, #221	; 0xdd
 8005fe8:	f883 25ae 	strb.w	r2, [r3, #1454]	; 0x5ae
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	22ff      	movs	r2, #255	; 0xff
 8005ff0:	f883 25af 	strb.w	r2, [r3, #1455]	; 0x5af
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	22aa      	movs	r2, #170	; 0xaa
 8005ff8:	f883 25b0 	strb.w	r2, [r3, #1456]	; 0x5b0
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2277      	movs	r2, #119	; 0x77
 8006000:	f883 25b1 	strb.w	r2, [r3, #1457]	; 0x5b1
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	22dd      	movs	r2, #221	; 0xdd
 8006008:	f883 25b2 	strb.w	r2, [r3, #1458]	; 0x5b2
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	22aa      	movs	r2, #170	; 0xaa
 8006010:	f883 25b3 	strb.w	r2, [r3, #1459]	; 0x5b3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	22ff      	movs	r2, #255	; 0xff
 8006018:	f883 25b4 	strb.w	r2, [r3, #1460]	; 0x5b4
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2277      	movs	r2, #119	; 0x77
 8006020:	f883 25b5 	strb.w	r2, [r3, #1461]	; 0x5b5
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	22ff      	movs	r2, #255	; 0xff
 8006028:	f883 25b9 	strb.w	r2, [r3, #1465]	; 0x5b9
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	22ff      	movs	r2, #255	; 0xff
 8006030:	f883 25ba 	strb.w	r2, [r3, #1466]	; 0x5ba
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2210      	movs	r2, #16
 8006038:	f883 25be 	strb.w	r2, [r3, #1470]	; 0x5be
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2210      	movs	r2, #16
 8006040:	f883 25bf 	strb.w	r2, [r3, #1471]	; 0x5bf
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2210      	movs	r2, #16
 8006048:	f883 25c0 	strb.w	r2, [r3, #1472]	; 0x5c0
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	22ff      	movs	r2, #255	; 0xff
 8006050:	f883 25c1 	strb.w	r2, [r3, #1473]	; 0x5c1
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	22ff      	movs	r2, #255	; 0xff
 8006058:	f883 25c2 	strb.w	r2, [r3, #1474]	; 0x5c2
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2214      	movs	r2, #20
 8006060:	f883 25c6 	strb.w	r2, [r3, #1478]	; 0x5c6
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2214      	movs	r2, #20
 8006068:	f883 25c7 	strb.w	r2, [r3, #1479]	; 0x5c7
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2214      	movs	r2, #20
 8006070:	f883 25c8 	strb.w	r2, [r3, #1480]	; 0x5c8
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	22ff      	movs	r2, #255	; 0xff
 8006078:	f883 25c9 	strb.w	r2, [r3, #1481]	; 0x5c9
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	22ff      	movs	r2, #255	; 0xff
 8006080:	f883 25ca 	strb.w	r2, [r3, #1482]	; 0x5ca
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2210      	movs	r2, #16
 8006088:	f883 25ce 	strb.w	r2, [r3, #1486]	; 0x5ce
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2210      	movs	r2, #16
 8006090:	f883 25cf 	strb.w	r2, [r3, #1487]	; 0x5cf
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	22ff      	movs	r2, #255	; 0xff
 8006098:	f883 25d0 	strb.w	r2, [r3, #1488]	; 0x5d0
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	22ff      	movs	r2, #255	; 0xff
 80060a0:	f883 25d1 	strb.w	r2, [r3, #1489]	; 0x5d1
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	22ff      	movs	r2, #255	; 0xff
 80060a8:	f883 25d3 	strb.w	r2, [r3, #1491]	; 0x5d3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	22ff      	movs	r2, #255	; 0xff
 80060b0:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2210      	movs	r2, #16
 80060b8:	f883 25d6 	strb.w	r2, [r3, #1494]	; 0x5d6
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2210      	movs	r2, #16
 80060c0:	f883 25d7 	strb.w	r2, [r3, #1495]	; 0x5d7
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	22f0      	movs	r2, #240	; 0xf0
 80060c8:	f883 25d8 	strb.w	r2, [r3, #1496]	; 0x5d8
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	22f0      	movs	r2, #240	; 0xf0
 80060d0:	f883 25d9 	strb.w	r2, [r3, #1497]	; 0x5d9
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2210      	movs	r2, #16
 80060d8:	f883 25da 	strb.w	r2, [r3, #1498]	; 0x5da
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	22f0      	movs	r2, #240	; 0xf0
 80060e0:	f883 25db 	strb.w	r2, [r3, #1499]	; 0x5db
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	22f0      	movs	r2, #240	; 0xf0
 80060e8:	f883 25dc 	strb.w	r2, [r3, #1500]	; 0x5dc
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2214      	movs	r2, #20
 80060f0:	f883 25de 	strb.w	r2, [r3, #1502]	; 0x5de
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2214      	movs	r2, #20
 80060f8:	f883 25df 	strb.w	r2, [r3, #1503]	; 0x5df
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2214      	movs	r2, #20
 8006100:	f883 25e0 	strb.w	r2, [r3, #1504]	; 0x5e0
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	22fc      	movs	r2, #252	; 0xfc
 8006108:	f883 25e1 	strb.w	r2, [r3, #1505]	; 0x5e1
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	22fc      	movs	r2, #252	; 0xfc
 8006110:	f883 25e2 	strb.w	r2, [r3, #1506]	; 0x5e2
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2214      	movs	r2, #20
 8006118:	f883 25e6 	strb.w	r2, [r3, #1510]	; 0x5e6
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2214      	movs	r2, #20
 8006120:	f883 25e7 	strb.w	r2, [r3, #1511]	; 0x5e7
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	22f7      	movs	r2, #247	; 0xf7
 8006128:	f883 25e8 	strb.w	r2, [r3, #1512]	; 0x5e8
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	22f7      	movs	r2, #247	; 0xf7
 8006130:	f883 25e9 	strb.w	r2, [r3, #1513]	; 0x5e9
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	22ff      	movs	r2, #255	; 0xff
 8006138:	f883 25eb 	strb.w	r2, [r3, #1515]	; 0x5eb
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	22ff      	movs	r2, #255	; 0xff
 8006140:	f883 25ec 	strb.w	r2, [r3, #1516]	; 0x5ec
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	22ff      	movs	r2, #255	; 0xff
 8006148:	f883 25f0 	strb.w	r2, [r3, #1520]	; 0x5f0
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	22ff      	movs	r2, #255	; 0xff
 8006150:	f883 25f1 	strb.w	r2, [r3, #1521]	; 0x5f1
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	22ff      	movs	r2, #255	; 0xff
 8006158:	f883 25f3 	strb.w	r2, [r3, #1523]	; 0x5f3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	22ff      	movs	r2, #255	; 0xff
 8006160:	f883 25f4 	strb.w	r2, [r3, #1524]	; 0x5f4
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2214      	movs	r2, #20
 8006168:	f883 25f6 	strb.w	r2, [r3, #1526]	; 0x5f6
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2214      	movs	r2, #20
 8006170:	f883 25f7 	strb.w	r2, [r3, #1527]	; 0x5f7
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	22f4      	movs	r2, #244	; 0xf4
 8006178:	f883 25f8 	strb.w	r2, [r3, #1528]	; 0x5f8
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	22f4      	movs	r2, #244	; 0xf4
 8006180:	f883 25f9 	strb.w	r2, [r3, #1529]	; 0x5f9
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2204      	movs	r2, #4
 8006188:	f883 25fa 	strb.w	r2, [r3, #1530]	; 0x5fa
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	22fc      	movs	r2, #252	; 0xfc
 8006190:	f883 25fb 	strb.w	r2, [r3, #1531]	; 0x5fb
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	22fc      	movs	r2, #252	; 0xfc
 8006198:	f883 25fc 	strb.w	r2, [r3, #1532]	; 0x5fc
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2214      	movs	r2, #20
 80061a0:	f883 25fe 	strb.w	r2, [r3, #1534]	; 0x5fe
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2214      	movs	r2, #20
 80061a8:	f883 25ff 	strb.w	r2, [r3, #1535]	; 0x5ff
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2217      	movs	r2, #23
 80061b0:	f883 2600 	strb.w	r2, [r3, #1536]	; 0x600
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2217      	movs	r2, #23
 80061b8:	f883 2601 	strb.w	r2, [r3, #1537]	; 0x601
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2210      	movs	r2, #16
 80061c0:	f883 2602 	strb.w	r2, [r3, #1538]	; 0x602
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	221f      	movs	r2, #31
 80061c8:	f883 2603 	strb.w	r2, [r3, #1539]	; 0x603
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	221f      	movs	r2, #31
 80061d0:	f883 2604 	strb.w	r2, [r3, #1540]	; 0x604
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2210      	movs	r2, #16
 80061d8:	f883 2606 	strb.w	r2, [r3, #1542]	; 0x606
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2210      	movs	r2, #16
 80061e0:	f883 2607 	strb.w	r2, [r3, #1543]	; 0x607
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	221f      	movs	r2, #31
 80061e8:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	221f      	movs	r2, #31
 80061f0:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2210      	movs	r2, #16
 80061f8:	f883 260a 	strb.w	r2, [r3, #1546]	; 0x60a
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	221f      	movs	r2, #31
 8006200:	f883 260b 	strb.w	r2, [r3, #1547]	; 0x60b
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	221f      	movs	r2, #31
 8006208:	f883 260c 	strb.w	r2, [r3, #1548]	; 0x60c
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2214      	movs	r2, #20
 8006210:	f883 260e 	strb.w	r2, [r3, #1550]	; 0x60e
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2214      	movs	r2, #20
 8006218:	f883 260f 	strb.w	r2, [r3, #1551]	; 0x60f
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2214      	movs	r2, #20
 8006220:	f883 2610 	strb.w	r2, [r3, #1552]	; 0x610
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	221f      	movs	r2, #31
 8006228:	f883 2611 	strb.w	r2, [r3, #1553]	; 0x611
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	221f      	movs	r2, #31
 8006230:	f883 2612 	strb.w	r2, [r3, #1554]	; 0x612
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2210      	movs	r2, #16
 8006238:	f883 2616 	strb.w	r2, [r3, #1558]	; 0x616
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2210      	movs	r2, #16
 8006240:	f883 2617 	strb.w	r2, [r3, #1559]	; 0x617
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2210      	movs	r2, #16
 8006248:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	22f0      	movs	r2, #240	; 0xf0
 8006250:	f883 2619 	strb.w	r2, [r3, #1561]	; 0x619
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	22f0      	movs	r2, #240	; 0xf0
 8006258:	f883 261a 	strb.w	r2, [r3, #1562]	; 0x61a
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	221f      	movs	r2, #31
 8006260:	f883 2621 	strb.w	r2, [r3, #1569]	; 0x621
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	221f      	movs	r2, #31
 8006268:	f883 2622 	strb.w	r2, [r3, #1570]	; 0x622
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2210      	movs	r2, #16
 8006270:	f883 2623 	strb.w	r2, [r3, #1571]	; 0x623
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2210      	movs	r2, #16
 8006278:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2210      	movs	r2, #16
 8006280:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2210      	movs	r2, #16
 8006288:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2210      	movs	r2, #16
 8006290:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2210      	movs	r2, #16
 8006298:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	221f      	movs	r2, #31
 80062a0:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	221f      	movs	r2, #31
 80062a8:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2210      	movs	r2, #16
 80062b0:	f883 262b 	strb.w	r2, [r3, #1579]	; 0x62b
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2210      	movs	r2, #16
 80062b8:	f883 262c 	strb.w	r2, [r3, #1580]	; 0x62c
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2210      	movs	r2, #16
 80062c0:	f883 262d 	strb.w	r2, [r3, #1581]	; 0x62d
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2210      	movs	r2, #16
 80062c8:	f883 262e 	strb.w	r2, [r3, #1582]	; 0x62e
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2210      	movs	r2, #16
 80062d0:	f883 262f 	strb.w	r2, [r3, #1583]	; 0x62f
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2210      	movs	r2, #16
 80062d8:	f883 2630 	strb.w	r2, [r3, #1584]	; 0x630
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	22f0      	movs	r2, #240	; 0xf0
 80062e0:	f883 2631 	strb.w	r2, [r3, #1585]	; 0x631
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	22f0      	movs	r2, #240	; 0xf0
 80062e8:	f883 2632 	strb.w	r2, [r3, #1586]	; 0x632
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2210      	movs	r2, #16
 80062f0:	f883 2633 	strb.w	r2, [r3, #1587]	; 0x633
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2210      	movs	r2, #16
 80062f8:	f883 2634 	strb.w	r2, [r3, #1588]	; 0x634
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2210      	movs	r2, #16
 8006300:	f883 2635 	strb.w	r2, [r3, #1589]	; 0x635
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	22ff      	movs	r2, #255	; 0xff
 8006308:	f883 2639 	strb.w	r2, [r3, #1593]	; 0x639
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	22ff      	movs	r2, #255	; 0xff
 8006310:	f883 263a 	strb.w	r2, [r3, #1594]	; 0x63a
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2210      	movs	r2, #16
 8006318:	f883 263b 	strb.w	r2, [r3, #1595]	; 0x63b
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2210      	movs	r2, #16
 8006320:	f883 263c 	strb.w	r2, [r3, #1596]	; 0x63c
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2210      	movs	r2, #16
 8006328:	f883 263d 	strb.w	r2, [r3, #1597]	; 0x63d
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2210      	movs	r2, #16
 8006330:	f883 263e 	strb.w	r2, [r3, #1598]	; 0x63e
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2210      	movs	r2, #16
 8006338:	f883 263f 	strb.w	r2, [r3, #1599]	; 0x63f
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2210      	movs	r2, #16
 8006340:	f883 2640 	strb.w	r2, [r3, #1600]	; 0x640
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2210      	movs	r2, #16
 8006348:	f883 2641 	strb.w	r2, [r3, #1601]	; 0x641
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2210      	movs	r2, #16
 8006350:	f883 2642 	strb.w	r2, [r3, #1602]	; 0x642
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2210      	movs	r2, #16
 8006358:	f883 2643 	strb.w	r2, [r3, #1603]	; 0x643
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2210      	movs	r2, #16
 8006360:	f883 2644 	strb.w	r2, [r3, #1604]	; 0x644
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2210      	movs	r2, #16
 8006368:	f883 2645 	strb.w	r2, [r3, #1605]	; 0x645
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2210      	movs	r2, #16
 8006370:	f883 2646 	strb.w	r2, [r3, #1606]	; 0x646
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2210      	movs	r2, #16
 8006378:	f883 2647 	strb.w	r2, [r3, #1607]	; 0x647
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2210      	movs	r2, #16
 8006380:	f883 2648 	strb.w	r2, [r3, #1608]	; 0x648
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	22ff      	movs	r2, #255	; 0xff
 8006388:	f883 2649 	strb.w	r2, [r3, #1609]	; 0x649
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	22ff      	movs	r2, #255	; 0xff
 8006390:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2210      	movs	r2, #16
 8006398:	f883 264b 	strb.w	r2, [r3, #1611]	; 0x64b
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2210      	movs	r2, #16
 80063a0:	f883 264c 	strb.w	r2, [r3, #1612]	; 0x64c
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2210      	movs	r2, #16
 80063a8:	f883 264d 	strb.w	r2, [r3, #1613]	; 0x64d
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	22ff      	movs	r2, #255	; 0xff
 80063b0:	f883 2651 	strb.w	r2, [r3, #1617]	; 0x651
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	22ff      	movs	r2, #255	; 0xff
 80063b8:	f883 2652 	strb.w	r2, [r3, #1618]	; 0x652
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2214      	movs	r2, #20
 80063c0:	f883 2653 	strb.w	r2, [r3, #1619]	; 0x653
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2214      	movs	r2, #20
 80063c8:	f883 2654 	strb.w	r2, [r3, #1620]	; 0x654
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2214      	movs	r2, #20
 80063d0:	f883 2655 	strb.w	r2, [r3, #1621]	; 0x655
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	22ff      	movs	r2, #255	; 0xff
 80063d8:	f883 2658 	strb.w	r2, [r3, #1624]	; 0x658
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	22ff      	movs	r2, #255	; 0xff
 80063e0:	f883 2659 	strb.w	r2, [r3, #1625]	; 0x659
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	22ff      	movs	r2, #255	; 0xff
 80063e8:	f883 265b 	strb.w	r2, [r3, #1627]	; 0x65b
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	22ff      	movs	r2, #255	; 0xff
 80063f0:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2210      	movs	r2, #16
 80063f8:	f883 265d 	strb.w	r2, [r3, #1629]	; 0x65d
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	221f      	movs	r2, #31
 8006400:	f883 2660 	strb.w	r2, [r3, #1632]	; 0x660
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	221f      	movs	r2, #31
 8006408:	f883 2661 	strb.w	r2, [r3, #1633]	; 0x661
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2210      	movs	r2, #16
 8006410:	f883 2662 	strb.w	r2, [r3, #1634]	; 0x662
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2217      	movs	r2, #23
 8006418:	f883 2663 	strb.w	r2, [r3, #1635]	; 0x663
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2217      	movs	r2, #23
 8006420:	f883 2664 	strb.w	r2, [r3, #1636]	; 0x664
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2214      	movs	r2, #20
 8006428:	f883 2665 	strb.w	r2, [r3, #1637]	; 0x665
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	22fc      	movs	r2, #252	; 0xfc
 8006430:	f883 2668 	strb.w	r2, [r3, #1640]	; 0x668
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	22fc      	movs	r2, #252	; 0xfc
 8006438:	f883 2669 	strb.w	r2, [r3, #1641]	; 0x669
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2204      	movs	r2, #4
 8006440:	f883 266a 	strb.w	r2, [r3, #1642]	; 0x66a
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	22f4      	movs	r2, #244	; 0xf4
 8006448:	f883 266b 	strb.w	r2, [r3, #1643]	; 0x66b
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	22f4      	movs	r2, #244	; 0xf4
 8006450:	f883 266c 	strb.w	r2, [r3, #1644]	; 0x66c
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2214      	movs	r2, #20
 8006458:	f883 266d 	strb.w	r2, [r3, #1645]	; 0x66d
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2214      	movs	r2, #20
 8006460:	f883 266e 	strb.w	r2, [r3, #1646]	; 0x66e
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2214      	movs	r2, #20
 8006468:	f883 266f 	strb.w	r2, [r3, #1647]	; 0x66f
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2217      	movs	r2, #23
 8006470:	f883 2670 	strb.w	r2, [r3, #1648]	; 0x670
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2217      	movs	r2, #23
 8006478:	f883 2671 	strb.w	r2, [r3, #1649]	; 0x671
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2210      	movs	r2, #16
 8006480:	f883 2672 	strb.w	r2, [r3, #1650]	; 0x672
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2217      	movs	r2, #23
 8006488:	f883 2673 	strb.w	r2, [r3, #1651]	; 0x673
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2217      	movs	r2, #23
 8006490:	f883 2674 	strb.w	r2, [r3, #1652]	; 0x674
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2214      	movs	r2, #20
 8006498:	f883 2675 	strb.w	r2, [r3, #1653]	; 0x675
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2214      	movs	r2, #20
 80064a0:	f883 2676 	strb.w	r2, [r3, #1654]	; 0x676
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2214      	movs	r2, #20
 80064a8:	f883 2677 	strb.w	r2, [r3, #1655]	; 0x677
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	22f4      	movs	r2, #244	; 0xf4
 80064b0:	f883 2678 	strb.w	r2, [r3, #1656]	; 0x678
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	22f4      	movs	r2, #244	; 0xf4
 80064b8:	f883 2679 	strb.w	r2, [r3, #1657]	; 0x679
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2204      	movs	r2, #4
 80064c0:	f883 267a 	strb.w	r2, [r3, #1658]	; 0x67a
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	22f4      	movs	r2, #244	; 0xf4
 80064c8:	f883 267b 	strb.w	r2, [r3, #1659]	; 0x67b
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	22f4      	movs	r2, #244	; 0xf4
 80064d0:	f883 267c 	strb.w	r2, [r3, #1660]	; 0x67c
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2214      	movs	r2, #20
 80064d8:	f883 267d 	strb.w	r2, [r3, #1661]	; 0x67d
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	22ff      	movs	r2, #255	; 0xff
 80064e0:	f883 2680 	strb.w	r2, [r3, #1664]	; 0x680
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	22ff      	movs	r2, #255	; 0xff
 80064e8:	f883 2681 	strb.w	r2, [r3, #1665]	; 0x681
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	22f7      	movs	r2, #247	; 0xf7
 80064f0:	f883 2683 	strb.w	r2, [r3, #1667]	; 0x683
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	22f7      	movs	r2, #247	; 0xf7
 80064f8:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2214      	movs	r2, #20
 8006500:	f883 2685 	strb.w	r2, [r3, #1669]	; 0x685
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2214      	movs	r2, #20
 8006508:	f883 2686 	strb.w	r2, [r3, #1670]	; 0x686
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2214      	movs	r2, #20
 8006510:	f883 2687 	strb.w	r2, [r3, #1671]	; 0x687
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2214      	movs	r2, #20
 8006518:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2214      	movs	r2, #20
 8006520:	f883 2689 	strb.w	r2, [r3, #1673]	; 0x689
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2214      	movs	r2, #20
 8006528:	f883 268a 	strb.w	r2, [r3, #1674]	; 0x68a
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2214      	movs	r2, #20
 8006530:	f883 268b 	strb.w	r2, [r3, #1675]	; 0x68b
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2214      	movs	r2, #20
 8006538:	f883 268c 	strb.w	r2, [r3, #1676]	; 0x68c
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2214      	movs	r2, #20
 8006540:	f883 268d 	strb.w	r2, [r3, #1677]	; 0x68d
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2214      	movs	r2, #20
 8006548:	f883 268e 	strb.w	r2, [r3, #1678]	; 0x68e
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2214      	movs	r2, #20
 8006550:	f883 268f 	strb.w	r2, [r3, #1679]	; 0x68f
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	22f7      	movs	r2, #247	; 0xf7
 8006558:	f883 2690 	strb.w	r2, [r3, #1680]	; 0x690
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	22f7      	movs	r2, #247	; 0xf7
 8006560:	f883 2691 	strb.w	r2, [r3, #1681]	; 0x691
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	22f7      	movs	r2, #247	; 0xf7
 8006568:	f883 2693 	strb.w	r2, [r3, #1683]	; 0x693
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	22f7      	movs	r2, #247	; 0xf7
 8006570:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2214      	movs	r2, #20
 8006578:	f883 2695 	strb.w	r2, [r3, #1685]	; 0x695
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2214      	movs	r2, #20
 8006580:	f883 2696 	strb.w	r2, [r3, #1686]	; 0x696
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2214      	movs	r2, #20
 8006588:	f883 2697 	strb.w	r2, [r3, #1687]	; 0x697
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2214      	movs	r2, #20
 8006590:	f883 2698 	strb.w	r2, [r3, #1688]	; 0x698
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2217      	movs	r2, #23
 8006598:	f883 2699 	strb.w	r2, [r3, #1689]	; 0x699
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2217      	movs	r2, #23
 80065a0:	f883 269a 	strb.w	r2, [r3, #1690]	; 0x69a
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2214      	movs	r2, #20
 80065a8:	f883 269b 	strb.w	r2, [r3, #1691]	; 0x69b
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2214      	movs	r2, #20
 80065b0:	f883 269c 	strb.w	r2, [r3, #1692]	; 0x69c
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2214      	movs	r2, #20
 80065b8:	f883 269d 	strb.w	r2, [r3, #1693]	; 0x69d
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2210      	movs	r2, #16
 80065c0:	f883 269e 	strb.w	r2, [r3, #1694]	; 0x69e
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2210      	movs	r2, #16
 80065c8:	f883 269f 	strb.w	r2, [r3, #1695]	; 0x69f
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	221f      	movs	r2, #31
 80065d0:	f883 26a0 	strb.w	r2, [r3, #1696]	; 0x6a0
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	221f      	movs	r2, #31
 80065d8:	f883 26a1 	strb.w	r2, [r3, #1697]	; 0x6a1
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2210      	movs	r2, #16
 80065e0:	f883 26a2 	strb.w	r2, [r3, #1698]	; 0x6a2
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	221f      	movs	r2, #31
 80065e8:	f883 26a3 	strb.w	r2, [r3, #1699]	; 0x6a3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	221f      	movs	r2, #31
 80065f0:	f883 26a4 	strb.w	r2, [r3, #1700]	; 0x6a4
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2210      	movs	r2, #16
 80065f8:	f883 26a5 	strb.w	r2, [r3, #1701]	; 0x6a5
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2214      	movs	r2, #20
 8006600:	f883 26a6 	strb.w	r2, [r3, #1702]	; 0x6a6
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2214      	movs	r2, #20
 8006608:	f883 26a7 	strb.w	r2, [r3, #1703]	; 0x6a7
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2214      	movs	r2, #20
 8006610:	f883 26a8 	strb.w	r2, [r3, #1704]	; 0x6a8
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	22f4      	movs	r2, #244	; 0xf4
 8006618:	f883 26a9 	strb.w	r2, [r3, #1705]	; 0x6a9
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	22f4      	movs	r2, #244	; 0xf4
 8006620:	f883 26aa 	strb.w	r2, [r3, #1706]	; 0x6aa
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2214      	movs	r2, #20
 8006628:	f883 26ab 	strb.w	r2, [r3, #1707]	; 0x6ab
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2214      	movs	r2, #20
 8006630:	f883 26ac 	strb.w	r2, [r3, #1708]	; 0x6ac
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2214      	movs	r2, #20
 8006638:	f883 26ad 	strb.w	r2, [r3, #1709]	; 0x6ad
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2210      	movs	r2, #16
 8006640:	f883 26ae 	strb.w	r2, [r3, #1710]	; 0x6ae
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2210      	movs	r2, #16
 8006648:	f883 26af 	strb.w	r2, [r3, #1711]	; 0x6af
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	22f0      	movs	r2, #240	; 0xf0
 8006650:	f883 26b0 	strb.w	r2, [r3, #1712]	; 0x6b0
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	22f0      	movs	r2, #240	; 0xf0
 8006658:	f883 26b1 	strb.w	r2, [r3, #1713]	; 0x6b1
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2210      	movs	r2, #16
 8006660:	f883 26b2 	strb.w	r2, [r3, #1714]	; 0x6b2
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	22f0      	movs	r2, #240	; 0xf0
 8006668:	f883 26b3 	strb.w	r2, [r3, #1715]	; 0x6b3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	22f0      	movs	r2, #240	; 0xf0
 8006670:	f883 26b4 	strb.w	r2, [r3, #1716]	; 0x6b4
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2210      	movs	r2, #16
 8006678:	f883 26b5 	strb.w	r2, [r3, #1717]	; 0x6b5
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	221f      	movs	r2, #31
 8006680:	f883 26b8 	strb.w	r2, [r3, #1720]	; 0x6b8
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	221f      	movs	r2, #31
 8006688:	f883 26b9 	strb.w	r2, [r3, #1721]	; 0x6b9
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2210      	movs	r2, #16
 8006690:	f883 26ba 	strb.w	r2, [r3, #1722]	; 0x6ba
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	221f      	movs	r2, #31
 8006698:	f883 26bb 	strb.w	r2, [r3, #1723]	; 0x6bb
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	221f      	movs	r2, #31
 80066a0:	f883 26bc 	strb.w	r2, [r3, #1724]	; 0x6bc
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2210      	movs	r2, #16
 80066a8:	f883 26bd 	strb.w	r2, [r3, #1725]	; 0x6bd
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	221f      	movs	r2, #31
 80066b0:	f883 26c1 	strb.w	r2, [r3, #1729]	; 0x6c1
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	221f      	movs	r2, #31
 80066b8:	f883 26c2 	strb.w	r2, [r3, #1730]	; 0x6c2
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2214      	movs	r2, #20
 80066c0:	f883 26c3 	strb.w	r2, [r3, #1731]	; 0x6c3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2214      	movs	r2, #20
 80066c8:	f883 26c4 	strb.w	r2, [r3, #1732]	; 0x6c4
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2214      	movs	r2, #20
 80066d0:	f883 26c5 	strb.w	r2, [r3, #1733]	; 0x6c5
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	22fc      	movs	r2, #252	; 0xfc
 80066d8:	f883 26c9 	strb.w	r2, [r3, #1737]	; 0x6c9
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	22fc      	movs	r2, #252	; 0xfc
 80066e0:	f883 26ca 	strb.w	r2, [r3, #1738]	; 0x6ca
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2214      	movs	r2, #20
 80066e8:	f883 26cb 	strb.w	r2, [r3, #1739]	; 0x6cb
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2214      	movs	r2, #20
 80066f0:	f883 26cc 	strb.w	r2, [r3, #1740]	; 0x6cc
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2214      	movs	r2, #20
 80066f8:	f883 26cd 	strb.w	r2, [r3, #1741]	; 0x6cd
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	22f0      	movs	r2, #240	; 0xf0
 8006700:	f883 26d0 	strb.w	r2, [r3, #1744]	; 0x6d0
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	22f0      	movs	r2, #240	; 0xf0
 8006708:	f883 26d1 	strb.w	r2, [r3, #1745]	; 0x6d1
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2210      	movs	r2, #16
 8006710:	f883 26d2 	strb.w	r2, [r3, #1746]	; 0x6d2
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	22f0      	movs	r2, #240	; 0xf0
 8006718:	f883 26d3 	strb.w	r2, [r3, #1747]	; 0x6d3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	22f0      	movs	r2, #240	; 0xf0
 8006720:	f883 26d4 	strb.w	r2, [r3, #1748]	; 0x6d4
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2210      	movs	r2, #16
 8006728:	f883 26d5 	strb.w	r2, [r3, #1749]	; 0x6d5
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2210      	movs	r2, #16
 8006730:	f883 26d6 	strb.w	r2, [r3, #1750]	; 0x6d6
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2210      	movs	r2, #16
 8006738:	f883 26d7 	strb.w	r2, [r3, #1751]	; 0x6d7
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	22ff      	movs	r2, #255	; 0xff
 8006740:	f883 26d8 	strb.w	r2, [r3, #1752]	; 0x6d8
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	22ff      	movs	r2, #255	; 0xff
 8006748:	f883 26d9 	strb.w	r2, [r3, #1753]	; 0x6d9
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2210      	movs	r2, #16
 8006750:	f883 26da 	strb.w	r2, [r3, #1754]	; 0x6da
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	22ff      	movs	r2, #255	; 0xff
 8006758:	f883 26db 	strb.w	r2, [r3, #1755]	; 0x6db
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	22ff      	movs	r2, #255	; 0xff
 8006760:	f883 26dc 	strb.w	r2, [r3, #1756]	; 0x6dc
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2210      	movs	r2, #16
 8006768:	f883 26dd 	strb.w	r2, [r3, #1757]	; 0x6dd
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2214      	movs	r2, #20
 8006770:	f883 26de 	strb.w	r2, [r3, #1758]	; 0x6de
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2214      	movs	r2, #20
 8006778:	f883 26df 	strb.w	r2, [r3, #1759]	; 0x6df
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2214      	movs	r2, #20
 8006780:	f883 26e0 	strb.w	r2, [r3, #1760]	; 0x6e0
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	22ff      	movs	r2, #255	; 0xff
 8006788:	f883 26e1 	strb.w	r2, [r3, #1761]	; 0x6e1
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	22ff      	movs	r2, #255	; 0xff
 8006790:	f883 26e2 	strb.w	r2, [r3, #1762]	; 0x6e2
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2214      	movs	r2, #20
 8006798:	f883 26e3 	strb.w	r2, [r3, #1763]	; 0x6e3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2214      	movs	r2, #20
 80067a0:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2214      	movs	r2, #20
 80067a8:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2210      	movs	r2, #16
 80067b0:	f883 26e6 	strb.w	r2, [r3, #1766]	; 0x6e6
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2210      	movs	r2, #16
 80067b8:	f883 26e7 	strb.w	r2, [r3, #1767]	; 0x6e7
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2210      	movs	r2, #16
 80067c0:	f883 26e8 	strb.w	r2, [r3, #1768]	; 0x6e8
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	221f      	movs	r2, #31
 80067c8:	f883 26e9 	strb.w	r2, [r3, #1769]	; 0x6e9
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	221f      	movs	r2, #31
 80067d0:	f883 26ea 	strb.w	r2, [r3, #1770]	; 0x6ea
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	22f0      	movs	r2, #240	; 0xf0
 80067d8:	f883 26f1 	strb.w	r2, [r3, #1777]	; 0x6f1
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	22f0      	movs	r2, #240	; 0xf0
 80067e0:	f883 26f2 	strb.w	r2, [r3, #1778]	; 0x6f2
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2210      	movs	r2, #16
 80067e8:	f883 26f3 	strb.w	r2, [r3, #1779]	; 0x6f3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2210      	movs	r2, #16
 80067f0:	f883 26f4 	strb.w	r2, [r3, #1780]	; 0x6f4
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2210      	movs	r2, #16
 80067f8:	f883 26f5 	strb.w	r2, [r3, #1781]	; 0x6f5
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	22ff      	movs	r2, #255	; 0xff
 8006800:	f883 26f6 	strb.w	r2, [r3, #1782]	; 0x6f6
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	22ff      	movs	r2, #255	; 0xff
 8006808:	f883 26f7 	strb.w	r2, [r3, #1783]	; 0x6f7
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	22ff      	movs	r2, #255	; 0xff
 8006810:	f883 26f8 	strb.w	r2, [r3, #1784]	; 0x6f8
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	22ff      	movs	r2, #255	; 0xff
 8006818:	f883 26f9 	strb.w	r2, [r3, #1785]	; 0x6f9
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	22ff      	movs	r2, #255	; 0xff
 8006820:	f883 26fa 	strb.w	r2, [r3, #1786]	; 0x6fa
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	22ff      	movs	r2, #255	; 0xff
 8006828:	f883 26fb 	strb.w	r2, [r3, #1787]	; 0x6fb
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	22ff      	movs	r2, #255	; 0xff
 8006830:	f883 26fc 	strb.w	r2, [r3, #1788]	; 0x6fc
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	22ff      	movs	r2, #255	; 0xff
 8006838:	f883 26fd 	strb.w	r2, [r3, #1789]	; 0x6fd
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	22f0      	movs	r2, #240	; 0xf0
 8006840:	f883 26fe 	strb.w	r2, [r3, #1790]	; 0x6fe
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	22f0      	movs	r2, #240	; 0xf0
 8006848:	f883 26ff 	strb.w	r2, [r3, #1791]	; 0x6ff
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	22f0      	movs	r2, #240	; 0xf0
 8006850:	f883 2700 	strb.w	r2, [r3, #1792]	; 0x700
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	22f0      	movs	r2, #240	; 0xf0
 8006858:	f883 2701 	strb.w	r2, [r3, #1793]	; 0x701
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	22f0      	movs	r2, #240	; 0xf0
 8006860:	f883 2702 	strb.w	r2, [r3, #1794]	; 0x702
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	22f0      	movs	r2, #240	; 0xf0
 8006868:	f883 2703 	strb.w	r2, [r3, #1795]	; 0x703
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	22f0      	movs	r2, #240	; 0xf0
 8006870:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	22f0      	movs	r2, #240	; 0xf0
 8006878:	f883 2705 	strb.w	r2, [r3, #1797]	; 0x705
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	22ff      	movs	r2, #255	; 0xff
 8006880:	f883 2706 	strb.w	r2, [r3, #1798]	; 0x706
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	22ff      	movs	r2, #255	; 0xff
 8006888:	f883 2707 	strb.w	r2, [r3, #1799]	; 0x707
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	22ff      	movs	r2, #255	; 0xff
 8006890:	f883 2708 	strb.w	r2, [r3, #1800]	; 0x708
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	22ff      	movs	r2, #255	; 0xff
 8006898:	f883 2709 	strb.w	r2, [r3, #1801]	; 0x709
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	22ff      	movs	r2, #255	; 0xff
 80068a0:	f883 2712 	strb.w	r2, [r3, #1810]	; 0x712
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	22ff      	movs	r2, #255	; 0xff
 80068a8:	f883 2713 	strb.w	r2, [r3, #1811]	; 0x713
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	22ff      	movs	r2, #255	; 0xff
 80068b0:	f883 2714 	strb.w	r2, [r3, #1812]	; 0x714
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	22ff      	movs	r2, #255	; 0xff
 80068b8:	f883 2715 	strb.w	r2, [r3, #1813]	; 0x715
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	220f      	movs	r2, #15
 80068c0:	f883 2716 	strb.w	r2, [r3, #1814]	; 0x716
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	220f      	movs	r2, #15
 80068c8:	f883 2717 	strb.w	r2, [r3, #1815]	; 0x717
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	220f      	movs	r2, #15
 80068d0:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	220f      	movs	r2, #15
 80068d8:	f883 2719 	strb.w	r2, [r3, #1817]	; 0x719
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	220f      	movs	r2, #15
 80068e0:	f883 271a 	strb.w	r2, [r3, #1818]	; 0x71a
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	220f      	movs	r2, #15
 80068e8:	f883 271b 	strb.w	r2, [r3, #1819]	; 0x71b
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	220f      	movs	r2, #15
 80068f0:	f883 271c 	strb.w	r2, [r3, #1820]	; 0x71c
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	220f      	movs	r2, #15
 80068f8:	f883 271d 	strb.w	r2, [r3, #1821]	; 0x71d
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2238      	movs	r2, #56	; 0x38
 8006900:	f883 271e 	strb.w	r2, [r3, #1822]	; 0x71e
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	227c      	movs	r2, #124	; 0x7c
 8006908:	f883 271f 	strb.w	r2, [r3, #1823]	; 0x71f
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2244      	movs	r2, #68	; 0x44
 8006910:	f883 2720 	strb.w	r2, [r3, #1824]	; 0x720
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	226c      	movs	r2, #108	; 0x6c
 8006918:	f883 2721 	strb.w	r2, [r3, #1825]	; 0x721
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2238      	movs	r2, #56	; 0x38
 8006920:	f883 2722 	strb.w	r2, [r3, #1826]	; 0x722
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	226c      	movs	r2, #108	; 0x6c
 8006928:	f883 2723 	strb.w	r2, [r3, #1827]	; 0x723
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2244      	movs	r2, #68	; 0x44
 8006930:	f883 2724 	strb.w	r2, [r3, #1828]	; 0x724
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	22fc      	movs	r2, #252	; 0xfc
 8006938:	f883 2726 	strb.w	r2, [r3, #1830]	; 0x726
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	22fe      	movs	r2, #254	; 0xfe
 8006940:	f883 2727 	strb.w	r2, [r3, #1831]	; 0x727
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	222a      	movs	r2, #42	; 0x2a
 8006948:	f883 2728 	strb.w	r2, [r3, #1832]	; 0x728
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	222a      	movs	r2, #42	; 0x2a
 8006950:	f883 2729 	strb.w	r2, [r3, #1833]	; 0x729
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	223e      	movs	r2, #62	; 0x3e
 8006958:	f883 272a 	strb.w	r2, [r3, #1834]	; 0x72a
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2214      	movs	r2, #20
 8006960:	f883 272b 	strb.w	r2, [r3, #1835]	; 0x72b
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	227e      	movs	r2, #126	; 0x7e
 8006968:	f883 272e 	strb.w	r2, [r3, #1838]	; 0x72e
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	227e      	movs	r2, #126	; 0x7e
 8006970:	f883 272f 	strb.w	r2, [r3, #1839]	; 0x72f
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2202      	movs	r2, #2
 8006978:	f883 2730 	strb.w	r2, [r3, #1840]	; 0x730
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2202      	movs	r2, #2
 8006980:	f883 2731 	strb.w	r2, [r3, #1841]	; 0x731
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2206      	movs	r2, #6
 8006988:	f883 2732 	strb.w	r2, [r3, #1842]	; 0x732
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2206      	movs	r2, #6
 8006990:	f883 2733 	strb.w	r2, [r3, #1843]	; 0x733
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2202      	movs	r2, #2
 8006998:	f883 2736 	strb.w	r2, [r3, #1846]	; 0x736
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	227e      	movs	r2, #126	; 0x7e
 80069a0:	f883 2737 	strb.w	r2, [r3, #1847]	; 0x737
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	227e      	movs	r2, #126	; 0x7e
 80069a8:	f883 2738 	strb.w	r2, [r3, #1848]	; 0x738
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2202      	movs	r2, #2
 80069b0:	f883 2739 	strb.w	r2, [r3, #1849]	; 0x739
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	227e      	movs	r2, #126	; 0x7e
 80069b8:	f883 273a 	strb.w	r2, [r3, #1850]	; 0x73a
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	227e      	movs	r2, #126	; 0x7e
 80069c0:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2202      	movs	r2, #2
 80069c8:	f883 273c 	strb.w	r2, [r3, #1852]	; 0x73c
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2263      	movs	r2, #99	; 0x63
 80069d0:	f883 273e 	strb.w	r2, [r3, #1854]	; 0x73e
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2277      	movs	r2, #119	; 0x77
 80069d8:	f883 273f 	strb.w	r2, [r3, #1855]	; 0x73f
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	225d      	movs	r2, #93	; 0x5d
 80069e0:	f883 2740 	strb.w	r2, [r3, #1856]	; 0x740
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2249      	movs	r2, #73	; 0x49
 80069e8:	f883 2741 	strb.w	r2, [r3, #1857]	; 0x741
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2263      	movs	r2, #99	; 0x63
 80069f0:	f883 2742 	strb.w	r2, [r3, #1858]	; 0x742
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2263      	movs	r2, #99	; 0x63
 80069f8:	f883 2743 	strb.w	r2, [r3, #1859]	; 0x743
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2238      	movs	r2, #56	; 0x38
 8006a00:	f883 2746 	strb.w	r2, [r3, #1862]	; 0x746
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	227c      	movs	r2, #124	; 0x7c
 8006a08:	f883 2747 	strb.w	r2, [r3, #1863]	; 0x747
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2244      	movs	r2, #68	; 0x44
 8006a10:	f883 2748 	strb.w	r2, [r3, #1864]	; 0x748
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	227c      	movs	r2, #124	; 0x7c
 8006a18:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	223c      	movs	r2, #60	; 0x3c
 8006a20:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2204      	movs	r2, #4
 8006a28:	f883 274b 	strb.w	r2, [r3, #1867]	; 0x74b
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2204      	movs	r2, #4
 8006a30:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2280      	movs	r2, #128	; 0x80
 8006a38:	f883 274e 	strb.w	r2, [r3, #1870]	; 0x74e
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	22fe      	movs	r2, #254	; 0xfe
 8006a40:	f883 274f 	strb.w	r2, [r3, #1871]	; 0x74f
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	227e      	movs	r2, #126	; 0x7e
 8006a48:	f883 2750 	strb.w	r2, [r3, #1872]	; 0x750
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	f883 2751 	strb.w	r2, [r3, #1873]	; 0x751
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2220      	movs	r2, #32
 8006a58:	f883 2752 	strb.w	r2, [r3, #1874]	; 0x752
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	223e      	movs	r2, #62	; 0x3e
 8006a60:	f883 2753 	strb.w	r2, [r3, #1875]	; 0x753
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	221e      	movs	r2, #30
 8006a68:	f883 2754 	strb.w	r2, [r3, #1876]	; 0x754
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2204      	movs	r2, #4
 8006a70:	f883 2756 	strb.w	r2, [r3, #1878]	; 0x756
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2206      	movs	r2, #6
 8006a78:	f883 2757 	strb.w	r2, [r3, #1879]	; 0x757
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	227e      	movs	r2, #126	; 0x7e
 8006a88:	f883 2759 	strb.w	r2, [r3, #1881]	; 0x759
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	227c      	movs	r2, #124	; 0x7c
 8006a90:	f883 275a 	strb.w	r2, [r3, #1882]	; 0x75a
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2206      	movs	r2, #6
 8006a98:	f883 275b 	strb.w	r2, [r3, #1883]	; 0x75b
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	f883 275c 	strb.w	r2, [r3, #1884]	; 0x75c
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2299      	movs	r2, #153	; 0x99
 8006aa8:	f883 275e 	strb.w	r2, [r3, #1886]	; 0x75e
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	22bd      	movs	r2, #189	; 0xbd
 8006ab0:	f883 275f 	strb.w	r2, [r3, #1887]	; 0x75f
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	22e7      	movs	r2, #231	; 0xe7
 8006ab8:	f883 2760 	strb.w	r2, [r3, #1888]	; 0x760
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	22e7      	movs	r2, #231	; 0xe7
 8006ac0:	f883 2761 	strb.w	r2, [r3, #1889]	; 0x761
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	22bd      	movs	r2, #189	; 0xbd
 8006ac8:	f883 2762 	strb.w	r2, [r3, #1890]	; 0x762
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2299      	movs	r2, #153	; 0x99
 8006ad0:	f883 2763 	strb.w	r2, [r3, #1891]	; 0x763
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	221c      	movs	r2, #28
 8006ad8:	f883 2766 	strb.w	r2, [r3, #1894]	; 0x766
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	223e      	movs	r2, #62	; 0x3e
 8006ae0:	f883 2767 	strb.w	r2, [r3, #1895]	; 0x767
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	226b      	movs	r2, #107	; 0x6b
 8006ae8:	f883 2768 	strb.w	r2, [r3, #1896]	; 0x768
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2249      	movs	r2, #73	; 0x49
 8006af0:	f883 2769 	strb.w	r2, [r3, #1897]	; 0x769
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	226b      	movs	r2, #107	; 0x6b
 8006af8:	f883 276a 	strb.w	r2, [r3, #1898]	; 0x76a
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	223e      	movs	r2, #62	; 0x3e
 8006b00:	f883 276b 	strb.w	r2, [r3, #1899]	; 0x76b
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	221c      	movs	r2, #28
 8006b08:	f883 276c 	strb.w	r2, [r3, #1900]	; 0x76c
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	224c      	movs	r2, #76	; 0x4c
 8006b10:	f883 276e 	strb.w	r2, [r3, #1902]	; 0x76e
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	227e      	movs	r2, #126	; 0x7e
 8006b18:	f883 276f 	strb.w	r2, [r3, #1903]	; 0x76f
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2273      	movs	r2, #115	; 0x73
 8006b20:	f883 2770 	strb.w	r2, [r3, #1904]	; 0x770
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 2771 	strb.w	r2, [r3, #1905]	; 0x771
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2273      	movs	r2, #115	; 0x73
 8006b30:	f883 2772 	strb.w	r2, [r3, #1906]	; 0x772
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	227e      	movs	r2, #126	; 0x7e
 8006b38:	f883 2773 	strb.w	r2, [r3, #1907]	; 0x773
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	224c      	movs	r2, #76	; 0x4c
 8006b40:	f883 2774 	strb.w	r2, [r3, #1908]	; 0x774
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2230      	movs	r2, #48	; 0x30
 8006b48:	f883 2776 	strb.w	r2, [r3, #1910]	; 0x776
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2278      	movs	r2, #120	; 0x78
 8006b50:	f883 2777 	strb.w	r2, [r3, #1911]	; 0x777
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	224a      	movs	r2, #74	; 0x4a
 8006b58:	f883 2778 	strb.w	r2, [r3, #1912]	; 0x778
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	224f      	movs	r2, #79	; 0x4f
 8006b60:	f883 2779 	strb.w	r2, [r3, #1913]	; 0x779
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	227d      	movs	r2, #125	; 0x7d
 8006b68:	f883 277a 	strb.w	r2, [r3, #1914]	; 0x77a
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2239      	movs	r2, #57	; 0x39
 8006b70:	f883 277b 	strb.w	r2, [r3, #1915]	; 0x77b
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2218      	movs	r2, #24
 8006b78:	f883 277e 	strb.w	r2, [r3, #1918]	; 0x77e
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	223c      	movs	r2, #60	; 0x3c
 8006b80:	f883 277f 	strb.w	r2, [r3, #1919]	; 0x77f
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2224      	movs	r2, #36	; 0x24
 8006b88:	f883 2780 	strb.w	r2, [r3, #1920]	; 0x780
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	223c      	movs	r2, #60	; 0x3c
 8006b90:	f883 2781 	strb.w	r2, [r3, #1921]	; 0x781
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	223c      	movs	r2, #60	; 0x3c
 8006b98:	f883 2782 	strb.w	r2, [r3, #1922]	; 0x782
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2224      	movs	r2, #36	; 0x24
 8006ba0:	f883 2783 	strb.w	r2, [r3, #1923]	; 0x783
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	223c      	movs	r2, #60	; 0x3c
 8006ba8:	f883 2784 	strb.w	r2, [r3, #1924]	; 0x784
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2218      	movs	r2, #24
 8006bb0:	f883 2785 	strb.w	r2, [r3, #1925]	; 0x785
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2298      	movs	r2, #152	; 0x98
 8006bb8:	f883 2786 	strb.w	r2, [r3, #1926]	; 0x786
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	22fc      	movs	r2, #252	; 0xfc
 8006bc0:	f883 2787 	strb.w	r2, [r3, #1927]	; 0x787
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2264      	movs	r2, #100	; 0x64
 8006bc8:	f883 2788 	strb.w	r2, [r3, #1928]	; 0x788
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	223c      	movs	r2, #60	; 0x3c
 8006bd0:	f883 2789 	strb.w	r2, [r3, #1929]	; 0x789
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	223e      	movs	r2, #62	; 0x3e
 8006bd8:	f883 278a 	strb.w	r2, [r3, #1930]	; 0x78a
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2227      	movs	r2, #39	; 0x27
 8006be0:	f883 278b 	strb.w	r2, [r3, #1931]	; 0x78b
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	223d      	movs	r2, #61	; 0x3d
 8006be8:	f883 278c 	strb.w	r2, [r3, #1932]	; 0x78c
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2218      	movs	r2, #24
 8006bf0:	f883 278d 	strb.w	r2, [r3, #1933]	; 0x78d
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	221c      	movs	r2, #28
 8006bf8:	f883 278e 	strb.w	r2, [r3, #1934]	; 0x78e
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	223e      	movs	r2, #62	; 0x3e
 8006c00:	f883 278f 	strb.w	r2, [r3, #1935]	; 0x78f
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	226b      	movs	r2, #107	; 0x6b
 8006c08:	f883 2790 	strb.w	r2, [r3, #1936]	; 0x790
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2249      	movs	r2, #73	; 0x49
 8006c10:	f883 2791 	strb.w	r2, [r3, #1937]	; 0x791
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2249      	movs	r2, #73	; 0x49
 8006c18:	f883 2792 	strb.w	r2, [r3, #1938]	; 0x792
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	227e      	movs	r2, #126	; 0x7e
 8006c20:	f883 2796 	strb.w	r2, [r3, #1942]	; 0x796
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	227f      	movs	r2, #127	; 0x7f
 8006c28:	f883 2797 	strb.w	r2, [r3, #1943]	; 0x797
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2798 	strb.w	r2, [r3, #1944]	; 0x798
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2799 	strb.w	r2, [r3, #1945]	; 0x799
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	227f      	movs	r2, #127	; 0x7f
 8006c40:	f883 279a 	strb.w	r2, [r3, #1946]	; 0x79a
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	227e      	movs	r2, #126	; 0x7e
 8006c48:	f883 279b 	strb.w	r2, [r3, #1947]	; 0x79b
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	222a      	movs	r2, #42	; 0x2a
 8006c50:	f883 279e 	strb.w	r2, [r3, #1950]	; 0x79e
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	222a      	movs	r2, #42	; 0x2a
 8006c58:	f883 279f 	strb.w	r2, [r3, #1951]	; 0x79f
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	222a      	movs	r2, #42	; 0x2a
 8006c60:	f883 27a0 	strb.w	r2, [r3, #1952]	; 0x7a0
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	222a      	movs	r2, #42	; 0x2a
 8006c68:	f883 27a1 	strb.w	r2, [r3, #1953]	; 0x7a1
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	222a      	movs	r2, #42	; 0x2a
 8006c70:	f883 27a2 	strb.w	r2, [r3, #1954]	; 0x7a2
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	222a      	movs	r2, #42	; 0x2a
 8006c78:	f883 27a3 	strb.w	r2, [r3, #1955]	; 0x7a3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2244      	movs	r2, #68	; 0x44
 8006c80:	f883 27a6 	strb.w	r2, [r3, #1958]	; 0x7a6
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2244      	movs	r2, #68	; 0x44
 8006c88:	f883 27a7 	strb.w	r2, [r3, #1959]	; 0x7a7
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	225f      	movs	r2, #95	; 0x5f
 8006c90:	f883 27a8 	strb.w	r2, [r3, #1960]	; 0x7a8
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	225f      	movs	r2, #95	; 0x5f
 8006c98:	f883 27a9 	strb.w	r2, [r3, #1961]	; 0x7a9
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2244      	movs	r2, #68	; 0x44
 8006ca0:	f883 27aa 	strb.w	r2, [r3, #1962]	; 0x7aa
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2244      	movs	r2, #68	; 0x44
 8006ca8:	f883 27ab 	strb.w	r2, [r3, #1963]	; 0x7ab
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2240      	movs	r2, #64	; 0x40
 8006cb0:	f883 27ae 	strb.w	r2, [r3, #1966]	; 0x7ae
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2251      	movs	r2, #81	; 0x51
 8006cb8:	f883 27af 	strb.w	r2, [r3, #1967]	; 0x7af
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	225b      	movs	r2, #91	; 0x5b
 8006cc0:	f883 27b0 	strb.w	r2, [r3, #1968]	; 0x7b0
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	224e      	movs	r2, #78	; 0x4e
 8006cc8:	f883 27b1 	strb.w	r2, [r3, #1969]	; 0x7b1
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2244      	movs	r2, #68	; 0x44
 8006cd0:	f883 27b2 	strb.w	r2, [r3, #1970]	; 0x7b2
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2240      	movs	r2, #64	; 0x40
 8006cd8:	f883 27b3 	strb.w	r2, [r3, #1971]	; 0x7b3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2240      	movs	r2, #64	; 0x40
 8006ce0:	f883 27b6 	strb.w	r2, [r3, #1974]	; 0x7b6
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2244      	movs	r2, #68	; 0x44
 8006ce8:	f883 27b7 	strb.w	r2, [r3, #1975]	; 0x7b7
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	224e      	movs	r2, #78	; 0x4e
 8006cf0:	f883 27b8 	strb.w	r2, [r3, #1976]	; 0x7b8
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	225b      	movs	r2, #91	; 0x5b
 8006cf8:	f883 27b9 	strb.w	r2, [r3, #1977]	; 0x7b9
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2251      	movs	r2, #81	; 0x51
 8006d00:	f883 27ba 	strb.w	r2, [r3, #1978]	; 0x7ba
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2240      	movs	r2, #64	; 0x40
 8006d08:	f883 27bb 	strb.w	r2, [r3, #1979]	; 0x7bb
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	22fe      	movs	r2, #254	; 0xfe
 8006d10:	f883 27c1 	strb.w	r2, [r3, #1985]	; 0x7c1
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	22ff      	movs	r2, #255	; 0xff
 8006d18:	f883 27c2 	strb.w	r2, [r3, #1986]	; 0x7c2
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 27c3 	strb.w	r2, [r3, #1987]	; 0x7c3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2207      	movs	r2, #7
 8006d28:	f883 27c4 	strb.w	r2, [r3, #1988]	; 0x7c4
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2206      	movs	r2, #6
 8006d30:	f883 27c5 	strb.w	r2, [r3, #1989]	; 0x7c5
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2260      	movs	r2, #96	; 0x60
 8006d38:	f883 27c6 	strb.w	r2, [r3, #1990]	; 0x7c6
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	22e0      	movs	r2, #224	; 0xe0
 8006d40:	f883 27c7 	strb.w	r2, [r3, #1991]	; 0x7c7
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2280      	movs	r2, #128	; 0x80
 8006d48:	f883 27c8 	strb.w	r2, [r3, #1992]	; 0x7c8
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	22ff      	movs	r2, #255	; 0xff
 8006d50:	f883 27c9 	strb.w	r2, [r3, #1993]	; 0x7c9
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	227f      	movs	r2, #127	; 0x7f
 8006d58:	f883 27ca 	strb.w	r2, [r3, #1994]	; 0x7ca
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2208      	movs	r2, #8
 8006d60:	f883 27ce 	strb.w	r2, [r3, #1998]	; 0x7ce
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2208      	movs	r2, #8
 8006d68:	f883 27cf 	strb.w	r2, [r3, #1999]	; 0x7cf
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	226b      	movs	r2, #107	; 0x6b
 8006d70:	f883 27d0 	strb.w	r2, [r3, #2000]	; 0x7d0
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	226b      	movs	r2, #107	; 0x6b
 8006d78:	f883 27d1 	strb.w	r2, [r3, #2001]	; 0x7d1
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2208      	movs	r2, #8
 8006d80:	f883 27d2 	strb.w	r2, [r3, #2002]	; 0x7d2
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2208      	movs	r2, #8
 8006d88:	f883 27d3 	strb.w	r2, [r3, #2003]	; 0x7d3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2224      	movs	r2, #36	; 0x24
 8006d90:	f883 27d6 	strb.w	r2, [r3, #2006]	; 0x7d6
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2236      	movs	r2, #54	; 0x36
 8006d98:	f883 27d7 	strb.w	r2, [r3, #2007]	; 0x7d7
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2212      	movs	r2, #18
 8006da0:	f883 27d8 	strb.w	r2, [r3, #2008]	; 0x7d8
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2236      	movs	r2, #54	; 0x36
 8006da8:	f883 27d9 	strb.w	r2, [r3, #2009]	; 0x7d9
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2224      	movs	r2, #36	; 0x24
 8006db0:	f883 27da 	strb.w	r2, [r3, #2010]	; 0x7da
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2236      	movs	r2, #54	; 0x36
 8006db8:	f883 27db 	strb.w	r2, [r3, #2011]	; 0x7db
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2212      	movs	r2, #18
 8006dc0:	f883 27dc 	strb.w	r2, [r3, #2012]	; 0x7dc
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2206      	movs	r2, #6
 8006dc8:	f883 27df 	strb.w	r2, [r3, #2015]	; 0x7df
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	220f      	movs	r2, #15
 8006dd0:	f883 27e0 	strb.w	r2, [r3, #2016]	; 0x7e0
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2209      	movs	r2, #9
 8006dd8:	f883 27e1 	strb.w	r2, [r3, #2017]	; 0x7e1
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	220f      	movs	r2, #15
 8006de0:	f883 27e2 	strb.w	r2, [r3, #2018]	; 0x7e2
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2206      	movs	r2, #6
 8006de8:	f883 27e3 	strb.w	r2, [r3, #2019]	; 0x7e3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2218      	movs	r2, #24
 8006df0:	f883 27e9 	strb.w	r2, [r3, #2025]	; 0x7e9
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2218      	movs	r2, #24
 8006df8:	f883 27ea 	strb.w	r2, [r3, #2026]	; 0x7ea
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2210      	movs	r2, #16
 8006e00:	f883 27f1 	strb.w	r2, [r3, #2033]	; 0x7f1
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2210      	movs	r2, #16
 8006e08:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2210      	movs	r2, #16
 8006e10:	f883 27f6 	strb.w	r2, [r3, #2038]	; 0x7f6
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2230      	movs	r2, #48	; 0x30
 8006e18:	f883 27f7 	strb.w	r2, [r3, #2039]	; 0x7f7
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2270      	movs	r2, #112	; 0x70
 8006e20:	f883 27f8 	strb.w	r2, [r3, #2040]	; 0x7f8
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	22c0      	movs	r2, #192	; 0xc0
 8006e28:	f883 27f9 	strb.w	r2, [r3, #2041]	; 0x7f9
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	22ff      	movs	r2, #255	; 0xff
 8006e30:	f883 27fa 	strb.w	r2, [r3, #2042]	; 0x7fa
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	22ff      	movs	r2, #255	; 0xff
 8006e38:	f883 27fb 	strb.w	r2, [r3, #2043]	; 0x7fb
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 27fc 	strb.w	r2, [r3, #2044]	; 0x7fc
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 27fd 	strb.w	r2, [r3, #2045]	; 0x7fd
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	221f      	movs	r2, #31
 8006e50:	f883 27ff 	strb.w	r2, [r3, #2047]	; 0x7ff
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	221f      	movs	r2, #31
 8006e58:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2801 	strb.w	r2, [r3, #2049]	; 0x801
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	221f      	movs	r2, #31
 8006e68:	f883 2802 	strb.w	r2, [r3, #2050]	; 0x802
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	221e      	movs	r2, #30
 8006e70:	f883 2803 	strb.w	r2, [r3, #2051]	; 0x803
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2219      	movs	r2, #25
 8006e78:	f883 2807 	strb.w	r2, [r3, #2055]	; 0x807
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	221d      	movs	r2, #29
 8006e80:	f883 2808 	strb.w	r2, [r3, #2056]	; 0x808
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2217      	movs	r2, #23
 8006e88:	f883 2809 	strb.w	r2, [r3, #2057]	; 0x809
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2212      	movs	r2, #18
 8006e90:	f883 280a 	strb.w	r2, [r3, #2058]	; 0x80a
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	223c      	movs	r2, #60	; 0x3c
 8006e98:	f883 2810 	strb.w	r2, [r3, #2064]	; 0x810
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	223c      	movs	r2, #60	; 0x3c
 8006ea0:	f883 2811 	strb.w	r2, [r3, #2065]	; 0x811
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	223c      	movs	r2, #60	; 0x3c
 8006ea8:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	223c      	movs	r2, #60	; 0x3c
 8006eb0:	f883 2813 	strb.w	r2, [r3, #2067]	; 0x813
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f603 0326 	addw	r3, r3, #2086	; 0x826
 8006eba:	f240 12db 	movw	r2, #475	; 0x1db
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f008 fc51 	bl	800f768 <memset>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	225f      	movs	r2, #95	; 0x5f
 8006eca:	f883 282d 	strb.w	r2, [r3, #2093]	; 0x82d
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2207      	movs	r2, #7
 8006ed2:	f883 2831 	strb.w	r2, [r3, #2097]	; 0x831
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2207      	movs	r2, #7
 8006eda:	f883 2833 	strb.w	r2, [r3, #2099]	; 0x833
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2214      	movs	r2, #20
 8006ee2:	f883 2835 	strb.w	r2, [r3, #2101]	; 0x835
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	227f      	movs	r2, #127	; 0x7f
 8006eea:	f883 2836 	strb.w	r2, [r3, #2102]	; 0x836
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2214      	movs	r2, #20
 8006ef2:	f883 2837 	strb.w	r2, [r3, #2103]	; 0x837
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	227f      	movs	r2, #127	; 0x7f
 8006efa:	f883 2838 	strb.w	r2, [r3, #2104]	; 0x838
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2214      	movs	r2, #20
 8006f02:	f883 2839 	strb.w	r2, [r3, #2105]	; 0x839
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2224      	movs	r2, #36	; 0x24
 8006f0a:	f883 283a 	strb.w	r2, [r3, #2106]	; 0x83a
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	222a      	movs	r2, #42	; 0x2a
 8006f12:	f883 283b 	strb.w	r2, [r3, #2107]	; 0x83b
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	227f      	movs	r2, #127	; 0x7f
 8006f1a:	f883 283c 	strb.w	r2, [r3, #2108]	; 0x83c
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	222a      	movs	r2, #42	; 0x2a
 8006f22:	f883 283d 	strb.w	r2, [r3, #2109]	; 0x83d
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2212      	movs	r2, #18
 8006f2a:	f883 283e 	strb.w	r2, [r3, #2110]	; 0x83e
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2223      	movs	r2, #35	; 0x23
 8006f32:	f883 283f 	strb.w	r2, [r3, #2111]	; 0x83f
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2213      	movs	r2, #19
 8006f3a:	f883 2840 	strb.w	r2, [r3, #2112]	; 0x840
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2208      	movs	r2, #8
 8006f42:	f883 2841 	strb.w	r2, [r3, #2113]	; 0x841
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2264      	movs	r2, #100	; 0x64
 8006f4a:	f883 2842 	strb.w	r2, [r3, #2114]	; 0x842
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2262      	movs	r2, #98	; 0x62
 8006f52:	f883 2843 	strb.w	r2, [r3, #2115]	; 0x843
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2236      	movs	r2, #54	; 0x36
 8006f5a:	f883 2844 	strb.w	r2, [r3, #2116]	; 0x844
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2249      	movs	r2, #73	; 0x49
 8006f62:	f883 2845 	strb.w	r2, [r3, #2117]	; 0x845
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2255      	movs	r2, #85	; 0x55
 8006f6a:	f883 2846 	strb.w	r2, [r3, #2118]	; 0x846
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2222      	movs	r2, #34	; 0x22
 8006f72:	f883 2847 	strb.w	r2, [r3, #2119]	; 0x847
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2250      	movs	r2, #80	; 0x50
 8006f7a:	f883 2848 	strb.w	r2, [r3, #2120]	; 0x848
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2205      	movs	r2, #5
 8006f82:	f883 284a 	strb.w	r2, [r3, #2122]	; 0x84a
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2203      	movs	r2, #3
 8006f8a:	f883 284b 	strb.w	r2, [r3, #2123]	; 0x84b
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	221c      	movs	r2, #28
 8006f92:	f883 284f 	strb.w	r2, [r3, #2127]	; 0x84f
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2222      	movs	r2, #34	; 0x22
 8006f9a:	f883 2850 	strb.w	r2, [r3, #2128]	; 0x850
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2241      	movs	r2, #65	; 0x41
 8006fa2:	f883 2851 	strb.w	r2, [r3, #2129]	; 0x851
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2241      	movs	r2, #65	; 0x41
 8006faa:	f883 2854 	strb.w	r2, [r3, #2132]	; 0x854
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2222      	movs	r2, #34	; 0x22
 8006fb2:	f883 2855 	strb.w	r2, [r3, #2133]	; 0x855
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	221c      	movs	r2, #28
 8006fba:	f883 2856 	strb.w	r2, [r3, #2134]	; 0x856
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2208      	movs	r2, #8
 8006fc2:	f883 2858 	strb.w	r2, [r3, #2136]	; 0x858
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	222a      	movs	r2, #42	; 0x2a
 8006fca:	f883 2859 	strb.w	r2, [r3, #2137]	; 0x859
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	221c      	movs	r2, #28
 8006fd2:	f883 285a 	strb.w	r2, [r3, #2138]	; 0x85a
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	222a      	movs	r2, #42	; 0x2a
 8006fda:	f883 285b 	strb.w	r2, [r3, #2139]	; 0x85b
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2208      	movs	r2, #8
 8006fe2:	f883 285c 	strb.w	r2, [r3, #2140]	; 0x85c
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2208      	movs	r2, #8
 8006fea:	f883 285d 	strb.w	r2, [r3, #2141]	; 0x85d
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2208      	movs	r2, #8
 8006ff2:	f883 285e 	strb.w	r2, [r3, #2142]	; 0x85e
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	223e      	movs	r2, #62	; 0x3e
 8006ffa:	f883 285f 	strb.w	r2, [r3, #2143]	; 0x85f
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2208      	movs	r2, #8
 8007002:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2208      	movs	r2, #8
 800700a:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2250      	movs	r2, #80	; 0x50
 8007012:	f883 2863 	strb.w	r2, [r3, #2147]	; 0x863
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2230      	movs	r2, #48	; 0x30
 800701a:	f883 2864 	strb.w	r2, [r3, #2148]	; 0x864
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2208      	movs	r2, #8
 8007022:	f883 2867 	strb.w	r2, [r3, #2151]	; 0x867
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2208      	movs	r2, #8
 800702a:	f883 2868 	strb.w	r2, [r3, #2152]	; 0x868
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2208      	movs	r2, #8
 8007032:	f883 2869 	strb.w	r2, [r3, #2153]	; 0x869
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2208      	movs	r2, #8
 800703a:	f883 286a 	strb.w	r2, [r3, #2154]	; 0x86a
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2208      	movs	r2, #8
 8007042:	f883 286b 	strb.w	r2, [r3, #2155]	; 0x86b
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2230      	movs	r2, #48	; 0x30
 800704a:	f883 286d 	strb.w	r2, [r3, #2157]	; 0x86d
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2230      	movs	r2, #48	; 0x30
 8007052:	f883 286e 	strb.w	r2, [r3, #2158]	; 0x86e
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2220      	movs	r2, #32
 800705a:	f883 2871 	strb.w	r2, [r3, #2161]	; 0x871
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2210      	movs	r2, #16
 8007062:	f883 2872 	strb.w	r2, [r3, #2162]	; 0x872
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2208      	movs	r2, #8
 800706a:	f883 2873 	strb.w	r2, [r3, #2163]	; 0x873
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2204      	movs	r2, #4
 8007072:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2202      	movs	r2, #2
 800707a:	f883 2875 	strb.w	r2, [r3, #2165]	; 0x875
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	223e      	movs	r2, #62	; 0x3e
 8007082:	f883 2876 	strb.w	r2, [r3, #2166]	; 0x876
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2251      	movs	r2, #81	; 0x51
 800708a:	f883 2877 	strb.w	r2, [r3, #2167]	; 0x877
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2249      	movs	r2, #73	; 0x49
 8007092:	f883 2878 	strb.w	r2, [r3, #2168]	; 0x878
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2245      	movs	r2, #69	; 0x45
 800709a:	f883 2879 	strb.w	r2, [r3, #2169]	; 0x879
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	223e      	movs	r2, #62	; 0x3e
 80070a2:	f883 287a 	strb.w	r2, [r3, #2170]	; 0x87a
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2242      	movs	r2, #66	; 0x42
 80070aa:	f883 287c 	strb.w	r2, [r3, #2172]	; 0x87c
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	227f      	movs	r2, #127	; 0x7f
 80070b2:	f883 287d 	strb.w	r2, [r3, #2173]	; 0x87d
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2240      	movs	r2, #64	; 0x40
 80070ba:	f883 287e 	strb.w	r2, [r3, #2174]	; 0x87e
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2242      	movs	r2, #66	; 0x42
 80070c2:	f883 2880 	strb.w	r2, [r3, #2176]	; 0x880
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2261      	movs	r2, #97	; 0x61
 80070ca:	f883 2881 	strb.w	r2, [r3, #2177]	; 0x881
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2251      	movs	r2, #81	; 0x51
 80070d2:	f883 2882 	strb.w	r2, [r3, #2178]	; 0x882
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2249      	movs	r2, #73	; 0x49
 80070da:	f883 2883 	strb.w	r2, [r3, #2179]	; 0x883
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2246      	movs	r2, #70	; 0x46
 80070e2:	f883 2884 	strb.w	r2, [r3, #2180]	; 0x884
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2221      	movs	r2, #33	; 0x21
 80070ea:	f883 2885 	strb.w	r2, [r3, #2181]	; 0x885
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2241      	movs	r2, #65	; 0x41
 80070f2:	f883 2886 	strb.w	r2, [r3, #2182]	; 0x886
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2245      	movs	r2, #69	; 0x45
 80070fa:	f883 2887 	strb.w	r2, [r3, #2183]	; 0x887
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	224b      	movs	r2, #75	; 0x4b
 8007102:	f883 2888 	strb.w	r2, [r3, #2184]	; 0x888
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2231      	movs	r2, #49	; 0x31
 800710a:	f883 2889 	strb.w	r2, [r3, #2185]	; 0x889
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2218      	movs	r2, #24
 8007112:	f883 288a 	strb.w	r2, [r3, #2186]	; 0x88a
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2214      	movs	r2, #20
 800711a:	f883 288b 	strb.w	r2, [r3, #2187]	; 0x88b
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2212      	movs	r2, #18
 8007122:	f883 288c 	strb.w	r2, [r3, #2188]	; 0x88c
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	227f      	movs	r2, #127	; 0x7f
 800712a:	f883 288d 	strb.w	r2, [r3, #2189]	; 0x88d
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2210      	movs	r2, #16
 8007132:	f883 288e 	strb.w	r2, [r3, #2190]	; 0x88e
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2227      	movs	r2, #39	; 0x27
 800713a:	f883 288f 	strb.w	r2, [r3, #2191]	; 0x88f
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2245      	movs	r2, #69	; 0x45
 8007142:	f883 2890 	strb.w	r2, [r3, #2192]	; 0x890
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2245      	movs	r2, #69	; 0x45
 800714a:	f883 2891 	strb.w	r2, [r3, #2193]	; 0x891
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2245      	movs	r2, #69	; 0x45
 8007152:	f883 2892 	strb.w	r2, [r3, #2194]	; 0x892
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2239      	movs	r2, #57	; 0x39
 800715a:	f883 2893 	strb.w	r2, [r3, #2195]	; 0x893
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	223c      	movs	r2, #60	; 0x3c
 8007162:	f883 2894 	strb.w	r2, [r3, #2196]	; 0x894
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	224a      	movs	r2, #74	; 0x4a
 800716a:	f883 2895 	strb.w	r2, [r3, #2197]	; 0x895
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2249      	movs	r2, #73	; 0x49
 8007172:	f883 2896 	strb.w	r2, [r3, #2198]	; 0x896
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2249      	movs	r2, #73	; 0x49
 800717a:	f883 2897 	strb.w	r2, [r3, #2199]	; 0x897
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2230      	movs	r2, #48	; 0x30
 8007182:	f883 2898 	strb.w	r2, [r3, #2200]	; 0x898
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 2899 	strb.w	r2, [r3, #2201]	; 0x899
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2271      	movs	r2, #113	; 0x71
 8007192:	f883 289a 	strb.w	r2, [r3, #2202]	; 0x89a
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2209      	movs	r2, #9
 800719a:	f883 289b 	strb.w	r2, [r3, #2203]	; 0x89b
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2205      	movs	r2, #5
 80071a2:	f883 289c 	strb.w	r2, [r3, #2204]	; 0x89c
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2203      	movs	r2, #3
 80071aa:	f883 289d 	strb.w	r2, [r3, #2205]	; 0x89d
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2236      	movs	r2, #54	; 0x36
 80071b2:	f883 289e 	strb.w	r2, [r3, #2206]	; 0x89e
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2249      	movs	r2, #73	; 0x49
 80071ba:	f883 289f 	strb.w	r2, [r3, #2207]	; 0x89f
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2249      	movs	r2, #73	; 0x49
 80071c2:	f883 28a0 	strb.w	r2, [r3, #2208]	; 0x8a0
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2249      	movs	r2, #73	; 0x49
 80071ca:	f883 28a1 	strb.w	r2, [r3, #2209]	; 0x8a1
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2236      	movs	r2, #54	; 0x36
 80071d2:	f883 28a2 	strb.w	r2, [r3, #2210]	; 0x8a2
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2206      	movs	r2, #6
 80071da:	f883 28a3 	strb.w	r2, [r3, #2211]	; 0x8a3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2249      	movs	r2, #73	; 0x49
 80071e2:	f883 28a4 	strb.w	r2, [r3, #2212]	; 0x8a4
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2249      	movs	r2, #73	; 0x49
 80071ea:	f883 28a5 	strb.w	r2, [r3, #2213]	; 0x8a5
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2229      	movs	r2, #41	; 0x29
 80071f2:	f883 28a6 	strb.w	r2, [r3, #2214]	; 0x8a6
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	221e      	movs	r2, #30
 80071fa:	f883 28a7 	strb.w	r2, [r3, #2215]	; 0x8a7
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2236      	movs	r2, #54	; 0x36
 8007202:	f883 28a9 	strb.w	r2, [r3, #2217]	; 0x8a9
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2236      	movs	r2, #54	; 0x36
 800720a:	f883 28aa 	strb.w	r2, [r3, #2218]	; 0x8aa
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2256      	movs	r2, #86	; 0x56
 8007212:	f883 28ae 	strb.w	r2, [r3, #2222]	; 0x8ae
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2236      	movs	r2, #54	; 0x36
 800721a:	f883 28af 	strb.w	r2, [r3, #2223]	; 0x8af
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2208      	movs	r2, #8
 8007222:	f883 28b3 	strb.w	r2, [r3, #2227]	; 0x8b3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2214      	movs	r2, #20
 800722a:	f883 28b4 	strb.w	r2, [r3, #2228]	; 0x8b4
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2222      	movs	r2, #34	; 0x22
 8007232:	f883 28b5 	strb.w	r2, [r3, #2229]	; 0x8b5
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2241      	movs	r2, #65	; 0x41
 800723a:	f883 28b6 	strb.w	r2, [r3, #2230]	; 0x8b6
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2214      	movs	r2, #20
 8007242:	f883 28b7 	strb.w	r2, [r3, #2231]	; 0x8b7
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2214      	movs	r2, #20
 800724a:	f883 28b8 	strb.w	r2, [r3, #2232]	; 0x8b8
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2214      	movs	r2, #20
 8007252:	f883 28b9 	strb.w	r2, [r3, #2233]	; 0x8b9
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2214      	movs	r2, #20
 800725a:	f883 28ba 	strb.w	r2, [r3, #2234]	; 0x8ba
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2214      	movs	r2, #20
 8007262:	f883 28bb 	strb.w	r2, [r3, #2235]	; 0x8bb
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2241      	movs	r2, #65	; 0x41
 800726a:	f883 28bc 	strb.w	r2, [r3, #2236]	; 0x8bc
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2222      	movs	r2, #34	; 0x22
 8007272:	f883 28bd 	strb.w	r2, [r3, #2237]	; 0x8bd
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2214      	movs	r2, #20
 800727a:	f883 28be 	strb.w	r2, [r3, #2238]	; 0x8be
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2208      	movs	r2, #8
 8007282:	f883 28bf 	strb.w	r2, [r3, #2239]	; 0x8bf
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2202      	movs	r2, #2
 800728a:	f883 28c1 	strb.w	r2, [r3, #2241]	; 0x8c1
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 28c2 	strb.w	r2, [r3, #2242]	; 0x8c2
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2251      	movs	r2, #81	; 0x51
 800729a:	f883 28c3 	strb.w	r2, [r3, #2243]	; 0x8c3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2209      	movs	r2, #9
 80072a2:	f883 28c4 	strb.w	r2, [r3, #2244]	; 0x8c4
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2206      	movs	r2, #6
 80072aa:	f883 28c5 	strb.w	r2, [r3, #2245]	; 0x8c5
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2232      	movs	r2, #50	; 0x32
 80072b2:	f883 28c6 	strb.w	r2, [r3, #2246]	; 0x8c6
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2249      	movs	r2, #73	; 0x49
 80072ba:	f883 28c7 	strb.w	r2, [r3, #2247]	; 0x8c7
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2279      	movs	r2, #121	; 0x79
 80072c2:	f883 28c8 	strb.w	r2, [r3, #2248]	; 0x8c8
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2241      	movs	r2, #65	; 0x41
 80072ca:	f883 28c9 	strb.w	r2, [r3, #2249]	; 0x8c9
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	223e      	movs	r2, #62	; 0x3e
 80072d2:	f883 28ca 	strb.w	r2, [r3, #2250]	; 0x8ca
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	227e      	movs	r2, #126	; 0x7e
 80072da:	f883 28cb 	strb.w	r2, [r3, #2251]	; 0x8cb
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2211      	movs	r2, #17
 80072e2:	f883 28cc 	strb.w	r2, [r3, #2252]	; 0x8cc
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2211      	movs	r2, #17
 80072ea:	f883 28cd 	strb.w	r2, [r3, #2253]	; 0x8cd
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2211      	movs	r2, #17
 80072f2:	f883 28ce 	strb.w	r2, [r3, #2254]	; 0x8ce
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	227e      	movs	r2, #126	; 0x7e
 80072fa:	f883 28cf 	strb.w	r2, [r3, #2255]	; 0x8cf
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	227f      	movs	r2, #127	; 0x7f
 8007302:	f883 28d0 	strb.w	r2, [r3, #2256]	; 0x8d0
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2249      	movs	r2, #73	; 0x49
 800730a:	f883 28d1 	strb.w	r2, [r3, #2257]	; 0x8d1
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2249      	movs	r2, #73	; 0x49
 8007312:	f883 28d2 	strb.w	r2, [r3, #2258]	; 0x8d2
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2249      	movs	r2, #73	; 0x49
 800731a:	f883 28d3 	strb.w	r2, [r3, #2259]	; 0x8d3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2236      	movs	r2, #54	; 0x36
 8007322:	f883 28d4 	strb.w	r2, [r3, #2260]	; 0x8d4
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	223e      	movs	r2, #62	; 0x3e
 800732a:	f883 28d5 	strb.w	r2, [r3, #2261]	; 0x8d5
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2241      	movs	r2, #65	; 0x41
 8007332:	f883 28d6 	strb.w	r2, [r3, #2262]	; 0x8d6
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2241      	movs	r2, #65	; 0x41
 800733a:	f883 28d7 	strb.w	r2, [r3, #2263]	; 0x8d7
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2241      	movs	r2, #65	; 0x41
 8007342:	f883 28d8 	strb.w	r2, [r3, #2264]	; 0x8d8
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2222      	movs	r2, #34	; 0x22
 800734a:	f883 28d9 	strb.w	r2, [r3, #2265]	; 0x8d9
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	227f      	movs	r2, #127	; 0x7f
 8007352:	f883 28da 	strb.w	r2, [r3, #2266]	; 0x8da
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2241      	movs	r2, #65	; 0x41
 800735a:	f883 28db 	strb.w	r2, [r3, #2267]	; 0x8db
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2241      	movs	r2, #65	; 0x41
 8007362:	f883 28dc 	strb.w	r2, [r3, #2268]	; 0x8dc
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2222      	movs	r2, #34	; 0x22
 800736a:	f883 28dd 	strb.w	r2, [r3, #2269]	; 0x8dd
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	221c      	movs	r2, #28
 8007372:	f883 28de 	strb.w	r2, [r3, #2270]	; 0x8de
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	227f      	movs	r2, #127	; 0x7f
 800737a:	f883 28df 	strb.w	r2, [r3, #2271]	; 0x8df
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2249      	movs	r2, #73	; 0x49
 8007382:	f883 28e0 	strb.w	r2, [r3, #2272]	; 0x8e0
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2249      	movs	r2, #73	; 0x49
 800738a:	f883 28e1 	strb.w	r2, [r3, #2273]	; 0x8e1
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2249      	movs	r2, #73	; 0x49
 8007392:	f883 28e2 	strb.w	r2, [r3, #2274]	; 0x8e2
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2241      	movs	r2, #65	; 0x41
 800739a:	f883 28e3 	strb.w	r2, [r3, #2275]	; 0x8e3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	227f      	movs	r2, #127	; 0x7f
 80073a2:	f883 28e4 	strb.w	r2, [r3, #2276]	; 0x8e4
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2209      	movs	r2, #9
 80073aa:	f883 28e5 	strb.w	r2, [r3, #2277]	; 0x8e5
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2209      	movs	r2, #9
 80073b2:	f883 28e6 	strb.w	r2, [r3, #2278]	; 0x8e6
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 28e7 	strb.w	r2, [r3, #2279]	; 0x8e7
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f883 28e8 	strb.w	r2, [r3, #2280]	; 0x8e8
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	223e      	movs	r2, #62	; 0x3e
 80073ca:	f883 28e9 	strb.w	r2, [r3, #2281]	; 0x8e9
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2241      	movs	r2, #65	; 0x41
 80073d2:	f883 28ea 	strb.w	r2, [r3, #2282]	; 0x8ea
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2241      	movs	r2, #65	; 0x41
 80073da:	f883 28eb 	strb.w	r2, [r3, #2283]	; 0x8eb
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2251      	movs	r2, #81	; 0x51
 80073e2:	f883 28ec 	strb.w	r2, [r3, #2284]	; 0x8ec
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2232      	movs	r2, #50	; 0x32
 80073ea:	f883 28ed 	strb.w	r2, [r3, #2285]	; 0x8ed
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	227f      	movs	r2, #127	; 0x7f
 80073f2:	f883 28ee 	strb.w	r2, [r3, #2286]	; 0x8ee
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2208      	movs	r2, #8
 80073fa:	f883 28ef 	strb.w	r2, [r3, #2287]	; 0x8ef
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2208      	movs	r2, #8
 8007402:	f883 28f0 	strb.w	r2, [r3, #2288]	; 0x8f0
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2208      	movs	r2, #8
 800740a:	f883 28f1 	strb.w	r2, [r3, #2289]	; 0x8f1
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	227f      	movs	r2, #127	; 0x7f
 8007412:	f883 28f2 	strb.w	r2, [r3, #2290]	; 0x8f2
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2241      	movs	r2, #65	; 0x41
 800741a:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	227f      	movs	r2, #127	; 0x7f
 8007422:	f883 28f5 	strb.w	r2, [r3, #2293]	; 0x8f5
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2241      	movs	r2, #65	; 0x41
 800742a:	f883 28f6 	strb.w	r2, [r3, #2294]	; 0x8f6
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2220      	movs	r2, #32
 8007432:	f883 28f8 	strb.w	r2, [r3, #2296]	; 0x8f8
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2240      	movs	r2, #64	; 0x40
 800743a:	f883 28f9 	strb.w	r2, [r3, #2297]	; 0x8f9
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2241      	movs	r2, #65	; 0x41
 8007442:	f883 28fa 	strb.w	r2, [r3, #2298]	; 0x8fa
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	223f      	movs	r2, #63	; 0x3f
 800744a:	f883 28fb 	strb.w	r2, [r3, #2299]	; 0x8fb
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 28fc 	strb.w	r2, [r3, #2300]	; 0x8fc
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	227f      	movs	r2, #127	; 0x7f
 800745a:	f883 28fd 	strb.w	r2, [r3, #2301]	; 0x8fd
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2208      	movs	r2, #8
 8007462:	f883 28fe 	strb.w	r2, [r3, #2302]	; 0x8fe
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2214      	movs	r2, #20
 800746a:	f883 28ff 	strb.w	r2, [r3, #2303]	; 0x8ff
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2222      	movs	r2, #34	; 0x22
 8007472:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2241      	movs	r2, #65	; 0x41
 800747a:	f883 2901 	strb.w	r2, [r3, #2305]	; 0x901
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	227f      	movs	r2, #127	; 0x7f
 8007482:	f883 2902 	strb.w	r2, [r3, #2306]	; 0x902
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2240      	movs	r2, #64	; 0x40
 800748a:	f883 2903 	strb.w	r2, [r3, #2307]	; 0x903
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2240      	movs	r2, #64	; 0x40
 8007492:	f883 2904 	strb.w	r2, [r3, #2308]	; 0x904
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2240      	movs	r2, #64	; 0x40
 800749a:	f883 2905 	strb.w	r2, [r3, #2309]	; 0x905
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2240      	movs	r2, #64	; 0x40
 80074a2:	f883 2906 	strb.w	r2, [r3, #2310]	; 0x906
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	227f      	movs	r2, #127	; 0x7f
 80074aa:	f883 2907 	strb.w	r2, [r3, #2311]	; 0x907
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2202      	movs	r2, #2
 80074b2:	f883 2908 	strb.w	r2, [r3, #2312]	; 0x908
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2204      	movs	r2, #4
 80074ba:	f883 2909 	strb.w	r2, [r3, #2313]	; 0x909
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2202      	movs	r2, #2
 80074c2:	f883 290a 	strb.w	r2, [r3, #2314]	; 0x90a
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	227f      	movs	r2, #127	; 0x7f
 80074ca:	f883 290b 	strb.w	r2, [r3, #2315]	; 0x90b
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	227f      	movs	r2, #127	; 0x7f
 80074d2:	f883 290c 	strb.w	r2, [r3, #2316]	; 0x90c
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2204      	movs	r2, #4
 80074da:	f883 290d 	strb.w	r2, [r3, #2317]	; 0x90d
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2208      	movs	r2, #8
 80074e2:	f883 290e 	strb.w	r2, [r3, #2318]	; 0x90e
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2210      	movs	r2, #16
 80074ea:	f883 290f 	strb.w	r2, [r3, #2319]	; 0x90f
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	227f      	movs	r2, #127	; 0x7f
 80074f2:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	223e      	movs	r2, #62	; 0x3e
 80074fa:	f883 2911 	strb.w	r2, [r3, #2321]	; 0x911
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2241      	movs	r2, #65	; 0x41
 8007502:	f883 2912 	strb.w	r2, [r3, #2322]	; 0x912
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2241      	movs	r2, #65	; 0x41
 800750a:	f883 2913 	strb.w	r2, [r3, #2323]	; 0x913
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2241      	movs	r2, #65	; 0x41
 8007512:	f883 2914 	strb.w	r2, [r3, #2324]	; 0x914
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	223e      	movs	r2, #62	; 0x3e
 800751a:	f883 2915 	strb.w	r2, [r3, #2325]	; 0x915
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	227f      	movs	r2, #127	; 0x7f
 8007522:	f883 2916 	strb.w	r2, [r3, #2326]	; 0x916
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2209      	movs	r2, #9
 800752a:	f883 2917 	strb.w	r2, [r3, #2327]	; 0x917
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2209      	movs	r2, #9
 8007532:	f883 2918 	strb.w	r2, [r3, #2328]	; 0x918
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2209      	movs	r2, #9
 800753a:	f883 2919 	strb.w	r2, [r3, #2329]	; 0x919
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2206      	movs	r2, #6
 8007542:	f883 291a 	strb.w	r2, [r3, #2330]	; 0x91a
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	223e      	movs	r2, #62	; 0x3e
 800754a:	f883 291b 	strb.w	r2, [r3, #2331]	; 0x91b
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2241      	movs	r2, #65	; 0x41
 8007552:	f883 291c 	strb.w	r2, [r3, #2332]	; 0x91c
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2251      	movs	r2, #81	; 0x51
 800755a:	f883 291d 	strb.w	r2, [r3, #2333]	; 0x91d
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2221      	movs	r2, #33	; 0x21
 8007562:	f883 291e 	strb.w	r2, [r3, #2334]	; 0x91e
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	225e      	movs	r2, #94	; 0x5e
 800756a:	f883 291f 	strb.w	r2, [r3, #2335]	; 0x91f
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	227f      	movs	r2, #127	; 0x7f
 8007572:	f883 2920 	strb.w	r2, [r3, #2336]	; 0x920
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2209      	movs	r2, #9
 800757a:	f883 2921 	strb.w	r2, [r3, #2337]	; 0x921
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2219      	movs	r2, #25
 8007582:	f883 2922 	strb.w	r2, [r3, #2338]	; 0x922
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2229      	movs	r2, #41	; 0x29
 800758a:	f883 2923 	strb.w	r2, [r3, #2339]	; 0x923
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2246      	movs	r2, #70	; 0x46
 8007592:	f883 2924 	strb.w	r2, [r3, #2340]	; 0x924
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2246      	movs	r2, #70	; 0x46
 800759a:	f883 2925 	strb.w	r2, [r3, #2341]	; 0x925
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2249      	movs	r2, #73	; 0x49
 80075a2:	f883 2926 	strb.w	r2, [r3, #2342]	; 0x926
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2249      	movs	r2, #73	; 0x49
 80075aa:	f883 2927 	strb.w	r2, [r3, #2343]	; 0x927
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2249      	movs	r2, #73	; 0x49
 80075b2:	f883 2928 	strb.w	r2, [r3, #2344]	; 0x928
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2231      	movs	r2, #49	; 0x31
 80075ba:	f883 2929 	strb.w	r2, [r3, #2345]	; 0x929
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 292a 	strb.w	r2, [r3, #2346]	; 0x92a
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f883 292b 	strb.w	r2, [r3, #2347]	; 0x92b
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	227f      	movs	r2, #127	; 0x7f
 80075d2:	f883 292c 	strb.w	r2, [r3, #2348]	; 0x92c
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 292d 	strb.w	r2, [r3, #2349]	; 0x92d
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 292e 	strb.w	r2, [r3, #2350]	; 0x92e
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	223f      	movs	r2, #63	; 0x3f
 80075ea:	f883 292f 	strb.w	r2, [r3, #2351]	; 0x92f
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2240      	movs	r2, #64	; 0x40
 80075f2:	f883 2930 	strb.w	r2, [r3, #2352]	; 0x930
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2240      	movs	r2, #64	; 0x40
 80075fa:	f883 2931 	strb.w	r2, [r3, #2353]	; 0x931
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2240      	movs	r2, #64	; 0x40
 8007602:	f883 2932 	strb.w	r2, [r3, #2354]	; 0x932
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	223f      	movs	r2, #63	; 0x3f
 800760a:	f883 2933 	strb.w	r2, [r3, #2355]	; 0x933
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	221f      	movs	r2, #31
 8007612:	f883 2934 	strb.w	r2, [r3, #2356]	; 0x934
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2220      	movs	r2, #32
 800761a:	f883 2935 	strb.w	r2, [r3, #2357]	; 0x935
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2240      	movs	r2, #64	; 0x40
 8007622:	f883 2936 	strb.w	r2, [r3, #2358]	; 0x936
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2220      	movs	r2, #32
 800762a:	f883 2937 	strb.w	r2, [r3, #2359]	; 0x937
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	221f      	movs	r2, #31
 8007632:	f883 2938 	strb.w	r2, [r3, #2360]	; 0x938
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	227f      	movs	r2, #127	; 0x7f
 800763a:	f883 2939 	strb.w	r2, [r3, #2361]	; 0x939
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2220      	movs	r2, #32
 8007642:	f883 293a 	strb.w	r2, [r3, #2362]	; 0x93a
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2218      	movs	r2, #24
 800764a:	f883 293b 	strb.w	r2, [r3, #2363]	; 0x93b
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2220      	movs	r2, #32
 8007652:	f883 293c 	strb.w	r2, [r3, #2364]	; 0x93c
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	227f      	movs	r2, #127	; 0x7f
 800765a:	f883 293d 	strb.w	r2, [r3, #2365]	; 0x93d
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2263      	movs	r2, #99	; 0x63
 8007662:	f883 293e 	strb.w	r2, [r3, #2366]	; 0x93e
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2214      	movs	r2, #20
 800766a:	f883 293f 	strb.w	r2, [r3, #2367]	; 0x93f
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2208      	movs	r2, #8
 8007672:	f883 2940 	strb.w	r2, [r3, #2368]	; 0x940
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2214      	movs	r2, #20
 800767a:	f883 2941 	strb.w	r2, [r3, #2369]	; 0x941
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2263      	movs	r2, #99	; 0x63
 8007682:	f883 2942 	strb.w	r2, [r3, #2370]	; 0x942
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2203      	movs	r2, #3
 800768a:	f883 2943 	strb.w	r2, [r3, #2371]	; 0x943
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2204      	movs	r2, #4
 8007692:	f883 2944 	strb.w	r2, [r3, #2372]	; 0x944
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2278      	movs	r2, #120	; 0x78
 800769a:	f883 2945 	strb.w	r2, [r3, #2373]	; 0x945
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2204      	movs	r2, #4
 80076a2:	f883 2946 	strb.w	r2, [r3, #2374]	; 0x946
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2203      	movs	r2, #3
 80076aa:	f883 2947 	strb.w	r2, [r3, #2375]	; 0x947
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2261      	movs	r2, #97	; 0x61
 80076b2:	f883 2948 	strb.w	r2, [r3, #2376]	; 0x948
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2251      	movs	r2, #81	; 0x51
 80076ba:	f883 2949 	strb.w	r2, [r3, #2377]	; 0x949
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2249      	movs	r2, #73	; 0x49
 80076c2:	f883 294a 	strb.w	r2, [r3, #2378]	; 0x94a
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2245      	movs	r2, #69	; 0x45
 80076ca:	f883 294b 	strb.w	r2, [r3, #2379]	; 0x94b
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2243      	movs	r2, #67	; 0x43
 80076d2:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	227f      	movs	r2, #127	; 0x7f
 80076da:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2241      	movs	r2, #65	; 0x41
 80076e2:	f883 2950 	strb.w	r2, [r3, #2384]	; 0x950
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2241      	movs	r2, #65	; 0x41
 80076ea:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2202      	movs	r2, #2
 80076f2:	f883 2952 	strb.w	r2, [r3, #2386]	; 0x952
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2204      	movs	r2, #4
 80076fa:	f883 2953 	strb.w	r2, [r3, #2387]	; 0x953
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2208      	movs	r2, #8
 8007702:	f883 2954 	strb.w	r2, [r3, #2388]	; 0x954
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2210      	movs	r2, #16
 800770a:	f883 2955 	strb.w	r2, [r3, #2389]	; 0x955
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2220      	movs	r2, #32
 8007712:	f883 2956 	strb.w	r2, [r3, #2390]	; 0x956
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2241      	movs	r2, #65	; 0x41
 800771a:	f883 2957 	strb.w	r2, [r3, #2391]	; 0x957
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2241      	movs	r2, #65	; 0x41
 8007722:	f883 2958 	strb.w	r2, [r3, #2392]	; 0x958
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	227f      	movs	r2, #127	; 0x7f
 800772a:	f883 2959 	strb.w	r2, [r3, #2393]	; 0x959
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2204      	movs	r2, #4
 8007732:	f883 295c 	strb.w	r2, [r3, #2396]	; 0x95c
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2202      	movs	r2, #2
 800773a:	f883 295d 	strb.w	r2, [r3, #2397]	; 0x95d
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2201      	movs	r2, #1
 8007742:	f883 295e 	strb.w	r2, [r3, #2398]	; 0x95e
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2202      	movs	r2, #2
 800774a:	f883 295f 	strb.w	r2, [r3, #2399]	; 0x95f
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2204      	movs	r2, #4
 8007752:	f883 2960 	strb.w	r2, [r3, #2400]	; 0x960
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2240      	movs	r2, #64	; 0x40
 800775a:	f883 2961 	strb.w	r2, [r3, #2401]	; 0x961
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2240      	movs	r2, #64	; 0x40
 8007762:	f883 2962 	strb.w	r2, [r3, #2402]	; 0x962
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2240      	movs	r2, #64	; 0x40
 800776a:	f883 2963 	strb.w	r2, [r3, #2403]	; 0x963
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2240      	movs	r2, #64	; 0x40
 8007772:	f883 2964 	strb.w	r2, [r3, #2404]	; 0x964
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2240      	movs	r2, #64	; 0x40
 800777a:	f883 2965 	strb.w	r2, [r3, #2405]	; 0x965
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2201      	movs	r2, #1
 8007782:	f883 2967 	strb.w	r2, [r3, #2407]	; 0x967
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2202      	movs	r2, #2
 800778a:	f883 2968 	strb.w	r2, [r3, #2408]	; 0x968
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2204      	movs	r2, #4
 8007792:	f883 2969 	strb.w	r2, [r3, #2409]	; 0x969
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2220      	movs	r2, #32
 800779a:	f883 296b 	strb.w	r2, [r3, #2411]	; 0x96b
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2254      	movs	r2, #84	; 0x54
 80077a2:	f883 296c 	strb.w	r2, [r3, #2412]	; 0x96c
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2254      	movs	r2, #84	; 0x54
 80077aa:	f883 296d 	strb.w	r2, [r3, #2413]	; 0x96d
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2254      	movs	r2, #84	; 0x54
 80077b2:	f883 296e 	strb.w	r2, [r3, #2414]	; 0x96e
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2278      	movs	r2, #120	; 0x78
 80077ba:	f883 296f 	strb.w	r2, [r3, #2415]	; 0x96f
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	227f      	movs	r2, #127	; 0x7f
 80077c2:	f883 2970 	strb.w	r2, [r3, #2416]	; 0x970
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2248      	movs	r2, #72	; 0x48
 80077ca:	f883 2971 	strb.w	r2, [r3, #2417]	; 0x971
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2244      	movs	r2, #68	; 0x44
 80077d2:	f883 2972 	strb.w	r2, [r3, #2418]	; 0x972
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2244      	movs	r2, #68	; 0x44
 80077da:	f883 2973 	strb.w	r2, [r3, #2419]	; 0x973
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2238      	movs	r2, #56	; 0x38
 80077e2:	f883 2974 	strb.w	r2, [r3, #2420]	; 0x974
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2238      	movs	r2, #56	; 0x38
 80077ea:	f883 2975 	strb.w	r2, [r3, #2421]	; 0x975
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2244      	movs	r2, #68	; 0x44
 80077f2:	f883 2976 	strb.w	r2, [r3, #2422]	; 0x976
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2244      	movs	r2, #68	; 0x44
 80077fa:	f883 2977 	strb.w	r2, [r3, #2423]	; 0x977
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2244      	movs	r2, #68	; 0x44
 8007802:	f883 2978 	strb.w	r2, [r3, #2424]	; 0x978
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2220      	movs	r2, #32
 800780a:	f883 2979 	strb.w	r2, [r3, #2425]	; 0x979
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2238      	movs	r2, #56	; 0x38
 8007812:	f883 297a 	strb.w	r2, [r3, #2426]	; 0x97a
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2244      	movs	r2, #68	; 0x44
 800781a:	f883 297b 	strb.w	r2, [r3, #2427]	; 0x97b
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2244      	movs	r2, #68	; 0x44
 8007822:	f883 297c 	strb.w	r2, [r3, #2428]	; 0x97c
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2248      	movs	r2, #72	; 0x48
 800782a:	f883 297d 	strb.w	r2, [r3, #2429]	; 0x97d
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	227f      	movs	r2, #127	; 0x7f
 8007832:	f883 297e 	strb.w	r2, [r3, #2430]	; 0x97e
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2238      	movs	r2, #56	; 0x38
 800783a:	f883 297f 	strb.w	r2, [r3, #2431]	; 0x97f
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2254      	movs	r2, #84	; 0x54
 8007842:	f883 2980 	strb.w	r2, [r3, #2432]	; 0x980
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2254      	movs	r2, #84	; 0x54
 800784a:	f883 2981 	strb.w	r2, [r3, #2433]	; 0x981
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2254      	movs	r2, #84	; 0x54
 8007852:	f883 2982 	strb.w	r2, [r3, #2434]	; 0x982
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2218      	movs	r2, #24
 800785a:	f883 2983 	strb.w	r2, [r3, #2435]	; 0x983
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2208      	movs	r2, #8
 8007862:	f883 2984 	strb.w	r2, [r3, #2436]	; 0x984
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	227e      	movs	r2, #126	; 0x7e
 800786a:	f883 2985 	strb.w	r2, [r3, #2437]	; 0x985
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2209      	movs	r2, #9
 8007872:	f883 2986 	strb.w	r2, [r3, #2438]	; 0x986
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2201      	movs	r2, #1
 800787a:	f883 2987 	strb.w	r2, [r3, #2439]	; 0x987
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2202      	movs	r2, #2
 8007882:	f883 2988 	strb.w	r2, [r3, #2440]	; 0x988
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2208      	movs	r2, #8
 800788a:	f883 2989 	strb.w	r2, [r3, #2441]	; 0x989
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2214      	movs	r2, #20
 8007892:	f883 298a 	strb.w	r2, [r3, #2442]	; 0x98a
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2254      	movs	r2, #84	; 0x54
 800789a:	f883 298b 	strb.w	r2, [r3, #2443]	; 0x98b
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2254      	movs	r2, #84	; 0x54
 80078a2:	f883 298c 	strb.w	r2, [r3, #2444]	; 0x98c
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	223c      	movs	r2, #60	; 0x3c
 80078aa:	f883 298d 	strb.w	r2, [r3, #2445]	; 0x98d
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	227f      	movs	r2, #127	; 0x7f
 80078b2:	f883 298e 	strb.w	r2, [r3, #2446]	; 0x98e
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2208      	movs	r2, #8
 80078ba:	f883 298f 	strb.w	r2, [r3, #2447]	; 0x98f
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2204      	movs	r2, #4
 80078c2:	f883 2990 	strb.w	r2, [r3, #2448]	; 0x990
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2204      	movs	r2, #4
 80078ca:	f883 2991 	strb.w	r2, [r3, #2449]	; 0x991
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2278      	movs	r2, #120	; 0x78
 80078d2:	f883 2992 	strb.w	r2, [r3, #2450]	; 0x992
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2244      	movs	r2, #68	; 0x44
 80078da:	f883 2994 	strb.w	r2, [r3, #2452]	; 0x994
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	227d      	movs	r2, #125	; 0x7d
 80078e2:	f883 2995 	strb.w	r2, [r3, #2453]	; 0x995
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2240      	movs	r2, #64	; 0x40
 80078ea:	f883 2996 	strb.w	r2, [r3, #2454]	; 0x996
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2220      	movs	r2, #32
 80078f2:	f883 2998 	strb.w	r2, [r3, #2456]	; 0x998
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2240      	movs	r2, #64	; 0x40
 80078fa:	f883 2999 	strb.w	r2, [r3, #2457]	; 0x999
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2244      	movs	r2, #68	; 0x44
 8007902:	f883 299a 	strb.w	r2, [r3, #2458]	; 0x99a
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	223d      	movs	r2, #61	; 0x3d
 800790a:	f883 299b 	strb.w	r2, [r3, #2459]	; 0x99b
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	227f      	movs	r2, #127	; 0x7f
 8007912:	f883 299e 	strb.w	r2, [r3, #2462]	; 0x99e
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2210      	movs	r2, #16
 800791a:	f883 299f 	strb.w	r2, [r3, #2463]	; 0x99f
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2228      	movs	r2, #40	; 0x28
 8007922:	f883 29a0 	strb.w	r2, [r3, #2464]	; 0x9a0
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2244      	movs	r2, #68	; 0x44
 800792a:	f883 29a1 	strb.w	r2, [r3, #2465]	; 0x9a1
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2241      	movs	r2, #65	; 0x41
 8007932:	f883 29a3 	strb.w	r2, [r3, #2467]	; 0x9a3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	227f      	movs	r2, #127	; 0x7f
 800793a:	f883 29a4 	strb.w	r2, [r3, #2468]	; 0x9a4
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2240      	movs	r2, #64	; 0x40
 8007942:	f883 29a5 	strb.w	r2, [r3, #2469]	; 0x9a5
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	227c      	movs	r2, #124	; 0x7c
 800794a:	f883 29a7 	strb.w	r2, [r3, #2471]	; 0x9a7
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2204      	movs	r2, #4
 8007952:	f883 29a8 	strb.w	r2, [r3, #2472]	; 0x9a8
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2218      	movs	r2, #24
 800795a:	f883 29a9 	strb.w	r2, [r3, #2473]	; 0x9a9
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2204      	movs	r2, #4
 8007962:	f883 29aa 	strb.w	r2, [r3, #2474]	; 0x9aa
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2278      	movs	r2, #120	; 0x78
 800796a:	f883 29ab 	strb.w	r2, [r3, #2475]	; 0x9ab
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	227c      	movs	r2, #124	; 0x7c
 8007972:	f883 29ac 	strb.w	r2, [r3, #2476]	; 0x9ac
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2208      	movs	r2, #8
 800797a:	f883 29ad 	strb.w	r2, [r3, #2477]	; 0x9ad
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2204      	movs	r2, #4
 8007982:	f883 29ae 	strb.w	r2, [r3, #2478]	; 0x9ae
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2204      	movs	r2, #4
 800798a:	f883 29af 	strb.w	r2, [r3, #2479]	; 0x9af
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2278      	movs	r2, #120	; 0x78
 8007992:	f883 29b0 	strb.w	r2, [r3, #2480]	; 0x9b0
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2238      	movs	r2, #56	; 0x38
 800799a:	f883 29b1 	strb.w	r2, [r3, #2481]	; 0x9b1
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2244      	movs	r2, #68	; 0x44
 80079a2:	f883 29b2 	strb.w	r2, [r3, #2482]	; 0x9b2
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2244      	movs	r2, #68	; 0x44
 80079aa:	f883 29b3 	strb.w	r2, [r3, #2483]	; 0x9b3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2244      	movs	r2, #68	; 0x44
 80079b2:	f883 29b4 	strb.w	r2, [r3, #2484]	; 0x9b4
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2238      	movs	r2, #56	; 0x38
 80079ba:	f883 29b5 	strb.w	r2, [r3, #2485]	; 0x9b5
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	227c      	movs	r2, #124	; 0x7c
 80079c2:	f883 29b6 	strb.w	r2, [r3, #2486]	; 0x9b6
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2214      	movs	r2, #20
 80079ca:	f883 29b7 	strb.w	r2, [r3, #2487]	; 0x9b7
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2214      	movs	r2, #20
 80079d2:	f883 29b8 	strb.w	r2, [r3, #2488]	; 0x9b8
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2214      	movs	r2, #20
 80079da:	f883 29b9 	strb.w	r2, [r3, #2489]	; 0x9b9
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2208      	movs	r2, #8
 80079e2:	f883 29ba 	strb.w	r2, [r3, #2490]	; 0x9ba
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2208      	movs	r2, #8
 80079ea:	f883 29bb 	strb.w	r2, [r3, #2491]	; 0x9bb
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2214      	movs	r2, #20
 80079f2:	f883 29bc 	strb.w	r2, [r3, #2492]	; 0x9bc
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2214      	movs	r2, #20
 80079fa:	f883 29bd 	strb.w	r2, [r3, #2493]	; 0x9bd
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2218      	movs	r2, #24
 8007a02:	f883 29be 	strb.w	r2, [r3, #2494]	; 0x9be
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	227c      	movs	r2, #124	; 0x7c
 8007a0a:	f883 29bf 	strb.w	r2, [r3, #2495]	; 0x9bf
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	227c      	movs	r2, #124	; 0x7c
 8007a12:	f883 29c0 	strb.w	r2, [r3, #2496]	; 0x9c0
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2208      	movs	r2, #8
 8007a1a:	f883 29c1 	strb.w	r2, [r3, #2497]	; 0x9c1
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2204      	movs	r2, #4
 8007a22:	f883 29c2 	strb.w	r2, [r3, #2498]	; 0x9c2
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2204      	movs	r2, #4
 8007a2a:	f883 29c3 	strb.w	r2, [r3, #2499]	; 0x9c3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2208      	movs	r2, #8
 8007a32:	f883 29c4 	strb.w	r2, [r3, #2500]	; 0x9c4
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2248      	movs	r2, #72	; 0x48
 8007a3a:	f883 29c5 	strb.w	r2, [r3, #2501]	; 0x9c5
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2254      	movs	r2, #84	; 0x54
 8007a42:	f883 29c6 	strb.w	r2, [r3, #2502]	; 0x9c6
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2254      	movs	r2, #84	; 0x54
 8007a4a:	f883 29c7 	strb.w	r2, [r3, #2503]	; 0x9c7
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2254      	movs	r2, #84	; 0x54
 8007a52:	f883 29c8 	strb.w	r2, [r3, #2504]	; 0x9c8
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2220      	movs	r2, #32
 8007a5a:	f883 29c9 	strb.w	r2, [r3, #2505]	; 0x9c9
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2204      	movs	r2, #4
 8007a62:	f883 29ca 	strb.w	r2, [r3, #2506]	; 0x9ca
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	223f      	movs	r2, #63	; 0x3f
 8007a6a:	f883 29cb 	strb.w	r2, [r3, #2507]	; 0x9cb
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2244      	movs	r2, #68	; 0x44
 8007a72:	f883 29cc 	strb.w	r2, [r3, #2508]	; 0x9cc
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2240      	movs	r2, #64	; 0x40
 8007a7a:	f883 29cd 	strb.w	r2, [r3, #2509]	; 0x9cd
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2220      	movs	r2, #32
 8007a82:	f883 29ce 	strb.w	r2, [r3, #2510]	; 0x9ce
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	223c      	movs	r2, #60	; 0x3c
 8007a8a:	f883 29cf 	strb.w	r2, [r3, #2511]	; 0x9cf
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2240      	movs	r2, #64	; 0x40
 8007a92:	f883 29d0 	strb.w	r2, [r3, #2512]	; 0x9d0
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2240      	movs	r2, #64	; 0x40
 8007a9a:	f883 29d1 	strb.w	r2, [r3, #2513]	; 0x9d1
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2220      	movs	r2, #32
 8007aa2:	f883 29d2 	strb.w	r2, [r3, #2514]	; 0x9d2
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	227c      	movs	r2, #124	; 0x7c
 8007aaa:	f883 29d3 	strb.w	r2, [r3, #2515]	; 0x9d3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	221c      	movs	r2, #28
 8007ab2:	f883 29d4 	strb.w	r2, [r3, #2516]	; 0x9d4
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2220      	movs	r2, #32
 8007aba:	f883 29d5 	strb.w	r2, [r3, #2517]	; 0x9d5
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2240      	movs	r2, #64	; 0x40
 8007ac2:	f883 29d6 	strb.w	r2, [r3, #2518]	; 0x9d6
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2220      	movs	r2, #32
 8007aca:	f883 29d7 	strb.w	r2, [r3, #2519]	; 0x9d7
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	221c      	movs	r2, #28
 8007ad2:	f883 29d8 	strb.w	r2, [r3, #2520]	; 0x9d8
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	223c      	movs	r2, #60	; 0x3c
 8007ada:	f883 29d9 	strb.w	r2, [r3, #2521]	; 0x9d9
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2240      	movs	r2, #64	; 0x40
 8007ae2:	f883 29da 	strb.w	r2, [r3, #2522]	; 0x9da
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2230      	movs	r2, #48	; 0x30
 8007aea:	f883 29db 	strb.w	r2, [r3, #2523]	; 0x9db
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2240      	movs	r2, #64	; 0x40
 8007af2:	f883 29dc 	strb.w	r2, [r3, #2524]	; 0x9dc
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	223c      	movs	r2, #60	; 0x3c
 8007afa:	f883 29dd 	strb.w	r2, [r3, #2525]	; 0x9dd
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2244      	movs	r2, #68	; 0x44
 8007b02:	f883 29de 	strb.w	r2, [r3, #2526]	; 0x9de
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2228      	movs	r2, #40	; 0x28
 8007b0a:	f883 29df 	strb.w	r2, [r3, #2527]	; 0x9df
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2210      	movs	r2, #16
 8007b12:	f883 29e0 	strb.w	r2, [r3, #2528]	; 0x9e0
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2228      	movs	r2, #40	; 0x28
 8007b1a:	f883 29e1 	strb.w	r2, [r3, #2529]	; 0x9e1
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2244      	movs	r2, #68	; 0x44
 8007b22:	f883 29e2 	strb.w	r2, [r3, #2530]	; 0x9e2
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	220c      	movs	r2, #12
 8007b2a:	f883 29e3 	strb.w	r2, [r3, #2531]	; 0x9e3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2250      	movs	r2, #80	; 0x50
 8007b32:	f883 29e4 	strb.w	r2, [r3, #2532]	; 0x9e4
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2250      	movs	r2, #80	; 0x50
 8007b3a:	f883 29e5 	strb.w	r2, [r3, #2533]	; 0x9e5
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2250      	movs	r2, #80	; 0x50
 8007b42:	f883 29e6 	strb.w	r2, [r3, #2534]	; 0x9e6
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	223c      	movs	r2, #60	; 0x3c
 8007b4a:	f883 29e7 	strb.w	r2, [r3, #2535]	; 0x9e7
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2244      	movs	r2, #68	; 0x44
 8007b52:	f883 29e8 	strb.w	r2, [r3, #2536]	; 0x9e8
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2264      	movs	r2, #100	; 0x64
 8007b5a:	f883 29e9 	strb.w	r2, [r3, #2537]	; 0x9e9
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2254      	movs	r2, #84	; 0x54
 8007b62:	f883 29ea 	strb.w	r2, [r3, #2538]	; 0x9ea
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	224c      	movs	r2, #76	; 0x4c
 8007b6a:	f883 29eb 	strb.w	r2, [r3, #2539]	; 0x9eb
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2244      	movs	r2, #68	; 0x44
 8007b72:	f883 29ec 	strb.w	r2, [r3, #2540]	; 0x9ec
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2208      	movs	r2, #8
 8007b7a:	f883 29ee 	strb.w	r2, [r3, #2542]	; 0x9ee
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2236      	movs	r2, #54	; 0x36
 8007b82:	f883 29ef 	strb.w	r2, [r3, #2543]	; 0x9ef
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2241      	movs	r2, #65	; 0x41
 8007b8a:	f883 29f0 	strb.w	r2, [r3, #2544]	; 0x9f0
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	227f      	movs	r2, #127	; 0x7f
 8007b92:	f883 29f4 	strb.w	r2, [r3, #2548]	; 0x9f4
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2241      	movs	r2, #65	; 0x41
 8007b9a:	f883 29f8 	strb.w	r2, [r3, #2552]	; 0x9f8
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2236      	movs	r2, #54	; 0x36
 8007ba2:	f883 29f9 	strb.w	r2, [r3, #2553]	; 0x9f9
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2208      	movs	r2, #8
 8007baa:	f883 29fa 	strb.w	r2, [r3, #2554]	; 0x9fa
	// TODO Auto-generated constructor stub

}
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bdb0      	pop	{r4, r5, r7, pc}

08007bb8 <_ZN4GLCDD1Ev>:

GLCD::~GLCD() {
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	4a05      	ldr	r2, [pc, #20]	; (8007bd8 <_ZN4GLCDD1Ev+0x20>)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	601a      	str	r2, [r3, #0]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7fb fe4b 	bl	8003864 <_ZN6commonD1Ev>
	// TODO Auto-generated destructor stub
}
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	080104b8 	.word	0x080104b8

08007bdc <_ZN4GLCDD0Ev>:
GLCD::~GLCD() {
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
}
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f7ff ffe7 	bl	8007bb8 <_ZN4GLCDD1Ev>
 8007bea:	f640 2104 	movw	r1, #2564	; 0xa04
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f007 fd75 	bl	800f6de <_ZdlPvj>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3708      	adds	r7, #8
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
	...

08007c00 <_ZN4GLCD9m_ctrloffEv>:

void GLCD::m_ctrloff(){
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8007c08:	2200      	movs	r2, #0
 8007c0a:	2110      	movs	r1, #16
 8007c0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c10:	f003 faf4 	bl	800b1fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8007c14:	2200      	movs	r2, #0
 8007c16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007c1a:	480c      	ldr	r0, [pc, #48]	; (8007c4c <_ZN4GLCD9m_ctrloffEv+0x4c>)
 8007c1c:	f003 faee 	bl	800b1fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8007c20:	2200      	movs	r2, #0
 8007c22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c26:	4809      	ldr	r0, [pc, #36]	; (8007c4c <_ZN4GLCD9m_ctrloffEv+0x4c>)
 8007c28:	f003 fae8 	bl	800b1fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	2104      	movs	r1, #4
 8007c30:	4807      	ldr	r0, [pc, #28]	; (8007c50 <_ZN4GLCD9m_ctrloffEv+0x50>)
 8007c32:	f003 fae3 	bl	800b1fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_RESET);
 8007c36:	2200      	movs	r2, #0
 8007c38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c3c:	4803      	ldr	r0, [pc, #12]	; (8007c4c <_ZN4GLCD9m_ctrloffEv+0x4c>)
 8007c3e:	f003 fadd 	bl	800b1fc <HAL_GPIO_WritePin>
}
 8007c42:	bf00      	nop
 8007c44:	3708      	adds	r7, #8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	48000800 	.word	0x48000800
 8007c50:	48000c00 	.word	0x48000c00

08007c54 <_ZN4GLCD7m_delayEjh>:
	__HAL_TIM_SET_COUNTER(&htim1, 0);  // reset the counter
	while ((__HAL_TIM_GET_COUNTER(&htim1))<delay);  // wait for the delay to complete
}

void GLCD::m_delay(unsigned int j,uint8_t a)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b087      	sub	sp, #28
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	71fb      	strb	r3, [r7, #7]
	unsigned int i,k;
	for(i=0;i<j;i++)
 8007c62:	2300      	movs	r3, #0
 8007c64:	617b      	str	r3, [r7, #20]
 8007c66:	697a      	ldr	r2, [r7, #20]
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d20d      	bcs.n	8007c8a <_ZN4GLCD7m_delayEjh+0x36>
 	{for(k=0;k<a;k++);
 8007c6e:	2300      	movs	r3, #0
 8007c70:	613b      	str	r3, [r7, #16]
 8007c72:	79fb      	ldrb	r3, [r7, #7]
 8007c74:	693a      	ldr	r2, [r7, #16]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d203      	bcs.n	8007c82 <_ZN4GLCD7m_delayEjh+0x2e>
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	613b      	str	r3, [r7, #16]
 8007c80:	e7f7      	b.n	8007c72 <_ZN4GLCD7m_delayEjh+0x1e>
	for(i=0;i<j;i++)
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	3301      	adds	r3, #1
 8007c86:	617b      	str	r3, [r7, #20]
 8007c88:	e7ed      	b.n	8007c66 <_ZN4GLCD7m_delayEjh+0x12>
	}
}
 8007c8a:	bf00      	nop
 8007c8c:	371c      	adds	r7, #28
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
	...

08007c98 <_ZN4GLCD16m_IOWritethedataEh>:

void GLCD::m_IOWritethedata(const uint8_t finput)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOC,LCDD0_Pin,ReadtheValueAssignPinstate(0,finput));
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	78fa      	ldrb	r2, [r7, #3]
 8007ca8:	2100      	movs	r1, #0
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fb ffe8 	bl	8003c80 <_ZN6common26ReadtheValueAssignPinstateEhh>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	2108      	movs	r1, #8
 8007cb6:	482f      	ldr	r0, [pc, #188]	; (8007d74 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8007cb8:	f003 faa0 	bl	800b1fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD1_Pin,ReadtheValueAssignPinstate(1,finput));
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	78fa      	ldrb	r2, [r7, #3]
 8007cc0:	2101      	movs	r1, #1
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f7fb ffdc 	bl	8003c80 <_ZN6common26ReadtheValueAssignPinstateEhh>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	461a      	mov	r2, r3
 8007ccc:	2104      	movs	r1, #4
 8007cce:	4829      	ldr	r0, [pc, #164]	; (8007d74 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8007cd0:	f003 fa94 	bl	800b1fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD2_Pin,ReadtheValueAssignPinstate(2,finput));
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	78fa      	ldrb	r2, [r7, #3]
 8007cd8:	2102      	movs	r1, #2
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7fb ffd0 	bl	8003c80 <_ZN6common26ReadtheValueAssignPinstateEhh>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	2102      	movs	r1, #2
 8007ce6:	4823      	ldr	r0, [pc, #140]	; (8007d74 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8007ce8:	f003 fa88 	bl	800b1fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD3_Pin,ReadtheValueAssignPinstate(3,finput));
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	78fa      	ldrb	r2, [r7, #3]
 8007cf0:	2103      	movs	r1, #3
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fb ffc4 	bl	8003c80 <_ZN6common26ReadtheValueAssignPinstateEhh>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	2101      	movs	r1, #1
 8007cfe:	481d      	ldr	r0, [pc, #116]	; (8007d74 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8007d00:	f003 fa7c 	bl	800b1fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD4_Pin,ReadtheValueAssignPinstate(4,finput));
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	78fa      	ldrb	r2, [r7, #3]
 8007d08:	2104      	movs	r1, #4
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7fb ffb8 	bl	8003c80 <_ZN6common26ReadtheValueAssignPinstateEhh>
 8007d10:	4603      	mov	r3, r0
 8007d12:	461a      	mov	r2, r3
 8007d14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007d18:	4816      	ldr	r0, [pc, #88]	; (8007d74 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8007d1a:	f003 fa6f 	bl	800b1fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD5_Pin,ReadtheValueAssignPinstate(5,finput));
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	78fa      	ldrb	r2, [r7, #3]
 8007d22:	2105      	movs	r1, #5
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7fb ffab 	bl	8003c80 <_ZN6common26ReadtheValueAssignPinstateEhh>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007d32:	4810      	ldr	r0, [pc, #64]	; (8007d74 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8007d34:	f003 fa62 	bl	800b1fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD6_Pin,ReadtheValueAssignPinstate(6,finput));
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	78fa      	ldrb	r2, [r7, #3]
 8007d3c:	2106      	movs	r1, #6
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7fb ff9e 	bl	8003c80 <_ZN6common26ReadtheValueAssignPinstateEhh>
 8007d44:	4603      	mov	r3, r0
 8007d46:	461a      	mov	r2, r3
 8007d48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007d4c:	4809      	ldr	r0, [pc, #36]	; (8007d74 <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8007d4e:	f003 fa55 	bl	800b1fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,LCDD7_Pin, ReadtheValueAssignPinstate(7,finput));
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	78fa      	ldrb	r2, [r7, #3]
 8007d56:	2107      	movs	r1, #7
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7fb ff91 	bl	8003c80 <_ZN6common26ReadtheValueAssignPinstateEhh>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	461a      	mov	r2, r3
 8007d62:	2120      	movs	r1, #32
 8007d64:	4804      	ldr	r0, [pc, #16]	; (8007d78 <_ZN4GLCD16m_IOWritethedataEh+0xe0>)
 8007d66:	f003 fa49 	bl	800b1fc <HAL_GPIO_WritePin>
}
 8007d6a:	bf00      	nop
 8007d6c:	3708      	adds	r7, #8
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	48000800 	.word	0x48000800
 8007d78:	48000400 	.word	0x48000400

08007d7c <_ZN4GLCD11m_displayonEv>:

void GLCD::m_displayon(){
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
	m_ctrloff();
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f7ff ff3b 	bl	8007c00 <_ZN4GLCD9m_ctrloffEv>
	m_IOWritethedata(0x3f);
 8007d8a:	213f      	movs	r1, #63	; 0x3f
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f7ff ff83 	bl	8007c98 <_ZN4GLCD16m_IOWritethedataEh>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 8007d92:	2201      	movs	r2, #1
 8007d94:	2104      	movs	r1, #4
 8007d96:	4815      	ldr	r0, [pc, #84]	; (8007dec <_ZN4GLCD11m_displayonEv+0x70>)
 8007d98:	f003 fa30 	bl	800b1fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007da2:	4813      	ldr	r0, [pc, #76]	; (8007df0 <_ZN4GLCD11m_displayonEv+0x74>)
 8007da4:	f003 fa2a 	bl	800b1fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8007da8:	2200      	movs	r2, #0
 8007daa:	2110      	movs	r1, #16
 8007dac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007db0:	f003 fa24 	bl	800b1fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8007db4:	2200      	movs	r2, #0
 8007db6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007dba:	480d      	ldr	r0, [pc, #52]	; (8007df0 <_ZN4GLCD11m_displayonEv+0x74>)
 8007dbc:	f003 fa1e 	bl	800b1fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007dc6:	480a      	ldr	r0, [pc, #40]	; (8007df0 <_ZN4GLCD11m_displayonEv+0x74>)
 8007dc8:	f003 fa18 	bl	800b1fc <HAL_GPIO_WritePin>
	//m_delay(GLCDDELAY);
	m_delay(10,100);
 8007dcc:	2264      	movs	r2, #100	; 0x64
 8007dce:	210a      	movs	r1, #10
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7ff ff3f 	bl	8007c54 <_ZN4GLCD7m_delayEjh>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007ddc:	4804      	ldr	r0, [pc, #16]	; (8007df0 <_ZN4GLCD11m_displayonEv+0x74>)
 8007dde:	f003 fa0d 	bl	800b1fc <HAL_GPIO_WritePin>
}
 8007de2:	bf00      	nop
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	48000c00 	.word	0x48000c00
 8007df0:	48000800 	.word	0x48000800

08007df4 <_ZN4GLCD11m_setcolumnEh>:
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
}


void GLCD::m_setcolumn(uint8_t Columvalue)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	70fb      	strb	r3, [r7, #3]
	uint8_t dport;
	if(Columvalue <64)
 8007e00:	78fb      	ldrb	r3, [r7, #3]
 8007e02:	2b3f      	cmp	r3, #63	; 0x3f
 8007e04:	d839      	bhi.n	8007e7a <_ZN4GLCD11m_setcolumnEh+0x86>
	{
		m_ctrloff();
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f7ff fefa 	bl	8007c00 <_ZN4GLCD9m_ctrloffEv>
		c=Columvalue;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	78fa      	ldrb	r2, [r7, #3]
 8007e10:	771a      	strb	r2, [r3, #28]
		m_IOWritethedata((0x40|(Columvalue&63)));
 8007e12:	78fb      	ldrb	r3, [r7, #3]
 8007e14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	4619      	mov	r1, r3
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f7ff ff38 	bl	8007c98 <_ZN4GLCD16m_IOWritethedataEh>
		HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 8007e28:	2201      	movs	r2, #1
 8007e2a:	2104      	movs	r1, #4
 8007e2c:	4831      	ldr	r0, [pc, #196]	; (8007ef4 <_ZN4GLCD11m_setcolumnEh+0x100>)
 8007e2e:	f003 f9e5 	bl	800b1fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_RESET);
 8007e32:	2200      	movs	r2, #0
 8007e34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007e38:	482f      	ldr	r0, [pc, #188]	; (8007ef8 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8007e3a:	f003 f9df 	bl	800b1fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8007e3e:	2200      	movs	r2, #0
 8007e40:	2110      	movs	r1, #16
 8007e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007e46:	f003 f9d9 	bl	800b1fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007e50:	4829      	ldr	r0, [pc, #164]	; (8007ef8 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8007e52:	f003 f9d3 	bl	800b1fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8007e56:	2201      	movs	r2, #1
 8007e58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007e5c:	4826      	ldr	r0, [pc, #152]	; (8007ef8 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8007e5e:	f003 f9cd 	bl	800b1fc <HAL_GPIO_WritePin>
		//m_delay(GLCDDELAY);
		m_delay(10,100);
 8007e62:	2264      	movs	r2, #100	; 0x64
 8007e64:	210a      	movs	r1, #10
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f7ff fef4 	bl	8007c54 <_ZN4GLCD7m_delayEjh>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007e72:	4821      	ldr	r0, [pc, #132]	; (8007ef8 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8007e74:	f003 f9c2 	bl	800b1fc <HAL_GPIO_WritePin>
		//m_delay(GLCDDELAY);
		m_delay(10,100);
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);

	}
}
 8007e78:	e038      	b.n	8007eec <_ZN4GLCD11m_setcolumnEh+0xf8>
		c=Columvalue;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	78fa      	ldrb	r2, [r7, #3]
 8007e7e:	771a      	strb	r2, [r3, #28]
		dport=0x40|((Columvalue-64)&63);	  //0x40 represents Column 0
 8007e80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e88:	b25b      	sxtb	r3, r3
 8007e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e8e:	b25b      	sxtb	r3, r3
 8007e90:	73fb      	strb	r3, [r7, #15]
		m_IOWritethedata(dport);
 8007e92:	7bfb      	ldrb	r3, [r7, #15]
 8007e94:	4619      	mov	r1, r3
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f7ff fefe 	bl	8007c98 <_ZN4GLCD16m_IOWritethedataEh>
		HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	2104      	movs	r1, #4
 8007ea0:	4814      	ldr	r0, [pc, #80]	; (8007ef4 <_ZN4GLCD11m_setcolumnEh+0x100>)
 8007ea2:	f003 f9ab 	bl	800b1fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007eac:	4812      	ldr	r0, [pc, #72]	; (8007ef8 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8007eae:	f003 f9a5 	bl	800b1fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	2110      	movs	r1, #16
 8007eb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007eba:	f003 f99f 	bl	800b1fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007ec4:	480c      	ldr	r0, [pc, #48]	; (8007ef8 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8007ec6:	f003 f999 	bl	800b1fc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007ed0:	4809      	ldr	r0, [pc, #36]	; (8007ef8 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8007ed2:	f003 f993 	bl	800b1fc <HAL_GPIO_WritePin>
		m_delay(10,100);
 8007ed6:	2264      	movs	r2, #100	; 0x64
 8007ed8:	210a      	movs	r1, #10
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f7ff feba 	bl	8007c54 <_ZN4GLCD7m_delayEjh>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007ee6:	4804      	ldr	r0, [pc, #16]	; (8007ef8 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8007ee8:	f003 f988 	bl	800b1fc <HAL_GPIO_WritePin>
}
 8007eec:	bf00      	nop
 8007eee:	3710      	adds	r7, #16
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	48000c00 	.word	0x48000c00
 8007ef8:	48000800 	.word	0x48000800

08007efc <_ZN4GLCD9m_setpageEh>:

void GLCD::m_setpage(uint8_t x)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	460b      	mov	r3, r1
 8007f06:	70fb      	strb	r3, [r7, #3]
	uint8_t dport;
	m_ctrloff();
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f7ff fe79 	bl	8007c00 <_ZN4GLCD9m_ctrloffEv>
	dport= 0xb8|x;	   //0xb8 represents Page 0
 8007f0e:	78fb      	ldrb	r3, [r7, #3]
 8007f10:	f063 0347 	orn	r3, r3, #71	; 0x47
 8007f14:	73fb      	strb	r3, [r7, #15]
	m_IOWritethedata(dport);
 8007f16:	7bfb      	ldrb	r3, [r7, #15]
 8007f18:	4619      	mov	r1, r3
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7ff febc 	bl	8007c98 <_ZN4GLCD16m_IOWritethedataEh>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 8007f20:	2201      	movs	r2, #1
 8007f22:	2104      	movs	r1, #4
 8007f24:	4814      	ldr	r0, [pc, #80]	; (8007f78 <_ZN4GLCD9m_setpageEh+0x7c>)
 8007f26:	f003 f969 	bl	800b1fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007f30:	4812      	ldr	r0, [pc, #72]	; (8007f7c <_ZN4GLCD9m_setpageEh+0x80>)
 8007f32:	f003 f963 	bl	800b1fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8007f36:	2200      	movs	r2, #0
 8007f38:	2110      	movs	r1, #16
 8007f3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007f3e:	f003 f95d 	bl	800b1fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8007f42:	2200      	movs	r2, #0
 8007f44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007f48:	480c      	ldr	r0, [pc, #48]	; (8007f7c <_ZN4GLCD9m_setpageEh+0x80>)
 8007f4a:	f003 f957 	bl	800b1fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007f54:	4809      	ldr	r0, [pc, #36]	; (8007f7c <_ZN4GLCD9m_setpageEh+0x80>)
 8007f56:	f003 f951 	bl	800b1fc <HAL_GPIO_WritePin>
	//m_delay(GLCDDELAY);
	m_delay(10,100);
 8007f5a:	2264      	movs	r2, #100	; 0x64
 8007f5c:	210a      	movs	r1, #10
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f7ff fe78 	bl	8007c54 <_ZN4GLCD7m_delayEjh>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8007f64:	2200      	movs	r2, #0
 8007f66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007f6a:	4804      	ldr	r0, [pc, #16]	; (8007f7c <_ZN4GLCD9m_setpageEh+0x80>)
 8007f6c:	f003 f946 	bl	800b1fc <HAL_GPIO_WritePin>
}
 8007f70:	bf00      	nop
 8007f72:	3710      	adds	r7, #16
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	48000c00 	.word	0x48000c00
 8007f7c:	48000800 	.word	0x48000800

08007f80 <_ZN4GLCD14m_setstartlineEh>:

void GLCD::m_setstartline(uint8_t z)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	70fb      	strb	r3, [r7, #3]
	uint8_t dport;
	m_ctrloff();
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f7ff fe37 	bl	8007c00 <_ZN4GLCD9m_ctrloffEv>
	dport=0xc0|z;	   //0xc0 represents Line 0
 8007f92:	78fb      	ldrb	r3, [r7, #3]
 8007f94:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8007f98:	73fb      	strb	r3, [r7, #15]
	m_IOWritethedata(dport);
 8007f9a:	7bfb      	ldrb	r3, [r7, #15]
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f7ff fe7a 	bl	8007c98 <_ZN4GLCD16m_IOWritethedataEh>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	2104      	movs	r1, #4
 8007fa8:	4814      	ldr	r0, [pc, #80]	; (8007ffc <_ZN4GLCD14m_setstartlineEh+0x7c>)
 8007faa:	f003 f927 	bl	800b1fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007fb4:	4812      	ldr	r0, [pc, #72]	; (8008000 <_ZN4GLCD14m_setstartlineEh+0x80>)
 8007fb6:	f003 f921 	bl	800b1fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8007fba:	2200      	movs	r2, #0
 8007fbc:	2110      	movs	r1, #16
 8007fbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007fc2:	f003 f91b 	bl	800b1fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007fcc:	480c      	ldr	r0, [pc, #48]	; (8008000 <_ZN4GLCD14m_setstartlineEh+0x80>)
 8007fce:	f003 f915 	bl	800b1fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007fd8:	4809      	ldr	r0, [pc, #36]	; (8008000 <_ZN4GLCD14m_setstartlineEh+0x80>)
 8007fda:	f003 f90f 	bl	800b1fc <HAL_GPIO_WritePin>
	//m_delay(GLCDDELAY);
	m_delay(10,100);
 8007fde:	2264      	movs	r2, #100	; 0x64
 8007fe0:	210a      	movs	r1, #10
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f7ff fe36 	bl	8007c54 <_ZN4GLCD7m_delayEjh>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007fee:	4804      	ldr	r0, [pc, #16]	; (8008000 <_ZN4GLCD14m_setstartlineEh+0x80>)
 8007ff0:	f003 f904 	bl	800b1fc <HAL_GPIO_WritePin>
}
 8007ff4:	bf00      	nop
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	48000c00 	.word	0x48000c00
 8008000:	48000800 	.word	0x48000800

08008004 <_ZN4GLCD9m_lcddataEPht>:

void GLCD::m_lcddata(uint8_t *value,uint16_t limit)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b086      	sub	sp, #24
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	4613      	mov	r3, r2
 8008010:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t dport;
	for(i=0;i<limit;i++)
 8008012:	2300      	movs	r3, #0
 8008014:	82fb      	strh	r3, [r7, #22]
 8008016:	8afa      	ldrh	r2, [r7, #22]
 8008018:	88fb      	ldrh	r3, [r7, #6]
 800801a:	429a      	cmp	r2, r3
 800801c:	f080 8085 	bcs.w	800812a <_ZN4GLCD9m_lcddataEPht+0x126>
	{
		if(c<64)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	7f1b      	ldrb	r3, [r3, #28]
 8008024:	2b3f      	cmp	r3, #63	; 0x3f
 8008026:	d838      	bhi.n	800809a <_ZN4GLCD9m_lcddataEPht+0x96>
		{
			dport=value[i];
 8008028:	8afb      	ldrh	r3, [r7, #22]
 800802a:	68ba      	ldr	r2, [r7, #8]
 800802c:	4413      	add	r3, r2
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	757b      	strb	r3, [r7, #21]
			m_IOWritethedata(dport);
 8008032:	7d7b      	ldrb	r3, [r7, #21]
 8008034:	4619      	mov	r1, r3
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f7ff fe2e 	bl	8007c98 <_ZN4GLCD16m_IOWritethedataEh>
			HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 800803c:	2201      	movs	r2, #1
 800803e:	2104      	movs	r1, #4
 8008040:	483b      	ldr	r0, [pc, #236]	; (8008130 <_ZN4GLCD9m_lcddataEPht+0x12c>)
 8008042:	f003 f8db 	bl	800b1fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_RESET);
 8008046:	2200      	movs	r2, #0
 8008048:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800804c:	4839      	ldr	r0, [pc, #228]	; (8008134 <_ZN4GLCD9m_lcddataEPht+0x130>)
 800804e:	f003 f8d5 	bl	800b1fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_SET);
 8008052:	2201      	movs	r2, #1
 8008054:	2110      	movs	r1, #16
 8008056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800805a:	f003 f8cf 	bl	800b1fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 800805e:	2200      	movs	r2, #0
 8008060:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008064:	4833      	ldr	r0, [pc, #204]	; (8008134 <_ZN4GLCD9m_lcddataEPht+0x130>)
 8008066:	f003 f8c9 	bl	800b1fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 800806a:	2201      	movs	r2, #1
 800806c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008070:	4830      	ldr	r0, [pc, #192]	; (8008134 <_ZN4GLCD9m_lcddataEPht+0x130>)
 8008072:	f003 f8c3 	bl	800b1fc <HAL_GPIO_WritePin>
			//m_delay(GLCDDELAY);
			m_delay(10,100);
 8008076:	2264      	movs	r2, #100	; 0x64
 8008078:	210a      	movs	r1, #10
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f7ff fdea 	bl	8007c54 <_ZN4GLCD7m_delayEjh>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8008080:	2200      	movs	r2, #0
 8008082:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008086:	482b      	ldr	r0, [pc, #172]	; (8008134 <_ZN4GLCD9m_lcddataEPht+0x130>)
 8008088:	f003 f8b8 	bl	800b1fc <HAL_GPIO_WritePin>
			c++;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	7f1b      	ldrb	r3, [r3, #28]
 8008090:	3301      	adds	r3, #1
 8008092:	b2da      	uxtb	r2, r3
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	771a      	strb	r2, [r3, #28]
 8008098:	e03d      	b.n	8008116 <_ZN4GLCD9m_lcddataEPht+0x112>
		}
		else
		{
			m_setcolumn(c);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	7f1b      	ldrb	r3, [r3, #28]
 800809e:	4619      	mov	r1, r3
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f7ff fea7 	bl	8007df4 <_ZN4GLCD11m_setcolumnEh>
			dport=value[i];
 80080a6:	8afb      	ldrh	r3, [r7, #22]
 80080a8:	68ba      	ldr	r2, [r7, #8]
 80080aa:	4413      	add	r3, r2
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	757b      	strb	r3, [r7, #21]
			m_IOWritethedata(dport);
 80080b0:	7d7b      	ldrb	r3, [r7, #21]
 80080b2:	4619      	mov	r1, r3
 80080b4:	68f8      	ldr	r0, [r7, #12]
 80080b6:	f7ff fdef 	bl	8007c98 <_ZN4GLCD16m_IOWritethedataEh>
			HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 80080ba:	2200      	movs	r2, #0
 80080bc:	2104      	movs	r1, #4
 80080be:	481c      	ldr	r0, [pc, #112]	; (8008130 <_ZN4GLCD9m_lcddataEPht+0x12c>)
 80080c0:	f003 f89c 	bl	800b1fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 80080c4:	2201      	movs	r2, #1
 80080c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80080ca:	481a      	ldr	r0, [pc, #104]	; (8008134 <_ZN4GLCD9m_lcddataEPht+0x130>)
 80080cc:	f003 f896 	bl	800b1fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_SET);
 80080d0:	2201      	movs	r2, #1
 80080d2:	2110      	movs	r1, #16
 80080d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80080d8:	f003 f890 	bl	800b1fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 80080dc:	2200      	movs	r2, #0
 80080de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80080e2:	4814      	ldr	r0, [pc, #80]	; (8008134 <_ZN4GLCD9m_lcddataEPht+0x130>)
 80080e4:	f003 f88a 	bl	800b1fc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 80080e8:	2201      	movs	r2, #1
 80080ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80080ee:	4811      	ldr	r0, [pc, #68]	; (8008134 <_ZN4GLCD9m_lcddataEPht+0x130>)
 80080f0:	f003 f884 	bl	800b1fc <HAL_GPIO_WritePin>
			//m_delay(GLCDDELAY);
			m_delay(10,100);
 80080f4:	2264      	movs	r2, #100	; 0x64
 80080f6:	210a      	movs	r1, #10
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f7ff fdab 	bl	8007c54 <_ZN4GLCD7m_delayEjh>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 80080fe:	2200      	movs	r2, #0
 8008100:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008104:	480b      	ldr	r0, [pc, #44]	; (8008134 <_ZN4GLCD9m_lcddataEPht+0x130>)
 8008106:	f003 f879 	bl	800b1fc <HAL_GPIO_WritePin>
			c++;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	7f1b      	ldrb	r3, [r3, #28]
 800810e:	3301      	adds	r3, #1
 8008110:	b2da      	uxtb	r2, r3
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	771a      	strb	r2, [r3, #28]
		}
		if(c>127)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	7f1b      	ldrb	r3, [r3, #28]
 800811a:	b25b      	sxtb	r3, r3
 800811c:	2b00      	cmp	r3, #0
 800811e:	db03      	blt.n	8008128 <_ZN4GLCD9m_lcddataEPht+0x124>
	for(i=0;i<limit;i++)
 8008120:	8afb      	ldrh	r3, [r7, #22]
 8008122:	3301      	adds	r3, #1
 8008124:	82fb      	strh	r3, [r7, #22]
 8008126:	e776      	b.n	8008016 <_ZN4GLCD9m_lcddataEPht+0x12>
	           return;
 8008128:	bf00      	nop
	}
}
 800812a:	3718      	adds	r7, #24
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	48000c00 	.word	0x48000c00
 8008134:	48000800 	.word	0x48000800

08008138 <_ZN4GLCD10m_lcdputs1EhhPh>:

void GLCD::m_lcdputs1(uint8_t y,uint8_t x,unsigned char *str)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	607b      	str	r3, [r7, #4]
 8008142:	460b      	mov	r3, r1
 8008144:	72fb      	strb	r3, [r7, #11]
 8008146:	4613      	mov	r3, r2
 8008148:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	uint16_t a;
	m_setcolumn(y);
 800814a:	7afb      	ldrb	r3, [r7, #11]
 800814c:	4619      	mov	r1, r3
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f7ff fe50 	bl	8007df4 <_ZN4GLCD11m_setcolumnEh>
	m_setpage(x);
 8008154:	7abb      	ldrb	r3, [r7, #10]
 8008156:	4619      	mov	r1, r3
 8008158:	68f8      	ldr	r0, [r7, #12]
 800815a:	f7ff fecf 	bl	8007efc <_ZN4GLCD9m_setpageEh>
	for(i=0;str[i]!=0;i++)
 800815e:	2300      	movs	r3, #0
 8008160:	75fb      	strb	r3, [r7, #23]
 8008162:	7dfb      	ldrb	r3, [r7, #23]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	4413      	add	r3, r2
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d015      	beq.n	800819a <_ZN4GLCD10m_lcdputs1EhhPh+0x62>
	{
		a=(*(str+i));
 800816e:	7dfb      	ldrb	r3, [r7, #23]
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	4413      	add	r3, r2
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	82bb      	strh	r3, [r7, #20]
		a*=8;
 8008178:	8abb      	ldrh	r3, [r7, #20]
 800817a:	00db      	lsls	r3, r3, #3
 800817c:	82bb      	strh	r3, [r7, #20]
		m_lcddata(&Character8x8[a],8);
 800817e:	8abb      	ldrh	r3, [r7, #20]
 8008180:	3318      	adds	r3, #24
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	4413      	add	r3, r2
 8008186:	3306      	adds	r3, #6
 8008188:	2208      	movs	r2, #8
 800818a:	4619      	mov	r1, r3
 800818c:	68f8      	ldr	r0, [r7, #12]
 800818e:	f7ff ff39 	bl	8008004 <_ZN4GLCD9m_lcddataEPht>
	for(i=0;str[i]!=0;i++)
 8008192:	7dfb      	ldrb	r3, [r7, #23]
 8008194:	3301      	adds	r3, #1
 8008196:	75fb      	strb	r3, [r7, #23]
 8008198:	e7e3      	b.n	8008162 <_ZN4GLCD10m_lcdputs1EhhPh+0x2a>
	}
}
 800819a:	bf00      	nop
 800819c:	3718      	adds	r7, #24
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <_ZN4GLCD8m_clrlcdEv>:
		m_lcddata(&font5x7[a],5);
	}
}

void GLCD::m_clrlcd(void)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b084      	sub	sp, #16
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
    uint8_t i,j;
    for (i=0;i < 8;i++)
 80081aa:	2300      	movs	r3, #0
 80081ac:	73fb      	strb	r3, [r7, #15]
 80081ae:	7bfb      	ldrb	r3, [r7, #15]
 80081b0:	2b07      	cmp	r3, #7
 80081b2:	d81d      	bhi.n	80081f0 <_ZN4GLCD8m_clrlcdEv+0x4e>
    {
    m_setpage(i);
 80081b4:	7bfb      	ldrb	r3, [r7, #15]
 80081b6:	4619      	mov	r1, r3
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f7ff fe9f 	bl	8007efc <_ZN4GLCD9m_setpageEh>
    m_setcolumn(0);
 80081be:	2100      	movs	r1, #0
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f7ff fe17 	bl	8007df4 <_ZN4GLCD11m_setcolumnEh>
        for (j= 0 ;j < 128; j++)
 80081c6:	2300      	movs	r3, #0
 80081c8:	73bb      	strb	r3, [r7, #14]
 80081ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	db0a      	blt.n	80081e8 <_ZN4GLCD8m_clrlcdEv+0x46>
        	m_lcddata(&z,1);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	331d      	adds	r3, #29
 80081d6:	2201      	movs	r2, #1
 80081d8:	4619      	mov	r1, r3
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f7ff ff12 	bl	8008004 <_ZN4GLCD9m_lcddataEPht>
        for (j= 0 ;j < 128; j++)
 80081e0:	7bbb      	ldrb	r3, [r7, #14]
 80081e2:	3301      	adds	r3, #1
 80081e4:	73bb      	strb	r3, [r7, #14]
 80081e6:	e7f0      	b.n	80081ca <_ZN4GLCD8m_clrlcdEv+0x28>
    for (i=0;i < 8;i++)
 80081e8:	7bfb      	ldrb	r3, [r7, #15]
 80081ea:	3301      	adds	r3, #1
 80081ec:	73fb      	strb	r3, [r7, #15]
 80081ee:	e7de      	b.n	80081ae <_ZN4GLCD8m_clrlcdEv+0xc>
    }
}
 80081f0:	bf00      	nop
 80081f2:	3710      	adds	r7, #16
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <_ZN10W5500ClassC1Ev>:
// SPI details
//SPISettings wiznet_SPI_settings(8000000, MSBFIRST, SPI_MODE0);
uint8_t SPI_CS;


W5500Class::W5500Class() {
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	4a04      	ldr	r2, [pc, #16]	; (8008214 <_ZN10W5500ClassC1Ev+0x1c>)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4618      	mov	r0, r3
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr
 8008214:	080104c8 	.word	0x080104c8

08008218 <_ZN10W5500ClassD1Ev>:

W5500Class::~W5500Class() {
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	4a04      	ldr	r2, [pc, #16]	; (8008234 <_ZN10W5500ClassD1Ev+0x1c>)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	4618      	mov	r0, r3
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr
 8008234:	080104c8 	.word	0x080104c8

08008238 <_ZN10W5500ClassD0Ev>:
W5500Class::~W5500Class() {
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
}
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f7ff ffe9 	bl	8008218 <_ZN10W5500ClassD1Ev>
 8008246:	2104      	movs	r1, #4
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f007 fa48 	bl	800f6de <_ZdlPvj>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4618      	mov	r0, r3
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <_Z41__static_initialization_and_destruction_0ii>:
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d107      	bne.n	8008278 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800826e:	4293      	cmp	r3, r2
 8008270:	d102      	bne.n	8008278 <_Z41__static_initialization_and_destruction_0ii+0x20>
W5500Class w5500;
 8008272:	4809      	ldr	r0, [pc, #36]	; (8008298 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008274:	f7ff ffc0 	bl	80081f8 <_ZN10W5500ClassC1Ev>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d107      	bne.n	800828e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008284:	4293      	cmp	r3, r2
 8008286:	d102      	bne.n	800828e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8008288:	4803      	ldr	r0, [pc, #12]	; (8008298 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800828a:	f7ff ffc5 	bl	8008218 <_ZN10W5500ClassD1Ev>
}
 800828e:	bf00      	nop
 8008290:	3708      	adds	r7, #8
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	20000618 	.word	0x20000618

0800829c <_GLOBAL__sub_I_w5500>:
 800829c:	b580      	push	{r7, lr}
 800829e:	af00      	add	r7, sp, #0
 80082a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80082a4:	2001      	movs	r0, #1
 80082a6:	f7ff ffd7 	bl	8008258 <_Z41__static_initialization_and_destruction_0ii>
 80082aa:	bd80      	pop	{r7, pc}

080082ac <_GLOBAL__sub_D_w5500>:
 80082ac:	b580      	push	{r7, lr}
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80082b4:	2000      	movs	r0, #0
 80082b6:	f7ff ffcf 	bl	8008258 <_Z41__static_initialization_and_destruction_0ii>
 80082ba:	bd80      	pop	{r7, pc}

080082bc <_ZN13HeattreatmentC1Ev>:
uint8_t H_Timer01HrValue,H_Timer01MinValue,H_Timer02HrValue,H_Timer02MinValue;
uint16_t ProcessTotalMin1,ProcessTotalMin2;
uint16_t Rise_Sequence1_temp,Rise_Sequence2_temp;
uint8_t Rise_Sequence1_Hour,Rise_Sequence1_Minute,Rise_Sequence2_Hour,Rise_Sequence2_Minute;

Heattreatment::Heattreatment() {
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	4a04      	ldr	r2, [pc, #16]	; (80082d8 <_ZN13HeattreatmentC1Ev+0x1c>)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4618      	mov	r0, r3
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr
 80082d8:	080104d8 	.word	0x080104d8

080082dc <_ZN13HeattreatmentD1Ev>:

Heattreatment::~Heattreatment() {
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	4a04      	ldr	r2, [pc, #16]	; (80082f8 <_ZN13HeattreatmentD1Ev+0x1c>)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4618      	mov	r0, r3
 80082ee:	370c      	adds	r7, #12
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr
 80082f8:	080104d8 	.word	0x080104d8

080082fc <_ZN13HeattreatmentD0Ev>:
Heattreatment::~Heattreatment() {
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
}
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f7ff ffe9 	bl	80082dc <_ZN13HeattreatmentD1Ev>
 800830a:	210c      	movs	r1, #12
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f007 f9e6 	bl	800f6de <_ZdlPvj>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4618      	mov	r0, r3
 8008316:	3708      	adds	r7, #8
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <_ZN13Heattreatment3runEv>:

void Heattreatment::run()
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
	stateMachineProcessControl();
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 f805 	bl	8008334 <_ZN13Heattreatment26stateMachineProcessControlEv>
}
 800832a:	bf00      	nop
 800832c:	3708      	adds	r7, #8
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
	...

08008334 <_ZN13Heattreatment26stateMachineProcessControlEv>:

void Heattreatment::stateMachineProcessControl(void){
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
	switch(SEQMONITOR)
 800833c:	4b50      	ldr	r3, [pc, #320]	; (8008480 <_ZN13Heattreatment26stateMachineProcessControlEv+0x14c>)
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	2b67      	cmp	r3, #103	; 0x67
 8008342:	f000 8169 	beq.w	8008618 <_ZN13Heattreatment26stateMachineProcessControlEv+0x2e4>
 8008346:	2b67      	cmp	r3, #103	; 0x67
 8008348:	f300 8337 	bgt.w	80089ba <_ZN13Heattreatment26stateMachineProcessControlEv+0x686>
 800834c:	2b65      	cmp	r3, #101	; 0x65
 800834e:	f000 80a3 	beq.w	8008498 <_ZN13Heattreatment26stateMachineProcessControlEv+0x164>
 8008352:	2b65      	cmp	r3, #101	; 0x65
 8008354:	f300 8331 	bgt.w	80089ba <_ZN13Heattreatment26stateMachineProcessControlEv+0x686>
 8008358:	2b1a      	cmp	r3, #26
 800835a:	dc2b      	bgt.n	80083b4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x80>
 800835c:	2b0a      	cmp	r3, #10
 800835e:	f2c0 832c 	blt.w	80089ba <_ZN13Heattreatment26stateMachineProcessControlEv+0x686>
 8008362:	3b0a      	subs	r3, #10
 8008364:	2b10      	cmp	r3, #16
 8008366:	f200 8328 	bhi.w	80089ba <_ZN13Heattreatment26stateMachineProcessControlEv+0x686>
 800836a:	a201      	add	r2, pc, #4	; (adr r2, 8008370 <_ZN13Heattreatment26stateMachineProcessControlEv+0x3c>)
 800836c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008370:	080083bb 	.word	0x080083bb
 8008374:	080089bb 	.word	0x080089bb
 8008378:	080089bb 	.word	0x080089bb
 800837c:	080089bb 	.word	0x080089bb
 8008380:	080089bb 	.word	0x080089bb
 8008384:	080089bb 	.word	0x080089bb
 8008388:	080089bb 	.word	0x080089bb
 800838c:	080089bb 	.word	0x080089bb
 8008390:	080089bb 	.word	0x080089bb
 8008394:	080089bb 	.word	0x080089bb
 8008398:	08008415 	.word	0x08008415
 800839c:	08008459 	.word	0x08008459
 80083a0:	080086b5 	.word	0x080086b5
 80083a4:	0800874b 	.word	0x0800874b
 80083a8:	08008817 	.word	0x08008817
 80083ac:	080088e1 	.word	0x080088e1
 80083b0:	080089a7 	.word	0x080089a7
 80083b4:	2b64      	cmp	r3, #100	; 0x64
 80083b6:	d05c      	beq.n	8008472 <_ZN13Heattreatment26stateMachineProcessControlEv+0x13e>
 80083b8:	e2ff      	b.n	80089ba <_ZN13Heattreatment26stateMachineProcessControlEv+0x686>
	{
		case 10:
			if((SEQMONITOR==21)||(SEQMONITOR==100)||(SEQMONITOR==101)||(SEQMONITOR==103)||(SEQMONITOR==22)||(SEQMONITOR==23)
 80083ba:	4b31      	ldr	r3, [pc, #196]	; (8008480 <_ZN13Heattreatment26stateMachineProcessControlEv+0x14c>)
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	2b15      	cmp	r3, #21
 80083c0:	d01f      	beq.n	8008402 <_ZN13Heattreatment26stateMachineProcessControlEv+0xce>
 80083c2:	4b2f      	ldr	r3, [pc, #188]	; (8008480 <_ZN13Heattreatment26stateMachineProcessControlEv+0x14c>)
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	2b64      	cmp	r3, #100	; 0x64
 80083c8:	d01b      	beq.n	8008402 <_ZN13Heattreatment26stateMachineProcessControlEv+0xce>
 80083ca:	4b2d      	ldr	r3, [pc, #180]	; (8008480 <_ZN13Heattreatment26stateMachineProcessControlEv+0x14c>)
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	2b65      	cmp	r3, #101	; 0x65
 80083d0:	d017      	beq.n	8008402 <_ZN13Heattreatment26stateMachineProcessControlEv+0xce>
 80083d2:	4b2b      	ldr	r3, [pc, #172]	; (8008480 <_ZN13Heattreatment26stateMachineProcessControlEv+0x14c>)
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	2b67      	cmp	r3, #103	; 0x67
 80083d8:	d013      	beq.n	8008402 <_ZN13Heattreatment26stateMachineProcessControlEv+0xce>
 80083da:	4b29      	ldr	r3, [pc, #164]	; (8008480 <_ZN13Heattreatment26stateMachineProcessControlEv+0x14c>)
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	2b16      	cmp	r3, #22
 80083e0:	d00f      	beq.n	8008402 <_ZN13Heattreatment26stateMachineProcessControlEv+0xce>
 80083e2:	4b27      	ldr	r3, [pc, #156]	; (8008480 <_ZN13Heattreatment26stateMachineProcessControlEv+0x14c>)
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	2b17      	cmp	r3, #23
 80083e8:	d00b      	beq.n	8008402 <_ZN13Heattreatment26stateMachineProcessControlEv+0xce>
			||(SEQMONITOR==24)||(SEQMONITOR==25)||(SEQMONITOR==20))
 80083ea:	4b25      	ldr	r3, [pc, #148]	; (8008480 <_ZN13Heattreatment26stateMachineProcessControlEv+0x14c>)
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	2b18      	cmp	r3, #24
 80083f0:	d007      	beq.n	8008402 <_ZN13Heattreatment26stateMachineProcessControlEv+0xce>
 80083f2:	4b23      	ldr	r3, [pc, #140]	; (8008480 <_ZN13Heattreatment26stateMachineProcessControlEv+0x14c>)
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	2b19      	cmp	r3, #25
 80083f8:	d003      	beq.n	8008402 <_ZN13Heattreatment26stateMachineProcessControlEv+0xce>
 80083fa:	4b21      	ldr	r3, [pc, #132]	; (8008480 <_ZN13Heattreatment26stateMachineProcessControlEv+0x14c>)
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	2b14      	cmp	r3, #20
 8008400:	d104      	bne.n	800840c <_ZN13Heattreatment26stateMachineProcessControlEv+0xd8>
			{
				SEQMONITOR=SEQMONITOR+0;
 8008402:	4b1f      	ldr	r3, [pc, #124]	; (8008480 <_ZN13Heattreatment26stateMachineProcessControlEv+0x14c>)
 8008404:	781a      	ldrb	r2, [r3, #0]
 8008406:	4b1e      	ldr	r3, [pc, #120]	; (8008480 <_ZN13Heattreatment26stateMachineProcessControlEv+0x14c>)
 8008408:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				SEQMONITOR= 20;		 //Initialization
			}
		break;
 800840a:	e2db      	b.n	80089c4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x690>
				SEQMONITOR= 20;		 //Initialization
 800840c:	4b1c      	ldr	r3, [pc, #112]	; (8008480 <_ZN13Heattreatment26stateMachineProcessControlEv+0x14c>)
 800840e:	2214      	movs	r2, #20
 8008410:	701a      	strb	r2, [r3, #0]
		break;
 8008412:	e2d7      	b.n	80089c4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x690>
		case 20:
			//m_simEndProcess= HAL_GPIO_ReadPin(GPIOC,InputMachine1_Pin);
			if((m_simEndProcess ==GPIO_PIN_SET )||(IDGen_Skip_Http==0x01))
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	795b      	ldrb	r3, [r3, #5]
 8008418:	2b01      	cmp	r3, #1
 800841a:	d003      	beq.n	8008424 <_ZN13Heattreatment26stateMachineProcessControlEv+0xf0>
 800841c:	4b19      	ldr	r3, [pc, #100]	; (8008484 <_ZN13Heattreatment26stateMachineProcessControlEv+0x150>)
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	2b01      	cmp	r3, #1
 8008422:	d10c      	bne.n	800843e <_ZN13Heattreatment26stateMachineProcessControlEv+0x10a>
			{
				SEQMONITOR=21;
 8008424:	4b16      	ldr	r3, [pc, #88]	; (8008480 <_ZN13Heattreatment26stateMachineProcessControlEv+0x14c>)
 8008426:	2215      	movs	r2, #21
 8008428:	701a      	strb	r2, [r3, #0]
				status_to_server=1;
 800842a:	4b17      	ldr	r3, [pc, #92]	; (8008488 <_ZN13Heattreatment26stateMachineProcessControlEv+0x154>)
 800842c:	2201      	movs	r2, #1
 800842e:	701a      	strb	r2, [r3, #0]
				seq1_count_inc  = 0;
 8008430:	4b16      	ldr	r3, [pc, #88]	; (800848c <_ZN13Heattreatment26stateMachineProcessControlEv+0x158>)
 8008432:	2200      	movs	r2, #0
 8008434:	801a      	strh	r2, [r3, #0]
				seq2_count_inc  = 0;
 8008436:	4b16      	ldr	r3, [pc, #88]	; (8008490 <_ZN13Heattreatment26stateMachineProcessControlEv+0x15c>)
 8008438:	2200      	movs	r2, #0
 800843a:	801a      	strh	r2, [r3, #0]
			}
			else if((m_simEndProcess ==GPIO_PIN_RESET)||(IDGen_Skip_Http==0x00))
			{
				status_to_server=30;
			}
		break;
 800843c:	e2c1      	b.n	80089c2 <_ZN13Heattreatment26stateMachineProcessControlEv+0x68e>
			else if((m_simEndProcess ==GPIO_PIN_RESET)||(IDGen_Skip_Http==0x00))
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	795b      	ldrb	r3, [r3, #5]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d004      	beq.n	8008450 <_ZN13Heattreatment26stateMachineProcessControlEv+0x11c>
 8008446:	4b0f      	ldr	r3, [pc, #60]	; (8008484 <_ZN13Heattreatment26stateMachineProcessControlEv+0x150>)
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	2b00      	cmp	r3, #0
 800844c:	f040 82b9 	bne.w	80089c2 <_ZN13Heattreatment26stateMachineProcessControlEv+0x68e>
				status_to_server=30;
 8008450:	4b0d      	ldr	r3, [pc, #52]	; (8008488 <_ZN13Heattreatment26stateMachineProcessControlEv+0x154>)
 8008452:	221e      	movs	r2, #30
 8008454:	701a      	strb	r2, [r3, #0]
		break;
 8008456:	e2b4      	b.n	80089c2 <_ZN13Heattreatment26stateMachineProcessControlEv+0x68e>
		case 21:
				ProcessId_Value = ProcessId_Value+1;
 8008458:	4b0e      	ldr	r3, [pc, #56]	; (8008494 <_ZN13Heattreatment26stateMachineProcessControlEv+0x160>)
 800845a:	881b      	ldrh	r3, [r3, #0]
 800845c:	3301      	adds	r3, #1
 800845e:	b29a      	uxth	r2, r3
 8008460:	4b0c      	ldr	r3, [pc, #48]	; (8008494 <_ZN13Heattreatment26stateMachineProcessControlEv+0x160>)
 8008462:	801a      	strh	r2, [r3, #0]
				SEQMONITOR	= 100; //wait for server ack
 8008464:	4b06      	ldr	r3, [pc, #24]	; (8008480 <_ZN13Heattreatment26stateMachineProcessControlEv+0x14c>)
 8008466:	2264      	movs	r2, #100	; 0x64
 8008468:	701a      	strb	r2, [r3, #0]
				status_to_server= 1;
 800846a:	4b07      	ldr	r3, [pc, #28]	; (8008488 <_ZN13Heattreatment26stateMachineProcessControlEv+0x154>)
 800846c:	2201      	movs	r2, #1
 800846e:	701a      	strb	r2, [r3, #0]
		break;
 8008470:	e2a8      	b.n	80089c4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x690>
		case 100:	//Status_Http(from server)
				SEQMONITOR=101;
 8008472:	4b03      	ldr	r3, [pc, #12]	; (8008480 <_ZN13Heattreatment26stateMachineProcessControlEv+0x14c>)
 8008474:	2265      	movs	r2, #101	; 0x65
 8008476:	701a      	strb	r2, [r3, #0]
				status_to_server = 1;
 8008478:	4b03      	ldr	r3, [pc, #12]	; (8008488 <_ZN13Heattreatment26stateMachineProcessControlEv+0x154>)
 800847a:	2201      	movs	r2, #1
 800847c:	701a      	strb	r2, [r3, #0]
		break;
 800847e:	e2a1      	b.n	80089c4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x690>
 8008480:	20000636 	.word	0x20000636
 8008484:	200000ff 	.word	0x200000ff
 8008488:	20000624 	.word	0x20000624
 800848c:	2000010a 	.word	0x2000010a
 8008490:	2000010c 	.word	0x2000010c
 8008494:	20000626 	.word	0x20000626
		case 101:
				if(Status_Http == 11)
 8008498:	4b68      	ldr	r3, [pc, #416]	; (800863c <_ZN13Heattreatment26stateMachineProcessControlEv+0x308>)
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	2b0b      	cmp	r3, #11
 800849e:	f040 80b7 	bne.w	8008610 <_ZN13Heattreatment26stateMachineProcessControlEv+0x2dc>
				{
					if(Temperature_High_Http!=0)
 80084a2:	4b67      	ldr	r3, [pc, #412]	; (8008640 <_ZN13Heattreatment26stateMachineProcessControlEv+0x30c>)
 80084a4:	881b      	ldrh	r3, [r3, #0]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d009      	beq.n	80084be <_ZN13Heattreatment26stateMachineProcessControlEv+0x18a>
					{
						if(Seq1temperature!=Temperature_High_Http)
 80084aa:	4b66      	ldr	r3, [pc, #408]	; (8008644 <_ZN13Heattreatment26stateMachineProcessControlEv+0x310>)
 80084ac:	881a      	ldrh	r2, [r3, #0]
 80084ae:	4b64      	ldr	r3, [pc, #400]	; (8008640 <_ZN13Heattreatment26stateMachineProcessControlEv+0x30c>)
 80084b0:	881b      	ldrh	r3, [r3, #0]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d003      	beq.n	80084be <_ZN13Heattreatment26stateMachineProcessControlEv+0x18a>
						{
							Seq1temperature= Temperature_High_Http;
 80084b6:	4b62      	ldr	r3, [pc, #392]	; (8008640 <_ZN13Heattreatment26stateMachineProcessControlEv+0x30c>)
 80084b8:	881a      	ldrh	r2, [r3, #0]
 80084ba:	4b62      	ldr	r3, [pc, #392]	; (8008644 <_ZN13Heattreatment26stateMachineProcessControlEv+0x310>)
 80084bc:	801a      	strh	r2, [r3, #0]
						}
					}
					if(Temperature_Low_Http!=0)
 80084be:	4b62      	ldr	r3, [pc, #392]	; (8008648 <_ZN13Heattreatment26stateMachineProcessControlEv+0x314>)
 80084c0:	881b      	ldrh	r3, [r3, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d009      	beq.n	80084da <_ZN13Heattreatment26stateMachineProcessControlEv+0x1a6>
					{
						if(Seq2temperature!=Temperature_Low_Http)
 80084c6:	4b61      	ldr	r3, [pc, #388]	; (800864c <_ZN13Heattreatment26stateMachineProcessControlEv+0x318>)
 80084c8:	881a      	ldrh	r2, [r3, #0]
 80084ca:	4b5f      	ldr	r3, [pc, #380]	; (8008648 <_ZN13Heattreatment26stateMachineProcessControlEv+0x314>)
 80084cc:	881b      	ldrh	r3, [r3, #0]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d003      	beq.n	80084da <_ZN13Heattreatment26stateMachineProcessControlEv+0x1a6>
						{
							Seq2temperature= Temperature_Low_Http;
 80084d2:	4b5d      	ldr	r3, [pc, #372]	; (8008648 <_ZN13Heattreatment26stateMachineProcessControlEv+0x314>)
 80084d4:	881a      	ldrh	r2, [r3, #0]
 80084d6:	4b5d      	ldr	r3, [pc, #372]	; (800864c <_ZN13Heattreatment26stateMachineProcessControlEv+0x318>)
 80084d8:	801a      	strh	r2, [r3, #0]
						}
					}
					if(H_Timer01HrValue!=Sequence1_hour_http)
 80084da:	4b5d      	ldr	r3, [pc, #372]	; (8008650 <_ZN13Heattreatment26stateMachineProcessControlEv+0x31c>)
 80084dc:	781a      	ldrb	r2, [r3, #0]
 80084de:	4b5d      	ldr	r3, [pc, #372]	; (8008654 <_ZN13Heattreatment26stateMachineProcessControlEv+0x320>)
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d012      	beq.n	800850c <_ZN13Heattreatment26stateMachineProcessControlEv+0x1d8>
					{
						H_Timer01HrValue= Sequence1_hour_http;
 80084e6:	4b5b      	ldr	r3, [pc, #364]	; (8008654 <_ZN13Heattreatment26stateMachineProcessControlEv+0x320>)
 80084e8:	781a      	ldrb	r2, [r3, #0]
 80084ea:	4b59      	ldr	r3, [pc, #356]	; (8008650 <_ZN13Heattreatment26stateMachineProcessControlEv+0x31c>)
 80084ec:	701a      	strb	r2, [r3, #0]
						ProcessTotalMin1 	=  (H_Timer01HrValue*60)+  H_Timer01MinValue;
 80084ee:	4b58      	ldr	r3, [pc, #352]	; (8008650 <_ZN13Heattreatment26stateMachineProcessControlEv+0x31c>)
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	461a      	mov	r2, r3
 80084f6:	0112      	lsls	r2, r2, #4
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	b29a      	uxth	r2, r3
 80084fe:	4b56      	ldr	r3, [pc, #344]	; (8008658 <_ZN13Heattreatment26stateMachineProcessControlEv+0x324>)
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	b29b      	uxth	r3, r3
 8008504:	4413      	add	r3, r2
 8008506:	b29a      	uxth	r2, r3
 8008508:	4b54      	ldr	r3, [pc, #336]	; (800865c <_ZN13Heattreatment26stateMachineProcessControlEv+0x328>)
 800850a:	801a      	strh	r2, [r3, #0]
					}
					if(H_Timer01MinValue!=Sequence1_minute_http)
 800850c:	4b52      	ldr	r3, [pc, #328]	; (8008658 <_ZN13Heattreatment26stateMachineProcessControlEv+0x324>)
 800850e:	781a      	ldrb	r2, [r3, #0]
 8008510:	4b53      	ldr	r3, [pc, #332]	; (8008660 <_ZN13Heattreatment26stateMachineProcessControlEv+0x32c>)
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	429a      	cmp	r2, r3
 8008516:	d012      	beq.n	800853e <_ZN13Heattreatment26stateMachineProcessControlEv+0x20a>
					{
						H_Timer01MinValue= Sequence1_minute_http;
 8008518:	4b51      	ldr	r3, [pc, #324]	; (8008660 <_ZN13Heattreatment26stateMachineProcessControlEv+0x32c>)
 800851a:	781a      	ldrb	r2, [r3, #0]
 800851c:	4b4e      	ldr	r3, [pc, #312]	; (8008658 <_ZN13Heattreatment26stateMachineProcessControlEv+0x324>)
 800851e:	701a      	strb	r2, [r3, #0]
						ProcessTotalMin1 	=  (H_Timer01HrValue*60)+  H_Timer01MinValue;
 8008520:	4b4b      	ldr	r3, [pc, #300]	; (8008650 <_ZN13Heattreatment26stateMachineProcessControlEv+0x31c>)
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	b29b      	uxth	r3, r3
 8008526:	461a      	mov	r2, r3
 8008528:	0112      	lsls	r2, r2, #4
 800852a:	1ad3      	subs	r3, r2, r3
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	b29a      	uxth	r2, r3
 8008530:	4b49      	ldr	r3, [pc, #292]	; (8008658 <_ZN13Heattreatment26stateMachineProcessControlEv+0x324>)
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	b29b      	uxth	r3, r3
 8008536:	4413      	add	r3, r2
 8008538:	b29a      	uxth	r2, r3
 800853a:	4b48      	ldr	r3, [pc, #288]	; (800865c <_ZN13Heattreatment26stateMachineProcessControlEv+0x328>)
 800853c:	801a      	strh	r2, [r3, #0]
					}
					if(H_Timer02HrValue!=Sequence2_hour_http)
 800853e:	4b49      	ldr	r3, [pc, #292]	; (8008664 <_ZN13Heattreatment26stateMachineProcessControlEv+0x330>)
 8008540:	781a      	ldrb	r2, [r3, #0]
 8008542:	4b49      	ldr	r3, [pc, #292]	; (8008668 <_ZN13Heattreatment26stateMachineProcessControlEv+0x334>)
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	429a      	cmp	r2, r3
 8008548:	d003      	beq.n	8008552 <_ZN13Heattreatment26stateMachineProcessControlEv+0x21e>
					{
						H_Timer02HrValue= Sequence2_hour_http;
 800854a:	4b47      	ldr	r3, [pc, #284]	; (8008668 <_ZN13Heattreatment26stateMachineProcessControlEv+0x334>)
 800854c:	781a      	ldrb	r2, [r3, #0]
 800854e:	4b45      	ldr	r3, [pc, #276]	; (8008664 <_ZN13Heattreatment26stateMachineProcessControlEv+0x330>)
 8008550:	701a      	strb	r2, [r3, #0]
					}
					if(H_Timer02MinValue!=Sequence2_minute_http)
 8008552:	4b46      	ldr	r3, [pc, #280]	; (800866c <_ZN13Heattreatment26stateMachineProcessControlEv+0x338>)
 8008554:	781a      	ldrb	r2, [r3, #0]
 8008556:	4b46      	ldr	r3, [pc, #280]	; (8008670 <_ZN13Heattreatment26stateMachineProcessControlEv+0x33c>)
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	429a      	cmp	r2, r3
 800855c:	d012      	beq.n	8008584 <_ZN13Heattreatment26stateMachineProcessControlEv+0x250>
					{
						H_Timer02MinValue= Sequence2_minute_http;
 800855e:	4b44      	ldr	r3, [pc, #272]	; (8008670 <_ZN13Heattreatment26stateMachineProcessControlEv+0x33c>)
 8008560:	781a      	ldrb	r2, [r3, #0]
 8008562:	4b42      	ldr	r3, [pc, #264]	; (800866c <_ZN13Heattreatment26stateMachineProcessControlEv+0x338>)
 8008564:	701a      	strb	r2, [r3, #0]
						ProcessTotalMin2   =  (H_Timer02HrValue*60)+  H_Timer02MinValue;
 8008566:	4b3f      	ldr	r3, [pc, #252]	; (8008664 <_ZN13Heattreatment26stateMachineProcessControlEv+0x330>)
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	b29b      	uxth	r3, r3
 800856c:	461a      	mov	r2, r3
 800856e:	0112      	lsls	r2, r2, #4
 8008570:	1ad3      	subs	r3, r2, r3
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	b29a      	uxth	r2, r3
 8008576:	4b3d      	ldr	r3, [pc, #244]	; (800866c <_ZN13Heattreatment26stateMachineProcessControlEv+0x338>)
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	b29b      	uxth	r3, r3
 800857c:	4413      	add	r3, r2
 800857e:	b29a      	uxth	r2, r3
 8008580:	4b3c      	ldr	r3, [pc, #240]	; (8008674 <_ZN13Heattreatment26stateMachineProcessControlEv+0x340>)
 8008582:	801a      	strh	r2, [r3, #0]
					}
					if(R_Temperature_High_Http!=   Rise_Sequence1_temp)
 8008584:	4b3c      	ldr	r3, [pc, #240]	; (8008678 <_ZN13Heattreatment26stateMachineProcessControlEv+0x344>)
 8008586:	881a      	ldrh	r2, [r3, #0]
 8008588:	4b3c      	ldr	r3, [pc, #240]	; (800867c <_ZN13Heattreatment26stateMachineProcessControlEv+0x348>)
 800858a:	881b      	ldrh	r3, [r3, #0]
 800858c:	429a      	cmp	r2, r3
 800858e:	d003      	beq.n	8008598 <_ZN13Heattreatment26stateMachineProcessControlEv+0x264>
					{
						Rise_Sequence1_temp = R_Temperature_High_Http;
 8008590:	4b39      	ldr	r3, [pc, #228]	; (8008678 <_ZN13Heattreatment26stateMachineProcessControlEv+0x344>)
 8008592:	881a      	ldrh	r2, [r3, #0]
 8008594:	4b39      	ldr	r3, [pc, #228]	; (800867c <_ZN13Heattreatment26stateMachineProcessControlEv+0x348>)
 8008596:	801a      	strh	r2, [r3, #0]
					}
					if(R_Temperature_Low_Http!=   Rise_Sequence2_temp)
 8008598:	4b39      	ldr	r3, [pc, #228]	; (8008680 <_ZN13Heattreatment26stateMachineProcessControlEv+0x34c>)
 800859a:	881a      	ldrh	r2, [r3, #0]
 800859c:	4b39      	ldr	r3, [pc, #228]	; (8008684 <_ZN13Heattreatment26stateMachineProcessControlEv+0x350>)
 800859e:	881b      	ldrh	r3, [r3, #0]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d003      	beq.n	80085ac <_ZN13Heattreatment26stateMachineProcessControlEv+0x278>
					{
						Rise_Sequence2_temp = R_Temperature_Low_Http;
 80085a4:	4b36      	ldr	r3, [pc, #216]	; (8008680 <_ZN13Heattreatment26stateMachineProcessControlEv+0x34c>)
 80085a6:	881a      	ldrh	r2, [r3, #0]
 80085a8:	4b36      	ldr	r3, [pc, #216]	; (8008684 <_ZN13Heattreatment26stateMachineProcessControlEv+0x350>)
 80085aa:	801a      	strh	r2, [r3, #0]
					}
					if(R_Sequence1_hour_http!=   Rise_Sequence1_Hour)
 80085ac:	4b36      	ldr	r3, [pc, #216]	; (8008688 <_ZN13Heattreatment26stateMachineProcessControlEv+0x354>)
 80085ae:	781a      	ldrb	r2, [r3, #0]
 80085b0:	4b36      	ldr	r3, [pc, #216]	; (800868c <_ZN13Heattreatment26stateMachineProcessControlEv+0x358>)
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d003      	beq.n	80085c0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x28c>
					{
						Rise_Sequence1_Hour = R_Sequence1_hour_http;
 80085b8:	4b33      	ldr	r3, [pc, #204]	; (8008688 <_ZN13Heattreatment26stateMachineProcessControlEv+0x354>)
 80085ba:	781a      	ldrb	r2, [r3, #0]
 80085bc:	4b33      	ldr	r3, [pc, #204]	; (800868c <_ZN13Heattreatment26stateMachineProcessControlEv+0x358>)
 80085be:	701a      	strb	r2, [r3, #0]
					}
					if(R_Sequence1_minute_http!=   Rise_Sequence1_Minute)
 80085c0:	4b33      	ldr	r3, [pc, #204]	; (8008690 <_ZN13Heattreatment26stateMachineProcessControlEv+0x35c>)
 80085c2:	781a      	ldrb	r2, [r3, #0]
 80085c4:	4b33      	ldr	r3, [pc, #204]	; (8008694 <_ZN13Heattreatment26stateMachineProcessControlEv+0x360>)
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d003      	beq.n	80085d4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x2a0>
					{
						Rise_Sequence1_Minute = R_Sequence1_minute_http;
 80085cc:	4b30      	ldr	r3, [pc, #192]	; (8008690 <_ZN13Heattreatment26stateMachineProcessControlEv+0x35c>)
 80085ce:	781a      	ldrb	r2, [r3, #0]
 80085d0:	4b30      	ldr	r3, [pc, #192]	; (8008694 <_ZN13Heattreatment26stateMachineProcessControlEv+0x360>)
 80085d2:	701a      	strb	r2, [r3, #0]
					}

					if(R_Sequence2_hour_http!=   Rise_Sequence2_Hour)
 80085d4:	4b30      	ldr	r3, [pc, #192]	; (8008698 <_ZN13Heattreatment26stateMachineProcessControlEv+0x364>)
 80085d6:	781a      	ldrb	r2, [r3, #0]
 80085d8:	4b30      	ldr	r3, [pc, #192]	; (800869c <_ZN13Heattreatment26stateMachineProcessControlEv+0x368>)
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	429a      	cmp	r2, r3
 80085de:	d003      	beq.n	80085e8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x2b4>
					{
						Rise_Sequence2_Hour = R_Sequence2_hour_http;
 80085e0:	4b2d      	ldr	r3, [pc, #180]	; (8008698 <_ZN13Heattreatment26stateMachineProcessControlEv+0x364>)
 80085e2:	781a      	ldrb	r2, [r3, #0]
 80085e4:	4b2d      	ldr	r3, [pc, #180]	; (800869c <_ZN13Heattreatment26stateMachineProcessControlEv+0x368>)
 80085e6:	701a      	strb	r2, [r3, #0]
					}

					if(R_Sequence2_minute_http!=   Rise_Sequence2_Minute)
 80085e8:	4b2d      	ldr	r3, [pc, #180]	; (80086a0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x36c>)
 80085ea:	781a      	ldrb	r2, [r3, #0]
 80085ec:	4b2d      	ldr	r3, [pc, #180]	; (80086a4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x370>)
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d003      	beq.n	80085fc <_ZN13Heattreatment26stateMachineProcessControlEv+0x2c8>
					{
						Rise_Sequence2_Minute = R_Sequence2_minute_http;
 80085f4:	4b2a      	ldr	r3, [pc, #168]	; (80086a0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x36c>)
 80085f6:	781a      	ldrb	r2, [r3, #0]
 80085f8:	4b2a      	ldr	r3, [pc, #168]	; (80086a4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x370>)
 80085fa:	701a      	strb	r2, [r3, #0]
					}
					status_to_server = 20;
 80085fc:	4b2a      	ldr	r3, [pc, #168]	; (80086a8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x374>)
 80085fe:	2214      	movs	r2, #20
 8008600:	701a      	strb	r2, [r3, #0]
					SEQMONITOR=103;
 8008602:	4b2a      	ldr	r3, [pc, #168]	; (80086ac <_ZN13Heattreatment26stateMachineProcessControlEv+0x378>)
 8008604:	2267      	movs	r2, #103	; 0x67
 8008606:	701a      	strb	r2, [r3, #0]
					updateSetData=1;
 8008608:	4b29      	ldr	r3, [pc, #164]	; (80086b0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x37c>)
 800860a:	2201      	movs	r2, #1
 800860c:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					status_to_server=1;
				}
		break;
 800860e:	e1d9      	b.n	80089c4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x690>
					status_to_server=1;
 8008610:	4b25      	ldr	r3, [pc, #148]	; (80086a8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x374>)
 8008612:	2201      	movs	r2, #1
 8008614:	701a      	strb	r2, [r3, #0]
		break;
 8008616:	e1d5      	b.n	80089c4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x690>
		case 103:
				if(Status_Http ==20){
 8008618:	4b08      	ldr	r3, [pc, #32]	; (800863c <_ZN13Heattreatment26stateMachineProcessControlEv+0x308>)
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	2b14      	cmp	r3, #20
 800861e:	d106      	bne.n	800862e <_ZN13Heattreatment26stateMachineProcessControlEv+0x2fa>
					status_to_server=20;
 8008620:	4b21      	ldr	r3, [pc, #132]	; (80086a8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x374>)
 8008622:	2214      	movs	r2, #20
 8008624:	701a      	strb	r2, [r3, #0]
					SEQMONITOR=22;
 8008626:	4b21      	ldr	r3, [pc, #132]	; (80086ac <_ZN13Heattreatment26stateMachineProcessControlEv+0x378>)
 8008628:	2216      	movs	r2, #22
 800862a:	701a      	strb	r2, [r3, #0]
				}
				else{
					status_to_server=20;
					SEQMONITOR=103;
				}
		break;
 800862c:	e1ca      	b.n	80089c4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x690>
					status_to_server=20;
 800862e:	4b1e      	ldr	r3, [pc, #120]	; (80086a8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x374>)
 8008630:	2214      	movs	r2, #20
 8008632:	701a      	strb	r2, [r3, #0]
					SEQMONITOR=103;
 8008634:	4b1d      	ldr	r3, [pc, #116]	; (80086ac <_ZN13Heattreatment26stateMachineProcessControlEv+0x378>)
 8008636:	2267      	movs	r2, #103	; 0x67
 8008638:	701a      	strb	r2, [r3, #0]
		break;
 800863a:	e1c3      	b.n	80089c4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x690>
 800863c:	200000fe 	.word	0x200000fe
 8008640:	200000ec 	.word	0x200000ec
 8008644:	20000628 	.word	0x20000628
 8008648:	200000f0 	.word	0x200000f0
 800864c:	2000062a 	.word	0x2000062a
 8008650:	2000063a 	.word	0x2000063a
 8008654:	200000f2 	.word	0x200000f2
 8008658:	2000063b 	.word	0x2000063b
 800865c:	2000063e 	.word	0x2000063e
 8008660:	200000f3 	.word	0x200000f3
 8008664:	2000063c 	.word	0x2000063c
 8008668:	200000f8 	.word	0x200000f8
 800866c:	2000063d 	.word	0x2000063d
 8008670:	200000f9 	.word	0x200000f9
 8008674:	20000640 	.word	0x20000640
 8008678:	200000ea 	.word	0x200000ea
 800867c:	20000642 	.word	0x20000642
 8008680:	200000ee 	.word	0x200000ee
 8008684:	20000644 	.word	0x20000644
 8008688:	200000f4 	.word	0x200000f4
 800868c:	20000646 	.word	0x20000646
 8008690:	200000f5 	.word	0x200000f5
 8008694:	20000647 	.word	0x20000647
 8008698:	200000f6 	.word	0x200000f6
 800869c:	20000648 	.word	0x20000648
 80086a0:	200000f7 	.word	0x200000f7
 80086a4:	20000649 	.word	0x20000649
 80086a8:	20000624 	.word	0x20000624
 80086ac:	20000636 	.word	0x20000636
 80086b0:	20000622 	.word	0x20000622
		case 22:
				temperature_reference = Seq1temperature;
 80086b4:	4b7d      	ldr	r3, [pc, #500]	; (80088ac <_ZN13Heattreatment26stateMachineProcessControlEv+0x578>)
 80086b6:	881a      	ldrh	r2, [r3, #0]
 80086b8:	4b7d      	ldr	r3, [pc, #500]	; (80088b0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x57c>)
 80086ba:	801a      	strh	r2, [r3, #0]
				m_temeperatureUpperBound = Seq1temperature+3;
 80086bc:	4b7b      	ldr	r3, [pc, #492]	; (80088ac <_ZN13Heattreatment26stateMachineProcessControlEv+0x578>)
 80086be:	881b      	ldrh	r3, [r3, #0]
 80086c0:	3303      	adds	r3, #3
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	80da      	strh	r2, [r3, #6]
				m_temperatureLowerBound  = Seq1temperature-3;
 80086c8:	4b78      	ldr	r3, [pc, #480]	; (80088ac <_ZN13Heattreatment26stateMachineProcessControlEv+0x578>)
 80086ca:	881b      	ldrh	r3, [r3, #0]
 80086cc:	3b03      	subs	r3, #3
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	811a      	strh	r2, [r3, #8]
				if((act_temperature_c1 >= m_temperatureLowerBound)&&(act_temperature_c1 <= m_temeperatureUpperBound)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	891a      	ldrh	r2, [r3, #8]
 80086d8:	4b76      	ldr	r3, [pc, #472]	; (80088b4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x580>)
 80086da:	881b      	ldrh	r3, [r3, #0]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d82d      	bhi.n	800873c <_ZN13Heattreatment26stateMachineProcessControlEv+0x408>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	88da      	ldrh	r2, [r3, #6]
 80086e4:	4b73      	ldr	r3, [pc, #460]	; (80088b4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x580>)
 80086e6:	881b      	ldrh	r3, [r3, #0]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d327      	bcc.n	800873c <_ZN13Heattreatment26stateMachineProcessControlEv+0x408>
				&&(act_temperature_c2 >= m_temperatureLowerBound)&&(act_temperature_c2 <= m_temeperatureUpperBound)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	891a      	ldrh	r2, [r3, #8]
 80086f0:	4b71      	ldr	r3, [pc, #452]	; (80088b8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x584>)
 80086f2:	881b      	ldrh	r3, [r3, #0]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d821      	bhi.n	800873c <_ZN13Heattreatment26stateMachineProcessControlEv+0x408>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	88da      	ldrh	r2, [r3, #6]
 80086fc:	4b6e      	ldr	r3, [pc, #440]	; (80088b8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x584>)
 80086fe:	881b      	ldrh	r3, [r3, #0]
 8008700:	429a      	cmp	r2, r3
 8008702:	d31b      	bcc.n	800873c <_ZN13Heattreatment26stateMachineProcessControlEv+0x408>
				&&(act_temperature_c3 >= m_temperatureLowerBound)&&(act_temperature_c3 <= m_temeperatureUpperBound)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	891a      	ldrh	r2, [r3, #8]
 8008708:	4b6c      	ldr	r3, [pc, #432]	; (80088bc <_ZN13Heattreatment26stateMachineProcessControlEv+0x588>)
 800870a:	881b      	ldrh	r3, [r3, #0]
 800870c:	429a      	cmp	r2, r3
 800870e:	d815      	bhi.n	800873c <_ZN13Heattreatment26stateMachineProcessControlEv+0x408>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	88da      	ldrh	r2, [r3, #6]
 8008714:	4b69      	ldr	r3, [pc, #420]	; (80088bc <_ZN13Heattreatment26stateMachineProcessControlEv+0x588>)
 8008716:	881b      	ldrh	r3, [r3, #0]
 8008718:	429a      	cmp	r2, r3
 800871a:	d30f      	bcc.n	800873c <_ZN13Heattreatment26stateMachineProcessControlEv+0x408>
				&&(act_temperature_c4 >= m_temperatureLowerBound)&&(act_temperature_c4 <= m_temeperatureUpperBound))
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	891a      	ldrh	r2, [r3, #8]
 8008720:	4b67      	ldr	r3, [pc, #412]	; (80088c0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x58c>)
 8008722:	881b      	ldrh	r3, [r3, #0]
 8008724:	429a      	cmp	r2, r3
 8008726:	d809      	bhi.n	800873c <_ZN13Heattreatment26stateMachineProcessControlEv+0x408>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	88da      	ldrh	r2, [r3, #6]
 800872c:	4b64      	ldr	r3, [pc, #400]	; (80088c0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x58c>)
 800872e:	881b      	ldrh	r3, [r3, #0]
 8008730:	429a      	cmp	r2, r3
 8008732:	d303      	bcc.n	800873c <_ZN13Heattreatment26stateMachineProcessControlEv+0x408>
				{
					SEQMONITOR=23;
 8008734:	4b63      	ldr	r3, [pc, #396]	; (80088c4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x590>)
 8008736:	2217      	movs	r2, #23
 8008738:	701a      	strb	r2, [r3, #0]
 800873a:	e002      	b.n	8008742 <_ZN13Heattreatment26stateMachineProcessControlEv+0x40e>
				}
				else{
					SEQMONITOR=22;
 800873c:	4b61      	ldr	r3, [pc, #388]	; (80088c4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x590>)
 800873e:	2216      	movs	r2, #22
 8008740:	701a      	strb	r2, [r3, #0]
				}
				status_to_server=20;
 8008742:	4b61      	ldr	r3, [pc, #388]	; (80088c8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x594>)
 8008744:	2214      	movs	r2, #20
 8008746:	701a      	strb	r2, [r3, #0]
		break;
 8008748:	e13c      	b.n	80089c4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x690>
		case 23:
			temperature_reference = Seq1temperature;
 800874a:	4b58      	ldr	r3, [pc, #352]	; (80088ac <_ZN13Heattreatment26stateMachineProcessControlEv+0x578>)
 800874c:	881a      	ldrh	r2, [r3, #0]
 800874e:	4b58      	ldr	r3, [pc, #352]	; (80088b0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x57c>)
 8008750:	801a      	strh	r2, [r3, #0]
			m_temeperatureUpperBound = Seq1temperature+5;
 8008752:	4b56      	ldr	r3, [pc, #344]	; (80088ac <_ZN13Heattreatment26stateMachineProcessControlEv+0x578>)
 8008754:	881b      	ldrh	r3, [r3, #0]
 8008756:	3305      	adds	r3, #5
 8008758:	b29a      	uxth	r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	80da      	strh	r2, [r3, #6]
			m_temperatureLowerBound  = Seq1temperature-5;
 800875e:	4b53      	ldr	r3, [pc, #332]	; (80088ac <_ZN13Heattreatment26stateMachineProcessControlEv+0x578>)
 8008760:	881b      	ldrh	r3, [r3, #0]
 8008762:	3b05      	subs	r3, #5
 8008764:	b29a      	uxth	r2, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	811a      	strh	r2, [r3, #8]
			if(!start_process_control_timer)
 800876a:	4b58      	ldr	r3, [pc, #352]	; (80088cc <_ZN13Heattreatment26stateMachineProcessControlEv+0x598>)
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d102      	bne.n	8008778 <_ZN13Heattreatment26stateMachineProcessControlEv+0x444>
			{
				start_process_control_timer=1;
 8008772:	4b56      	ldr	r3, [pc, #344]	; (80088cc <_ZN13Heattreatment26stateMachineProcessControlEv+0x598>)
 8008774:	2201      	movs	r2, #1
 8008776:	701a      	strb	r2, [r3, #0]
			}
			if(((act_temperature_c1 >= m_temperatureLowerBound)&&(act_temperature_c1 <=m_temeperatureUpperBound))
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	891a      	ldrh	r2, [r3, #8]
 800877c:	4b4d      	ldr	r3, [pc, #308]	; (80088b4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x580>)
 800877e:	881b      	ldrh	r3, [r3, #0]
 8008780:	429a      	cmp	r2, r3
 8008782:	d805      	bhi.n	8008790 <_ZN13Heattreatment26stateMachineProcessControlEv+0x45c>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	88da      	ldrh	r2, [r3, #6]
 8008788:	4b4a      	ldr	r3, [pc, #296]	; (80088b4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x580>)
 800878a:	881b      	ldrh	r3, [r3, #0]
 800878c:	429a      	cmp	r2, r3
 800878e:	d223      	bcs.n	80087d8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4a4>
			||((act_temperature_c2 >= m_temperatureLowerBound)&&(act_temperature_c2 <=m_temeperatureUpperBound))
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	891a      	ldrh	r2, [r3, #8]
 8008794:	4b48      	ldr	r3, [pc, #288]	; (80088b8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x584>)
 8008796:	881b      	ldrh	r3, [r3, #0]
 8008798:	429a      	cmp	r2, r3
 800879a:	d805      	bhi.n	80087a8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x474>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	88da      	ldrh	r2, [r3, #6]
 80087a0:	4b45      	ldr	r3, [pc, #276]	; (80088b8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x584>)
 80087a2:	881b      	ldrh	r3, [r3, #0]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d217      	bcs.n	80087d8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4a4>
			||((act_temperature_c3 >= m_temperatureLowerBound)&&(act_temperature_c3 <=m_temeperatureUpperBound))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	891a      	ldrh	r2, [r3, #8]
 80087ac:	4b43      	ldr	r3, [pc, #268]	; (80088bc <_ZN13Heattreatment26stateMachineProcessControlEv+0x588>)
 80087ae:	881b      	ldrh	r3, [r3, #0]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d805      	bhi.n	80087c0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x48c>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	88da      	ldrh	r2, [r3, #6]
 80087b8:	4b40      	ldr	r3, [pc, #256]	; (80088bc <_ZN13Heattreatment26stateMachineProcessControlEv+0x588>)
 80087ba:	881b      	ldrh	r3, [r3, #0]
 80087bc:	429a      	cmp	r2, r3
 80087be:	d20b      	bcs.n	80087d8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4a4>
			||((act_temperature_c4 >= m_temperatureLowerBound)&&(act_temperature_c4 <=m_temeperatureUpperBound)))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	891a      	ldrh	r2, [r3, #8]
 80087c4:	4b3e      	ldr	r3, [pc, #248]	; (80088c0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x58c>)
 80087c6:	881b      	ldrh	r3, [r3, #0]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d809      	bhi.n	80087e0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4ac>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	88da      	ldrh	r2, [r3, #6]
 80087d0:	4b3b      	ldr	r3, [pc, #236]	; (80088c0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x58c>)
 80087d2:	881b      	ldrh	r3, [r3, #0]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d303      	bcc.n	80087e0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4ac>
			{
				stop_timer_count = 0;
 80087d8:	4b3d      	ldr	r3, [pc, #244]	; (80088d0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x59c>)
 80087da:	2200      	movs	r2, #0
 80087dc:	701a      	strb	r2, [r3, #0]
 80087de:	e002      	b.n	80087e6 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4b2>
			}
			else
			{
				stop_timer_count = 1;
 80087e0:	4b3b      	ldr	r3, [pc, #236]	; (80088d0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x59c>)
 80087e2:	2201      	movs	r2, #1
 80087e4:	701a      	strb	r2, [r3, #0]
			}
			if(process_complete==1){
 80087e6:	4b3b      	ldr	r3, [pc, #236]	; (80088d4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x5a0>)
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d10c      	bne.n	8008808 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4d4>
				process_complete = 0;
 80087ee:	4b39      	ldr	r3, [pc, #228]	; (80088d4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x5a0>)
 80087f0:	2200      	movs	r2, #0
 80087f2:	701a      	strb	r2, [r3, #0]
				start_process_control_timer=0;
 80087f4:	4b35      	ldr	r3, [pc, #212]	; (80088cc <_ZN13Heattreatment26stateMachineProcessControlEv+0x598>)
 80087f6:	2200      	movs	r2, #0
 80087f8:	701a      	strb	r2, [r3, #0]
				SEQMONITOR = 24;
 80087fa:	4b32      	ldr	r3, [pc, #200]	; (80088c4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x590>)
 80087fc:	2218      	movs	r2, #24
 80087fe:	701a      	strb	r2, [r3, #0]
				NewQuenchingReq=1;
 8008800:	4b35      	ldr	r3, [pc, #212]	; (80088d8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x5a4>)
 8008802:	2201      	movs	r2, #1
 8008804:	701a      	strb	r2, [r3, #0]
 8008806:	e002      	b.n	800880e <_ZN13Heattreatment26stateMachineProcessControlEv+0x4da>

			}
			else{
				SEQMONITOR = 23;
 8008808:	4b2e      	ldr	r3, [pc, #184]	; (80088c4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x590>)
 800880a:	2217      	movs	r2, #23
 800880c:	701a      	strb	r2, [r3, #0]
			}
			status_to_server=21;
 800880e:	4b2e      	ldr	r3, [pc, #184]	; (80088c8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x594>)
 8008810:	2215      	movs	r2, #21
 8008812:	701a      	strb	r2, [r3, #0]
		 break;
 8008814:	e0d6      	b.n	80089c4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x690>
		case 24:
				temperature_reference = Seq2temperature;
 8008816:	4b31      	ldr	r3, [pc, #196]	; (80088dc <_ZN13Heattreatment26stateMachineProcessControlEv+0x5a8>)
 8008818:	881a      	ldrh	r2, [r3, #0]
 800881a:	4b25      	ldr	r3, [pc, #148]	; (80088b0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x57c>)
 800881c:	801a      	strh	r2, [r3, #0]
				m_temeperatureUpperBound = Seq2temperature+3;
 800881e:	4b2f      	ldr	r3, [pc, #188]	; (80088dc <_ZN13Heattreatment26stateMachineProcessControlEv+0x5a8>)
 8008820:	881b      	ldrh	r3, [r3, #0]
 8008822:	3303      	adds	r3, #3
 8008824:	b29a      	uxth	r2, r3
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	80da      	strh	r2, [r3, #6]
				m_temperatureLowerBound  = Seq2temperature-3;
 800882a:	4b2c      	ldr	r3, [pc, #176]	; (80088dc <_ZN13Heattreatment26stateMachineProcessControlEv+0x5a8>)
 800882c:	881b      	ldrh	r3, [r3, #0]
 800882e:	3b03      	subs	r3, #3
 8008830:	b29a      	uxth	r2, r3
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	811a      	strh	r2, [r3, #8]
				if((act_temperature_c1 >= m_temperatureLowerBound)&&(act_temperature_c1 <= m_temeperatureUpperBound)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	891a      	ldrh	r2, [r3, #8]
 800883a:	4b1e      	ldr	r3, [pc, #120]	; (80088b4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x580>)
 800883c:	881b      	ldrh	r3, [r3, #0]
 800883e:	429a      	cmp	r2, r3
 8008840:	d82d      	bhi.n	800889e <_ZN13Heattreatment26stateMachineProcessControlEv+0x56a>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	88da      	ldrh	r2, [r3, #6]
 8008846:	4b1b      	ldr	r3, [pc, #108]	; (80088b4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x580>)
 8008848:	881b      	ldrh	r3, [r3, #0]
 800884a:	429a      	cmp	r2, r3
 800884c:	d327      	bcc.n	800889e <_ZN13Heattreatment26stateMachineProcessControlEv+0x56a>
				&&(act_temperature_c2 >= m_temperatureLowerBound)&&(act_temperature_c2 <= m_temeperatureUpperBound)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	891a      	ldrh	r2, [r3, #8]
 8008852:	4b19      	ldr	r3, [pc, #100]	; (80088b8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x584>)
 8008854:	881b      	ldrh	r3, [r3, #0]
 8008856:	429a      	cmp	r2, r3
 8008858:	d821      	bhi.n	800889e <_ZN13Heattreatment26stateMachineProcessControlEv+0x56a>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	88da      	ldrh	r2, [r3, #6]
 800885e:	4b16      	ldr	r3, [pc, #88]	; (80088b8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x584>)
 8008860:	881b      	ldrh	r3, [r3, #0]
 8008862:	429a      	cmp	r2, r3
 8008864:	d31b      	bcc.n	800889e <_ZN13Heattreatment26stateMachineProcessControlEv+0x56a>
				&&(act_temperature_c3 >= m_temperatureLowerBound)&&(act_temperature_c3 <= m_temeperatureUpperBound)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	891a      	ldrh	r2, [r3, #8]
 800886a:	4b14      	ldr	r3, [pc, #80]	; (80088bc <_ZN13Heattreatment26stateMachineProcessControlEv+0x588>)
 800886c:	881b      	ldrh	r3, [r3, #0]
 800886e:	429a      	cmp	r2, r3
 8008870:	d815      	bhi.n	800889e <_ZN13Heattreatment26stateMachineProcessControlEv+0x56a>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	88da      	ldrh	r2, [r3, #6]
 8008876:	4b11      	ldr	r3, [pc, #68]	; (80088bc <_ZN13Heattreatment26stateMachineProcessControlEv+0x588>)
 8008878:	881b      	ldrh	r3, [r3, #0]
 800887a:	429a      	cmp	r2, r3
 800887c:	d30f      	bcc.n	800889e <_ZN13Heattreatment26stateMachineProcessControlEv+0x56a>
				&&(act_temperature_c4 >= m_temperatureLowerBound)&&(act_temperature_c4 <= m_temeperatureUpperBound))
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	891a      	ldrh	r2, [r3, #8]
 8008882:	4b0f      	ldr	r3, [pc, #60]	; (80088c0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x58c>)
 8008884:	881b      	ldrh	r3, [r3, #0]
 8008886:	429a      	cmp	r2, r3
 8008888:	d809      	bhi.n	800889e <_ZN13Heattreatment26stateMachineProcessControlEv+0x56a>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	88da      	ldrh	r2, [r3, #6]
 800888e:	4b0c      	ldr	r3, [pc, #48]	; (80088c0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x58c>)
 8008890:	881b      	ldrh	r3, [r3, #0]
 8008892:	429a      	cmp	r2, r3
 8008894:	d303      	bcc.n	800889e <_ZN13Heattreatment26stateMachineProcessControlEv+0x56a>
				{
					SEQMONITOR=25;
 8008896:	4b0b      	ldr	r3, [pc, #44]	; (80088c4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x590>)
 8008898:	2219      	movs	r2, #25
 800889a:	701a      	strb	r2, [r3, #0]
 800889c:	e002      	b.n	80088a4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x570>
				}
				else{
					SEQMONITOR=24;
 800889e:	4b09      	ldr	r3, [pc, #36]	; (80088c4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x590>)
 80088a0:	2218      	movs	r2, #24
 80088a2:	701a      	strb	r2, [r3, #0]
				}
				status_to_server=22;
 80088a4:	4b08      	ldr	r3, [pc, #32]	; (80088c8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x594>)
 80088a6:	2216      	movs	r2, #22
 80088a8:	701a      	strb	r2, [r3, #0]
		break;
 80088aa:	e08b      	b.n	80089c4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x690>
 80088ac:	20000628 	.word	0x20000628
 80088b0:	2000062c 	.word	0x2000062c
 80088b4:	2000062e 	.word	0x2000062e
 80088b8:	20000630 	.word	0x20000630
 80088bc:	20000632 	.word	0x20000632
 80088c0:	20000634 	.word	0x20000634
 80088c4:	20000636 	.word	0x20000636
 80088c8:	20000624 	.word	0x20000624
 80088cc:	20000637 	.word	0x20000637
 80088d0:	20000638 	.word	0x20000638
 80088d4:	20000639 	.word	0x20000639
 80088d8:	20000623 	.word	0x20000623
 80088dc:	2000062a 	.word	0x2000062a
		case 25:
				temperature_reference = Seq2temperature;
 80088e0:	4b41      	ldr	r3, [pc, #260]	; (80089e8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x6b4>)
 80088e2:	881a      	ldrh	r2, [r3, #0]
 80088e4:	4b41      	ldr	r3, [pc, #260]	; (80089ec <_ZN13Heattreatment26stateMachineProcessControlEv+0x6b8>)
 80088e6:	801a      	strh	r2, [r3, #0]
				m_temeperatureUpperBound = Seq2temperature+5;
 80088e8:	4b3f      	ldr	r3, [pc, #252]	; (80089e8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x6b4>)
 80088ea:	881b      	ldrh	r3, [r3, #0]
 80088ec:	3305      	adds	r3, #5
 80088ee:	b29a      	uxth	r2, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	80da      	strh	r2, [r3, #6]
				m_temperatureLowerBound  = Seq2temperature-5;
 80088f4:	4b3c      	ldr	r3, [pc, #240]	; (80089e8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x6b4>)
 80088f6:	881b      	ldrh	r3, [r3, #0]
 80088f8:	3b05      	subs	r3, #5
 80088fa:	b29a      	uxth	r2, r3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	811a      	strh	r2, [r3, #8]
				if(!start_process_control_timer)
 8008900:	4b3b      	ldr	r3, [pc, #236]	; (80089f0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x6bc>)
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d102      	bne.n	800890e <_ZN13Heattreatment26stateMachineProcessControlEv+0x5da>
				{
					start_process_control_timer=2;
 8008908:	4b39      	ldr	r3, [pc, #228]	; (80089f0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x6bc>)
 800890a:	2202      	movs	r2, #2
 800890c:	701a      	strb	r2, [r3, #0]
				}
				if(((act_temperature_c1 >= m_temperatureLowerBound)&&(act_temperature_c1 <=m_temeperatureUpperBound))
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	891a      	ldrh	r2, [r3, #8]
 8008912:	4b38      	ldr	r3, [pc, #224]	; (80089f4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x6c0>)
 8008914:	881b      	ldrh	r3, [r3, #0]
 8008916:	429a      	cmp	r2, r3
 8008918:	d805      	bhi.n	8008926 <_ZN13Heattreatment26stateMachineProcessControlEv+0x5f2>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	88da      	ldrh	r2, [r3, #6]
 800891e:	4b35      	ldr	r3, [pc, #212]	; (80089f4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x6c0>)
 8008920:	881b      	ldrh	r3, [r3, #0]
 8008922:	429a      	cmp	r2, r3
 8008924:	d223      	bcs.n	800896e <_ZN13Heattreatment26stateMachineProcessControlEv+0x63a>
				||((act_temperature_c2 >= m_temperatureLowerBound)&&(act_temperature_c2 <=m_temeperatureUpperBound))
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	891a      	ldrh	r2, [r3, #8]
 800892a:	4b33      	ldr	r3, [pc, #204]	; (80089f8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x6c4>)
 800892c:	881b      	ldrh	r3, [r3, #0]
 800892e:	429a      	cmp	r2, r3
 8008930:	d805      	bhi.n	800893e <_ZN13Heattreatment26stateMachineProcessControlEv+0x60a>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	88da      	ldrh	r2, [r3, #6]
 8008936:	4b30      	ldr	r3, [pc, #192]	; (80089f8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x6c4>)
 8008938:	881b      	ldrh	r3, [r3, #0]
 800893a:	429a      	cmp	r2, r3
 800893c:	d217      	bcs.n	800896e <_ZN13Heattreatment26stateMachineProcessControlEv+0x63a>
				||((act_temperature_c3 >= m_temperatureLowerBound)&&(act_temperature_c3 <=m_temeperatureUpperBound))
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	891a      	ldrh	r2, [r3, #8]
 8008942:	4b2e      	ldr	r3, [pc, #184]	; (80089fc <_ZN13Heattreatment26stateMachineProcessControlEv+0x6c8>)
 8008944:	881b      	ldrh	r3, [r3, #0]
 8008946:	429a      	cmp	r2, r3
 8008948:	d805      	bhi.n	8008956 <_ZN13Heattreatment26stateMachineProcessControlEv+0x622>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	88da      	ldrh	r2, [r3, #6]
 800894e:	4b2b      	ldr	r3, [pc, #172]	; (80089fc <_ZN13Heattreatment26stateMachineProcessControlEv+0x6c8>)
 8008950:	881b      	ldrh	r3, [r3, #0]
 8008952:	429a      	cmp	r2, r3
 8008954:	d20b      	bcs.n	800896e <_ZN13Heattreatment26stateMachineProcessControlEv+0x63a>
				||((act_temperature_c4 >= m_temperatureLowerBound)&&(act_temperature_c4 <=m_temeperatureUpperBound)))
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	891a      	ldrh	r2, [r3, #8]
 800895a:	4b29      	ldr	r3, [pc, #164]	; (8008a00 <_ZN13Heattreatment26stateMachineProcessControlEv+0x6cc>)
 800895c:	881b      	ldrh	r3, [r3, #0]
 800895e:	429a      	cmp	r2, r3
 8008960:	d809      	bhi.n	8008976 <_ZN13Heattreatment26stateMachineProcessControlEv+0x642>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	88da      	ldrh	r2, [r3, #6]
 8008966:	4b26      	ldr	r3, [pc, #152]	; (8008a00 <_ZN13Heattreatment26stateMachineProcessControlEv+0x6cc>)
 8008968:	881b      	ldrh	r3, [r3, #0]
 800896a:	429a      	cmp	r2, r3
 800896c:	d303      	bcc.n	8008976 <_ZN13Heattreatment26stateMachineProcessControlEv+0x642>
				{
					stop_timer_count = 0;
 800896e:	4b25      	ldr	r3, [pc, #148]	; (8008a04 <_ZN13Heattreatment26stateMachineProcessControlEv+0x6d0>)
 8008970:	2200      	movs	r2, #0
 8008972:	701a      	strb	r2, [r3, #0]
 8008974:	e002      	b.n	800897c <_ZN13Heattreatment26stateMachineProcessControlEv+0x648>
				}
				else
				{
					stop_timer_count = 1;
 8008976:	4b23      	ldr	r3, [pc, #140]	; (8008a04 <_ZN13Heattreatment26stateMachineProcessControlEv+0x6d0>)
 8008978:	2201      	movs	r2, #1
 800897a:	701a      	strb	r2, [r3, #0]
				}
				if(process_complete==2){
 800897c:	4b22      	ldr	r3, [pc, #136]	; (8008a08 <_ZN13Heattreatment26stateMachineProcessControlEv+0x6d4>)
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	2b02      	cmp	r3, #2
 8008982:	d109      	bne.n	8008998 <_ZN13Heattreatment26stateMachineProcessControlEv+0x664>
					process_complete = 0;
 8008984:	4b20      	ldr	r3, [pc, #128]	; (8008a08 <_ZN13Heattreatment26stateMachineProcessControlEv+0x6d4>)
 8008986:	2200      	movs	r2, #0
 8008988:	701a      	strb	r2, [r3, #0]
					start_process_control_timer=0;
 800898a:	4b19      	ldr	r3, [pc, #100]	; (80089f0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x6bc>)
 800898c:	2200      	movs	r2, #0
 800898e:	701a      	strb	r2, [r3, #0]
					SEQMONITOR = 26;
 8008990:	4b1e      	ldr	r3, [pc, #120]	; (8008a0c <_ZN13Heattreatment26stateMachineProcessControlEv+0x6d8>)
 8008992:	221a      	movs	r2, #26
 8008994:	701a      	strb	r2, [r3, #0]
 8008996:	e002      	b.n	800899e <_ZN13Heattreatment26stateMachineProcessControlEv+0x66a>
				}
				else{
					SEQMONITOR = 25;
 8008998:	4b1c      	ldr	r3, [pc, #112]	; (8008a0c <_ZN13Heattreatment26stateMachineProcessControlEv+0x6d8>)
 800899a:	2219      	movs	r2, #25
 800899c:	701a      	strb	r2, [r3, #0]
				}
				status_to_server=23;
 800899e:	4b1c      	ldr	r3, [pc, #112]	; (8008a10 <_ZN13Heattreatment26stateMachineProcessControlEv+0x6dc>)
 80089a0:	2217      	movs	r2, #23
 80089a2:	701a      	strb	r2, [r3, #0]
			 break;
 80089a4:	e00e      	b.n	80089c4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x690>
		case 26:
			status_to_server=30;
 80089a6:	4b1a      	ldr	r3, [pc, #104]	; (8008a10 <_ZN13Heattreatment26stateMachineProcessControlEv+0x6dc>)
 80089a8:	221e      	movs	r2, #30
 80089aa:	701a      	strb	r2, [r3, #0]
			SEQMONITOR   = 20;
 80089ac:	4b17      	ldr	r3, [pc, #92]	; (8008a0c <_ZN13Heattreatment26stateMachineProcessControlEv+0x6d8>)
 80089ae:	2214      	movs	r2, #20
 80089b0:	701a      	strb	r2, [r3, #0]
			temperature_reference = 32;
 80089b2:	4b0e      	ldr	r3, [pc, #56]	; (80089ec <_ZN13Heattreatment26stateMachineProcessControlEv+0x6b8>)
 80089b4:	2220      	movs	r2, #32
 80089b6:	801a      	strh	r2, [r3, #0]
		break;
 80089b8:	e004      	b.n	80089c4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x690>
		default:
			SEQMONITOR   = 10;
 80089ba:	4b14      	ldr	r3, [pc, #80]	; (8008a0c <_ZN13Heattreatment26stateMachineProcessControlEv+0x6d8>)
 80089bc:	220a      	movs	r2, #10
 80089be:	701a      	strb	r2, [r3, #0]
		break;
 80089c0:	e000      	b.n	80089c4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x690>
		break;
 80089c2:	bf00      	nop
	}
	if((IDGen_Skip_Http==10)&&(SEQMONITOR!=26))
 80089c4:	4b13      	ldr	r3, [pc, #76]	; (8008a14 <_ZN13Heattreatment26stateMachineProcessControlEv+0x6e0>)
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	2b0a      	cmp	r3, #10
 80089ca:	d106      	bne.n	80089da <_ZN13Heattreatment26stateMachineProcessControlEv+0x6a6>
 80089cc:	4b0f      	ldr	r3, [pc, #60]	; (8008a0c <_ZN13Heattreatment26stateMachineProcessControlEv+0x6d8>)
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	2b1a      	cmp	r3, #26
 80089d2:	d002      	beq.n	80089da <_ZN13Heattreatment26stateMachineProcessControlEv+0x6a6>
	{
		SEQMONITOR = 26;
 80089d4:	4b0d      	ldr	r3, [pc, #52]	; (8008a0c <_ZN13Heattreatment26stateMachineProcessControlEv+0x6d8>)
 80089d6:	221a      	movs	r2, #26
 80089d8:	701a      	strb	r2, [r3, #0]
	}
}
 80089da:	bf00      	nop
 80089dc:	370c      	adds	r7, #12
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop
 80089e8:	2000062a 	.word	0x2000062a
 80089ec:	2000062c 	.word	0x2000062c
 80089f0:	20000637 	.word	0x20000637
 80089f4:	2000062e 	.word	0x2000062e
 80089f8:	20000630 	.word	0x20000630
 80089fc:	20000632 	.word	0x20000632
 8008a00:	20000634 	.word	0x20000634
 8008a04:	20000638 	.word	0x20000638
 8008a08:	20000639 	.word	0x20000639
 8008a0c:	20000636 	.word	0x20000636
 8008a10:	20000624 	.word	0x20000624
 8008a14:	200000ff 	.word	0x200000ff

08008a18 <_ZN9ModbusrtuC1Ev>:
constexpr uint16_t Step2_Temperature_Add= 4099;
constexpr uint16_t Step2_Time_Add= 4100;

constexpr uint8_t WaterTemperatureId=0x05;
uint8_t TxSeqComplete;
Modbusrtu::Modbusrtu() {
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	4a0e      	ldr	r2, [pc, #56]	; (8008a5c <_ZN9ModbusrtuC1Ev+0x44>)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	601a      	str	r2, [r3, #0]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	769a      	strb	r2, [r3, #26]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a0c      	ldr	r2, [pc, #48]	; (8008a60 <_ZN9ModbusrtuC1Ev+0x48>)
 8008a30:	331b      	adds	r3, #27
 8008a32:	4611      	mov	r1, r2
 8008a34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f006 fe87 	bl	800f74c <memcpy>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4a08      	ldr	r2, [pc, #32]	; (8008a64 <_ZN9ModbusrtuC1Ev+0x4c>)
 8008a42:	f203 131b 	addw	r3, r3, #283	; 0x11b
 8008a46:	4611      	mov	r1, r2
 8008a48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f006 fe7d 	bl	800f74c <memcpy>
	// TODO Auto-generated constructor stub

}
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4618      	mov	r0, r3
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	080104e8 	.word	0x080104e8
 8008a60:	080100d0 	.word	0x080100d0
 8008a64:	080101d0 	.word	0x080101d0

08008a68 <_ZN9ModbusrtuD1Ev>:

Modbusrtu::~Modbusrtu() {
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	4a04      	ldr	r2, [pc, #16]	; (8008a84 <_ZN9ModbusrtuD1Ev+0x1c>)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4618      	mov	r0, r3
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr
 8008a84:	080104e8 	.word	0x080104e8

08008a88 <_ZN9ModbusrtuD0Ev>:
Modbusrtu::~Modbusrtu() {
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
}
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f7ff ffe9 	bl	8008a68 <_ZN9ModbusrtuD1Ev>
 8008a96:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f006 fe1f 	bl	800f6de <_ZdlPvj>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3708      	adds	r7, #8
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
	...

08008aac <_ZN9Modbusrtu21ModbusReadTransactionEv>:

void Modbusrtu::ModbusReadTransaction(void)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
	m_settemperature = temperature_reference*10;
 8008ab4:	4b9a      	ldr	r3, [pc, #616]	; (8008d20 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x274>)
 8008ab6:	881b      	ldrh	r3, [r3, #0]
 8008ab8:	461a      	mov	r2, r3
 8008aba:	0092      	lsls	r2, r2, #2
 8008abc:	4413      	add	r3, r2
 8008abe:	005b      	lsls	r3, r3, #1
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	821a      	strh	r2, [r3, #16]
	switch(Cntid)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	791b      	ldrb	r3, [r3, #4]
 8008aca:	2b05      	cmp	r3, #5
 8008acc:	f200 81d0 	bhi.w	8008e70 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x3c4>
 8008ad0:	a201      	add	r2, pc, #4	; (adr r2, 8008ad8 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2c>)
 8008ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad6:	bf00      	nop
 8008ad8:	08008af1 	.word	0x08008af1
 8008adc:	08008b77 	.word	0x08008b77
 8008ae0:	08008c01 	.word	0x08008c01
 8008ae4:	08008c91 	.word	0x08008c91
 8008ae8:	08008d25 	.word	0x08008d25
 8008aec:	08008deb 	.word	0x08008deb
	{
	case 0:
		_u8MBSlave 			= mTemperatureSensorId;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	7e9a      	ldrb	r2, [r3, #26]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	715a      	strb	r2, [r3, #5]
		u8MBFunction 		= 0x03;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2203      	movs	r2, #3
 8008afc:	719a      	strb	r2, [r3, #6]
		_u16ReadAddress 	= 0x00;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	811a      	strh	r2, [r3, #8]
		_u16ReadQty     	= 0x01;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2201      	movs	r2, #1
 8008b08:	731a      	strb	r2, [r3, #12]
		u8ModbusRegister[0] = _u8MBSlave;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	795a      	ldrb	r2, [r3, #5]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	749a      	strb	r2, [r3, #18]
		u8ModbusRegister[1] =  u8MBFunction;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	799a      	ldrb	r2, [r3, #6]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	74da      	strb	r2, [r3, #19]
		u8ModbusRegister[2] =  0x01;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	751a      	strb	r2, [r3, #20]
		u8ModbusRegister[3] =  static_cast<uint8_t>((_u16ReadAddress & 0xff00)>>8);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	891b      	ldrh	r3, [r3, #8]
 8008b24:	0a1b      	lsrs	r3, r3, #8
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	b2da      	uxtb	r2, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	755a      	strb	r2, [r3, #21]
		u8ModbusRegister[4] =  static_cast<uint8_t>(_u16ReadAddress & 0x00ff);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	891b      	ldrh	r3, [r3, #8]
 8008b32:	b2da      	uxtb	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	759a      	strb	r2, [r3, #22]
		u8ModbusRegister[5] = _u16ReadQty;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	7b1a      	ldrb	r2, [r3, #12]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	75da      	strb	r2, [r3, #23]
		u16CRC 				= ASCChecksum(u8ModbusRegister,6);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	3312      	adds	r3, #18
 8008b44:	2206      	movs	r2, #6
 8008b46:	4619      	mov	r1, r3
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 f9af 	bl	8008eac <_ZN9Modbusrtu11ASCChecksumEPhh>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	461a      	mov	r2, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	81da      	strh	r2, [r3, #14]
		u8ModbusRegister[6] = static_cast<uint8_t>(u16CRC & 0x00ff);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	89db      	ldrh	r3, [r3, #14]
 8008b5a:	b2da      	uxtb	r2, r3
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	761a      	strb	r2, [r3, #24]
		u8ModbusRegister[7] = static_cast<uint8_t>((u16CRC & 0xff00)>>8);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	89db      	ldrh	r3, [r3, #14]
 8008b64:	0a1b      	lsrs	r3, r3, #8
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	b2da      	uxtb	r2, r3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	765a      	strb	r2, [r3, #25]

		Cntid=1;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2201      	movs	r2, #1
 8008b72:	711a      	strb	r2, [r3, #4]
	break;
 8008b74:	e183      	b.n	8008e7e <_ZN9Modbusrtu21ModbusReadTransactionEv+0x3d2>

	case 1:
		_u8MBSlave 			= mTemperatureSensorId;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	7e9a      	ldrb	r2, [r3, #26]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	715a      	strb	r2, [r3, #5]
		u8MBFunction 		= 0x06;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2206      	movs	r2, #6
 8008b82:	719a      	strb	r2, [r3, #6]
		_u16WriteAddress 	= Step1_Temperature_Add;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	815a      	strh	r2, [r3, #10]
		u8ModbusRegister[0] = _u8MBSlave;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	795a      	ldrb	r2, [r3, #5]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	749a      	strb	r2, [r3, #18]
		u8ModbusRegister[1] =  u8MBFunction;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	799a      	ldrb	r2, [r3, #6]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	74da      	strb	r2, [r3, #19]
		u8ModbusRegister[2] = static_cast<uint8_t>((_u16WriteAddress & 0xff00)>>8);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	895b      	ldrh	r3, [r3, #10]
 8008b9e:	0a1b      	lsrs	r3, r3, #8
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	b2da      	uxtb	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	751a      	strb	r2, [r3, #20]
		u8ModbusRegister[3] = static_cast<uint8_t>(_u16WriteAddress & 0x00ff);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	895b      	ldrh	r3, [r3, #10]
 8008bac:	b2da      	uxtb	r2, r3
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	755a      	strb	r2, [r3, #21]
		u8ModbusRegister[4] = static_cast<uint8_t>((m_settemperature & 0xff00)>>8);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	8a1b      	ldrh	r3, [r3, #16]
 8008bb6:	0a1b      	lsrs	r3, r3, #8
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	b2da      	uxtb	r2, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	759a      	strb	r2, [r3, #22]
		u8ModbusRegister[5] = static_cast<uint8_t>(m_settemperature & 0x00ff);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	8a1b      	ldrh	r3, [r3, #16]
 8008bc4:	b2da      	uxtb	r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	75da      	strb	r2, [r3, #23]
		u16CRC 				= ASCChecksum(u8ModbusRegister,6);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	3312      	adds	r3, #18
 8008bce:	2206      	movs	r2, #6
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f96a 	bl	8008eac <_ZN9Modbusrtu11ASCChecksumEPhh>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	461a      	mov	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	81da      	strh	r2, [r3, #14]
		u8ModbusRegister[6] = static_cast<uint8_t>(u16CRC & 0x00ff);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	89db      	ldrh	r3, [r3, #14]
 8008be4:	b2da      	uxtb	r2, r3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	761a      	strb	r2, [r3, #24]
		u8ModbusRegister[7] = static_cast<uint8_t>((u16CRC & 0xff00)>>8);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	89db      	ldrh	r3, [r3, #14]
 8008bee:	0a1b      	lsrs	r3, r3, #8
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	b2da      	uxtb	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	765a      	strb	r2, [r3, #25]
		Cntid=2;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2202      	movs	r2, #2
 8008bfc:	711a      	strb	r2, [r3, #4]
	break;
 8008bfe:	e13e      	b.n	8008e7e <_ZN9Modbusrtu21ModbusReadTransactionEv+0x3d2>
	case 2:
			_u8MBSlave 			= mTemperatureSensorId;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	7e9a      	ldrb	r2, [r3, #26]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	715a      	strb	r2, [r3, #5]
			u8MBFunction 		= 0x06;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2206      	movs	r2, #6
 8008c0c:	719a      	strb	r2, [r3, #6]
			_u16WriteAddress 	= Step1_Time_Add;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f241 0201 	movw	r2, #4097	; 0x1001
 8008c14:	815a      	strh	r2, [r3, #10]
			u8ModbusRegister[0] = _u8MBSlave;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	795a      	ldrb	r2, [r3, #5]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	749a      	strb	r2, [r3, #18]
			u8ModbusRegister[1] =  u8MBFunction;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	799a      	ldrb	r2, [r3, #6]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	74da      	strb	r2, [r3, #19]
			u8ModbusRegister[2] = static_cast<uint8_t>((_u16WriteAddress & 0xff00)>>8);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	895b      	ldrh	r3, [r3, #10]
 8008c2a:	0a1b      	lsrs	r3, r3, #8
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	b2da      	uxtb	r2, r3
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	751a      	strb	r2, [r3, #20]
			u8ModbusRegister[3] = static_cast<uint8_t>(_u16WriteAddress & 0x00ff);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	895b      	ldrh	r3, [r3, #10]
 8008c38:	b2da      	uxtb	r2, r3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	755a      	strb	r2, [r3, #21]
			u8ModbusRegister[4] = static_cast<uint8_t>(((m_settemperature+200) & 0xff00)>>8);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	8a1b      	ldrh	r3, [r3, #16]
 8008c42:	33c8      	adds	r3, #200	; 0xc8
 8008c44:	121b      	asrs	r3, r3, #8
 8008c46:	b2da      	uxtb	r2, r3
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	759a      	strb	r2, [r3, #22]
			u8ModbusRegister[5] = static_cast<uint8_t>((m_settemperature+200) & 0x00ff);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	8a1b      	ldrh	r3, [r3, #16]
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	3b38      	subs	r3, #56	; 0x38
 8008c54:	b2da      	uxtb	r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	75da      	strb	r2, [r3, #23]
			u16CRC 				= ASCChecksum(u8ModbusRegister,6);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	3312      	adds	r3, #18
 8008c5e:	2206      	movs	r2, #6
 8008c60:	4619      	mov	r1, r3
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 f922 	bl	8008eac <_ZN9Modbusrtu11ASCChecksumEPhh>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	81da      	strh	r2, [r3, #14]
			u8ModbusRegister[6] = static_cast<uint8_t>(u16CRC & 0x00ff);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	89db      	ldrh	r3, [r3, #14]
 8008c74:	b2da      	uxtb	r2, r3
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	761a      	strb	r2, [r3, #24]
			u8ModbusRegister[7] = static_cast<uint8_t>((u16CRC & 0xff00)>>8);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	89db      	ldrh	r3, [r3, #14]
 8008c7e:	0a1b      	lsrs	r3, r3, #8
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	b2da      	uxtb	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	765a      	strb	r2, [r3, #25]
			Cntid=3;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2203      	movs	r2, #3
 8008c8c:	711a      	strb	r2, [r3, #4]
		break;
 8008c8e:	e0f6      	b.n	8008e7e <_ZN9Modbusrtu21ModbusReadTransactionEv+0x3d2>
	case 3:
			_u8MBSlave 			= mTemperatureSensorId;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	7e9a      	ldrb	r2, [r3, #26]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	715a      	strb	r2, [r3, #5]
			u8MBFunction 		= 0x06;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2206      	movs	r2, #6
 8008c9c:	719a      	strb	r2, [r3, #6]
			_u16WriteAddress 	= Step2_Temperature_Add;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f241 0203 	movw	r2, #4099	; 0x1003
 8008ca4:	815a      	strh	r2, [r3, #10]
			u8ModbusRegister[0] = _u8MBSlave;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	795a      	ldrb	r2, [r3, #5]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	749a      	strb	r2, [r3, #18]
			u8ModbusRegister[1] =  u8MBFunction;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	799a      	ldrb	r2, [r3, #6]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	74da      	strb	r2, [r3, #19]
			u8ModbusRegister[2] = static_cast<uint8_t>((_u16WriteAddress & 0xff00)>>8);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	895b      	ldrh	r3, [r3, #10]
 8008cba:	0a1b      	lsrs	r3, r3, #8
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	b2da      	uxtb	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	751a      	strb	r2, [r3, #20]
			u8ModbusRegister[3] = static_cast<uint8_t>(_u16WriteAddress & 0x00ff);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	895b      	ldrh	r3, [r3, #10]
 8008cc8:	b2da      	uxtb	r2, r3
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	755a      	strb	r2, [r3, #21]
			u8ModbusRegister[4] = static_cast<uint8_t>(((m_settemperature-200) & 0xff00)>>8);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	8a1b      	ldrh	r3, [r3, #16]
 8008cd2:	3bc8      	subs	r3, #200	; 0xc8
 8008cd4:	121b      	asrs	r3, r3, #8
 8008cd6:	b2da      	uxtb	r2, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	759a      	strb	r2, [r3, #22]
			u8ModbusRegister[5] = static_cast<uint8_t>((m_settemperature-200) & 0x00ff);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	8a1b      	ldrh	r3, [r3, #16]
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	3338      	adds	r3, #56	; 0x38
 8008ce4:	b2da      	uxtb	r2, r3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	75da      	strb	r2, [r3, #23]
			u16CRC 				= ASCChecksum(u8ModbusRegister,6);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	3312      	adds	r3, #18
 8008cee:	2206      	movs	r2, #6
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f8da 	bl	8008eac <_ZN9Modbusrtu11ASCChecksumEPhh>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	81da      	strh	r2, [r3, #14]
			u8ModbusRegister[6] = static_cast<uint8_t>(u16CRC & 0x00ff);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	89db      	ldrh	r3, [r3, #14]
 8008d04:	b2da      	uxtb	r2, r3
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	761a      	strb	r2, [r3, #24]
			u8ModbusRegister[7] = static_cast<uint8_t>((u16CRC & 0xff00)>>8);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	89db      	ldrh	r3, [r3, #14]
 8008d0e:	0a1b      	lsrs	r3, r3, #8
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	b2da      	uxtb	r2, r3
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	765a      	strb	r2, [r3, #25]
			Cntid=4;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2204      	movs	r2, #4
 8008d1c:	711a      	strb	r2, [r3, #4]

		break;
 8008d1e:	e0ae      	b.n	8008e7e <_ZN9Modbusrtu21ModbusReadTransactionEv+0x3d2>
 8008d20:	2000062c 	.word	0x2000062c
	case 4:
				_u8MBSlave 			= mTemperatureSensorId;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	7e9a      	ldrb	r2, [r3, #26]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	715a      	strb	r2, [r3, #5]
				u8MBFunction 		= 0x06;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2206      	movs	r2, #6
 8008d30:	719a      	strb	r2, [r3, #6]
				_u16WriteAddress 	= Step2_Time_Add;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f241 0204 	movw	r2, #4100	; 0x1004
 8008d38:	815a      	strh	r2, [r3, #10]
				u8ModbusRegister[0] = _u8MBSlave;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	795a      	ldrb	r2, [r3, #5]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	749a      	strb	r2, [r3, #18]
				u8ModbusRegister[1] =  u8MBFunction;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	799a      	ldrb	r2, [r3, #6]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	74da      	strb	r2, [r3, #19]
				u8ModbusRegister[2] = static_cast<uint8_t>((_u16WriteAddress & 0xff00)>>8);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	895b      	ldrh	r3, [r3, #10]
 8008d4e:	0a1b      	lsrs	r3, r3, #8
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	b2da      	uxtb	r2, r3
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	751a      	strb	r2, [r3, #20]
				u8ModbusRegister[3] = static_cast<uint8_t>(_u16WriteAddress & 0x00ff);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	895b      	ldrh	r3, [r3, #10]
 8008d5c:	b2da      	uxtb	r2, r3
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	755a      	strb	r2, [r3, #21]
				u8ModbusRegister[4] = static_cast<uint8_t>(((m_settemperature+200) & 0xff00)>>8);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	8a1b      	ldrh	r3, [r3, #16]
 8008d66:	33c8      	adds	r3, #200	; 0xc8
 8008d68:	121b      	asrs	r3, r3, #8
 8008d6a:	b2da      	uxtb	r2, r3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	759a      	strb	r2, [r3, #22]
				u8ModbusRegister[5] = static_cast<uint8_t>((m_settemperature+200) & 0x00ff);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	8a1b      	ldrh	r3, [r3, #16]
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	3b38      	subs	r3, #56	; 0x38
 8008d78:	b2da      	uxtb	r2, r3
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	75da      	strb	r2, [r3, #23]
				u16CRC 				= ASCChecksum(u8ModbusRegister,6);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	3312      	adds	r3, #18
 8008d82:	2206      	movs	r2, #6
 8008d84:	4619      	mov	r1, r3
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f890 	bl	8008eac <_ZN9Modbusrtu11ASCChecksumEPhh>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	461a      	mov	r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	81da      	strh	r2, [r3, #14]
				u8ModbusRegister[6] = static_cast<uint8_t>(u16CRC & 0x00ff);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	89db      	ldrh	r3, [r3, #14]
 8008d98:	b2da      	uxtb	r2, r3
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	761a      	strb	r2, [r3, #24]
				u8ModbusRegister[7] = static_cast<uint8_t>((u16CRC & 0xff00)>>8);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	89db      	ldrh	r3, [r3, #14]
 8008da2:	0a1b      	lsrs	r3, r3, #8
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	b2da      	uxtb	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	765a      	strb	r2, [r3, #25]
				Cntid=5;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2205      	movs	r2, #5
 8008db0:	711a      	strb	r2, [r3, #4]
				if(mTemperatureSensorId ==1){mTemperatureSensorId=2;}
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	7e9b      	ldrb	r3, [r3, #26]
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d103      	bne.n	8008dc2 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x316>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2202      	movs	r2, #2
 8008dbe:	769a      	strb	r2, [r3, #26]
				else if(mTemperatureSensorId ==2){mTemperatureSensorId=3;}
				else if(mTemperatureSensorId ==3){mTemperatureSensorId=4;}
				else{mTemperatureSensorId=1;}
			break;
 8008dc0:	e05d      	b.n	8008e7e <_ZN9Modbusrtu21ModbusReadTransactionEv+0x3d2>
				else if(mTemperatureSensorId ==2){mTemperatureSensorId=3;}
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	7e9b      	ldrb	r3, [r3, #26]
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d103      	bne.n	8008dd2 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x326>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2203      	movs	r2, #3
 8008dce:	769a      	strb	r2, [r3, #26]
			break;
 8008dd0:	e055      	b.n	8008e7e <_ZN9Modbusrtu21ModbusReadTransactionEv+0x3d2>
				else if(mTemperatureSensorId ==3){mTemperatureSensorId=4;}
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	7e9b      	ldrb	r3, [r3, #26]
 8008dd6:	2b03      	cmp	r3, #3
 8008dd8:	d103      	bne.n	8008de2 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x336>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2204      	movs	r2, #4
 8008dde:	769a      	strb	r2, [r3, #26]
			break;
 8008de0:	e04d      	b.n	8008e7e <_ZN9Modbusrtu21ModbusReadTransactionEv+0x3d2>
				else{mTemperatureSensorId=1;}
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2201      	movs	r2, #1
 8008de6:	769a      	strb	r2, [r3, #26]
			break;
 8008de8:	e049      	b.n	8008e7e <_ZN9Modbusrtu21ModbusReadTransactionEv+0x3d2>
	case 5:
			u8MBFunction		= 0x03;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2203      	movs	r2, #3
 8008dee:	719a      	strb	r2, [r3, #6]
			_u16WriteAddress 	= 0x00;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	815a      	strh	r2, [r3, #10]
			_u16ReadAddress  	= 0x04;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2204      	movs	r2, #4
 8008dfa:	811a      	strh	r2, [r3, #8]
			u8ModbusRegister[0] = WaterTemperatureId;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2205      	movs	r2, #5
 8008e00:	749a      	strb	r2, [r3, #18]
			u8ModbusRegister[1] =  u8MBFunction;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	799a      	ldrb	r2, [r3, #6]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	74da      	strb	r2, [r3, #19]
			u8ModbusRegister[2] = static_cast<uint8_t>((_u16WriteAddress & 0xff00)>>8);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	895b      	ldrh	r3, [r3, #10]
 8008e0e:	0a1b      	lsrs	r3, r3, #8
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	b2da      	uxtb	r2, r3
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	751a      	strb	r2, [r3, #20]
			u8ModbusRegister[3] = static_cast<uint8_t>(_u16WriteAddress & 0x00ff);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	895b      	ldrh	r3, [r3, #10]
 8008e1c:	b2da      	uxtb	r2, r3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	755a      	strb	r2, [r3, #21]
			u8ModbusRegister[4] = static_cast<uint8_t>((_u16ReadAddress & 0xff00)>>8);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	891b      	ldrh	r3, [r3, #8]
 8008e26:	0a1b      	lsrs	r3, r3, #8
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	b2da      	uxtb	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	759a      	strb	r2, [r3, #22]
			u8ModbusRegister[5] = static_cast<uint8_t>(_u16ReadAddress & 0x00ff);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	891b      	ldrh	r3, [r3, #8]
 8008e34:	b2da      	uxtb	r2, r3
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	75da      	strb	r2, [r3, #23]
			u16CRC 				= ASCChecksum(u8ModbusRegister,6);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	3312      	adds	r3, #18
 8008e3e:	2206      	movs	r2, #6
 8008e40:	4619      	mov	r1, r3
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 f832 	bl	8008eac <_ZN9Modbusrtu11ASCChecksumEPhh>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	81da      	strh	r2, [r3, #14]
			u8ModbusRegister[6] = static_cast<uint8_t>(u16CRC & 0x00ff);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	89db      	ldrh	r3, [r3, #14]
 8008e54:	b2da      	uxtb	r2, r3
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	761a      	strb	r2, [r3, #24]
			u8ModbusRegister[7] = static_cast<uint8_t>((u16CRC & 0xff00)>>8);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	89db      	ldrh	r3, [r3, #14]
 8008e5e:	0a1b      	lsrs	r3, r3, #8
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	b2da      	uxtb	r2, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	765a      	strb	r2, [r3, #25]
			Cntid=0;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	711a      	strb	r2, [r3, #4]
	break;
 8008e6e:	e006      	b.n	8008e7e <_ZN9Modbusrtu21ModbusReadTransactionEv+0x3d2>
	default:
		Cntid=0;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	711a      	strb	r2, [r3, #4]
		mTemperatureSensorId=1;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	769a      	strb	r2, [r3, #26]
	break;
 8008e7c:	bf00      	nop
	}


	//out_read_rxint_set.Noofbytesrx = (_u16ReadQty*2)+5;
	HAL_UART_Transmit_IT(&huart1,u8ModbusRegister,8);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	3312      	adds	r3, #18
 8008e82:	2208      	movs	r2, #8
 8008e84:	4619      	mov	r1, r3
 8008e86:	4803      	ldr	r0, [pc, #12]	; (8008e94 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x3e8>)
 8008e88:	f005 f8d0 	bl	800e02c <HAL_UART_Transmit_IT>

}
 8008e8c:	bf00      	nop
 8008e8e:	3708      	adds	r7, #8
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	20000330 	.word	0x20000330

08008e98 <HAL_UART_TxCpltCallback>:
//Hardware callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_IT(&huart1,u8rxbuf,13);
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <_ZN9Modbusrtu11ASCChecksumEPhh>:

uint16_t Modbusrtu::ASCChecksum(uint8_t *ASCSrc, uint8_t NoOfBytes)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b087      	sub	sp, #28
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	71fb      	strb	r3, [r7, #7]
	uint8_t i, CheckSumBytes;
	uint8_t CRCRegLow = 0xff;
 8008eba:	23ff      	movs	r3, #255	; 0xff
 8008ebc:	75bb      	strb	r3, [r7, #22]
	uint8_t CRCRegHigh = 0xff;
 8008ebe:	23ff      	movs	r3, #255	; 0xff
 8008ec0:	757b      	strb	r3, [r7, #21]
	uint8_t CRCIndex;

	CheckSumBytes = NoOfBytes;
 8008ec2:	79fb      	ldrb	r3, [r7, #7]
 8008ec4:	753b      	strb	r3, [r7, #20]
   	for(i=0;i < CheckSumBytes;i++)
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	75fb      	strb	r3, [r7, #23]
 8008eca:	7dfa      	ldrb	r2, [r7, #23]
 8008ecc:	7d3b      	ldrb	r3, [r7, #20]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d217      	bcs.n	8008f02 <_ZN9Modbusrtu11ASCChecksumEPhh+0x56>
   	{
	    CRCIndex = CRCRegLow ^ *ASCSrc++; 				//TransmittingData[i];
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	1c5a      	adds	r2, r3, #1
 8008ed6:	60ba      	str	r2, [r7, #8]
 8008ed8:	781a      	ldrb	r2, [r3, #0]
 8008eda:	7dbb      	ldrb	r3, [r7, #22]
 8008edc:	4053      	eors	r3, r2
 8008ede:	74fb      	strb	r3, [r7, #19]
		CRCRegLow = CRCRegHigh ^ CRCArrayHigh[CRCIndex];
 8008ee0:	7cfb      	ldrb	r3, [r7, #19]
 8008ee2:	68fa      	ldr	r2, [r7, #12]
 8008ee4:	4413      	add	r3, r2
 8008ee6:	7eda      	ldrb	r2, [r3, #27]
 8008ee8:	7d7b      	ldrb	r3, [r7, #21]
 8008eea:	4053      	eors	r3, r2
 8008eec:	75bb      	strb	r3, [r7, #22]
		CRCRegHigh = CRCArrayLow[CRCIndex];
 8008eee:	7cfb      	ldrb	r3, [r7, #19]
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8008ef8:	757b      	strb	r3, [r7, #21]
   	for(i=0;i < CheckSumBytes;i++)
 8008efa:	7dfb      	ldrb	r3, [r7, #23]
 8008efc:	3301      	adds	r3, #1
 8008efe:	75fb      	strb	r3, [r7, #23]
 8008f00:	e7e3      	b.n	8008eca <_ZN9Modbusrtu11ASCChecksumEPhh+0x1e>

	}
	return (CRCRegHigh << 8 | CRCRegLow );
 8008f02:	7d7b      	ldrb	r3, [r7, #21]
 8008f04:	021b      	lsls	r3, r3, #8
 8008f06:	b21a      	sxth	r2, r3
 8008f08:	7dbb      	ldrb	r3, [r7, #22]
 8008f0a:	b21b      	sxth	r3, r3
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	b21b      	sxth	r3, r3
 8008f10:	b29b      	uxth	r3, r3
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	371c      	adds	r7, #28
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr
	...

08008f20 <_ZN14OfflineStorageC1Ev>:
uint16_t ProcessId_Value_K1;
uint16_t seq1_count_inc_K1,seq2_count_inc_K1;



OfflineStorage::OfflineStorage() {
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	4a04      	ldr	r2, [pc, #16]	; (8008f3c <_ZN14OfflineStorageC1Ev+0x1c>)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4618      	mov	r0, r3
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr
 8008f3c:	080104f8 	.word	0x080104f8

08008f40 <_ZN14OfflineStorageD1Ev>:

OfflineStorage::~OfflineStorage() {
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	4a04      	ldr	r2, [pc, #16]	; (8008f5c <_ZN14OfflineStorageD1Ev+0x1c>)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	4618      	mov	r0, r3
 8008f52:	370c      	adds	r7, #12
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr
 8008f5c:	080104f8 	.word	0x080104f8

08008f60 <_ZN14OfflineStorageD0Ev>:
OfflineStorage::~OfflineStorage() {
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
}
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f7ff ffe9 	bl	8008f40 <_ZN14OfflineStorageD1Ev>
 8008f6e:	2140      	movs	r1, #64	; 0x40
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f006 fbb4 	bl	800f6de <_ZdlPvj>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3708      	adds	r7, #8
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <_ZN14OfflineStorage3runEv>:

void OfflineStorage::run()
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
	m_writeHeattreatmentData();
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 f807 	bl	8008f9c <_ZN14OfflineStorage24m_writeHeattreatmentDataEv>
	m_writeCountinc();
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 f8ec 	bl	800916c <_ZN14OfflineStorage15m_writeCountincEv>

}
 8008f94:	bf00      	nop
 8008f96:	3708      	adds	r7, #8
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <_ZN14OfflineStorage24m_writeHeattreatmentDataEv>:

	W25qxx_EraseSector(0);
	W25qxx_WriteSector(m_writeFlashBuf,0,0,1);
}

void OfflineStorage::m_writeHeattreatmentData(){
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
	if((ProcessId_Value != ProcessId_Value_K1)||(updateSetData==1)||
 8008fa4:	4b60      	ldr	r3, [pc, #384]	; (8009128 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x18c>)
 8008fa6:	881a      	ldrh	r2, [r3, #0]
 8008fa8:	4b60      	ldr	r3, [pc, #384]	; (800912c <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x190>)
 8008faa:	881b      	ldrh	r3, [r3, #0]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d10a      	bne.n	8008fc6 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x2a>
 8008fb0:	4b5f      	ldr	r3, [pc, #380]	; (8009130 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x194>)
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d006      	beq.n	8008fc6 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x2a>
			(SEQMONITOR != SEQMONITOR_K1))
 8008fb8:	4b5e      	ldr	r3, [pc, #376]	; (8009134 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x198>)
 8008fba:	781a      	ldrb	r2, [r3, #0]
 8008fbc:	4b5e      	ldr	r3, [pc, #376]	; (8009138 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x19c>)
 8008fbe:	781b      	ldrb	r3, [r3, #0]
	if((ProcessId_Value != ProcessId_Value_K1)||(updateSetData==1)||
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	f000 80ac 	beq.w	800911e <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x182>
	{
		m_writeFlashBuf[0] = (uint8_t)(ProcessId_Value && 0xff);
 8008fc6:	4b58      	ldr	r3, [pc, #352]	; (8009128 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x18c>)
 8008fc8:	881b      	ldrh	r3, [r3, #0]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	bf14      	ite	ne
 8008fce:	2301      	movne	r3, #1
 8008fd0:	2300      	moveq	r3, #0
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	711a      	strb	r2, [r3, #4]
		m_writeFlashBuf[1] = (uint8_t)(ProcessId_Value>>8) && 0xff;
 8008fda:	4b53      	ldr	r3, [pc, #332]	; (8009128 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x18c>)
 8008fdc:	881b      	ldrh	r3, [r3, #0]
 8008fde:	0a1b      	lsrs	r3, r3, #8
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	bf14      	ite	ne
 8008fe8:	2301      	movne	r3, #1
 8008fea:	2300      	moveq	r3, #0
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	461a      	mov	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	715a      	strb	r2, [r3, #5]
		ProcessId_Value_K1 = ProcessId_Value;
 8008ff4:	4b4c      	ldr	r3, [pc, #304]	; (8009128 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x18c>)
 8008ff6:	881a      	ldrh	r2, [r3, #0]
 8008ff8:	4b4c      	ldr	r3, [pc, #304]	; (800912c <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x190>)
 8008ffa:	801a      	strh	r2, [r3, #0]

		m_writeFlashBuf[2] = (uint8_t)(Seq1temperature && 0xff);
 8008ffc:	4b4f      	ldr	r3, [pc, #316]	; (800913c <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x1a0>)
 8008ffe:	881b      	ldrh	r3, [r3, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	bf14      	ite	ne
 8009004:	2301      	movne	r3, #1
 8009006:	2300      	moveq	r3, #0
 8009008:	b2db      	uxtb	r3, r3
 800900a:	461a      	mov	r2, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	719a      	strb	r2, [r3, #6]
		m_writeFlashBuf[3] = (uint8_t)(Seq1temperature>>8) && 0xff;
 8009010:	4b4a      	ldr	r3, [pc, #296]	; (800913c <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x1a0>)
 8009012:	881b      	ldrh	r3, [r3, #0]
 8009014:	0a1b      	lsrs	r3, r3, #8
 8009016:	b29b      	uxth	r3, r3
 8009018:	b2db      	uxtb	r3, r3
 800901a:	2b00      	cmp	r3, #0
 800901c:	bf14      	ite	ne
 800901e:	2301      	movne	r3, #1
 8009020:	2300      	moveq	r3, #0
 8009022:	b2db      	uxtb	r3, r3
 8009024:	461a      	mov	r2, r3
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	71da      	strb	r2, [r3, #7]
		m_writeFlashBuf[4] = (uint8_t)(Seq2temperature && 0xff);
 800902a:	4b45      	ldr	r3, [pc, #276]	; (8009140 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x1a4>)
 800902c:	881b      	ldrh	r3, [r3, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	bf14      	ite	ne
 8009032:	2301      	movne	r3, #1
 8009034:	2300      	moveq	r3, #0
 8009036:	b2db      	uxtb	r3, r3
 8009038:	461a      	mov	r2, r3
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	721a      	strb	r2, [r3, #8]
		m_writeFlashBuf[5] = (uint8_t)(Seq2temperature>>8) && 0xff;
 800903e:	4b40      	ldr	r3, [pc, #256]	; (8009140 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x1a4>)
 8009040:	881b      	ldrh	r3, [r3, #0]
 8009042:	0a1b      	lsrs	r3, r3, #8
 8009044:	b29b      	uxth	r3, r3
 8009046:	b2db      	uxtb	r3, r3
 8009048:	2b00      	cmp	r3, #0
 800904a:	bf14      	ite	ne
 800904c:	2301      	movne	r3, #1
 800904e:	2300      	moveq	r3, #0
 8009050:	b2db      	uxtb	r3, r3
 8009052:	461a      	mov	r2, r3
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	725a      	strb	r2, [r3, #9]
		m_writeFlashBuf[6] = (uint8_t)(H_Timer01HrValue);
 8009058:	4b3a      	ldr	r3, [pc, #232]	; (8009144 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x1a8>)
 800905a:	781a      	ldrb	r2, [r3, #0]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	729a      	strb	r2, [r3, #10]
		m_writeFlashBuf[7] = (uint8_t)(H_Timer01MinValue);
 8009060:	4b39      	ldr	r3, [pc, #228]	; (8009148 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x1ac>)
 8009062:	781a      	ldrb	r2, [r3, #0]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	72da      	strb	r2, [r3, #11]
		m_writeFlashBuf[8] = (uint8_t)(H_Timer02HrValue);
 8009068:	4b38      	ldr	r3, [pc, #224]	; (800914c <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x1b0>)
 800906a:	781a      	ldrb	r2, [r3, #0]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	731a      	strb	r2, [r3, #12]
		m_writeFlashBuf[9] = (uint8_t)(H_Timer02MinValue);
 8009070:	4b37      	ldr	r3, [pc, #220]	; (8009150 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x1b4>)
 8009072:	781a      	ldrb	r2, [r3, #0]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	735a      	strb	r2, [r3, #13]
		m_writeFlashBuf[10] = (uint8_t)(Rise_Sequence1_temp && 0xff);
 8009078:	4b36      	ldr	r3, [pc, #216]	; (8009154 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x1b8>)
 800907a:	881b      	ldrh	r3, [r3, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	bf14      	ite	ne
 8009080:	2301      	movne	r3, #1
 8009082:	2300      	moveq	r3, #0
 8009084:	b2db      	uxtb	r3, r3
 8009086:	461a      	mov	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	739a      	strb	r2, [r3, #14]
		m_writeFlashBuf[11] = (uint8_t)(Rise_Sequence1_temp>>8) && 0xff;
 800908c:	4b31      	ldr	r3, [pc, #196]	; (8009154 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x1b8>)
 800908e:	881b      	ldrh	r3, [r3, #0]
 8009090:	0a1b      	lsrs	r3, r3, #8
 8009092:	b29b      	uxth	r3, r3
 8009094:	b2db      	uxtb	r3, r3
 8009096:	2b00      	cmp	r3, #0
 8009098:	bf14      	ite	ne
 800909a:	2301      	movne	r3, #1
 800909c:	2300      	moveq	r3, #0
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	461a      	mov	r2, r3
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	73da      	strb	r2, [r3, #15]
		m_writeFlashBuf[12] = (uint8_t)(Rise_Sequence2_temp && 0xff);
 80090a6:	4b2c      	ldr	r3, [pc, #176]	; (8009158 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x1bc>)
 80090a8:	881b      	ldrh	r3, [r3, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	bf14      	ite	ne
 80090ae:	2301      	movne	r3, #1
 80090b0:	2300      	moveq	r3, #0
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	461a      	mov	r2, r3
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	741a      	strb	r2, [r3, #16]
		m_writeFlashBuf[13] = (uint8_t)(Rise_Sequence2_temp>>8) && 0xff;
 80090ba:	4b27      	ldr	r3, [pc, #156]	; (8009158 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x1bc>)
 80090bc:	881b      	ldrh	r3, [r3, #0]
 80090be:	0a1b      	lsrs	r3, r3, #8
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	bf14      	ite	ne
 80090c8:	2301      	movne	r3, #1
 80090ca:	2300      	moveq	r3, #0
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	461a      	mov	r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	745a      	strb	r2, [r3, #17]
		m_writeFlashBuf[14] = (uint8_t)(Rise_Sequence1_Hour);
 80090d4:	4b21      	ldr	r3, [pc, #132]	; (800915c <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x1c0>)
 80090d6:	781a      	ldrb	r2, [r3, #0]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	749a      	strb	r2, [r3, #18]
		m_writeFlashBuf[15] = (uint8_t)(Rise_Sequence1_Minute);
 80090dc:	4b20      	ldr	r3, [pc, #128]	; (8009160 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x1c4>)
 80090de:	781a      	ldrb	r2, [r3, #0]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	74da      	strb	r2, [r3, #19]
		m_writeFlashBuf[16] = (uint8_t)(Rise_Sequence2_Hour);
 80090e4:	4b1f      	ldr	r3, [pc, #124]	; (8009164 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x1c8>)
 80090e6:	781a      	ldrb	r2, [r3, #0]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	751a      	strb	r2, [r3, #20]
		m_writeFlashBuf[17] = (uint8_t)(Rise_Sequence2_Minute);
 80090ec:	4b1e      	ldr	r3, [pc, #120]	; (8009168 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x1cc>)
 80090ee:	781a      	ldrb	r2, [r3, #0]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	755a      	strb	r2, [r3, #21]
		SEQMONITOR_K1 = SEQMONITOR;
 80090f4:	4b0f      	ldr	r3, [pc, #60]	; (8009134 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x198>)
 80090f6:	781a      	ldrb	r2, [r3, #0]
 80090f8:	4b0f      	ldr	r3, [pc, #60]	; (8009138 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x19c>)
 80090fa:	701a      	strb	r2, [r3, #0]
		m_writeFlashBuf[18] = SEQMONITOR;
 80090fc:	4b0d      	ldr	r3, [pc, #52]	; (8009134 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x198>)
 80090fe:	781a      	ldrb	r2, [r3, #0]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	759a      	strb	r2, [r3, #22]

		updateSetData	= 0;
 8009104:	4b0a      	ldr	r3, [pc, #40]	; (8009130 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x194>)
 8009106:	2200      	movs	r2, #0
 8009108:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(1);
 800910a:	2001      	movs	r0, #1
 800910c:	f7fa f93c 	bl	8003388 <W25qxx_EraseSector>
		//W25qxx_WriteSector(m_writeFlashBuf,1,0,19);
		W25qxx_WriteSector(m_writeFlashBuf,0,0,19);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	1d18      	adds	r0, r3, #4
 8009114:	2313      	movs	r3, #19
 8009116:	2200      	movs	r2, #0
 8009118:	2100      	movs	r1, #0
 800911a:	f7fa fa27 	bl	800356c <W25qxx_WriteSector>

	}
}
 800911e:	bf00      	nop
 8009120:	3708      	adds	r7, #8
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	20000626 	.word	0x20000626
 800912c:	2000065e 	.word	0x2000065e
 8009130:	20000622 	.word	0x20000622
 8009134:	20000636 	.word	0x20000636
 8009138:	2000065d 	.word	0x2000065d
 800913c:	20000628 	.word	0x20000628
 8009140:	2000062a 	.word	0x2000062a
 8009144:	2000063a 	.word	0x2000063a
 8009148:	2000063b 	.word	0x2000063b
 800914c:	2000063c 	.word	0x2000063c
 8009150:	2000063d 	.word	0x2000063d
 8009154:	20000642 	.word	0x20000642
 8009158:	20000644 	.word	0x20000644
 800915c:	20000646 	.word	0x20000646
 8009160:	20000647 	.word	0x20000647
 8009164:	20000648 	.word	0x20000648
 8009168:	20000649 	.word	0x20000649

0800916c <_ZN14OfflineStorage15m_writeCountincEv>:

void OfflineStorage::m_writeCountinc(){
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
	if((seq1_count_inc_K1 != seq1_count_inc) ||(seq2_count_inc_K1 != seq2_count_inc )){
 8009174:	4b27      	ldr	r3, [pc, #156]	; (8009214 <_ZN14OfflineStorage15m_writeCountincEv+0xa8>)
 8009176:	881a      	ldrh	r2, [r3, #0]
 8009178:	4b27      	ldr	r3, [pc, #156]	; (8009218 <_ZN14OfflineStorage15m_writeCountincEv+0xac>)
 800917a:	881b      	ldrh	r3, [r3, #0]
 800917c:	429a      	cmp	r2, r3
 800917e:	d105      	bne.n	800918c <_ZN14OfflineStorage15m_writeCountincEv+0x20>
 8009180:	4b26      	ldr	r3, [pc, #152]	; (800921c <_ZN14OfflineStorage15m_writeCountincEv+0xb0>)
 8009182:	881a      	ldrh	r2, [r3, #0]
 8009184:	4b26      	ldr	r3, [pc, #152]	; (8009220 <_ZN14OfflineStorage15m_writeCountincEv+0xb4>)
 8009186:	881b      	ldrh	r3, [r3, #0]
 8009188:	429a      	cmp	r2, r3
 800918a:	d03f      	beq.n	800920c <_ZN14OfflineStorage15m_writeCountincEv+0xa0>
		m_writeFlashBuf[0] = (uint8_t)(seq1_count_inc && 0xff);
 800918c:	4b22      	ldr	r3, [pc, #136]	; (8009218 <_ZN14OfflineStorage15m_writeCountincEv+0xac>)
 800918e:	881b      	ldrh	r3, [r3, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	bf14      	ite	ne
 8009194:	2301      	movne	r3, #1
 8009196:	2300      	moveq	r3, #0
 8009198:	b2db      	uxtb	r3, r3
 800919a:	461a      	mov	r2, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	711a      	strb	r2, [r3, #4]
		m_writeFlashBuf[1] = (uint8_t)(seq1_count_inc>>8) && 0xff;
 80091a0:	4b1d      	ldr	r3, [pc, #116]	; (8009218 <_ZN14OfflineStorage15m_writeCountincEv+0xac>)
 80091a2:	881b      	ldrh	r3, [r3, #0]
 80091a4:	0a1b      	lsrs	r3, r3, #8
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	bf14      	ite	ne
 80091ae:	2301      	movne	r3, #1
 80091b0:	2300      	moveq	r3, #0
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	461a      	mov	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	715a      	strb	r2, [r3, #5]
		m_writeFlashBuf[2] = (uint8_t)(seq2_count_inc && 0xff);
 80091ba:	4b19      	ldr	r3, [pc, #100]	; (8009220 <_ZN14OfflineStorage15m_writeCountincEv+0xb4>)
 80091bc:	881b      	ldrh	r3, [r3, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	bf14      	ite	ne
 80091c2:	2301      	movne	r3, #1
 80091c4:	2300      	moveq	r3, #0
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	461a      	mov	r2, r3
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	719a      	strb	r2, [r3, #6]
		m_writeFlashBuf[3] = (uint8_t)(seq2_count_inc>>8) && 0xff;
 80091ce:	4b14      	ldr	r3, [pc, #80]	; (8009220 <_ZN14OfflineStorage15m_writeCountincEv+0xb4>)
 80091d0:	881b      	ldrh	r3, [r3, #0]
 80091d2:	0a1b      	lsrs	r3, r3, #8
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	2b00      	cmp	r3, #0
 80091da:	bf14      	ite	ne
 80091dc:	2301      	movne	r3, #1
 80091de:	2300      	moveq	r3, #0
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	461a      	mov	r2, r3
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	71da      	strb	r2, [r3, #7]
		seq1_count_inc_K1 = seq1_count_inc;
 80091e8:	4b0b      	ldr	r3, [pc, #44]	; (8009218 <_ZN14OfflineStorage15m_writeCountincEv+0xac>)
 80091ea:	881a      	ldrh	r2, [r3, #0]
 80091ec:	4b09      	ldr	r3, [pc, #36]	; (8009214 <_ZN14OfflineStorage15m_writeCountincEv+0xa8>)
 80091ee:	801a      	strh	r2, [r3, #0]
		seq2_count_inc_K1 = seq2_count_inc;
 80091f0:	4b0b      	ldr	r3, [pc, #44]	; (8009220 <_ZN14OfflineStorage15m_writeCountincEv+0xb4>)
 80091f2:	881a      	ldrh	r2, [r3, #0]
 80091f4:	4b09      	ldr	r3, [pc, #36]	; (800921c <_ZN14OfflineStorage15m_writeCountincEv+0xb0>)
 80091f6:	801a      	strh	r2, [r3, #0]

		W25qxx_EraseSector(2);
 80091f8:	2002      	movs	r0, #2
 80091fa:	f7fa f8c5 	bl	8003388 <W25qxx_EraseSector>
		W25qxx_WriteSector(m_writeFlashBuf,2,0,4);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	1d18      	adds	r0, r3, #4
 8009202:	2304      	movs	r3, #4
 8009204:	2200      	movs	r2, #0
 8009206:	2102      	movs	r1, #2
 8009208:	f7fa f9b0 	bl	800356c <W25qxx_WriteSector>
	}
}
 800920c:	bf00      	nop
 800920e:	3708      	adds	r7, #8
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	20000660 	.word	0x20000660
 8009218:	2000010a 	.word	0x2000010a
 800921c:	20000662 	.word	0x20000662
 8009220:	2000010c 	.word	0x2000010c

08009224 <_ZN14OfflineStorage23m_readHeattreatmentDataEv>:
	W25qxx_ReadSector(m_readFlashBuf,0,0,1);
	SEQMONITOR = m_readFlashBuf[0];
	SEQMONITOR_K1 = SEQMONITOR;
}

void OfflineStorage::m_readHeattreatmentData(){
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]

	uint8_t i;
	for(i=0;i<=20;i++){
 800922c:	2300      	movs	r3, #0
 800922e:	73fb      	strb	r3, [r7, #15]
 8009230:	7bfb      	ldrb	r3, [r7, #15]
 8009232:	2b14      	cmp	r3, #20
 8009234:	d809      	bhi.n	800924a <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x26>
		m_readFlashheatBuf[i]=0;
 8009236:	7bfb      	ldrb	r3, [r7, #15]
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	4413      	add	r3, r2
 800923c:	2200      	movs	r2, #0
 800923e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	for(i=0;i<=20;i++){
 8009242:	7bfb      	ldrb	r3, [r7, #15]
 8009244:	3301      	adds	r3, #1
 8009246:	73fb      	strb	r3, [r7, #15]
 8009248:	e7f2      	b.n	8009230 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0xc>
	}
	//W25qxx_ReadSector(m_readFlashheatBuf,1,0,19);
	W25qxx_ReadSector(m_readFlashheatBuf,0,0,19);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8009250:	2313      	movs	r3, #19
 8009252:	2200      	movs	r2, #0
 8009254:	2100      	movs	r1, #0
 8009256:	f7fa fa69 	bl	800372c <W25qxx_ReadSector>
	ProcessId_Value = (m_readFlashheatBuf[1]<<8 | m_readFlashheatBuf[0]);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009260:	021b      	lsls	r3, r3, #8
 8009262:	b21a      	sxth	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800926a:	b21b      	sxth	r3, r3
 800926c:	4313      	orrs	r3, r2
 800926e:	b21b      	sxth	r3, r3
 8009270:	b29a      	uxth	r2, r3
 8009272:	4b48      	ldr	r3, [pc, #288]	; (8009394 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x170>)
 8009274:	801a      	strh	r2, [r3, #0]
	ProcessId_Value_K1 = ProcessId_Value;
 8009276:	4b47      	ldr	r3, [pc, #284]	; (8009394 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x170>)
 8009278:	881a      	ldrh	r2, [r3, #0]
 800927a:	4b47      	ldr	r3, [pc, #284]	; (8009398 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x174>)
 800927c:	801a      	strh	r2, [r3, #0]
	Seq1temperature = (m_readFlashheatBuf[3]<<8 | m_readFlashheatBuf[2]);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009284:	021b      	lsls	r3, r3, #8
 8009286:	b21a      	sxth	r2, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800928e:	b21b      	sxth	r3, r3
 8009290:	4313      	orrs	r3, r2
 8009292:	b21b      	sxth	r3, r3
 8009294:	b29a      	uxth	r2, r3
 8009296:	4b41      	ldr	r3, [pc, #260]	; (800939c <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x178>)
 8009298:	801a      	strh	r2, [r3, #0]
	Seq2temperature = (m_readFlashheatBuf[5]<<8 | m_readFlashheatBuf[4]);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80092a0:	021b      	lsls	r3, r3, #8
 80092a2:	b21a      	sxth	r2, r3
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80092aa:	b21b      	sxth	r3, r3
 80092ac:	4313      	orrs	r3, r2
 80092ae:	b21b      	sxth	r3, r3
 80092b0:	b29a      	uxth	r2, r3
 80092b2:	4b3b      	ldr	r3, [pc, #236]	; (80093a0 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x17c>)
 80092b4:	801a      	strh	r2, [r3, #0]
	H_Timer01HrValue = m_readFlashheatBuf[6];
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80092bc:	4b39      	ldr	r3, [pc, #228]	; (80093a4 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x180>)
 80092be:	701a      	strb	r2, [r3, #0]
	H_Timer01MinValue = m_readFlashheatBuf[7];
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 80092c6:	4b38      	ldr	r3, [pc, #224]	; (80093a8 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x184>)
 80092c8:	701a      	strb	r2, [r3, #0]
	H_Timer02HrValue = m_readFlashheatBuf[8];
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80092d0:	4b36      	ldr	r3, [pc, #216]	; (80093ac <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x188>)
 80092d2:	701a      	strb	r2, [r3, #0]
	H_Timer02MinValue =m_readFlashheatBuf[9];
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80092da:	4b35      	ldr	r3, [pc, #212]	; (80093b0 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x18c>)
 80092dc:	701a      	strb	r2, [r3, #0]

	Rise_Sequence1_temp = (m_readFlashheatBuf[11]<<8 | m_readFlashheatBuf[10]);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80092e4:	021b      	lsls	r3, r3, #8
 80092e6:	b21a      	sxth	r2, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80092ee:	b21b      	sxth	r3, r3
 80092f0:	4313      	orrs	r3, r2
 80092f2:	b21b      	sxth	r3, r3
 80092f4:	b29a      	uxth	r2, r3
 80092f6:	4b2f      	ldr	r3, [pc, #188]	; (80093b4 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x190>)
 80092f8:	801a      	strh	r2, [r3, #0]
	Rise_Sequence2_temp = (m_readFlashheatBuf[13]<<8 | m_readFlashheatBuf[12]);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009300:	021b      	lsls	r3, r3, #8
 8009302:	b21a      	sxth	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800930a:	b21b      	sxth	r3, r3
 800930c:	4313      	orrs	r3, r2
 800930e:	b21b      	sxth	r3, r3
 8009310:	b29a      	uxth	r2, r3
 8009312:	4b29      	ldr	r3, [pc, #164]	; (80093b8 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x194>)
 8009314:	801a      	strh	r2, [r3, #0]
	Rise_Sequence1_Hour = m_readFlashheatBuf[14];
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 800931c:	4b27      	ldr	r3, [pc, #156]	; (80093bc <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x198>)
 800931e:	701a      	strb	r2, [r3, #0]
	Rise_Sequence1_Minute = m_readFlashheatBuf[15];
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 8009326:	4b26      	ldr	r3, [pc, #152]	; (80093c0 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x19c>)
 8009328:	701a      	strb	r2, [r3, #0]
	Rise_Sequence2_Hour = m_readFlashheatBuf[16];
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8009330:	4b24      	ldr	r3, [pc, #144]	; (80093c4 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x1a0>)
 8009332:	701a      	strb	r2, [r3, #0]
	Rise_Sequence2_Minute =m_readFlashheatBuf[17];
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 800933a:	4b23      	ldr	r3, [pc, #140]	; (80093c8 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x1a4>)
 800933c:	701a      	strb	r2, [r3, #0]

	SEQMONITOR = m_readFlashheatBuf[18];
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8009344:	4b21      	ldr	r3, [pc, #132]	; (80093cc <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x1a8>)
 8009346:	701a      	strb	r2, [r3, #0]
	SEQMONITOR_K1 = SEQMONITOR;
 8009348:	4b20      	ldr	r3, [pc, #128]	; (80093cc <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x1a8>)
 800934a:	781a      	ldrb	r2, [r3, #0]
 800934c:	4b20      	ldr	r3, [pc, #128]	; (80093d0 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x1ac>)
 800934e:	701a      	strb	r2, [r3, #0]

	ProcessTotalMin1 	=  (H_Timer01HrValue*60)+  H_Timer01MinValue;
 8009350:	4b14      	ldr	r3, [pc, #80]	; (80093a4 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x180>)
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	b29b      	uxth	r3, r3
 8009356:	461a      	mov	r2, r3
 8009358:	0112      	lsls	r2, r2, #4
 800935a:	1ad3      	subs	r3, r2, r3
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	b29a      	uxth	r2, r3
 8009360:	4b11      	ldr	r3, [pc, #68]	; (80093a8 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x184>)
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	b29b      	uxth	r3, r3
 8009366:	4413      	add	r3, r2
 8009368:	b29a      	uxth	r2, r3
 800936a:	4b1a      	ldr	r3, [pc, #104]	; (80093d4 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x1b0>)
 800936c:	801a      	strh	r2, [r3, #0]
	ProcessTotalMin1 	=  (H_Timer01HrValue*60)+  H_Timer01MinValue;
 800936e:	4b0d      	ldr	r3, [pc, #52]	; (80093a4 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x180>)
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	b29b      	uxth	r3, r3
 8009374:	461a      	mov	r2, r3
 8009376:	0112      	lsls	r2, r2, #4
 8009378:	1ad3      	subs	r3, r2, r3
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	b29a      	uxth	r2, r3
 800937e:	4b0a      	ldr	r3, [pc, #40]	; (80093a8 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x184>)
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	b29b      	uxth	r3, r3
 8009384:	4413      	add	r3, r2
 8009386:	b29a      	uxth	r2, r3
 8009388:	4b12      	ldr	r3, [pc, #72]	; (80093d4 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x1b0>)
 800938a:	801a      	strh	r2, [r3, #0]
}
 800938c:	bf00      	nop
 800938e:	3710      	adds	r7, #16
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	20000626 	.word	0x20000626
 8009398:	2000065e 	.word	0x2000065e
 800939c:	20000628 	.word	0x20000628
 80093a0:	2000062a 	.word	0x2000062a
 80093a4:	2000063a 	.word	0x2000063a
 80093a8:	2000063b 	.word	0x2000063b
 80093ac:	2000063c 	.word	0x2000063c
 80093b0:	2000063d 	.word	0x2000063d
 80093b4:	20000642 	.word	0x20000642
 80093b8:	20000644 	.word	0x20000644
 80093bc:	20000646 	.word	0x20000646
 80093c0:	20000647 	.word	0x20000647
 80093c4:	20000648 	.word	0x20000648
 80093c8:	20000649 	.word	0x20000649
 80093cc:	20000636 	.word	0x20000636
 80093d0:	2000065d 	.word	0x2000065d
 80093d4:	2000063e 	.word	0x2000063e

080093d8 <_ZN14OfflineStorage14m_readCountincEv>:

void OfflineStorage::m_readCountinc(){
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
	W25qxx_ReadSector(m_readFlashBuf,2,0,4);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f103 0018 	add.w	r0, r3, #24
 80093e6:	2304      	movs	r3, #4
 80093e8:	2200      	movs	r2, #0
 80093ea:	2102      	movs	r1, #2
 80093ec:	f7fa f99e 	bl	800372c <W25qxx_ReadSector>
	seq1_count_inc = (m_readFlashBuf[1]<<8 | m_readFlashBuf[0]);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	7e5b      	ldrb	r3, [r3, #25]
 80093f4:	021b      	lsls	r3, r3, #8
 80093f6:	b21a      	sxth	r2, r3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	7e1b      	ldrb	r3, [r3, #24]
 80093fc:	b21b      	sxth	r3, r3
 80093fe:	4313      	orrs	r3, r2
 8009400:	b21b      	sxth	r3, r3
 8009402:	b29a      	uxth	r2, r3
 8009404:	4b0c      	ldr	r3, [pc, #48]	; (8009438 <_ZN14OfflineStorage14m_readCountincEv+0x60>)
 8009406:	801a      	strh	r2, [r3, #0]
	seq2_count_inc = (m_readFlashBuf[3]<<8 | m_readFlashBuf[2]);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	7edb      	ldrb	r3, [r3, #27]
 800940c:	021b      	lsls	r3, r3, #8
 800940e:	b21a      	sxth	r2, r3
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	7e9b      	ldrb	r3, [r3, #26]
 8009414:	b21b      	sxth	r3, r3
 8009416:	4313      	orrs	r3, r2
 8009418:	b21b      	sxth	r3, r3
 800941a:	b29a      	uxth	r2, r3
 800941c:	4b07      	ldr	r3, [pc, #28]	; (800943c <_ZN14OfflineStorage14m_readCountincEv+0x64>)
 800941e:	801a      	strh	r2, [r3, #0]
	seq1_count_inc_K1 = seq1_count_inc;
 8009420:	4b05      	ldr	r3, [pc, #20]	; (8009438 <_ZN14OfflineStorage14m_readCountincEv+0x60>)
 8009422:	881a      	ldrh	r2, [r3, #0]
 8009424:	4b06      	ldr	r3, [pc, #24]	; (8009440 <_ZN14OfflineStorage14m_readCountincEv+0x68>)
 8009426:	801a      	strh	r2, [r3, #0]
	seq2_count_inc_K1 = seq2_count_inc;
 8009428:	4b04      	ldr	r3, [pc, #16]	; (800943c <_ZN14OfflineStorage14m_readCountincEv+0x64>)
 800942a:	881a      	ldrh	r2, [r3, #0]
 800942c:	4b05      	ldr	r3, [pc, #20]	; (8009444 <_ZN14OfflineStorage14m_readCountincEv+0x6c>)
 800942e:	801a      	strh	r2, [r3, #0]
}
 8009430:	bf00      	nop
 8009432:	3708      	adds	r7, #8
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}
 8009438:	2000010a 	.word	0x2000010a
 800943c:	2000010c 	.word	0x2000010c
 8009440:	20000660 	.word	0x20000660
 8009444:	20000662 	.word	0x20000662

08009448 <_ZN14OfflineStorage19ReadOfflinedataInitEv>:
	W25qxx_ReadSector(m_readFlashBuf,3,0,2);
	Quenching_Seconds_Cont =(m_readFlashBuf[1]<<8 | m_readFlashBuf[0]);
}

void OfflineStorage::ReadOfflinedataInit()
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
	m_readHeattreatmentData();
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f7ff fee7 	bl	8009224 <_ZN14OfflineStorage23m_readHeattreatmentDataEv>
	m_readCountinc();
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f7ff ffbe 	bl	80093d8 <_ZN14OfflineStorage14m_readCountincEv>
}
 800945c:	bf00      	nop
 800945e:	3708      	adds	r7, #8
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <_ZN7ESP8266C1Ev>:
extern uint16_t Rise_Sequence1_temp,Rise_Sequence2_temp;
extern uint8_t Rise_Sequence1_Hour,Rise_Sequence1_Minute,Rise_Sequence2_Hour,Rise_Sequence2_Minute;
extern uint8_t H_Timer01HrValue,H_Timer01MinValue,H_Timer02HrValue,H_Timer02MinValue;
extern uint8_t R_Sequence2_hour_http,R_Sequence2_minute_http,Sequence2_hour_http,Sequence2_minute_http;

ESP8266::ESP8266() {
 8009464:	b5b0      	push	{r4, r5, r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	4ac9      	ldr	r2, [pc, #804]	; (8009794 <_ZN7ESP8266C1Ev+0x330>)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	601a      	str	r2, [r3, #0]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	49c8      	ldr	r1, [pc, #800]	; (8009798 <_ZN7ESP8266C1Ev+0x334>)
 8009476:	f103 020e 	add.w	r2, r3, #14
 800947a:	460b      	mov	r3, r1
 800947c:	cb03      	ldmia	r3!, {r0, r1}
 800947e:	6010      	str	r0, [r2, #0]
 8009480:	6051      	str	r1, [r2, #4]
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	7213      	strb	r3, [r2, #8]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4ac4      	ldr	r2, [pc, #784]	; (800979c <_ZN7ESP8266C1Ev+0x338>)
 800948a:	3317      	adds	r3, #23
 800948c:	6810      	ldr	r0, [r2, #0]
 800948e:	6018      	str	r0, [r3, #0]
 8009490:	8891      	ldrh	r1, [r2, #4]
 8009492:	7992      	ldrb	r2, [r2, #6]
 8009494:	8099      	strh	r1, [r3, #4]
 8009496:	719a      	strb	r2, [r3, #6]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	49c1      	ldr	r1, [pc, #772]	; (80097a0 <_ZN7ESP8266C1Ev+0x33c>)
 800949c:	f103 021e 	add.w	r2, r3, #30
 80094a0:	6808      	ldr	r0, [r1, #0]
 80094a2:	6010      	str	r0, [r2, #0]
 80094a4:	7909      	ldrb	r1, [r1, #4]
 80094a6:	7111      	strb	r1, [r2, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 80094ae:	687d      	ldr	r5, [r7, #4]
 80094b0:	4bbc      	ldr	r3, [pc, #752]	; (80097a4 <_ZN7ESP8266C1Ev+0x340>)
 80094b2:	f105 0424 	add.w	r4, r5, #36	; 0x24
 80094b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80094b8:	c407      	stmia	r4!, {r0, r1, r2}
 80094ba:	8023      	strh	r3, [r4, #0]
 80094bc:	2300      	movs	r3, #0
 80094be:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	3333      	adds	r3, #51	; 0x33
 80094c6:	222d      	movs	r2, #45	; 0x2d
 80094c8:	2100      	movs	r1, #0
 80094ca:	4618      	mov	r0, r3
 80094cc:	f006 f94c 	bl	800f768 <memset>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2241      	movs	r2, #65	; 0x41
 80094d4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2254      	movs	r2, #84	; 0x54
 80094dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	222b      	movs	r2, #43	; 0x2b
 80094e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2243      	movs	r2, #67	; 0x43
 80094ec:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2257      	movs	r2, #87	; 0x57
 80094f4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	224a      	movs	r2, #74	; 0x4a
 80094fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2241      	movs	r2, #65	; 0x41
 8009504:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2250      	movs	r2, #80	; 0x50
 800950c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	223d      	movs	r2, #61	; 0x3d
 8009514:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2222      	movs	r2, #34	; 0x22
 800951c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2241      	movs	r2, #65	; 0x41
 8009524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2243      	movs	r2, #67	; 0x43
 800952c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2243      	movs	r2, #67	; 0x43
 8009534:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2245      	movs	r2, #69	; 0x45
 800953c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2245      	movs	r2, #69	; 0x45
 8009544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2244      	movs	r2, #68	; 0x44
 800954c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	224f      	movs	r2, #79	; 0x4f
 8009554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	225f      	movs	r2, #95	; 0x5f
 800955c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2245      	movs	r2, #69	; 0x45
 8009564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2244      	movs	r2, #68	; 0x44
 800956c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2249      	movs	r2, #73	; 0x49
 8009574:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	224d      	movs	r2, #77	; 0x4d
 800957c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2241      	movs	r2, #65	; 0x41
 8009584:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2258      	movs	r2, #88	; 0x58
 800958c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2222      	movs	r2, #34	; 0x22
 8009594:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	222c      	movs	r2, #44	; 0x2c
 800959c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2222      	movs	r2, #34	; 0x22
 80095a4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2241      	movs	r2, #65	; 0x41
 80095ac:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2243      	movs	r2, #67	; 0x43
 80095b4:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2243      	movs	r2, #67	; 0x43
 80095bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2245      	movs	r2, #69	; 0x45
 80095c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2245      	movs	r2, #69	; 0x45
 80095cc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2244      	movs	r2, #68	; 0x44
 80095d4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	224f      	movs	r2, #79	; 0x4f
 80095dc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2240      	movs	r2, #64	; 0x40
 80095e4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2231      	movs	r2, #49	; 0x31
 80095ec:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2232      	movs	r2, #50	; 0x32
 80095f4:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2233      	movs	r2, #51	; 0x33
 80095fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2222      	movs	r2, #34	; 0x22
 8009604:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	220d      	movs	r2, #13
 800960c:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	220a      	movs	r2, #10
 8009614:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	4a63      	ldr	r2, [pc, #396]	; (80097a8 <_ZN7ESP8266C1Ev+0x344>)
 800961c:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8009620:	ca07      	ldmia	r2, {r0, r1, r2}
 8009622:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009626:	2200      	movs	r2, #0
 8009628:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800962c:	687d      	ldr	r5, [r7, #4]
 800962e:	4b5f      	ldr	r3, [pc, #380]	; (80097ac <_ZN7ESP8266C1Ev+0x348>)
 8009630:	f105 046d 	add.w	r4, r5, #109	; 0x6d
 8009634:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009636:	6020      	str	r0, [r4, #0]
 8009638:	6061      	str	r1, [r4, #4]
 800963a:	60a2      	str	r2, [r4, #8]
 800963c:	881b      	ldrh	r3, [r3, #0]
 800963e:	81a3      	strh	r3, [r4, #12]
 8009640:	2300      	movs	r3, #0
 8009642:	f885 307b 	strb.w	r3, [r5, #123]	; 0x7b
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	337c      	adds	r3, #124	; 0x7c
 800964a:	2232      	movs	r2, #50	; 0x32
 800964c:	2100      	movs	r1, #0
 800964e:	4618      	mov	r0, r3
 8009650:	f006 f88a 	bl	800f768 <memset>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2241      	movs	r2, #65	; 0x41
 8009658:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2254      	movs	r2, #84	; 0x54
 8009660:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	222b      	movs	r2, #43	; 0x2b
 8009668:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2243      	movs	r2, #67	; 0x43
 8009670:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2249      	movs	r2, #73	; 0x49
 8009678:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2250      	movs	r2, #80	; 0x50
 8009680:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2253      	movs	r2, #83	; 0x53
 8009688:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2254      	movs	r2, #84	; 0x54
 8009690:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2241      	movs	r2, #65	; 0x41
 8009698:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2252      	movs	r2, #82	; 0x52
 80096a0:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2254      	movs	r2, #84	; 0x54
 80096a8:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	223d      	movs	r2, #61	; 0x3d
 80096b0:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2231      	movs	r2, #49	; 0x31
 80096b8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	222c      	movs	r2, #44	; 0x2c
 80096c0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2222      	movs	r2, #34	; 0x22
 80096c8:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2254      	movs	r2, #84	; 0x54
 80096d0:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2243      	movs	r2, #67	; 0x43
 80096d8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2250      	movs	r2, #80	; 0x50
 80096e0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2222      	movs	r2, #34	; 0x22
 80096e8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	222c      	movs	r2, #44	; 0x2c
 80096f0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2222      	movs	r2, #34	; 0x22
 80096f8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2275      	movs	r2, #117	; 0x75
 8009700:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2273      	movs	r2, #115	; 0x73
 8009708:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	226d      	movs	r2, #109	; 0x6d
 8009710:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2234      	movs	r2, #52	; 0x34
 8009718:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	222d      	movs	r2, #45	; 0x2d
 8009720:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2268      	movs	r2, #104	; 0x68
 8009728:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2274      	movs	r2, #116	; 0x74
 8009730:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	222e      	movs	r2, #46	; 0x2e
 8009738:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2261      	movs	r2, #97	; 0x61
 8009740:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2263      	movs	r2, #99	; 0x63
 8009748:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2263      	movs	r2, #99	; 0x63
 8009750:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2265      	movs	r2, #101	; 0x65
 8009758:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2265      	movs	r2, #101	; 0x65
 8009760:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2264      	movs	r2, #100	; 0x64
 8009768:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	226f      	movs	r2, #111	; 0x6f
 8009770:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	222e      	movs	r2, #46	; 0x2e
 8009778:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2269      	movs	r2, #105	; 0x69
 8009780:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	226e      	movs	r2, #110	; 0x6e
 8009788:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2222      	movs	r2, #34	; 0x22
 8009790:	e00e      	b.n	80097b0 <_ZN7ESP8266C1Ev+0x34c>
 8009792:	bf00      	nop
 8009794:	08010508 	.word	0x08010508
 8009798:	080102d0 	.word	0x080102d0
 800979c:	080102dc 	.word	0x080102dc
 80097a0:	080102e4 	.word	0x080102e4
 80097a4:	080102ec 	.word	0x080102ec
 80097a8:	080102fc 	.word	0x080102fc
 80097ac:	0801030c 	.word	0x0801030c
 80097b0:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	222c      	movs	r2, #44	; 0x2c
 80097b8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2239      	movs	r2, #57	; 0x39
 80097c0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2230      	movs	r2, #48	; 0x30
 80097c8:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2231      	movs	r2, #49	; 0x31
 80097d0:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2232      	movs	r2, #50	; 0x32
 80097d8:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	220d      	movs	r2, #13
 80097e0:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	220a      	movs	r2, #10
 80097e8:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	33c2      	adds	r3, #194	; 0xc2
 80097f0:	2200      	movs	r2, #0
 80097f2:	601a      	str	r2, [r3, #0]
 80097f4:	605a      	str	r2, [r3, #4]
 80097f6:	609a      	str	r2, [r3, #8]
 80097f8:	60da      	str	r2, [r3, #12]
 80097fa:	611a      	str	r2, [r3, #16]
 80097fc:	687d      	ldr	r5, [r7, #4]
 80097fe:	4b08      	ldr	r3, [pc, #32]	; (8009820 <_ZN7ESP8266C1Ev+0x3bc>)
 8009800:	f205 248e 	addw	r4, r5, #654	; 0x28e
 8009804:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009806:	6020      	str	r0, [r4, #0]
 8009808:	6061      	str	r1, [r4, #4]
 800980a:	60a2      	str	r2, [r4, #8]
 800980c:	881b      	ldrh	r3, [r3, #0]
 800980e:	81a3      	strh	r3, [r4, #12]
 8009810:	2300      	movs	r3, #0
 8009812:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
	// TODO Auto-generated constructor stub

}
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	4618      	mov	r0, r3
 800981a:	3708      	adds	r7, #8
 800981c:	46bd      	mov	sp, r7
 800981e:	bdb0      	pop	{r4, r5, r7, pc}
 8009820:	0801031c 	.word	0x0801031c

08009824 <_ZN7ESP8266D1Ev>:

ESP8266::~ESP8266() {
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	4a04      	ldr	r2, [pc, #16]	; (8009840 <_ZN7ESP8266D1Ev+0x1c>)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	4618      	mov	r0, r3
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr
 8009840:	08010508 	.word	0x08010508

08009844 <_ZN7ESP8266D0Ev>:
ESP8266::~ESP8266() {
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
}
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f7ff ffe9 	bl	8009824 <_ZN7ESP8266D1Ev>
 8009852:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f005 ff41 	bl	800f6de <_ZdlPvj>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4618      	mov	r0, r3
 8009860:	3708      	adds	r7, #8
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <_ZN7ESP82663runEv>:


void ESP8266::run()
{
 8009866:	b580      	push	{r7, lr}
 8009868:	b082      	sub	sp, #8
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
	Send_WifiCmd();
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 f804 	bl	800987c <_ZN7ESP826612Send_WifiCmdEv>

}
 8009874:	bf00      	nop
 8009876:	3708      	adds	r7, #8
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <_ZN7ESP826612Send_WifiCmdEv>:

void ESP8266::Send_WifiCmd()
{
 800987c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800987e:	b09d      	sub	sp, #116	; 0x74
 8009880:	af12      	add	r7, sp, #72	; 0x48
 8009882:	6278      	str	r0, [r7, #36]	; 0x24
	switch(wifi_command)
 8009884:	4bc4      	ldr	r3, [pc, #784]	; (8009b98 <_ZN7ESP826612Send_WifiCmdEv+0x31c>)
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	3b05      	subs	r3, #5
 800988a:	2b73      	cmp	r3, #115	; 0x73
 800988c:	f201 8002 	bhi.w	800a894 <_ZN7ESP826612Send_WifiCmdEv+0x1018>
 8009890:	a201      	add	r2, pc, #4	; (adr r2, 8009898 <_ZN7ESP826612Send_WifiCmdEv+0x1c>)
 8009892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009896:	bf00      	nop
 8009898:	08009a69 	.word	0x08009a69
 800989c:	0800a895 	.word	0x0800a895
 80098a0:	0800a895 	.word	0x0800a895
 80098a4:	0800a895 	.word	0x0800a895
 80098a8:	0800a895 	.word	0x0800a895
 80098ac:	08009a8f 	.word	0x08009a8f
 80098b0:	08009abb 	.word	0x08009abb
 80098b4:	08009aeb 	.word	0x08009aeb
 80098b8:	08009b11 	.word	0x08009b11
 80098bc:	08009b41 	.word	0x08009b41
 80098c0:	08009b6d 	.word	0x08009b6d
 80098c4:	0800a895 	.word	0x0800a895
 80098c8:	0800a895 	.word	0x0800a895
 80098cc:	0800a895 	.word	0x0800a895
 80098d0:	0800a895 	.word	0x0800a895
 80098d4:	08009bb5 	.word	0x08009bb5
 80098d8:	08009bf3 	.word	0x08009bf3
 80098dc:	0800a895 	.word	0x0800a895
 80098e0:	0800a895 	.word	0x0800a895
 80098e4:	0800a895 	.word	0x0800a895
 80098e8:	0800a895 	.word	0x0800a895
 80098ec:	0800a895 	.word	0x0800a895
 80098f0:	0800a895 	.word	0x0800a895
 80098f4:	0800a895 	.word	0x0800a895
 80098f8:	0800a895 	.word	0x0800a895
 80098fc:	08009c3b 	.word	0x08009c3b
 8009900:	0800a895 	.word	0x0800a895
 8009904:	0800a895 	.word	0x0800a895
 8009908:	0800a895 	.word	0x0800a895
 800990c:	0800a895 	.word	0x0800a895
 8009910:	0800a895 	.word	0x0800a895
 8009914:	0800a895 	.word	0x0800a895
 8009918:	0800a895 	.word	0x0800a895
 800991c:	0800a895 	.word	0x0800a895
 8009920:	0800a895 	.word	0x0800a895
 8009924:	0800a895 	.word	0x0800a895
 8009928:	08009c6d 	.word	0x08009c6d
 800992c:	0800a895 	.word	0x0800a895
 8009930:	0800a895 	.word	0x0800a895
 8009934:	0800a895 	.word	0x0800a895
 8009938:	0800a895 	.word	0x0800a895
 800993c:	0800a895 	.word	0x0800a895
 8009940:	0800a895 	.word	0x0800a895
 8009944:	0800a895 	.word	0x0800a895
 8009948:	08009c9d 	.word	0x08009c9d
 800994c:	08009ccd 	.word	0x08009ccd
 8009950:	08009cf9 	.word	0x08009cf9
 8009954:	0800a895 	.word	0x0800a895
 8009958:	0800a895 	.word	0x0800a895
 800995c:	0800a895 	.word	0x0800a895
 8009960:	0800a895 	.word	0x0800a895
 8009964:	0800a895 	.word	0x0800a895
 8009968:	0800a895 	.word	0x0800a895
 800996c:	0800a895 	.word	0x0800a895
 8009970:	0800a895 	.word	0x0800a895
 8009974:	0800a895 	.word	0x0800a895
 8009978:	0800a895 	.word	0x0800a895
 800997c:	0800a895 	.word	0x0800a895
 8009980:	0800a895 	.word	0x0800a895
 8009984:	0800a895 	.word	0x0800a895
 8009988:	0800a895 	.word	0x0800a895
 800998c:	0800a895 	.word	0x0800a895
 8009990:	0800a895 	.word	0x0800a895
 8009994:	0800a895 	.word	0x0800a895
 8009998:	0800a895 	.word	0x0800a895
 800999c:	08009d29 	.word	0x08009d29
 80099a0:	08009d55 	.word	0x08009d55
 80099a4:	0800a895 	.word	0x0800a895
 80099a8:	0800a895 	.word	0x0800a895
 80099ac:	0800a895 	.word	0x0800a895
 80099b0:	0800a895 	.word	0x0800a895
 80099b4:	0800a895 	.word	0x0800a895
 80099b8:	0800a895 	.word	0x0800a895
 80099bc:	0800a895 	.word	0x0800a895
 80099c0:	0800a895 	.word	0x0800a895
 80099c4:	08009d85 	.word	0x08009d85
 80099c8:	08009db1 	.word	0x08009db1
 80099cc:	0800a895 	.word	0x0800a895
 80099d0:	0800a895 	.word	0x0800a895
 80099d4:	0800a895 	.word	0x0800a895
 80099d8:	0800a895 	.word	0x0800a895
 80099dc:	0800a895 	.word	0x0800a895
 80099e0:	0800a895 	.word	0x0800a895
 80099e4:	0800a895 	.word	0x0800a895
 80099e8:	0800a895 	.word	0x0800a895
 80099ec:	08009dfd 	.word	0x08009dfd
 80099f0:	0800a2b7 	.word	0x0800a2b7
 80099f4:	0800a895 	.word	0x0800a895
 80099f8:	0800a895 	.word	0x0800a895
 80099fc:	0800a895 	.word	0x0800a895
 8009a00:	0800a895 	.word	0x0800a895
 8009a04:	0800a895 	.word	0x0800a895
 8009a08:	0800a895 	.word	0x0800a895
 8009a0c:	0800a895 	.word	0x0800a895
 8009a10:	0800a895 	.word	0x0800a895
 8009a14:	0800a359 	.word	0x0800a359
 8009a18:	0800a7f1 	.word	0x0800a7f1
 8009a1c:	0800a81d 	.word	0x0800a81d
 8009a20:	0800a849 	.word	0x0800a849
 8009a24:	0800a895 	.word	0x0800a895
 8009a28:	0800a895 	.word	0x0800a895
 8009a2c:	0800a895 	.word	0x0800a895
 8009a30:	0800a895 	.word	0x0800a895
 8009a34:	0800a895 	.word	0x0800a895
 8009a38:	0800a895 	.word	0x0800a895
 8009a3c:	0800a875 	.word	0x0800a875
 8009a40:	0800a895 	.word	0x0800a895
 8009a44:	0800a895 	.word	0x0800a895
 8009a48:	0800a895 	.word	0x0800a895
 8009a4c:	0800a895 	.word	0x0800a895
 8009a50:	0800a895 	.word	0x0800a895
 8009a54:	0800a895 	.word	0x0800a895
 8009a58:	0800a895 	.word	0x0800a895
 8009a5c:	0800a895 	.word	0x0800a895
 8009a60:	0800a895 	.word	0x0800a895
 8009a64:	0800a89d 	.word	0x0800a89d
	{
	case 5: //step --1 Reset COntroller PIN
		HAL_GPIO_WritePin(GPIOB, WIFIRST_Pin, GPIO_PIN_SET);
 8009a68:	2201      	movs	r2, #1
 8009a6a:	2104      	movs	r1, #4
 8009a6c:	484b      	ldr	r0, [pc, #300]	; (8009b9c <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 8009a6e:	f001 fbc5 	bl	800b1fc <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8009a72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009a76:	f001 f893 	bl	800aba0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, WIFIRST_Pin, GPIO_PIN_RESET);
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	2104      	movs	r1, #4
 8009a7e:	4847      	ldr	r0, [pc, #284]	; (8009b9c <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 8009a80:	f001 fbbc 	bl	800b1fc <HAL_GPIO_WritePin>
		wifi_command=13;
 8009a84:	4b44      	ldr	r3, [pc, #272]	; (8009b98 <_ZN7ESP826612Send_WifiCmdEv+0x31c>)
 8009a86:	220d      	movs	r2, #13
 8009a88:	701a      	strb	r2, [r3, #0]

	break;
 8009a8a:	f000 bf22 	b.w	800a8d2 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	case 10://WI-Fi Reset
	NoOfdata_byte=7;
 8009a8e:	4b44      	ldr	r3, [pc, #272]	; (8009ba0 <_ZN7ESP826612Send_WifiCmdEv+0x324>)
 8009a90:	2207      	movs	r2, #7
 8009a92:	801a      	strh	r2, [r3, #0]
	wifi_command=13;
 8009a94:	4b40      	ldr	r3, [pc, #256]	; (8009b98 <_ZN7ESP826612Send_WifiCmdEv+0x31c>)
 8009a96:	220d      	movs	r2, #13
 8009a98:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 8009a9a:	4b42      	ldr	r3, [pc, #264]	; (8009ba4 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	701a      	strb	r2, [r3, #0]
	bufferptr=0;
 8009aa0:	4b41      	ldr	r3, [pc, #260]	; (8009ba8 <_ZN7ESP826612Send_WifiCmdEv+0x32c>)
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDAtRst,NoOfdata_byte);
 8009aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa8:	330e      	adds	r3, #14
 8009aaa:	4a3d      	ldr	r2, [pc, #244]	; (8009ba0 <_ZN7ESP826612Send_WifiCmdEv+0x324>)
 8009aac:	8812      	ldrh	r2, [r2, #0]
 8009aae:	4619      	mov	r1, r3
 8009ab0:	483e      	ldr	r0, [pc, #248]	; (8009bac <_ZN7ESP826612Send_WifiCmdEv+0x330>)
 8009ab2:	f004 fabb 	bl	800e02c <HAL_UART_Transmit_IT>
	break;
 8009ab6:	f000 bf0c 	b.w	800a8d2 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	case 11:
	if(++Timerdelay >12)
 8009aba:	4b3a      	ldr	r3, [pc, #232]	; (8009ba4 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	3301      	adds	r3, #1
 8009ac0:	b2da      	uxtb	r2, r3
 8009ac2:	4b38      	ldr	r3, [pc, #224]	; (8009ba4 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 8009ac4:	701a      	strb	r2, [r3, #0]
 8009ac6:	4b37      	ldr	r3, [pc, #220]	; (8009ba4 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	2b0c      	cmp	r3, #12
 8009acc:	bf8c      	ite	hi
 8009ace:	2301      	movhi	r3, #1
 8009ad0:	2300      	movls	r3, #0
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	f000 86e3 	beq.w	800a8a0 <_ZN7ESP826612Send_WifiCmdEv+0x1024>
	{
		Timerdelay=0;
 8009ada:	4b32      	ldr	r3, [pc, #200]	; (8009ba4 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 8009adc:	2200      	movs	r2, #0
 8009ade:	701a      	strb	r2, [r3, #0]
		wifi_command=14;
 8009ae0:	4b2d      	ldr	r3, [pc, #180]	; (8009b98 <_ZN7ESP826612Send_WifiCmdEv+0x31c>)
 8009ae2:	220e      	movs	r2, #14
 8009ae4:	701a      	strb	r2, [r3, #0]
	}
	break;
 8009ae6:	f000 bedb 	b.w	800a8a0 <_ZN7ESP826612Send_WifiCmdEv+0x1024>
	case 12:
	NoOfdata_byte=6;
 8009aea:	4b2d      	ldr	r3, [pc, #180]	; (8009ba0 <_ZN7ESP826612Send_WifiCmdEv+0x324>)
 8009aec:	2206      	movs	r2, #6
 8009aee:	801a      	strh	r2, [r3, #0]
	wifi_command=13;
 8009af0:	4b29      	ldr	r3, [pc, #164]	; (8009b98 <_ZN7ESP826612Send_WifiCmdEv+0x31c>)
 8009af2:	220d      	movs	r2, #13
 8009af4:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 8009af6:	4b2b      	ldr	r3, [pc, #172]	; (8009ba4 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 8009af8:	2200      	movs	r2, #0
 8009afa:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDAtEch0,NoOfdata_byte);
 8009afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afe:	3317      	adds	r3, #23
 8009b00:	4a27      	ldr	r2, [pc, #156]	; (8009ba0 <_ZN7ESP826612Send_WifiCmdEv+0x324>)
 8009b02:	8812      	ldrh	r2, [r2, #0]
 8009b04:	4619      	mov	r1, r3
 8009b06:	4829      	ldr	r0, [pc, #164]	; (8009bac <_ZN7ESP826612Send_WifiCmdEv+0x330>)
 8009b08:	f004 fa90 	bl	800e02c <HAL_UART_Transmit_IT>
	break;
 8009b0c:	f000 bee1 	b.w	800a8d2 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	case 13:
	if(++Timerdelay >15)
 8009b10:	4b24      	ldr	r3, [pc, #144]	; (8009ba4 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	3301      	adds	r3, #1
 8009b16:	b2da      	uxtb	r2, r3
 8009b18:	4b22      	ldr	r3, [pc, #136]	; (8009ba4 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 8009b1a:	701a      	strb	r2, [r3, #0]
 8009b1c:	4b21      	ldr	r3, [pc, #132]	; (8009ba4 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	2b0f      	cmp	r3, #15
 8009b22:	bf8c      	ite	hi
 8009b24:	2301      	movhi	r3, #1
 8009b26:	2300      	movls	r3, #0
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	f000 86ba 	beq.w	800a8a4 <_ZN7ESP826612Send_WifiCmdEv+0x1028>
	{
		Timerdelay=0;
 8009b30:	4b1c      	ldr	r3, [pc, #112]	; (8009ba4 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 8009b32:	2200      	movs	r2, #0
 8009b34:	701a      	strb	r2, [r3, #0]
		wifi_command=20;
 8009b36:	4b18      	ldr	r3, [pc, #96]	; (8009b98 <_ZN7ESP826612Send_WifiCmdEv+0x31c>)
 8009b38:	2214      	movs	r2, #20
 8009b3a:	701a      	strb	r2, [r3, #0]
	}
	break;
 8009b3c:	f000 beb2 	b.w	800a8a4 <_ZN7ESP826612Send_WifiCmdEv+0x1028>
	case 14:
	NoOfdata_byte=4;
 8009b40:	4b17      	ldr	r3, [pc, #92]	; (8009ba0 <_ZN7ESP826612Send_WifiCmdEv+0x324>)
 8009b42:	2204      	movs	r2, #4
 8009b44:	801a      	strh	r2, [r3, #0]
	Rxseqdecoder=8;
 8009b46:	4b1a      	ldr	r3, [pc, #104]	; (8009bb0 <_ZN7ESP826612Send_WifiCmdEv+0x334>)
 8009b48:	2208      	movs	r2, #8
 8009b4a:	701a      	strb	r2, [r3, #0]
	wifi_command=20;//default wait 30sec
 8009b4c:	4b12      	ldr	r3, [pc, #72]	; (8009b98 <_ZN7ESP826612Send_WifiCmdEv+0x31c>)
 8009b4e:	2214      	movs	r2, #20
 8009b50:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 8009b52:	4b14      	ldr	r3, [pc, #80]	; (8009ba4 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 8009b54:	2200      	movs	r2, #0
 8009b56:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDATok,NoOfdata_byte);
 8009b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5a:	331e      	adds	r3, #30
 8009b5c:	4a10      	ldr	r2, [pc, #64]	; (8009ba0 <_ZN7ESP826612Send_WifiCmdEv+0x324>)
 8009b5e:	8812      	ldrh	r2, [r2, #0]
 8009b60:	4619      	mov	r1, r3
 8009b62:	4812      	ldr	r0, [pc, #72]	; (8009bac <_ZN7ESP826612Send_WifiCmdEv+0x330>)
 8009b64:	f004 fa62 	bl	800e02c <HAL_UART_Transmit_IT>
	break;
 8009b68:	f000 beb3 	b.w	800a8d2 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	case 15:
	if(++Timerdelay >2)
 8009b6c:	4b0d      	ldr	r3, [pc, #52]	; (8009ba4 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	3301      	adds	r3, #1
 8009b72:	b2da      	uxtb	r2, r3
 8009b74:	4b0b      	ldr	r3, [pc, #44]	; (8009ba4 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 8009b76:	701a      	strb	r2, [r3, #0]
 8009b78:	4b0a      	ldr	r3, [pc, #40]	; (8009ba4 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	2b02      	cmp	r3, #2
 8009b7e:	bf8c      	ite	hi
 8009b80:	2301      	movhi	r3, #1
 8009b82:	2300      	movls	r3, #0
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	f000 868e 	beq.w	800a8a8 <_ZN7ESP826612Send_WifiCmdEv+0x102c>
	{
		Timerdelay=0;
 8009b8c:	4b05      	ldr	r3, [pc, #20]	; (8009ba4 <_ZN7ESP826612Send_WifiCmdEv+0x328>)
 8009b8e:	2200      	movs	r2, #0
 8009b90:	701a      	strb	r2, [r3, #0]
	}
	break;
 8009b92:	f000 be89 	b.w	800a8a8 <_ZN7ESP826612Send_WifiCmdEv+0x102c>
 8009b96:	bf00      	nop
 8009b98:	20000664 	.word	0x20000664
 8009b9c:	48000400 	.word	0x48000400
 8009ba0:	20000766 	.word	0x20000766
 8009ba4:	20000768 	.word	0x20000768
 8009ba8:	20000762 	.word	0x20000762
 8009bac:	200002ac 	.word	0x200002ac
 8009bb0:	20000763 	.word	0x20000763
	case 20:   //CWMODE		//hardrest sequce//1.0 for wifi reset
	NoOfdata_byte=13;
 8009bb4:	4b8a      	ldr	r3, [pc, #552]	; (8009de0 <_ZN7ESP826612Send_WifiCmdEv+0x564>)
 8009bb6:	220d      	movs	r2, #13
 8009bb8:	801a      	strh	r2, [r3, #0]
	Rxseqdecoder=1;	  //add retry
 8009bba:	4b8a      	ldr	r3, [pc, #552]	; (8009de4 <_ZN7ESP826612Send_WifiCmdEv+0x568>)
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 8009bc0:	4b89      	ldr	r3, [pc, #548]	; (8009de8 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	701a      	strb	r2, [r3, #0]
	bufferptr=0;
 8009bc6:	4b89      	ldr	r3, [pc, #548]	; (8009dec <_ZN7ESP826612Send_WifiCmdEv+0x570>)
 8009bc8:	2200      	movs	r2, #0
 8009bca:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDATCWMODE,NoOfdata_byte);
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bce:	3324      	adds	r3, #36	; 0x24
 8009bd0:	4a83      	ldr	r2, [pc, #524]	; (8009de0 <_ZN7ESP826612Send_WifiCmdEv+0x564>)
 8009bd2:	8812      	ldrh	r2, [r2, #0]
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	4886      	ldr	r0, [pc, #536]	; (8009df0 <_ZN7ESP826612Send_WifiCmdEv+0x574>)
 8009bd8:	f004 fa28 	bl	800e02c <HAL_UART_Transmit_IT>
	Check_CWMODE_For_Hang = Check_CWMODE_For_Hang+1;
 8009bdc:	4b85      	ldr	r3, [pc, #532]	; (8009df4 <_ZN7ESP826612Send_WifiCmdEv+0x578>)
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	3301      	adds	r3, #1
 8009be2:	b2da      	uxtb	r2, r3
 8009be4:	4b83      	ldr	r3, [pc, #524]	; (8009df4 <_ZN7ESP826612Send_WifiCmdEv+0x578>)
 8009be6:	701a      	strb	r2, [r3, #0]
	wifi_command=21;
 8009be8:	4b83      	ldr	r3, [pc, #524]	; (8009df8 <_ZN7ESP826612Send_WifiCmdEv+0x57c>)
 8009bea:	2215      	movs	r2, #21
 8009bec:	701a      	strb	r2, [r3, #0]

	break;
 8009bee:	f000 be70 	b.w	800a8d2 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	case 21:	//waiting for Ok  && if above 30 seconds resend command
	if(++Timerdelay >10)
 8009bf2:	4b7d      	ldr	r3, [pc, #500]	; (8009de8 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	b2da      	uxtb	r2, r3
 8009bfa:	4b7b      	ldr	r3, [pc, #492]	; (8009de8 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009bfc:	701a      	strb	r2, [r3, #0]
 8009bfe:	4b7a      	ldr	r3, [pc, #488]	; (8009de8 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	2b0a      	cmp	r3, #10
 8009c04:	bf8c      	ite	hi
 8009c06:	2301      	movhi	r3, #1
 8009c08:	2300      	movls	r3, #0
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	f000 864d 	beq.w	800a8ac <_ZN7ESP826612Send_WifiCmdEv+0x1030>
	{
		Timerdelay=0;
 8009c12:	4b75      	ldr	r3, [pc, #468]	; (8009de8 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009c14:	2200      	movs	r2, #0
 8009c16:	701a      	strb	r2, [r3, #0]
		if(5 ==  Check_CWMODE_For_Hang)
 8009c18:	4b76      	ldr	r3, [pc, #472]	; (8009df4 <_ZN7ESP826612Send_WifiCmdEv+0x578>)
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	2b05      	cmp	r3, #5
 8009c1e:	d107      	bne.n	8009c30 <_ZN7ESP826612Send_WifiCmdEv+0x3b4>
		{
			wifi_command=5;	 //Hardware reset
 8009c20:	4b75      	ldr	r3, [pc, #468]	; (8009df8 <_ZN7ESP826612Send_WifiCmdEv+0x57c>)
 8009c22:	2205      	movs	r2, #5
 8009c24:	701a      	strb	r2, [r3, #0]
			Check_CWMODE_For_Hang = 0;
 8009c26:	4b73      	ldr	r3, [pc, #460]	; (8009df4 <_ZN7ESP826612Send_WifiCmdEv+0x578>)
 8009c28:	2200      	movs	r2, #0
 8009c2a:	701a      	strb	r2, [r3, #0]
		else
		{
			wifi_command=10;
		}
	}
	break;
 8009c2c:	f000 be3e 	b.w	800a8ac <_ZN7ESP826612Send_WifiCmdEv+0x1030>
			wifi_command=10;
 8009c30:	4b71      	ldr	r3, [pc, #452]	; (8009df8 <_ZN7ESP826612Send_WifiCmdEv+0x57c>)
 8009c32:	220a      	movs	r2, #10
 8009c34:	701a      	strb	r2, [r3, #0]
	break;
 8009c36:	f000 be39 	b.w	800a8ac <_ZN7ESP826612Send_WifiCmdEv+0x1030>
	case 30:   //CWJAP	   //userid-9digit,psw 8digit  //userid-5digit,psw 8digit
	NoOfdata_byte=41;//32;
 8009c3a:	4b69      	ldr	r3, [pc, #420]	; (8009de0 <_ZN7ESP826612Send_WifiCmdEv+0x564>)
 8009c3c:	2229      	movs	r2, #41	; 0x29
 8009c3e:	801a      	strh	r2, [r3, #0]
	Rxseqdecoder=2;
 8009c40:	4b68      	ldr	r3, [pc, #416]	; (8009de4 <_ZN7ESP826612Send_WifiCmdEv+0x568>)
 8009c42:	2202      	movs	r2, #2
 8009c44:	701a      	strb	r2, [r3, #0]
	wifi_command=41;
 8009c46:	4b6c      	ldr	r3, [pc, #432]	; (8009df8 <_ZN7ESP826612Send_WifiCmdEv+0x57c>)
 8009c48:	2229      	movs	r2, #41	; 0x29
 8009c4a:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 8009c4c:	4b66      	ldr	r3, [pc, #408]	; (8009de8 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009c4e:	2200      	movs	r2, #0
 8009c50:	701a      	strb	r2, [r3, #0]
	bufferptr=0;
 8009c52:	4b66      	ldr	r3, [pc, #408]	; (8009dec <_ZN7ESP826612Send_WifiCmdEv+0x570>)
 8009c54:	2200      	movs	r2, #0
 8009c56:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDATCWJAPUsernamePsw,NoOfdata_byte);
 8009c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5a:	3333      	adds	r3, #51	; 0x33
 8009c5c:	4a60      	ldr	r2, [pc, #384]	; (8009de0 <_ZN7ESP826612Send_WifiCmdEv+0x564>)
 8009c5e:	8812      	ldrh	r2, [r2, #0]
 8009c60:	4619      	mov	r1, r3
 8009c62:	4863      	ldr	r0, [pc, #396]	; (8009df0 <_ZN7ESP826612Send_WifiCmdEv+0x574>)
 8009c64:	f004 f9e2 	bl	800e02c <HAL_UART_Transmit_IT>
	break;		   //add retry
 8009c68:	f000 be33 	b.w	800a8d2 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	case 41:	   //resend if o replay
	if(++Timerdelay >15)
 8009c6c:	4b5e      	ldr	r3, [pc, #376]	; (8009de8 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	3301      	adds	r3, #1
 8009c72:	b2da      	uxtb	r2, r3
 8009c74:	4b5c      	ldr	r3, [pc, #368]	; (8009de8 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009c76:	701a      	strb	r2, [r3, #0]
 8009c78:	4b5b      	ldr	r3, [pc, #364]	; (8009de8 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	2b0f      	cmp	r3, #15
 8009c7e:	bf8c      	ite	hi
 8009c80:	2301      	movhi	r3, #1
 8009c82:	2300      	movls	r3, #0
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f000 8612 	beq.w	800a8b0 <_ZN7ESP826612Send_WifiCmdEv+0x1034>
	{
		Timerdelay=0;
 8009c8c:	4b56      	ldr	r3, [pc, #344]	; (8009de8 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009c8e:	2200      	movs	r2, #0
 8009c90:	701a      	strb	r2, [r3, #0]
		wifi_command=10;	//41
 8009c92:	4b59      	ldr	r3, [pc, #356]	; (8009df8 <_ZN7ESP826612Send_WifiCmdEv+0x57c>)
 8009c94:	220a      	movs	r2, #10
 8009c96:	701a      	strb	r2, [r3, #0]
	}
	break;
 8009c98:	f000 be0a 	b.w	800a8b0 <_ZN7ESP826612Send_WifiCmdEv+0x1034>
	case 49:
	if(++Timerdelay >8)
 8009c9c:	4b52      	ldr	r3, [pc, #328]	; (8009de8 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	b2da      	uxtb	r2, r3
 8009ca4:	4b50      	ldr	r3, [pc, #320]	; (8009de8 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009ca6:	701a      	strb	r2, [r3, #0]
 8009ca8:	4b4f      	ldr	r3, [pc, #316]	; (8009de8 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	2b08      	cmp	r3, #8
 8009cae:	bf8c      	ite	hi
 8009cb0:	2301      	movhi	r3, #1
 8009cb2:	2300      	movls	r3, #0
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	f000 85fc 	beq.w	800a8b4 <_ZN7ESP826612Send_WifiCmdEv+0x1038>
	{
		Timerdelay=0;
 8009cbc:	4b4a      	ldr	r3, [pc, #296]	; (8009de8 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	701a      	strb	r2, [r3, #0]
		wifi_command=50;
 8009cc2:	4b4d      	ldr	r3, [pc, #308]	; (8009df8 <_ZN7ESP826612Send_WifiCmdEv+0x57c>)
 8009cc4:	2232      	movs	r2, #50	; 0x32
 8009cc6:	701a      	strb	r2, [r3, #0]
	}
	break;
 8009cc8:	f000 bdf4 	b.w	800a8b4 <_ZN7ESP826612Send_WifiCmdEv+0x1038>
	case 50:   //CWJAP

	NoOfdata_byte=11;
 8009ccc:	4b44      	ldr	r3, [pc, #272]	; (8009de0 <_ZN7ESP826612Send_WifiCmdEv+0x564>)
 8009cce:	220b      	movs	r2, #11
 8009cd0:	801a      	strh	r2, [r3, #0]
	wifi_command=51;
 8009cd2:	4b49      	ldr	r3, [pc, #292]	; (8009df8 <_ZN7ESP826612Send_WifiCmdEv+0x57c>)
 8009cd4:	2233      	movs	r2, #51	; 0x33
 8009cd6:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=3;
 8009cd8:	4b42      	ldr	r3, [pc, #264]	; (8009de4 <_ZN7ESP826612Send_WifiCmdEv+0x568>)
 8009cda:	2203      	movs	r2, #3
 8009cdc:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 8009cde:	4b42      	ldr	r3, [pc, #264]	; (8009de8 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDATCwjapRead,NoOfdata_byte);
 8009ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce6:	3360      	adds	r3, #96	; 0x60
 8009ce8:	4a3d      	ldr	r2, [pc, #244]	; (8009de0 <_ZN7ESP826612Send_WifiCmdEv+0x564>)
 8009cea:	8812      	ldrh	r2, [r2, #0]
 8009cec:	4619      	mov	r1, r3
 8009cee:	4840      	ldr	r0, [pc, #256]	; (8009df0 <_ZN7ESP826612Send_WifiCmdEv+0x574>)
 8009cf0:	f004 f99c 	bl	800e02c <HAL_UART_Transmit_IT>
	break;
 8009cf4:	f000 bded 	b.w	800a8d2 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	case 51:
	if(++Timerdelay >15)
 8009cf8:	4b3b      	ldr	r3, [pc, #236]	; (8009de8 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	b2da      	uxtb	r2, r3
 8009d00:	4b39      	ldr	r3, [pc, #228]	; (8009de8 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009d02:	701a      	strb	r2, [r3, #0]
 8009d04:	4b38      	ldr	r3, [pc, #224]	; (8009de8 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	2b0f      	cmp	r3, #15
 8009d0a:	bf8c      	ite	hi
 8009d0c:	2301      	movhi	r3, #1
 8009d0e:	2300      	movls	r3, #0
 8009d10:	b2db      	uxtb	r3, r3
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	f000 85d0 	beq.w	800a8b8 <_ZN7ESP826612Send_WifiCmdEv+0x103c>
	{
		Timerdelay=0;
 8009d18:	4b33      	ldr	r3, [pc, #204]	; (8009de8 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	701a      	strb	r2, [r3, #0]
		wifi_command=10; //50
 8009d1e:	4b36      	ldr	r3, [pc, #216]	; (8009df8 <_ZN7ESP826612Send_WifiCmdEv+0x57c>)
 8009d20:	220a      	movs	r2, #10
 8009d22:	701a      	strb	r2, [r3, #0]
	}

	break;
 8009d24:	f000 bdc8 	b.w	800a8b8 <_ZN7ESP826612Send_WifiCmdEv+0x103c>
	case 70:   //CIPMUX

	NoOfdata_byte=13;
 8009d28:	4b2d      	ldr	r3, [pc, #180]	; (8009de0 <_ZN7ESP826612Send_WifiCmdEv+0x564>)
 8009d2a:	220d      	movs	r2, #13
 8009d2c:	801a      	strh	r2, [r3, #0]
	wifi_command=71;
 8009d2e:	4b32      	ldr	r3, [pc, #200]	; (8009df8 <_ZN7ESP826612Send_WifiCmdEv+0x57c>)
 8009d30:	2247      	movs	r2, #71	; 0x47
 8009d32:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=4;
 8009d34:	4b2b      	ldr	r3, [pc, #172]	; (8009de4 <_ZN7ESP826612Send_WifiCmdEv+0x568>)
 8009d36:	2204      	movs	r2, #4
 8009d38:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 8009d3a:	4b2b      	ldr	r3, [pc, #172]	; (8009de8 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CmdATCipmuxWrite,NoOfdata_byte);
 8009d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d42:	336d      	adds	r3, #109	; 0x6d
 8009d44:	4a26      	ldr	r2, [pc, #152]	; (8009de0 <_ZN7ESP826612Send_WifiCmdEv+0x564>)
 8009d46:	8812      	ldrh	r2, [r2, #0]
 8009d48:	4619      	mov	r1, r3
 8009d4a:	4829      	ldr	r0, [pc, #164]	; (8009df0 <_ZN7ESP826612Send_WifiCmdEv+0x574>)
 8009d4c:	f004 f96e 	bl	800e02c <HAL_UART_Transmit_IT>
	break;	  //2sec
 8009d50:	f000 bdbf 	b.w	800a8d2 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	case 71:
	if(++Timerdelay >15)
 8009d54:	4b24      	ldr	r3, [pc, #144]	; (8009de8 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	3301      	adds	r3, #1
 8009d5a:	b2da      	uxtb	r2, r3
 8009d5c:	4b22      	ldr	r3, [pc, #136]	; (8009de8 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009d5e:	701a      	strb	r2, [r3, #0]
 8009d60:	4b21      	ldr	r3, [pc, #132]	; (8009de8 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	2b0f      	cmp	r3, #15
 8009d66:	bf8c      	ite	hi
 8009d68:	2301      	movhi	r3, #1
 8009d6a:	2300      	movls	r3, #0
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f000 85a4 	beq.w	800a8bc <_ZN7ESP826612Send_WifiCmdEv+0x1040>
	{
		Timerdelay=0;
 8009d74:	4b1c      	ldr	r3, [pc, #112]	; (8009de8 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009d76:	2200      	movs	r2, #0
 8009d78:	701a      	strb	r2, [r3, #0]
		wifi_command=10;   //70
 8009d7a:	4b1f      	ldr	r3, [pc, #124]	; (8009df8 <_ZN7ESP826612Send_WifiCmdEv+0x57c>)
 8009d7c:	220a      	movs	r2, #10
 8009d7e:	701a      	strb	r2, [r3, #0]
	}
	break;
 8009d80:	f000 bd9c 	b.w	800a8bc <_ZN7ESP826612Send_WifiCmdEv+0x1040>
	case 80:
	NoOfdata_byte=49;//41;
 8009d84:	4b16      	ldr	r3, [pc, #88]	; (8009de0 <_ZN7ESP826612Send_WifiCmdEv+0x564>)
 8009d86:	2231      	movs	r2, #49	; 0x31
 8009d88:	801a      	strh	r2, [r3, #0]
	wifi_command=81;
 8009d8a:	4b1b      	ldr	r3, [pc, #108]	; (8009df8 <_ZN7ESP826612Send_WifiCmdEv+0x57c>)
 8009d8c:	2251      	movs	r2, #81	; 0x51
 8009d8e:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=5;
 8009d90:	4b14      	ldr	r3, [pc, #80]	; (8009de4 <_ZN7ESP826612Send_WifiCmdEv+0x568>)
 8009d92:	2205      	movs	r2, #5
 8009d94:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 8009d96:	4b14      	ldr	r3, [pc, #80]	; (8009de8 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009d98:	2200      	movs	r2, #0
 8009d9a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CmdAtCipStartWrite,NoOfdata_byte);
 8009d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9e:	337c      	adds	r3, #124	; 0x7c
 8009da0:	4a0f      	ldr	r2, [pc, #60]	; (8009de0 <_ZN7ESP826612Send_WifiCmdEv+0x564>)
 8009da2:	8812      	ldrh	r2, [r2, #0]
 8009da4:	4619      	mov	r1, r3
 8009da6:	4812      	ldr	r0, [pc, #72]	; (8009df0 <_ZN7ESP826612Send_WifiCmdEv+0x574>)
 8009da8:	f004 f940 	bl	800e02c <HAL_UART_Transmit_IT>
	break;
 8009dac:	f000 bd91 	b.w	800a8d2 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	case 81:					//5sec
	if(++Timerdelay >20)
 8009db0:	4b0d      	ldr	r3, [pc, #52]	; (8009de8 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	3301      	adds	r3, #1
 8009db6:	b2da      	uxtb	r2, r3
 8009db8:	4b0b      	ldr	r3, [pc, #44]	; (8009de8 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009dba:	701a      	strb	r2, [r3, #0]
 8009dbc:	4b0a      	ldr	r3, [pc, #40]	; (8009de8 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	2b14      	cmp	r3, #20
 8009dc2:	bf8c      	ite	hi
 8009dc4:	2301      	movhi	r3, #1
 8009dc6:	2300      	movls	r3, #0
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	f000 8578 	beq.w	800a8c0 <_ZN7ESP826612Send_WifiCmdEv+0x1044>
	{
		Timerdelay=0;
 8009dd0:	4b05      	ldr	r3, [pc, #20]	; (8009de8 <_ZN7ESP826612Send_WifiCmdEv+0x56c>)
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	701a      	strb	r2, [r3, #0]
		wifi_command=10;
 8009dd6:	4b08      	ldr	r3, [pc, #32]	; (8009df8 <_ZN7ESP826612Send_WifiCmdEv+0x57c>)
 8009dd8:	220a      	movs	r2, #10
 8009dda:	701a      	strb	r2, [r3, #0]
	}
	break;
 8009ddc:	f000 bd70 	b.w	800a8c0 <_ZN7ESP826612Send_WifiCmdEv+0x1044>
 8009de0:	20000766 	.word	0x20000766
 8009de4:	20000763 	.word	0x20000763
 8009de8:	20000768 	.word	0x20000768
 8009dec:	20000762 	.word	0x20000762
 8009df0:	200002ac 	.word	0x200002ac
 8009df4:	20000764 	.word	0x20000764
 8009df8:	20000664 	.word	0x20000664
	case 90:   //CIPSEND
	NoOfdata_byte	= 18;
 8009dfc:	4bb5      	ldr	r3, [pc, #724]	; (800a0d4 <_ZN7ESP826612Send_WifiCmdEv+0x858>)
 8009dfe:	2212      	movs	r2, #18
 8009e00:	801a      	strh	r2, [r3, #0]
	//lenOfURl = sprintf(PostUrl_CharFormat,"GET /isc1-lab.acceedo.in:9009/logs?mac=01&t=373&h=972&W=01&U=01&x=0\r\nHOST:usm2-ht.acceedo.in:9009\r\n\r\n");
	r_set_duration_seq1 = (Rise_Sequence1_Minute%10)+((Rise_Sequence1_Minute/10)*10)+((Rise_Sequence1_Hour%10)*100)+((Rise_Sequence1_Hour/10)*1000);
 8009e02:	4bb5      	ldr	r3, [pc, #724]	; (800a0d8 <_ZN7ESP826612Send_WifiCmdEv+0x85c>)
 8009e04:	781a      	ldrb	r2, [r3, #0]
 8009e06:	4bb5      	ldr	r3, [pc, #724]	; (800a0dc <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 8009e08:	fba3 1302 	umull	r1, r3, r3, r2
 8009e0c:	08d9      	lsrs	r1, r3, #3
 8009e0e:	460b      	mov	r3, r1
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	440b      	add	r3, r1
 8009e14:	005b      	lsls	r3, r3, #1
 8009e16:	1ad3      	subs	r3, r2, r3
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	b298      	uxth	r0, r3
 8009e1c:	4bb0      	ldr	r3, [pc, #704]	; (800a0e0 <_ZN7ESP826612Send_WifiCmdEv+0x864>)
 8009e1e:	781a      	ldrb	r2, [r3, #0]
 8009e20:	4bae      	ldr	r3, [pc, #696]	; (800a0dc <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 8009e22:	fba3 1302 	umull	r1, r3, r3, r2
 8009e26:	08d9      	lsrs	r1, r3, #3
 8009e28:	460b      	mov	r3, r1
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	440b      	add	r3, r1
 8009e2e:	005b      	lsls	r3, r3, #1
 8009e30:	1ad3      	subs	r3, r2, r3
 8009e32:	b2db      	uxtb	r3, r3
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	461a      	mov	r2, r3
 8009e38:	0092      	lsls	r2, r2, #2
 8009e3a:	4413      	add	r3, r2
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	0091      	lsls	r1, r2, #2
 8009e40:	461a      	mov	r2, r3
 8009e42:	460b      	mov	r3, r1
 8009e44:	4413      	add	r3, r2
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	b29a      	uxth	r2, r3
 8009e4a:	4ba3      	ldr	r3, [pc, #652]	; (800a0d8 <_ZN7ESP826612Send_WifiCmdEv+0x85c>)
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	49a3      	ldr	r1, [pc, #652]	; (800a0dc <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 8009e50:	fba1 1303 	umull	r1, r3, r1, r3
 8009e54:	08db      	lsrs	r3, r3, #3
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	0089      	lsls	r1, r1, #2
 8009e5e:	440b      	add	r3, r1
 8009e60:	005b      	lsls	r3, r3, #1
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	4413      	add	r3, r2
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	4403      	add	r3, r0
 8009e6a:	b29a      	uxth	r2, r3
 8009e6c:	4b9c      	ldr	r3, [pc, #624]	; (800a0e0 <_ZN7ESP826612Send_WifiCmdEv+0x864>)
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	499a      	ldr	r1, [pc, #616]	; (800a0dc <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 8009e72:	fba1 1303 	umull	r1, r3, r1, r3
 8009e76:	08db      	lsrs	r3, r3, #3
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	0149      	lsls	r1, r1, #5
 8009e80:	1ac9      	subs	r1, r1, r3
 8009e82:	0089      	lsls	r1, r1, #2
 8009e84:	440b      	add	r3, r1
 8009e86:	00db      	lsls	r3, r3, #3
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	4413      	add	r3, r2
 8009e8c:	b29a      	uxth	r2, r3
 8009e8e:	4b95      	ldr	r3, [pc, #596]	; (800a0e4 <_ZN7ESP826612Send_WifiCmdEv+0x868>)
 8009e90:	801a      	strh	r2, [r3, #0]
	set_duration_seq1 = (H_Timer01MinValue%10)+((H_Timer01MinValue/10)*10)+((H_Timer01HrValue%10)*100)+((H_Timer01HrValue/10)*1000);
 8009e92:	4b95      	ldr	r3, [pc, #596]	; (800a0e8 <_ZN7ESP826612Send_WifiCmdEv+0x86c>)
 8009e94:	781a      	ldrb	r2, [r3, #0]
 8009e96:	4b91      	ldr	r3, [pc, #580]	; (800a0dc <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 8009e98:	fba3 1302 	umull	r1, r3, r3, r2
 8009e9c:	08d9      	lsrs	r1, r3, #3
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	440b      	add	r3, r1
 8009ea4:	005b      	lsls	r3, r3, #1
 8009ea6:	1ad3      	subs	r3, r2, r3
 8009ea8:	b2db      	uxtb	r3, r3
 8009eaa:	b298      	uxth	r0, r3
 8009eac:	4b8f      	ldr	r3, [pc, #572]	; (800a0ec <_ZN7ESP826612Send_WifiCmdEv+0x870>)
 8009eae:	781a      	ldrb	r2, [r3, #0]
 8009eb0:	4b8a      	ldr	r3, [pc, #552]	; (800a0dc <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 8009eb2:	fba3 1302 	umull	r1, r3, r3, r2
 8009eb6:	08d9      	lsrs	r1, r3, #3
 8009eb8:	460b      	mov	r3, r1
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	440b      	add	r3, r1
 8009ebe:	005b      	lsls	r3, r3, #1
 8009ec0:	1ad3      	subs	r3, r2, r3
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	0092      	lsls	r2, r2, #2
 8009eca:	4413      	add	r3, r2
 8009ecc:	461a      	mov	r2, r3
 8009ece:	0091      	lsls	r1, r2, #2
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	460b      	mov	r3, r1
 8009ed4:	4413      	add	r3, r2
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	b29a      	uxth	r2, r3
 8009eda:	4b83      	ldr	r3, [pc, #524]	; (800a0e8 <_ZN7ESP826612Send_WifiCmdEv+0x86c>)
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	497f      	ldr	r1, [pc, #508]	; (800a0dc <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 8009ee0:	fba1 1303 	umull	r1, r3, r1, r3
 8009ee4:	08db      	lsrs	r3, r3, #3
 8009ee6:	b2db      	uxtb	r3, r3
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	4619      	mov	r1, r3
 8009eec:	0089      	lsls	r1, r1, #2
 8009eee:	440b      	add	r3, r1
 8009ef0:	005b      	lsls	r3, r3, #1
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	4413      	add	r3, r2
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	4403      	add	r3, r0
 8009efa:	b29a      	uxth	r2, r3
 8009efc:	4b7b      	ldr	r3, [pc, #492]	; (800a0ec <_ZN7ESP826612Send_WifiCmdEv+0x870>)
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	4976      	ldr	r1, [pc, #472]	; (800a0dc <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 8009f02:	fba1 1303 	umull	r1, r3, r1, r3
 8009f06:	08db      	lsrs	r3, r3, #3
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	0149      	lsls	r1, r1, #5
 8009f10:	1ac9      	subs	r1, r1, r3
 8009f12:	0089      	lsls	r1, r1, #2
 8009f14:	440b      	add	r3, r1
 8009f16:	00db      	lsls	r3, r3, #3
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	4413      	add	r3, r2
 8009f1c:	b29a      	uxth	r2, r3
 8009f1e:	4b74      	ldr	r3, [pc, #464]	; (800a0f0 <_ZN7ESP826612Send_WifiCmdEv+0x874>)
 8009f20:	801a      	strh	r2, [r3, #0]
	r_set_duration_seq2 = (Rise_Sequence2_Minute%10)+((Rise_Sequence2_Minute/10)*10)+((R_Sequence2_hour_http%10)*100)+((R_Sequence2_hour_http/10)*1000);
 8009f22:	4b74      	ldr	r3, [pc, #464]	; (800a0f4 <_ZN7ESP826612Send_WifiCmdEv+0x878>)
 8009f24:	781a      	ldrb	r2, [r3, #0]
 8009f26:	4b6d      	ldr	r3, [pc, #436]	; (800a0dc <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 8009f28:	fba3 1302 	umull	r1, r3, r3, r2
 8009f2c:	08d9      	lsrs	r1, r3, #3
 8009f2e:	460b      	mov	r3, r1
 8009f30:	009b      	lsls	r3, r3, #2
 8009f32:	440b      	add	r3, r1
 8009f34:	005b      	lsls	r3, r3, #1
 8009f36:	1ad3      	subs	r3, r2, r3
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	b298      	uxth	r0, r3
 8009f3c:	4b6e      	ldr	r3, [pc, #440]	; (800a0f8 <_ZN7ESP826612Send_WifiCmdEv+0x87c>)
 8009f3e:	781a      	ldrb	r2, [r3, #0]
 8009f40:	4b66      	ldr	r3, [pc, #408]	; (800a0dc <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 8009f42:	fba3 1302 	umull	r1, r3, r3, r2
 8009f46:	08d9      	lsrs	r1, r3, #3
 8009f48:	460b      	mov	r3, r1
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	440b      	add	r3, r1
 8009f4e:	005b      	lsls	r3, r3, #1
 8009f50:	1ad3      	subs	r3, r2, r3
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	b29b      	uxth	r3, r3
 8009f56:	461a      	mov	r2, r3
 8009f58:	0092      	lsls	r2, r2, #2
 8009f5a:	4413      	add	r3, r2
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	0091      	lsls	r1, r2, #2
 8009f60:	461a      	mov	r2, r3
 8009f62:	460b      	mov	r3, r1
 8009f64:	4413      	add	r3, r2
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	b29a      	uxth	r2, r3
 8009f6a:	4b62      	ldr	r3, [pc, #392]	; (800a0f4 <_ZN7ESP826612Send_WifiCmdEv+0x878>)
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	495b      	ldr	r1, [pc, #364]	; (800a0dc <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 8009f70:	fba1 1303 	umull	r1, r3, r1, r3
 8009f74:	08db      	lsrs	r3, r3, #3
 8009f76:	b2db      	uxtb	r3, r3
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	0089      	lsls	r1, r1, #2
 8009f7e:	440b      	add	r3, r1
 8009f80:	005b      	lsls	r3, r3, #1
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	4413      	add	r3, r2
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	4403      	add	r3, r0
 8009f8a:	b29a      	uxth	r2, r3
 8009f8c:	4b5a      	ldr	r3, [pc, #360]	; (800a0f8 <_ZN7ESP826612Send_WifiCmdEv+0x87c>)
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	4952      	ldr	r1, [pc, #328]	; (800a0dc <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 8009f92:	fba1 1303 	umull	r1, r3, r1, r3
 8009f96:	08db      	lsrs	r3, r3, #3
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	0149      	lsls	r1, r1, #5
 8009fa0:	1ac9      	subs	r1, r1, r3
 8009fa2:	0089      	lsls	r1, r1, #2
 8009fa4:	440b      	add	r3, r1
 8009fa6:	00db      	lsls	r3, r3, #3
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	4413      	add	r3, r2
 8009fac:	b29a      	uxth	r2, r3
 8009fae:	4b53      	ldr	r3, [pc, #332]	; (800a0fc <_ZN7ESP826612Send_WifiCmdEv+0x880>)
 8009fb0:	801a      	strh	r2, [r3, #0]
	set_duration_seq2 = (H_Timer02MinValue%10)+((H_Timer02MinValue/10)*10)+((H_Timer02HrValue%10)*100)+((H_Timer02HrValue/10)*1000);
 8009fb2:	4b53      	ldr	r3, [pc, #332]	; (800a100 <_ZN7ESP826612Send_WifiCmdEv+0x884>)
 8009fb4:	781a      	ldrb	r2, [r3, #0]
 8009fb6:	4b49      	ldr	r3, [pc, #292]	; (800a0dc <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 8009fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8009fbc:	08d9      	lsrs	r1, r3, #3
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	440b      	add	r3, r1
 8009fc4:	005b      	lsls	r3, r3, #1
 8009fc6:	1ad3      	subs	r3, r2, r3
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	b298      	uxth	r0, r3
 8009fcc:	4b4d      	ldr	r3, [pc, #308]	; (800a104 <_ZN7ESP826612Send_WifiCmdEv+0x888>)
 8009fce:	781a      	ldrb	r2, [r3, #0]
 8009fd0:	4b42      	ldr	r3, [pc, #264]	; (800a0dc <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 8009fd2:	fba3 1302 	umull	r1, r3, r3, r2
 8009fd6:	08d9      	lsrs	r1, r3, #3
 8009fd8:	460b      	mov	r3, r1
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	440b      	add	r3, r1
 8009fde:	005b      	lsls	r3, r3, #1
 8009fe0:	1ad3      	subs	r3, r2, r3
 8009fe2:	b2db      	uxtb	r3, r3
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	0092      	lsls	r2, r2, #2
 8009fea:	4413      	add	r3, r2
 8009fec:	461a      	mov	r2, r3
 8009fee:	0091      	lsls	r1, r2, #2
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	4413      	add	r3, r2
 8009ff6:	009b      	lsls	r3, r3, #2
 8009ff8:	b29a      	uxth	r2, r3
 8009ffa:	4b41      	ldr	r3, [pc, #260]	; (800a100 <_ZN7ESP826612Send_WifiCmdEv+0x884>)
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	4937      	ldr	r1, [pc, #220]	; (800a0dc <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 800a000:	fba1 1303 	umull	r1, r3, r1, r3
 800a004:	08db      	lsrs	r3, r3, #3
 800a006:	b2db      	uxtb	r3, r3
 800a008:	b29b      	uxth	r3, r3
 800a00a:	4619      	mov	r1, r3
 800a00c:	0089      	lsls	r1, r1, #2
 800a00e:	440b      	add	r3, r1
 800a010:	005b      	lsls	r3, r3, #1
 800a012:	b29b      	uxth	r3, r3
 800a014:	4413      	add	r3, r2
 800a016:	b29b      	uxth	r3, r3
 800a018:	4403      	add	r3, r0
 800a01a:	b29a      	uxth	r2, r3
 800a01c:	4b39      	ldr	r3, [pc, #228]	; (800a104 <_ZN7ESP826612Send_WifiCmdEv+0x888>)
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	492e      	ldr	r1, [pc, #184]	; (800a0dc <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 800a022:	fba1 1303 	umull	r1, r3, r1, r3
 800a026:	08db      	lsrs	r3, r3, #3
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	4619      	mov	r1, r3
 800a02e:	0149      	lsls	r1, r1, #5
 800a030:	1ac9      	subs	r1, r1, r3
 800a032:	0089      	lsls	r1, r1, #2
 800a034:	440b      	add	r3, r1
 800a036:	00db      	lsls	r3, r3, #3
 800a038:	b29b      	uxth	r3, r3
 800a03a:	4413      	add	r3, r2
 800a03c:	b29a      	uxth	r2, r3
 800a03e:	4b32      	ldr	r3, [pc, #200]	; (800a108 <_ZN7ESP826612Send_WifiCmdEv+0x88c>)
 800a040:	801a      	strh	r2, [r3, #0]
	remaining_duration_seq1 =(seq1_remaining_time_min%10)+((seq1_remaining_time_min/10)*10)+((seq1_remaining_time_Hr%10)*100)+((seq1_remaining_time_Hr/10)*1000);
 800a042:	4b32      	ldr	r3, [pc, #200]	; (800a10c <_ZN7ESP826612Send_WifiCmdEv+0x890>)
 800a044:	781a      	ldrb	r2, [r3, #0]
 800a046:	4b25      	ldr	r3, [pc, #148]	; (800a0dc <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 800a048:	fba3 1302 	umull	r1, r3, r3, r2
 800a04c:	08d9      	lsrs	r1, r3, #3
 800a04e:	460b      	mov	r3, r1
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	440b      	add	r3, r1
 800a054:	005b      	lsls	r3, r3, #1
 800a056:	1ad3      	subs	r3, r2, r3
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	b298      	uxth	r0, r3
 800a05c:	4b2c      	ldr	r3, [pc, #176]	; (800a110 <_ZN7ESP826612Send_WifiCmdEv+0x894>)
 800a05e:	781a      	ldrb	r2, [r3, #0]
 800a060:	4b1e      	ldr	r3, [pc, #120]	; (800a0dc <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 800a062:	fba3 1302 	umull	r1, r3, r3, r2
 800a066:	08d9      	lsrs	r1, r3, #3
 800a068:	460b      	mov	r3, r1
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	440b      	add	r3, r1
 800a06e:	005b      	lsls	r3, r3, #1
 800a070:	1ad3      	subs	r3, r2, r3
 800a072:	b2db      	uxtb	r3, r3
 800a074:	b29b      	uxth	r3, r3
 800a076:	461a      	mov	r2, r3
 800a078:	0092      	lsls	r2, r2, #2
 800a07a:	4413      	add	r3, r2
 800a07c:	461a      	mov	r2, r3
 800a07e:	0091      	lsls	r1, r2, #2
 800a080:	461a      	mov	r2, r3
 800a082:	460b      	mov	r3, r1
 800a084:	4413      	add	r3, r2
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	b29a      	uxth	r2, r3
 800a08a:	4b20      	ldr	r3, [pc, #128]	; (800a10c <_ZN7ESP826612Send_WifiCmdEv+0x890>)
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	4913      	ldr	r1, [pc, #76]	; (800a0dc <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 800a090:	fba1 1303 	umull	r1, r3, r1, r3
 800a094:	08db      	lsrs	r3, r3, #3
 800a096:	b2db      	uxtb	r3, r3
 800a098:	b29b      	uxth	r3, r3
 800a09a:	4619      	mov	r1, r3
 800a09c:	0089      	lsls	r1, r1, #2
 800a09e:	440b      	add	r3, r1
 800a0a0:	005b      	lsls	r3, r3, #1
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	4413      	add	r3, r2
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	4403      	add	r3, r0
 800a0aa:	b29a      	uxth	r2, r3
 800a0ac:	4b18      	ldr	r3, [pc, #96]	; (800a110 <_ZN7ESP826612Send_WifiCmdEv+0x894>)
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	490a      	ldr	r1, [pc, #40]	; (800a0dc <_ZN7ESP826612Send_WifiCmdEv+0x860>)
 800a0b2:	fba1 1303 	umull	r1, r3, r1, r3
 800a0b6:	08db      	lsrs	r3, r3, #3
 800a0b8:	b2db      	uxtb	r3, r3
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	4619      	mov	r1, r3
 800a0be:	0149      	lsls	r1, r1, #5
 800a0c0:	1ac9      	subs	r1, r1, r3
 800a0c2:	0089      	lsls	r1, r1, #2
 800a0c4:	440b      	add	r3, r1
 800a0c6:	00db      	lsls	r3, r3, #3
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	4413      	add	r3, r2
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	4b11      	ldr	r3, [pc, #68]	; (800a114 <_ZN7ESP826612Send_WifiCmdEv+0x898>)
 800a0d0:	801a      	strh	r2, [r3, #0]
 800a0d2:	e021      	b.n	800a118 <_ZN7ESP826612Send_WifiCmdEv+0x89c>
 800a0d4:	20000766 	.word	0x20000766
 800a0d8:	20000647 	.word	0x20000647
 800a0dc:	cccccccd 	.word	0xcccccccd
 800a0e0:	20000646 	.word	0x20000646
 800a0e4:	2000076e 	.word	0x2000076e
 800a0e8:	2000063b 	.word	0x2000063b
 800a0ec:	2000063a 	.word	0x2000063a
 800a0f0:	20000770 	.word	0x20000770
 800a0f4:	20000649 	.word	0x20000649
 800a0f8:	200000f6 	.word	0x200000f6
 800a0fc:	20000772 	.word	0x20000772
 800a100:	2000063d 	.word	0x2000063d
 800a104:	2000063c 	.word	0x2000063c
 800a108:	20000774 	.word	0x20000774
 800a10c:	20000113 	.word	0x20000113
 800a110:	20000112 	.word	0x20000112
 800a114:	20000776 	.word	0x20000776
	remaining_duration_seq2 =(seq2_remaining_time_min%10)+((seq2_remaining_time_min/10)*10)+((seq2_remaining_time_Hr%10)*100)+((seq2_remaining_time_Hr/10)*1000);
 800a118:	4b72      	ldr	r3, [pc, #456]	; (800a2e4 <_ZN7ESP826612Send_WifiCmdEv+0xa68>)
 800a11a:	781a      	ldrb	r2, [r3, #0]
 800a11c:	4b72      	ldr	r3, [pc, #456]	; (800a2e8 <_ZN7ESP826612Send_WifiCmdEv+0xa6c>)
 800a11e:	fba3 1302 	umull	r1, r3, r3, r2
 800a122:	08d9      	lsrs	r1, r3, #3
 800a124:	460b      	mov	r3, r1
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	440b      	add	r3, r1
 800a12a:	005b      	lsls	r3, r3, #1
 800a12c:	1ad3      	subs	r3, r2, r3
 800a12e:	b2db      	uxtb	r3, r3
 800a130:	b298      	uxth	r0, r3
 800a132:	4b6e      	ldr	r3, [pc, #440]	; (800a2ec <_ZN7ESP826612Send_WifiCmdEv+0xa70>)
 800a134:	781a      	ldrb	r2, [r3, #0]
 800a136:	4b6c      	ldr	r3, [pc, #432]	; (800a2e8 <_ZN7ESP826612Send_WifiCmdEv+0xa6c>)
 800a138:	fba3 1302 	umull	r1, r3, r3, r2
 800a13c:	08d9      	lsrs	r1, r3, #3
 800a13e:	460b      	mov	r3, r1
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	440b      	add	r3, r1
 800a144:	005b      	lsls	r3, r3, #1
 800a146:	1ad3      	subs	r3, r2, r3
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	461a      	mov	r2, r3
 800a14e:	0092      	lsls	r2, r2, #2
 800a150:	4413      	add	r3, r2
 800a152:	461a      	mov	r2, r3
 800a154:	0091      	lsls	r1, r2, #2
 800a156:	461a      	mov	r2, r3
 800a158:	460b      	mov	r3, r1
 800a15a:	4413      	add	r3, r2
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	b29a      	uxth	r2, r3
 800a160:	4b60      	ldr	r3, [pc, #384]	; (800a2e4 <_ZN7ESP826612Send_WifiCmdEv+0xa68>)
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	4960      	ldr	r1, [pc, #384]	; (800a2e8 <_ZN7ESP826612Send_WifiCmdEv+0xa6c>)
 800a166:	fba1 1303 	umull	r1, r3, r1, r3
 800a16a:	08db      	lsrs	r3, r3, #3
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	b29b      	uxth	r3, r3
 800a170:	4619      	mov	r1, r3
 800a172:	0089      	lsls	r1, r1, #2
 800a174:	440b      	add	r3, r1
 800a176:	005b      	lsls	r3, r3, #1
 800a178:	b29b      	uxth	r3, r3
 800a17a:	4413      	add	r3, r2
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	4403      	add	r3, r0
 800a180:	b29a      	uxth	r2, r3
 800a182:	4b5a      	ldr	r3, [pc, #360]	; (800a2ec <_ZN7ESP826612Send_WifiCmdEv+0xa70>)
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	4958      	ldr	r1, [pc, #352]	; (800a2e8 <_ZN7ESP826612Send_WifiCmdEv+0xa6c>)
 800a188:	fba1 1303 	umull	r1, r3, r1, r3
 800a18c:	08db      	lsrs	r3, r3, #3
 800a18e:	b2db      	uxtb	r3, r3
 800a190:	b29b      	uxth	r3, r3
 800a192:	4619      	mov	r1, r3
 800a194:	0149      	lsls	r1, r1, #5
 800a196:	1ac9      	subs	r1, r1, r3
 800a198:	0089      	lsls	r1, r1, #2
 800a19a:	440b      	add	r3, r1
 800a19c:	00db      	lsls	r3, r3, #3
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	4413      	add	r3, r2
 800a1a2:	b29a      	uxth	r2, r3
 800a1a4:	4b52      	ldr	r3, [pc, #328]	; (800a2f0 <_ZN7ESP826612Send_WifiCmdEv+0xa74>)
 800a1a6:	801a      	strh	r2, [r3, #0]
	lenOfURl = sprintf(PostUrl_CharFormat,"GET /set_temp?u=4&p=%d&tm=%d&tl=%d&th=%d&hr=%d"
 800a1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1aa:	f103 00d6 	add.w	r0, r3, #214	; 0xd6
 800a1ae:	4b51      	ldr	r3, [pc, #324]	; (800a2f4 <_ZN7ESP826612Send_WifiCmdEv+0xa78>)
 800a1b0:	881b      	ldrh	r3, [r3, #0]
 800a1b2:	469c      	mov	ip, r3
 800a1b4:	4b50      	ldr	r3, [pc, #320]	; (800a2f8 <_ZN7ESP826612Send_WifiCmdEv+0xa7c>)
 800a1b6:	881b      	ldrh	r3, [r3, #0]
 800a1b8:	469e      	mov	lr, r3
 800a1ba:	4b50      	ldr	r3, [pc, #320]	; (800a2fc <_ZN7ESP826612Send_WifiCmdEv+0xa80>)
 800a1bc:	881b      	ldrh	r3, [r3, #0]
 800a1be:	461e      	mov	r6, r3
 800a1c0:	4b4f      	ldr	r3, [pc, #316]	; (800a300 <_ZN7ESP826612Send_WifiCmdEv+0xa84>)
 800a1c2:	881b      	ldrh	r3, [r3, #0]
 800a1c4:	623b      	str	r3, [r7, #32]
 800a1c6:	4b4f      	ldr	r3, [pc, #316]	; (800a304 <_ZN7ESP826612Send_WifiCmdEv+0xa88>)
 800a1c8:	881b      	ldrh	r3, [r3, #0]
 800a1ca:	61fb      	str	r3, [r7, #28]
 800a1cc:	4b4e      	ldr	r3, [pc, #312]	; (800a308 <_ZN7ESP826612Send_WifiCmdEv+0xa8c>)
 800a1ce:	881b      	ldrh	r3, [r3, #0]
 800a1d0:	61bb      	str	r3, [r7, #24]
 800a1d2:	4b4e      	ldr	r3, [pc, #312]	; (800a30c <_ZN7ESP826612Send_WifiCmdEv+0xa90>)
 800a1d4:	881b      	ldrh	r3, [r3, #0]
 800a1d6:	617b      	str	r3, [r7, #20]
 800a1d8:	4b4d      	ldr	r3, [pc, #308]	; (800a310 <_ZN7ESP826612Send_WifiCmdEv+0xa94>)
 800a1da:	881b      	ldrh	r3, [r3, #0]
 800a1dc:	613b      	str	r3, [r7, #16]
 800a1de:	4b4d      	ldr	r3, [pc, #308]	; (800a314 <_ZN7ESP826612Send_WifiCmdEv+0xa98>)
 800a1e0:	881b      	ldrh	r3, [r3, #0]
 800a1e2:	60fb      	str	r3, [r7, #12]
 800a1e4:	4b4c      	ldr	r3, [pc, #304]	; (800a318 <_ZN7ESP826612Send_WifiCmdEv+0xa9c>)
 800a1e6:	881b      	ldrh	r3, [r3, #0]
 800a1e8:	60bb      	str	r3, [r7, #8]
 800a1ea:	4b4c      	ldr	r3, [pc, #304]	; (800a31c <_ZN7ESP826612Send_WifiCmdEv+0xaa0>)
 800a1ec:	881b      	ldrh	r3, [r3, #0]
 800a1ee:	607b      	str	r3, [r7, #4]
 800a1f0:	4b4b      	ldr	r3, [pc, #300]	; (800a320 <_ZN7ESP826612Send_WifiCmdEv+0xaa4>)
 800a1f2:	881b      	ldrh	r3, [r3, #0]
 800a1f4:	603b      	str	r3, [r7, #0]
 800a1f6:	4b4b      	ldr	r3, [pc, #300]	; (800a324 <_ZN7ESP826612Send_WifiCmdEv+0xaa8>)
 800a1f8:	881b      	ldrh	r3, [r3, #0]
 800a1fa:	461d      	mov	r5, r3
 800a1fc:	4b3c      	ldr	r3, [pc, #240]	; (800a2f0 <_ZN7ESP826612Send_WifiCmdEv+0xa74>)
 800a1fe:	881b      	ldrh	r3, [r3, #0]
 800a200:	461c      	mov	r4, r3
 800a202:	4b49      	ldr	r3, [pc, #292]	; (800a328 <_ZN7ESP826612Send_WifiCmdEv+0xaac>)
 800a204:	881b      	ldrh	r3, [r3, #0]
 800a206:	4619      	mov	r1, r3
 800a208:	4b48      	ldr	r3, [pc, #288]	; (800a32c <_ZN7ESP826612Send_WifiCmdEv+0xab0>)
 800a20a:	881b      	ldrh	r3, [r3, #0]
 800a20c:	461a      	mov	r2, r3
 800a20e:	4b48      	ldr	r3, [pc, #288]	; (800a330 <_ZN7ESP826612Send_WifiCmdEv+0xab4>)
 800a210:	781b      	ldrb	r3, [r3, #0]
 800a212:	9311      	str	r3, [sp, #68]	; 0x44
 800a214:	2301      	movs	r3, #1
 800a216:	9310      	str	r3, [sp, #64]	; 0x40
 800a218:	2300      	movs	r3, #0
 800a21a:	930f      	str	r3, [sp, #60]	; 0x3c
 800a21c:	920e      	str	r2, [sp, #56]	; 0x38
 800a21e:	2301      	movs	r3, #1
 800a220:	930d      	str	r3, [sp, #52]	; 0x34
 800a222:	910c      	str	r1, [sp, #48]	; 0x30
 800a224:	940b      	str	r4, [sp, #44]	; 0x2c
 800a226:	950a      	str	r5, [sp, #40]	; 0x28
 800a228:	683a      	ldr	r2, [r7, #0]
 800a22a:	9209      	str	r2, [sp, #36]	; 0x24
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	9208      	str	r2, [sp, #32]
 800a230:	68ba      	ldr	r2, [r7, #8]
 800a232:	9207      	str	r2, [sp, #28]
 800a234:	68fa      	ldr	r2, [r7, #12]
 800a236:	9206      	str	r2, [sp, #24]
 800a238:	693a      	ldr	r2, [r7, #16]
 800a23a:	9205      	str	r2, [sp, #20]
 800a23c:	697a      	ldr	r2, [r7, #20]
 800a23e:	9204      	str	r2, [sp, #16]
 800a240:	69ba      	ldr	r2, [r7, #24]
 800a242:	9203      	str	r2, [sp, #12]
 800a244:	69fa      	ldr	r2, [r7, #28]
 800a246:	9202      	str	r2, [sp, #8]
 800a248:	6a3b      	ldr	r3, [r7, #32]
 800a24a:	9301      	str	r3, [sp, #4]
 800a24c:	9600      	str	r6, [sp, #0]
 800a24e:	4673      	mov	r3, lr
 800a250:	4662      	mov	r2, ip
 800a252:	4938      	ldr	r1, [pc, #224]	; (800a334 <_ZN7ESP826612Send_WifiCmdEv+0xab8>)
 800a254:	f005 fb80 	bl	800f958 <siprintf>
 800a258:	4603      	mov	r3, r0
 800a25a:	b29a      	uxth	r2, r3
 800a25c:	4b36      	ldr	r3, [pc, #216]	; (800a338 <_ZN7ESP826612Send_WifiCmdEv+0xabc>)
 800a25e:	801a      	strh	r2, [r3, #0]
				"&bc=%d&yc=%d&k=%d&x=%02d\r\nHost:usm4-ht.acceedo.in:9012\r\n\r\n",
				ProcessId_Value,act_temperature_c1,act_temperature_c2,act_temperature_c3,
				Rise_Sequence1_temp,Seq1temperature,Rise_Sequence2_temp,Seq2temperature,r_set_duration_seq1,set_duration_seq1,r_set_duration_seq2,set_duration_seq2,
				remaining_duration_seq1,remaining_duration_seq2,act_temperature_c4,
				1,water_temperature,0,1,status_to_server);
	sprintf(SendData_charFormat,"AT+CIPSEND=1,%d\r\n",lenOfURl);
 800a260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a262:	33c2      	adds	r3, #194	; 0xc2
 800a264:	4a34      	ldr	r2, [pc, #208]	; (800a338 <_ZN7ESP826612Send_WifiCmdEv+0xabc>)
 800a266:	8812      	ldrh	r2, [r2, #0]
 800a268:	4934      	ldr	r1, [pc, #208]	; (800a33c <_ZN7ESP826612Send_WifiCmdEv+0xac0>)
 800a26a:	4618      	mov	r0, r3
 800a26c:	f005 fb74 	bl	800f958 <siprintf>
	memcpy(SendData_uintFormat,SendData_charFormat,NoOfdata_byte);
 800a270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a272:	f103 00ae 	add.w	r0, r3, #174	; 0xae
 800a276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a278:	33c2      	adds	r3, #194	; 0xc2
 800a27a:	4a31      	ldr	r2, [pc, #196]	; (800a340 <_ZN7ESP826612Send_WifiCmdEv+0xac4>)
 800a27c:	8812      	ldrh	r2, [r2, #0]
 800a27e:	4619      	mov	r1, r3
 800a280:	f005 fa64 	bl	800f74c <memcpy>
	HAL_UART_Transmit_IT(&hlpuart1,SendData_uintFormat,NoOfdata_byte);
 800a284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a286:	33ae      	adds	r3, #174	; 0xae
 800a288:	4a2d      	ldr	r2, [pc, #180]	; (800a340 <_ZN7ESP826612Send_WifiCmdEv+0xac4>)
 800a28a:	8812      	ldrh	r2, [r2, #0]
 800a28c:	4619      	mov	r1, r3
 800a28e:	482d      	ldr	r0, [pc, #180]	; (800a344 <_ZN7ESP826612Send_WifiCmdEv+0xac8>)
 800a290:	f003 fecc 	bl	800e02c <HAL_UART_Transmit_IT>
	wifi_command=91;
 800a294:	4b2c      	ldr	r3, [pc, #176]	; (800a348 <_ZN7ESP826612Send_WifiCmdEv+0xacc>)
 800a296:	225b      	movs	r2, #91	; 0x5b
 800a298:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=6;
 800a29a:	4b2c      	ldr	r3, [pc, #176]	; (800a34c <_ZN7ESP826612Send_WifiCmdEv+0xad0>)
 800a29c:	2206      	movs	r2, #6
 800a29e:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 800a2a0:	4b2b      	ldr	r3, [pc, #172]	; (800a350 <_ZN7ESP826612Send_WifiCmdEv+0xad4>)
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,ESP8266TXData,NoOfdata_byte);
 800a2a6:	4b26      	ldr	r3, [pc, #152]	; (800a340 <_ZN7ESP826612Send_WifiCmdEv+0xac4>)
 800a2a8:	881b      	ldrh	r3, [r3, #0]
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	4929      	ldr	r1, [pc, #164]	; (800a354 <_ZN7ESP826612Send_WifiCmdEv+0xad8>)
 800a2ae:	4825      	ldr	r0, [pc, #148]	; (800a344 <_ZN7ESP826612Send_WifiCmdEv+0xac8>)
 800a2b0:	f003 febc 	bl	800e02c <HAL_UART_Transmit_IT>
	break;
 800a2b4:	e30d      	b.n	800a8d2 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	case 91:
	if(++Timerdelay >15)
 800a2b6:	4b26      	ldr	r3, [pc, #152]	; (800a350 <_ZN7ESP826612Send_WifiCmdEv+0xad4>)
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	b2da      	uxtb	r2, r3
 800a2be:	4b24      	ldr	r3, [pc, #144]	; (800a350 <_ZN7ESP826612Send_WifiCmdEv+0xad4>)
 800a2c0:	701a      	strb	r2, [r3, #0]
 800a2c2:	4b23      	ldr	r3, [pc, #140]	; (800a350 <_ZN7ESP826612Send_WifiCmdEv+0xad4>)
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	2b0f      	cmp	r3, #15
 800a2c8:	bf8c      	ite	hi
 800a2ca:	2301      	movhi	r3, #1
 800a2cc:	2300      	movls	r3, #0
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	f000 82f7 	beq.w	800a8c4 <_ZN7ESP826612Send_WifiCmdEv+0x1048>
	{
		Timerdelay=0;
 800a2d6:	4b1e      	ldr	r3, [pc, #120]	; (800a350 <_ZN7ESP826612Send_WifiCmdEv+0xad4>)
 800a2d8:	2200      	movs	r2, #0
 800a2da:	701a      	strb	r2, [r3, #0]
		wifi_command=10;
 800a2dc:	4b1a      	ldr	r3, [pc, #104]	; (800a348 <_ZN7ESP826612Send_WifiCmdEv+0xacc>)
 800a2de:	220a      	movs	r2, #10
 800a2e0:	701a      	strb	r2, [r3, #0]
	}
	break;
 800a2e2:	e2ef      	b.n	800a8c4 <_ZN7ESP826612Send_WifiCmdEv+0x1048>
 800a2e4:	20000115 	.word	0x20000115
 800a2e8:	cccccccd 	.word	0xcccccccd
 800a2ec:	20000114 	.word	0x20000114
 800a2f0:	20000778 	.word	0x20000778
 800a2f4:	20000626 	.word	0x20000626
 800a2f8:	2000062e 	.word	0x2000062e
 800a2fc:	20000630 	.word	0x20000630
 800a300:	20000632 	.word	0x20000632
 800a304:	20000642 	.word	0x20000642
 800a308:	20000628 	.word	0x20000628
 800a30c:	20000644 	.word	0x20000644
 800a310:	2000062a 	.word	0x2000062a
 800a314:	2000076e 	.word	0x2000076e
 800a318:	20000770 	.word	0x20000770
 800a31c:	20000772 	.word	0x20000772
 800a320:	20000774 	.word	0x20000774
 800a324:	20000776 	.word	0x20000776
 800a328:	20000634 	.word	0x20000634
 800a32c:	20000256 	.word	0x20000256
 800a330:	20000624 	.word	0x20000624
 800a334:	0801032c 	.word	0x0801032c
 800a338:	2000076c 	.word	0x2000076c
 800a33c:	080103e8 	.word	0x080103e8
 800a340:	20000766 	.word	0x20000766
 800a344:	200002ac 	.word	0x200002ac
 800a348:	20000664 	.word	0x20000664
 800a34c:	20000763 	.word	0x20000763
 800a350:	20000768 	.word	0x20000768
 800a354:	20000668 	.word	0x20000668
	case 100:

		r_set_duration_seq1 = (Rise_Sequence1_Minute%10)+((Rise_Sequence1_Minute/10)*10)+((Rise_Sequence1_Hour%10)*100)+((Rise_Sequence1_Hour/10)*1000);
 800a358:	4bb6      	ldr	r3, [pc, #728]	; (800a634 <_ZN7ESP826612Send_WifiCmdEv+0xdb8>)
 800a35a:	781a      	ldrb	r2, [r3, #0]
 800a35c:	4bb6      	ldr	r3, [pc, #728]	; (800a638 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a35e:	fba3 1302 	umull	r1, r3, r3, r2
 800a362:	08d9      	lsrs	r1, r3, #3
 800a364:	460b      	mov	r3, r1
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	440b      	add	r3, r1
 800a36a:	005b      	lsls	r3, r3, #1
 800a36c:	1ad3      	subs	r3, r2, r3
 800a36e:	b2db      	uxtb	r3, r3
 800a370:	b298      	uxth	r0, r3
 800a372:	4bb2      	ldr	r3, [pc, #712]	; (800a63c <_ZN7ESP826612Send_WifiCmdEv+0xdc0>)
 800a374:	781a      	ldrb	r2, [r3, #0]
 800a376:	4bb0      	ldr	r3, [pc, #704]	; (800a638 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a378:	fba3 1302 	umull	r1, r3, r3, r2
 800a37c:	08d9      	lsrs	r1, r3, #3
 800a37e:	460b      	mov	r3, r1
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	440b      	add	r3, r1
 800a384:	005b      	lsls	r3, r3, #1
 800a386:	1ad3      	subs	r3, r2, r3
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	461a      	mov	r2, r3
 800a38e:	0092      	lsls	r2, r2, #2
 800a390:	4413      	add	r3, r2
 800a392:	461a      	mov	r2, r3
 800a394:	0091      	lsls	r1, r2, #2
 800a396:	461a      	mov	r2, r3
 800a398:	460b      	mov	r3, r1
 800a39a:	4413      	add	r3, r2
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	b29a      	uxth	r2, r3
 800a3a0:	4ba4      	ldr	r3, [pc, #656]	; (800a634 <_ZN7ESP826612Send_WifiCmdEv+0xdb8>)
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	49a4      	ldr	r1, [pc, #656]	; (800a638 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a3a6:	fba1 1303 	umull	r1, r3, r1, r3
 800a3aa:	08db      	lsrs	r3, r3, #3
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	b29b      	uxth	r3, r3
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	0089      	lsls	r1, r1, #2
 800a3b4:	440b      	add	r3, r1
 800a3b6:	005b      	lsls	r3, r3, #1
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	4413      	add	r3, r2
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	4403      	add	r3, r0
 800a3c0:	b29a      	uxth	r2, r3
 800a3c2:	4b9e      	ldr	r3, [pc, #632]	; (800a63c <_ZN7ESP826612Send_WifiCmdEv+0xdc0>)
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	499c      	ldr	r1, [pc, #624]	; (800a638 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a3c8:	fba1 1303 	umull	r1, r3, r1, r3
 800a3cc:	08db      	lsrs	r3, r3, #3
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	0149      	lsls	r1, r1, #5
 800a3d6:	1ac9      	subs	r1, r1, r3
 800a3d8:	0089      	lsls	r1, r1, #2
 800a3da:	440b      	add	r3, r1
 800a3dc:	00db      	lsls	r3, r3, #3
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	4413      	add	r3, r2
 800a3e2:	b29a      	uxth	r2, r3
 800a3e4:	4b96      	ldr	r3, [pc, #600]	; (800a640 <_ZN7ESP826612Send_WifiCmdEv+0xdc4>)
 800a3e6:	801a      	strh	r2, [r3, #0]
		set_duration_seq1 = (H_Timer01MinValue%10)+((H_Timer01MinValue/10)*10)+((H_Timer01HrValue%10)*100)+((H_Timer01HrValue/10)*1000);
 800a3e8:	4b96      	ldr	r3, [pc, #600]	; (800a644 <_ZN7ESP826612Send_WifiCmdEv+0xdc8>)
 800a3ea:	781a      	ldrb	r2, [r3, #0]
 800a3ec:	4b92      	ldr	r3, [pc, #584]	; (800a638 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a3ee:	fba3 1302 	umull	r1, r3, r3, r2
 800a3f2:	08d9      	lsrs	r1, r3, #3
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	440b      	add	r3, r1
 800a3fa:	005b      	lsls	r3, r3, #1
 800a3fc:	1ad3      	subs	r3, r2, r3
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	b298      	uxth	r0, r3
 800a402:	4b91      	ldr	r3, [pc, #580]	; (800a648 <_ZN7ESP826612Send_WifiCmdEv+0xdcc>)
 800a404:	781a      	ldrb	r2, [r3, #0]
 800a406:	4b8c      	ldr	r3, [pc, #560]	; (800a638 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a408:	fba3 1302 	umull	r1, r3, r3, r2
 800a40c:	08d9      	lsrs	r1, r3, #3
 800a40e:	460b      	mov	r3, r1
 800a410:	009b      	lsls	r3, r3, #2
 800a412:	440b      	add	r3, r1
 800a414:	005b      	lsls	r3, r3, #1
 800a416:	1ad3      	subs	r3, r2, r3
 800a418:	b2db      	uxtb	r3, r3
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	461a      	mov	r2, r3
 800a41e:	0092      	lsls	r2, r2, #2
 800a420:	4413      	add	r3, r2
 800a422:	461a      	mov	r2, r3
 800a424:	0091      	lsls	r1, r2, #2
 800a426:	461a      	mov	r2, r3
 800a428:	460b      	mov	r3, r1
 800a42a:	4413      	add	r3, r2
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	b29a      	uxth	r2, r3
 800a430:	4b84      	ldr	r3, [pc, #528]	; (800a644 <_ZN7ESP826612Send_WifiCmdEv+0xdc8>)
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	4980      	ldr	r1, [pc, #512]	; (800a638 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a436:	fba1 1303 	umull	r1, r3, r1, r3
 800a43a:	08db      	lsrs	r3, r3, #3
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	b29b      	uxth	r3, r3
 800a440:	4619      	mov	r1, r3
 800a442:	0089      	lsls	r1, r1, #2
 800a444:	440b      	add	r3, r1
 800a446:	005b      	lsls	r3, r3, #1
 800a448:	b29b      	uxth	r3, r3
 800a44a:	4413      	add	r3, r2
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	4403      	add	r3, r0
 800a450:	b29a      	uxth	r2, r3
 800a452:	4b7d      	ldr	r3, [pc, #500]	; (800a648 <_ZN7ESP826612Send_WifiCmdEv+0xdcc>)
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	4978      	ldr	r1, [pc, #480]	; (800a638 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a458:	fba1 1303 	umull	r1, r3, r1, r3
 800a45c:	08db      	lsrs	r3, r3, #3
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	b29b      	uxth	r3, r3
 800a462:	4619      	mov	r1, r3
 800a464:	0149      	lsls	r1, r1, #5
 800a466:	1ac9      	subs	r1, r1, r3
 800a468:	0089      	lsls	r1, r1, #2
 800a46a:	440b      	add	r3, r1
 800a46c:	00db      	lsls	r3, r3, #3
 800a46e:	b29b      	uxth	r3, r3
 800a470:	4413      	add	r3, r2
 800a472:	b29a      	uxth	r2, r3
 800a474:	4b75      	ldr	r3, [pc, #468]	; (800a64c <_ZN7ESP826612Send_WifiCmdEv+0xdd0>)
 800a476:	801a      	strh	r2, [r3, #0]
		r_set_duration_seq2 = (Rise_Sequence2_Minute%10)+((Rise_Sequence2_Minute/10)*10)+((R_Sequence2_hour_http%10)*100)+((R_Sequence2_hour_http/10)*1000);
 800a478:	4b75      	ldr	r3, [pc, #468]	; (800a650 <_ZN7ESP826612Send_WifiCmdEv+0xdd4>)
 800a47a:	781a      	ldrb	r2, [r3, #0]
 800a47c:	4b6e      	ldr	r3, [pc, #440]	; (800a638 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a47e:	fba3 1302 	umull	r1, r3, r3, r2
 800a482:	08d9      	lsrs	r1, r3, #3
 800a484:	460b      	mov	r3, r1
 800a486:	009b      	lsls	r3, r3, #2
 800a488:	440b      	add	r3, r1
 800a48a:	005b      	lsls	r3, r3, #1
 800a48c:	1ad3      	subs	r3, r2, r3
 800a48e:	b2db      	uxtb	r3, r3
 800a490:	b298      	uxth	r0, r3
 800a492:	4b70      	ldr	r3, [pc, #448]	; (800a654 <_ZN7ESP826612Send_WifiCmdEv+0xdd8>)
 800a494:	781a      	ldrb	r2, [r3, #0]
 800a496:	4b68      	ldr	r3, [pc, #416]	; (800a638 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a498:	fba3 1302 	umull	r1, r3, r3, r2
 800a49c:	08d9      	lsrs	r1, r3, #3
 800a49e:	460b      	mov	r3, r1
 800a4a0:	009b      	lsls	r3, r3, #2
 800a4a2:	440b      	add	r3, r1
 800a4a4:	005b      	lsls	r3, r3, #1
 800a4a6:	1ad3      	subs	r3, r2, r3
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	0092      	lsls	r2, r2, #2
 800a4b0:	4413      	add	r3, r2
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	0091      	lsls	r1, r2, #2
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	4413      	add	r3, r2
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	b29a      	uxth	r2, r3
 800a4c0:	4b63      	ldr	r3, [pc, #396]	; (800a650 <_ZN7ESP826612Send_WifiCmdEv+0xdd4>)
 800a4c2:	781b      	ldrb	r3, [r3, #0]
 800a4c4:	495c      	ldr	r1, [pc, #368]	; (800a638 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a4c6:	fba1 1303 	umull	r1, r3, r1, r3
 800a4ca:	08db      	lsrs	r3, r3, #3
 800a4cc:	b2db      	uxtb	r3, r3
 800a4ce:	b29b      	uxth	r3, r3
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	0089      	lsls	r1, r1, #2
 800a4d4:	440b      	add	r3, r1
 800a4d6:	005b      	lsls	r3, r3, #1
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	4413      	add	r3, r2
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	4403      	add	r3, r0
 800a4e0:	b29a      	uxth	r2, r3
 800a4e2:	4b5c      	ldr	r3, [pc, #368]	; (800a654 <_ZN7ESP826612Send_WifiCmdEv+0xdd8>)
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	4954      	ldr	r1, [pc, #336]	; (800a638 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a4e8:	fba1 1303 	umull	r1, r3, r1, r3
 800a4ec:	08db      	lsrs	r3, r3, #3
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	b29b      	uxth	r3, r3
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	0149      	lsls	r1, r1, #5
 800a4f6:	1ac9      	subs	r1, r1, r3
 800a4f8:	0089      	lsls	r1, r1, #2
 800a4fa:	440b      	add	r3, r1
 800a4fc:	00db      	lsls	r3, r3, #3
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	4413      	add	r3, r2
 800a502:	b29a      	uxth	r2, r3
 800a504:	4b54      	ldr	r3, [pc, #336]	; (800a658 <_ZN7ESP826612Send_WifiCmdEv+0xddc>)
 800a506:	801a      	strh	r2, [r3, #0]
		set_duration_seq2 = (H_Timer02MinValue%10)+((H_Timer02MinValue/10)*10)+((H_Timer02HrValue%10)*100)+((H_Timer02HrValue/10)*1000);
 800a508:	4b54      	ldr	r3, [pc, #336]	; (800a65c <_ZN7ESP826612Send_WifiCmdEv+0xde0>)
 800a50a:	781a      	ldrb	r2, [r3, #0]
 800a50c:	4b4a      	ldr	r3, [pc, #296]	; (800a638 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a50e:	fba3 1302 	umull	r1, r3, r3, r2
 800a512:	08d9      	lsrs	r1, r3, #3
 800a514:	460b      	mov	r3, r1
 800a516:	009b      	lsls	r3, r3, #2
 800a518:	440b      	add	r3, r1
 800a51a:	005b      	lsls	r3, r3, #1
 800a51c:	1ad3      	subs	r3, r2, r3
 800a51e:	b2db      	uxtb	r3, r3
 800a520:	b298      	uxth	r0, r3
 800a522:	4b4f      	ldr	r3, [pc, #316]	; (800a660 <_ZN7ESP826612Send_WifiCmdEv+0xde4>)
 800a524:	781a      	ldrb	r2, [r3, #0]
 800a526:	4b44      	ldr	r3, [pc, #272]	; (800a638 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a528:	fba3 1302 	umull	r1, r3, r3, r2
 800a52c:	08d9      	lsrs	r1, r3, #3
 800a52e:	460b      	mov	r3, r1
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	440b      	add	r3, r1
 800a534:	005b      	lsls	r3, r3, #1
 800a536:	1ad3      	subs	r3, r2, r3
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	461a      	mov	r2, r3
 800a53e:	0092      	lsls	r2, r2, #2
 800a540:	4413      	add	r3, r2
 800a542:	461a      	mov	r2, r3
 800a544:	0091      	lsls	r1, r2, #2
 800a546:	461a      	mov	r2, r3
 800a548:	460b      	mov	r3, r1
 800a54a:	4413      	add	r3, r2
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	b29a      	uxth	r2, r3
 800a550:	4b42      	ldr	r3, [pc, #264]	; (800a65c <_ZN7ESP826612Send_WifiCmdEv+0xde0>)
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	4938      	ldr	r1, [pc, #224]	; (800a638 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a556:	fba1 1303 	umull	r1, r3, r1, r3
 800a55a:	08db      	lsrs	r3, r3, #3
 800a55c:	b2db      	uxtb	r3, r3
 800a55e:	b29b      	uxth	r3, r3
 800a560:	4619      	mov	r1, r3
 800a562:	0089      	lsls	r1, r1, #2
 800a564:	440b      	add	r3, r1
 800a566:	005b      	lsls	r3, r3, #1
 800a568:	b29b      	uxth	r3, r3
 800a56a:	4413      	add	r3, r2
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	4403      	add	r3, r0
 800a570:	b29a      	uxth	r2, r3
 800a572:	4b3b      	ldr	r3, [pc, #236]	; (800a660 <_ZN7ESP826612Send_WifiCmdEv+0xde4>)
 800a574:	781b      	ldrb	r3, [r3, #0]
 800a576:	4930      	ldr	r1, [pc, #192]	; (800a638 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a578:	fba1 1303 	umull	r1, r3, r1, r3
 800a57c:	08db      	lsrs	r3, r3, #3
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	b29b      	uxth	r3, r3
 800a582:	4619      	mov	r1, r3
 800a584:	0149      	lsls	r1, r1, #5
 800a586:	1ac9      	subs	r1, r1, r3
 800a588:	0089      	lsls	r1, r1, #2
 800a58a:	440b      	add	r3, r1
 800a58c:	00db      	lsls	r3, r3, #3
 800a58e:	b29b      	uxth	r3, r3
 800a590:	4413      	add	r3, r2
 800a592:	b29a      	uxth	r2, r3
 800a594:	4b33      	ldr	r3, [pc, #204]	; (800a664 <_ZN7ESP826612Send_WifiCmdEv+0xde8>)
 800a596:	801a      	strh	r2, [r3, #0]
		remaining_duration_seq1 =(seq1_remaining_time_min%10)+((seq1_remaining_time_min/10)*10)+((seq1_remaining_time_Hr%10)*100)+((seq1_remaining_time_Hr/10)*1000);
 800a598:	4b33      	ldr	r3, [pc, #204]	; (800a668 <_ZN7ESP826612Send_WifiCmdEv+0xdec>)
 800a59a:	781a      	ldrb	r2, [r3, #0]
 800a59c:	4b26      	ldr	r3, [pc, #152]	; (800a638 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a59e:	fba3 1302 	umull	r1, r3, r3, r2
 800a5a2:	08d9      	lsrs	r1, r3, #3
 800a5a4:	460b      	mov	r3, r1
 800a5a6:	009b      	lsls	r3, r3, #2
 800a5a8:	440b      	add	r3, r1
 800a5aa:	005b      	lsls	r3, r3, #1
 800a5ac:	1ad3      	subs	r3, r2, r3
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	b298      	uxth	r0, r3
 800a5b2:	4b2e      	ldr	r3, [pc, #184]	; (800a66c <_ZN7ESP826612Send_WifiCmdEv+0xdf0>)
 800a5b4:	781a      	ldrb	r2, [r3, #0]
 800a5b6:	4b20      	ldr	r3, [pc, #128]	; (800a638 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a5b8:	fba3 1302 	umull	r1, r3, r3, r2
 800a5bc:	08d9      	lsrs	r1, r3, #3
 800a5be:	460b      	mov	r3, r1
 800a5c0:	009b      	lsls	r3, r3, #2
 800a5c2:	440b      	add	r3, r1
 800a5c4:	005b      	lsls	r3, r3, #1
 800a5c6:	1ad3      	subs	r3, r2, r3
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	0092      	lsls	r2, r2, #2
 800a5d0:	4413      	add	r3, r2
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	0091      	lsls	r1, r2, #2
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	460b      	mov	r3, r1
 800a5da:	4413      	add	r3, r2
 800a5dc:	009b      	lsls	r3, r3, #2
 800a5de:	b29a      	uxth	r2, r3
 800a5e0:	4b21      	ldr	r3, [pc, #132]	; (800a668 <_ZN7ESP826612Send_WifiCmdEv+0xdec>)
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	4914      	ldr	r1, [pc, #80]	; (800a638 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a5e6:	fba1 1303 	umull	r1, r3, r1, r3
 800a5ea:	08db      	lsrs	r3, r3, #3
 800a5ec:	b2db      	uxtb	r3, r3
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	0089      	lsls	r1, r1, #2
 800a5f4:	440b      	add	r3, r1
 800a5f6:	005b      	lsls	r3, r3, #1
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	4413      	add	r3, r2
 800a5fc:	b29b      	uxth	r3, r3
 800a5fe:	4403      	add	r3, r0
 800a600:	b29a      	uxth	r2, r3
 800a602:	4b1a      	ldr	r3, [pc, #104]	; (800a66c <_ZN7ESP826612Send_WifiCmdEv+0xdf0>)
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	490c      	ldr	r1, [pc, #48]	; (800a638 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a608:	fba1 1303 	umull	r1, r3, r1, r3
 800a60c:	08db      	lsrs	r3, r3, #3
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	b29b      	uxth	r3, r3
 800a612:	4619      	mov	r1, r3
 800a614:	0149      	lsls	r1, r1, #5
 800a616:	1ac9      	subs	r1, r1, r3
 800a618:	0089      	lsls	r1, r1, #2
 800a61a:	440b      	add	r3, r1
 800a61c:	00db      	lsls	r3, r3, #3
 800a61e:	b29b      	uxth	r3, r3
 800a620:	4413      	add	r3, r2
 800a622:	b29a      	uxth	r2, r3
 800a624:	4b12      	ldr	r3, [pc, #72]	; (800a670 <_ZN7ESP826612Send_WifiCmdEv+0xdf4>)
 800a626:	801a      	strh	r2, [r3, #0]
		remaining_duration_seq2 =(seq2_remaining_time_min%10)+((seq2_remaining_time_min/10)*10)+((seq2_remaining_time_Hr%10)*100)+((seq2_remaining_time_Hr/10)*1000);
 800a628:	4b12      	ldr	r3, [pc, #72]	; (800a674 <_ZN7ESP826612Send_WifiCmdEv+0xdf8>)
 800a62a:	781a      	ldrb	r2, [r3, #0]
 800a62c:	4b02      	ldr	r3, [pc, #8]	; (800a638 <_ZN7ESP826612Send_WifiCmdEv+0xdbc>)
 800a62e:	fba3 1302 	umull	r1, r3, r3, r2
 800a632:	e021      	b.n	800a678 <_ZN7ESP826612Send_WifiCmdEv+0xdfc>
 800a634:	20000647 	.word	0x20000647
 800a638:	cccccccd 	.word	0xcccccccd
 800a63c:	20000646 	.word	0x20000646
 800a640:	2000076e 	.word	0x2000076e
 800a644:	2000063b 	.word	0x2000063b
 800a648:	2000063a 	.word	0x2000063a
 800a64c:	20000770 	.word	0x20000770
 800a650:	20000649 	.word	0x20000649
 800a654:	200000f6 	.word	0x200000f6
 800a658:	20000772 	.word	0x20000772
 800a65c:	2000063d 	.word	0x2000063d
 800a660:	2000063c 	.word	0x2000063c
 800a664:	20000774 	.word	0x20000774
 800a668:	20000113 	.word	0x20000113
 800a66c:	20000112 	.word	0x20000112
 800a670:	20000776 	.word	0x20000776
 800a674:	20000115 	.word	0x20000115
 800a678:	08d9      	lsrs	r1, r3, #3
 800a67a:	460b      	mov	r3, r1
 800a67c:	009b      	lsls	r3, r3, #2
 800a67e:	440b      	add	r3, r1
 800a680:	005b      	lsls	r3, r3, #1
 800a682:	1ad3      	subs	r3, r2, r3
 800a684:	b2db      	uxtb	r3, r3
 800a686:	b298      	uxth	r0, r3
 800a688:	4b94      	ldr	r3, [pc, #592]	; (800a8dc <_ZN7ESP826612Send_WifiCmdEv+0x1060>)
 800a68a:	781a      	ldrb	r2, [r3, #0]
 800a68c:	4b94      	ldr	r3, [pc, #592]	; (800a8e0 <_ZN7ESP826612Send_WifiCmdEv+0x1064>)
 800a68e:	fba3 1302 	umull	r1, r3, r3, r2
 800a692:	08d9      	lsrs	r1, r3, #3
 800a694:	460b      	mov	r3, r1
 800a696:	009b      	lsls	r3, r3, #2
 800a698:	440b      	add	r3, r1
 800a69a:	005b      	lsls	r3, r3, #1
 800a69c:	1ad3      	subs	r3, r2, r3
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	b29b      	uxth	r3, r3
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	0092      	lsls	r2, r2, #2
 800a6a6:	4413      	add	r3, r2
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	0091      	lsls	r1, r2, #2
 800a6ac:	461a      	mov	r2, r3
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	4413      	add	r3, r2
 800a6b2:	009b      	lsls	r3, r3, #2
 800a6b4:	b29a      	uxth	r2, r3
 800a6b6:	4b8b      	ldr	r3, [pc, #556]	; (800a8e4 <_ZN7ESP826612Send_WifiCmdEv+0x1068>)
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	4989      	ldr	r1, [pc, #548]	; (800a8e0 <_ZN7ESP826612Send_WifiCmdEv+0x1064>)
 800a6bc:	fba1 1303 	umull	r1, r3, r1, r3
 800a6c0:	08db      	lsrs	r3, r3, #3
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	0089      	lsls	r1, r1, #2
 800a6ca:	440b      	add	r3, r1
 800a6cc:	005b      	lsls	r3, r3, #1
 800a6ce:	b29b      	uxth	r3, r3
 800a6d0:	4413      	add	r3, r2
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	4403      	add	r3, r0
 800a6d6:	b29a      	uxth	r2, r3
 800a6d8:	4b80      	ldr	r3, [pc, #512]	; (800a8dc <_ZN7ESP826612Send_WifiCmdEv+0x1060>)
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	4980      	ldr	r1, [pc, #512]	; (800a8e0 <_ZN7ESP826612Send_WifiCmdEv+0x1064>)
 800a6de:	fba1 1303 	umull	r1, r3, r1, r3
 800a6e2:	08db      	lsrs	r3, r3, #3
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	0149      	lsls	r1, r1, #5
 800a6ec:	1ac9      	subs	r1, r1, r3
 800a6ee:	0089      	lsls	r1, r1, #2
 800a6f0:	440b      	add	r3, r1
 800a6f2:	00db      	lsls	r3, r3, #3
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	4413      	add	r3, r2
 800a6f8:	b29a      	uxth	r2, r3
 800a6fa:	4b7b      	ldr	r3, [pc, #492]	; (800a8e8 <_ZN7ESP826612Send_WifiCmdEv+0x106c>)
 800a6fc:	801a      	strh	r2, [r3, #0]
	lenOfURl = sprintf(PostUrl_CharFormat,"GET /set_temp?u=4&p=%d&tm=%d&tl=%d&th=%d&hr=%d"
 800a6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a700:	f103 00d6 	add.w	r0, r3, #214	; 0xd6
 800a704:	4b79      	ldr	r3, [pc, #484]	; (800a8ec <_ZN7ESP826612Send_WifiCmdEv+0x1070>)
 800a706:	881b      	ldrh	r3, [r3, #0]
 800a708:	469c      	mov	ip, r3
 800a70a:	4b79      	ldr	r3, [pc, #484]	; (800a8f0 <_ZN7ESP826612Send_WifiCmdEv+0x1074>)
 800a70c:	881b      	ldrh	r3, [r3, #0]
 800a70e:	469e      	mov	lr, r3
 800a710:	4b78      	ldr	r3, [pc, #480]	; (800a8f4 <_ZN7ESP826612Send_WifiCmdEv+0x1078>)
 800a712:	881b      	ldrh	r3, [r3, #0]
 800a714:	461e      	mov	r6, r3
 800a716:	4b78      	ldr	r3, [pc, #480]	; (800a8f8 <_ZN7ESP826612Send_WifiCmdEv+0x107c>)
 800a718:	881b      	ldrh	r3, [r3, #0]
 800a71a:	623b      	str	r3, [r7, #32]
 800a71c:	4b77      	ldr	r3, [pc, #476]	; (800a8fc <_ZN7ESP826612Send_WifiCmdEv+0x1080>)
 800a71e:	881b      	ldrh	r3, [r3, #0]
 800a720:	61fb      	str	r3, [r7, #28]
 800a722:	4b77      	ldr	r3, [pc, #476]	; (800a900 <_ZN7ESP826612Send_WifiCmdEv+0x1084>)
 800a724:	881b      	ldrh	r3, [r3, #0]
 800a726:	61bb      	str	r3, [r7, #24]
 800a728:	4b76      	ldr	r3, [pc, #472]	; (800a904 <_ZN7ESP826612Send_WifiCmdEv+0x1088>)
 800a72a:	881b      	ldrh	r3, [r3, #0]
 800a72c:	617b      	str	r3, [r7, #20]
 800a72e:	4b76      	ldr	r3, [pc, #472]	; (800a908 <_ZN7ESP826612Send_WifiCmdEv+0x108c>)
 800a730:	881b      	ldrh	r3, [r3, #0]
 800a732:	613b      	str	r3, [r7, #16]
 800a734:	4b75      	ldr	r3, [pc, #468]	; (800a90c <_ZN7ESP826612Send_WifiCmdEv+0x1090>)
 800a736:	881b      	ldrh	r3, [r3, #0]
 800a738:	60fb      	str	r3, [r7, #12]
 800a73a:	4b75      	ldr	r3, [pc, #468]	; (800a910 <_ZN7ESP826612Send_WifiCmdEv+0x1094>)
 800a73c:	881b      	ldrh	r3, [r3, #0]
 800a73e:	60bb      	str	r3, [r7, #8]
 800a740:	4b74      	ldr	r3, [pc, #464]	; (800a914 <_ZN7ESP826612Send_WifiCmdEv+0x1098>)
 800a742:	881b      	ldrh	r3, [r3, #0]
 800a744:	607b      	str	r3, [r7, #4]
 800a746:	4b74      	ldr	r3, [pc, #464]	; (800a918 <_ZN7ESP826612Send_WifiCmdEv+0x109c>)
 800a748:	881b      	ldrh	r3, [r3, #0]
 800a74a:	603b      	str	r3, [r7, #0]
 800a74c:	4b73      	ldr	r3, [pc, #460]	; (800a91c <_ZN7ESP826612Send_WifiCmdEv+0x10a0>)
 800a74e:	881b      	ldrh	r3, [r3, #0]
 800a750:	461d      	mov	r5, r3
 800a752:	4b65      	ldr	r3, [pc, #404]	; (800a8e8 <_ZN7ESP826612Send_WifiCmdEv+0x106c>)
 800a754:	881b      	ldrh	r3, [r3, #0]
 800a756:	461c      	mov	r4, r3
 800a758:	4b71      	ldr	r3, [pc, #452]	; (800a920 <_ZN7ESP826612Send_WifiCmdEv+0x10a4>)
 800a75a:	881b      	ldrh	r3, [r3, #0]
 800a75c:	4619      	mov	r1, r3
 800a75e:	4b71      	ldr	r3, [pc, #452]	; (800a924 <_ZN7ESP826612Send_WifiCmdEv+0x10a8>)
 800a760:	881b      	ldrh	r3, [r3, #0]
 800a762:	461a      	mov	r2, r3
 800a764:	4b70      	ldr	r3, [pc, #448]	; (800a928 <_ZN7ESP826612Send_WifiCmdEv+0x10ac>)
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	9311      	str	r3, [sp, #68]	; 0x44
 800a76a:	2301      	movs	r3, #1
 800a76c:	9310      	str	r3, [sp, #64]	; 0x40
 800a76e:	2300      	movs	r3, #0
 800a770:	930f      	str	r3, [sp, #60]	; 0x3c
 800a772:	920e      	str	r2, [sp, #56]	; 0x38
 800a774:	2301      	movs	r3, #1
 800a776:	930d      	str	r3, [sp, #52]	; 0x34
 800a778:	910c      	str	r1, [sp, #48]	; 0x30
 800a77a:	940b      	str	r4, [sp, #44]	; 0x2c
 800a77c:	950a      	str	r5, [sp, #40]	; 0x28
 800a77e:	683a      	ldr	r2, [r7, #0]
 800a780:	9209      	str	r2, [sp, #36]	; 0x24
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	9208      	str	r2, [sp, #32]
 800a786:	68ba      	ldr	r2, [r7, #8]
 800a788:	9207      	str	r2, [sp, #28]
 800a78a:	68fa      	ldr	r2, [r7, #12]
 800a78c:	9206      	str	r2, [sp, #24]
 800a78e:	693a      	ldr	r2, [r7, #16]
 800a790:	9205      	str	r2, [sp, #20]
 800a792:	697a      	ldr	r2, [r7, #20]
 800a794:	9204      	str	r2, [sp, #16]
 800a796:	69ba      	ldr	r2, [r7, #24]
 800a798:	9203      	str	r2, [sp, #12]
 800a79a:	69fa      	ldr	r2, [r7, #28]
 800a79c:	9202      	str	r2, [sp, #8]
 800a79e:	6a3b      	ldr	r3, [r7, #32]
 800a7a0:	9301      	str	r3, [sp, #4]
 800a7a2:	9600      	str	r6, [sp, #0]
 800a7a4:	4673      	mov	r3, lr
 800a7a6:	4662      	mov	r2, ip
 800a7a8:	4960      	ldr	r1, [pc, #384]	; (800a92c <_ZN7ESP826612Send_WifiCmdEv+0x10b0>)
 800a7aa:	f005 f8d5 	bl	800f958 <siprintf>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	b29a      	uxth	r2, r3
 800a7b2:	4b5f      	ldr	r3, [pc, #380]	; (800a930 <_ZN7ESP826612Send_WifiCmdEv+0x10b4>)
 800a7b4:	801a      	strh	r2, [r3, #0]
						"&bc=%d&yc=%d&k=%d&x=%02d\r\nHost:usm4-ht.acceedo.in:9012\r\n\r\n",
						ProcessId_Value,act_temperature_c1,act_temperature_c2,act_temperature_c3,
						Rise_Sequence1_temp,Seq1temperature,Rise_Sequence2_temp,Seq2temperature,r_set_duration_seq1,set_duration_seq1,r_set_duration_seq2,set_duration_seq2,
						remaining_duration_seq1,remaining_duration_seq2,act_temperature_c4,
						1,water_temperature,0,1,status_to_server);
	memcpy(PostUrl_uintFormat,PostUrl_CharFormat,lenOfURl);
 800a7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b8:	f503 70d9 	add.w	r0, r3, #434	; 0x1b2
 800a7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7be:	33d6      	adds	r3, #214	; 0xd6
 800a7c0:	4a5b      	ldr	r2, [pc, #364]	; (800a930 <_ZN7ESP826612Send_WifiCmdEv+0x10b4>)
 800a7c2:	8812      	ldrh	r2, [r2, #0]
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	f004 ffc1 	bl	800f74c <memcpy>
	wifi_command	=	101;
 800a7ca:	4b5a      	ldr	r3, [pc, #360]	; (800a934 <_ZN7ESP826612Send_WifiCmdEv+0x10b8>)
 800a7cc:	2265      	movs	r2, #101	; 0x65
 800a7ce:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=7;
 800a7d0:	4b59      	ldr	r3, [pc, #356]	; (800a938 <_ZN7ESP826612Send_WifiCmdEv+0x10bc>)
 800a7d2:	2207      	movs	r2, #7
 800a7d4:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 800a7d6:	4b59      	ldr	r3, [pc, #356]	; (800a93c <_ZN7ESP826612Send_WifiCmdEv+0x10c0>)
 800a7d8:	2200      	movs	r2, #0
 800a7da:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit_IT(&hlpuart1,PostUrl_uintFormat,lenOfURl);
 800a7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7de:	f503 73d9 	add.w	r3, r3, #434	; 0x1b2
 800a7e2:	4a53      	ldr	r2, [pc, #332]	; (800a930 <_ZN7ESP826612Send_WifiCmdEv+0x10b4>)
 800a7e4:	8812      	ldrh	r2, [r2, #0]
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	4855      	ldr	r0, [pc, #340]	; (800a940 <_ZN7ESP826612Send_WifiCmdEv+0x10c4>)
 800a7ea:	f003 fc1f 	bl	800e02c <HAL_UART_Transmit_IT>
	break;
 800a7ee:	e070      	b.n	800a8d2 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	case 101:
		if(++Timerdelay>20)
 800a7f0:	4b52      	ldr	r3, [pc, #328]	; (800a93c <_ZN7ESP826612Send_WifiCmdEv+0x10c0>)
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	b2da      	uxtb	r2, r3
 800a7f8:	4b50      	ldr	r3, [pc, #320]	; (800a93c <_ZN7ESP826612Send_WifiCmdEv+0x10c0>)
 800a7fa:	701a      	strb	r2, [r3, #0]
 800a7fc:	4b4f      	ldr	r3, [pc, #316]	; (800a93c <_ZN7ESP826612Send_WifiCmdEv+0x10c0>)
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	2b14      	cmp	r3, #20
 800a802:	bf8c      	ite	hi
 800a804:	2301      	movhi	r3, #1
 800a806:	2300      	movls	r3, #0
 800a808:	b2db      	uxtb	r3, r3
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d05c      	beq.n	800a8c8 <_ZN7ESP826612Send_WifiCmdEv+0x104c>
		{
			Timerdelay=0;
 800a80e:	4b4b      	ldr	r3, [pc, #300]	; (800a93c <_ZN7ESP826612Send_WifiCmdEv+0x10c0>)
 800a810:	2200      	movs	r2, #0
 800a812:	701a      	strb	r2, [r3, #0]
			wifi_command=10;
 800a814:	4b47      	ldr	r3, [pc, #284]	; (800a934 <_ZN7ESP826612Send_WifiCmdEv+0x10b8>)
 800a816:	220a      	movs	r2, #10
 800a818:	701a      	strb	r2, [r3, #0]
		}
	break;
 800a81a:	e055      	b.n	800a8c8 <_ZN7ESP826612Send_WifiCmdEv+0x104c>
	case 102:
	   if(++Timerdelay>2)
 800a81c:	4b47      	ldr	r3, [pc, #284]	; (800a93c <_ZN7ESP826612Send_WifiCmdEv+0x10c0>)
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	3301      	adds	r3, #1
 800a822:	b2da      	uxtb	r2, r3
 800a824:	4b45      	ldr	r3, [pc, #276]	; (800a93c <_ZN7ESP826612Send_WifiCmdEv+0x10c0>)
 800a826:	701a      	strb	r2, [r3, #0]
 800a828:	4b44      	ldr	r3, [pc, #272]	; (800a93c <_ZN7ESP826612Send_WifiCmdEv+0x10c0>)
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	2b02      	cmp	r3, #2
 800a82e:	bf8c      	ite	hi
 800a830:	2301      	movhi	r3, #1
 800a832:	2300      	movls	r3, #0
 800a834:	b2db      	uxtb	r3, r3
 800a836:	2b00      	cmp	r3, #0
 800a838:	d048      	beq.n	800a8cc <_ZN7ESP826612Send_WifiCmdEv+0x1050>
	   {
		Timerdelay=0;
 800a83a:	4b40      	ldr	r3, [pc, #256]	; (800a93c <_ZN7ESP826612Send_WifiCmdEv+0x10c0>)
 800a83c:	2200      	movs	r2, #0
 800a83e:	701a      	strb	r2, [r3, #0]
		wifi_command=50;
 800a840:	4b3c      	ldr	r3, [pc, #240]	; (800a934 <_ZN7ESP826612Send_WifiCmdEv+0x10b8>)
 800a842:	2232      	movs	r2, #50	; 0x32
 800a844:	701a      	strb	r2, [r3, #0]
	   }
	break;
 800a846:	e041      	b.n	800a8cc <_ZN7ESP826612Send_WifiCmdEv+0x1050>
	case 103:
	   if(++Timerdelay>2)
 800a848:	4b3c      	ldr	r3, [pc, #240]	; (800a93c <_ZN7ESP826612Send_WifiCmdEv+0x10c0>)
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	3301      	adds	r3, #1
 800a84e:	b2da      	uxtb	r2, r3
 800a850:	4b3a      	ldr	r3, [pc, #232]	; (800a93c <_ZN7ESP826612Send_WifiCmdEv+0x10c0>)
 800a852:	701a      	strb	r2, [r3, #0]
 800a854:	4b39      	ldr	r3, [pc, #228]	; (800a93c <_ZN7ESP826612Send_WifiCmdEv+0x10c0>)
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	2b02      	cmp	r3, #2
 800a85a:	bf8c      	ite	hi
 800a85c:	2301      	movhi	r3, #1
 800a85e:	2300      	movls	r3, #0
 800a860:	b2db      	uxtb	r3, r3
 800a862:	2b00      	cmp	r3, #0
 800a864:	d034      	beq.n	800a8d0 <_ZN7ESP826612Send_WifiCmdEv+0x1054>
	   {
		Timerdelay=0;
 800a866:	4b35      	ldr	r3, [pc, #212]	; (800a93c <_ZN7ESP826612Send_WifiCmdEv+0x10c0>)
 800a868:	2200      	movs	r2, #0
 800a86a:	701a      	strb	r2, [r3, #0]
		wifi_command=10;
 800a86c:	4b31      	ldr	r3, [pc, #196]	; (800a934 <_ZN7ESP826612Send_WifiCmdEv+0x10b8>)
 800a86e:	220a      	movs	r2, #10
 800a870:	701a      	strb	r2, [r3, #0]
	   }
	break;
 800a872:	e02d      	b.n	800a8d0 <_ZN7ESP826612Send_WifiCmdEv+0x1054>
	case 110:
	NoOfdata_byte=12;
 800a874:	4b33      	ldr	r3, [pc, #204]	; (800a944 <_ZN7ESP826612Send_WifiCmdEv+0x10c8>)
 800a876:	220c      	movs	r2, #12
 800a878:	801a      	strh	r2, [r3, #0]
	wifi_command=50;
 800a87a:	4b2e      	ldr	r3, [pc, #184]	; (800a934 <_ZN7ESP826612Send_WifiCmdEv+0x10b8>)
 800a87c:	2232      	movs	r2, #50	; 0x32
 800a87e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CmdCipClose,NoOfdata_byte);
 800a880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a882:	f203 238e 	addw	r3, r3, #654	; 0x28e
 800a886:	4a2f      	ldr	r2, [pc, #188]	; (800a944 <_ZN7ESP826612Send_WifiCmdEv+0x10c8>)
 800a888:	8812      	ldrh	r2, [r2, #0]
 800a88a:	4619      	mov	r1, r3
 800a88c:	482c      	ldr	r0, [pc, #176]	; (800a940 <_ZN7ESP826612Send_WifiCmdEv+0x10c4>)
 800a88e:	f003 fbcd 	bl	800e02c <HAL_UART_Transmit_IT>
	break;
 800a892:	e01e      	b.n	800a8d2 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	case 120:
	break;
	default:
	wifi_command=5;
 800a894:	4b27      	ldr	r3, [pc, #156]	; (800a934 <_ZN7ESP826612Send_WifiCmdEv+0x10b8>)
 800a896:	2205      	movs	r2, #5
 800a898:	701a      	strb	r2, [r3, #0]
	break;
 800a89a:	e01a      	b.n	800a8d2 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	break;
 800a89c:	bf00      	nop
 800a89e:	e018      	b.n	800a8d2 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	break;
 800a8a0:	bf00      	nop
 800a8a2:	e016      	b.n	800a8d2 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	break;
 800a8a4:	bf00      	nop
 800a8a6:	e014      	b.n	800a8d2 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	break;
 800a8a8:	bf00      	nop
 800a8aa:	e012      	b.n	800a8d2 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	break;
 800a8ac:	bf00      	nop
 800a8ae:	e010      	b.n	800a8d2 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	break;
 800a8b0:	bf00      	nop
 800a8b2:	e00e      	b.n	800a8d2 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	break;
 800a8b4:	bf00      	nop
 800a8b6:	e00c      	b.n	800a8d2 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	break;
 800a8b8:	bf00      	nop
 800a8ba:	e00a      	b.n	800a8d2 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	break;
 800a8bc:	bf00      	nop
 800a8be:	e008      	b.n	800a8d2 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	break;
 800a8c0:	bf00      	nop
 800a8c2:	e006      	b.n	800a8d2 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	break;
 800a8c4:	bf00      	nop
 800a8c6:	e004      	b.n	800a8d2 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	break;
 800a8c8:	bf00      	nop
 800a8ca:	e002      	b.n	800a8d2 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	break;
 800a8cc:	bf00      	nop
 800a8ce:	e000      	b.n	800a8d2 <_ZN7ESP826612Send_WifiCmdEv+0x1056>
	break;
 800a8d0:	bf00      	nop
 }
}
 800a8d2:	bf00      	nop
 800a8d4:	372c      	adds	r7, #44	; 0x2c
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	20000114 	.word	0x20000114
 800a8e0:	cccccccd 	.word	0xcccccccd
 800a8e4:	20000115 	.word	0x20000115
 800a8e8:	20000778 	.word	0x20000778
 800a8ec:	20000626 	.word	0x20000626
 800a8f0:	2000062e 	.word	0x2000062e
 800a8f4:	20000630 	.word	0x20000630
 800a8f8:	20000632 	.word	0x20000632
 800a8fc:	20000642 	.word	0x20000642
 800a900:	20000628 	.word	0x20000628
 800a904:	20000644 	.word	0x20000644
 800a908:	2000062a 	.word	0x2000062a
 800a90c:	2000076e 	.word	0x2000076e
 800a910:	20000770 	.word	0x20000770
 800a914:	20000772 	.word	0x20000772
 800a918:	20000774 	.word	0x20000774
 800a91c:	20000776 	.word	0x20000776
 800a920:	20000634 	.word	0x20000634
 800a924:	20000256 	.word	0x20000256
 800a928:	20000624 	.word	0x20000624
 800a92c:	0801032c 	.word	0x0801032c
 800a930:	2000076c 	.word	0x2000076c
 800a934:	20000664 	.word	0x20000664
 800a938:	20000763 	.word	0x20000763
 800a93c:	20000768 	.word	0x20000768
 800a940:	200002ac 	.word	0x200002ac
 800a944:	20000766 	.word	0x20000766

0800a948 <_ZN7ESP82664InitEv>:

	}
}

void ESP8266::Init(void)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b090      	sub	sp, #64	; 0x40
 800a94c:	af0e      	add	r7, sp, #56	; 0x38
 800a94e:	6078      	str	r0, [r7, #4]
	sprintf(dummydata,"%c%02d,%04d,%04d,%03d,%03d,%02d:%02d:%02d %02d/%02d/%02d,%04d,%03d,%03d%c",'"',0,0,
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f203 20a6 	addw	r0, r3, #678	; 0x2a6
 800a956:	2322      	movs	r3, #34	; 0x22
 800a958:	930d      	str	r3, [sp, #52]	; 0x34
 800a95a:	2300      	movs	r3, #0
 800a95c:	930c      	str	r3, [sp, #48]	; 0x30
 800a95e:	2300      	movs	r3, #0
 800a960:	930b      	str	r3, [sp, #44]	; 0x2c
 800a962:	2300      	movs	r3, #0
 800a964:	930a      	str	r3, [sp, #40]	; 0x28
 800a966:	2300      	movs	r3, #0
 800a968:	9309      	str	r3, [sp, #36]	; 0x24
 800a96a:	2300      	movs	r3, #0
 800a96c:	9308      	str	r3, [sp, #32]
 800a96e:	2300      	movs	r3, #0
 800a970:	9307      	str	r3, [sp, #28]
 800a972:	2300      	movs	r3, #0
 800a974:	9306      	str	r3, [sp, #24]
 800a976:	2300      	movs	r3, #0
 800a978:	9305      	str	r3, [sp, #20]
 800a97a:	2300      	movs	r3, #0
 800a97c:	9304      	str	r3, [sp, #16]
 800a97e:	2300      	movs	r3, #0
 800a980:	9303      	str	r3, [sp, #12]
 800a982:	2300      	movs	r3, #0
 800a984:	9302      	str	r3, [sp, #8]
 800a986:	2300      	movs	r3, #0
 800a988:	9301      	str	r3, [sp, #4]
 800a98a:	2300      	movs	r3, #0
 800a98c:	9300      	str	r3, [sp, #0]
 800a98e:	2300      	movs	r3, #0
 800a990:	2222      	movs	r2, #34	; 0x22
 800a992:	4908      	ldr	r1, [pc, #32]	; (800a9b4 <_ZN7ESP82664InitEv+0x6c>)
 800a994:	f004 ffe0 	bl	800f958 <siprintf>
				0,0,0,0,0,0,0,0,0,0,0,0,'"');
	powercycleRefresh=1;
 800a998:	4b07      	ldr	r3, [pc, #28]	; (800a9b8 <_ZN7ESP82664InitEv+0x70>)
 800a99a:	2201      	movs	r2, #1
 800a99c:	701a      	strb	r2, [r3, #0]
	wifi_command=5;
 800a99e:	4b07      	ldr	r3, [pc, #28]	; (800a9bc <_ZN7ESP82664InitEv+0x74>)
 800a9a0:	2205      	movs	r2, #5
 800a9a2:	701a      	strb	r2, [r3, #0]
	RefreshBlockInfo=0;
 800a9a4:	4b06      	ldr	r3, [pc, #24]	; (800a9c0 <_ZN7ESP82664InitEv+0x78>)
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	701a      	strb	r2, [r3, #0]
}
 800a9aa:	bf00      	nop
 800a9ac:	3708      	adds	r7, #8
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	080103fc 	.word	0x080103fc
 800a9b8:	2000076a 	.word	0x2000076a
 800a9bc:	20000664 	.word	0x20000664
 800a9c0:	20000769 	.word	0x20000769

0800a9c4 <cppMain>:
  * @brief  The application entry point for cpp
  * @retval int
  */
//TIM_HandleTypeDef htim6;
void cppMain()
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	f5ad 5dcd 	sub.w	sp, sp, #6560	; 0x19a0
 800a9ca:	b086      	sub	sp, #24
 800a9cc:	af00      	add	r7, sp, #0
	GLCD glcd;
 800a9ce:	f607 73b4 	addw	r3, r7, #4020	; 0xfb4
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7f9 f974 	bl	8003cc0 <_ZN4GLCDC1Ev>
	Modbusrtu ModbusInst;
 800a9d8:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f7fe f81b 	bl	8008a18 <_ZN9ModbusrtuC1Ev>
	DisplayRoutine displayRoutineInst;
 800a9e2:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800a9e6:	3b10      	subs	r3, #16
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f7f8 ff5b 	bl	80038a4 <_ZN14DisplayRoutineC1Ev>
	Heattreatment heattreatmentInst;
 800a9ee:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800a9f2:	3b1c      	subs	r3, #28
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f7fd fc61 	bl	80082bc <_ZN13HeattreatmentC1Ev>
	OfflineStorage offlineStorageInst;
 800a9fa:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800a9fe:	3b1c      	subs	r3, #28
 800aa00:	4618      	mov	r0, r3
 800aa02:	f7fe fa8d 	bl	8008f20 <_ZN14OfflineStorageC1Ev>
	ESP8266 esp8266Inst;
 800aa06:	f107 0318 	add.w	r3, r7, #24
 800aa0a:	3b18      	subs	r3, #24
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7fe fd29 	bl	8009464 <_ZN7ESP8266C1Ev>
//	SHIFT shiftInst;

	displayRoutineInst.Init();
 800aa12:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800aa16:	3b10      	subs	r3, #16
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f7f9 f919 	bl	8003c50 <_ZN14DisplayRoutine4InitEv>
	offlineStorageInst.ReadOfflinedataInit();
 800aa1e:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800aa22:	3b1c      	subs	r3, #28
 800aa24:	4618      	mov	r0, r3
 800aa26:	f7fe fd0f 	bl	8009448 <_ZN14OfflineStorage19ReadOfflinedataInitEv>
	esp8266Inst.Init();
 800aa2a:	f107 0318 	add.w	r3, r7, #24
 800aa2e:	3b18      	subs	r3, #24
 800aa30:	4618      	mov	r0, r3
 800aa32:	f7ff ff89 	bl	800a948 <_ZN7ESP82664InitEv>
	ReadOnlineData();
 800aa36:	f7f5 fd9d 	bl	8000574 <ReadOnlineData>
	TxSeqComplete=1;
 800aa3a:	4b1b      	ldr	r3, [pc, #108]	; (800aaa8 <cppMain+0xe4>)
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	701a      	strb	r2, [r3, #0]


	while(1)
	{

		if(Flag1MS)
 800aa40:	4b1a      	ldr	r3, [pc, #104]	; (800aaac <cppMain+0xe8>)
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d008      	beq.n	800aa5a <cppMain+0x96>
		{
			Flag1MS=0;
 800aa48:	4b18      	ldr	r3, [pc, #96]	; (800aaac <cppMain+0xe8>)
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	701a      	strb	r2, [r3, #0]
			heattreatmentInst.run();
 800aa4e:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800aa52:	3b1c      	subs	r3, #28
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7fd fc61 	bl	800831c <_ZN13Heattreatment3runEv>

		}
		if(Flag100milliSeconds)
 800aa5a:	4b15      	ldr	r3, [pc, #84]	; (800aab0 <cppMain+0xec>)
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d00d      	beq.n	800aa7e <cppMain+0xba>
		{
			Flag100milliSeconds=0;
 800aa62:	4b13      	ldr	r3, [pc, #76]	; (800aab0 <cppMain+0xec>)
 800aa64:	2200      	movs	r2, #0
 800aa66:	701a      	strb	r2, [r3, #0]
			offlineStorageInst.run();
 800aa68:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 800aa6c:	3b1c      	subs	r3, #28
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7fe fa86 	bl	8008f80 <_ZN14OfflineStorage3runEv>
			ModbusInst.ModbusReadTransaction();
 800aa74:	f607 5398 	addw	r3, r7, #3480	; 0xd98
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f7fe f817 	bl	8008aac <_ZN9Modbusrtu21ModbusReadTransactionEv>
		}
		if(Flag1Second)
 800aa7e:	4b0d      	ldr	r3, [pc, #52]	; (800aab4 <cppMain+0xf0>)
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d0dc      	beq.n	800aa40 <cppMain+0x7c>
		{
			Flag1Second=0;
 800aa86:	4b0b      	ldr	r3, [pc, #44]	; (800aab4 <cppMain+0xf0>)
 800aa88:	2200      	movs	r2, #0
 800aa8a:	701a      	strb	r2, [r3, #0]
			displayRoutineInst.run();
 800aa8c:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800aa90:	3b10      	subs	r3, #16
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7f8 ffb8 	bl	8003a08 <_ZN14DisplayRoutine3runEv>
			esp8266Inst.run();
 800aa98:	f107 0318 	add.w	r3, r7, #24
 800aa9c:	3b18      	subs	r3, #24
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7fe fee1 	bl	8009866 <_ZN7ESP82663runEv>
		if(Flag1MS)
 800aaa4:	e7cc      	b.n	800aa40 <cppMain+0x7c>
 800aaa6:	bf00      	nop
 800aaa8:	2000065c 	.word	0x2000065c
 800aaac:	20000101 	.word	0x20000101
 800aab0:	20000103 	.word	0x20000103
 800aab4:	20000102 	.word	0x20000102

0800aab8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800aabe:	2300      	movs	r3, #0
 800aac0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800aac2:	2003      	movs	r0, #3
 800aac4:	f000 f960 	bl	800ad88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800aac8:	200f      	movs	r0, #15
 800aaca:	f000 f80d 	bl	800aae8 <HAL_InitTick>
 800aace:	4603      	mov	r3, r0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d002      	beq.n	800aada <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800aad4:	2301      	movs	r3, #1
 800aad6:	71fb      	strb	r3, [r7, #7]
 800aad8:	e001      	b.n	800aade <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800aada:	f7f7 ff9f 	bl	8002a1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800aade:	79fb      	ldrb	r3, [r7, #7]
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3708      	adds	r7, #8
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800aaf4:	4b17      	ldr	r3, [pc, #92]	; (800ab54 <HAL_InitTick+0x6c>)
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d023      	beq.n	800ab44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800aafc:	4b16      	ldr	r3, [pc, #88]	; (800ab58 <HAL_InitTick+0x70>)
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	4b14      	ldr	r3, [pc, #80]	; (800ab54 <HAL_InitTick+0x6c>)
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	4619      	mov	r1, r3
 800ab06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ab0a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ab0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab12:	4618      	mov	r0, r3
 800ab14:	f000 f96d 	bl	800adf2 <HAL_SYSTICK_Config>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d10f      	bne.n	800ab3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2b0f      	cmp	r3, #15
 800ab22:	d809      	bhi.n	800ab38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ab24:	2200      	movs	r2, #0
 800ab26:	6879      	ldr	r1, [r7, #4]
 800ab28:	f04f 30ff 	mov.w	r0, #4294967295
 800ab2c:	f000 f937 	bl	800ad9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800ab30:	4a0a      	ldr	r2, [pc, #40]	; (800ab5c <HAL_InitTick+0x74>)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6013      	str	r3, [r2, #0]
 800ab36:	e007      	b.n	800ab48 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800ab38:	2301      	movs	r3, #1
 800ab3a:	73fb      	strb	r3, [r7, #15]
 800ab3c:	e004      	b.n	800ab48 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	73fb      	strb	r3, [r7, #15]
 800ab42:	e001      	b.n	800ab48 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800ab44:	2301      	movs	r3, #1
 800ab46:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800ab48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop
 800ab54:	20000008 	.word	0x20000008
 800ab58:	20000000 	.word	0x20000000
 800ab5c:	20000004 	.word	0x20000004

0800ab60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ab60:	b480      	push	{r7}
 800ab62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800ab64:	4b06      	ldr	r3, [pc, #24]	; (800ab80 <HAL_IncTick+0x20>)
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	461a      	mov	r2, r3
 800ab6a:	4b06      	ldr	r3, [pc, #24]	; (800ab84 <HAL_IncTick+0x24>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4413      	add	r3, r2
 800ab70:	4a04      	ldr	r2, [pc, #16]	; (800ab84 <HAL_IncTick+0x24>)
 800ab72:	6013      	str	r3, [r2, #0]
}
 800ab74:	bf00      	nop
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr
 800ab7e:	bf00      	nop
 800ab80:	20000008 	.word	0x20000008
 800ab84:	2000077c 	.word	0x2000077c

0800ab88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	af00      	add	r7, sp, #0
  return uwTick;
 800ab8c:	4b03      	ldr	r3, [pc, #12]	; (800ab9c <HAL_GetTick+0x14>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr
 800ab9a:	bf00      	nop
 800ab9c:	2000077c 	.word	0x2000077c

0800aba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800aba8:	f7ff ffee 	bl	800ab88 <HAL_GetTick>
 800abac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abb8:	d005      	beq.n	800abc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800abba:	4b0a      	ldr	r3, [pc, #40]	; (800abe4 <HAL_Delay+0x44>)
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	461a      	mov	r2, r3
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	4413      	add	r3, r2
 800abc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800abc6:	bf00      	nop
 800abc8:	f7ff ffde 	bl	800ab88 <HAL_GetTick>
 800abcc:	4602      	mov	r2, r0
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	1ad3      	subs	r3, r2, r3
 800abd2:	68fa      	ldr	r2, [r7, #12]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d8f7      	bhi.n	800abc8 <HAL_Delay+0x28>
  {
  }
}
 800abd8:	bf00      	nop
 800abda:	bf00      	nop
 800abdc:	3710      	adds	r7, #16
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop
 800abe4:	20000008 	.word	0x20000008

0800abe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800abe8:	b480      	push	{r7}
 800abea:	b085      	sub	sp, #20
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f003 0307 	and.w	r3, r3, #7
 800abf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800abf8:	4b0c      	ldr	r3, [pc, #48]	; (800ac2c <__NVIC_SetPriorityGrouping+0x44>)
 800abfa:	68db      	ldr	r3, [r3, #12]
 800abfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800abfe:	68ba      	ldr	r2, [r7, #8]
 800ac00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ac04:	4013      	ands	r3, r2
 800ac06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ac10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800ac14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ac1a:	4a04      	ldr	r2, [pc, #16]	; (800ac2c <__NVIC_SetPriorityGrouping+0x44>)
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	60d3      	str	r3, [r2, #12]
}
 800ac20:	bf00      	nop
 800ac22:	3714      	adds	r7, #20
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr
 800ac2c:	e000ed00 	.word	0xe000ed00

0800ac30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800ac30:	b480      	push	{r7}
 800ac32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ac34:	4b04      	ldr	r3, [pc, #16]	; (800ac48 <__NVIC_GetPriorityGrouping+0x18>)
 800ac36:	68db      	ldr	r3, [r3, #12]
 800ac38:	0a1b      	lsrs	r3, r3, #8
 800ac3a:	f003 0307 	and.w	r3, r3, #7
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr
 800ac48:	e000ed00 	.word	0xe000ed00

0800ac4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b083      	sub	sp, #12
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	4603      	mov	r3, r0
 800ac54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ac56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	db0b      	blt.n	800ac76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ac5e:	79fb      	ldrb	r3, [r7, #7]
 800ac60:	f003 021f 	and.w	r2, r3, #31
 800ac64:	4907      	ldr	r1, [pc, #28]	; (800ac84 <__NVIC_EnableIRQ+0x38>)
 800ac66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac6a:	095b      	lsrs	r3, r3, #5
 800ac6c:	2001      	movs	r0, #1
 800ac6e:	fa00 f202 	lsl.w	r2, r0, r2
 800ac72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800ac76:	bf00      	nop
 800ac78:	370c      	adds	r7, #12
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr
 800ac82:	bf00      	nop
 800ac84:	e000e100 	.word	0xe000e100

0800ac88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b083      	sub	sp, #12
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	4603      	mov	r3, r0
 800ac90:	6039      	str	r1, [r7, #0]
 800ac92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ac94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	db0a      	blt.n	800acb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	b2da      	uxtb	r2, r3
 800aca0:	490c      	ldr	r1, [pc, #48]	; (800acd4 <__NVIC_SetPriority+0x4c>)
 800aca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aca6:	0112      	lsls	r2, r2, #4
 800aca8:	b2d2      	uxtb	r2, r2
 800acaa:	440b      	add	r3, r1
 800acac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800acb0:	e00a      	b.n	800acc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	b2da      	uxtb	r2, r3
 800acb6:	4908      	ldr	r1, [pc, #32]	; (800acd8 <__NVIC_SetPriority+0x50>)
 800acb8:	79fb      	ldrb	r3, [r7, #7]
 800acba:	f003 030f 	and.w	r3, r3, #15
 800acbe:	3b04      	subs	r3, #4
 800acc0:	0112      	lsls	r2, r2, #4
 800acc2:	b2d2      	uxtb	r2, r2
 800acc4:	440b      	add	r3, r1
 800acc6:	761a      	strb	r2, [r3, #24]
}
 800acc8:	bf00      	nop
 800acca:	370c      	adds	r7, #12
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr
 800acd4:	e000e100 	.word	0xe000e100
 800acd8:	e000ed00 	.word	0xe000ed00

0800acdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800acdc:	b480      	push	{r7}
 800acde:	b089      	sub	sp, #36	; 0x24
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	60f8      	str	r0, [r7, #12]
 800ace4:	60b9      	str	r1, [r7, #8]
 800ace6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f003 0307 	and.w	r3, r3, #7
 800acee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800acf0:	69fb      	ldr	r3, [r7, #28]
 800acf2:	f1c3 0307 	rsb	r3, r3, #7
 800acf6:	2b04      	cmp	r3, #4
 800acf8:	bf28      	it	cs
 800acfa:	2304      	movcs	r3, #4
 800acfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800acfe:	69fb      	ldr	r3, [r7, #28]
 800ad00:	3304      	adds	r3, #4
 800ad02:	2b06      	cmp	r3, #6
 800ad04:	d902      	bls.n	800ad0c <NVIC_EncodePriority+0x30>
 800ad06:	69fb      	ldr	r3, [r7, #28]
 800ad08:	3b03      	subs	r3, #3
 800ad0a:	e000      	b.n	800ad0e <NVIC_EncodePriority+0x32>
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ad10:	f04f 32ff 	mov.w	r2, #4294967295
 800ad14:	69bb      	ldr	r3, [r7, #24]
 800ad16:	fa02 f303 	lsl.w	r3, r2, r3
 800ad1a:	43da      	mvns	r2, r3
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	401a      	ands	r2, r3
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ad24:	f04f 31ff 	mov.w	r1, #4294967295
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	fa01 f303 	lsl.w	r3, r1, r3
 800ad2e:	43d9      	mvns	r1, r3
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ad34:	4313      	orrs	r3, r2
         );
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3724      	adds	r7, #36	; 0x24
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr
	...

0800ad44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b082      	sub	sp, #8
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	3b01      	subs	r3, #1
 800ad50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ad54:	d301      	bcc.n	800ad5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ad56:	2301      	movs	r3, #1
 800ad58:	e00f      	b.n	800ad7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ad5a:	4a0a      	ldr	r2, [pc, #40]	; (800ad84 <SysTick_Config+0x40>)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	3b01      	subs	r3, #1
 800ad60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ad62:	210f      	movs	r1, #15
 800ad64:	f04f 30ff 	mov.w	r0, #4294967295
 800ad68:	f7ff ff8e 	bl	800ac88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ad6c:	4b05      	ldr	r3, [pc, #20]	; (800ad84 <SysTick_Config+0x40>)
 800ad6e:	2200      	movs	r2, #0
 800ad70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ad72:	4b04      	ldr	r3, [pc, #16]	; (800ad84 <SysTick_Config+0x40>)
 800ad74:	2207      	movs	r2, #7
 800ad76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ad78:	2300      	movs	r3, #0
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3708      	adds	r7, #8
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	e000e010 	.word	0xe000e010

0800ad88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f7ff ff29 	bl	800abe8 <__NVIC_SetPriorityGrouping>
}
 800ad96:	bf00      	nop
 800ad98:	3708      	adds	r7, #8
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}

0800ad9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ad9e:	b580      	push	{r7, lr}
 800ada0:	b086      	sub	sp, #24
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	4603      	mov	r3, r0
 800ada6:	60b9      	str	r1, [r7, #8]
 800ada8:	607a      	str	r2, [r7, #4]
 800adaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800adac:	2300      	movs	r3, #0
 800adae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800adb0:	f7ff ff3e 	bl	800ac30 <__NVIC_GetPriorityGrouping>
 800adb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800adb6:	687a      	ldr	r2, [r7, #4]
 800adb8:	68b9      	ldr	r1, [r7, #8]
 800adba:	6978      	ldr	r0, [r7, #20]
 800adbc:	f7ff ff8e 	bl	800acdc <NVIC_EncodePriority>
 800adc0:	4602      	mov	r2, r0
 800adc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800adc6:	4611      	mov	r1, r2
 800adc8:	4618      	mov	r0, r3
 800adca:	f7ff ff5d 	bl	800ac88 <__NVIC_SetPriority>
}
 800adce:	bf00      	nop
 800add0:	3718      	adds	r7, #24
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}

0800add6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800add6:	b580      	push	{r7, lr}
 800add8:	b082      	sub	sp, #8
 800adda:	af00      	add	r7, sp, #0
 800addc:	4603      	mov	r3, r0
 800adde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ade0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ade4:	4618      	mov	r0, r3
 800ade6:	f7ff ff31 	bl	800ac4c <__NVIC_EnableIRQ>
}
 800adea:	bf00      	nop
 800adec:	3708      	adds	r7, #8
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}

0800adf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800adf2:	b580      	push	{r7, lr}
 800adf4:	b082      	sub	sp, #8
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f7ff ffa2 	bl	800ad44 <SysTick_Config>
 800ae00:	4603      	mov	r3, r0
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3708      	adds	r7, #8
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800ae0a:	b480      	push	{r7}
 800ae0c:	b085      	sub	sp, #20
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae12:	2300      	movs	r3, #0
 800ae14:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	2b02      	cmp	r3, #2
 800ae20:	d008      	beq.n	800ae34 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2204      	movs	r2, #4
 800ae26:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800ae30:	2301      	movs	r3, #1
 800ae32:	e022      	b.n	800ae7a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	681a      	ldr	r2, [r3, #0]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f022 020e 	bic.w	r2, r2, #14
 800ae42:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	681a      	ldr	r2, [r3, #0]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f022 0201 	bic.w	r2, r2, #1
 800ae52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae58:	f003 021c 	and.w	r2, r3, #28
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae60:	2101      	movs	r1, #1
 800ae62:	fa01 f202 	lsl.w	r2, r1, r2
 800ae66:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2200      	movs	r2, #0
 800ae74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800ae78:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3714      	adds	r7, #20
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae84:	4770      	bx	lr

0800ae86 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ae86:	b580      	push	{r7, lr}
 800ae88:	b084      	sub	sp, #16
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	2b02      	cmp	r3, #2
 800ae9c:	d005      	beq.n	800aeaa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2204      	movs	r2, #4
 800aea2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800aea4:	2301      	movs	r3, #1
 800aea6:	73fb      	strb	r3, [r7, #15]
 800aea8:	e029      	b.n	800aefe <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f022 020e 	bic.w	r2, r2, #14
 800aeb8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	681a      	ldr	r2, [r3, #0]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f022 0201 	bic.w	r2, r2, #1
 800aec8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aece:	f003 021c 	and.w	r2, r3, #28
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aed6:	2101      	movs	r1, #1
 800aed8:	fa01 f202 	lsl.w	r2, r1, r2
 800aedc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2201      	movs	r2, #1
 800aee2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2200      	movs	r2, #0
 800aeea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d003      	beq.n	800aefe <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	4798      	blx	r3
    }
  }
  return status;
 800aefe:	7bfb      	ldrb	r3, [r7, #15]
}
 800af00:	4618      	mov	r0, r3
 800af02:	3710      	adds	r7, #16
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800af08:	b480      	push	{r7}
 800af0a:	b087      	sub	sp, #28
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800af12:	2300      	movs	r3, #0
 800af14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800af16:	e154      	b.n	800b1c2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	2101      	movs	r1, #1
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	fa01 f303 	lsl.w	r3, r1, r3
 800af24:	4013      	ands	r3, r2
 800af26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	f000 8146 	beq.w	800b1bc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	f003 0303 	and.w	r3, r3, #3
 800af38:	2b01      	cmp	r3, #1
 800af3a:	d005      	beq.n	800af48 <HAL_GPIO_Init+0x40>
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	f003 0303 	and.w	r3, r3, #3
 800af44:	2b02      	cmp	r3, #2
 800af46:	d130      	bne.n	800afaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	689b      	ldr	r3, [r3, #8]
 800af4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	005b      	lsls	r3, r3, #1
 800af52:	2203      	movs	r2, #3
 800af54:	fa02 f303 	lsl.w	r3, r2, r3
 800af58:	43db      	mvns	r3, r3
 800af5a:	693a      	ldr	r2, [r7, #16]
 800af5c:	4013      	ands	r3, r2
 800af5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	68da      	ldr	r2, [r3, #12]
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	005b      	lsls	r3, r3, #1
 800af68:	fa02 f303 	lsl.w	r3, r2, r3
 800af6c:	693a      	ldr	r2, [r7, #16]
 800af6e:	4313      	orrs	r3, r2
 800af70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	693a      	ldr	r2, [r7, #16]
 800af76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800af7e:	2201      	movs	r2, #1
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	fa02 f303 	lsl.w	r3, r2, r3
 800af86:	43db      	mvns	r3, r3
 800af88:	693a      	ldr	r2, [r7, #16]
 800af8a:	4013      	ands	r3, r2
 800af8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	091b      	lsrs	r3, r3, #4
 800af94:	f003 0201 	and.w	r2, r3, #1
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	fa02 f303 	lsl.w	r3, r2, r3
 800af9e:	693a      	ldr	r2, [r7, #16]
 800afa0:	4313      	orrs	r3, r2
 800afa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	693a      	ldr	r2, [r7, #16]
 800afa8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	f003 0303 	and.w	r3, r3, #3
 800afb2:	2b03      	cmp	r3, #3
 800afb4:	d017      	beq.n	800afe6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	68db      	ldr	r3, [r3, #12]
 800afba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	005b      	lsls	r3, r3, #1
 800afc0:	2203      	movs	r2, #3
 800afc2:	fa02 f303 	lsl.w	r3, r2, r3
 800afc6:	43db      	mvns	r3, r3
 800afc8:	693a      	ldr	r2, [r7, #16]
 800afca:	4013      	ands	r3, r2
 800afcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	689a      	ldr	r2, [r3, #8]
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	005b      	lsls	r3, r3, #1
 800afd6:	fa02 f303 	lsl.w	r3, r2, r3
 800afda:	693a      	ldr	r2, [r7, #16]
 800afdc:	4313      	orrs	r3, r2
 800afde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	693a      	ldr	r2, [r7, #16]
 800afe4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	f003 0303 	and.w	r3, r3, #3
 800afee:	2b02      	cmp	r3, #2
 800aff0:	d123      	bne.n	800b03a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	08da      	lsrs	r2, r3, #3
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	3208      	adds	r2, #8
 800affa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800affe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	f003 0307 	and.w	r3, r3, #7
 800b006:	009b      	lsls	r3, r3, #2
 800b008:	220f      	movs	r2, #15
 800b00a:	fa02 f303 	lsl.w	r3, r2, r3
 800b00e:	43db      	mvns	r3, r3
 800b010:	693a      	ldr	r2, [r7, #16]
 800b012:	4013      	ands	r3, r2
 800b014:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	691a      	ldr	r2, [r3, #16]
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	f003 0307 	and.w	r3, r3, #7
 800b020:	009b      	lsls	r3, r3, #2
 800b022:	fa02 f303 	lsl.w	r3, r2, r3
 800b026:	693a      	ldr	r2, [r7, #16]
 800b028:	4313      	orrs	r3, r2
 800b02a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	08da      	lsrs	r2, r3, #3
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	3208      	adds	r2, #8
 800b034:	6939      	ldr	r1, [r7, #16]
 800b036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	005b      	lsls	r3, r3, #1
 800b044:	2203      	movs	r2, #3
 800b046:	fa02 f303 	lsl.w	r3, r2, r3
 800b04a:	43db      	mvns	r3, r3
 800b04c:	693a      	ldr	r2, [r7, #16]
 800b04e:	4013      	ands	r3, r2
 800b050:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	685b      	ldr	r3, [r3, #4]
 800b056:	f003 0203 	and.w	r2, r3, #3
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	005b      	lsls	r3, r3, #1
 800b05e:	fa02 f303 	lsl.w	r3, r2, r3
 800b062:	693a      	ldr	r2, [r7, #16]
 800b064:	4313      	orrs	r3, r2
 800b066:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	693a      	ldr	r2, [r7, #16]
 800b06c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b076:	2b00      	cmp	r3, #0
 800b078:	f000 80a0 	beq.w	800b1bc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b07c:	4b58      	ldr	r3, [pc, #352]	; (800b1e0 <HAL_GPIO_Init+0x2d8>)
 800b07e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b080:	4a57      	ldr	r2, [pc, #348]	; (800b1e0 <HAL_GPIO_Init+0x2d8>)
 800b082:	f043 0301 	orr.w	r3, r3, #1
 800b086:	6613      	str	r3, [r2, #96]	; 0x60
 800b088:	4b55      	ldr	r3, [pc, #340]	; (800b1e0 <HAL_GPIO_Init+0x2d8>)
 800b08a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b08c:	f003 0301 	and.w	r3, r3, #1
 800b090:	60bb      	str	r3, [r7, #8]
 800b092:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800b094:	4a53      	ldr	r2, [pc, #332]	; (800b1e4 <HAL_GPIO_Init+0x2dc>)
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	089b      	lsrs	r3, r3, #2
 800b09a:	3302      	adds	r3, #2
 800b09c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	f003 0303 	and.w	r3, r3, #3
 800b0a8:	009b      	lsls	r3, r3, #2
 800b0aa:	220f      	movs	r2, #15
 800b0ac:	fa02 f303 	lsl.w	r3, r2, r3
 800b0b0:	43db      	mvns	r3, r3
 800b0b2:	693a      	ldr	r2, [r7, #16]
 800b0b4:	4013      	ands	r3, r2
 800b0b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b0be:	d019      	beq.n	800b0f4 <HAL_GPIO_Init+0x1ec>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	4a49      	ldr	r2, [pc, #292]	; (800b1e8 <HAL_GPIO_Init+0x2e0>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d013      	beq.n	800b0f0 <HAL_GPIO_Init+0x1e8>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	4a48      	ldr	r2, [pc, #288]	; (800b1ec <HAL_GPIO_Init+0x2e4>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d00d      	beq.n	800b0ec <HAL_GPIO_Init+0x1e4>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	4a47      	ldr	r2, [pc, #284]	; (800b1f0 <HAL_GPIO_Init+0x2e8>)
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d007      	beq.n	800b0e8 <HAL_GPIO_Init+0x1e0>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	4a46      	ldr	r2, [pc, #280]	; (800b1f4 <HAL_GPIO_Init+0x2ec>)
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	d101      	bne.n	800b0e4 <HAL_GPIO_Init+0x1dc>
 800b0e0:	2304      	movs	r3, #4
 800b0e2:	e008      	b.n	800b0f6 <HAL_GPIO_Init+0x1ee>
 800b0e4:	2307      	movs	r3, #7
 800b0e6:	e006      	b.n	800b0f6 <HAL_GPIO_Init+0x1ee>
 800b0e8:	2303      	movs	r3, #3
 800b0ea:	e004      	b.n	800b0f6 <HAL_GPIO_Init+0x1ee>
 800b0ec:	2302      	movs	r3, #2
 800b0ee:	e002      	b.n	800b0f6 <HAL_GPIO_Init+0x1ee>
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	e000      	b.n	800b0f6 <HAL_GPIO_Init+0x1ee>
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	697a      	ldr	r2, [r7, #20]
 800b0f8:	f002 0203 	and.w	r2, r2, #3
 800b0fc:	0092      	lsls	r2, r2, #2
 800b0fe:	4093      	lsls	r3, r2
 800b100:	693a      	ldr	r2, [r7, #16]
 800b102:	4313      	orrs	r3, r2
 800b104:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800b106:	4937      	ldr	r1, [pc, #220]	; (800b1e4 <HAL_GPIO_Init+0x2dc>)
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	089b      	lsrs	r3, r3, #2
 800b10c:	3302      	adds	r3, #2
 800b10e:	693a      	ldr	r2, [r7, #16]
 800b110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b114:	4b38      	ldr	r3, [pc, #224]	; (800b1f8 <HAL_GPIO_Init+0x2f0>)
 800b116:	689b      	ldr	r3, [r3, #8]
 800b118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	43db      	mvns	r3, r3
 800b11e:	693a      	ldr	r2, [r7, #16]
 800b120:	4013      	ands	r3, r2
 800b122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	685b      	ldr	r3, [r3, #4]
 800b128:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d003      	beq.n	800b138 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800b130:	693a      	ldr	r2, [r7, #16]
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	4313      	orrs	r3, r2
 800b136:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800b138:	4a2f      	ldr	r2, [pc, #188]	; (800b1f8 <HAL_GPIO_Init+0x2f0>)
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800b13e:	4b2e      	ldr	r3, [pc, #184]	; (800b1f8 <HAL_GPIO_Init+0x2f0>)
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	43db      	mvns	r3, r3
 800b148:	693a      	ldr	r2, [r7, #16]
 800b14a:	4013      	ands	r3, r2
 800b14c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b156:	2b00      	cmp	r3, #0
 800b158:	d003      	beq.n	800b162 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800b15a:	693a      	ldr	r2, [r7, #16]
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	4313      	orrs	r3, r2
 800b160:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b162:	4a25      	ldr	r2, [pc, #148]	; (800b1f8 <HAL_GPIO_Init+0x2f0>)
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800b168:	4b23      	ldr	r3, [pc, #140]	; (800b1f8 <HAL_GPIO_Init+0x2f0>)
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	43db      	mvns	r3, r3
 800b172:	693a      	ldr	r2, [r7, #16]
 800b174:	4013      	ands	r3, r2
 800b176:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	685b      	ldr	r3, [r3, #4]
 800b17c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b180:	2b00      	cmp	r3, #0
 800b182:	d003      	beq.n	800b18c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800b184:	693a      	ldr	r2, [r7, #16]
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	4313      	orrs	r3, r2
 800b18a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800b18c:	4a1a      	ldr	r2, [pc, #104]	; (800b1f8 <HAL_GPIO_Init+0x2f0>)
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800b192:	4b19      	ldr	r3, [pc, #100]	; (800b1f8 <HAL_GPIO_Init+0x2f0>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	43db      	mvns	r3, r3
 800b19c:	693a      	ldr	r2, [r7, #16]
 800b19e:	4013      	ands	r3, r2
 800b1a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d003      	beq.n	800b1b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800b1ae:	693a      	ldr	r2, [r7, #16]
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800b1b6:	4a10      	ldr	r2, [pc, #64]	; (800b1f8 <HAL_GPIO_Init+0x2f0>)
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	3301      	adds	r3, #1
 800b1c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	681a      	ldr	r2, [r3, #0]
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	fa22 f303 	lsr.w	r3, r2, r3
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	f47f aea3 	bne.w	800af18 <HAL_GPIO_Init+0x10>
  }
}
 800b1d2:	bf00      	nop
 800b1d4:	bf00      	nop
 800b1d6:	371c      	adds	r7, #28
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr
 800b1e0:	40021000 	.word	0x40021000
 800b1e4:	40010000 	.word	0x40010000
 800b1e8:	48000400 	.word	0x48000400
 800b1ec:	48000800 	.word	0x48000800
 800b1f0:	48000c00 	.word	0x48000c00
 800b1f4:	48001000 	.word	0x48001000
 800b1f8:	40010400 	.word	0x40010400

0800b1fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b083      	sub	sp, #12
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	460b      	mov	r3, r1
 800b206:	807b      	strh	r3, [r7, #2]
 800b208:	4613      	mov	r3, r2
 800b20a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b20c:	787b      	ldrb	r3, [r7, #1]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d003      	beq.n	800b21a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b212:	887a      	ldrh	r2, [r7, #2]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b218:	e002      	b.n	800b220 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b21a:	887a      	ldrh	r2, [r7, #2]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b220:	bf00      	nop
 800b222:	370c      	adds	r7, #12
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr

0800b22c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b085      	sub	sp, #20
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	460b      	mov	r3, r1
 800b236:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	695b      	ldr	r3, [r3, #20]
 800b23c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b23e:	887a      	ldrh	r2, [r7, #2]
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	4013      	ands	r3, r2
 800b244:	041a      	lsls	r2, r3, #16
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	43d9      	mvns	r1, r3
 800b24a:	887b      	ldrh	r3, [r7, #2]
 800b24c:	400b      	ands	r3, r1
 800b24e:	431a      	orrs	r2, r3
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	619a      	str	r2, [r3, #24]
}
 800b254:	bf00      	nop
 800b256:	3714      	adds	r7, #20
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr

0800b260 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d101      	bne.n	800b272 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b26e:	2301      	movs	r3, #1
 800b270:	e081      	b.n	800b376 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b278:	b2db      	uxtb	r3, r3
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d106      	bne.n	800b28c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2200      	movs	r2, #0
 800b282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f7f7 fbec 	bl	8002a64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2224      	movs	r2, #36	; 0x24
 800b290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	681a      	ldr	r2, [r3, #0]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f022 0201 	bic.w	r2, r2, #1
 800b2a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	685a      	ldr	r2, [r3, #4]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b2b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	689a      	ldr	r2, [r3, #8]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b2c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	68db      	ldr	r3, [r3, #12]
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d107      	bne.n	800b2da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	689a      	ldr	r2, [r3, #8]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b2d6:	609a      	str	r2, [r3, #8]
 800b2d8:	e006      	b.n	800b2e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	689a      	ldr	r2, [r3, #8]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b2e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	68db      	ldr	r3, [r3, #12]
 800b2ec:	2b02      	cmp	r3, #2
 800b2ee:	d104      	bne.n	800b2fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b2f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	687a      	ldr	r2, [r7, #4]
 800b302:	6812      	ldr	r2, [r2, #0]
 800b304:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b308:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b30c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	68da      	ldr	r2, [r3, #12]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b31c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	691a      	ldr	r2, [r3, #16]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	695b      	ldr	r3, [r3, #20]
 800b326:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	699b      	ldr	r3, [r3, #24]
 800b32e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	430a      	orrs	r2, r1
 800b336:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	69d9      	ldr	r1, [r3, #28]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6a1a      	ldr	r2, [r3, #32]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	430a      	orrs	r2, r1
 800b346:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	681a      	ldr	r2, [r3, #0]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f042 0201 	orr.w	r2, r2, #1
 800b356:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2200      	movs	r2, #0
 800b35c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2220      	movs	r2, #32
 800b362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2200      	movs	r2, #0
 800b36a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2200      	movs	r2, #0
 800b370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b374:	2300      	movs	r3, #0
}
 800b376:	4618      	mov	r0, r3
 800b378:	3708      	adds	r7, #8
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}

0800b37e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b37e:	b480      	push	{r7}
 800b380:	b083      	sub	sp, #12
 800b382:	af00      	add	r7, sp, #0
 800b384:	6078      	str	r0, [r7, #4]
 800b386:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b38e:	b2db      	uxtb	r3, r3
 800b390:	2b20      	cmp	r3, #32
 800b392:	d138      	bne.n	800b406 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d101      	bne.n	800b3a2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b39e:	2302      	movs	r3, #2
 800b3a0:	e032      	b.n	800b408 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2224      	movs	r2, #36	; 0x24
 800b3ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	681a      	ldr	r2, [r3, #0]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f022 0201 	bic.w	r2, r2, #1
 800b3c0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b3d0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	6819      	ldr	r1, [r3, #0]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	683a      	ldr	r2, [r7, #0]
 800b3de:	430a      	orrs	r2, r1
 800b3e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f042 0201 	orr.w	r2, r2, #1
 800b3f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2220      	movs	r2, #32
 800b3f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b402:	2300      	movs	r3, #0
 800b404:	e000      	b.n	800b408 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b406:	2302      	movs	r3, #2
  }
}
 800b408:	4618      	mov	r0, r3
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr

0800b414 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b414:	b480      	push	{r7}
 800b416:	b085      	sub	sp, #20
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b424:	b2db      	uxtb	r3, r3
 800b426:	2b20      	cmp	r3, #32
 800b428:	d139      	bne.n	800b49e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b430:	2b01      	cmp	r3, #1
 800b432:	d101      	bne.n	800b438 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b434:	2302      	movs	r3, #2
 800b436:	e033      	b.n	800b4a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2201      	movs	r2, #1
 800b43c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2224      	movs	r2, #36	; 0x24
 800b444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f022 0201 	bic.w	r2, r2, #1
 800b456:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b466:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	021b      	lsls	r3, r3, #8
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	4313      	orrs	r3, r2
 800b470:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	68fa      	ldr	r2, [r7, #12]
 800b478:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	681a      	ldr	r2, [r3, #0]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f042 0201 	orr.w	r2, r2, #1
 800b488:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2220      	movs	r2, #32
 800b48e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2200      	movs	r2, #0
 800b496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b49a:	2300      	movs	r3, #0
 800b49c:	e000      	b.n	800b4a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b49e:	2302      	movs	r3, #2
  }
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3714      	adds	r7, #20
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr

0800b4ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800b4b0:	4b04      	ldr	r3, [pc, #16]	; (800b4c4 <HAL_PWREx_GetVoltageRange+0x18>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr
 800b4c2:	bf00      	nop
 800b4c4:	40007000 	.word	0x40007000

0800b4c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b085      	sub	sp, #20
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4d6:	d130      	bne.n	800b53a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800b4d8:	4b23      	ldr	r3, [pc, #140]	; (800b568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b4e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4e4:	d038      	beq.n	800b558 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b4e6:	4b20      	ldr	r3, [pc, #128]	; (800b568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b4ee:	4a1e      	ldr	r2, [pc, #120]	; (800b568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b4f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b4f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b4f6:	4b1d      	ldr	r3, [pc, #116]	; (800b56c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	2232      	movs	r2, #50	; 0x32
 800b4fc:	fb02 f303 	mul.w	r3, r2, r3
 800b500:	4a1b      	ldr	r2, [pc, #108]	; (800b570 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800b502:	fba2 2303 	umull	r2, r3, r2, r3
 800b506:	0c9b      	lsrs	r3, r3, #18
 800b508:	3301      	adds	r3, #1
 800b50a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b50c:	e002      	b.n	800b514 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	3b01      	subs	r3, #1
 800b512:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b514:	4b14      	ldr	r3, [pc, #80]	; (800b568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b516:	695b      	ldr	r3, [r3, #20]
 800b518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b51c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b520:	d102      	bne.n	800b528 <HAL_PWREx_ControlVoltageScaling+0x60>
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d1f2      	bne.n	800b50e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b528:	4b0f      	ldr	r3, [pc, #60]	; (800b568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b52a:	695b      	ldr	r3, [r3, #20]
 800b52c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b534:	d110      	bne.n	800b558 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800b536:	2303      	movs	r3, #3
 800b538:	e00f      	b.n	800b55a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800b53a:	4b0b      	ldr	r3, [pc, #44]	; (800b568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b546:	d007      	beq.n	800b558 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b548:	4b07      	ldr	r3, [pc, #28]	; (800b568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b550:	4a05      	ldr	r2, [pc, #20]	; (800b568 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b552:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b556:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800b558:	2300      	movs	r3, #0
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3714      	adds	r7, #20
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr
 800b566:	bf00      	nop
 800b568:	40007000 	.word	0x40007000
 800b56c:	20000000 	.word	0x20000000
 800b570:	431bde83 	.word	0x431bde83

0800b574 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b088      	sub	sp, #32
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d102      	bne.n	800b588 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b582:	2301      	movs	r3, #1
 800b584:	f000 bc02 	b.w	800bd8c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b588:	4b96      	ldr	r3, [pc, #600]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b58a:	689b      	ldr	r3, [r3, #8]
 800b58c:	f003 030c 	and.w	r3, r3, #12
 800b590:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b592:	4b94      	ldr	r3, [pc, #592]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b594:	68db      	ldr	r3, [r3, #12]
 800b596:	f003 0303 	and.w	r3, r3, #3
 800b59a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f003 0310 	and.w	r3, r3, #16
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f000 80e4 	beq.w	800b772 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b5aa:	69bb      	ldr	r3, [r7, #24]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d007      	beq.n	800b5c0 <HAL_RCC_OscConfig+0x4c>
 800b5b0:	69bb      	ldr	r3, [r7, #24]
 800b5b2:	2b0c      	cmp	r3, #12
 800b5b4:	f040 808b 	bne.w	800b6ce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	f040 8087 	bne.w	800b6ce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b5c0:	4b88      	ldr	r3, [pc, #544]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f003 0302 	and.w	r3, r3, #2
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d005      	beq.n	800b5d8 <HAL_RCC_OscConfig+0x64>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	699b      	ldr	r3, [r3, #24]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d101      	bne.n	800b5d8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	e3d9      	b.n	800bd8c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6a1a      	ldr	r2, [r3, #32]
 800b5dc:	4b81      	ldr	r3, [pc, #516]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f003 0308 	and.w	r3, r3, #8
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d004      	beq.n	800b5f2 <HAL_RCC_OscConfig+0x7e>
 800b5e8:	4b7e      	ldr	r3, [pc, #504]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5f0:	e005      	b.n	800b5fe <HAL_RCC_OscConfig+0x8a>
 800b5f2:	4b7c      	ldr	r3, [pc, #496]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b5f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b5f8:	091b      	lsrs	r3, r3, #4
 800b5fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d223      	bcs.n	800b64a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6a1b      	ldr	r3, [r3, #32]
 800b606:	4618      	mov	r0, r3
 800b608:	f000 fd8c 	bl	800c124 <RCC_SetFlashLatencyFromMSIRange>
 800b60c:	4603      	mov	r3, r0
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d001      	beq.n	800b616 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800b612:	2301      	movs	r3, #1
 800b614:	e3ba      	b.n	800bd8c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b616:	4b73      	ldr	r3, [pc, #460]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4a72      	ldr	r2, [pc, #456]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b61c:	f043 0308 	orr.w	r3, r3, #8
 800b620:	6013      	str	r3, [r2, #0]
 800b622:	4b70      	ldr	r3, [pc, #448]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6a1b      	ldr	r3, [r3, #32]
 800b62e:	496d      	ldr	r1, [pc, #436]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b630:	4313      	orrs	r3, r2
 800b632:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b634:	4b6b      	ldr	r3, [pc, #428]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	69db      	ldr	r3, [r3, #28]
 800b640:	021b      	lsls	r3, r3, #8
 800b642:	4968      	ldr	r1, [pc, #416]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b644:	4313      	orrs	r3, r2
 800b646:	604b      	str	r3, [r1, #4]
 800b648:	e025      	b.n	800b696 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b64a:	4b66      	ldr	r3, [pc, #408]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	4a65      	ldr	r2, [pc, #404]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b650:	f043 0308 	orr.w	r3, r3, #8
 800b654:	6013      	str	r3, [r2, #0]
 800b656:	4b63      	ldr	r3, [pc, #396]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6a1b      	ldr	r3, [r3, #32]
 800b662:	4960      	ldr	r1, [pc, #384]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b664:	4313      	orrs	r3, r2
 800b666:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b668:	4b5e      	ldr	r3, [pc, #376]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	69db      	ldr	r3, [r3, #28]
 800b674:	021b      	lsls	r3, r3, #8
 800b676:	495b      	ldr	r1, [pc, #364]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b678:	4313      	orrs	r3, r2
 800b67a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b67c:	69bb      	ldr	r3, [r7, #24]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d109      	bne.n	800b696 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6a1b      	ldr	r3, [r3, #32]
 800b686:	4618      	mov	r0, r3
 800b688:	f000 fd4c 	bl	800c124 <RCC_SetFlashLatencyFromMSIRange>
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d001      	beq.n	800b696 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800b692:	2301      	movs	r3, #1
 800b694:	e37a      	b.n	800bd8c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b696:	f000 fc81 	bl	800bf9c <HAL_RCC_GetSysClockFreq>
 800b69a:	4602      	mov	r2, r0
 800b69c:	4b51      	ldr	r3, [pc, #324]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b69e:	689b      	ldr	r3, [r3, #8]
 800b6a0:	091b      	lsrs	r3, r3, #4
 800b6a2:	f003 030f 	and.w	r3, r3, #15
 800b6a6:	4950      	ldr	r1, [pc, #320]	; (800b7e8 <HAL_RCC_OscConfig+0x274>)
 800b6a8:	5ccb      	ldrb	r3, [r1, r3]
 800b6aa:	f003 031f 	and.w	r3, r3, #31
 800b6ae:	fa22 f303 	lsr.w	r3, r2, r3
 800b6b2:	4a4e      	ldr	r2, [pc, #312]	; (800b7ec <HAL_RCC_OscConfig+0x278>)
 800b6b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800b6b6:	4b4e      	ldr	r3, [pc, #312]	; (800b7f0 <HAL_RCC_OscConfig+0x27c>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f7ff fa14 	bl	800aae8 <HAL_InitTick>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800b6c4:	7bfb      	ldrb	r3, [r7, #15]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d052      	beq.n	800b770 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800b6ca:	7bfb      	ldrb	r3, [r7, #15]
 800b6cc:	e35e      	b.n	800bd8c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	699b      	ldr	r3, [r3, #24]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d032      	beq.n	800b73c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800b6d6:	4b43      	ldr	r3, [pc, #268]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4a42      	ldr	r2, [pc, #264]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b6dc:	f043 0301 	orr.w	r3, r3, #1
 800b6e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b6e2:	f7ff fa51 	bl	800ab88 <HAL_GetTick>
 800b6e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b6e8:	e008      	b.n	800b6fc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b6ea:	f7ff fa4d 	bl	800ab88 <HAL_GetTick>
 800b6ee:	4602      	mov	r2, r0
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	1ad3      	subs	r3, r2, r3
 800b6f4:	2b02      	cmp	r3, #2
 800b6f6:	d901      	bls.n	800b6fc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800b6f8:	2303      	movs	r3, #3
 800b6fa:	e347      	b.n	800bd8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b6fc:	4b39      	ldr	r3, [pc, #228]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f003 0302 	and.w	r3, r3, #2
 800b704:	2b00      	cmp	r3, #0
 800b706:	d0f0      	beq.n	800b6ea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b708:	4b36      	ldr	r3, [pc, #216]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a35      	ldr	r2, [pc, #212]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b70e:	f043 0308 	orr.w	r3, r3, #8
 800b712:	6013      	str	r3, [r2, #0]
 800b714:	4b33      	ldr	r3, [pc, #204]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6a1b      	ldr	r3, [r3, #32]
 800b720:	4930      	ldr	r1, [pc, #192]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b722:	4313      	orrs	r3, r2
 800b724:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b726:	4b2f      	ldr	r3, [pc, #188]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	69db      	ldr	r3, [r3, #28]
 800b732:	021b      	lsls	r3, r3, #8
 800b734:	492b      	ldr	r1, [pc, #172]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b736:	4313      	orrs	r3, r2
 800b738:	604b      	str	r3, [r1, #4]
 800b73a:	e01a      	b.n	800b772 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800b73c:	4b29      	ldr	r3, [pc, #164]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	4a28      	ldr	r2, [pc, #160]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b742:	f023 0301 	bic.w	r3, r3, #1
 800b746:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b748:	f7ff fa1e 	bl	800ab88 <HAL_GetTick>
 800b74c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b74e:	e008      	b.n	800b762 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b750:	f7ff fa1a 	bl	800ab88 <HAL_GetTick>
 800b754:	4602      	mov	r2, r0
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	1ad3      	subs	r3, r2, r3
 800b75a:	2b02      	cmp	r3, #2
 800b75c:	d901      	bls.n	800b762 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800b75e:	2303      	movs	r3, #3
 800b760:	e314      	b.n	800bd8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b762:	4b20      	ldr	r3, [pc, #128]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f003 0302 	and.w	r3, r3, #2
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d1f0      	bne.n	800b750 <HAL_RCC_OscConfig+0x1dc>
 800b76e:	e000      	b.n	800b772 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b770:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f003 0301 	and.w	r3, r3, #1
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d073      	beq.n	800b866 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800b77e:	69bb      	ldr	r3, [r7, #24]
 800b780:	2b08      	cmp	r3, #8
 800b782:	d005      	beq.n	800b790 <HAL_RCC_OscConfig+0x21c>
 800b784:	69bb      	ldr	r3, [r7, #24]
 800b786:	2b0c      	cmp	r3, #12
 800b788:	d10e      	bne.n	800b7a8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	2b03      	cmp	r3, #3
 800b78e:	d10b      	bne.n	800b7a8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b790:	4b14      	ldr	r3, [pc, #80]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d063      	beq.n	800b864 <HAL_RCC_OscConfig+0x2f0>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	685b      	ldr	r3, [r3, #4]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d15f      	bne.n	800b864 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	e2f1      	b.n	800bd8c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7b0:	d106      	bne.n	800b7c0 <HAL_RCC_OscConfig+0x24c>
 800b7b2:	4b0c      	ldr	r3, [pc, #48]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	4a0b      	ldr	r2, [pc, #44]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b7b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b7bc:	6013      	str	r3, [r2, #0]
 800b7be:	e025      	b.n	800b80c <HAL_RCC_OscConfig+0x298>
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b7c8:	d114      	bne.n	800b7f4 <HAL_RCC_OscConfig+0x280>
 800b7ca:	4b06      	ldr	r3, [pc, #24]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	4a05      	ldr	r2, [pc, #20]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b7d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b7d4:	6013      	str	r3, [r2, #0]
 800b7d6:	4b03      	ldr	r3, [pc, #12]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4a02      	ldr	r2, [pc, #8]	; (800b7e4 <HAL_RCC_OscConfig+0x270>)
 800b7dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b7e0:	6013      	str	r3, [r2, #0]
 800b7e2:	e013      	b.n	800b80c <HAL_RCC_OscConfig+0x298>
 800b7e4:	40021000 	.word	0x40021000
 800b7e8:	08010448 	.word	0x08010448
 800b7ec:	20000000 	.word	0x20000000
 800b7f0:	20000004 	.word	0x20000004
 800b7f4:	4ba0      	ldr	r3, [pc, #640]	; (800ba78 <HAL_RCC_OscConfig+0x504>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	4a9f      	ldr	r2, [pc, #636]	; (800ba78 <HAL_RCC_OscConfig+0x504>)
 800b7fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7fe:	6013      	str	r3, [r2, #0]
 800b800:	4b9d      	ldr	r3, [pc, #628]	; (800ba78 <HAL_RCC_OscConfig+0x504>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4a9c      	ldr	r2, [pc, #624]	; (800ba78 <HAL_RCC_OscConfig+0x504>)
 800b806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b80a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d013      	beq.n	800b83c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b814:	f7ff f9b8 	bl	800ab88 <HAL_GetTick>
 800b818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b81a:	e008      	b.n	800b82e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b81c:	f7ff f9b4 	bl	800ab88 <HAL_GetTick>
 800b820:	4602      	mov	r2, r0
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	1ad3      	subs	r3, r2, r3
 800b826:	2b64      	cmp	r3, #100	; 0x64
 800b828:	d901      	bls.n	800b82e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800b82a:	2303      	movs	r3, #3
 800b82c:	e2ae      	b.n	800bd8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b82e:	4b92      	ldr	r3, [pc, #584]	; (800ba78 <HAL_RCC_OscConfig+0x504>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b836:	2b00      	cmp	r3, #0
 800b838:	d0f0      	beq.n	800b81c <HAL_RCC_OscConfig+0x2a8>
 800b83a:	e014      	b.n	800b866 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b83c:	f7ff f9a4 	bl	800ab88 <HAL_GetTick>
 800b840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b842:	e008      	b.n	800b856 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b844:	f7ff f9a0 	bl	800ab88 <HAL_GetTick>
 800b848:	4602      	mov	r2, r0
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	1ad3      	subs	r3, r2, r3
 800b84e:	2b64      	cmp	r3, #100	; 0x64
 800b850:	d901      	bls.n	800b856 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800b852:	2303      	movs	r3, #3
 800b854:	e29a      	b.n	800bd8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b856:	4b88      	ldr	r3, [pc, #544]	; (800ba78 <HAL_RCC_OscConfig+0x504>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d1f0      	bne.n	800b844 <HAL_RCC_OscConfig+0x2d0>
 800b862:	e000      	b.n	800b866 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f003 0302 	and.w	r3, r3, #2
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d060      	beq.n	800b934 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800b872:	69bb      	ldr	r3, [r7, #24]
 800b874:	2b04      	cmp	r3, #4
 800b876:	d005      	beq.n	800b884 <HAL_RCC_OscConfig+0x310>
 800b878:	69bb      	ldr	r3, [r7, #24]
 800b87a:	2b0c      	cmp	r3, #12
 800b87c:	d119      	bne.n	800b8b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	2b02      	cmp	r3, #2
 800b882:	d116      	bne.n	800b8b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b884:	4b7c      	ldr	r3, [pc, #496]	; (800ba78 <HAL_RCC_OscConfig+0x504>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d005      	beq.n	800b89c <HAL_RCC_OscConfig+0x328>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	68db      	ldr	r3, [r3, #12]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d101      	bne.n	800b89c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800b898:	2301      	movs	r3, #1
 800b89a:	e277      	b.n	800bd8c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b89c:	4b76      	ldr	r3, [pc, #472]	; (800ba78 <HAL_RCC_OscConfig+0x504>)
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	691b      	ldr	r3, [r3, #16]
 800b8a8:	061b      	lsls	r3, r3, #24
 800b8aa:	4973      	ldr	r1, [pc, #460]	; (800ba78 <HAL_RCC_OscConfig+0x504>)
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b8b0:	e040      	b.n	800b934 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	68db      	ldr	r3, [r3, #12]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d023      	beq.n	800b902 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b8ba:	4b6f      	ldr	r3, [pc, #444]	; (800ba78 <HAL_RCC_OscConfig+0x504>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	4a6e      	ldr	r2, [pc, #440]	; (800ba78 <HAL_RCC_OscConfig+0x504>)
 800b8c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8c6:	f7ff f95f 	bl	800ab88 <HAL_GetTick>
 800b8ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b8cc:	e008      	b.n	800b8e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b8ce:	f7ff f95b 	bl	800ab88 <HAL_GetTick>
 800b8d2:	4602      	mov	r2, r0
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	1ad3      	subs	r3, r2, r3
 800b8d8:	2b02      	cmp	r3, #2
 800b8da:	d901      	bls.n	800b8e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800b8dc:	2303      	movs	r3, #3
 800b8de:	e255      	b.n	800bd8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b8e0:	4b65      	ldr	r3, [pc, #404]	; (800ba78 <HAL_RCC_OscConfig+0x504>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d0f0      	beq.n	800b8ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b8ec:	4b62      	ldr	r3, [pc, #392]	; (800ba78 <HAL_RCC_OscConfig+0x504>)
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	691b      	ldr	r3, [r3, #16]
 800b8f8:	061b      	lsls	r3, r3, #24
 800b8fa:	495f      	ldr	r1, [pc, #380]	; (800ba78 <HAL_RCC_OscConfig+0x504>)
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	604b      	str	r3, [r1, #4]
 800b900:	e018      	b.n	800b934 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b902:	4b5d      	ldr	r3, [pc, #372]	; (800ba78 <HAL_RCC_OscConfig+0x504>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	4a5c      	ldr	r2, [pc, #368]	; (800ba78 <HAL_RCC_OscConfig+0x504>)
 800b908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b90c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b90e:	f7ff f93b 	bl	800ab88 <HAL_GetTick>
 800b912:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b914:	e008      	b.n	800b928 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b916:	f7ff f937 	bl	800ab88 <HAL_GetTick>
 800b91a:	4602      	mov	r2, r0
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	1ad3      	subs	r3, r2, r3
 800b920:	2b02      	cmp	r3, #2
 800b922:	d901      	bls.n	800b928 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800b924:	2303      	movs	r3, #3
 800b926:	e231      	b.n	800bd8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b928:	4b53      	ldr	r3, [pc, #332]	; (800ba78 <HAL_RCC_OscConfig+0x504>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b930:	2b00      	cmp	r3, #0
 800b932:	d1f0      	bne.n	800b916 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f003 0308 	and.w	r3, r3, #8
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d03c      	beq.n	800b9ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	695b      	ldr	r3, [r3, #20]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d01c      	beq.n	800b982 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b948:	4b4b      	ldr	r3, [pc, #300]	; (800ba78 <HAL_RCC_OscConfig+0x504>)
 800b94a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b94e:	4a4a      	ldr	r2, [pc, #296]	; (800ba78 <HAL_RCC_OscConfig+0x504>)
 800b950:	f043 0301 	orr.w	r3, r3, #1
 800b954:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b958:	f7ff f916 	bl	800ab88 <HAL_GetTick>
 800b95c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b95e:	e008      	b.n	800b972 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b960:	f7ff f912 	bl	800ab88 <HAL_GetTick>
 800b964:	4602      	mov	r2, r0
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	1ad3      	subs	r3, r2, r3
 800b96a:	2b02      	cmp	r3, #2
 800b96c:	d901      	bls.n	800b972 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800b96e:	2303      	movs	r3, #3
 800b970:	e20c      	b.n	800bd8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b972:	4b41      	ldr	r3, [pc, #260]	; (800ba78 <HAL_RCC_OscConfig+0x504>)
 800b974:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b978:	f003 0302 	and.w	r3, r3, #2
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d0ef      	beq.n	800b960 <HAL_RCC_OscConfig+0x3ec>
 800b980:	e01b      	b.n	800b9ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b982:	4b3d      	ldr	r3, [pc, #244]	; (800ba78 <HAL_RCC_OscConfig+0x504>)
 800b984:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b988:	4a3b      	ldr	r2, [pc, #236]	; (800ba78 <HAL_RCC_OscConfig+0x504>)
 800b98a:	f023 0301 	bic.w	r3, r3, #1
 800b98e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b992:	f7ff f8f9 	bl	800ab88 <HAL_GetTick>
 800b996:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b998:	e008      	b.n	800b9ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b99a:	f7ff f8f5 	bl	800ab88 <HAL_GetTick>
 800b99e:	4602      	mov	r2, r0
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	1ad3      	subs	r3, r2, r3
 800b9a4:	2b02      	cmp	r3, #2
 800b9a6:	d901      	bls.n	800b9ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800b9a8:	2303      	movs	r3, #3
 800b9aa:	e1ef      	b.n	800bd8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b9ac:	4b32      	ldr	r3, [pc, #200]	; (800ba78 <HAL_RCC_OscConfig+0x504>)
 800b9ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b9b2:	f003 0302 	and.w	r3, r3, #2
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d1ef      	bne.n	800b99a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f003 0304 	and.w	r3, r3, #4
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	f000 80a6 	beq.w	800bb14 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800b9cc:	4b2a      	ldr	r3, [pc, #168]	; (800ba78 <HAL_RCC_OscConfig+0x504>)
 800b9ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d10d      	bne.n	800b9f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b9d8:	4b27      	ldr	r3, [pc, #156]	; (800ba78 <HAL_RCC_OscConfig+0x504>)
 800b9da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9dc:	4a26      	ldr	r2, [pc, #152]	; (800ba78 <HAL_RCC_OscConfig+0x504>)
 800b9de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9e2:	6593      	str	r3, [r2, #88]	; 0x58
 800b9e4:	4b24      	ldr	r3, [pc, #144]	; (800ba78 <HAL_RCC_OscConfig+0x504>)
 800b9e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9ec:	60bb      	str	r3, [r7, #8]
 800b9ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b9f4:	4b21      	ldr	r3, [pc, #132]	; (800ba7c <HAL_RCC_OscConfig+0x508>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d118      	bne.n	800ba32 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ba00:	4b1e      	ldr	r3, [pc, #120]	; (800ba7c <HAL_RCC_OscConfig+0x508>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	4a1d      	ldr	r2, [pc, #116]	; (800ba7c <HAL_RCC_OscConfig+0x508>)
 800ba06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ba0c:	f7ff f8bc 	bl	800ab88 <HAL_GetTick>
 800ba10:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ba12:	e008      	b.n	800ba26 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba14:	f7ff f8b8 	bl	800ab88 <HAL_GetTick>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	693b      	ldr	r3, [r7, #16]
 800ba1c:	1ad3      	subs	r3, r2, r3
 800ba1e:	2b02      	cmp	r3, #2
 800ba20:	d901      	bls.n	800ba26 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800ba22:	2303      	movs	r3, #3
 800ba24:	e1b2      	b.n	800bd8c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ba26:	4b15      	ldr	r3, [pc, #84]	; (800ba7c <HAL_RCC_OscConfig+0x508>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d0f0      	beq.n	800ba14 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	689b      	ldr	r3, [r3, #8]
 800ba36:	2b01      	cmp	r3, #1
 800ba38:	d108      	bne.n	800ba4c <HAL_RCC_OscConfig+0x4d8>
 800ba3a:	4b0f      	ldr	r3, [pc, #60]	; (800ba78 <HAL_RCC_OscConfig+0x504>)
 800ba3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba40:	4a0d      	ldr	r2, [pc, #52]	; (800ba78 <HAL_RCC_OscConfig+0x504>)
 800ba42:	f043 0301 	orr.w	r3, r3, #1
 800ba46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ba4a:	e029      	b.n	800baa0 <HAL_RCC_OscConfig+0x52c>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	689b      	ldr	r3, [r3, #8]
 800ba50:	2b05      	cmp	r3, #5
 800ba52:	d115      	bne.n	800ba80 <HAL_RCC_OscConfig+0x50c>
 800ba54:	4b08      	ldr	r3, [pc, #32]	; (800ba78 <HAL_RCC_OscConfig+0x504>)
 800ba56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba5a:	4a07      	ldr	r2, [pc, #28]	; (800ba78 <HAL_RCC_OscConfig+0x504>)
 800ba5c:	f043 0304 	orr.w	r3, r3, #4
 800ba60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ba64:	4b04      	ldr	r3, [pc, #16]	; (800ba78 <HAL_RCC_OscConfig+0x504>)
 800ba66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba6a:	4a03      	ldr	r2, [pc, #12]	; (800ba78 <HAL_RCC_OscConfig+0x504>)
 800ba6c:	f043 0301 	orr.w	r3, r3, #1
 800ba70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ba74:	e014      	b.n	800baa0 <HAL_RCC_OscConfig+0x52c>
 800ba76:	bf00      	nop
 800ba78:	40021000 	.word	0x40021000
 800ba7c:	40007000 	.word	0x40007000
 800ba80:	4b9a      	ldr	r3, [pc, #616]	; (800bcec <HAL_RCC_OscConfig+0x778>)
 800ba82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba86:	4a99      	ldr	r2, [pc, #612]	; (800bcec <HAL_RCC_OscConfig+0x778>)
 800ba88:	f023 0301 	bic.w	r3, r3, #1
 800ba8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ba90:	4b96      	ldr	r3, [pc, #600]	; (800bcec <HAL_RCC_OscConfig+0x778>)
 800ba92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba96:	4a95      	ldr	r2, [pc, #596]	; (800bcec <HAL_RCC_OscConfig+0x778>)
 800ba98:	f023 0304 	bic.w	r3, r3, #4
 800ba9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	689b      	ldr	r3, [r3, #8]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d016      	beq.n	800bad6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800baa8:	f7ff f86e 	bl	800ab88 <HAL_GetTick>
 800baac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800baae:	e00a      	b.n	800bac6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bab0:	f7ff f86a 	bl	800ab88 <HAL_GetTick>
 800bab4:	4602      	mov	r2, r0
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	1ad3      	subs	r3, r2, r3
 800baba:	f241 3288 	movw	r2, #5000	; 0x1388
 800babe:	4293      	cmp	r3, r2
 800bac0:	d901      	bls.n	800bac6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800bac2:	2303      	movs	r3, #3
 800bac4:	e162      	b.n	800bd8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bac6:	4b89      	ldr	r3, [pc, #548]	; (800bcec <HAL_RCC_OscConfig+0x778>)
 800bac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bacc:	f003 0302 	and.w	r3, r3, #2
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d0ed      	beq.n	800bab0 <HAL_RCC_OscConfig+0x53c>
 800bad4:	e015      	b.n	800bb02 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bad6:	f7ff f857 	bl	800ab88 <HAL_GetTick>
 800bada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800badc:	e00a      	b.n	800baf4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bade:	f7ff f853 	bl	800ab88 <HAL_GetTick>
 800bae2:	4602      	mov	r2, r0
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	1ad3      	subs	r3, r2, r3
 800bae8:	f241 3288 	movw	r2, #5000	; 0x1388
 800baec:	4293      	cmp	r3, r2
 800baee:	d901      	bls.n	800baf4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800baf0:	2303      	movs	r3, #3
 800baf2:	e14b      	b.n	800bd8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800baf4:	4b7d      	ldr	r3, [pc, #500]	; (800bcec <HAL_RCC_OscConfig+0x778>)
 800baf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bafa:	f003 0302 	and.w	r3, r3, #2
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d1ed      	bne.n	800bade <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bb02:	7ffb      	ldrb	r3, [r7, #31]
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d105      	bne.n	800bb14 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bb08:	4b78      	ldr	r3, [pc, #480]	; (800bcec <HAL_RCC_OscConfig+0x778>)
 800bb0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb0c:	4a77      	ldr	r2, [pc, #476]	; (800bcec <HAL_RCC_OscConfig+0x778>)
 800bb0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bb12:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f003 0320 	and.w	r3, r3, #32
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d03c      	beq.n	800bb9a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d01c      	beq.n	800bb62 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bb28:	4b70      	ldr	r3, [pc, #448]	; (800bcec <HAL_RCC_OscConfig+0x778>)
 800bb2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bb2e:	4a6f      	ldr	r2, [pc, #444]	; (800bcec <HAL_RCC_OscConfig+0x778>)
 800bb30:	f043 0301 	orr.w	r3, r3, #1
 800bb34:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb38:	f7ff f826 	bl	800ab88 <HAL_GetTick>
 800bb3c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800bb3e:	e008      	b.n	800bb52 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bb40:	f7ff f822 	bl	800ab88 <HAL_GetTick>
 800bb44:	4602      	mov	r2, r0
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	1ad3      	subs	r3, r2, r3
 800bb4a:	2b02      	cmp	r3, #2
 800bb4c:	d901      	bls.n	800bb52 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800bb4e:	2303      	movs	r3, #3
 800bb50:	e11c      	b.n	800bd8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800bb52:	4b66      	ldr	r3, [pc, #408]	; (800bcec <HAL_RCC_OscConfig+0x778>)
 800bb54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bb58:	f003 0302 	and.w	r3, r3, #2
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d0ef      	beq.n	800bb40 <HAL_RCC_OscConfig+0x5cc>
 800bb60:	e01b      	b.n	800bb9a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800bb62:	4b62      	ldr	r3, [pc, #392]	; (800bcec <HAL_RCC_OscConfig+0x778>)
 800bb64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bb68:	4a60      	ldr	r2, [pc, #384]	; (800bcec <HAL_RCC_OscConfig+0x778>)
 800bb6a:	f023 0301 	bic.w	r3, r3, #1
 800bb6e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb72:	f7ff f809 	bl	800ab88 <HAL_GetTick>
 800bb76:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800bb78:	e008      	b.n	800bb8c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bb7a:	f7ff f805 	bl	800ab88 <HAL_GetTick>
 800bb7e:	4602      	mov	r2, r0
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	1ad3      	subs	r3, r2, r3
 800bb84:	2b02      	cmp	r3, #2
 800bb86:	d901      	bls.n	800bb8c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800bb88:	2303      	movs	r3, #3
 800bb8a:	e0ff      	b.n	800bd8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800bb8c:	4b57      	ldr	r3, [pc, #348]	; (800bcec <HAL_RCC_OscConfig+0x778>)
 800bb8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bb92:	f003 0302 	and.w	r3, r3, #2
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d1ef      	bne.n	800bb7a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	f000 80f3 	beq.w	800bd8a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bba8:	2b02      	cmp	r3, #2
 800bbaa:	f040 80c9 	bne.w	800bd40 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800bbae:	4b4f      	ldr	r3, [pc, #316]	; (800bcec <HAL_RCC_OscConfig+0x778>)
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	f003 0203 	and.w	r2, r3, #3
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d12c      	bne.n	800bc1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbcc:	3b01      	subs	r3, #1
 800bbce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d123      	bne.n	800bc1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbde:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d11b      	bne.n	800bc1c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d113      	bne.n	800bc1c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbfe:	085b      	lsrs	r3, r3, #1
 800bc00:	3b01      	subs	r3, #1
 800bc02:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d109      	bne.n	800bc1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc12:	085b      	lsrs	r3, r3, #1
 800bc14:	3b01      	subs	r3, #1
 800bc16:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d06b      	beq.n	800bcf4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800bc1c:	69bb      	ldr	r3, [r7, #24]
 800bc1e:	2b0c      	cmp	r3, #12
 800bc20:	d062      	beq.n	800bce8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800bc22:	4b32      	ldr	r3, [pc, #200]	; (800bcec <HAL_RCC_OscConfig+0x778>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d001      	beq.n	800bc32 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800bc2e:	2301      	movs	r3, #1
 800bc30:	e0ac      	b.n	800bd8c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800bc32:	4b2e      	ldr	r3, [pc, #184]	; (800bcec <HAL_RCC_OscConfig+0x778>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	4a2d      	ldr	r2, [pc, #180]	; (800bcec <HAL_RCC_OscConfig+0x778>)
 800bc38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bc3c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800bc3e:	f7fe ffa3 	bl	800ab88 <HAL_GetTick>
 800bc42:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bc44:	e008      	b.n	800bc58 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc46:	f7fe ff9f 	bl	800ab88 <HAL_GetTick>
 800bc4a:	4602      	mov	r2, r0
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	1ad3      	subs	r3, r2, r3
 800bc50:	2b02      	cmp	r3, #2
 800bc52:	d901      	bls.n	800bc58 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800bc54:	2303      	movs	r3, #3
 800bc56:	e099      	b.n	800bd8c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bc58:	4b24      	ldr	r3, [pc, #144]	; (800bcec <HAL_RCC_OscConfig+0x778>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d1f0      	bne.n	800bc46 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bc64:	4b21      	ldr	r3, [pc, #132]	; (800bcec <HAL_RCC_OscConfig+0x778>)
 800bc66:	68da      	ldr	r2, [r3, #12]
 800bc68:	4b21      	ldr	r3, [pc, #132]	; (800bcf0 <HAL_RCC_OscConfig+0x77c>)
 800bc6a:	4013      	ands	r3, r2
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800bc70:	687a      	ldr	r2, [r7, #4]
 800bc72:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bc74:	3a01      	subs	r2, #1
 800bc76:	0112      	lsls	r2, r2, #4
 800bc78:	4311      	orrs	r1, r2
 800bc7a:	687a      	ldr	r2, [r7, #4]
 800bc7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800bc7e:	0212      	lsls	r2, r2, #8
 800bc80:	4311      	orrs	r1, r2
 800bc82:	687a      	ldr	r2, [r7, #4]
 800bc84:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bc86:	0852      	lsrs	r2, r2, #1
 800bc88:	3a01      	subs	r2, #1
 800bc8a:	0552      	lsls	r2, r2, #21
 800bc8c:	4311      	orrs	r1, r2
 800bc8e:	687a      	ldr	r2, [r7, #4]
 800bc90:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800bc92:	0852      	lsrs	r2, r2, #1
 800bc94:	3a01      	subs	r2, #1
 800bc96:	0652      	lsls	r2, r2, #25
 800bc98:	4311      	orrs	r1, r2
 800bc9a:	687a      	ldr	r2, [r7, #4]
 800bc9c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bc9e:	06d2      	lsls	r2, r2, #27
 800bca0:	430a      	orrs	r2, r1
 800bca2:	4912      	ldr	r1, [pc, #72]	; (800bcec <HAL_RCC_OscConfig+0x778>)
 800bca4:	4313      	orrs	r3, r2
 800bca6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800bca8:	4b10      	ldr	r3, [pc, #64]	; (800bcec <HAL_RCC_OscConfig+0x778>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	4a0f      	ldr	r2, [pc, #60]	; (800bcec <HAL_RCC_OscConfig+0x778>)
 800bcae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bcb2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800bcb4:	4b0d      	ldr	r3, [pc, #52]	; (800bcec <HAL_RCC_OscConfig+0x778>)
 800bcb6:	68db      	ldr	r3, [r3, #12]
 800bcb8:	4a0c      	ldr	r2, [pc, #48]	; (800bcec <HAL_RCC_OscConfig+0x778>)
 800bcba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bcbe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800bcc0:	f7fe ff62 	bl	800ab88 <HAL_GetTick>
 800bcc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bcc6:	e008      	b.n	800bcda <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bcc8:	f7fe ff5e 	bl	800ab88 <HAL_GetTick>
 800bccc:	4602      	mov	r2, r0
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	1ad3      	subs	r3, r2, r3
 800bcd2:	2b02      	cmp	r3, #2
 800bcd4:	d901      	bls.n	800bcda <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800bcd6:	2303      	movs	r3, #3
 800bcd8:	e058      	b.n	800bd8c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bcda:	4b04      	ldr	r3, [pc, #16]	; (800bcec <HAL_RCC_OscConfig+0x778>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d0f0      	beq.n	800bcc8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800bce6:	e050      	b.n	800bd8a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800bce8:	2301      	movs	r3, #1
 800bcea:	e04f      	b.n	800bd8c <HAL_RCC_OscConfig+0x818>
 800bcec:	40021000 	.word	0x40021000
 800bcf0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bcf4:	4b27      	ldr	r3, [pc, #156]	; (800bd94 <HAL_RCC_OscConfig+0x820>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d144      	bne.n	800bd8a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800bd00:	4b24      	ldr	r3, [pc, #144]	; (800bd94 <HAL_RCC_OscConfig+0x820>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	4a23      	ldr	r2, [pc, #140]	; (800bd94 <HAL_RCC_OscConfig+0x820>)
 800bd06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bd0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800bd0c:	4b21      	ldr	r3, [pc, #132]	; (800bd94 <HAL_RCC_OscConfig+0x820>)
 800bd0e:	68db      	ldr	r3, [r3, #12]
 800bd10:	4a20      	ldr	r2, [pc, #128]	; (800bd94 <HAL_RCC_OscConfig+0x820>)
 800bd12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bd16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800bd18:	f7fe ff36 	bl	800ab88 <HAL_GetTick>
 800bd1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bd1e:	e008      	b.n	800bd32 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bd20:	f7fe ff32 	bl	800ab88 <HAL_GetTick>
 800bd24:	4602      	mov	r2, r0
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	1ad3      	subs	r3, r2, r3
 800bd2a:	2b02      	cmp	r3, #2
 800bd2c:	d901      	bls.n	800bd32 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800bd2e:	2303      	movs	r3, #3
 800bd30:	e02c      	b.n	800bd8c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bd32:	4b18      	ldr	r3, [pc, #96]	; (800bd94 <HAL_RCC_OscConfig+0x820>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d0f0      	beq.n	800bd20 <HAL_RCC_OscConfig+0x7ac>
 800bd3e:	e024      	b.n	800bd8a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800bd40:	69bb      	ldr	r3, [r7, #24]
 800bd42:	2b0c      	cmp	r3, #12
 800bd44:	d01f      	beq.n	800bd86 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bd46:	4b13      	ldr	r3, [pc, #76]	; (800bd94 <HAL_RCC_OscConfig+0x820>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	4a12      	ldr	r2, [pc, #72]	; (800bd94 <HAL_RCC_OscConfig+0x820>)
 800bd4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bd50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd52:	f7fe ff19 	bl	800ab88 <HAL_GetTick>
 800bd56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bd58:	e008      	b.n	800bd6c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bd5a:	f7fe ff15 	bl	800ab88 <HAL_GetTick>
 800bd5e:	4602      	mov	r2, r0
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	1ad3      	subs	r3, r2, r3
 800bd64:	2b02      	cmp	r3, #2
 800bd66:	d901      	bls.n	800bd6c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800bd68:	2303      	movs	r3, #3
 800bd6a:	e00f      	b.n	800bd8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bd6c:	4b09      	ldr	r3, [pc, #36]	; (800bd94 <HAL_RCC_OscConfig+0x820>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d1f0      	bne.n	800bd5a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800bd78:	4b06      	ldr	r3, [pc, #24]	; (800bd94 <HAL_RCC_OscConfig+0x820>)
 800bd7a:	68da      	ldr	r2, [r3, #12]
 800bd7c:	4905      	ldr	r1, [pc, #20]	; (800bd94 <HAL_RCC_OscConfig+0x820>)
 800bd7e:	4b06      	ldr	r3, [pc, #24]	; (800bd98 <HAL_RCC_OscConfig+0x824>)
 800bd80:	4013      	ands	r3, r2
 800bd82:	60cb      	str	r3, [r1, #12]
 800bd84:	e001      	b.n	800bd8a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800bd86:	2301      	movs	r3, #1
 800bd88:	e000      	b.n	800bd8c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800bd8a:	2300      	movs	r3, #0
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3720      	adds	r7, #32
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}
 800bd94:	40021000 	.word	0x40021000
 800bd98:	feeefffc 	.word	0xfeeefffc

0800bd9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b084      	sub	sp, #16
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d101      	bne.n	800bdb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bdac:	2301      	movs	r3, #1
 800bdae:	e0e7      	b.n	800bf80 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bdb0:	4b75      	ldr	r3, [pc, #468]	; (800bf88 <HAL_RCC_ClockConfig+0x1ec>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f003 0307 	and.w	r3, r3, #7
 800bdb8:	683a      	ldr	r2, [r7, #0]
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d910      	bls.n	800bde0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bdbe:	4b72      	ldr	r3, [pc, #456]	; (800bf88 <HAL_RCC_ClockConfig+0x1ec>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f023 0207 	bic.w	r2, r3, #7
 800bdc6:	4970      	ldr	r1, [pc, #448]	; (800bf88 <HAL_RCC_ClockConfig+0x1ec>)
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bdce:	4b6e      	ldr	r3, [pc, #440]	; (800bf88 <HAL_RCC_ClockConfig+0x1ec>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f003 0307 	and.w	r3, r3, #7
 800bdd6:	683a      	ldr	r2, [r7, #0]
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	d001      	beq.n	800bde0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bddc:	2301      	movs	r3, #1
 800bdde:	e0cf      	b.n	800bf80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f003 0302 	and.w	r3, r3, #2
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d010      	beq.n	800be0e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	689a      	ldr	r2, [r3, #8]
 800bdf0:	4b66      	ldr	r3, [pc, #408]	; (800bf8c <HAL_RCC_ClockConfig+0x1f0>)
 800bdf2:	689b      	ldr	r3, [r3, #8]
 800bdf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d908      	bls.n	800be0e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bdfc:	4b63      	ldr	r3, [pc, #396]	; (800bf8c <HAL_RCC_ClockConfig+0x1f0>)
 800bdfe:	689b      	ldr	r3, [r3, #8]
 800be00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	689b      	ldr	r3, [r3, #8]
 800be08:	4960      	ldr	r1, [pc, #384]	; (800bf8c <HAL_RCC_ClockConfig+0x1f0>)
 800be0a:	4313      	orrs	r3, r2
 800be0c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f003 0301 	and.w	r3, r3, #1
 800be16:	2b00      	cmp	r3, #0
 800be18:	d04c      	beq.n	800beb4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	2b03      	cmp	r3, #3
 800be20:	d107      	bne.n	800be32 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800be22:	4b5a      	ldr	r3, [pc, #360]	; (800bf8c <HAL_RCC_ClockConfig+0x1f0>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d121      	bne.n	800be72 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800be2e:	2301      	movs	r3, #1
 800be30:	e0a6      	b.n	800bf80 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	2b02      	cmp	r3, #2
 800be38:	d107      	bne.n	800be4a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800be3a:	4b54      	ldr	r3, [pc, #336]	; (800bf8c <HAL_RCC_ClockConfig+0x1f0>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be42:	2b00      	cmp	r3, #0
 800be44:	d115      	bne.n	800be72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800be46:	2301      	movs	r3, #1
 800be48:	e09a      	b.n	800bf80 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	685b      	ldr	r3, [r3, #4]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d107      	bne.n	800be62 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800be52:	4b4e      	ldr	r3, [pc, #312]	; (800bf8c <HAL_RCC_ClockConfig+0x1f0>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f003 0302 	and.w	r3, r3, #2
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d109      	bne.n	800be72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800be5e:	2301      	movs	r3, #1
 800be60:	e08e      	b.n	800bf80 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800be62:	4b4a      	ldr	r3, [pc, #296]	; (800bf8c <HAL_RCC_ClockConfig+0x1f0>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d101      	bne.n	800be72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800be6e:	2301      	movs	r3, #1
 800be70:	e086      	b.n	800bf80 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800be72:	4b46      	ldr	r3, [pc, #280]	; (800bf8c <HAL_RCC_ClockConfig+0x1f0>)
 800be74:	689b      	ldr	r3, [r3, #8]
 800be76:	f023 0203 	bic.w	r2, r3, #3
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	685b      	ldr	r3, [r3, #4]
 800be7e:	4943      	ldr	r1, [pc, #268]	; (800bf8c <HAL_RCC_ClockConfig+0x1f0>)
 800be80:	4313      	orrs	r3, r2
 800be82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be84:	f7fe fe80 	bl	800ab88 <HAL_GetTick>
 800be88:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be8a:	e00a      	b.n	800bea2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800be8c:	f7fe fe7c 	bl	800ab88 <HAL_GetTick>
 800be90:	4602      	mov	r2, r0
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	1ad3      	subs	r3, r2, r3
 800be96:	f241 3288 	movw	r2, #5000	; 0x1388
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d901      	bls.n	800bea2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800be9e:	2303      	movs	r3, #3
 800bea0:	e06e      	b.n	800bf80 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bea2:	4b3a      	ldr	r3, [pc, #232]	; (800bf8c <HAL_RCC_ClockConfig+0x1f0>)
 800bea4:	689b      	ldr	r3, [r3, #8]
 800bea6:	f003 020c 	and.w	r2, r3, #12
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	685b      	ldr	r3, [r3, #4]
 800beae:	009b      	lsls	r3, r3, #2
 800beb0:	429a      	cmp	r2, r3
 800beb2:	d1eb      	bne.n	800be8c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	f003 0302 	and.w	r3, r3, #2
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d010      	beq.n	800bee2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	689a      	ldr	r2, [r3, #8]
 800bec4:	4b31      	ldr	r3, [pc, #196]	; (800bf8c <HAL_RCC_ClockConfig+0x1f0>)
 800bec6:	689b      	ldr	r3, [r3, #8]
 800bec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800becc:	429a      	cmp	r2, r3
 800bece:	d208      	bcs.n	800bee2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bed0:	4b2e      	ldr	r3, [pc, #184]	; (800bf8c <HAL_RCC_ClockConfig+0x1f0>)
 800bed2:	689b      	ldr	r3, [r3, #8]
 800bed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	689b      	ldr	r3, [r3, #8]
 800bedc:	492b      	ldr	r1, [pc, #172]	; (800bf8c <HAL_RCC_ClockConfig+0x1f0>)
 800bede:	4313      	orrs	r3, r2
 800bee0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bee2:	4b29      	ldr	r3, [pc, #164]	; (800bf88 <HAL_RCC_ClockConfig+0x1ec>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f003 0307 	and.w	r3, r3, #7
 800beea:	683a      	ldr	r2, [r7, #0]
 800beec:	429a      	cmp	r2, r3
 800beee:	d210      	bcs.n	800bf12 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bef0:	4b25      	ldr	r3, [pc, #148]	; (800bf88 <HAL_RCC_ClockConfig+0x1ec>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f023 0207 	bic.w	r2, r3, #7
 800bef8:	4923      	ldr	r1, [pc, #140]	; (800bf88 <HAL_RCC_ClockConfig+0x1ec>)
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	4313      	orrs	r3, r2
 800befe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bf00:	4b21      	ldr	r3, [pc, #132]	; (800bf88 <HAL_RCC_ClockConfig+0x1ec>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f003 0307 	and.w	r3, r3, #7
 800bf08:	683a      	ldr	r2, [r7, #0]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d001      	beq.n	800bf12 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	e036      	b.n	800bf80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f003 0304 	and.w	r3, r3, #4
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d008      	beq.n	800bf30 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bf1e:	4b1b      	ldr	r3, [pc, #108]	; (800bf8c <HAL_RCC_ClockConfig+0x1f0>)
 800bf20:	689b      	ldr	r3, [r3, #8]
 800bf22:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	68db      	ldr	r3, [r3, #12]
 800bf2a:	4918      	ldr	r1, [pc, #96]	; (800bf8c <HAL_RCC_ClockConfig+0x1f0>)
 800bf2c:	4313      	orrs	r3, r2
 800bf2e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f003 0308 	and.w	r3, r3, #8
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d009      	beq.n	800bf50 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bf3c:	4b13      	ldr	r3, [pc, #76]	; (800bf8c <HAL_RCC_ClockConfig+0x1f0>)
 800bf3e:	689b      	ldr	r3, [r3, #8]
 800bf40:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	691b      	ldr	r3, [r3, #16]
 800bf48:	00db      	lsls	r3, r3, #3
 800bf4a:	4910      	ldr	r1, [pc, #64]	; (800bf8c <HAL_RCC_ClockConfig+0x1f0>)
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bf50:	f000 f824 	bl	800bf9c <HAL_RCC_GetSysClockFreq>
 800bf54:	4602      	mov	r2, r0
 800bf56:	4b0d      	ldr	r3, [pc, #52]	; (800bf8c <HAL_RCC_ClockConfig+0x1f0>)
 800bf58:	689b      	ldr	r3, [r3, #8]
 800bf5a:	091b      	lsrs	r3, r3, #4
 800bf5c:	f003 030f 	and.w	r3, r3, #15
 800bf60:	490b      	ldr	r1, [pc, #44]	; (800bf90 <HAL_RCC_ClockConfig+0x1f4>)
 800bf62:	5ccb      	ldrb	r3, [r1, r3]
 800bf64:	f003 031f 	and.w	r3, r3, #31
 800bf68:	fa22 f303 	lsr.w	r3, r2, r3
 800bf6c:	4a09      	ldr	r2, [pc, #36]	; (800bf94 <HAL_RCC_ClockConfig+0x1f8>)
 800bf6e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800bf70:	4b09      	ldr	r3, [pc, #36]	; (800bf98 <HAL_RCC_ClockConfig+0x1fc>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	4618      	mov	r0, r3
 800bf76:	f7fe fdb7 	bl	800aae8 <HAL_InitTick>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	72fb      	strb	r3, [r7, #11]

  return status;
 800bf7e:	7afb      	ldrb	r3, [r7, #11]
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3710      	adds	r7, #16
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}
 800bf88:	40022000 	.word	0x40022000
 800bf8c:	40021000 	.word	0x40021000
 800bf90:	08010448 	.word	0x08010448
 800bf94:	20000000 	.word	0x20000000
 800bf98:	20000004 	.word	0x20000004

0800bf9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b089      	sub	sp, #36	; 0x24
 800bfa0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	61fb      	str	r3, [r7, #28]
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bfaa:	4b3e      	ldr	r3, [pc, #248]	; (800c0a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800bfac:	689b      	ldr	r3, [r3, #8]
 800bfae:	f003 030c 	and.w	r3, r3, #12
 800bfb2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bfb4:	4b3b      	ldr	r3, [pc, #236]	; (800c0a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800bfb6:	68db      	ldr	r3, [r3, #12]
 800bfb8:	f003 0303 	and.w	r3, r3, #3
 800bfbc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d005      	beq.n	800bfd0 <HAL_RCC_GetSysClockFreq+0x34>
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	2b0c      	cmp	r3, #12
 800bfc8:	d121      	bne.n	800c00e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	2b01      	cmp	r3, #1
 800bfce:	d11e      	bne.n	800c00e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800bfd0:	4b34      	ldr	r3, [pc, #208]	; (800c0a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f003 0308 	and.w	r3, r3, #8
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d107      	bne.n	800bfec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800bfdc:	4b31      	ldr	r3, [pc, #196]	; (800c0a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800bfde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bfe2:	0a1b      	lsrs	r3, r3, #8
 800bfe4:	f003 030f 	and.w	r3, r3, #15
 800bfe8:	61fb      	str	r3, [r7, #28]
 800bfea:	e005      	b.n	800bff8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800bfec:	4b2d      	ldr	r3, [pc, #180]	; (800c0a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	091b      	lsrs	r3, r3, #4
 800bff2:	f003 030f 	and.w	r3, r3, #15
 800bff6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800bff8:	4a2b      	ldr	r2, [pc, #172]	; (800c0a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800bffa:	69fb      	ldr	r3, [r7, #28]
 800bffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c000:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d10d      	bne.n	800c024 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800c008:	69fb      	ldr	r3, [r7, #28]
 800c00a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c00c:	e00a      	b.n	800c024 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	2b04      	cmp	r3, #4
 800c012:	d102      	bne.n	800c01a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c014:	4b25      	ldr	r3, [pc, #148]	; (800c0ac <HAL_RCC_GetSysClockFreq+0x110>)
 800c016:	61bb      	str	r3, [r7, #24]
 800c018:	e004      	b.n	800c024 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	2b08      	cmp	r3, #8
 800c01e:	d101      	bne.n	800c024 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c020:	4b23      	ldr	r3, [pc, #140]	; (800c0b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800c022:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	2b0c      	cmp	r3, #12
 800c028:	d134      	bne.n	800c094 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c02a:	4b1e      	ldr	r3, [pc, #120]	; (800c0a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800c02c:	68db      	ldr	r3, [r3, #12]
 800c02e:	f003 0303 	and.w	r3, r3, #3
 800c032:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	2b02      	cmp	r3, #2
 800c038:	d003      	beq.n	800c042 <HAL_RCC_GetSysClockFreq+0xa6>
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	2b03      	cmp	r3, #3
 800c03e:	d003      	beq.n	800c048 <HAL_RCC_GetSysClockFreq+0xac>
 800c040:	e005      	b.n	800c04e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800c042:	4b1a      	ldr	r3, [pc, #104]	; (800c0ac <HAL_RCC_GetSysClockFreq+0x110>)
 800c044:	617b      	str	r3, [r7, #20]
      break;
 800c046:	e005      	b.n	800c054 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800c048:	4b19      	ldr	r3, [pc, #100]	; (800c0b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800c04a:	617b      	str	r3, [r7, #20]
      break;
 800c04c:	e002      	b.n	800c054 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800c04e:	69fb      	ldr	r3, [r7, #28]
 800c050:	617b      	str	r3, [r7, #20]
      break;
 800c052:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c054:	4b13      	ldr	r3, [pc, #76]	; (800c0a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800c056:	68db      	ldr	r3, [r3, #12]
 800c058:	091b      	lsrs	r3, r3, #4
 800c05a:	f003 0307 	and.w	r3, r3, #7
 800c05e:	3301      	adds	r3, #1
 800c060:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800c062:	4b10      	ldr	r3, [pc, #64]	; (800c0a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800c064:	68db      	ldr	r3, [r3, #12]
 800c066:	0a1b      	lsrs	r3, r3, #8
 800c068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c06c:	697a      	ldr	r2, [r7, #20]
 800c06e:	fb03 f202 	mul.w	r2, r3, r2
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	fbb2 f3f3 	udiv	r3, r2, r3
 800c078:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c07a:	4b0a      	ldr	r3, [pc, #40]	; (800c0a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800c07c:	68db      	ldr	r3, [r3, #12]
 800c07e:	0e5b      	lsrs	r3, r3, #25
 800c080:	f003 0303 	and.w	r3, r3, #3
 800c084:	3301      	adds	r3, #1
 800c086:	005b      	lsls	r3, r3, #1
 800c088:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800c08a:	697a      	ldr	r2, [r7, #20]
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c092:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800c094:	69bb      	ldr	r3, [r7, #24]
}
 800c096:	4618      	mov	r0, r3
 800c098:	3724      	adds	r7, #36	; 0x24
 800c09a:	46bd      	mov	sp, r7
 800c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a0:	4770      	bx	lr
 800c0a2:	bf00      	nop
 800c0a4:	40021000 	.word	0x40021000
 800c0a8:	08010460 	.word	0x08010460
 800c0ac:	00f42400 	.word	0x00f42400
 800c0b0:	007a1200 	.word	0x007a1200

0800c0b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c0b8:	4b03      	ldr	r3, [pc, #12]	; (800c0c8 <HAL_RCC_GetHCLKFreq+0x14>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c4:	4770      	bx	lr
 800c0c6:	bf00      	nop
 800c0c8:	20000000 	.word	0x20000000

0800c0cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800c0d0:	f7ff fff0 	bl	800c0b4 <HAL_RCC_GetHCLKFreq>
 800c0d4:	4602      	mov	r2, r0
 800c0d6:	4b06      	ldr	r3, [pc, #24]	; (800c0f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c0d8:	689b      	ldr	r3, [r3, #8]
 800c0da:	0a1b      	lsrs	r3, r3, #8
 800c0dc:	f003 0307 	and.w	r3, r3, #7
 800c0e0:	4904      	ldr	r1, [pc, #16]	; (800c0f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c0e2:	5ccb      	ldrb	r3, [r1, r3]
 800c0e4:	f003 031f 	and.w	r3, r3, #31
 800c0e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	bd80      	pop	{r7, pc}
 800c0f0:	40021000 	.word	0x40021000
 800c0f4:	08010458 	.word	0x08010458

0800c0f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800c0fc:	f7ff ffda 	bl	800c0b4 <HAL_RCC_GetHCLKFreq>
 800c100:	4602      	mov	r2, r0
 800c102:	4b06      	ldr	r3, [pc, #24]	; (800c11c <HAL_RCC_GetPCLK2Freq+0x24>)
 800c104:	689b      	ldr	r3, [r3, #8]
 800c106:	0adb      	lsrs	r3, r3, #11
 800c108:	f003 0307 	and.w	r3, r3, #7
 800c10c:	4904      	ldr	r1, [pc, #16]	; (800c120 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c10e:	5ccb      	ldrb	r3, [r1, r3]
 800c110:	f003 031f 	and.w	r3, r3, #31
 800c114:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c118:	4618      	mov	r0, r3
 800c11a:	bd80      	pop	{r7, pc}
 800c11c:	40021000 	.word	0x40021000
 800c120:	08010458 	.word	0x08010458

0800c124 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b086      	sub	sp, #24
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800c12c:	2300      	movs	r3, #0
 800c12e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800c130:	4b2a      	ldr	r3, [pc, #168]	; (800c1dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d003      	beq.n	800c144 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800c13c:	f7ff f9b6 	bl	800b4ac <HAL_PWREx_GetVoltageRange>
 800c140:	6178      	str	r0, [r7, #20]
 800c142:	e014      	b.n	800c16e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800c144:	4b25      	ldr	r3, [pc, #148]	; (800c1dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c148:	4a24      	ldr	r2, [pc, #144]	; (800c1dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c14a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c14e:	6593      	str	r3, [r2, #88]	; 0x58
 800c150:	4b22      	ldr	r3, [pc, #136]	; (800c1dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c158:	60fb      	str	r3, [r7, #12]
 800c15a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800c15c:	f7ff f9a6 	bl	800b4ac <HAL_PWREx_GetVoltageRange>
 800c160:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800c162:	4b1e      	ldr	r3, [pc, #120]	; (800c1dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c166:	4a1d      	ldr	r2, [pc, #116]	; (800c1dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c16c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c174:	d10b      	bne.n	800c18e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2b80      	cmp	r3, #128	; 0x80
 800c17a:	d919      	bls.n	800c1b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2ba0      	cmp	r3, #160	; 0xa0
 800c180:	d902      	bls.n	800c188 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c182:	2302      	movs	r3, #2
 800c184:	613b      	str	r3, [r7, #16]
 800c186:	e013      	b.n	800c1b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c188:	2301      	movs	r3, #1
 800c18a:	613b      	str	r3, [r7, #16]
 800c18c:	e010      	b.n	800c1b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2b80      	cmp	r3, #128	; 0x80
 800c192:	d902      	bls.n	800c19a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800c194:	2303      	movs	r3, #3
 800c196:	613b      	str	r3, [r7, #16]
 800c198:	e00a      	b.n	800c1b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2b80      	cmp	r3, #128	; 0x80
 800c19e:	d102      	bne.n	800c1a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c1a0:	2302      	movs	r3, #2
 800c1a2:	613b      	str	r3, [r7, #16]
 800c1a4:	e004      	b.n	800c1b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2b70      	cmp	r3, #112	; 0x70
 800c1aa:	d101      	bne.n	800c1b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800c1b0:	4b0b      	ldr	r3, [pc, #44]	; (800c1e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	f023 0207 	bic.w	r2, r3, #7
 800c1b8:	4909      	ldr	r1, [pc, #36]	; (800c1e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	4313      	orrs	r3, r2
 800c1be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800c1c0:	4b07      	ldr	r3, [pc, #28]	; (800c1e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f003 0307 	and.w	r3, r3, #7
 800c1c8:	693a      	ldr	r2, [r7, #16]
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d001      	beq.n	800c1d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e000      	b.n	800c1d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800c1d2:	2300      	movs	r3, #0
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3718      	adds	r7, #24
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}
 800c1dc:	40021000 	.word	0x40021000
 800c1e0:	40022000 	.word	0x40022000

0800c1e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b086      	sub	sp, #24
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d031      	beq.n	800c264 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c204:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c208:	d01a      	beq.n	800c240 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800c20a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c20e:	d814      	bhi.n	800c23a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c210:	2b00      	cmp	r3, #0
 800c212:	d009      	beq.n	800c228 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800c214:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c218:	d10f      	bne.n	800c23a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800c21a:	4b5d      	ldr	r3, [pc, #372]	; (800c390 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c21c:	68db      	ldr	r3, [r3, #12]
 800c21e:	4a5c      	ldr	r2, [pc, #368]	; (800c390 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c224:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c226:	e00c      	b.n	800c242 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	3304      	adds	r3, #4
 800c22c:	2100      	movs	r1, #0
 800c22e:	4618      	mov	r0, r3
 800c230:	f000 fa22 	bl	800c678 <RCCEx_PLLSAI1_Config>
 800c234:	4603      	mov	r3, r0
 800c236:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c238:	e003      	b.n	800c242 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c23a:	2301      	movs	r3, #1
 800c23c:	74fb      	strb	r3, [r7, #19]
      break;
 800c23e:	e000      	b.n	800c242 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800c240:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c242:	7cfb      	ldrb	r3, [r7, #19]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d10b      	bne.n	800c260 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c248:	4b51      	ldr	r3, [pc, #324]	; (800c390 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c24a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c24e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c256:	494e      	ldr	r1, [pc, #312]	; (800c390 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c258:	4313      	orrs	r3, r2
 800c25a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800c25e:	e001      	b.n	800c264 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c260:	7cfb      	ldrb	r3, [r7, #19]
 800c262:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	f000 809e 	beq.w	800c3ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c272:	2300      	movs	r3, #0
 800c274:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c276:	4b46      	ldr	r3, [pc, #280]	; (800c390 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c27a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d101      	bne.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800c282:	2301      	movs	r3, #1
 800c284:	e000      	b.n	800c288 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800c286:	2300      	movs	r3, #0
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d00d      	beq.n	800c2a8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c28c:	4b40      	ldr	r3, [pc, #256]	; (800c390 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c28e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c290:	4a3f      	ldr	r2, [pc, #252]	; (800c390 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c296:	6593      	str	r3, [r2, #88]	; 0x58
 800c298:	4b3d      	ldr	r3, [pc, #244]	; (800c390 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c29a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c29c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2a0:	60bb      	str	r3, [r7, #8]
 800c2a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c2a8:	4b3a      	ldr	r3, [pc, #232]	; (800c394 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	4a39      	ldr	r2, [pc, #228]	; (800c394 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c2ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c2b4:	f7fe fc68 	bl	800ab88 <HAL_GetTick>
 800c2b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c2ba:	e009      	b.n	800c2d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c2bc:	f7fe fc64 	bl	800ab88 <HAL_GetTick>
 800c2c0:	4602      	mov	r2, r0
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	1ad3      	subs	r3, r2, r3
 800c2c6:	2b02      	cmp	r3, #2
 800c2c8:	d902      	bls.n	800c2d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800c2ca:	2303      	movs	r3, #3
 800c2cc:	74fb      	strb	r3, [r7, #19]
        break;
 800c2ce:	e005      	b.n	800c2dc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c2d0:	4b30      	ldr	r3, [pc, #192]	; (800c394 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d0ef      	beq.n	800c2bc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800c2dc:	7cfb      	ldrb	r3, [r7, #19]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d15a      	bne.n	800c398 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c2e2:	4b2b      	ldr	r3, [pc, #172]	; (800c390 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c2e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c2ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d01e      	beq.n	800c332 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2f8:	697a      	ldr	r2, [r7, #20]
 800c2fa:	429a      	cmp	r2, r3
 800c2fc:	d019      	beq.n	800c332 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c2fe:	4b24      	ldr	r3, [pc, #144]	; (800c390 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c308:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c30a:	4b21      	ldr	r3, [pc, #132]	; (800c390 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c30c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c310:	4a1f      	ldr	r2, [pc, #124]	; (800c390 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c312:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c316:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c31a:	4b1d      	ldr	r3, [pc, #116]	; (800c390 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c31c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c320:	4a1b      	ldr	r2, [pc, #108]	; (800c390 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c326:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c32a:	4a19      	ldr	r2, [pc, #100]	; (800c390 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	f003 0301 	and.w	r3, r3, #1
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d016      	beq.n	800c36a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c33c:	f7fe fc24 	bl	800ab88 <HAL_GetTick>
 800c340:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c342:	e00b      	b.n	800c35c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c344:	f7fe fc20 	bl	800ab88 <HAL_GetTick>
 800c348:	4602      	mov	r2, r0
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	1ad3      	subs	r3, r2, r3
 800c34e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c352:	4293      	cmp	r3, r2
 800c354:	d902      	bls.n	800c35c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800c356:	2303      	movs	r3, #3
 800c358:	74fb      	strb	r3, [r7, #19]
            break;
 800c35a:	e006      	b.n	800c36a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c35c:	4b0c      	ldr	r3, [pc, #48]	; (800c390 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c35e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c362:	f003 0302 	and.w	r3, r3, #2
 800c366:	2b00      	cmp	r3, #0
 800c368:	d0ec      	beq.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800c36a:	7cfb      	ldrb	r3, [r7, #19]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d10b      	bne.n	800c388 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c370:	4b07      	ldr	r3, [pc, #28]	; (800c390 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c376:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c37e:	4904      	ldr	r1, [pc, #16]	; (800c390 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c380:	4313      	orrs	r3, r2
 800c382:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800c386:	e009      	b.n	800c39c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c388:	7cfb      	ldrb	r3, [r7, #19]
 800c38a:	74bb      	strb	r3, [r7, #18]
 800c38c:	e006      	b.n	800c39c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800c38e:	bf00      	nop
 800c390:	40021000 	.word	0x40021000
 800c394:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c398:	7cfb      	ldrb	r3, [r7, #19]
 800c39a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c39c:	7c7b      	ldrb	r3, [r7, #17]
 800c39e:	2b01      	cmp	r3, #1
 800c3a0:	d105      	bne.n	800c3ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c3a2:	4b8d      	ldr	r3, [pc, #564]	; (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c3a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3a6:	4a8c      	ldr	r2, [pc, #560]	; (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c3a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c3ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	f003 0301 	and.w	r3, r3, #1
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d00a      	beq.n	800c3d0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c3ba:	4b87      	ldr	r3, [pc, #540]	; (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c3bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3c0:	f023 0203 	bic.w	r2, r3, #3
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6a1b      	ldr	r3, [r3, #32]
 800c3c8:	4983      	ldr	r1, [pc, #524]	; (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c3ca:	4313      	orrs	r3, r2
 800c3cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f003 0302 	and.w	r3, r3, #2
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d00a      	beq.n	800c3f2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c3dc:	4b7e      	ldr	r3, [pc, #504]	; (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c3de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3e2:	f023 020c 	bic.w	r2, r3, #12
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ea:	497b      	ldr	r1, [pc, #492]	; (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c3ec:	4313      	orrs	r3, r2
 800c3ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f003 0304 	and.w	r3, r3, #4
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d00a      	beq.n	800c414 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c3fe:	4b76      	ldr	r3, [pc, #472]	; (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c404:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c40c:	4972      	ldr	r1, [pc, #456]	; (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c40e:	4313      	orrs	r3, r2
 800c410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f003 0320 	and.w	r3, r3, #32
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d00a      	beq.n	800c436 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c420:	4b6d      	ldr	r3, [pc, #436]	; (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c426:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c42e:	496a      	ldr	r1, [pc, #424]	; (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c430:	4313      	orrs	r3, r2
 800c432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d00a      	beq.n	800c458 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c442:	4b65      	ldr	r3, [pc, #404]	; (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c448:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c450:	4961      	ldr	r1, [pc, #388]	; (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c452:	4313      	orrs	r3, r2
 800c454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c460:	2b00      	cmp	r3, #0
 800c462:	d00a      	beq.n	800c47a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c464:	4b5c      	ldr	r3, [pc, #368]	; (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c46a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c472:	4959      	ldr	r1, [pc, #356]	; (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c474:	4313      	orrs	r3, r2
 800c476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c482:	2b00      	cmp	r3, #0
 800c484:	d00a      	beq.n	800c49c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c486:	4b54      	ldr	r3, [pc, #336]	; (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c48c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c494:	4950      	ldr	r1, [pc, #320]	; (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c496:	4313      	orrs	r3, r2
 800c498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d00a      	beq.n	800c4be <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c4a8:	4b4b      	ldr	r3, [pc, #300]	; (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c4aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4b6:	4948      	ldr	r1, [pc, #288]	; (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d00a      	beq.n	800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c4ca:	4b43      	ldr	r3, [pc, #268]	; (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c4cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4d8:	493f      	ldr	r1, [pc, #252]	; (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c4da:	4313      	orrs	r3, r2
 800c4dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d028      	beq.n	800c53e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c4ec:	4b3a      	ldr	r3, [pc, #232]	; (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c4ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4fa:	4937      	ldr	r1, [pc, #220]	; (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c4fc:	4313      	orrs	r3, r2
 800c4fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c506:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c50a:	d106      	bne.n	800c51a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c50c:	4b32      	ldr	r3, [pc, #200]	; (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c50e:	68db      	ldr	r3, [r3, #12]
 800c510:	4a31      	ldr	r2, [pc, #196]	; (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c512:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c516:	60d3      	str	r3, [r2, #12]
 800c518:	e011      	b.n	800c53e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c51e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c522:	d10c      	bne.n	800c53e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	3304      	adds	r3, #4
 800c528:	2101      	movs	r1, #1
 800c52a:	4618      	mov	r0, r3
 800c52c:	f000 f8a4 	bl	800c678 <RCCEx_PLLSAI1_Config>
 800c530:	4603      	mov	r3, r0
 800c532:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800c534:	7cfb      	ldrb	r3, [r7, #19]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d001      	beq.n	800c53e <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800c53a:	7cfb      	ldrb	r3, [r7, #19]
 800c53c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c546:	2b00      	cmp	r3, #0
 800c548:	d028      	beq.n	800c59c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c54a:	4b23      	ldr	r3, [pc, #140]	; (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c54c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c550:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c558:	491f      	ldr	r1, [pc, #124]	; (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c55a:	4313      	orrs	r3, r2
 800c55c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c564:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c568:	d106      	bne.n	800c578 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c56a:	4b1b      	ldr	r3, [pc, #108]	; (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c56c:	68db      	ldr	r3, [r3, #12]
 800c56e:	4a1a      	ldr	r2, [pc, #104]	; (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c570:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c574:	60d3      	str	r3, [r2, #12]
 800c576:	e011      	b.n	800c59c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c57c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c580:	d10c      	bne.n	800c59c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	3304      	adds	r3, #4
 800c586:	2101      	movs	r1, #1
 800c588:	4618      	mov	r0, r3
 800c58a:	f000 f875 	bl	800c678 <RCCEx_PLLSAI1_Config>
 800c58e:	4603      	mov	r3, r0
 800c590:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c592:	7cfb      	ldrb	r3, [r7, #19]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d001      	beq.n	800c59c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800c598:	7cfb      	ldrb	r3, [r7, #19]
 800c59a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d02b      	beq.n	800c600 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c5a8:	4b0b      	ldr	r3, [pc, #44]	; (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c5aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5b6:	4908      	ldr	r1, [pc, #32]	; (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c5b8:	4313      	orrs	r3, r2
 800c5ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5c6:	d109      	bne.n	800c5dc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c5c8:	4b03      	ldr	r3, [pc, #12]	; (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c5ca:	68db      	ldr	r3, [r3, #12]
 800c5cc:	4a02      	ldr	r2, [pc, #8]	; (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800c5ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c5d2:	60d3      	str	r3, [r2, #12]
 800c5d4:	e014      	b.n	800c600 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800c5d6:	bf00      	nop
 800c5d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c5e4:	d10c      	bne.n	800c600 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	3304      	adds	r3, #4
 800c5ea:	2101      	movs	r1, #1
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f000 f843 	bl	800c678 <RCCEx_PLLSAI1_Config>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c5f6:	7cfb      	ldrb	r3, [r7, #19]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d001      	beq.n	800c600 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 800c5fc:	7cfb      	ldrb	r3, [r7, #19]
 800c5fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d01c      	beq.n	800c646 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c60c:	4b19      	ldr	r3, [pc, #100]	; (800c674 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c60e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c612:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c61a:	4916      	ldr	r1, [pc, #88]	; (800c674 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c61c:	4313      	orrs	r3, r2
 800c61e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c626:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c62a:	d10c      	bne.n	800c646 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	3304      	adds	r3, #4
 800c630:	2102      	movs	r1, #2
 800c632:	4618      	mov	r0, r3
 800c634:	f000 f820 	bl	800c678 <RCCEx_PLLSAI1_Config>
 800c638:	4603      	mov	r3, r0
 800c63a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c63c:	7cfb      	ldrb	r3, [r7, #19]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d001      	beq.n	800c646 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 800c642:	7cfb      	ldrb	r3, [r7, #19]
 800c644:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d00a      	beq.n	800c668 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c652:	4b08      	ldr	r3, [pc, #32]	; (800c674 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c658:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c660:	4904      	ldr	r1, [pc, #16]	; (800c674 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c662:	4313      	orrs	r3, r2
 800c664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800c668:	7cbb      	ldrb	r3, [r7, #18]
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3718      	adds	r7, #24
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}
 800c672:	bf00      	nop
 800c674:	40021000 	.word	0x40021000

0800c678 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b084      	sub	sp, #16
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c682:	2300      	movs	r3, #0
 800c684:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c686:	4b74      	ldr	r3, [pc, #464]	; (800c858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c688:	68db      	ldr	r3, [r3, #12]
 800c68a:	f003 0303 	and.w	r3, r3, #3
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d018      	beq.n	800c6c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800c692:	4b71      	ldr	r3, [pc, #452]	; (800c858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c694:	68db      	ldr	r3, [r3, #12]
 800c696:	f003 0203 	and.w	r2, r3, #3
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d10d      	bne.n	800c6be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
       ||
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d009      	beq.n	800c6be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800c6aa:	4b6b      	ldr	r3, [pc, #428]	; (800c858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c6ac:	68db      	ldr	r3, [r3, #12]
 800c6ae:	091b      	lsrs	r3, r3, #4
 800c6b0:	f003 0307 	and.w	r3, r3, #7
 800c6b4:	1c5a      	adds	r2, r3, #1
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	685b      	ldr	r3, [r3, #4]
       ||
 800c6ba:	429a      	cmp	r2, r3
 800c6bc:	d047      	beq.n	800c74e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800c6be:	2301      	movs	r3, #1
 800c6c0:	73fb      	strb	r3, [r7, #15]
 800c6c2:	e044      	b.n	800c74e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	2b03      	cmp	r3, #3
 800c6ca:	d018      	beq.n	800c6fe <RCCEx_PLLSAI1_Config+0x86>
 800c6cc:	2b03      	cmp	r3, #3
 800c6ce:	d825      	bhi.n	800c71c <RCCEx_PLLSAI1_Config+0xa4>
 800c6d0:	2b01      	cmp	r3, #1
 800c6d2:	d002      	beq.n	800c6da <RCCEx_PLLSAI1_Config+0x62>
 800c6d4:	2b02      	cmp	r3, #2
 800c6d6:	d009      	beq.n	800c6ec <RCCEx_PLLSAI1_Config+0x74>
 800c6d8:	e020      	b.n	800c71c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c6da:	4b5f      	ldr	r3, [pc, #380]	; (800c858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f003 0302 	and.w	r3, r3, #2
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d11d      	bne.n	800c722 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c6ea:	e01a      	b.n	800c722 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c6ec:	4b5a      	ldr	r3, [pc, #360]	; (800c858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d116      	bne.n	800c726 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c6fc:	e013      	b.n	800c726 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800c6fe:	4b56      	ldr	r3, [pc, #344]	; (800c858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c706:	2b00      	cmp	r3, #0
 800c708:	d10f      	bne.n	800c72a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c70a:	4b53      	ldr	r3, [pc, #332]	; (800c858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c712:	2b00      	cmp	r3, #0
 800c714:	d109      	bne.n	800c72a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800c716:	2301      	movs	r3, #1
 800c718:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c71a:	e006      	b.n	800c72a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800c71c:	2301      	movs	r3, #1
 800c71e:	73fb      	strb	r3, [r7, #15]
      break;
 800c720:	e004      	b.n	800c72c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c722:	bf00      	nop
 800c724:	e002      	b.n	800c72c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c726:	bf00      	nop
 800c728:	e000      	b.n	800c72c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c72a:	bf00      	nop
    }

    if(status == HAL_OK)
 800c72c:	7bfb      	ldrb	r3, [r7, #15]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d10d      	bne.n	800c74e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800c732:	4b49      	ldr	r3, [pc, #292]	; (800c858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c734:	68db      	ldr	r3, [r3, #12]
 800c736:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6819      	ldr	r1, [r3, #0]
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	3b01      	subs	r3, #1
 800c744:	011b      	lsls	r3, r3, #4
 800c746:	430b      	orrs	r3, r1
 800c748:	4943      	ldr	r1, [pc, #268]	; (800c858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c74a:	4313      	orrs	r3, r2
 800c74c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800c74e:	7bfb      	ldrb	r3, [r7, #15]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d17c      	bne.n	800c84e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800c754:	4b40      	ldr	r3, [pc, #256]	; (800c858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4a3f      	ldr	r2, [pc, #252]	; (800c858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c75a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c75e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c760:	f7fe fa12 	bl	800ab88 <HAL_GetTick>
 800c764:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c766:	e009      	b.n	800c77c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c768:	f7fe fa0e 	bl	800ab88 <HAL_GetTick>
 800c76c:	4602      	mov	r2, r0
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	1ad3      	subs	r3, r2, r3
 800c772:	2b02      	cmp	r3, #2
 800c774:	d902      	bls.n	800c77c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800c776:	2303      	movs	r3, #3
 800c778:	73fb      	strb	r3, [r7, #15]
        break;
 800c77a:	e005      	b.n	800c788 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c77c:	4b36      	ldr	r3, [pc, #216]	; (800c858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c784:	2b00      	cmp	r3, #0
 800c786:	d1ef      	bne.n	800c768 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800c788:	7bfb      	ldrb	r3, [r7, #15]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d15f      	bne.n	800c84e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d110      	bne.n	800c7b6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c794:	4b30      	ldr	r3, [pc, #192]	; (800c858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c796:	691b      	ldr	r3, [r3, #16]
 800c798:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800c79c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c7a0:	687a      	ldr	r2, [r7, #4]
 800c7a2:	6892      	ldr	r2, [r2, #8]
 800c7a4:	0211      	lsls	r1, r2, #8
 800c7a6:	687a      	ldr	r2, [r7, #4]
 800c7a8:	68d2      	ldr	r2, [r2, #12]
 800c7aa:	06d2      	lsls	r2, r2, #27
 800c7ac:	430a      	orrs	r2, r1
 800c7ae:	492a      	ldr	r1, [pc, #168]	; (800c858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c7b0:	4313      	orrs	r3, r2
 800c7b2:	610b      	str	r3, [r1, #16]
 800c7b4:	e027      	b.n	800c806 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	2b01      	cmp	r3, #1
 800c7ba:	d112      	bne.n	800c7e2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c7bc:	4b26      	ldr	r3, [pc, #152]	; (800c858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c7be:	691b      	ldr	r3, [r3, #16]
 800c7c0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800c7c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c7c8:	687a      	ldr	r2, [r7, #4]
 800c7ca:	6892      	ldr	r2, [r2, #8]
 800c7cc:	0211      	lsls	r1, r2, #8
 800c7ce:	687a      	ldr	r2, [r7, #4]
 800c7d0:	6912      	ldr	r2, [r2, #16]
 800c7d2:	0852      	lsrs	r2, r2, #1
 800c7d4:	3a01      	subs	r2, #1
 800c7d6:	0552      	lsls	r2, r2, #21
 800c7d8:	430a      	orrs	r2, r1
 800c7da:	491f      	ldr	r1, [pc, #124]	; (800c858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c7dc:	4313      	orrs	r3, r2
 800c7de:	610b      	str	r3, [r1, #16]
 800c7e0:	e011      	b.n	800c806 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c7e2:	4b1d      	ldr	r3, [pc, #116]	; (800c858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c7e4:	691b      	ldr	r3, [r3, #16]
 800c7e6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800c7ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c7ee:	687a      	ldr	r2, [r7, #4]
 800c7f0:	6892      	ldr	r2, [r2, #8]
 800c7f2:	0211      	lsls	r1, r2, #8
 800c7f4:	687a      	ldr	r2, [r7, #4]
 800c7f6:	6952      	ldr	r2, [r2, #20]
 800c7f8:	0852      	lsrs	r2, r2, #1
 800c7fa:	3a01      	subs	r2, #1
 800c7fc:	0652      	lsls	r2, r2, #25
 800c7fe:	430a      	orrs	r2, r1
 800c800:	4915      	ldr	r1, [pc, #84]	; (800c858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c802:	4313      	orrs	r3, r2
 800c804:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800c806:	4b14      	ldr	r3, [pc, #80]	; (800c858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4a13      	ldr	r2, [pc, #76]	; (800c858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c80c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c810:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c812:	f7fe f9b9 	bl	800ab88 <HAL_GetTick>
 800c816:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c818:	e009      	b.n	800c82e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c81a:	f7fe f9b5 	bl	800ab88 <HAL_GetTick>
 800c81e:	4602      	mov	r2, r0
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	1ad3      	subs	r3, r2, r3
 800c824:	2b02      	cmp	r3, #2
 800c826:	d902      	bls.n	800c82e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800c828:	2303      	movs	r3, #3
 800c82a:	73fb      	strb	r3, [r7, #15]
          break;
 800c82c:	e005      	b.n	800c83a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c82e:	4b0a      	ldr	r3, [pc, #40]	; (800c858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c836:	2b00      	cmp	r3, #0
 800c838:	d0ef      	beq.n	800c81a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800c83a:	7bfb      	ldrb	r3, [r7, #15]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d106      	bne.n	800c84e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800c840:	4b05      	ldr	r3, [pc, #20]	; (800c858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c842:	691a      	ldr	r2, [r3, #16]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	699b      	ldr	r3, [r3, #24]
 800c848:	4903      	ldr	r1, [pc, #12]	; (800c858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c84a:	4313      	orrs	r3, r2
 800c84c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800c84e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c850:	4618      	mov	r0, r3
 800c852:	3710      	adds	r7, #16
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}
 800c858:	40021000 	.word	0x40021000

0800c85c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b084      	sub	sp, #16
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d101      	bne.n	800c86e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c86a:	2301      	movs	r3, #1
 800c86c:	e095      	b.n	800c99a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c872:	2b00      	cmp	r3, #0
 800c874:	d108      	bne.n	800c888 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	685b      	ldr	r3, [r3, #4]
 800c87a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c87e:	d009      	beq.n	800c894 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2200      	movs	r2, #0
 800c884:	61da      	str	r2, [r3, #28]
 800c886:	e005      	b.n	800c894 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2200      	movs	r2, #0
 800c88c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2200      	movs	r2, #0
 800c892:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2200      	movs	r2, #0
 800c898:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c8a0:	b2db      	uxtb	r3, r3
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d106      	bne.n	800c8b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f7f6 fa2a 	bl	8002d08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2202      	movs	r2, #2
 800c8b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	681a      	ldr	r2, [r3, #0]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c8ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	68db      	ldr	r3, [r3, #12]
 800c8d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c8d4:	d902      	bls.n	800c8dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	60fb      	str	r3, [r7, #12]
 800c8da:	e002      	b.n	800c8e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c8dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c8e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	68db      	ldr	r3, [r3, #12]
 800c8e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c8ea:	d007      	beq.n	800c8fc <HAL_SPI_Init+0xa0>
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	68db      	ldr	r3, [r3, #12]
 800c8f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c8f4:	d002      	beq.n	800c8fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	689b      	ldr	r3, [r3, #8]
 800c908:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c90c:	431a      	orrs	r2, r3
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	691b      	ldr	r3, [r3, #16]
 800c912:	f003 0302 	and.w	r3, r3, #2
 800c916:	431a      	orrs	r2, r3
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	695b      	ldr	r3, [r3, #20]
 800c91c:	f003 0301 	and.w	r3, r3, #1
 800c920:	431a      	orrs	r2, r3
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	699b      	ldr	r3, [r3, #24]
 800c926:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c92a:	431a      	orrs	r2, r3
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	69db      	ldr	r3, [r3, #28]
 800c930:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c934:	431a      	orrs	r2, r3
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	6a1b      	ldr	r3, [r3, #32]
 800c93a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c93e:	ea42 0103 	orr.w	r1, r2, r3
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c946:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	430a      	orrs	r2, r1
 800c950:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	699b      	ldr	r3, [r3, #24]
 800c956:	0c1b      	lsrs	r3, r3, #16
 800c958:	f003 0204 	and.w	r2, r3, #4
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c960:	f003 0310 	and.w	r3, r3, #16
 800c964:	431a      	orrs	r2, r3
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c96a:	f003 0308 	and.w	r3, r3, #8
 800c96e:	431a      	orrs	r2, r3
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	68db      	ldr	r3, [r3, #12]
 800c974:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c978:	ea42 0103 	orr.w	r1, r2, r3
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	430a      	orrs	r2, r1
 800c988:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2200      	movs	r2, #0
 800c98e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2201      	movs	r2, #1
 800c994:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c998:	2300      	movs	r3, #0
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3710      	adds	r7, #16
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}

0800c9a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c9a2:	b580      	push	{r7, lr}
 800c9a4:	b088      	sub	sp, #32
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	60f8      	str	r0, [r7, #12]
 800c9aa:	60b9      	str	r1, [r7, #8]
 800c9ac:	603b      	str	r3, [r7, #0]
 800c9ae:	4613      	mov	r3, r2
 800c9b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c9bc:	2b01      	cmp	r3, #1
 800c9be:	d101      	bne.n	800c9c4 <HAL_SPI_Transmit+0x22>
 800c9c0:	2302      	movs	r3, #2
 800c9c2:	e158      	b.n	800cc76 <HAL_SPI_Transmit+0x2d4>
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	2201      	movs	r2, #1
 800c9c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c9cc:	f7fe f8dc 	bl	800ab88 <HAL_GetTick>
 800c9d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c9d2:	88fb      	ldrh	r3, [r7, #6]
 800c9d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c9dc:	b2db      	uxtb	r3, r3
 800c9de:	2b01      	cmp	r3, #1
 800c9e0:	d002      	beq.n	800c9e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c9e2:	2302      	movs	r3, #2
 800c9e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c9e6:	e13d      	b.n	800cc64 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d002      	beq.n	800c9f4 <HAL_SPI_Transmit+0x52>
 800c9ee:	88fb      	ldrh	r3, [r7, #6]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d102      	bne.n	800c9fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c9f8:	e134      	b.n	800cc64 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	2203      	movs	r2, #3
 800c9fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	2200      	movs	r2, #0
 800ca06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	68ba      	ldr	r2, [r7, #8]
 800ca0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	88fa      	ldrh	r2, [r7, #6]
 800ca12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	88fa      	ldrh	r2, [r7, #6]
 800ca18:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	2200      	movs	r2, #0
 800ca24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2200      	movs	r2, #0
 800ca34:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	689b      	ldr	r3, [r3, #8]
 800ca40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca44:	d10f      	bne.n	800ca66 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	681a      	ldr	r2, [r3, #0]
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ca54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	681a      	ldr	r2, [r3, #0]
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ca64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca70:	2b40      	cmp	r3, #64	; 0x40
 800ca72:	d007      	beq.n	800ca84 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	681a      	ldr	r2, [r3, #0]
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ca82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	68db      	ldr	r3, [r3, #12]
 800ca88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ca8c:	d94b      	bls.n	800cb26 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d002      	beq.n	800ca9c <HAL_SPI_Transmit+0xfa>
 800ca96:	8afb      	ldrh	r3, [r7, #22]
 800ca98:	2b01      	cmp	r3, #1
 800ca9a:	d13e      	bne.n	800cb1a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caa0:	881a      	ldrh	r2, [r3, #0]
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caac:	1c9a      	adds	r2, r3, #2
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cab6:	b29b      	uxth	r3, r3
 800cab8:	3b01      	subs	r3, #1
 800caba:	b29a      	uxth	r2, r3
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800cac0:	e02b      	b.n	800cb1a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	689b      	ldr	r3, [r3, #8]
 800cac8:	f003 0302 	and.w	r3, r3, #2
 800cacc:	2b02      	cmp	r3, #2
 800cace:	d112      	bne.n	800caf6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cad4:	881a      	ldrh	r2, [r3, #0]
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cae0:	1c9a      	adds	r2, r3, #2
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800caea:	b29b      	uxth	r3, r3
 800caec:	3b01      	subs	r3, #1
 800caee:	b29a      	uxth	r2, r3
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800caf4:	e011      	b.n	800cb1a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800caf6:	f7fe f847 	bl	800ab88 <HAL_GetTick>
 800cafa:	4602      	mov	r2, r0
 800cafc:	69bb      	ldr	r3, [r7, #24]
 800cafe:	1ad3      	subs	r3, r2, r3
 800cb00:	683a      	ldr	r2, [r7, #0]
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d803      	bhi.n	800cb0e <HAL_SPI_Transmit+0x16c>
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb0c:	d102      	bne.n	800cb14 <HAL_SPI_Transmit+0x172>
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d102      	bne.n	800cb1a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800cb14:	2303      	movs	r3, #3
 800cb16:	77fb      	strb	r3, [r7, #31]
          goto error;
 800cb18:	e0a4      	b.n	800cc64 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cb1e:	b29b      	uxth	r3, r3
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d1ce      	bne.n	800cac2 <HAL_SPI_Transmit+0x120>
 800cb24:	e07c      	b.n	800cc20 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	685b      	ldr	r3, [r3, #4]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d002      	beq.n	800cb34 <HAL_SPI_Transmit+0x192>
 800cb2e:	8afb      	ldrh	r3, [r7, #22]
 800cb30:	2b01      	cmp	r3, #1
 800cb32:	d170      	bne.n	800cc16 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cb38:	b29b      	uxth	r3, r3
 800cb3a:	2b01      	cmp	r3, #1
 800cb3c:	d912      	bls.n	800cb64 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb42:	881a      	ldrh	r2, [r3, #0]
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb4e:	1c9a      	adds	r2, r3, #2
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cb58:	b29b      	uxth	r3, r3
 800cb5a:	3b02      	subs	r3, #2
 800cb5c:	b29a      	uxth	r2, r3
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cb62:	e058      	b.n	800cc16 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	330c      	adds	r3, #12
 800cb6e:	7812      	ldrb	r2, [r2, #0]
 800cb70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb76:	1c5a      	adds	r2, r3, #1
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cb80:	b29b      	uxth	r3, r3
 800cb82:	3b01      	subs	r3, #1
 800cb84:	b29a      	uxth	r2, r3
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800cb8a:	e044      	b.n	800cc16 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	689b      	ldr	r3, [r3, #8]
 800cb92:	f003 0302 	and.w	r3, r3, #2
 800cb96:	2b02      	cmp	r3, #2
 800cb98:	d12b      	bne.n	800cbf2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cb9e:	b29b      	uxth	r3, r3
 800cba0:	2b01      	cmp	r3, #1
 800cba2:	d912      	bls.n	800cbca <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cba8:	881a      	ldrh	r2, [r3, #0]
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbb4:	1c9a      	adds	r2, r3, #2
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cbbe:	b29b      	uxth	r3, r3
 800cbc0:	3b02      	subs	r3, #2
 800cbc2:	b29a      	uxth	r2, r3
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cbc8:	e025      	b.n	800cc16 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	330c      	adds	r3, #12
 800cbd4:	7812      	ldrb	r2, [r2, #0]
 800cbd6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbdc:	1c5a      	adds	r2, r3, #1
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cbe6:	b29b      	uxth	r3, r3
 800cbe8:	3b01      	subs	r3, #1
 800cbea:	b29a      	uxth	r2, r3
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cbf0:	e011      	b.n	800cc16 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cbf2:	f7fd ffc9 	bl	800ab88 <HAL_GetTick>
 800cbf6:	4602      	mov	r2, r0
 800cbf8:	69bb      	ldr	r3, [r7, #24]
 800cbfa:	1ad3      	subs	r3, r2, r3
 800cbfc:	683a      	ldr	r2, [r7, #0]
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d803      	bhi.n	800cc0a <HAL_SPI_Transmit+0x268>
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc08:	d102      	bne.n	800cc10 <HAL_SPI_Transmit+0x26e>
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d102      	bne.n	800cc16 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800cc10:	2303      	movs	r3, #3
 800cc12:	77fb      	strb	r3, [r7, #31]
          goto error;
 800cc14:	e026      	b.n	800cc64 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d1b5      	bne.n	800cb8c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cc20:	69ba      	ldr	r2, [r7, #24]
 800cc22:	6839      	ldr	r1, [r7, #0]
 800cc24:	68f8      	ldr	r0, [r7, #12]
 800cc26:	f000 fce3 	bl	800d5f0 <SPI_EndRxTxTransaction>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d002      	beq.n	800cc36 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	2220      	movs	r2, #32
 800cc34:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	689b      	ldr	r3, [r3, #8]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d10a      	bne.n	800cc54 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cc3e:	2300      	movs	r3, #0
 800cc40:	613b      	str	r3, [r7, #16]
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	68db      	ldr	r3, [r3, #12]
 800cc48:	613b      	str	r3, [r7, #16]
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	689b      	ldr	r3, [r3, #8]
 800cc50:	613b      	str	r3, [r7, #16]
 800cc52:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d002      	beq.n	800cc62 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	77fb      	strb	r3, [r7, #31]
 800cc60:	e000      	b.n	800cc64 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800cc62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	2201      	movs	r2, #1
 800cc68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800cc74:	7ffb      	ldrb	r3, [r7, #31]
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3720      	adds	r7, #32
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}

0800cc7e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cc7e:	b580      	push	{r7, lr}
 800cc80:	b088      	sub	sp, #32
 800cc82:	af02      	add	r7, sp, #8
 800cc84:	60f8      	str	r0, [r7, #12]
 800cc86:	60b9      	str	r1, [r7, #8]
 800cc88:	603b      	str	r3, [r7, #0]
 800cc8a:	4613      	mov	r3, r2
 800cc8c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	685b      	ldr	r3, [r3, #4]
 800cc96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cc9a:	d112      	bne.n	800ccc2 <HAL_SPI_Receive+0x44>
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	689b      	ldr	r3, [r3, #8]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d10e      	bne.n	800ccc2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	2204      	movs	r2, #4
 800cca8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ccac:	88fa      	ldrh	r2, [r7, #6]
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	9300      	str	r3, [sp, #0]
 800ccb2:	4613      	mov	r3, r2
 800ccb4:	68ba      	ldr	r2, [r7, #8]
 800ccb6:	68b9      	ldr	r1, [r7, #8]
 800ccb8:	68f8      	ldr	r0, [r7, #12]
 800ccba:	f000 f910 	bl	800cede <HAL_SPI_TransmitReceive>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	e109      	b.n	800ced6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ccc8:	2b01      	cmp	r3, #1
 800ccca:	d101      	bne.n	800ccd0 <HAL_SPI_Receive+0x52>
 800cccc:	2302      	movs	r3, #2
 800ccce:	e102      	b.n	800ced6 <HAL_SPI_Receive+0x258>
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ccd8:	f7fd ff56 	bl	800ab88 <HAL_GetTick>
 800ccdc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cce4:	b2db      	uxtb	r3, r3
 800cce6:	2b01      	cmp	r3, #1
 800cce8:	d002      	beq.n	800ccf0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800ccea:	2302      	movs	r3, #2
 800ccec:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ccee:	e0e9      	b.n	800cec4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d002      	beq.n	800ccfc <HAL_SPI_Receive+0x7e>
 800ccf6:	88fb      	ldrh	r3, [r7, #6]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d102      	bne.n	800cd02 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cd00:	e0e0      	b.n	800cec4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	2204      	movs	r2, #4
 800cd06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	68ba      	ldr	r2, [r7, #8]
 800cd14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	88fa      	ldrh	r2, [r7, #6]
 800cd1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	88fa      	ldrh	r2, [r7, #6]
 800cd22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	2200      	movs	r2, #0
 800cd36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	2200      	movs	r2, #0
 800cd42:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	68db      	ldr	r3, [r3, #12]
 800cd48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cd4c:	d908      	bls.n	800cd60 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	685a      	ldr	r2, [r3, #4]
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cd5c:	605a      	str	r2, [r3, #4]
 800cd5e:	e007      	b.n	800cd70 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	685a      	ldr	r2, [r3, #4]
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cd6e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	689b      	ldr	r3, [r3, #8]
 800cd74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd78:	d10f      	bne.n	800cd9a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	681a      	ldr	r2, [r3, #0]
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cd88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	681a      	ldr	r2, [r3, #0]
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cd98:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cda4:	2b40      	cmp	r3, #64	; 0x40
 800cda6:	d007      	beq.n	800cdb8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	681a      	ldr	r2, [r3, #0]
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cdb6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	68db      	ldr	r3, [r3, #12]
 800cdbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cdc0:	d867      	bhi.n	800ce92 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800cdc2:	e030      	b.n	800ce26 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	689b      	ldr	r3, [r3, #8]
 800cdca:	f003 0301 	and.w	r3, r3, #1
 800cdce:	2b01      	cmp	r3, #1
 800cdd0:	d117      	bne.n	800ce02 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	f103 020c 	add.w	r2, r3, #12
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdde:	7812      	ldrb	r2, [r2, #0]
 800cde0:	b2d2      	uxtb	r2, r2
 800cde2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cde8:	1c5a      	adds	r2, r3, #1
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cdf4:	b29b      	uxth	r3, r3
 800cdf6:	3b01      	subs	r3, #1
 800cdf8:	b29a      	uxth	r2, r3
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800ce00:	e011      	b.n	800ce26 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ce02:	f7fd fec1 	bl	800ab88 <HAL_GetTick>
 800ce06:	4602      	mov	r2, r0
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	1ad3      	subs	r3, r2, r3
 800ce0c:	683a      	ldr	r2, [r7, #0]
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d803      	bhi.n	800ce1a <HAL_SPI_Receive+0x19c>
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce18:	d102      	bne.n	800ce20 <HAL_SPI_Receive+0x1a2>
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d102      	bne.n	800ce26 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800ce20:	2303      	movs	r3, #3
 800ce22:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ce24:	e04e      	b.n	800cec4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ce2c:	b29b      	uxth	r3, r3
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d1c8      	bne.n	800cdc4 <HAL_SPI_Receive+0x146>
 800ce32:	e034      	b.n	800ce9e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	689b      	ldr	r3, [r3, #8]
 800ce3a:	f003 0301 	and.w	r3, r3, #1
 800ce3e:	2b01      	cmp	r3, #1
 800ce40:	d115      	bne.n	800ce6e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	68da      	ldr	r2, [r3, #12]
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce4c:	b292      	uxth	r2, r2
 800ce4e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce54:	1c9a      	adds	r2, r3, #2
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ce60:	b29b      	uxth	r3, r3
 800ce62:	3b01      	subs	r3, #1
 800ce64:	b29a      	uxth	r2, r3
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800ce6c:	e011      	b.n	800ce92 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ce6e:	f7fd fe8b 	bl	800ab88 <HAL_GetTick>
 800ce72:	4602      	mov	r2, r0
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	1ad3      	subs	r3, r2, r3
 800ce78:	683a      	ldr	r2, [r7, #0]
 800ce7a:	429a      	cmp	r2, r3
 800ce7c:	d803      	bhi.n	800ce86 <HAL_SPI_Receive+0x208>
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce84:	d102      	bne.n	800ce8c <HAL_SPI_Receive+0x20e>
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d102      	bne.n	800ce92 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800ce8c:	2303      	movs	r3, #3
 800ce8e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ce90:	e018      	b.n	800cec4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ce98:	b29b      	uxth	r3, r3
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d1ca      	bne.n	800ce34 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ce9e:	693a      	ldr	r2, [r7, #16]
 800cea0:	6839      	ldr	r1, [r7, #0]
 800cea2:	68f8      	ldr	r0, [r7, #12]
 800cea4:	f000 fb4c 	bl	800d540 <SPI_EndRxTransaction>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d002      	beq.n	800ceb4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2220      	movs	r2, #32
 800ceb2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d002      	beq.n	800cec2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800cebc:	2301      	movs	r3, #1
 800cebe:	75fb      	strb	r3, [r7, #23]
 800cec0:	e000      	b.n	800cec4 <HAL_SPI_Receive+0x246>
  }

error :
 800cec2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	2201      	movs	r2, #1
 800cec8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2200      	movs	r2, #0
 800ced0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ced4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3718      	adds	r7, #24
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}

0800cede <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800cede:	b580      	push	{r7, lr}
 800cee0:	b08a      	sub	sp, #40	; 0x28
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	60f8      	str	r0, [r7, #12]
 800cee6:	60b9      	str	r1, [r7, #8]
 800cee8:	607a      	str	r2, [r7, #4]
 800ceea:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ceec:	2301      	movs	r3, #1
 800ceee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800cef0:	2300      	movs	r3, #0
 800cef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800cefc:	2b01      	cmp	r3, #1
 800cefe:	d101      	bne.n	800cf04 <HAL_SPI_TransmitReceive+0x26>
 800cf00:	2302      	movs	r3, #2
 800cf02:	e1fb      	b.n	800d2fc <HAL_SPI_TransmitReceive+0x41e>
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	2201      	movs	r2, #1
 800cf08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cf0c:	f7fd fe3c 	bl	800ab88 <HAL_GetTick>
 800cf10:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cf18:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800cf20:	887b      	ldrh	r3, [r7, #2]
 800cf22:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800cf24:	887b      	ldrh	r3, [r7, #2]
 800cf26:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800cf28:	7efb      	ldrb	r3, [r7, #27]
 800cf2a:	2b01      	cmp	r3, #1
 800cf2c:	d00e      	beq.n	800cf4c <HAL_SPI_TransmitReceive+0x6e>
 800cf2e:	697b      	ldr	r3, [r7, #20]
 800cf30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cf34:	d106      	bne.n	800cf44 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	689b      	ldr	r3, [r3, #8]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d102      	bne.n	800cf44 <HAL_SPI_TransmitReceive+0x66>
 800cf3e:	7efb      	ldrb	r3, [r7, #27]
 800cf40:	2b04      	cmp	r3, #4
 800cf42:	d003      	beq.n	800cf4c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800cf44:	2302      	movs	r3, #2
 800cf46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800cf4a:	e1cd      	b.n	800d2e8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d005      	beq.n	800cf5e <HAL_SPI_TransmitReceive+0x80>
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d002      	beq.n	800cf5e <HAL_SPI_TransmitReceive+0x80>
 800cf58:	887b      	ldrh	r3, [r7, #2]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d103      	bne.n	800cf66 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800cf5e:	2301      	movs	r3, #1
 800cf60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800cf64:	e1c0      	b.n	800d2e8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cf6c:	b2db      	uxtb	r3, r3
 800cf6e:	2b04      	cmp	r3, #4
 800cf70:	d003      	beq.n	800cf7a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	2205      	movs	r2, #5
 800cf76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	687a      	ldr	r2, [r7, #4]
 800cf84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	887a      	ldrh	r2, [r7, #2]
 800cf8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	887a      	ldrh	r2, [r7, #2]
 800cf92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	68ba      	ldr	r2, [r7, #8]
 800cf9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	887a      	ldrh	r2, [r7, #2]
 800cfa0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	887a      	ldrh	r2, [r7, #2]
 800cfa6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	68db      	ldr	r3, [r3, #12]
 800cfb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cfbc:	d802      	bhi.n	800cfc4 <HAL_SPI_TransmitReceive+0xe6>
 800cfbe:	8a3b      	ldrh	r3, [r7, #16]
 800cfc0:	2b01      	cmp	r3, #1
 800cfc2:	d908      	bls.n	800cfd6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	685a      	ldr	r2, [r3, #4]
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cfd2:	605a      	str	r2, [r3, #4]
 800cfd4:	e007      	b.n	800cfe6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	685a      	ldr	r2, [r3, #4]
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cfe4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cff0:	2b40      	cmp	r3, #64	; 0x40
 800cff2:	d007      	beq.n	800d004 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	681a      	ldr	r2, [r3, #0]
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d002:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	68db      	ldr	r3, [r3, #12]
 800d008:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d00c:	d97c      	bls.n	800d108 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	685b      	ldr	r3, [r3, #4]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d002      	beq.n	800d01c <HAL_SPI_TransmitReceive+0x13e>
 800d016:	8a7b      	ldrh	r3, [r7, #18]
 800d018:	2b01      	cmp	r3, #1
 800d01a:	d169      	bne.n	800d0f0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d020:	881a      	ldrh	r2, [r3, #0]
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d02c:	1c9a      	adds	r2, r3, #2
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d036:	b29b      	uxth	r3, r3
 800d038:	3b01      	subs	r3, #1
 800d03a:	b29a      	uxth	r2, r3
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d040:	e056      	b.n	800d0f0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	689b      	ldr	r3, [r3, #8]
 800d048:	f003 0302 	and.w	r3, r3, #2
 800d04c:	2b02      	cmp	r3, #2
 800d04e:	d11b      	bne.n	800d088 <HAL_SPI_TransmitReceive+0x1aa>
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d054:	b29b      	uxth	r3, r3
 800d056:	2b00      	cmp	r3, #0
 800d058:	d016      	beq.n	800d088 <HAL_SPI_TransmitReceive+0x1aa>
 800d05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d05c:	2b01      	cmp	r3, #1
 800d05e:	d113      	bne.n	800d088 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d064:	881a      	ldrh	r2, [r3, #0]
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d070:	1c9a      	adds	r2, r3, #2
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d07a:	b29b      	uxth	r3, r3
 800d07c:	3b01      	subs	r3, #1
 800d07e:	b29a      	uxth	r2, r3
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d084:	2300      	movs	r3, #0
 800d086:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	689b      	ldr	r3, [r3, #8]
 800d08e:	f003 0301 	and.w	r3, r3, #1
 800d092:	2b01      	cmp	r3, #1
 800d094:	d11c      	bne.n	800d0d0 <HAL_SPI_TransmitReceive+0x1f2>
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d09c:	b29b      	uxth	r3, r3
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d016      	beq.n	800d0d0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	68da      	ldr	r2, [r3, #12]
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0ac:	b292      	uxth	r2, r2
 800d0ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0b4:	1c9a      	adds	r2, r3, #2
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d0c0:	b29b      	uxth	r3, r3
 800d0c2:	3b01      	subs	r3, #1
 800d0c4:	b29a      	uxth	r2, r3
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d0cc:	2301      	movs	r3, #1
 800d0ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d0d0:	f7fd fd5a 	bl	800ab88 <HAL_GetTick>
 800d0d4:	4602      	mov	r2, r0
 800d0d6:	69fb      	ldr	r3, [r7, #28]
 800d0d8:	1ad3      	subs	r3, r2, r3
 800d0da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d807      	bhi.n	800d0f0 <HAL_SPI_TransmitReceive+0x212>
 800d0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0e6:	d003      	beq.n	800d0f0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800d0e8:	2303      	movs	r3, #3
 800d0ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800d0ee:	e0fb      	b.n	800d2e8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d0f4:	b29b      	uxth	r3, r3
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d1a3      	bne.n	800d042 <HAL_SPI_TransmitReceive+0x164>
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d100:	b29b      	uxth	r3, r3
 800d102:	2b00      	cmp	r3, #0
 800d104:	d19d      	bne.n	800d042 <HAL_SPI_TransmitReceive+0x164>
 800d106:	e0df      	b.n	800d2c8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	685b      	ldr	r3, [r3, #4]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d003      	beq.n	800d118 <HAL_SPI_TransmitReceive+0x23a>
 800d110:	8a7b      	ldrh	r3, [r7, #18]
 800d112:	2b01      	cmp	r3, #1
 800d114:	f040 80cb 	bne.w	800d2ae <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d11c:	b29b      	uxth	r3, r3
 800d11e:	2b01      	cmp	r3, #1
 800d120:	d912      	bls.n	800d148 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d126:	881a      	ldrh	r2, [r3, #0]
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d132:	1c9a      	adds	r2, r3, #2
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d13c:	b29b      	uxth	r3, r3
 800d13e:	3b02      	subs	r3, #2
 800d140:	b29a      	uxth	r2, r3
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d146:	e0b2      	b.n	800d2ae <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	330c      	adds	r3, #12
 800d152:	7812      	ldrb	r2, [r2, #0]
 800d154:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d15a:	1c5a      	adds	r2, r3, #1
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d164:	b29b      	uxth	r3, r3
 800d166:	3b01      	subs	r3, #1
 800d168:	b29a      	uxth	r2, r3
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d16e:	e09e      	b.n	800d2ae <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	689b      	ldr	r3, [r3, #8]
 800d176:	f003 0302 	and.w	r3, r3, #2
 800d17a:	2b02      	cmp	r3, #2
 800d17c:	d134      	bne.n	800d1e8 <HAL_SPI_TransmitReceive+0x30a>
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d182:	b29b      	uxth	r3, r3
 800d184:	2b00      	cmp	r3, #0
 800d186:	d02f      	beq.n	800d1e8 <HAL_SPI_TransmitReceive+0x30a>
 800d188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18a:	2b01      	cmp	r3, #1
 800d18c:	d12c      	bne.n	800d1e8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d192:	b29b      	uxth	r3, r3
 800d194:	2b01      	cmp	r3, #1
 800d196:	d912      	bls.n	800d1be <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d19c:	881a      	ldrh	r2, [r3, #0]
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1a8:	1c9a      	adds	r2, r3, #2
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d1b2:	b29b      	uxth	r3, r3
 800d1b4:	3b02      	subs	r3, #2
 800d1b6:	b29a      	uxth	r2, r3
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d1bc:	e012      	b.n	800d1e4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	330c      	adds	r3, #12
 800d1c8:	7812      	ldrb	r2, [r2, #0]
 800d1ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1d0:	1c5a      	adds	r2, r3, #1
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d1da:	b29b      	uxth	r3, r3
 800d1dc:	3b01      	subs	r3, #1
 800d1de:	b29a      	uxth	r2, r3
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	689b      	ldr	r3, [r3, #8]
 800d1ee:	f003 0301 	and.w	r3, r3, #1
 800d1f2:	2b01      	cmp	r3, #1
 800d1f4:	d148      	bne.n	800d288 <HAL_SPI_TransmitReceive+0x3aa>
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d1fc:	b29b      	uxth	r3, r3
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d042      	beq.n	800d288 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d208:	b29b      	uxth	r3, r3
 800d20a:	2b01      	cmp	r3, #1
 800d20c:	d923      	bls.n	800d256 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	68da      	ldr	r2, [r3, #12]
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d218:	b292      	uxth	r2, r2
 800d21a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d220:	1c9a      	adds	r2, r3, #2
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d22c:	b29b      	uxth	r3, r3
 800d22e:	3b02      	subs	r3, #2
 800d230:	b29a      	uxth	r2, r3
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d23e:	b29b      	uxth	r3, r3
 800d240:	2b01      	cmp	r3, #1
 800d242:	d81f      	bhi.n	800d284 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	685a      	ldr	r2, [r3, #4]
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d252:	605a      	str	r2, [r3, #4]
 800d254:	e016      	b.n	800d284 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	f103 020c 	add.w	r2, r3, #12
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d262:	7812      	ldrb	r2, [r2, #0]
 800d264:	b2d2      	uxtb	r2, r2
 800d266:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d26c:	1c5a      	adds	r2, r3, #1
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d278:	b29b      	uxth	r3, r3
 800d27a:	3b01      	subs	r3, #1
 800d27c:	b29a      	uxth	r2, r3
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d284:	2301      	movs	r3, #1
 800d286:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d288:	f7fd fc7e 	bl	800ab88 <HAL_GetTick>
 800d28c:	4602      	mov	r2, r0
 800d28e:	69fb      	ldr	r3, [r7, #28]
 800d290:	1ad3      	subs	r3, r2, r3
 800d292:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d294:	429a      	cmp	r2, r3
 800d296:	d803      	bhi.n	800d2a0 <HAL_SPI_TransmitReceive+0x3c2>
 800d298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d29a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d29e:	d102      	bne.n	800d2a6 <HAL_SPI_TransmitReceive+0x3c8>
 800d2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d103      	bne.n	800d2ae <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800d2a6:	2303      	movs	r3, #3
 800d2a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800d2ac:	e01c      	b.n	800d2e8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d2b2:	b29b      	uxth	r3, r3
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	f47f af5b 	bne.w	800d170 <HAL_SPI_TransmitReceive+0x292>
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d2c0:	b29b      	uxth	r3, r3
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	f47f af54 	bne.w	800d170 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d2c8:	69fa      	ldr	r2, [r7, #28]
 800d2ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d2cc:	68f8      	ldr	r0, [r7, #12]
 800d2ce:	f000 f98f 	bl	800d5f0 <SPI_EndRxTxTransaction>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d006      	beq.n	800d2e6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800d2d8:	2301      	movs	r3, #1
 800d2da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	2220      	movs	r2, #32
 800d2e2:	661a      	str	r2, [r3, #96]	; 0x60
 800d2e4:	e000      	b.n	800d2e8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800d2e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d2f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	3728      	adds	r7, #40	; 0x28
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}

0800d304 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b088      	sub	sp, #32
 800d308:	af00      	add	r7, sp, #0
 800d30a:	60f8      	str	r0, [r7, #12]
 800d30c:	60b9      	str	r1, [r7, #8]
 800d30e:	603b      	str	r3, [r7, #0]
 800d310:	4613      	mov	r3, r2
 800d312:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d314:	f7fd fc38 	bl	800ab88 <HAL_GetTick>
 800d318:	4602      	mov	r2, r0
 800d31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d31c:	1a9b      	subs	r3, r3, r2
 800d31e:	683a      	ldr	r2, [r7, #0]
 800d320:	4413      	add	r3, r2
 800d322:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d324:	f7fd fc30 	bl	800ab88 <HAL_GetTick>
 800d328:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d32a:	4b39      	ldr	r3, [pc, #228]	; (800d410 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	015b      	lsls	r3, r3, #5
 800d330:	0d1b      	lsrs	r3, r3, #20
 800d332:	69fa      	ldr	r2, [r7, #28]
 800d334:	fb02 f303 	mul.w	r3, r2, r3
 800d338:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d33a:	e054      	b.n	800d3e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d342:	d050      	beq.n	800d3e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d344:	f7fd fc20 	bl	800ab88 <HAL_GetTick>
 800d348:	4602      	mov	r2, r0
 800d34a:	69bb      	ldr	r3, [r7, #24]
 800d34c:	1ad3      	subs	r3, r2, r3
 800d34e:	69fa      	ldr	r2, [r7, #28]
 800d350:	429a      	cmp	r2, r3
 800d352:	d902      	bls.n	800d35a <SPI_WaitFlagStateUntilTimeout+0x56>
 800d354:	69fb      	ldr	r3, [r7, #28]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d13d      	bne.n	800d3d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	685a      	ldr	r2, [r3, #4]
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d368:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	685b      	ldr	r3, [r3, #4]
 800d36e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d372:	d111      	bne.n	800d398 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	689b      	ldr	r3, [r3, #8]
 800d378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d37c:	d004      	beq.n	800d388 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	689b      	ldr	r3, [r3, #8]
 800d382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d386:	d107      	bne.n	800d398 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	681a      	ldr	r2, [r3, #0]
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d396:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d39c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d3a0:	d10f      	bne.n	800d3c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	681a      	ldr	r2, [r3, #0]
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d3b0:	601a      	str	r2, [r3, #0]
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	681a      	ldr	r2, [r3, #0]
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d3c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	2201      	movs	r2, #1
 800d3c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d3d2:	2303      	movs	r3, #3
 800d3d4:	e017      	b.n	800d406 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d3d6:	697b      	ldr	r3, [r7, #20]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d101      	bne.n	800d3e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	3b01      	subs	r3, #1
 800d3e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	689a      	ldr	r2, [r3, #8]
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	4013      	ands	r3, r2
 800d3f0:	68ba      	ldr	r2, [r7, #8]
 800d3f2:	429a      	cmp	r2, r3
 800d3f4:	bf0c      	ite	eq
 800d3f6:	2301      	moveq	r3, #1
 800d3f8:	2300      	movne	r3, #0
 800d3fa:	b2db      	uxtb	r3, r3
 800d3fc:	461a      	mov	r2, r3
 800d3fe:	79fb      	ldrb	r3, [r7, #7]
 800d400:	429a      	cmp	r2, r3
 800d402:	d19b      	bne.n	800d33c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d404:	2300      	movs	r3, #0
}
 800d406:	4618      	mov	r0, r3
 800d408:	3720      	adds	r7, #32
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}
 800d40e:	bf00      	nop
 800d410:	20000000 	.word	0x20000000

0800d414 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b08a      	sub	sp, #40	; 0x28
 800d418:	af00      	add	r7, sp, #0
 800d41a:	60f8      	str	r0, [r7, #12]
 800d41c:	60b9      	str	r1, [r7, #8]
 800d41e:	607a      	str	r2, [r7, #4]
 800d420:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800d422:	2300      	movs	r3, #0
 800d424:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d426:	f7fd fbaf 	bl	800ab88 <HAL_GetTick>
 800d42a:	4602      	mov	r2, r0
 800d42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d42e:	1a9b      	subs	r3, r3, r2
 800d430:	683a      	ldr	r2, [r7, #0]
 800d432:	4413      	add	r3, r2
 800d434:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800d436:	f7fd fba7 	bl	800ab88 <HAL_GetTick>
 800d43a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	330c      	adds	r3, #12
 800d442:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d444:	4b3d      	ldr	r3, [pc, #244]	; (800d53c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800d446:	681a      	ldr	r2, [r3, #0]
 800d448:	4613      	mov	r3, r2
 800d44a:	009b      	lsls	r3, r3, #2
 800d44c:	4413      	add	r3, r2
 800d44e:	00da      	lsls	r2, r3, #3
 800d450:	1ad3      	subs	r3, r2, r3
 800d452:	0d1b      	lsrs	r3, r3, #20
 800d454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d456:	fb02 f303 	mul.w	r3, r2, r3
 800d45a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800d45c:	e060      	b.n	800d520 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d464:	d107      	bne.n	800d476 <SPI_WaitFifoStateUntilTimeout+0x62>
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d104      	bne.n	800d476 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800d46c:	69fb      	ldr	r3, [r7, #28]
 800d46e:	781b      	ldrb	r3, [r3, #0]
 800d470:	b2db      	uxtb	r3, r3
 800d472:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800d474:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d47c:	d050      	beq.n	800d520 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d47e:	f7fd fb83 	bl	800ab88 <HAL_GetTick>
 800d482:	4602      	mov	r2, r0
 800d484:	6a3b      	ldr	r3, [r7, #32]
 800d486:	1ad3      	subs	r3, r2, r3
 800d488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d48a:	429a      	cmp	r2, r3
 800d48c:	d902      	bls.n	800d494 <SPI_WaitFifoStateUntilTimeout+0x80>
 800d48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d490:	2b00      	cmp	r3, #0
 800d492:	d13d      	bne.n	800d510 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	685a      	ldr	r2, [r3, #4]
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d4a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	685b      	ldr	r3, [r3, #4]
 800d4a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d4ac:	d111      	bne.n	800d4d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	689b      	ldr	r3, [r3, #8]
 800d4b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d4b6:	d004      	beq.n	800d4c2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	689b      	ldr	r3, [r3, #8]
 800d4bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d4c0:	d107      	bne.n	800d4d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	681a      	ldr	r2, [r3, #0]
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d4d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d4da:	d10f      	bne.n	800d4fc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	681a      	ldr	r2, [r3, #0]
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d4ea:	601a      	str	r2, [r3, #0]
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	681a      	ldr	r2, [r3, #0]
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d4fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	2201      	movs	r2, #1
 800d500:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	2200      	movs	r2, #0
 800d508:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d50c:	2303      	movs	r3, #3
 800d50e:	e010      	b.n	800d532 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d510:	69bb      	ldr	r3, [r7, #24]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d101      	bne.n	800d51a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800d516:	2300      	movs	r3, #0
 800d518:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800d51a:	69bb      	ldr	r3, [r7, #24]
 800d51c:	3b01      	subs	r3, #1
 800d51e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	689a      	ldr	r2, [r3, #8]
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	4013      	ands	r3, r2
 800d52a:	687a      	ldr	r2, [r7, #4]
 800d52c:	429a      	cmp	r2, r3
 800d52e:	d196      	bne.n	800d45e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800d530:	2300      	movs	r3, #0
}
 800d532:	4618      	mov	r0, r3
 800d534:	3728      	adds	r7, #40	; 0x28
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}
 800d53a:	bf00      	nop
 800d53c:	20000000 	.word	0x20000000

0800d540 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b086      	sub	sp, #24
 800d544:	af02      	add	r7, sp, #8
 800d546:	60f8      	str	r0, [r7, #12]
 800d548:	60b9      	str	r1, [r7, #8]
 800d54a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	685b      	ldr	r3, [r3, #4]
 800d550:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d554:	d111      	bne.n	800d57a <SPI_EndRxTransaction+0x3a>
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	689b      	ldr	r3, [r3, #8]
 800d55a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d55e:	d004      	beq.n	800d56a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	689b      	ldr	r3, [r3, #8]
 800d564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d568:	d107      	bne.n	800d57a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	681a      	ldr	r2, [r3, #0]
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d578:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	9300      	str	r3, [sp, #0]
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	2200      	movs	r2, #0
 800d582:	2180      	movs	r1, #128	; 0x80
 800d584:	68f8      	ldr	r0, [r7, #12]
 800d586:	f7ff febd 	bl	800d304 <SPI_WaitFlagStateUntilTimeout>
 800d58a:	4603      	mov	r3, r0
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d007      	beq.n	800d5a0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d594:	f043 0220 	orr.w	r2, r3, #32
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d59c:	2303      	movs	r3, #3
 800d59e:	e023      	b.n	800d5e8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	685b      	ldr	r3, [r3, #4]
 800d5a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d5a8:	d11d      	bne.n	800d5e6 <SPI_EndRxTransaction+0xa6>
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	689b      	ldr	r3, [r3, #8]
 800d5ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d5b2:	d004      	beq.n	800d5be <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	689b      	ldr	r3, [r3, #8]
 800d5b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d5bc:	d113      	bne.n	800d5e6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	9300      	str	r3, [sp, #0]
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d5ca:	68f8      	ldr	r0, [r7, #12]
 800d5cc:	f7ff ff22 	bl	800d414 <SPI_WaitFifoStateUntilTimeout>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d007      	beq.n	800d5e6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d5da:	f043 0220 	orr.w	r2, r3, #32
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800d5e2:	2303      	movs	r3, #3
 800d5e4:	e000      	b.n	800d5e8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800d5e6:	2300      	movs	r3, #0
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	3710      	adds	r7, #16
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}

0800d5f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b086      	sub	sp, #24
 800d5f4:	af02      	add	r7, sp, #8
 800d5f6:	60f8      	str	r0, [r7, #12]
 800d5f8:	60b9      	str	r1, [r7, #8]
 800d5fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	9300      	str	r3, [sp, #0]
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	2200      	movs	r2, #0
 800d604:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800d608:	68f8      	ldr	r0, [r7, #12]
 800d60a:	f7ff ff03 	bl	800d414 <SPI_WaitFifoStateUntilTimeout>
 800d60e:	4603      	mov	r3, r0
 800d610:	2b00      	cmp	r3, #0
 800d612:	d007      	beq.n	800d624 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d618:	f043 0220 	orr.w	r2, r3, #32
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d620:	2303      	movs	r3, #3
 800d622:	e027      	b.n	800d674 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	9300      	str	r3, [sp, #0]
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	2200      	movs	r2, #0
 800d62c:	2180      	movs	r1, #128	; 0x80
 800d62e:	68f8      	ldr	r0, [r7, #12]
 800d630:	f7ff fe68 	bl	800d304 <SPI_WaitFlagStateUntilTimeout>
 800d634:	4603      	mov	r3, r0
 800d636:	2b00      	cmp	r3, #0
 800d638:	d007      	beq.n	800d64a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d63e:	f043 0220 	orr.w	r2, r3, #32
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d646:	2303      	movs	r3, #3
 800d648:	e014      	b.n	800d674 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	9300      	str	r3, [sp, #0]
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	2200      	movs	r2, #0
 800d652:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d656:	68f8      	ldr	r0, [r7, #12]
 800d658:	f7ff fedc 	bl	800d414 <SPI_WaitFifoStateUntilTimeout>
 800d65c:	4603      	mov	r3, r0
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d007      	beq.n	800d672 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d666:	f043 0220 	orr.w	r2, r3, #32
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d66e:	2303      	movs	r3, #3
 800d670:	e000      	b.n	800d674 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800d672:	2300      	movs	r3, #0
}
 800d674:	4618      	mov	r0, r3
 800d676:	3710      	adds	r7, #16
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}

0800d67c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b082      	sub	sp, #8
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d101      	bne.n	800d68e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d68a:	2301      	movs	r3, #1
 800d68c:	e049      	b.n	800d722 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d694:	b2db      	uxtb	r3, r3
 800d696:	2b00      	cmp	r3, #0
 800d698:	d106      	bne.n	800d6a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2200      	movs	r2, #0
 800d69e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f7f5 fba6 	bl	8002df4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2202      	movs	r2, #2
 800d6ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681a      	ldr	r2, [r3, #0]
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	3304      	adds	r3, #4
 800d6b8:	4619      	mov	r1, r3
 800d6ba:	4610      	mov	r0, r2
 800d6bc:	f000 fae6 	bl	800dc8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2201      	movs	r2, #1
 800d6c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2201      	movs	r2, #1
 800d6cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2201      	movs	r2, #1
 800d6d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2201      	movs	r2, #1
 800d6dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2201      	movs	r2, #1
 800d6e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2201      	movs	r2, #1
 800d6ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2201      	movs	r2, #1
 800d6f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2201      	movs	r2, #1
 800d6fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2201      	movs	r2, #1
 800d704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2201      	movs	r2, #1
 800d70c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2201      	movs	r2, #1
 800d714:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2201      	movs	r2, #1
 800d71c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d720:	2300      	movs	r3, #0
}
 800d722:	4618      	mov	r0, r3
 800d724:	3708      	adds	r7, #8
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}
	...

0800d72c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d72c:	b480      	push	{r7}
 800d72e:	b085      	sub	sp, #20
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d73a:	b2db      	uxtb	r3, r3
 800d73c:	2b01      	cmp	r3, #1
 800d73e:	d001      	beq.n	800d744 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d740:	2301      	movs	r3, #1
 800d742:	e033      	b.n	800d7ac <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2202      	movs	r2, #2
 800d748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	4a19      	ldr	r2, [pc, #100]	; (800d7b8 <HAL_TIM_Base_Start+0x8c>)
 800d752:	4293      	cmp	r3, r2
 800d754:	d009      	beq.n	800d76a <HAL_TIM_Base_Start+0x3e>
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d75e:	d004      	beq.n	800d76a <HAL_TIM_Base_Start+0x3e>
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	4a15      	ldr	r2, [pc, #84]	; (800d7bc <HAL_TIM_Base_Start+0x90>)
 800d766:	4293      	cmp	r3, r2
 800d768:	d115      	bne.n	800d796 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	689a      	ldr	r2, [r3, #8]
 800d770:	4b13      	ldr	r3, [pc, #76]	; (800d7c0 <HAL_TIM_Base_Start+0x94>)
 800d772:	4013      	ands	r3, r2
 800d774:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	2b06      	cmp	r3, #6
 800d77a:	d015      	beq.n	800d7a8 <HAL_TIM_Base_Start+0x7c>
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d782:	d011      	beq.n	800d7a8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	681a      	ldr	r2, [r3, #0]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	f042 0201 	orr.w	r2, r2, #1
 800d792:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d794:	e008      	b.n	800d7a8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	f042 0201 	orr.w	r2, r2, #1
 800d7a4:	601a      	str	r2, [r3, #0]
 800d7a6:	e000      	b.n	800d7aa <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d7aa:	2300      	movs	r3, #0
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3714      	adds	r7, #20
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b6:	4770      	bx	lr
 800d7b8:	40012c00 	.word	0x40012c00
 800d7bc:	40014000 	.word	0x40014000
 800d7c0:	00010007 	.word	0x00010007

0800d7c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b085      	sub	sp, #20
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d7d2:	b2db      	uxtb	r3, r3
 800d7d4:	2b01      	cmp	r3, #1
 800d7d6:	d001      	beq.n	800d7dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d7d8:	2301      	movs	r3, #1
 800d7da:	e03b      	b.n	800d854 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2202      	movs	r2, #2
 800d7e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	68da      	ldr	r2, [r3, #12]
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f042 0201 	orr.w	r2, r2, #1
 800d7f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	4a19      	ldr	r2, [pc, #100]	; (800d860 <HAL_TIM_Base_Start_IT+0x9c>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d009      	beq.n	800d812 <HAL_TIM_Base_Start_IT+0x4e>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d806:	d004      	beq.n	800d812 <HAL_TIM_Base_Start_IT+0x4e>
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	4a15      	ldr	r2, [pc, #84]	; (800d864 <HAL_TIM_Base_Start_IT+0xa0>)
 800d80e:	4293      	cmp	r3, r2
 800d810:	d115      	bne.n	800d83e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	689a      	ldr	r2, [r3, #8]
 800d818:	4b13      	ldr	r3, [pc, #76]	; (800d868 <HAL_TIM_Base_Start_IT+0xa4>)
 800d81a:	4013      	ands	r3, r2
 800d81c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	2b06      	cmp	r3, #6
 800d822:	d015      	beq.n	800d850 <HAL_TIM_Base_Start_IT+0x8c>
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d82a:	d011      	beq.n	800d850 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	681a      	ldr	r2, [r3, #0]
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	f042 0201 	orr.w	r2, r2, #1
 800d83a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d83c:	e008      	b.n	800d850 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	681a      	ldr	r2, [r3, #0]
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	f042 0201 	orr.w	r2, r2, #1
 800d84c:	601a      	str	r2, [r3, #0]
 800d84e:	e000      	b.n	800d852 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d850:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d852:	2300      	movs	r3, #0
}
 800d854:	4618      	mov	r0, r3
 800d856:	3714      	adds	r7, #20
 800d858:	46bd      	mov	sp, r7
 800d85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85e:	4770      	bx	lr
 800d860:	40012c00 	.word	0x40012c00
 800d864:	40014000 	.word	0x40014000
 800d868:	00010007 	.word	0x00010007

0800d86c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b082      	sub	sp, #8
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	691b      	ldr	r3, [r3, #16]
 800d87a:	f003 0302 	and.w	r3, r3, #2
 800d87e:	2b02      	cmp	r3, #2
 800d880:	d122      	bne.n	800d8c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	68db      	ldr	r3, [r3, #12]
 800d888:	f003 0302 	and.w	r3, r3, #2
 800d88c:	2b02      	cmp	r3, #2
 800d88e:	d11b      	bne.n	800d8c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	f06f 0202 	mvn.w	r2, #2
 800d898:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2201      	movs	r2, #1
 800d89e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	699b      	ldr	r3, [r3, #24]
 800d8a6:	f003 0303 	and.w	r3, r3, #3
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d003      	beq.n	800d8b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f000 f9ce 	bl	800dc50 <HAL_TIM_IC_CaptureCallback>
 800d8b4:	e005      	b.n	800d8c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f000 f9c0 	bl	800dc3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f000 f9d1 	bl	800dc64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	691b      	ldr	r3, [r3, #16]
 800d8ce:	f003 0304 	and.w	r3, r3, #4
 800d8d2:	2b04      	cmp	r3, #4
 800d8d4:	d122      	bne.n	800d91c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	68db      	ldr	r3, [r3, #12]
 800d8dc:	f003 0304 	and.w	r3, r3, #4
 800d8e0:	2b04      	cmp	r3, #4
 800d8e2:	d11b      	bne.n	800d91c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	f06f 0204 	mvn.w	r2, #4
 800d8ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	2202      	movs	r2, #2
 800d8f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	699b      	ldr	r3, [r3, #24]
 800d8fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d003      	beq.n	800d90a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f000 f9a4 	bl	800dc50 <HAL_TIM_IC_CaptureCallback>
 800d908:	e005      	b.n	800d916 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f000 f996 	bl	800dc3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d910:	6878      	ldr	r0, [r7, #4]
 800d912:	f000 f9a7 	bl	800dc64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2200      	movs	r2, #0
 800d91a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	691b      	ldr	r3, [r3, #16]
 800d922:	f003 0308 	and.w	r3, r3, #8
 800d926:	2b08      	cmp	r3, #8
 800d928:	d122      	bne.n	800d970 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	68db      	ldr	r3, [r3, #12]
 800d930:	f003 0308 	and.w	r3, r3, #8
 800d934:	2b08      	cmp	r3, #8
 800d936:	d11b      	bne.n	800d970 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	f06f 0208 	mvn.w	r2, #8
 800d940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2204      	movs	r2, #4
 800d946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	69db      	ldr	r3, [r3, #28]
 800d94e:	f003 0303 	and.w	r3, r3, #3
 800d952:	2b00      	cmp	r3, #0
 800d954:	d003      	beq.n	800d95e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f000 f97a 	bl	800dc50 <HAL_TIM_IC_CaptureCallback>
 800d95c:	e005      	b.n	800d96a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f000 f96c 	bl	800dc3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d964:	6878      	ldr	r0, [r7, #4]
 800d966:	f000 f97d 	bl	800dc64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2200      	movs	r2, #0
 800d96e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	691b      	ldr	r3, [r3, #16]
 800d976:	f003 0310 	and.w	r3, r3, #16
 800d97a:	2b10      	cmp	r3, #16
 800d97c:	d122      	bne.n	800d9c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	68db      	ldr	r3, [r3, #12]
 800d984:	f003 0310 	and.w	r3, r3, #16
 800d988:	2b10      	cmp	r3, #16
 800d98a:	d11b      	bne.n	800d9c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	f06f 0210 	mvn.w	r2, #16
 800d994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2208      	movs	r2, #8
 800d99a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	69db      	ldr	r3, [r3, #28]
 800d9a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d003      	beq.n	800d9b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f000 f950 	bl	800dc50 <HAL_TIM_IC_CaptureCallback>
 800d9b0:	e005      	b.n	800d9be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9b2:	6878      	ldr	r0, [r7, #4]
 800d9b4:	f000 f942 	bl	800dc3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f000 f953 	bl	800dc64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	691b      	ldr	r3, [r3, #16]
 800d9ca:	f003 0301 	and.w	r3, r3, #1
 800d9ce:	2b01      	cmp	r3, #1
 800d9d0:	d10e      	bne.n	800d9f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	68db      	ldr	r3, [r3, #12]
 800d9d8:	f003 0301 	and.w	r3, r3, #1
 800d9dc:	2b01      	cmp	r3, #1
 800d9de:	d107      	bne.n	800d9f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	f06f 0201 	mvn.w	r2, #1
 800d9e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f7f4 f992 	bl	8001d14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	691b      	ldr	r3, [r3, #16]
 800d9f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9fa:	2b80      	cmp	r3, #128	; 0x80
 800d9fc:	d10e      	bne.n	800da1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	68db      	ldr	r3, [r3, #12]
 800da04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da08:	2b80      	cmp	r3, #128	; 0x80
 800da0a:	d107      	bne.n	800da1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800da14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f000 faa6 	bl	800df68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	691b      	ldr	r3, [r3, #16]
 800da22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da2a:	d10e      	bne.n	800da4a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	68db      	ldr	r3, [r3, #12]
 800da32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da36:	2b80      	cmp	r3, #128	; 0x80
 800da38:	d107      	bne.n	800da4a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800da42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f000 fa99 	bl	800df7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	691b      	ldr	r3, [r3, #16]
 800da50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da54:	2b40      	cmp	r3, #64	; 0x40
 800da56:	d10e      	bne.n	800da76 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	68db      	ldr	r3, [r3, #12]
 800da5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da62:	2b40      	cmp	r3, #64	; 0x40
 800da64:	d107      	bne.n	800da76 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800da6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	f000 f901 	bl	800dc78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	691b      	ldr	r3, [r3, #16]
 800da7c:	f003 0320 	and.w	r3, r3, #32
 800da80:	2b20      	cmp	r3, #32
 800da82:	d10e      	bne.n	800daa2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	68db      	ldr	r3, [r3, #12]
 800da8a:	f003 0320 	and.w	r3, r3, #32
 800da8e:	2b20      	cmp	r3, #32
 800da90:	d107      	bne.n	800daa2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	f06f 0220 	mvn.w	r2, #32
 800da9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800da9c:	6878      	ldr	r0, [r7, #4]
 800da9e:	f000 fa59 	bl	800df54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800daa2:	bf00      	nop
 800daa4:	3708      	adds	r7, #8
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}

0800daaa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800daaa:	b580      	push	{r7, lr}
 800daac:	b084      	sub	sp, #16
 800daae:	af00      	add	r7, sp, #0
 800dab0:	6078      	str	r0, [r7, #4]
 800dab2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dab4:	2300      	movs	r3, #0
 800dab6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dabe:	2b01      	cmp	r3, #1
 800dac0:	d101      	bne.n	800dac6 <HAL_TIM_ConfigClockSource+0x1c>
 800dac2:	2302      	movs	r3, #2
 800dac4:	e0b6      	b.n	800dc34 <HAL_TIM_ConfigClockSource+0x18a>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2201      	movs	r2, #1
 800daca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2202      	movs	r2, #2
 800dad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	689b      	ldr	r3, [r3, #8]
 800dadc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dade:	68bb      	ldr	r3, [r7, #8]
 800dae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dae4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800dae8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800daf0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	68ba      	ldr	r2, [r7, #8]
 800daf8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db02:	d03e      	beq.n	800db82 <HAL_TIM_ConfigClockSource+0xd8>
 800db04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db08:	f200 8087 	bhi.w	800dc1a <HAL_TIM_ConfigClockSource+0x170>
 800db0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db10:	f000 8086 	beq.w	800dc20 <HAL_TIM_ConfigClockSource+0x176>
 800db14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db18:	d87f      	bhi.n	800dc1a <HAL_TIM_ConfigClockSource+0x170>
 800db1a:	2b70      	cmp	r3, #112	; 0x70
 800db1c:	d01a      	beq.n	800db54 <HAL_TIM_ConfigClockSource+0xaa>
 800db1e:	2b70      	cmp	r3, #112	; 0x70
 800db20:	d87b      	bhi.n	800dc1a <HAL_TIM_ConfigClockSource+0x170>
 800db22:	2b60      	cmp	r3, #96	; 0x60
 800db24:	d050      	beq.n	800dbc8 <HAL_TIM_ConfigClockSource+0x11e>
 800db26:	2b60      	cmp	r3, #96	; 0x60
 800db28:	d877      	bhi.n	800dc1a <HAL_TIM_ConfigClockSource+0x170>
 800db2a:	2b50      	cmp	r3, #80	; 0x50
 800db2c:	d03c      	beq.n	800dba8 <HAL_TIM_ConfigClockSource+0xfe>
 800db2e:	2b50      	cmp	r3, #80	; 0x50
 800db30:	d873      	bhi.n	800dc1a <HAL_TIM_ConfigClockSource+0x170>
 800db32:	2b40      	cmp	r3, #64	; 0x40
 800db34:	d058      	beq.n	800dbe8 <HAL_TIM_ConfigClockSource+0x13e>
 800db36:	2b40      	cmp	r3, #64	; 0x40
 800db38:	d86f      	bhi.n	800dc1a <HAL_TIM_ConfigClockSource+0x170>
 800db3a:	2b30      	cmp	r3, #48	; 0x30
 800db3c:	d064      	beq.n	800dc08 <HAL_TIM_ConfigClockSource+0x15e>
 800db3e:	2b30      	cmp	r3, #48	; 0x30
 800db40:	d86b      	bhi.n	800dc1a <HAL_TIM_ConfigClockSource+0x170>
 800db42:	2b20      	cmp	r3, #32
 800db44:	d060      	beq.n	800dc08 <HAL_TIM_ConfigClockSource+0x15e>
 800db46:	2b20      	cmp	r3, #32
 800db48:	d867      	bhi.n	800dc1a <HAL_TIM_ConfigClockSource+0x170>
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d05c      	beq.n	800dc08 <HAL_TIM_ConfigClockSource+0x15e>
 800db4e:	2b10      	cmp	r3, #16
 800db50:	d05a      	beq.n	800dc08 <HAL_TIM_ConfigClockSource+0x15e>
 800db52:	e062      	b.n	800dc1a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6818      	ldr	r0, [r3, #0]
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	6899      	ldr	r1, [r3, #8]
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	685a      	ldr	r2, [r3, #4]
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	68db      	ldr	r3, [r3, #12]
 800db64:	f000 f970 	bl	800de48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	689b      	ldr	r3, [r3, #8]
 800db6e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800db76:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	68ba      	ldr	r2, [r7, #8]
 800db7e:	609a      	str	r2, [r3, #8]
      break;
 800db80:	e04f      	b.n	800dc22 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6818      	ldr	r0, [r3, #0]
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	6899      	ldr	r1, [r3, #8]
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	685a      	ldr	r2, [r3, #4]
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	68db      	ldr	r3, [r3, #12]
 800db92:	f000 f959 	bl	800de48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	689a      	ldr	r2, [r3, #8]
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dba4:	609a      	str	r2, [r3, #8]
      break;
 800dba6:	e03c      	b.n	800dc22 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6818      	ldr	r0, [r3, #0]
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	6859      	ldr	r1, [r3, #4]
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	68db      	ldr	r3, [r3, #12]
 800dbb4:	461a      	mov	r2, r3
 800dbb6:	f000 f8cd 	bl	800dd54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	2150      	movs	r1, #80	; 0x50
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f000 f926 	bl	800de12 <TIM_ITRx_SetConfig>
      break;
 800dbc6:	e02c      	b.n	800dc22 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	6818      	ldr	r0, [r3, #0]
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	6859      	ldr	r1, [r3, #4]
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	68db      	ldr	r3, [r3, #12]
 800dbd4:	461a      	mov	r2, r3
 800dbd6:	f000 f8ec 	bl	800ddb2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	2160      	movs	r1, #96	; 0x60
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f000 f916 	bl	800de12 <TIM_ITRx_SetConfig>
      break;
 800dbe6:	e01c      	b.n	800dc22 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6818      	ldr	r0, [r3, #0]
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	6859      	ldr	r1, [r3, #4]
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	68db      	ldr	r3, [r3, #12]
 800dbf4:	461a      	mov	r2, r3
 800dbf6:	f000 f8ad 	bl	800dd54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	2140      	movs	r1, #64	; 0x40
 800dc00:	4618      	mov	r0, r3
 800dc02:	f000 f906 	bl	800de12 <TIM_ITRx_SetConfig>
      break;
 800dc06:	e00c      	b.n	800dc22 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681a      	ldr	r2, [r3, #0]
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	4619      	mov	r1, r3
 800dc12:	4610      	mov	r0, r2
 800dc14:	f000 f8fd 	bl	800de12 <TIM_ITRx_SetConfig>
      break;
 800dc18:	e003      	b.n	800dc22 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	73fb      	strb	r3, [r7, #15]
      break;
 800dc1e:	e000      	b.n	800dc22 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800dc20:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2201      	movs	r2, #1
 800dc26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dc32:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	3710      	adds	r7, #16
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}

0800dc3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b083      	sub	sp, #12
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dc44:	bf00      	nop
 800dc46:	370c      	adds	r7, #12
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4e:	4770      	bx	lr

0800dc50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dc50:	b480      	push	{r7}
 800dc52:	b083      	sub	sp, #12
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dc58:	bf00      	nop
 800dc5a:	370c      	adds	r7, #12
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc62:	4770      	bx	lr

0800dc64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dc64:	b480      	push	{r7}
 800dc66:	b083      	sub	sp, #12
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dc6c:	bf00      	nop
 800dc6e:	370c      	adds	r7, #12
 800dc70:	46bd      	mov	sp, r7
 800dc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc76:	4770      	bx	lr

0800dc78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dc78:	b480      	push	{r7}
 800dc7a:	b083      	sub	sp, #12
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dc80:	bf00      	nop
 800dc82:	370c      	adds	r7, #12
 800dc84:	46bd      	mov	sp, r7
 800dc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8a:	4770      	bx	lr

0800dc8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b085      	sub	sp, #20
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
 800dc94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	4a2a      	ldr	r2, [pc, #168]	; (800dd48 <TIM_Base_SetConfig+0xbc>)
 800dca0:	4293      	cmp	r3, r2
 800dca2:	d003      	beq.n	800dcac <TIM_Base_SetConfig+0x20>
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dcaa:	d108      	bne.n	800dcbe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dcb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	685b      	ldr	r3, [r3, #4]
 800dcb8:	68fa      	ldr	r2, [r7, #12]
 800dcba:	4313      	orrs	r3, r2
 800dcbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	4a21      	ldr	r2, [pc, #132]	; (800dd48 <TIM_Base_SetConfig+0xbc>)
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	d00b      	beq.n	800dcde <TIM_Base_SetConfig+0x52>
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dccc:	d007      	beq.n	800dcde <TIM_Base_SetConfig+0x52>
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	4a1e      	ldr	r2, [pc, #120]	; (800dd4c <TIM_Base_SetConfig+0xc0>)
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	d003      	beq.n	800dcde <TIM_Base_SetConfig+0x52>
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	4a1d      	ldr	r2, [pc, #116]	; (800dd50 <TIM_Base_SetConfig+0xc4>)
 800dcda:	4293      	cmp	r3, r2
 800dcdc:	d108      	bne.n	800dcf0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	68db      	ldr	r3, [r3, #12]
 800dcea:	68fa      	ldr	r2, [r7, #12]
 800dcec:	4313      	orrs	r3, r2
 800dcee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	695b      	ldr	r3, [r3, #20]
 800dcfa:	4313      	orrs	r3, r2
 800dcfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	68fa      	ldr	r2, [r7, #12]
 800dd02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	689a      	ldr	r2, [r3, #8]
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	681a      	ldr	r2, [r3, #0]
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	4a0c      	ldr	r2, [pc, #48]	; (800dd48 <TIM_Base_SetConfig+0xbc>)
 800dd18:	4293      	cmp	r3, r2
 800dd1a:	d007      	beq.n	800dd2c <TIM_Base_SetConfig+0xa0>
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	4a0b      	ldr	r2, [pc, #44]	; (800dd4c <TIM_Base_SetConfig+0xc0>)
 800dd20:	4293      	cmp	r3, r2
 800dd22:	d003      	beq.n	800dd2c <TIM_Base_SetConfig+0xa0>
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	4a0a      	ldr	r2, [pc, #40]	; (800dd50 <TIM_Base_SetConfig+0xc4>)
 800dd28:	4293      	cmp	r3, r2
 800dd2a:	d103      	bne.n	800dd34 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	691a      	ldr	r2, [r3, #16]
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2201      	movs	r2, #1
 800dd38:	615a      	str	r2, [r3, #20]
}
 800dd3a:	bf00      	nop
 800dd3c:	3714      	adds	r7, #20
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd44:	4770      	bx	lr
 800dd46:	bf00      	nop
 800dd48:	40012c00 	.word	0x40012c00
 800dd4c:	40014000 	.word	0x40014000
 800dd50:	40014400 	.word	0x40014400

0800dd54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dd54:	b480      	push	{r7}
 800dd56:	b087      	sub	sp, #28
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	60f8      	str	r0, [r7, #12]
 800dd5c:	60b9      	str	r1, [r7, #8]
 800dd5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	6a1b      	ldr	r3, [r3, #32]
 800dd64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	6a1b      	ldr	r3, [r3, #32]
 800dd6a:	f023 0201 	bic.w	r2, r3, #1
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	699b      	ldr	r3, [r3, #24]
 800dd76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dd78:	693b      	ldr	r3, [r7, #16]
 800dd7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dd7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	011b      	lsls	r3, r3, #4
 800dd84:	693a      	ldr	r2, [r7, #16]
 800dd86:	4313      	orrs	r3, r2
 800dd88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dd8a:	697b      	ldr	r3, [r7, #20]
 800dd8c:	f023 030a 	bic.w	r3, r3, #10
 800dd90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dd92:	697a      	ldr	r2, [r7, #20]
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	4313      	orrs	r3, r2
 800dd98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	693a      	ldr	r2, [r7, #16]
 800dd9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	697a      	ldr	r2, [r7, #20]
 800dda4:	621a      	str	r2, [r3, #32]
}
 800dda6:	bf00      	nop
 800dda8:	371c      	adds	r7, #28
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb0:	4770      	bx	lr

0800ddb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ddb2:	b480      	push	{r7}
 800ddb4:	b087      	sub	sp, #28
 800ddb6:	af00      	add	r7, sp, #0
 800ddb8:	60f8      	str	r0, [r7, #12]
 800ddba:	60b9      	str	r1, [r7, #8]
 800ddbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	6a1b      	ldr	r3, [r3, #32]
 800ddc2:	f023 0210 	bic.w	r2, r3, #16
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	699b      	ldr	r3, [r3, #24]
 800ddce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	6a1b      	ldr	r3, [r3, #32]
 800ddd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dddc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	031b      	lsls	r3, r3, #12
 800dde2:	697a      	ldr	r2, [r7, #20]
 800dde4:	4313      	orrs	r3, r2
 800dde6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dde8:	693b      	ldr	r3, [r7, #16]
 800ddea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ddee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	011b      	lsls	r3, r3, #4
 800ddf4:	693a      	ldr	r2, [r7, #16]
 800ddf6:	4313      	orrs	r3, r2
 800ddf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	697a      	ldr	r2, [r7, #20]
 800ddfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	693a      	ldr	r2, [r7, #16]
 800de04:	621a      	str	r2, [r3, #32]
}
 800de06:	bf00      	nop
 800de08:	371c      	adds	r7, #28
 800de0a:	46bd      	mov	sp, r7
 800de0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de10:	4770      	bx	lr

0800de12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800de12:	b480      	push	{r7}
 800de14:	b085      	sub	sp, #20
 800de16:	af00      	add	r7, sp, #0
 800de18:	6078      	str	r0, [r7, #4]
 800de1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	689b      	ldr	r3, [r3, #8]
 800de20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800de2a:	683a      	ldr	r2, [r7, #0]
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	4313      	orrs	r3, r2
 800de30:	f043 0307 	orr.w	r3, r3, #7
 800de34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	68fa      	ldr	r2, [r7, #12]
 800de3a:	609a      	str	r2, [r3, #8]
}
 800de3c:	bf00      	nop
 800de3e:	3714      	adds	r7, #20
 800de40:	46bd      	mov	sp, r7
 800de42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de46:	4770      	bx	lr

0800de48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800de48:	b480      	push	{r7}
 800de4a:	b087      	sub	sp, #28
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	60f8      	str	r0, [r7, #12]
 800de50:	60b9      	str	r1, [r7, #8]
 800de52:	607a      	str	r2, [r7, #4]
 800de54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	689b      	ldr	r3, [r3, #8]
 800de5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800de5c:	697b      	ldr	r3, [r7, #20]
 800de5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800de62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	021a      	lsls	r2, r3, #8
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	431a      	orrs	r2, r3
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	4313      	orrs	r3, r2
 800de70:	697a      	ldr	r2, [r7, #20]
 800de72:	4313      	orrs	r3, r2
 800de74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	697a      	ldr	r2, [r7, #20]
 800de7a:	609a      	str	r2, [r3, #8]
}
 800de7c:	bf00      	nop
 800de7e:	371c      	adds	r7, #28
 800de80:	46bd      	mov	sp, r7
 800de82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de86:	4770      	bx	lr

0800de88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800de88:	b480      	push	{r7}
 800de8a:	b085      	sub	sp, #20
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
 800de90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800de98:	2b01      	cmp	r3, #1
 800de9a:	d101      	bne.n	800dea0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800de9c:	2302      	movs	r3, #2
 800de9e:	e04f      	b.n	800df40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2201      	movs	r2, #1
 800dea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2202      	movs	r2, #2
 800deac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	685b      	ldr	r3, [r3, #4]
 800deb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	689b      	ldr	r3, [r3, #8]
 800debe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	4a21      	ldr	r2, [pc, #132]	; (800df4c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800dec6:	4293      	cmp	r3, r2
 800dec8:	d108      	bne.n	800dedc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ded0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	685b      	ldr	r3, [r3, #4]
 800ded6:	68fa      	ldr	r2, [r7, #12]
 800ded8:	4313      	orrs	r3, r2
 800deda:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dee2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	68fa      	ldr	r2, [r7, #12]
 800deea:	4313      	orrs	r3, r2
 800deec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	68fa      	ldr	r2, [r7, #12]
 800def4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	4a14      	ldr	r2, [pc, #80]	; (800df4c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800defc:	4293      	cmp	r3, r2
 800defe:	d009      	beq.n	800df14 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800df08:	d004      	beq.n	800df14 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	4a10      	ldr	r2, [pc, #64]	; (800df50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800df10:	4293      	cmp	r3, r2
 800df12:	d10c      	bne.n	800df2e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	689b      	ldr	r3, [r3, #8]
 800df20:	68ba      	ldr	r2, [r7, #8]
 800df22:	4313      	orrs	r3, r2
 800df24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	68ba      	ldr	r2, [r7, #8]
 800df2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2201      	movs	r2, #1
 800df32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	2200      	movs	r2, #0
 800df3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800df3e:	2300      	movs	r3, #0
}
 800df40:	4618      	mov	r0, r3
 800df42:	3714      	adds	r7, #20
 800df44:	46bd      	mov	sp, r7
 800df46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4a:	4770      	bx	lr
 800df4c:	40012c00 	.word	0x40012c00
 800df50:	40014000 	.word	0x40014000

0800df54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800df54:	b480      	push	{r7}
 800df56:	b083      	sub	sp, #12
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800df5c:	bf00      	nop
 800df5e:	370c      	adds	r7, #12
 800df60:	46bd      	mov	sp, r7
 800df62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df66:	4770      	bx	lr

0800df68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800df68:	b480      	push	{r7}
 800df6a:	b083      	sub	sp, #12
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800df70:	bf00      	nop
 800df72:	370c      	adds	r7, #12
 800df74:	46bd      	mov	sp, r7
 800df76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7a:	4770      	bx	lr

0800df7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800df7c:	b480      	push	{r7}
 800df7e:	b083      	sub	sp, #12
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800df84:	bf00      	nop
 800df86:	370c      	adds	r7, #12
 800df88:	46bd      	mov	sp, r7
 800df8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8e:	4770      	bx	lr

0800df90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b082      	sub	sp, #8
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d101      	bne.n	800dfa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800df9e:	2301      	movs	r3, #1
 800dfa0:	e040      	b.n	800e024 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d106      	bne.n	800dfb8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	2200      	movs	r2, #0
 800dfae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dfb2:	6878      	ldr	r0, [r7, #4]
 800dfb4:	f7f4 fdb2 	bl	8002b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2224      	movs	r2, #36	; 0x24
 800dfbc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	681a      	ldr	r2, [r3, #0]
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	f022 0201 	bic.w	r2, r2, #1
 800dfcc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f000 fbe8 	bl	800e7a4 <UART_SetConfig>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	2b01      	cmp	r3, #1
 800dfd8:	d101      	bne.n	800dfde <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800dfda:	2301      	movs	r3, #1
 800dfdc:	e022      	b.n	800e024 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d002      	beq.n	800dfec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f000 fe36 	bl	800ec58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	685a      	ldr	r2, [r3, #4]
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dffa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	689a      	ldr	r2, [r3, #8]
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e00a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	681a      	ldr	r2, [r3, #0]
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	f042 0201 	orr.w	r2, r2, #1
 800e01a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e01c:	6878      	ldr	r0, [r7, #4]
 800e01e:	f000 febd 	bl	800ed9c <UART_CheckIdleState>
 800e022:	4603      	mov	r3, r0
}
 800e024:	4618      	mov	r0, r3
 800e026:	3708      	adds	r7, #8
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd80      	pop	{r7, pc}

0800e02c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e02c:	b480      	push	{r7}
 800e02e:	b08b      	sub	sp, #44	; 0x2c
 800e030:	af00      	add	r7, sp, #0
 800e032:	60f8      	str	r0, [r7, #12]
 800e034:	60b9      	str	r1, [r7, #8]
 800e036:	4613      	mov	r3, r2
 800e038:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e03e:	2b20      	cmp	r3, #32
 800e040:	d156      	bne.n	800e0f0 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d002      	beq.n	800e04e <HAL_UART_Transmit_IT+0x22>
 800e048:	88fb      	ldrh	r3, [r7, #6]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d101      	bne.n	800e052 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800e04e:	2301      	movs	r3, #1
 800e050:	e04f      	b.n	800e0f2 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e058:	2b01      	cmp	r3, #1
 800e05a:	d101      	bne.n	800e060 <HAL_UART_Transmit_IT+0x34>
 800e05c:	2302      	movs	r3, #2
 800e05e:	e048      	b.n	800e0f2 <HAL_UART_Transmit_IT+0xc6>
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	2201      	movs	r2, #1
 800e064:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	68ba      	ldr	r2, [r7, #8]
 800e06c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	88fa      	ldrh	r2, [r7, #6]
 800e072:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	88fa      	ldrh	r2, [r7, #6]
 800e07a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	2200      	movs	r2, #0
 800e082:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	2200      	movs	r2, #0
 800e088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	2221      	movs	r2, #33	; 0x21
 800e090:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	689b      	ldr	r3, [r3, #8]
 800e096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e09a:	d107      	bne.n	800e0ac <HAL_UART_Transmit_IT+0x80>
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	691b      	ldr	r3, [r3, #16]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d103      	bne.n	800e0ac <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	4a16      	ldr	r2, [pc, #88]	; (800e100 <HAL_UART_Transmit_IT+0xd4>)
 800e0a8:	669a      	str	r2, [r3, #104]	; 0x68
 800e0aa:	e002      	b.n	800e0b2 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	4a15      	ldr	r2, [pc, #84]	; (800e104 <HAL_UART_Transmit_IT+0xd8>)
 800e0b0:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0c0:	697b      	ldr	r3, [r7, #20]
 800e0c2:	e853 3f00 	ldrex	r3, [r3]
 800e0c6:	613b      	str	r3, [r7, #16]
   return(result);
 800e0c8:	693b      	ldr	r3, [r7, #16]
 800e0ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0ce:	627b      	str	r3, [r7, #36]	; 0x24
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	461a      	mov	r2, r3
 800e0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d8:	623b      	str	r3, [r7, #32]
 800e0da:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0dc:	69f9      	ldr	r1, [r7, #28]
 800e0de:	6a3a      	ldr	r2, [r7, #32]
 800e0e0:	e841 2300 	strex	r3, r2, [r1]
 800e0e4:	61bb      	str	r3, [r7, #24]
   return(result);
 800e0e6:	69bb      	ldr	r3, [r7, #24]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d1e6      	bne.n	800e0ba <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	e000      	b.n	800e0f2 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800e0f0:	2302      	movs	r3, #2
  }
}
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	372c      	adds	r7, #44	; 0x2c
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fc:	4770      	bx	lr
 800e0fe:	bf00      	nop
 800e100:	0800f2f7 	.word	0x0800f2f7
 800e104:	0800f23f 	.word	0x0800f23f

0800e108 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b08a      	sub	sp, #40	; 0x28
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	60f8      	str	r0, [r7, #12]
 800e110:	60b9      	str	r1, [r7, #8]
 800e112:	4613      	mov	r3, r2
 800e114:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e11a:	2b20      	cmp	r3, #32
 800e11c:	d142      	bne.n	800e1a4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d002      	beq.n	800e12a <HAL_UART_Receive_IT+0x22>
 800e124:	88fb      	ldrh	r3, [r7, #6]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d101      	bne.n	800e12e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800e12a:	2301      	movs	r3, #1
 800e12c:	e03b      	b.n	800e1a6 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e134:	2b01      	cmp	r3, #1
 800e136:	d101      	bne.n	800e13c <HAL_UART_Receive_IT+0x34>
 800e138:	2302      	movs	r3, #2
 800e13a:	e034      	b.n	800e1a6 <HAL_UART_Receive_IT+0x9e>
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	2201      	movs	r2, #1
 800e140:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	2200      	movs	r2, #0
 800e148:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	4a18      	ldr	r2, [pc, #96]	; (800e1b0 <HAL_UART_Receive_IT+0xa8>)
 800e150:	4293      	cmp	r3, r2
 800e152:	d01f      	beq.n	800e194 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	685b      	ldr	r3, [r3, #4]
 800e15a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d018      	beq.n	800e194 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	e853 3f00 	ldrex	r3, [r3]
 800e16e:	613b      	str	r3, [r7, #16]
   return(result);
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e176:	627b      	str	r3, [r7, #36]	; 0x24
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	461a      	mov	r2, r3
 800e17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e180:	623b      	str	r3, [r7, #32]
 800e182:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e184:	69f9      	ldr	r1, [r7, #28]
 800e186:	6a3a      	ldr	r2, [r7, #32]
 800e188:	e841 2300 	strex	r3, r2, [r1]
 800e18c:	61bb      	str	r3, [r7, #24]
   return(result);
 800e18e:	69bb      	ldr	r3, [r7, #24]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d1e6      	bne.n	800e162 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e194:	88fb      	ldrh	r3, [r7, #6]
 800e196:	461a      	mov	r2, r3
 800e198:	68b9      	ldr	r1, [r7, #8]
 800e19a:	68f8      	ldr	r0, [r7, #12]
 800e19c:	f000 ff0c 	bl	800efb8 <UART_Start_Receive_IT>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	e000      	b.n	800e1a6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800e1a4:	2302      	movs	r3, #2
  }
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3728      	adds	r7, #40	; 0x28
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}
 800e1ae:	bf00      	nop
 800e1b0:	40008000 	.word	0x40008000

0800e1b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b0ba      	sub	sp, #232	; 0xe8
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	69db      	ldr	r3, [r3, #28]
 800e1c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	689b      	ldr	r3, [r3, #8]
 800e1d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e1da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e1de:	f640 030f 	movw	r3, #2063	; 0x80f
 800e1e2:	4013      	ands	r3, r2
 800e1e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e1e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d115      	bne.n	800e21c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800e1f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e1f4:	f003 0320 	and.w	r3, r3, #32
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d00f      	beq.n	800e21c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e1fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e200:	f003 0320 	and.w	r3, r3, #32
 800e204:	2b00      	cmp	r3, #0
 800e206:	d009      	beq.n	800e21c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	f000 82a6 	beq.w	800e75e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	4798      	blx	r3
      }
      return;
 800e21a:	e2a0      	b.n	800e75e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800e21c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e220:	2b00      	cmp	r3, #0
 800e222:	f000 8117 	beq.w	800e454 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800e226:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e22a:	f003 0301 	and.w	r3, r3, #1
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d106      	bne.n	800e240 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800e232:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e236:	4b85      	ldr	r3, [pc, #532]	; (800e44c <HAL_UART_IRQHandler+0x298>)
 800e238:	4013      	ands	r3, r2
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	f000 810a 	beq.w	800e454 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e244:	f003 0301 	and.w	r3, r3, #1
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d011      	beq.n	800e270 <HAL_UART_IRQHandler+0xbc>
 800e24c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e254:	2b00      	cmp	r3, #0
 800e256:	d00b      	beq.n	800e270 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	2201      	movs	r2, #1
 800e25e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e266:	f043 0201 	orr.w	r2, r3, #1
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e274:	f003 0302 	and.w	r3, r3, #2
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d011      	beq.n	800e2a0 <HAL_UART_IRQHandler+0xec>
 800e27c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e280:	f003 0301 	and.w	r3, r3, #1
 800e284:	2b00      	cmp	r3, #0
 800e286:	d00b      	beq.n	800e2a0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	2202      	movs	r2, #2
 800e28e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e296:	f043 0204 	orr.w	r2, r3, #4
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e2a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2a4:	f003 0304 	and.w	r3, r3, #4
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d011      	beq.n	800e2d0 <HAL_UART_IRQHandler+0x11c>
 800e2ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e2b0:	f003 0301 	and.w	r3, r3, #1
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d00b      	beq.n	800e2d0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	2204      	movs	r2, #4
 800e2be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2c6:	f043 0202 	orr.w	r2, r3, #2
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e2d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2d4:	f003 0308 	and.w	r3, r3, #8
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d017      	beq.n	800e30c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e2dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2e0:	f003 0320 	and.w	r3, r3, #32
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d105      	bne.n	800e2f4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800e2e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e2ec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d00b      	beq.n	800e30c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	2208      	movs	r2, #8
 800e2fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e302:	f043 0208 	orr.w	r2, r3, #8
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e30c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e310:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e314:	2b00      	cmp	r3, #0
 800e316:	d012      	beq.n	800e33e <HAL_UART_IRQHandler+0x18a>
 800e318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e31c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e320:	2b00      	cmp	r3, #0
 800e322:	d00c      	beq.n	800e33e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e32c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e334:	f043 0220 	orr.w	r2, r3, #32
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e344:	2b00      	cmp	r3, #0
 800e346:	f000 820c 	beq.w	800e762 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e34a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e34e:	f003 0320 	and.w	r3, r3, #32
 800e352:	2b00      	cmp	r3, #0
 800e354:	d00d      	beq.n	800e372 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e35a:	f003 0320 	and.w	r3, r3, #32
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d007      	beq.n	800e372 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e366:	2b00      	cmp	r3, #0
 800e368:	d003      	beq.n	800e372 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e378:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	689b      	ldr	r3, [r3, #8]
 800e382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e386:	2b40      	cmp	r3, #64	; 0x40
 800e388:	d005      	beq.n	800e396 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e38a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e38e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e392:	2b00      	cmp	r3, #0
 800e394:	d04f      	beq.n	800e436 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f000 fed8 	bl	800f14c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	689b      	ldr	r3, [r3, #8]
 800e3a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3a6:	2b40      	cmp	r3, #64	; 0x40
 800e3a8:	d141      	bne.n	800e42e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	3308      	adds	r3, #8
 800e3b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e3b8:	e853 3f00 	ldrex	r3, [r3]
 800e3bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e3c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e3c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e3c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	3308      	adds	r3, #8
 800e3d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e3d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e3da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e3e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e3e6:	e841 2300 	strex	r3, r2, [r1]
 800e3ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e3ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d1d9      	bne.n	800e3aa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d013      	beq.n	800e426 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e402:	4a13      	ldr	r2, [pc, #76]	; (800e450 <HAL_UART_IRQHandler+0x29c>)
 800e404:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e40a:	4618      	mov	r0, r3
 800e40c:	f7fc fd3b 	bl	800ae86 <HAL_DMA_Abort_IT>
 800e410:	4603      	mov	r3, r0
 800e412:	2b00      	cmp	r3, #0
 800e414:	d017      	beq.n	800e446 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e41a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e41c:	687a      	ldr	r2, [r7, #4]
 800e41e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800e420:	4610      	mov	r0, r2
 800e422:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e424:	e00f      	b.n	800e446 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f000 f9a6 	bl	800e778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e42c:	e00b      	b.n	800e446 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f000 f9a2 	bl	800e778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e434:	e007      	b.n	800e446 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f000 f99e 	bl	800e778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2200      	movs	r2, #0
 800e440:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800e444:	e18d      	b.n	800e762 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e446:	bf00      	nop
    return;
 800e448:	e18b      	b.n	800e762 <HAL_UART_IRQHandler+0x5ae>
 800e44a:	bf00      	nop
 800e44c:	04000120 	.word	0x04000120
 800e450:	0800f213 	.word	0x0800f213

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e458:	2b01      	cmp	r3, #1
 800e45a:	f040 8146 	bne.w	800e6ea <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e45e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e462:	f003 0310 	and.w	r3, r3, #16
 800e466:	2b00      	cmp	r3, #0
 800e468:	f000 813f 	beq.w	800e6ea <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e46c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e470:	f003 0310 	and.w	r3, r3, #16
 800e474:	2b00      	cmp	r3, #0
 800e476:	f000 8138 	beq.w	800e6ea <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	2210      	movs	r2, #16
 800e480:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	689b      	ldr	r3, [r3, #8]
 800e488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e48c:	2b40      	cmp	r3, #64	; 0x40
 800e48e:	f040 80b4 	bne.w	800e5fa <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	685b      	ldr	r3, [r3, #4]
 800e49a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e49e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	f000 815f 	beq.w	800e766 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e4ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	f080 8157 	bcs.w	800e766 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e4be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	f003 0320 	and.w	r3, r3, #32
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	f040 8085 	bne.w	800e5de <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e4e0:	e853 3f00 	ldrex	r3, [r3]
 800e4e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e4e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e4ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e4f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	461a      	mov	r2, r3
 800e4fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e4fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e502:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e506:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e50a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e50e:	e841 2300 	strex	r3, r2, [r1]
 800e512:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e516:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d1da      	bne.n	800e4d4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	3308      	adds	r3, #8
 800e524:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e526:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e528:	e853 3f00 	ldrex	r3, [r3]
 800e52c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e52e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e530:	f023 0301 	bic.w	r3, r3, #1
 800e534:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	3308      	adds	r3, #8
 800e53e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e542:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e546:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e548:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e54a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e54e:	e841 2300 	strex	r3, r2, [r1]
 800e552:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e554:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e556:	2b00      	cmp	r3, #0
 800e558:	d1e1      	bne.n	800e51e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	3308      	adds	r3, #8
 800e560:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e562:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e564:	e853 3f00 	ldrex	r3, [r3]
 800e568:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e56a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e56c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e570:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	3308      	adds	r3, #8
 800e57a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e57e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e580:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e582:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e584:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e586:	e841 2300 	strex	r3, r2, [r1]
 800e58a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e58c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d1e3      	bne.n	800e55a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2220      	movs	r2, #32
 800e596:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2200      	movs	r2, #0
 800e59c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5a6:	e853 3f00 	ldrex	r3, [r3]
 800e5aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e5ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5ae:	f023 0310 	bic.w	r3, r3, #16
 800e5b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	461a      	mov	r2, r3
 800e5bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e5c0:	65bb      	str	r3, [r7, #88]	; 0x58
 800e5c2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e5c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e5c8:	e841 2300 	strex	r3, r2, [r1]
 800e5cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e5ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d1e4      	bne.n	800e59e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5d8:	4618      	mov	r0, r3
 800e5da:	f7fc fc16 	bl	800ae0a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e5ea:	b29b      	uxth	r3, r3
 800e5ec:	1ad3      	subs	r3, r2, r3
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	4619      	mov	r1, r3
 800e5f2:	6878      	ldr	r0, [r7, #4]
 800e5f4:	f000 f8ca 	bl	800e78c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e5f8:	e0b5      	b.n	800e766 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e606:	b29b      	uxth	r3, r3
 800e608:	1ad3      	subs	r3, r2, r3
 800e60a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e614:	b29b      	uxth	r3, r3
 800e616:	2b00      	cmp	r3, #0
 800e618:	f000 80a7 	beq.w	800e76a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800e61c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e620:	2b00      	cmp	r3, #0
 800e622:	f000 80a2 	beq.w	800e76a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e62e:	e853 3f00 	ldrex	r3, [r3]
 800e632:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e636:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e63a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	461a      	mov	r2, r3
 800e644:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e648:	647b      	str	r3, [r7, #68]	; 0x44
 800e64a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e64c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e64e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e650:	e841 2300 	strex	r3, r2, [r1]
 800e654:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d1e4      	bne.n	800e626 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	3308      	adds	r3, #8
 800e662:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e666:	e853 3f00 	ldrex	r3, [r3]
 800e66a:	623b      	str	r3, [r7, #32]
   return(result);
 800e66c:	6a3b      	ldr	r3, [r7, #32]
 800e66e:	f023 0301 	bic.w	r3, r3, #1
 800e672:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	3308      	adds	r3, #8
 800e67c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e680:	633a      	str	r2, [r7, #48]	; 0x30
 800e682:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e684:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e686:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e688:	e841 2300 	strex	r3, r2, [r1]
 800e68c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e690:	2b00      	cmp	r3, #0
 800e692:	d1e3      	bne.n	800e65c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2220      	movs	r2, #32
 800e698:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2200      	movs	r2, #0
 800e69e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6ac:	693b      	ldr	r3, [r7, #16]
 800e6ae:	e853 3f00 	ldrex	r3, [r3]
 800e6b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	f023 0310 	bic.w	r3, r3, #16
 800e6ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	461a      	mov	r2, r3
 800e6c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e6c8:	61fb      	str	r3, [r7, #28]
 800e6ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6cc:	69b9      	ldr	r1, [r7, #24]
 800e6ce:	69fa      	ldr	r2, [r7, #28]
 800e6d0:	e841 2300 	strex	r3, r2, [r1]
 800e6d4:	617b      	str	r3, [r7, #20]
   return(result);
 800e6d6:	697b      	ldr	r3, [r7, #20]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d1e4      	bne.n	800e6a6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e6dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e6e0:	4619      	mov	r1, r3
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f000 f852 	bl	800e78c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e6e8:	e03f      	b.n	800e76a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e6ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e6ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d00e      	beq.n	800e714 <HAL_UART_IRQHandler+0x560>
 800e6f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e6fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d008      	beq.n	800e714 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e70a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e70c:	6878      	ldr	r0, [r7, #4]
 800e70e:	f000 ffdc 	bl	800f6ca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e712:	e02d      	b.n	800e770 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d00e      	beq.n	800e73e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d008      	beq.n	800e73e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e730:	2b00      	cmp	r3, #0
 800e732:	d01c      	beq.n	800e76e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e738:	6878      	ldr	r0, [r7, #4]
 800e73a:	4798      	blx	r3
    }
    return;
 800e73c:	e017      	b.n	800e76e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e73e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e746:	2b00      	cmp	r3, #0
 800e748:	d012      	beq.n	800e770 <HAL_UART_IRQHandler+0x5bc>
 800e74a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e74e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e752:	2b00      	cmp	r3, #0
 800e754:	d00c      	beq.n	800e770 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800e756:	6878      	ldr	r0, [r7, #4]
 800e758:	f000 fe2d 	bl	800f3b6 <UART_EndTransmit_IT>
    return;
 800e75c:	e008      	b.n	800e770 <HAL_UART_IRQHandler+0x5bc>
      return;
 800e75e:	bf00      	nop
 800e760:	e006      	b.n	800e770 <HAL_UART_IRQHandler+0x5bc>
    return;
 800e762:	bf00      	nop
 800e764:	e004      	b.n	800e770 <HAL_UART_IRQHandler+0x5bc>
      return;
 800e766:	bf00      	nop
 800e768:	e002      	b.n	800e770 <HAL_UART_IRQHandler+0x5bc>
      return;
 800e76a:	bf00      	nop
 800e76c:	e000      	b.n	800e770 <HAL_UART_IRQHandler+0x5bc>
    return;
 800e76e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800e770:	37e8      	adds	r7, #232	; 0xe8
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}
 800e776:	bf00      	nop

0800e778 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e778:	b480      	push	{r7}
 800e77a:	b083      	sub	sp, #12
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e780:	bf00      	nop
 800e782:	370c      	adds	r7, #12
 800e784:	46bd      	mov	sp, r7
 800e786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78a:	4770      	bx	lr

0800e78c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e78c:	b480      	push	{r7}
 800e78e:	b083      	sub	sp, #12
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
 800e794:	460b      	mov	r3, r1
 800e796:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e798:	bf00      	nop
 800e79a:	370c      	adds	r7, #12
 800e79c:	46bd      	mov	sp, r7
 800e79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a2:	4770      	bx	lr

0800e7a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e7a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e7a8:	b08a      	sub	sp, #40	; 0x28
 800e7aa:	af00      	add	r7, sp, #0
 800e7ac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	689a      	ldr	r2, [r3, #8]
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	691b      	ldr	r3, [r3, #16]
 800e7bc:	431a      	orrs	r2, r3
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	695b      	ldr	r3, [r3, #20]
 800e7c2:	431a      	orrs	r2, r3
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	69db      	ldr	r3, [r3, #28]
 800e7c8:	4313      	orrs	r3, r2
 800e7ca:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	681a      	ldr	r2, [r3, #0]
 800e7d2:	4b9e      	ldr	r3, [pc, #632]	; (800ea4c <UART_SetConfig+0x2a8>)
 800e7d4:	4013      	ands	r3, r2
 800e7d6:	68fa      	ldr	r2, [r7, #12]
 800e7d8:	6812      	ldr	r2, [r2, #0]
 800e7da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e7dc:	430b      	orrs	r3, r1
 800e7de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	685b      	ldr	r3, [r3, #4]
 800e7e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	68da      	ldr	r2, [r3, #12]
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	430a      	orrs	r2, r1
 800e7f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	699b      	ldr	r3, [r3, #24]
 800e7fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	4a93      	ldr	r2, [pc, #588]	; (800ea50 <UART_SetConfig+0x2ac>)
 800e802:	4293      	cmp	r3, r2
 800e804:	d004      	beq.n	800e810 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	6a1b      	ldr	r3, [r3, #32]
 800e80a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e80c:	4313      	orrs	r3, r2
 800e80e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	689b      	ldr	r3, [r3, #8]
 800e816:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e820:	430a      	orrs	r2, r1
 800e822:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	4a8a      	ldr	r2, [pc, #552]	; (800ea54 <UART_SetConfig+0x2b0>)
 800e82a:	4293      	cmp	r3, r2
 800e82c:	d126      	bne.n	800e87c <UART_SetConfig+0xd8>
 800e82e:	4b8a      	ldr	r3, [pc, #552]	; (800ea58 <UART_SetConfig+0x2b4>)
 800e830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e834:	f003 0303 	and.w	r3, r3, #3
 800e838:	2b03      	cmp	r3, #3
 800e83a:	d81b      	bhi.n	800e874 <UART_SetConfig+0xd0>
 800e83c:	a201      	add	r2, pc, #4	; (adr r2, 800e844 <UART_SetConfig+0xa0>)
 800e83e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e842:	bf00      	nop
 800e844:	0800e855 	.word	0x0800e855
 800e848:	0800e865 	.word	0x0800e865
 800e84c:	0800e85d 	.word	0x0800e85d
 800e850:	0800e86d 	.word	0x0800e86d
 800e854:	2301      	movs	r3, #1
 800e856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e85a:	e0ab      	b.n	800e9b4 <UART_SetConfig+0x210>
 800e85c:	2302      	movs	r3, #2
 800e85e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e862:	e0a7      	b.n	800e9b4 <UART_SetConfig+0x210>
 800e864:	2304      	movs	r3, #4
 800e866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e86a:	e0a3      	b.n	800e9b4 <UART_SetConfig+0x210>
 800e86c:	2308      	movs	r3, #8
 800e86e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e872:	e09f      	b.n	800e9b4 <UART_SetConfig+0x210>
 800e874:	2310      	movs	r3, #16
 800e876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e87a:	e09b      	b.n	800e9b4 <UART_SetConfig+0x210>
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	4a76      	ldr	r2, [pc, #472]	; (800ea5c <UART_SetConfig+0x2b8>)
 800e882:	4293      	cmp	r3, r2
 800e884:	d138      	bne.n	800e8f8 <UART_SetConfig+0x154>
 800e886:	4b74      	ldr	r3, [pc, #464]	; (800ea58 <UART_SetConfig+0x2b4>)
 800e888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e88c:	f003 030c 	and.w	r3, r3, #12
 800e890:	2b0c      	cmp	r3, #12
 800e892:	d82d      	bhi.n	800e8f0 <UART_SetConfig+0x14c>
 800e894:	a201      	add	r2, pc, #4	; (adr r2, 800e89c <UART_SetConfig+0xf8>)
 800e896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e89a:	bf00      	nop
 800e89c:	0800e8d1 	.word	0x0800e8d1
 800e8a0:	0800e8f1 	.word	0x0800e8f1
 800e8a4:	0800e8f1 	.word	0x0800e8f1
 800e8a8:	0800e8f1 	.word	0x0800e8f1
 800e8ac:	0800e8e1 	.word	0x0800e8e1
 800e8b0:	0800e8f1 	.word	0x0800e8f1
 800e8b4:	0800e8f1 	.word	0x0800e8f1
 800e8b8:	0800e8f1 	.word	0x0800e8f1
 800e8bc:	0800e8d9 	.word	0x0800e8d9
 800e8c0:	0800e8f1 	.word	0x0800e8f1
 800e8c4:	0800e8f1 	.word	0x0800e8f1
 800e8c8:	0800e8f1 	.word	0x0800e8f1
 800e8cc:	0800e8e9 	.word	0x0800e8e9
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e8d6:	e06d      	b.n	800e9b4 <UART_SetConfig+0x210>
 800e8d8:	2302      	movs	r3, #2
 800e8da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e8de:	e069      	b.n	800e9b4 <UART_SetConfig+0x210>
 800e8e0:	2304      	movs	r3, #4
 800e8e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e8e6:	e065      	b.n	800e9b4 <UART_SetConfig+0x210>
 800e8e8:	2308      	movs	r3, #8
 800e8ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e8ee:	e061      	b.n	800e9b4 <UART_SetConfig+0x210>
 800e8f0:	2310      	movs	r3, #16
 800e8f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e8f6:	e05d      	b.n	800e9b4 <UART_SetConfig+0x210>
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	4a58      	ldr	r2, [pc, #352]	; (800ea60 <UART_SetConfig+0x2bc>)
 800e8fe:	4293      	cmp	r3, r2
 800e900:	d125      	bne.n	800e94e <UART_SetConfig+0x1aa>
 800e902:	4b55      	ldr	r3, [pc, #340]	; (800ea58 <UART_SetConfig+0x2b4>)
 800e904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e908:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e90c:	2b30      	cmp	r3, #48	; 0x30
 800e90e:	d016      	beq.n	800e93e <UART_SetConfig+0x19a>
 800e910:	2b30      	cmp	r3, #48	; 0x30
 800e912:	d818      	bhi.n	800e946 <UART_SetConfig+0x1a2>
 800e914:	2b20      	cmp	r3, #32
 800e916:	d00a      	beq.n	800e92e <UART_SetConfig+0x18a>
 800e918:	2b20      	cmp	r3, #32
 800e91a:	d814      	bhi.n	800e946 <UART_SetConfig+0x1a2>
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d002      	beq.n	800e926 <UART_SetConfig+0x182>
 800e920:	2b10      	cmp	r3, #16
 800e922:	d008      	beq.n	800e936 <UART_SetConfig+0x192>
 800e924:	e00f      	b.n	800e946 <UART_SetConfig+0x1a2>
 800e926:	2300      	movs	r3, #0
 800e928:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e92c:	e042      	b.n	800e9b4 <UART_SetConfig+0x210>
 800e92e:	2302      	movs	r3, #2
 800e930:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e934:	e03e      	b.n	800e9b4 <UART_SetConfig+0x210>
 800e936:	2304      	movs	r3, #4
 800e938:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e93c:	e03a      	b.n	800e9b4 <UART_SetConfig+0x210>
 800e93e:	2308      	movs	r3, #8
 800e940:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e944:	e036      	b.n	800e9b4 <UART_SetConfig+0x210>
 800e946:	2310      	movs	r3, #16
 800e948:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e94c:	e032      	b.n	800e9b4 <UART_SetConfig+0x210>
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	4a3f      	ldr	r2, [pc, #252]	; (800ea50 <UART_SetConfig+0x2ac>)
 800e954:	4293      	cmp	r3, r2
 800e956:	d12a      	bne.n	800e9ae <UART_SetConfig+0x20a>
 800e958:	4b3f      	ldr	r3, [pc, #252]	; (800ea58 <UART_SetConfig+0x2b4>)
 800e95a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e95e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e962:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e966:	d01a      	beq.n	800e99e <UART_SetConfig+0x1fa>
 800e968:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e96c:	d81b      	bhi.n	800e9a6 <UART_SetConfig+0x202>
 800e96e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e972:	d00c      	beq.n	800e98e <UART_SetConfig+0x1ea>
 800e974:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e978:	d815      	bhi.n	800e9a6 <UART_SetConfig+0x202>
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d003      	beq.n	800e986 <UART_SetConfig+0x1e2>
 800e97e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e982:	d008      	beq.n	800e996 <UART_SetConfig+0x1f2>
 800e984:	e00f      	b.n	800e9a6 <UART_SetConfig+0x202>
 800e986:	2300      	movs	r3, #0
 800e988:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e98c:	e012      	b.n	800e9b4 <UART_SetConfig+0x210>
 800e98e:	2302      	movs	r3, #2
 800e990:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e994:	e00e      	b.n	800e9b4 <UART_SetConfig+0x210>
 800e996:	2304      	movs	r3, #4
 800e998:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e99c:	e00a      	b.n	800e9b4 <UART_SetConfig+0x210>
 800e99e:	2308      	movs	r3, #8
 800e9a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e9a4:	e006      	b.n	800e9b4 <UART_SetConfig+0x210>
 800e9a6:	2310      	movs	r3, #16
 800e9a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e9ac:	e002      	b.n	800e9b4 <UART_SetConfig+0x210>
 800e9ae:	2310      	movs	r3, #16
 800e9b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	4a25      	ldr	r2, [pc, #148]	; (800ea50 <UART_SetConfig+0x2ac>)
 800e9ba:	4293      	cmp	r3, r2
 800e9bc:	f040 808a 	bne.w	800ead4 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e9c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e9c4:	2b08      	cmp	r3, #8
 800e9c6:	d824      	bhi.n	800ea12 <UART_SetConfig+0x26e>
 800e9c8:	a201      	add	r2, pc, #4	; (adr r2, 800e9d0 <UART_SetConfig+0x22c>)
 800e9ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9ce:	bf00      	nop
 800e9d0:	0800e9f5 	.word	0x0800e9f5
 800e9d4:	0800ea13 	.word	0x0800ea13
 800e9d8:	0800e9fd 	.word	0x0800e9fd
 800e9dc:	0800ea13 	.word	0x0800ea13
 800e9e0:	0800ea03 	.word	0x0800ea03
 800e9e4:	0800ea13 	.word	0x0800ea13
 800e9e8:	0800ea13 	.word	0x0800ea13
 800e9ec:	0800ea13 	.word	0x0800ea13
 800e9f0:	0800ea0b 	.word	0x0800ea0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e9f4:	f7fd fb6a 	bl	800c0cc <HAL_RCC_GetPCLK1Freq>
 800e9f8:	61f8      	str	r0, [r7, #28]
        break;
 800e9fa:	e010      	b.n	800ea1e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e9fc:	4b19      	ldr	r3, [pc, #100]	; (800ea64 <UART_SetConfig+0x2c0>)
 800e9fe:	61fb      	str	r3, [r7, #28]
        break;
 800ea00:	e00d      	b.n	800ea1e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ea02:	f7fd facb 	bl	800bf9c <HAL_RCC_GetSysClockFreq>
 800ea06:	61f8      	str	r0, [r7, #28]
        break;
 800ea08:	e009      	b.n	800ea1e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ea0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea0e:	61fb      	str	r3, [r7, #28]
        break;
 800ea10:	e005      	b.n	800ea1e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800ea12:	2300      	movs	r3, #0
 800ea14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ea16:	2301      	movs	r3, #1
 800ea18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ea1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ea1e:	69fb      	ldr	r3, [r7, #28]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	f000 8109 	beq.w	800ec38 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	685a      	ldr	r2, [r3, #4]
 800ea2a:	4613      	mov	r3, r2
 800ea2c:	005b      	lsls	r3, r3, #1
 800ea2e:	4413      	add	r3, r2
 800ea30:	69fa      	ldr	r2, [r7, #28]
 800ea32:	429a      	cmp	r2, r3
 800ea34:	d305      	bcc.n	800ea42 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	685b      	ldr	r3, [r3, #4]
 800ea3a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ea3c:	69fa      	ldr	r2, [r7, #28]
 800ea3e:	429a      	cmp	r2, r3
 800ea40:	d912      	bls.n	800ea68 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800ea42:	2301      	movs	r3, #1
 800ea44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ea48:	e0f6      	b.n	800ec38 <UART_SetConfig+0x494>
 800ea4a:	bf00      	nop
 800ea4c:	efff69f3 	.word	0xefff69f3
 800ea50:	40008000 	.word	0x40008000
 800ea54:	40013800 	.word	0x40013800
 800ea58:	40021000 	.word	0x40021000
 800ea5c:	40004400 	.word	0x40004400
 800ea60:	40004800 	.word	0x40004800
 800ea64:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800ea68:	69fb      	ldr	r3, [r7, #28]
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	461c      	mov	r4, r3
 800ea6e:	4615      	mov	r5, r2
 800ea70:	f04f 0200 	mov.w	r2, #0
 800ea74:	f04f 0300 	mov.w	r3, #0
 800ea78:	022b      	lsls	r3, r5, #8
 800ea7a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800ea7e:	0222      	lsls	r2, r4, #8
 800ea80:	68f9      	ldr	r1, [r7, #12]
 800ea82:	6849      	ldr	r1, [r1, #4]
 800ea84:	0849      	lsrs	r1, r1, #1
 800ea86:	2000      	movs	r0, #0
 800ea88:	4688      	mov	r8, r1
 800ea8a:	4681      	mov	r9, r0
 800ea8c:	eb12 0a08 	adds.w	sl, r2, r8
 800ea90:	eb43 0b09 	adc.w	fp, r3, r9
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	685b      	ldr	r3, [r3, #4]
 800ea98:	2200      	movs	r2, #0
 800ea9a:	603b      	str	r3, [r7, #0]
 800ea9c:	607a      	str	r2, [r7, #4]
 800ea9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eaa2:	4650      	mov	r0, sl
 800eaa4:	4659      	mov	r1, fp
 800eaa6:	f7f1 fbe3 	bl	8000270 <__aeabi_uldivmod>
 800eaaa:	4602      	mov	r2, r0
 800eaac:	460b      	mov	r3, r1
 800eaae:	4613      	mov	r3, r2
 800eab0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800eab2:	69bb      	ldr	r3, [r7, #24]
 800eab4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800eab8:	d308      	bcc.n	800eacc <UART_SetConfig+0x328>
 800eaba:	69bb      	ldr	r3, [r7, #24]
 800eabc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eac0:	d204      	bcs.n	800eacc <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	69ba      	ldr	r2, [r7, #24]
 800eac8:	60da      	str	r2, [r3, #12]
 800eaca:	e0b5      	b.n	800ec38 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800eacc:	2301      	movs	r3, #1
 800eace:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ead2:	e0b1      	b.n	800ec38 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	69db      	ldr	r3, [r3, #28]
 800ead8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eadc:	d15d      	bne.n	800eb9a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800eade:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eae2:	2b08      	cmp	r3, #8
 800eae4:	d827      	bhi.n	800eb36 <UART_SetConfig+0x392>
 800eae6:	a201      	add	r2, pc, #4	; (adr r2, 800eaec <UART_SetConfig+0x348>)
 800eae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaec:	0800eb11 	.word	0x0800eb11
 800eaf0:	0800eb19 	.word	0x0800eb19
 800eaf4:	0800eb21 	.word	0x0800eb21
 800eaf8:	0800eb37 	.word	0x0800eb37
 800eafc:	0800eb27 	.word	0x0800eb27
 800eb00:	0800eb37 	.word	0x0800eb37
 800eb04:	0800eb37 	.word	0x0800eb37
 800eb08:	0800eb37 	.word	0x0800eb37
 800eb0c:	0800eb2f 	.word	0x0800eb2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eb10:	f7fd fadc 	bl	800c0cc <HAL_RCC_GetPCLK1Freq>
 800eb14:	61f8      	str	r0, [r7, #28]
        break;
 800eb16:	e014      	b.n	800eb42 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eb18:	f7fd faee 	bl	800c0f8 <HAL_RCC_GetPCLK2Freq>
 800eb1c:	61f8      	str	r0, [r7, #28]
        break;
 800eb1e:	e010      	b.n	800eb42 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800eb20:	4b4c      	ldr	r3, [pc, #304]	; (800ec54 <UART_SetConfig+0x4b0>)
 800eb22:	61fb      	str	r3, [r7, #28]
        break;
 800eb24:	e00d      	b.n	800eb42 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800eb26:	f7fd fa39 	bl	800bf9c <HAL_RCC_GetSysClockFreq>
 800eb2a:	61f8      	str	r0, [r7, #28]
        break;
 800eb2c:	e009      	b.n	800eb42 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eb2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eb32:	61fb      	str	r3, [r7, #28]
        break;
 800eb34:	e005      	b.n	800eb42 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800eb36:	2300      	movs	r3, #0
 800eb38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800eb3a:	2301      	movs	r3, #1
 800eb3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800eb40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800eb42:	69fb      	ldr	r3, [r7, #28]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d077      	beq.n	800ec38 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800eb48:	69fb      	ldr	r3, [r7, #28]
 800eb4a:	005a      	lsls	r2, r3, #1
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	685b      	ldr	r3, [r3, #4]
 800eb50:	085b      	lsrs	r3, r3, #1
 800eb52:	441a      	add	r2, r3
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	685b      	ldr	r3, [r3, #4]
 800eb58:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb5c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eb5e:	69bb      	ldr	r3, [r7, #24]
 800eb60:	2b0f      	cmp	r3, #15
 800eb62:	d916      	bls.n	800eb92 <UART_SetConfig+0x3ee>
 800eb64:	69bb      	ldr	r3, [r7, #24]
 800eb66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb6a:	d212      	bcs.n	800eb92 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800eb6c:	69bb      	ldr	r3, [r7, #24]
 800eb6e:	b29b      	uxth	r3, r3
 800eb70:	f023 030f 	bic.w	r3, r3, #15
 800eb74:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800eb76:	69bb      	ldr	r3, [r7, #24]
 800eb78:	085b      	lsrs	r3, r3, #1
 800eb7a:	b29b      	uxth	r3, r3
 800eb7c:	f003 0307 	and.w	r3, r3, #7
 800eb80:	b29a      	uxth	r2, r3
 800eb82:	8afb      	ldrh	r3, [r7, #22]
 800eb84:	4313      	orrs	r3, r2
 800eb86:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	8afa      	ldrh	r2, [r7, #22]
 800eb8e:	60da      	str	r2, [r3, #12]
 800eb90:	e052      	b.n	800ec38 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800eb92:	2301      	movs	r3, #1
 800eb94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800eb98:	e04e      	b.n	800ec38 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800eb9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eb9e:	2b08      	cmp	r3, #8
 800eba0:	d827      	bhi.n	800ebf2 <UART_SetConfig+0x44e>
 800eba2:	a201      	add	r2, pc, #4	; (adr r2, 800eba8 <UART_SetConfig+0x404>)
 800eba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eba8:	0800ebcd 	.word	0x0800ebcd
 800ebac:	0800ebd5 	.word	0x0800ebd5
 800ebb0:	0800ebdd 	.word	0x0800ebdd
 800ebb4:	0800ebf3 	.word	0x0800ebf3
 800ebb8:	0800ebe3 	.word	0x0800ebe3
 800ebbc:	0800ebf3 	.word	0x0800ebf3
 800ebc0:	0800ebf3 	.word	0x0800ebf3
 800ebc4:	0800ebf3 	.word	0x0800ebf3
 800ebc8:	0800ebeb 	.word	0x0800ebeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ebcc:	f7fd fa7e 	bl	800c0cc <HAL_RCC_GetPCLK1Freq>
 800ebd0:	61f8      	str	r0, [r7, #28]
        break;
 800ebd2:	e014      	b.n	800ebfe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ebd4:	f7fd fa90 	bl	800c0f8 <HAL_RCC_GetPCLK2Freq>
 800ebd8:	61f8      	str	r0, [r7, #28]
        break;
 800ebda:	e010      	b.n	800ebfe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ebdc:	4b1d      	ldr	r3, [pc, #116]	; (800ec54 <UART_SetConfig+0x4b0>)
 800ebde:	61fb      	str	r3, [r7, #28]
        break;
 800ebe0:	e00d      	b.n	800ebfe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ebe2:	f7fd f9db 	bl	800bf9c <HAL_RCC_GetSysClockFreq>
 800ebe6:	61f8      	str	r0, [r7, #28]
        break;
 800ebe8:	e009      	b.n	800ebfe <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ebea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ebee:	61fb      	str	r3, [r7, #28]
        break;
 800ebf0:	e005      	b.n	800ebfe <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ebf6:	2301      	movs	r3, #1
 800ebf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ebfc:	bf00      	nop
    }

    if (pclk != 0U)
 800ebfe:	69fb      	ldr	r3, [r7, #28]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d019      	beq.n	800ec38 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	685b      	ldr	r3, [r3, #4]
 800ec08:	085a      	lsrs	r2, r3, #1
 800ec0a:	69fb      	ldr	r3, [r7, #28]
 800ec0c:	441a      	add	r2, r3
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	685b      	ldr	r3, [r3, #4]
 800ec12:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec16:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ec18:	69bb      	ldr	r3, [r7, #24]
 800ec1a:	2b0f      	cmp	r3, #15
 800ec1c:	d909      	bls.n	800ec32 <UART_SetConfig+0x48e>
 800ec1e:	69bb      	ldr	r3, [r7, #24]
 800ec20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec24:	d205      	bcs.n	800ec32 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ec26:	69bb      	ldr	r3, [r7, #24]
 800ec28:	b29a      	uxth	r2, r3
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	60da      	str	r2, [r3, #12]
 800ec30:	e002      	b.n	800ec38 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800ec32:	2301      	movs	r3, #1
 800ec34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	2200      	movs	r2, #0
 800ec42:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800ec44:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	3728      	adds	r7, #40	; 0x28
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ec52:	bf00      	nop
 800ec54:	00f42400 	.word	0x00f42400

0800ec58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ec58:	b480      	push	{r7}
 800ec5a:	b083      	sub	sp, #12
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec64:	f003 0301 	and.w	r3, r3, #1
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d00a      	beq.n	800ec82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	685b      	ldr	r3, [r3, #4]
 800ec72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	430a      	orrs	r2, r1
 800ec80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec86:	f003 0302 	and.w	r3, r3, #2
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d00a      	beq.n	800eca4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	685b      	ldr	r3, [r3, #4]
 800ec94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	430a      	orrs	r2, r1
 800eca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eca8:	f003 0304 	and.w	r3, r3, #4
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d00a      	beq.n	800ecc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	685b      	ldr	r3, [r3, #4]
 800ecb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	430a      	orrs	r2, r1
 800ecc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecca:	f003 0308 	and.w	r3, r3, #8
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d00a      	beq.n	800ece8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	685b      	ldr	r3, [r3, #4]
 800ecd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	430a      	orrs	r2, r1
 800ece6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecec:	f003 0310 	and.w	r3, r3, #16
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d00a      	beq.n	800ed0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	689b      	ldr	r3, [r3, #8]
 800ecfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	430a      	orrs	r2, r1
 800ed08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed0e:	f003 0320 	and.w	r3, r3, #32
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d00a      	beq.n	800ed2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	689b      	ldr	r3, [r3, #8]
 800ed1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	430a      	orrs	r2, r1
 800ed2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d01a      	beq.n	800ed6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	685b      	ldr	r3, [r3, #4]
 800ed3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	430a      	orrs	r2, r1
 800ed4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ed56:	d10a      	bne.n	800ed6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	685b      	ldr	r3, [r3, #4]
 800ed5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	430a      	orrs	r2, r1
 800ed6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d00a      	beq.n	800ed90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	685b      	ldr	r3, [r3, #4]
 800ed80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	430a      	orrs	r2, r1
 800ed8e:	605a      	str	r2, [r3, #4]
  }
}
 800ed90:	bf00      	nop
 800ed92:	370c      	adds	r7, #12
 800ed94:	46bd      	mov	sp, r7
 800ed96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9a:	4770      	bx	lr

0800ed9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b086      	sub	sp, #24
 800eda0:	af02      	add	r7, sp, #8
 800eda2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2200      	movs	r2, #0
 800eda8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800edac:	f7fb feec 	bl	800ab88 <HAL_GetTick>
 800edb0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	f003 0308 	and.w	r3, r3, #8
 800edbc:	2b08      	cmp	r3, #8
 800edbe:	d10e      	bne.n	800edde <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800edc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800edc4:	9300      	str	r3, [sp, #0]
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	2200      	movs	r2, #0
 800edca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	f000 f82d 	bl	800ee2e <UART_WaitOnFlagUntilTimeout>
 800edd4:	4603      	mov	r3, r0
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d001      	beq.n	800edde <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800edda:	2303      	movs	r3, #3
 800eddc:	e023      	b.n	800ee26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	f003 0304 	and.w	r3, r3, #4
 800ede8:	2b04      	cmp	r3, #4
 800edea:	d10e      	bne.n	800ee0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800edec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800edf0:	9300      	str	r3, [sp, #0]
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	2200      	movs	r2, #0
 800edf6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800edfa:	6878      	ldr	r0, [r7, #4]
 800edfc:	f000 f817 	bl	800ee2e <UART_WaitOnFlagUntilTimeout>
 800ee00:	4603      	mov	r3, r0
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d001      	beq.n	800ee0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ee06:	2303      	movs	r3, #3
 800ee08:	e00d      	b.n	800ee26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	2220      	movs	r2, #32
 800ee0e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2220      	movs	r2, #32
 800ee14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2200      	movs	r2, #0
 800ee1a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2200      	movs	r2, #0
 800ee20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800ee24:	2300      	movs	r3, #0
}
 800ee26:	4618      	mov	r0, r3
 800ee28:	3710      	adds	r7, #16
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd80      	pop	{r7, pc}

0800ee2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ee2e:	b580      	push	{r7, lr}
 800ee30:	b09c      	sub	sp, #112	; 0x70
 800ee32:	af00      	add	r7, sp, #0
 800ee34:	60f8      	str	r0, [r7, #12]
 800ee36:	60b9      	str	r1, [r7, #8]
 800ee38:	603b      	str	r3, [r7, #0]
 800ee3a:	4613      	mov	r3, r2
 800ee3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ee3e:	e0a5      	b.n	800ef8c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ee40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ee42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee46:	f000 80a1 	beq.w	800ef8c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ee4a:	f7fb fe9d 	bl	800ab88 <HAL_GetTick>
 800ee4e:	4602      	mov	r2, r0
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	1ad3      	subs	r3, r2, r3
 800ee54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ee56:	429a      	cmp	r2, r3
 800ee58:	d302      	bcc.n	800ee60 <UART_WaitOnFlagUntilTimeout+0x32>
 800ee5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d13e      	bne.n	800eede <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee68:	e853 3f00 	ldrex	r3, [r3]
 800ee6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ee6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ee74:	667b      	str	r3, [r7, #100]	; 0x64
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	461a      	mov	r2, r3
 800ee7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ee7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ee80:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ee84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ee86:	e841 2300 	strex	r3, r2, [r1]
 800ee8a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ee8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d1e6      	bne.n	800ee60 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	3308      	adds	r3, #8
 800ee98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee9c:	e853 3f00 	ldrex	r3, [r3]
 800eea0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eea4:	f023 0301 	bic.w	r3, r3, #1
 800eea8:	663b      	str	r3, [r7, #96]	; 0x60
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	3308      	adds	r3, #8
 800eeb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eeb2:	64ba      	str	r2, [r7, #72]	; 0x48
 800eeb4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eeb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eeb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eeba:	e841 2300 	strex	r3, r2, [r1]
 800eebe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800eec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d1e5      	bne.n	800ee92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	2220      	movs	r2, #32
 800eeca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	2220      	movs	r2, #32
 800eed0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	2200      	movs	r2, #0
 800eed6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800eeda:	2303      	movs	r3, #3
 800eedc:	e067      	b.n	800efae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	f003 0304 	and.w	r3, r3, #4
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d04f      	beq.n	800ef8c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	69db      	ldr	r3, [r3, #28]
 800eef2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eefa:	d147      	bne.n	800ef8c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ef04:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef0e:	e853 3f00 	ldrex	r3, [r3]
 800ef12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ef14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ef1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	461a      	mov	r2, r3
 800ef22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef24:	637b      	str	r3, [r7, #52]	; 0x34
 800ef26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ef2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ef2c:	e841 2300 	strex	r3, r2, [r1]
 800ef30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ef32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d1e6      	bne.n	800ef06 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	3308      	adds	r3, #8
 800ef3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef40:	697b      	ldr	r3, [r7, #20]
 800ef42:	e853 3f00 	ldrex	r3, [r3]
 800ef46:	613b      	str	r3, [r7, #16]
   return(result);
 800ef48:	693b      	ldr	r3, [r7, #16]
 800ef4a:	f023 0301 	bic.w	r3, r3, #1
 800ef4e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	3308      	adds	r3, #8
 800ef56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ef58:	623a      	str	r2, [r7, #32]
 800ef5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef5c:	69f9      	ldr	r1, [r7, #28]
 800ef5e:	6a3a      	ldr	r2, [r7, #32]
 800ef60:	e841 2300 	strex	r3, r2, [r1]
 800ef64:	61bb      	str	r3, [r7, #24]
   return(result);
 800ef66:	69bb      	ldr	r3, [r7, #24]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d1e5      	bne.n	800ef38 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	2220      	movs	r2, #32
 800ef70:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	2220      	movs	r2, #32
 800ef76:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	2220      	movs	r2, #32
 800ef7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	2200      	movs	r2, #0
 800ef84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800ef88:	2303      	movs	r3, #3
 800ef8a:	e010      	b.n	800efae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	69da      	ldr	r2, [r3, #28]
 800ef92:	68bb      	ldr	r3, [r7, #8]
 800ef94:	4013      	ands	r3, r2
 800ef96:	68ba      	ldr	r2, [r7, #8]
 800ef98:	429a      	cmp	r2, r3
 800ef9a:	bf0c      	ite	eq
 800ef9c:	2301      	moveq	r3, #1
 800ef9e:	2300      	movne	r3, #0
 800efa0:	b2db      	uxtb	r3, r3
 800efa2:	461a      	mov	r2, r3
 800efa4:	79fb      	ldrb	r3, [r7, #7]
 800efa6:	429a      	cmp	r2, r3
 800efa8:	f43f af4a 	beq.w	800ee40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800efac:	2300      	movs	r3, #0
}
 800efae:	4618      	mov	r0, r3
 800efb0:	3770      	adds	r7, #112	; 0x70
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}
	...

0800efb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800efb8:	b480      	push	{r7}
 800efba:	b097      	sub	sp, #92	; 0x5c
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	60f8      	str	r0, [r7, #12]
 800efc0:	60b9      	str	r1, [r7, #8]
 800efc2:	4613      	mov	r3, r2
 800efc4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	68ba      	ldr	r2, [r7, #8]
 800efca:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	88fa      	ldrh	r2, [r7, #6]
 800efd0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	88fa      	ldrh	r2, [r7, #6]
 800efd8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	2200      	movs	r2, #0
 800efe0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	689b      	ldr	r3, [r3, #8]
 800efe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800efea:	d10e      	bne.n	800f00a <UART_Start_Receive_IT+0x52>
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	691b      	ldr	r3, [r3, #16]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d105      	bne.n	800f000 <UART_Start_Receive_IT+0x48>
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800effa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800effe:	e02d      	b.n	800f05c <UART_Start_Receive_IT+0xa4>
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	22ff      	movs	r2, #255	; 0xff
 800f004:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f008:	e028      	b.n	800f05c <UART_Start_Receive_IT+0xa4>
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	689b      	ldr	r3, [r3, #8]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d10d      	bne.n	800f02e <UART_Start_Receive_IT+0x76>
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	691b      	ldr	r3, [r3, #16]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d104      	bne.n	800f024 <UART_Start_Receive_IT+0x6c>
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	22ff      	movs	r2, #255	; 0xff
 800f01e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f022:	e01b      	b.n	800f05c <UART_Start_Receive_IT+0xa4>
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	227f      	movs	r2, #127	; 0x7f
 800f028:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f02c:	e016      	b.n	800f05c <UART_Start_Receive_IT+0xa4>
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	689b      	ldr	r3, [r3, #8]
 800f032:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f036:	d10d      	bne.n	800f054 <UART_Start_Receive_IT+0x9c>
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	691b      	ldr	r3, [r3, #16]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d104      	bne.n	800f04a <UART_Start_Receive_IT+0x92>
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	227f      	movs	r2, #127	; 0x7f
 800f044:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f048:	e008      	b.n	800f05c <UART_Start_Receive_IT+0xa4>
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	223f      	movs	r2, #63	; 0x3f
 800f04e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f052:	e003      	b.n	800f05c <UART_Start_Receive_IT+0xa4>
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	2200      	movs	r2, #0
 800f058:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	2200      	movs	r2, #0
 800f060:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	2222      	movs	r2, #34	; 0x22
 800f068:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	3308      	adds	r3, #8
 800f070:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f074:	e853 3f00 	ldrex	r3, [r3]
 800f078:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f07c:	f043 0301 	orr.w	r3, r3, #1
 800f080:	657b      	str	r3, [r7, #84]	; 0x54
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	3308      	adds	r3, #8
 800f088:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f08a:	64ba      	str	r2, [r7, #72]	; 0x48
 800f08c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f08e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f090:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f092:	e841 2300 	strex	r3, r2, [r1]
 800f096:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d1e5      	bne.n	800f06a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	689b      	ldr	r3, [r3, #8]
 800f0a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f0a6:	d107      	bne.n	800f0b8 <UART_Start_Receive_IT+0x100>
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	691b      	ldr	r3, [r3, #16]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d103      	bne.n	800f0b8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	4a24      	ldr	r2, [pc, #144]	; (800f144 <UART_Start_Receive_IT+0x18c>)
 800f0b4:	665a      	str	r2, [r3, #100]	; 0x64
 800f0b6:	e002      	b.n	800f0be <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	4a23      	ldr	r2, [pc, #140]	; (800f148 <UART_Start_Receive_IT+0x190>)
 800f0bc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	691b      	ldr	r3, [r3, #16]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d019      	beq.n	800f102 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d6:	e853 3f00 	ldrex	r3, [r3]
 800f0da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0de:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800f0e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	461a      	mov	r2, r3
 800f0ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0ec:	637b      	str	r3, [r7, #52]	; 0x34
 800f0ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f0f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f0f4:	e841 2300 	strex	r3, r2, [r1]
 800f0f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d1e6      	bne.n	800f0ce <UART_Start_Receive_IT+0x116>
 800f100:	e018      	b.n	800f134 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	e853 3f00 	ldrex	r3, [r3]
 800f10e:	613b      	str	r3, [r7, #16]
   return(result);
 800f110:	693b      	ldr	r3, [r7, #16]
 800f112:	f043 0320 	orr.w	r3, r3, #32
 800f116:	653b      	str	r3, [r7, #80]	; 0x50
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	461a      	mov	r2, r3
 800f11e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f120:	623b      	str	r3, [r7, #32]
 800f122:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f124:	69f9      	ldr	r1, [r7, #28]
 800f126:	6a3a      	ldr	r2, [r7, #32]
 800f128:	e841 2300 	strex	r3, r2, [r1]
 800f12c:	61bb      	str	r3, [r7, #24]
   return(result);
 800f12e:	69bb      	ldr	r3, [r7, #24]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d1e6      	bne.n	800f102 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800f134:	2300      	movs	r3, #0
}
 800f136:	4618      	mov	r0, r3
 800f138:	375c      	adds	r7, #92	; 0x5c
 800f13a:	46bd      	mov	sp, r7
 800f13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f140:	4770      	bx	lr
 800f142:	bf00      	nop
 800f144:	0800f56b 	.word	0x0800f56b
 800f148:	0800f40b 	.word	0x0800f40b

0800f14c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f14c:	b480      	push	{r7}
 800f14e:	b095      	sub	sp, #84	; 0x54
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f15a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f15c:	e853 3f00 	ldrex	r3, [r3]
 800f160:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f164:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f168:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	461a      	mov	r2, r3
 800f170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f172:	643b      	str	r3, [r7, #64]	; 0x40
 800f174:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f176:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f178:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f17a:	e841 2300 	strex	r3, r2, [r1]
 800f17e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f182:	2b00      	cmp	r3, #0
 800f184:	d1e6      	bne.n	800f154 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	3308      	adds	r3, #8
 800f18c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f18e:	6a3b      	ldr	r3, [r7, #32]
 800f190:	e853 3f00 	ldrex	r3, [r3]
 800f194:	61fb      	str	r3, [r7, #28]
   return(result);
 800f196:	69fb      	ldr	r3, [r7, #28]
 800f198:	f023 0301 	bic.w	r3, r3, #1
 800f19c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	3308      	adds	r3, #8
 800f1a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f1a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f1a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f1ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1ae:	e841 2300 	strex	r3, r2, [r1]
 800f1b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d1e5      	bne.n	800f186 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f1be:	2b01      	cmp	r3, #1
 800f1c0:	d118      	bne.n	800f1f4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	e853 3f00 	ldrex	r3, [r3]
 800f1ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	f023 0310 	bic.w	r3, r3, #16
 800f1d6:	647b      	str	r3, [r7, #68]	; 0x44
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	461a      	mov	r2, r3
 800f1de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1e0:	61bb      	str	r3, [r7, #24]
 800f1e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1e4:	6979      	ldr	r1, [r7, #20]
 800f1e6:	69ba      	ldr	r2, [r7, #24]
 800f1e8:	e841 2300 	strex	r3, r2, [r1]
 800f1ec:	613b      	str	r3, [r7, #16]
   return(result);
 800f1ee:	693b      	ldr	r3, [r7, #16]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d1e6      	bne.n	800f1c2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2220      	movs	r2, #32
 800f1f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2200      	movs	r2, #0
 800f204:	665a      	str	r2, [r3, #100]	; 0x64
}
 800f206:	bf00      	nop
 800f208:	3754      	adds	r7, #84	; 0x54
 800f20a:	46bd      	mov	sp, r7
 800f20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f210:	4770      	bx	lr

0800f212 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f212:	b580      	push	{r7, lr}
 800f214:	b084      	sub	sp, #16
 800f216:	af00      	add	r7, sp, #0
 800f218:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f21e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	2200      	movs	r2, #0
 800f224:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	2200      	movs	r2, #0
 800f22c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f230:	68f8      	ldr	r0, [r7, #12]
 800f232:	f7ff faa1 	bl	800e778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f236:	bf00      	nop
 800f238:	3710      	adds	r7, #16
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}

0800f23e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f23e:	b480      	push	{r7}
 800f240:	b08f      	sub	sp, #60	; 0x3c
 800f242:	af00      	add	r7, sp, #0
 800f244:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f24a:	2b21      	cmp	r3, #33	; 0x21
 800f24c:	d14d      	bne.n	800f2ea <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f254:	b29b      	uxth	r3, r3
 800f256:	2b00      	cmp	r3, #0
 800f258:	d132      	bne.n	800f2c0 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f260:	6a3b      	ldr	r3, [r7, #32]
 800f262:	e853 3f00 	ldrex	r3, [r3]
 800f266:	61fb      	str	r3, [r7, #28]
   return(result);
 800f268:	69fb      	ldr	r3, [r7, #28]
 800f26a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f26e:	637b      	str	r3, [r7, #52]	; 0x34
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	461a      	mov	r2, r3
 800f276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f27a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f27c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f27e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f280:	e841 2300 	strex	r3, r2, [r1]
 800f284:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d1e6      	bne.n	800f25a <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	e853 3f00 	ldrex	r3, [r3]
 800f298:	60bb      	str	r3, [r7, #8]
   return(result);
 800f29a:	68bb      	ldr	r3, [r7, #8]
 800f29c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2a0:	633b      	str	r3, [r7, #48]	; 0x30
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	461a      	mov	r2, r3
 800f2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2aa:	61bb      	str	r3, [r7, #24]
 800f2ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2ae:	6979      	ldr	r1, [r7, #20]
 800f2b0:	69ba      	ldr	r2, [r7, #24]
 800f2b2:	e841 2300 	strex	r3, r2, [r1]
 800f2b6:	613b      	str	r3, [r7, #16]
   return(result);
 800f2b8:	693b      	ldr	r3, [r7, #16]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d1e6      	bne.n	800f28c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800f2be:	e014      	b.n	800f2ea <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2c4:	781a      	ldrb	r2, [r3, #0]
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	b292      	uxth	r2, r2
 800f2cc:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2d2:	1c5a      	adds	r2, r3, #1
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f2de:	b29b      	uxth	r3, r3
 800f2e0:	3b01      	subs	r3, #1
 800f2e2:	b29a      	uxth	r2, r3
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800f2ea:	bf00      	nop
 800f2ec:	373c      	adds	r7, #60	; 0x3c
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f4:	4770      	bx	lr

0800f2f6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f2f6:	b480      	push	{r7}
 800f2f8:	b091      	sub	sp, #68	; 0x44
 800f2fa:	af00      	add	r7, sp, #0
 800f2fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f302:	2b21      	cmp	r3, #33	; 0x21
 800f304:	d151      	bne.n	800f3aa <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f30c:	b29b      	uxth	r3, r3
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d132      	bne.n	800f378 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f31a:	e853 3f00 	ldrex	r3, [r3]
 800f31e:	623b      	str	r3, [r7, #32]
   return(result);
 800f320:	6a3b      	ldr	r3, [r7, #32]
 800f322:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f326:	63bb      	str	r3, [r7, #56]	; 0x38
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	461a      	mov	r2, r3
 800f32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f330:	633b      	str	r3, [r7, #48]	; 0x30
 800f332:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f334:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f336:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f338:	e841 2300 	strex	r3, r2, [r1]
 800f33c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f340:	2b00      	cmp	r3, #0
 800f342:	d1e6      	bne.n	800f312 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f34a:	693b      	ldr	r3, [r7, #16]
 800f34c:	e853 3f00 	ldrex	r3, [r3]
 800f350:	60fb      	str	r3, [r7, #12]
   return(result);
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f358:	637b      	str	r3, [r7, #52]	; 0x34
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	461a      	mov	r2, r3
 800f360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f362:	61fb      	str	r3, [r7, #28]
 800f364:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f366:	69b9      	ldr	r1, [r7, #24]
 800f368:	69fa      	ldr	r2, [r7, #28]
 800f36a:	e841 2300 	strex	r3, r2, [r1]
 800f36e:	617b      	str	r3, [r7, #20]
   return(result);
 800f370:	697b      	ldr	r3, [r7, #20]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d1e6      	bne.n	800f344 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800f376:	e018      	b.n	800f3aa <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f37c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800f37e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f380:	881a      	ldrh	r2, [r3, #0]
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f38a:	b292      	uxth	r2, r2
 800f38c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f392:	1c9a      	adds	r2, r3, #2
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f39e:	b29b      	uxth	r3, r3
 800f3a0:	3b01      	subs	r3, #1
 800f3a2:	b29a      	uxth	r2, r3
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800f3aa:	bf00      	nop
 800f3ac:	3744      	adds	r7, #68	; 0x44
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b4:	4770      	bx	lr

0800f3b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f3b6:	b580      	push	{r7, lr}
 800f3b8:	b088      	sub	sp, #32
 800f3ba:	af00      	add	r7, sp, #0
 800f3bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	e853 3f00 	ldrex	r3, [r3]
 800f3ca:	60bb      	str	r3, [r7, #8]
   return(result);
 800f3cc:	68bb      	ldr	r3, [r7, #8]
 800f3ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f3d2:	61fb      	str	r3, [r7, #28]
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	461a      	mov	r2, r3
 800f3da:	69fb      	ldr	r3, [r7, #28]
 800f3dc:	61bb      	str	r3, [r7, #24]
 800f3de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3e0:	6979      	ldr	r1, [r7, #20]
 800f3e2:	69ba      	ldr	r2, [r7, #24]
 800f3e4:	e841 2300 	strex	r3, r2, [r1]
 800f3e8:	613b      	str	r3, [r7, #16]
   return(result);
 800f3ea:	693b      	ldr	r3, [r7, #16]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d1e6      	bne.n	800f3be <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2220      	movs	r2, #32
 800f3f4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f7f9 fd4b 	bl	8008e98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f402:	bf00      	nop
 800f404:	3720      	adds	r7, #32
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}

0800f40a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f40a:	b580      	push	{r7, lr}
 800f40c:	b096      	sub	sp, #88	; 0x58
 800f40e:	af00      	add	r7, sp, #0
 800f410:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f418:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f420:	2b22      	cmp	r3, #34	; 0x22
 800f422:	f040 8094 	bne.w	800f54e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f42c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f430:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f434:	b2d9      	uxtb	r1, r3
 800f436:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f43a:	b2da      	uxtb	r2, r3
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f440:	400a      	ands	r2, r1
 800f442:	b2d2      	uxtb	r2, r2
 800f444:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f44a:	1c5a      	adds	r2, r3, #1
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f456:	b29b      	uxth	r3, r3
 800f458:	3b01      	subs	r3, #1
 800f45a:	b29a      	uxth	r2, r3
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f468:	b29b      	uxth	r3, r3
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d179      	bne.n	800f562 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f476:	e853 3f00 	ldrex	r3, [r3]
 800f47a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f47c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f47e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f482:	653b      	str	r3, [r7, #80]	; 0x50
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	461a      	mov	r2, r3
 800f48a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f48c:	647b      	str	r3, [r7, #68]	; 0x44
 800f48e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f490:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f492:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f494:	e841 2300 	strex	r3, r2, [r1]
 800f498:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f49a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d1e6      	bne.n	800f46e <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	3308      	adds	r3, #8
 800f4a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4aa:	e853 3f00 	ldrex	r3, [r3]
 800f4ae:	623b      	str	r3, [r7, #32]
   return(result);
 800f4b0:	6a3b      	ldr	r3, [r7, #32]
 800f4b2:	f023 0301 	bic.w	r3, r3, #1
 800f4b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	3308      	adds	r3, #8
 800f4be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f4c0:	633a      	str	r2, [r7, #48]	; 0x30
 800f4c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f4c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4c8:	e841 2300 	strex	r3, r2, [r1]
 800f4cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d1e5      	bne.n	800f4a0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	2220      	movs	r2, #32
 800f4d8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	2200      	movs	r2, #0
 800f4de:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f4e4:	2b01      	cmp	r3, #1
 800f4e6:	d12e      	bne.n	800f546 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4f4:	693b      	ldr	r3, [r7, #16]
 800f4f6:	e853 3f00 	ldrex	r3, [r3]
 800f4fa:	60fb      	str	r3, [r7, #12]
   return(result);
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	f023 0310 	bic.w	r3, r3, #16
 800f502:	64bb      	str	r3, [r7, #72]	; 0x48
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	461a      	mov	r2, r3
 800f50a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f50c:	61fb      	str	r3, [r7, #28]
 800f50e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f510:	69b9      	ldr	r1, [r7, #24]
 800f512:	69fa      	ldr	r2, [r7, #28]
 800f514:	e841 2300 	strex	r3, r2, [r1]
 800f518:	617b      	str	r3, [r7, #20]
   return(result);
 800f51a:	697b      	ldr	r3, [r7, #20]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d1e6      	bne.n	800f4ee <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	69db      	ldr	r3, [r3, #28]
 800f526:	f003 0310 	and.w	r3, r3, #16
 800f52a:	2b10      	cmp	r3, #16
 800f52c:	d103      	bne.n	800f536 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	2210      	movs	r2, #16
 800f534:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f53c:	4619      	mov	r1, r3
 800f53e:	6878      	ldr	r0, [r7, #4]
 800f540:	f7ff f924 	bl	800e78c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f544:	e00d      	b.n	800f562 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f546:	6878      	ldr	r0, [r7, #4]
 800f548:	f7f2 fd6a 	bl	8002020 <HAL_UART_RxCpltCallback>
}
 800f54c:	e009      	b.n	800f562 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	8b1b      	ldrh	r3, [r3, #24]
 800f554:	b29a      	uxth	r2, r3
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	f042 0208 	orr.w	r2, r2, #8
 800f55e:	b292      	uxth	r2, r2
 800f560:	831a      	strh	r2, [r3, #24]
}
 800f562:	bf00      	nop
 800f564:	3758      	adds	r7, #88	; 0x58
 800f566:	46bd      	mov	sp, r7
 800f568:	bd80      	pop	{r7, pc}

0800f56a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f56a:	b580      	push	{r7, lr}
 800f56c:	b096      	sub	sp, #88	; 0x58
 800f56e:	af00      	add	r7, sp, #0
 800f570:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f578:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f580:	2b22      	cmp	r3, #34	; 0x22
 800f582:	f040 8094 	bne.w	800f6ae <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f58c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f594:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800f596:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800f59a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f59e:	4013      	ands	r3, r2
 800f5a0:	b29a      	uxth	r2, r3
 800f5a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5a4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5aa:	1c9a      	adds	r2, r3, #2
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f5b6:	b29b      	uxth	r3, r3
 800f5b8:	3b01      	subs	r3, #1
 800f5ba:	b29a      	uxth	r2, r3
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f5c8:	b29b      	uxth	r3, r3
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d179      	bne.n	800f6c2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5d6:	e853 3f00 	ldrex	r3, [r3]
 800f5da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f5e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	461a      	mov	r2, r3
 800f5ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5ec:	643b      	str	r3, [r7, #64]	; 0x40
 800f5ee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f5f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f5f4:	e841 2300 	strex	r3, r2, [r1]
 800f5f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d1e6      	bne.n	800f5ce <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	3308      	adds	r3, #8
 800f606:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f608:	6a3b      	ldr	r3, [r7, #32]
 800f60a:	e853 3f00 	ldrex	r3, [r3]
 800f60e:	61fb      	str	r3, [r7, #28]
   return(result);
 800f610:	69fb      	ldr	r3, [r7, #28]
 800f612:	f023 0301 	bic.w	r3, r3, #1
 800f616:	64bb      	str	r3, [r7, #72]	; 0x48
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	3308      	adds	r3, #8
 800f61e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f620:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f622:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f624:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f628:	e841 2300 	strex	r3, r2, [r1]
 800f62c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f630:	2b00      	cmp	r3, #0
 800f632:	d1e5      	bne.n	800f600 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2220      	movs	r2, #32
 800f638:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	2200      	movs	r2, #0
 800f63e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f644:	2b01      	cmp	r3, #1
 800f646:	d12e      	bne.n	800f6a6 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	2200      	movs	r2, #0
 800f64c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	e853 3f00 	ldrex	r3, [r3]
 800f65a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f65c:	68bb      	ldr	r3, [r7, #8]
 800f65e:	f023 0310 	bic.w	r3, r3, #16
 800f662:	647b      	str	r3, [r7, #68]	; 0x44
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	461a      	mov	r2, r3
 800f66a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f66c:	61bb      	str	r3, [r7, #24]
 800f66e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f670:	6979      	ldr	r1, [r7, #20]
 800f672:	69ba      	ldr	r2, [r7, #24]
 800f674:	e841 2300 	strex	r3, r2, [r1]
 800f678:	613b      	str	r3, [r7, #16]
   return(result);
 800f67a:	693b      	ldr	r3, [r7, #16]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d1e6      	bne.n	800f64e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	69db      	ldr	r3, [r3, #28]
 800f686:	f003 0310 	and.w	r3, r3, #16
 800f68a:	2b10      	cmp	r3, #16
 800f68c:	d103      	bne.n	800f696 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	2210      	movs	r2, #16
 800f694:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f69c:	4619      	mov	r1, r3
 800f69e:	6878      	ldr	r0, [r7, #4]
 800f6a0:	f7ff f874 	bl	800e78c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f6a4:	e00d      	b.n	800f6c2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f6a6:	6878      	ldr	r0, [r7, #4]
 800f6a8:	f7f2 fcba 	bl	8002020 <HAL_UART_RxCpltCallback>
}
 800f6ac:	e009      	b.n	800f6c2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	8b1b      	ldrh	r3, [r3, #24]
 800f6b4:	b29a      	uxth	r2, r3
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	f042 0208 	orr.w	r2, r2, #8
 800f6be:	b292      	uxth	r2, r2
 800f6c0:	831a      	strh	r2, [r3, #24]
}
 800f6c2:	bf00      	nop
 800f6c4:	3758      	adds	r7, #88	; 0x58
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bd80      	pop	{r7, pc}

0800f6ca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f6ca:	b480      	push	{r7}
 800f6cc:	b083      	sub	sp, #12
 800f6ce:	af00      	add	r7, sp, #0
 800f6d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f6d2:	bf00      	nop
 800f6d4:	370c      	adds	r7, #12
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6dc:	4770      	bx	lr

0800f6de <_ZdlPvj>:
 800f6de:	f000 b800 	b.w	800f6e2 <_ZdlPv>

0800f6e2 <_ZdlPv>:
 800f6e2:	f000 b82b 	b.w	800f73c <free>
	...

0800f6e8 <__errno>:
 800f6e8:	4b01      	ldr	r3, [pc, #4]	; (800f6f0 <__errno+0x8>)
 800f6ea:	6818      	ldr	r0, [r3, #0]
 800f6ec:	4770      	bx	lr
 800f6ee:	bf00      	nop
 800f6f0:	2000000c 	.word	0x2000000c

0800f6f4 <__libc_init_array>:
 800f6f4:	b570      	push	{r4, r5, r6, lr}
 800f6f6:	4d0d      	ldr	r5, [pc, #52]	; (800f72c <__libc_init_array+0x38>)
 800f6f8:	4c0d      	ldr	r4, [pc, #52]	; (800f730 <__libc_init_array+0x3c>)
 800f6fa:	1b64      	subs	r4, r4, r5
 800f6fc:	10a4      	asrs	r4, r4, #2
 800f6fe:	2600      	movs	r6, #0
 800f700:	42a6      	cmp	r6, r4
 800f702:	d109      	bne.n	800f718 <__libc_init_array+0x24>
 800f704:	4d0b      	ldr	r5, [pc, #44]	; (800f734 <__libc_init_array+0x40>)
 800f706:	4c0c      	ldr	r4, [pc, #48]	; (800f738 <__libc_init_array+0x44>)
 800f708:	f000 fc96 	bl	8010038 <_init>
 800f70c:	1b64      	subs	r4, r4, r5
 800f70e:	10a4      	asrs	r4, r4, #2
 800f710:	2600      	movs	r6, #0
 800f712:	42a6      	cmp	r6, r4
 800f714:	d105      	bne.n	800f722 <__libc_init_array+0x2e>
 800f716:	bd70      	pop	{r4, r5, r6, pc}
 800f718:	f855 3b04 	ldr.w	r3, [r5], #4
 800f71c:	4798      	blx	r3
 800f71e:	3601      	adds	r6, #1
 800f720:	e7ee      	b.n	800f700 <__libc_init_array+0xc>
 800f722:	f855 3b04 	ldr.w	r3, [r5], #4
 800f726:	4798      	blx	r3
 800f728:	3601      	adds	r6, #1
 800f72a:	e7f2      	b.n	800f712 <__libc_init_array+0x1e>
 800f72c:	080105ac 	.word	0x080105ac
 800f730:	080105ac 	.word	0x080105ac
 800f734:	080105ac 	.word	0x080105ac
 800f738:	080105b4 	.word	0x080105b4

0800f73c <free>:
 800f73c:	4b02      	ldr	r3, [pc, #8]	; (800f748 <free+0xc>)
 800f73e:	4601      	mov	r1, r0
 800f740:	6818      	ldr	r0, [r3, #0]
 800f742:	f000 b819 	b.w	800f778 <_free_r>
 800f746:	bf00      	nop
 800f748:	2000000c 	.word	0x2000000c

0800f74c <memcpy>:
 800f74c:	440a      	add	r2, r1
 800f74e:	4291      	cmp	r1, r2
 800f750:	f100 33ff 	add.w	r3, r0, #4294967295
 800f754:	d100      	bne.n	800f758 <memcpy+0xc>
 800f756:	4770      	bx	lr
 800f758:	b510      	push	{r4, lr}
 800f75a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f75e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f762:	4291      	cmp	r1, r2
 800f764:	d1f9      	bne.n	800f75a <memcpy+0xe>
 800f766:	bd10      	pop	{r4, pc}

0800f768 <memset>:
 800f768:	4402      	add	r2, r0
 800f76a:	4603      	mov	r3, r0
 800f76c:	4293      	cmp	r3, r2
 800f76e:	d100      	bne.n	800f772 <memset+0xa>
 800f770:	4770      	bx	lr
 800f772:	f803 1b01 	strb.w	r1, [r3], #1
 800f776:	e7f9      	b.n	800f76c <memset+0x4>

0800f778 <_free_r>:
 800f778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f77a:	2900      	cmp	r1, #0
 800f77c:	d044      	beq.n	800f808 <_free_r+0x90>
 800f77e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f782:	9001      	str	r0, [sp, #4]
 800f784:	2b00      	cmp	r3, #0
 800f786:	f1a1 0404 	sub.w	r4, r1, #4
 800f78a:	bfb8      	it	lt
 800f78c:	18e4      	addlt	r4, r4, r3
 800f78e:	f000 f905 	bl	800f99c <__malloc_lock>
 800f792:	4a1e      	ldr	r2, [pc, #120]	; (800f80c <_free_r+0x94>)
 800f794:	9801      	ldr	r0, [sp, #4]
 800f796:	6813      	ldr	r3, [r2, #0]
 800f798:	b933      	cbnz	r3, 800f7a8 <_free_r+0x30>
 800f79a:	6063      	str	r3, [r4, #4]
 800f79c:	6014      	str	r4, [r2, #0]
 800f79e:	b003      	add	sp, #12
 800f7a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f7a4:	f000 b900 	b.w	800f9a8 <__malloc_unlock>
 800f7a8:	42a3      	cmp	r3, r4
 800f7aa:	d908      	bls.n	800f7be <_free_r+0x46>
 800f7ac:	6825      	ldr	r5, [r4, #0]
 800f7ae:	1961      	adds	r1, r4, r5
 800f7b0:	428b      	cmp	r3, r1
 800f7b2:	bf01      	itttt	eq
 800f7b4:	6819      	ldreq	r1, [r3, #0]
 800f7b6:	685b      	ldreq	r3, [r3, #4]
 800f7b8:	1949      	addeq	r1, r1, r5
 800f7ba:	6021      	streq	r1, [r4, #0]
 800f7bc:	e7ed      	b.n	800f79a <_free_r+0x22>
 800f7be:	461a      	mov	r2, r3
 800f7c0:	685b      	ldr	r3, [r3, #4]
 800f7c2:	b10b      	cbz	r3, 800f7c8 <_free_r+0x50>
 800f7c4:	42a3      	cmp	r3, r4
 800f7c6:	d9fa      	bls.n	800f7be <_free_r+0x46>
 800f7c8:	6811      	ldr	r1, [r2, #0]
 800f7ca:	1855      	adds	r5, r2, r1
 800f7cc:	42a5      	cmp	r5, r4
 800f7ce:	d10b      	bne.n	800f7e8 <_free_r+0x70>
 800f7d0:	6824      	ldr	r4, [r4, #0]
 800f7d2:	4421      	add	r1, r4
 800f7d4:	1854      	adds	r4, r2, r1
 800f7d6:	42a3      	cmp	r3, r4
 800f7d8:	6011      	str	r1, [r2, #0]
 800f7da:	d1e0      	bne.n	800f79e <_free_r+0x26>
 800f7dc:	681c      	ldr	r4, [r3, #0]
 800f7de:	685b      	ldr	r3, [r3, #4]
 800f7e0:	6053      	str	r3, [r2, #4]
 800f7e2:	4421      	add	r1, r4
 800f7e4:	6011      	str	r1, [r2, #0]
 800f7e6:	e7da      	b.n	800f79e <_free_r+0x26>
 800f7e8:	d902      	bls.n	800f7f0 <_free_r+0x78>
 800f7ea:	230c      	movs	r3, #12
 800f7ec:	6003      	str	r3, [r0, #0]
 800f7ee:	e7d6      	b.n	800f79e <_free_r+0x26>
 800f7f0:	6825      	ldr	r5, [r4, #0]
 800f7f2:	1961      	adds	r1, r4, r5
 800f7f4:	428b      	cmp	r3, r1
 800f7f6:	bf04      	itt	eq
 800f7f8:	6819      	ldreq	r1, [r3, #0]
 800f7fa:	685b      	ldreq	r3, [r3, #4]
 800f7fc:	6063      	str	r3, [r4, #4]
 800f7fe:	bf04      	itt	eq
 800f800:	1949      	addeq	r1, r1, r5
 800f802:	6021      	streq	r1, [r4, #0]
 800f804:	6054      	str	r4, [r2, #4]
 800f806:	e7ca      	b.n	800f79e <_free_r+0x26>
 800f808:	b003      	add	sp, #12
 800f80a:	bd30      	pop	{r4, r5, pc}
 800f80c:	20000780 	.word	0x20000780

0800f810 <sbrk_aligned>:
 800f810:	b570      	push	{r4, r5, r6, lr}
 800f812:	4e0e      	ldr	r6, [pc, #56]	; (800f84c <sbrk_aligned+0x3c>)
 800f814:	460c      	mov	r4, r1
 800f816:	6831      	ldr	r1, [r6, #0]
 800f818:	4605      	mov	r5, r0
 800f81a:	b911      	cbnz	r1, 800f822 <sbrk_aligned+0x12>
 800f81c:	f000 f88c 	bl	800f938 <_sbrk_r>
 800f820:	6030      	str	r0, [r6, #0]
 800f822:	4621      	mov	r1, r4
 800f824:	4628      	mov	r0, r5
 800f826:	f000 f887 	bl	800f938 <_sbrk_r>
 800f82a:	1c43      	adds	r3, r0, #1
 800f82c:	d00a      	beq.n	800f844 <sbrk_aligned+0x34>
 800f82e:	1cc4      	adds	r4, r0, #3
 800f830:	f024 0403 	bic.w	r4, r4, #3
 800f834:	42a0      	cmp	r0, r4
 800f836:	d007      	beq.n	800f848 <sbrk_aligned+0x38>
 800f838:	1a21      	subs	r1, r4, r0
 800f83a:	4628      	mov	r0, r5
 800f83c:	f000 f87c 	bl	800f938 <_sbrk_r>
 800f840:	3001      	adds	r0, #1
 800f842:	d101      	bne.n	800f848 <sbrk_aligned+0x38>
 800f844:	f04f 34ff 	mov.w	r4, #4294967295
 800f848:	4620      	mov	r0, r4
 800f84a:	bd70      	pop	{r4, r5, r6, pc}
 800f84c:	20000784 	.word	0x20000784

0800f850 <_malloc_r>:
 800f850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f854:	1ccd      	adds	r5, r1, #3
 800f856:	f025 0503 	bic.w	r5, r5, #3
 800f85a:	3508      	adds	r5, #8
 800f85c:	2d0c      	cmp	r5, #12
 800f85e:	bf38      	it	cc
 800f860:	250c      	movcc	r5, #12
 800f862:	2d00      	cmp	r5, #0
 800f864:	4607      	mov	r7, r0
 800f866:	db01      	blt.n	800f86c <_malloc_r+0x1c>
 800f868:	42a9      	cmp	r1, r5
 800f86a:	d905      	bls.n	800f878 <_malloc_r+0x28>
 800f86c:	230c      	movs	r3, #12
 800f86e:	603b      	str	r3, [r7, #0]
 800f870:	2600      	movs	r6, #0
 800f872:	4630      	mov	r0, r6
 800f874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f878:	4e2e      	ldr	r6, [pc, #184]	; (800f934 <_malloc_r+0xe4>)
 800f87a:	f000 f88f 	bl	800f99c <__malloc_lock>
 800f87e:	6833      	ldr	r3, [r6, #0]
 800f880:	461c      	mov	r4, r3
 800f882:	bb34      	cbnz	r4, 800f8d2 <_malloc_r+0x82>
 800f884:	4629      	mov	r1, r5
 800f886:	4638      	mov	r0, r7
 800f888:	f7ff ffc2 	bl	800f810 <sbrk_aligned>
 800f88c:	1c43      	adds	r3, r0, #1
 800f88e:	4604      	mov	r4, r0
 800f890:	d14d      	bne.n	800f92e <_malloc_r+0xde>
 800f892:	6834      	ldr	r4, [r6, #0]
 800f894:	4626      	mov	r6, r4
 800f896:	2e00      	cmp	r6, #0
 800f898:	d140      	bne.n	800f91c <_malloc_r+0xcc>
 800f89a:	6823      	ldr	r3, [r4, #0]
 800f89c:	4631      	mov	r1, r6
 800f89e:	4638      	mov	r0, r7
 800f8a0:	eb04 0803 	add.w	r8, r4, r3
 800f8a4:	f000 f848 	bl	800f938 <_sbrk_r>
 800f8a8:	4580      	cmp	r8, r0
 800f8aa:	d13a      	bne.n	800f922 <_malloc_r+0xd2>
 800f8ac:	6821      	ldr	r1, [r4, #0]
 800f8ae:	3503      	adds	r5, #3
 800f8b0:	1a6d      	subs	r5, r5, r1
 800f8b2:	f025 0503 	bic.w	r5, r5, #3
 800f8b6:	3508      	adds	r5, #8
 800f8b8:	2d0c      	cmp	r5, #12
 800f8ba:	bf38      	it	cc
 800f8bc:	250c      	movcc	r5, #12
 800f8be:	4629      	mov	r1, r5
 800f8c0:	4638      	mov	r0, r7
 800f8c2:	f7ff ffa5 	bl	800f810 <sbrk_aligned>
 800f8c6:	3001      	adds	r0, #1
 800f8c8:	d02b      	beq.n	800f922 <_malloc_r+0xd2>
 800f8ca:	6823      	ldr	r3, [r4, #0]
 800f8cc:	442b      	add	r3, r5
 800f8ce:	6023      	str	r3, [r4, #0]
 800f8d0:	e00e      	b.n	800f8f0 <_malloc_r+0xa0>
 800f8d2:	6822      	ldr	r2, [r4, #0]
 800f8d4:	1b52      	subs	r2, r2, r5
 800f8d6:	d41e      	bmi.n	800f916 <_malloc_r+0xc6>
 800f8d8:	2a0b      	cmp	r2, #11
 800f8da:	d916      	bls.n	800f90a <_malloc_r+0xba>
 800f8dc:	1961      	adds	r1, r4, r5
 800f8de:	42a3      	cmp	r3, r4
 800f8e0:	6025      	str	r5, [r4, #0]
 800f8e2:	bf18      	it	ne
 800f8e4:	6059      	strne	r1, [r3, #4]
 800f8e6:	6863      	ldr	r3, [r4, #4]
 800f8e8:	bf08      	it	eq
 800f8ea:	6031      	streq	r1, [r6, #0]
 800f8ec:	5162      	str	r2, [r4, r5]
 800f8ee:	604b      	str	r3, [r1, #4]
 800f8f0:	4638      	mov	r0, r7
 800f8f2:	f104 060b 	add.w	r6, r4, #11
 800f8f6:	f000 f857 	bl	800f9a8 <__malloc_unlock>
 800f8fa:	f026 0607 	bic.w	r6, r6, #7
 800f8fe:	1d23      	adds	r3, r4, #4
 800f900:	1af2      	subs	r2, r6, r3
 800f902:	d0b6      	beq.n	800f872 <_malloc_r+0x22>
 800f904:	1b9b      	subs	r3, r3, r6
 800f906:	50a3      	str	r3, [r4, r2]
 800f908:	e7b3      	b.n	800f872 <_malloc_r+0x22>
 800f90a:	6862      	ldr	r2, [r4, #4]
 800f90c:	42a3      	cmp	r3, r4
 800f90e:	bf0c      	ite	eq
 800f910:	6032      	streq	r2, [r6, #0]
 800f912:	605a      	strne	r2, [r3, #4]
 800f914:	e7ec      	b.n	800f8f0 <_malloc_r+0xa0>
 800f916:	4623      	mov	r3, r4
 800f918:	6864      	ldr	r4, [r4, #4]
 800f91a:	e7b2      	b.n	800f882 <_malloc_r+0x32>
 800f91c:	4634      	mov	r4, r6
 800f91e:	6876      	ldr	r6, [r6, #4]
 800f920:	e7b9      	b.n	800f896 <_malloc_r+0x46>
 800f922:	230c      	movs	r3, #12
 800f924:	603b      	str	r3, [r7, #0]
 800f926:	4638      	mov	r0, r7
 800f928:	f000 f83e 	bl	800f9a8 <__malloc_unlock>
 800f92c:	e7a1      	b.n	800f872 <_malloc_r+0x22>
 800f92e:	6025      	str	r5, [r4, #0]
 800f930:	e7de      	b.n	800f8f0 <_malloc_r+0xa0>
 800f932:	bf00      	nop
 800f934:	20000780 	.word	0x20000780

0800f938 <_sbrk_r>:
 800f938:	b538      	push	{r3, r4, r5, lr}
 800f93a:	4d06      	ldr	r5, [pc, #24]	; (800f954 <_sbrk_r+0x1c>)
 800f93c:	2300      	movs	r3, #0
 800f93e:	4604      	mov	r4, r0
 800f940:	4608      	mov	r0, r1
 800f942:	602b      	str	r3, [r5, #0]
 800f944:	f7f3 fafe 	bl	8002f44 <_sbrk>
 800f948:	1c43      	adds	r3, r0, #1
 800f94a:	d102      	bne.n	800f952 <_sbrk_r+0x1a>
 800f94c:	682b      	ldr	r3, [r5, #0]
 800f94e:	b103      	cbz	r3, 800f952 <_sbrk_r+0x1a>
 800f950:	6023      	str	r3, [r4, #0]
 800f952:	bd38      	pop	{r3, r4, r5, pc}
 800f954:	2000078c 	.word	0x2000078c

0800f958 <siprintf>:
 800f958:	b40e      	push	{r1, r2, r3}
 800f95a:	b500      	push	{lr}
 800f95c:	b09c      	sub	sp, #112	; 0x70
 800f95e:	ab1d      	add	r3, sp, #116	; 0x74
 800f960:	9002      	str	r0, [sp, #8]
 800f962:	9006      	str	r0, [sp, #24]
 800f964:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f968:	4809      	ldr	r0, [pc, #36]	; (800f990 <siprintf+0x38>)
 800f96a:	9107      	str	r1, [sp, #28]
 800f96c:	9104      	str	r1, [sp, #16]
 800f96e:	4909      	ldr	r1, [pc, #36]	; (800f994 <siprintf+0x3c>)
 800f970:	f853 2b04 	ldr.w	r2, [r3], #4
 800f974:	9105      	str	r1, [sp, #20]
 800f976:	6800      	ldr	r0, [r0, #0]
 800f978:	9301      	str	r3, [sp, #4]
 800f97a:	a902      	add	r1, sp, #8
 800f97c:	f000 f876 	bl	800fa6c <_svfiprintf_r>
 800f980:	9b02      	ldr	r3, [sp, #8]
 800f982:	2200      	movs	r2, #0
 800f984:	701a      	strb	r2, [r3, #0]
 800f986:	b01c      	add	sp, #112	; 0x70
 800f988:	f85d eb04 	ldr.w	lr, [sp], #4
 800f98c:	b003      	add	sp, #12
 800f98e:	4770      	bx	lr
 800f990:	2000000c 	.word	0x2000000c
 800f994:	ffff0208 	.word	0xffff0208

0800f998 <__retarget_lock_acquire_recursive>:
 800f998:	4770      	bx	lr

0800f99a <__retarget_lock_release_recursive>:
 800f99a:	4770      	bx	lr

0800f99c <__malloc_lock>:
 800f99c:	4801      	ldr	r0, [pc, #4]	; (800f9a4 <__malloc_lock+0x8>)
 800f99e:	f7ff bffb 	b.w	800f998 <__retarget_lock_acquire_recursive>
 800f9a2:	bf00      	nop
 800f9a4:	20000788 	.word	0x20000788

0800f9a8 <__malloc_unlock>:
 800f9a8:	4801      	ldr	r0, [pc, #4]	; (800f9b0 <__malloc_unlock+0x8>)
 800f9aa:	f7ff bff6 	b.w	800f99a <__retarget_lock_release_recursive>
 800f9ae:	bf00      	nop
 800f9b0:	20000788 	.word	0x20000788

0800f9b4 <__ssputs_r>:
 800f9b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9b8:	688e      	ldr	r6, [r1, #8]
 800f9ba:	429e      	cmp	r6, r3
 800f9bc:	4682      	mov	sl, r0
 800f9be:	460c      	mov	r4, r1
 800f9c0:	4690      	mov	r8, r2
 800f9c2:	461f      	mov	r7, r3
 800f9c4:	d838      	bhi.n	800fa38 <__ssputs_r+0x84>
 800f9c6:	898a      	ldrh	r2, [r1, #12]
 800f9c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f9cc:	d032      	beq.n	800fa34 <__ssputs_r+0x80>
 800f9ce:	6825      	ldr	r5, [r4, #0]
 800f9d0:	6909      	ldr	r1, [r1, #16]
 800f9d2:	eba5 0901 	sub.w	r9, r5, r1
 800f9d6:	6965      	ldr	r5, [r4, #20]
 800f9d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f9dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f9e0:	3301      	adds	r3, #1
 800f9e2:	444b      	add	r3, r9
 800f9e4:	106d      	asrs	r5, r5, #1
 800f9e6:	429d      	cmp	r5, r3
 800f9e8:	bf38      	it	cc
 800f9ea:	461d      	movcc	r5, r3
 800f9ec:	0553      	lsls	r3, r2, #21
 800f9ee:	d531      	bpl.n	800fa54 <__ssputs_r+0xa0>
 800f9f0:	4629      	mov	r1, r5
 800f9f2:	f7ff ff2d 	bl	800f850 <_malloc_r>
 800f9f6:	4606      	mov	r6, r0
 800f9f8:	b950      	cbnz	r0, 800fa10 <__ssputs_r+0x5c>
 800f9fa:	230c      	movs	r3, #12
 800f9fc:	f8ca 3000 	str.w	r3, [sl]
 800fa00:	89a3      	ldrh	r3, [r4, #12]
 800fa02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa06:	81a3      	strh	r3, [r4, #12]
 800fa08:	f04f 30ff 	mov.w	r0, #4294967295
 800fa0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa10:	6921      	ldr	r1, [r4, #16]
 800fa12:	464a      	mov	r2, r9
 800fa14:	f7ff fe9a 	bl	800f74c <memcpy>
 800fa18:	89a3      	ldrh	r3, [r4, #12]
 800fa1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fa1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa22:	81a3      	strh	r3, [r4, #12]
 800fa24:	6126      	str	r6, [r4, #16]
 800fa26:	6165      	str	r5, [r4, #20]
 800fa28:	444e      	add	r6, r9
 800fa2a:	eba5 0509 	sub.w	r5, r5, r9
 800fa2e:	6026      	str	r6, [r4, #0]
 800fa30:	60a5      	str	r5, [r4, #8]
 800fa32:	463e      	mov	r6, r7
 800fa34:	42be      	cmp	r6, r7
 800fa36:	d900      	bls.n	800fa3a <__ssputs_r+0x86>
 800fa38:	463e      	mov	r6, r7
 800fa3a:	6820      	ldr	r0, [r4, #0]
 800fa3c:	4632      	mov	r2, r6
 800fa3e:	4641      	mov	r1, r8
 800fa40:	f000 faa8 	bl	800ff94 <memmove>
 800fa44:	68a3      	ldr	r3, [r4, #8]
 800fa46:	1b9b      	subs	r3, r3, r6
 800fa48:	60a3      	str	r3, [r4, #8]
 800fa4a:	6823      	ldr	r3, [r4, #0]
 800fa4c:	4433      	add	r3, r6
 800fa4e:	6023      	str	r3, [r4, #0]
 800fa50:	2000      	movs	r0, #0
 800fa52:	e7db      	b.n	800fa0c <__ssputs_r+0x58>
 800fa54:	462a      	mov	r2, r5
 800fa56:	f000 fab7 	bl	800ffc8 <_realloc_r>
 800fa5a:	4606      	mov	r6, r0
 800fa5c:	2800      	cmp	r0, #0
 800fa5e:	d1e1      	bne.n	800fa24 <__ssputs_r+0x70>
 800fa60:	6921      	ldr	r1, [r4, #16]
 800fa62:	4650      	mov	r0, sl
 800fa64:	f7ff fe88 	bl	800f778 <_free_r>
 800fa68:	e7c7      	b.n	800f9fa <__ssputs_r+0x46>
	...

0800fa6c <_svfiprintf_r>:
 800fa6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa70:	4698      	mov	r8, r3
 800fa72:	898b      	ldrh	r3, [r1, #12]
 800fa74:	061b      	lsls	r3, r3, #24
 800fa76:	b09d      	sub	sp, #116	; 0x74
 800fa78:	4607      	mov	r7, r0
 800fa7a:	460d      	mov	r5, r1
 800fa7c:	4614      	mov	r4, r2
 800fa7e:	d50e      	bpl.n	800fa9e <_svfiprintf_r+0x32>
 800fa80:	690b      	ldr	r3, [r1, #16]
 800fa82:	b963      	cbnz	r3, 800fa9e <_svfiprintf_r+0x32>
 800fa84:	2140      	movs	r1, #64	; 0x40
 800fa86:	f7ff fee3 	bl	800f850 <_malloc_r>
 800fa8a:	6028      	str	r0, [r5, #0]
 800fa8c:	6128      	str	r0, [r5, #16]
 800fa8e:	b920      	cbnz	r0, 800fa9a <_svfiprintf_r+0x2e>
 800fa90:	230c      	movs	r3, #12
 800fa92:	603b      	str	r3, [r7, #0]
 800fa94:	f04f 30ff 	mov.w	r0, #4294967295
 800fa98:	e0d1      	b.n	800fc3e <_svfiprintf_r+0x1d2>
 800fa9a:	2340      	movs	r3, #64	; 0x40
 800fa9c:	616b      	str	r3, [r5, #20]
 800fa9e:	2300      	movs	r3, #0
 800faa0:	9309      	str	r3, [sp, #36]	; 0x24
 800faa2:	2320      	movs	r3, #32
 800faa4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800faa8:	f8cd 800c 	str.w	r8, [sp, #12]
 800faac:	2330      	movs	r3, #48	; 0x30
 800faae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fc58 <_svfiprintf_r+0x1ec>
 800fab2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fab6:	f04f 0901 	mov.w	r9, #1
 800faba:	4623      	mov	r3, r4
 800fabc:	469a      	mov	sl, r3
 800fabe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fac2:	b10a      	cbz	r2, 800fac8 <_svfiprintf_r+0x5c>
 800fac4:	2a25      	cmp	r2, #37	; 0x25
 800fac6:	d1f9      	bne.n	800fabc <_svfiprintf_r+0x50>
 800fac8:	ebba 0b04 	subs.w	fp, sl, r4
 800facc:	d00b      	beq.n	800fae6 <_svfiprintf_r+0x7a>
 800face:	465b      	mov	r3, fp
 800fad0:	4622      	mov	r2, r4
 800fad2:	4629      	mov	r1, r5
 800fad4:	4638      	mov	r0, r7
 800fad6:	f7ff ff6d 	bl	800f9b4 <__ssputs_r>
 800fada:	3001      	adds	r0, #1
 800fadc:	f000 80aa 	beq.w	800fc34 <_svfiprintf_r+0x1c8>
 800fae0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fae2:	445a      	add	r2, fp
 800fae4:	9209      	str	r2, [sp, #36]	; 0x24
 800fae6:	f89a 3000 	ldrb.w	r3, [sl]
 800faea:	2b00      	cmp	r3, #0
 800faec:	f000 80a2 	beq.w	800fc34 <_svfiprintf_r+0x1c8>
 800faf0:	2300      	movs	r3, #0
 800faf2:	f04f 32ff 	mov.w	r2, #4294967295
 800faf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fafa:	f10a 0a01 	add.w	sl, sl, #1
 800fafe:	9304      	str	r3, [sp, #16]
 800fb00:	9307      	str	r3, [sp, #28]
 800fb02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fb06:	931a      	str	r3, [sp, #104]	; 0x68
 800fb08:	4654      	mov	r4, sl
 800fb0a:	2205      	movs	r2, #5
 800fb0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb10:	4851      	ldr	r0, [pc, #324]	; (800fc58 <_svfiprintf_r+0x1ec>)
 800fb12:	f7f0 fb5d 	bl	80001d0 <memchr>
 800fb16:	9a04      	ldr	r2, [sp, #16]
 800fb18:	b9d8      	cbnz	r0, 800fb52 <_svfiprintf_r+0xe6>
 800fb1a:	06d0      	lsls	r0, r2, #27
 800fb1c:	bf44      	itt	mi
 800fb1e:	2320      	movmi	r3, #32
 800fb20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb24:	0711      	lsls	r1, r2, #28
 800fb26:	bf44      	itt	mi
 800fb28:	232b      	movmi	r3, #43	; 0x2b
 800fb2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb2e:	f89a 3000 	ldrb.w	r3, [sl]
 800fb32:	2b2a      	cmp	r3, #42	; 0x2a
 800fb34:	d015      	beq.n	800fb62 <_svfiprintf_r+0xf6>
 800fb36:	9a07      	ldr	r2, [sp, #28]
 800fb38:	4654      	mov	r4, sl
 800fb3a:	2000      	movs	r0, #0
 800fb3c:	f04f 0c0a 	mov.w	ip, #10
 800fb40:	4621      	mov	r1, r4
 800fb42:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb46:	3b30      	subs	r3, #48	; 0x30
 800fb48:	2b09      	cmp	r3, #9
 800fb4a:	d94e      	bls.n	800fbea <_svfiprintf_r+0x17e>
 800fb4c:	b1b0      	cbz	r0, 800fb7c <_svfiprintf_r+0x110>
 800fb4e:	9207      	str	r2, [sp, #28]
 800fb50:	e014      	b.n	800fb7c <_svfiprintf_r+0x110>
 800fb52:	eba0 0308 	sub.w	r3, r0, r8
 800fb56:	fa09 f303 	lsl.w	r3, r9, r3
 800fb5a:	4313      	orrs	r3, r2
 800fb5c:	9304      	str	r3, [sp, #16]
 800fb5e:	46a2      	mov	sl, r4
 800fb60:	e7d2      	b.n	800fb08 <_svfiprintf_r+0x9c>
 800fb62:	9b03      	ldr	r3, [sp, #12]
 800fb64:	1d19      	adds	r1, r3, #4
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	9103      	str	r1, [sp, #12]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	bfbb      	ittet	lt
 800fb6e:	425b      	neglt	r3, r3
 800fb70:	f042 0202 	orrlt.w	r2, r2, #2
 800fb74:	9307      	strge	r3, [sp, #28]
 800fb76:	9307      	strlt	r3, [sp, #28]
 800fb78:	bfb8      	it	lt
 800fb7a:	9204      	strlt	r2, [sp, #16]
 800fb7c:	7823      	ldrb	r3, [r4, #0]
 800fb7e:	2b2e      	cmp	r3, #46	; 0x2e
 800fb80:	d10c      	bne.n	800fb9c <_svfiprintf_r+0x130>
 800fb82:	7863      	ldrb	r3, [r4, #1]
 800fb84:	2b2a      	cmp	r3, #42	; 0x2a
 800fb86:	d135      	bne.n	800fbf4 <_svfiprintf_r+0x188>
 800fb88:	9b03      	ldr	r3, [sp, #12]
 800fb8a:	1d1a      	adds	r2, r3, #4
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	9203      	str	r2, [sp, #12]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	bfb8      	it	lt
 800fb94:	f04f 33ff 	movlt.w	r3, #4294967295
 800fb98:	3402      	adds	r4, #2
 800fb9a:	9305      	str	r3, [sp, #20]
 800fb9c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fc68 <_svfiprintf_r+0x1fc>
 800fba0:	7821      	ldrb	r1, [r4, #0]
 800fba2:	2203      	movs	r2, #3
 800fba4:	4650      	mov	r0, sl
 800fba6:	f7f0 fb13 	bl	80001d0 <memchr>
 800fbaa:	b140      	cbz	r0, 800fbbe <_svfiprintf_r+0x152>
 800fbac:	2340      	movs	r3, #64	; 0x40
 800fbae:	eba0 000a 	sub.w	r0, r0, sl
 800fbb2:	fa03 f000 	lsl.w	r0, r3, r0
 800fbb6:	9b04      	ldr	r3, [sp, #16]
 800fbb8:	4303      	orrs	r3, r0
 800fbba:	3401      	adds	r4, #1
 800fbbc:	9304      	str	r3, [sp, #16]
 800fbbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbc2:	4826      	ldr	r0, [pc, #152]	; (800fc5c <_svfiprintf_r+0x1f0>)
 800fbc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fbc8:	2206      	movs	r2, #6
 800fbca:	f7f0 fb01 	bl	80001d0 <memchr>
 800fbce:	2800      	cmp	r0, #0
 800fbd0:	d038      	beq.n	800fc44 <_svfiprintf_r+0x1d8>
 800fbd2:	4b23      	ldr	r3, [pc, #140]	; (800fc60 <_svfiprintf_r+0x1f4>)
 800fbd4:	bb1b      	cbnz	r3, 800fc1e <_svfiprintf_r+0x1b2>
 800fbd6:	9b03      	ldr	r3, [sp, #12]
 800fbd8:	3307      	adds	r3, #7
 800fbda:	f023 0307 	bic.w	r3, r3, #7
 800fbde:	3308      	adds	r3, #8
 800fbe0:	9303      	str	r3, [sp, #12]
 800fbe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbe4:	4433      	add	r3, r6
 800fbe6:	9309      	str	r3, [sp, #36]	; 0x24
 800fbe8:	e767      	b.n	800faba <_svfiprintf_r+0x4e>
 800fbea:	fb0c 3202 	mla	r2, ip, r2, r3
 800fbee:	460c      	mov	r4, r1
 800fbf0:	2001      	movs	r0, #1
 800fbf2:	e7a5      	b.n	800fb40 <_svfiprintf_r+0xd4>
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	3401      	adds	r4, #1
 800fbf8:	9305      	str	r3, [sp, #20]
 800fbfa:	4619      	mov	r1, r3
 800fbfc:	f04f 0c0a 	mov.w	ip, #10
 800fc00:	4620      	mov	r0, r4
 800fc02:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc06:	3a30      	subs	r2, #48	; 0x30
 800fc08:	2a09      	cmp	r2, #9
 800fc0a:	d903      	bls.n	800fc14 <_svfiprintf_r+0x1a8>
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d0c5      	beq.n	800fb9c <_svfiprintf_r+0x130>
 800fc10:	9105      	str	r1, [sp, #20]
 800fc12:	e7c3      	b.n	800fb9c <_svfiprintf_r+0x130>
 800fc14:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc18:	4604      	mov	r4, r0
 800fc1a:	2301      	movs	r3, #1
 800fc1c:	e7f0      	b.n	800fc00 <_svfiprintf_r+0x194>
 800fc1e:	ab03      	add	r3, sp, #12
 800fc20:	9300      	str	r3, [sp, #0]
 800fc22:	462a      	mov	r2, r5
 800fc24:	4b0f      	ldr	r3, [pc, #60]	; (800fc64 <_svfiprintf_r+0x1f8>)
 800fc26:	a904      	add	r1, sp, #16
 800fc28:	4638      	mov	r0, r7
 800fc2a:	f3af 8000 	nop.w
 800fc2e:	1c42      	adds	r2, r0, #1
 800fc30:	4606      	mov	r6, r0
 800fc32:	d1d6      	bne.n	800fbe2 <_svfiprintf_r+0x176>
 800fc34:	89ab      	ldrh	r3, [r5, #12]
 800fc36:	065b      	lsls	r3, r3, #25
 800fc38:	f53f af2c 	bmi.w	800fa94 <_svfiprintf_r+0x28>
 800fc3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fc3e:	b01d      	add	sp, #116	; 0x74
 800fc40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc44:	ab03      	add	r3, sp, #12
 800fc46:	9300      	str	r3, [sp, #0]
 800fc48:	462a      	mov	r2, r5
 800fc4a:	4b06      	ldr	r3, [pc, #24]	; (800fc64 <_svfiprintf_r+0x1f8>)
 800fc4c:	a904      	add	r1, sp, #16
 800fc4e:	4638      	mov	r0, r7
 800fc50:	f000 f87a 	bl	800fd48 <_printf_i>
 800fc54:	e7eb      	b.n	800fc2e <_svfiprintf_r+0x1c2>
 800fc56:	bf00      	nop
 800fc58:	08010570 	.word	0x08010570
 800fc5c:	0801057a 	.word	0x0801057a
 800fc60:	00000000 	.word	0x00000000
 800fc64:	0800f9b5 	.word	0x0800f9b5
 800fc68:	08010576 	.word	0x08010576

0800fc6c <_printf_common>:
 800fc6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc70:	4616      	mov	r6, r2
 800fc72:	4699      	mov	r9, r3
 800fc74:	688a      	ldr	r2, [r1, #8]
 800fc76:	690b      	ldr	r3, [r1, #16]
 800fc78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fc7c:	4293      	cmp	r3, r2
 800fc7e:	bfb8      	it	lt
 800fc80:	4613      	movlt	r3, r2
 800fc82:	6033      	str	r3, [r6, #0]
 800fc84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fc88:	4607      	mov	r7, r0
 800fc8a:	460c      	mov	r4, r1
 800fc8c:	b10a      	cbz	r2, 800fc92 <_printf_common+0x26>
 800fc8e:	3301      	adds	r3, #1
 800fc90:	6033      	str	r3, [r6, #0]
 800fc92:	6823      	ldr	r3, [r4, #0]
 800fc94:	0699      	lsls	r1, r3, #26
 800fc96:	bf42      	ittt	mi
 800fc98:	6833      	ldrmi	r3, [r6, #0]
 800fc9a:	3302      	addmi	r3, #2
 800fc9c:	6033      	strmi	r3, [r6, #0]
 800fc9e:	6825      	ldr	r5, [r4, #0]
 800fca0:	f015 0506 	ands.w	r5, r5, #6
 800fca4:	d106      	bne.n	800fcb4 <_printf_common+0x48>
 800fca6:	f104 0a19 	add.w	sl, r4, #25
 800fcaa:	68e3      	ldr	r3, [r4, #12]
 800fcac:	6832      	ldr	r2, [r6, #0]
 800fcae:	1a9b      	subs	r3, r3, r2
 800fcb0:	42ab      	cmp	r3, r5
 800fcb2:	dc26      	bgt.n	800fd02 <_printf_common+0x96>
 800fcb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fcb8:	1e13      	subs	r3, r2, #0
 800fcba:	6822      	ldr	r2, [r4, #0]
 800fcbc:	bf18      	it	ne
 800fcbe:	2301      	movne	r3, #1
 800fcc0:	0692      	lsls	r2, r2, #26
 800fcc2:	d42b      	bmi.n	800fd1c <_printf_common+0xb0>
 800fcc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fcc8:	4649      	mov	r1, r9
 800fcca:	4638      	mov	r0, r7
 800fccc:	47c0      	blx	r8
 800fcce:	3001      	adds	r0, #1
 800fcd0:	d01e      	beq.n	800fd10 <_printf_common+0xa4>
 800fcd2:	6823      	ldr	r3, [r4, #0]
 800fcd4:	68e5      	ldr	r5, [r4, #12]
 800fcd6:	6832      	ldr	r2, [r6, #0]
 800fcd8:	f003 0306 	and.w	r3, r3, #6
 800fcdc:	2b04      	cmp	r3, #4
 800fcde:	bf08      	it	eq
 800fce0:	1aad      	subeq	r5, r5, r2
 800fce2:	68a3      	ldr	r3, [r4, #8]
 800fce4:	6922      	ldr	r2, [r4, #16]
 800fce6:	bf0c      	ite	eq
 800fce8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fcec:	2500      	movne	r5, #0
 800fcee:	4293      	cmp	r3, r2
 800fcf0:	bfc4      	itt	gt
 800fcf2:	1a9b      	subgt	r3, r3, r2
 800fcf4:	18ed      	addgt	r5, r5, r3
 800fcf6:	2600      	movs	r6, #0
 800fcf8:	341a      	adds	r4, #26
 800fcfa:	42b5      	cmp	r5, r6
 800fcfc:	d11a      	bne.n	800fd34 <_printf_common+0xc8>
 800fcfe:	2000      	movs	r0, #0
 800fd00:	e008      	b.n	800fd14 <_printf_common+0xa8>
 800fd02:	2301      	movs	r3, #1
 800fd04:	4652      	mov	r2, sl
 800fd06:	4649      	mov	r1, r9
 800fd08:	4638      	mov	r0, r7
 800fd0a:	47c0      	blx	r8
 800fd0c:	3001      	adds	r0, #1
 800fd0e:	d103      	bne.n	800fd18 <_printf_common+0xac>
 800fd10:	f04f 30ff 	mov.w	r0, #4294967295
 800fd14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd18:	3501      	adds	r5, #1
 800fd1a:	e7c6      	b.n	800fcaa <_printf_common+0x3e>
 800fd1c:	18e1      	adds	r1, r4, r3
 800fd1e:	1c5a      	adds	r2, r3, #1
 800fd20:	2030      	movs	r0, #48	; 0x30
 800fd22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fd26:	4422      	add	r2, r4
 800fd28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fd2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fd30:	3302      	adds	r3, #2
 800fd32:	e7c7      	b.n	800fcc4 <_printf_common+0x58>
 800fd34:	2301      	movs	r3, #1
 800fd36:	4622      	mov	r2, r4
 800fd38:	4649      	mov	r1, r9
 800fd3a:	4638      	mov	r0, r7
 800fd3c:	47c0      	blx	r8
 800fd3e:	3001      	adds	r0, #1
 800fd40:	d0e6      	beq.n	800fd10 <_printf_common+0xa4>
 800fd42:	3601      	adds	r6, #1
 800fd44:	e7d9      	b.n	800fcfa <_printf_common+0x8e>
	...

0800fd48 <_printf_i>:
 800fd48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fd4c:	7e0f      	ldrb	r7, [r1, #24]
 800fd4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fd50:	2f78      	cmp	r7, #120	; 0x78
 800fd52:	4691      	mov	r9, r2
 800fd54:	4680      	mov	r8, r0
 800fd56:	460c      	mov	r4, r1
 800fd58:	469a      	mov	sl, r3
 800fd5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fd5e:	d807      	bhi.n	800fd70 <_printf_i+0x28>
 800fd60:	2f62      	cmp	r7, #98	; 0x62
 800fd62:	d80a      	bhi.n	800fd7a <_printf_i+0x32>
 800fd64:	2f00      	cmp	r7, #0
 800fd66:	f000 80d8 	beq.w	800ff1a <_printf_i+0x1d2>
 800fd6a:	2f58      	cmp	r7, #88	; 0x58
 800fd6c:	f000 80a3 	beq.w	800feb6 <_printf_i+0x16e>
 800fd70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fd74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fd78:	e03a      	b.n	800fdf0 <_printf_i+0xa8>
 800fd7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fd7e:	2b15      	cmp	r3, #21
 800fd80:	d8f6      	bhi.n	800fd70 <_printf_i+0x28>
 800fd82:	a101      	add	r1, pc, #4	; (adr r1, 800fd88 <_printf_i+0x40>)
 800fd84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fd88:	0800fde1 	.word	0x0800fde1
 800fd8c:	0800fdf5 	.word	0x0800fdf5
 800fd90:	0800fd71 	.word	0x0800fd71
 800fd94:	0800fd71 	.word	0x0800fd71
 800fd98:	0800fd71 	.word	0x0800fd71
 800fd9c:	0800fd71 	.word	0x0800fd71
 800fda0:	0800fdf5 	.word	0x0800fdf5
 800fda4:	0800fd71 	.word	0x0800fd71
 800fda8:	0800fd71 	.word	0x0800fd71
 800fdac:	0800fd71 	.word	0x0800fd71
 800fdb0:	0800fd71 	.word	0x0800fd71
 800fdb4:	0800ff01 	.word	0x0800ff01
 800fdb8:	0800fe25 	.word	0x0800fe25
 800fdbc:	0800fee3 	.word	0x0800fee3
 800fdc0:	0800fd71 	.word	0x0800fd71
 800fdc4:	0800fd71 	.word	0x0800fd71
 800fdc8:	0800ff23 	.word	0x0800ff23
 800fdcc:	0800fd71 	.word	0x0800fd71
 800fdd0:	0800fe25 	.word	0x0800fe25
 800fdd4:	0800fd71 	.word	0x0800fd71
 800fdd8:	0800fd71 	.word	0x0800fd71
 800fddc:	0800feeb 	.word	0x0800feeb
 800fde0:	682b      	ldr	r3, [r5, #0]
 800fde2:	1d1a      	adds	r2, r3, #4
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	602a      	str	r2, [r5, #0]
 800fde8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fdec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fdf0:	2301      	movs	r3, #1
 800fdf2:	e0a3      	b.n	800ff3c <_printf_i+0x1f4>
 800fdf4:	6820      	ldr	r0, [r4, #0]
 800fdf6:	6829      	ldr	r1, [r5, #0]
 800fdf8:	0606      	lsls	r6, r0, #24
 800fdfa:	f101 0304 	add.w	r3, r1, #4
 800fdfe:	d50a      	bpl.n	800fe16 <_printf_i+0xce>
 800fe00:	680e      	ldr	r6, [r1, #0]
 800fe02:	602b      	str	r3, [r5, #0]
 800fe04:	2e00      	cmp	r6, #0
 800fe06:	da03      	bge.n	800fe10 <_printf_i+0xc8>
 800fe08:	232d      	movs	r3, #45	; 0x2d
 800fe0a:	4276      	negs	r6, r6
 800fe0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe10:	485e      	ldr	r0, [pc, #376]	; (800ff8c <_printf_i+0x244>)
 800fe12:	230a      	movs	r3, #10
 800fe14:	e019      	b.n	800fe4a <_printf_i+0x102>
 800fe16:	680e      	ldr	r6, [r1, #0]
 800fe18:	602b      	str	r3, [r5, #0]
 800fe1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fe1e:	bf18      	it	ne
 800fe20:	b236      	sxthne	r6, r6
 800fe22:	e7ef      	b.n	800fe04 <_printf_i+0xbc>
 800fe24:	682b      	ldr	r3, [r5, #0]
 800fe26:	6820      	ldr	r0, [r4, #0]
 800fe28:	1d19      	adds	r1, r3, #4
 800fe2a:	6029      	str	r1, [r5, #0]
 800fe2c:	0601      	lsls	r1, r0, #24
 800fe2e:	d501      	bpl.n	800fe34 <_printf_i+0xec>
 800fe30:	681e      	ldr	r6, [r3, #0]
 800fe32:	e002      	b.n	800fe3a <_printf_i+0xf2>
 800fe34:	0646      	lsls	r6, r0, #25
 800fe36:	d5fb      	bpl.n	800fe30 <_printf_i+0xe8>
 800fe38:	881e      	ldrh	r6, [r3, #0]
 800fe3a:	4854      	ldr	r0, [pc, #336]	; (800ff8c <_printf_i+0x244>)
 800fe3c:	2f6f      	cmp	r7, #111	; 0x6f
 800fe3e:	bf0c      	ite	eq
 800fe40:	2308      	moveq	r3, #8
 800fe42:	230a      	movne	r3, #10
 800fe44:	2100      	movs	r1, #0
 800fe46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fe4a:	6865      	ldr	r5, [r4, #4]
 800fe4c:	60a5      	str	r5, [r4, #8]
 800fe4e:	2d00      	cmp	r5, #0
 800fe50:	bfa2      	ittt	ge
 800fe52:	6821      	ldrge	r1, [r4, #0]
 800fe54:	f021 0104 	bicge.w	r1, r1, #4
 800fe58:	6021      	strge	r1, [r4, #0]
 800fe5a:	b90e      	cbnz	r6, 800fe60 <_printf_i+0x118>
 800fe5c:	2d00      	cmp	r5, #0
 800fe5e:	d04d      	beq.n	800fefc <_printf_i+0x1b4>
 800fe60:	4615      	mov	r5, r2
 800fe62:	fbb6 f1f3 	udiv	r1, r6, r3
 800fe66:	fb03 6711 	mls	r7, r3, r1, r6
 800fe6a:	5dc7      	ldrb	r7, [r0, r7]
 800fe6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fe70:	4637      	mov	r7, r6
 800fe72:	42bb      	cmp	r3, r7
 800fe74:	460e      	mov	r6, r1
 800fe76:	d9f4      	bls.n	800fe62 <_printf_i+0x11a>
 800fe78:	2b08      	cmp	r3, #8
 800fe7a:	d10b      	bne.n	800fe94 <_printf_i+0x14c>
 800fe7c:	6823      	ldr	r3, [r4, #0]
 800fe7e:	07de      	lsls	r6, r3, #31
 800fe80:	d508      	bpl.n	800fe94 <_printf_i+0x14c>
 800fe82:	6923      	ldr	r3, [r4, #16]
 800fe84:	6861      	ldr	r1, [r4, #4]
 800fe86:	4299      	cmp	r1, r3
 800fe88:	bfde      	ittt	le
 800fe8a:	2330      	movle	r3, #48	; 0x30
 800fe8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fe90:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fe94:	1b52      	subs	r2, r2, r5
 800fe96:	6122      	str	r2, [r4, #16]
 800fe98:	f8cd a000 	str.w	sl, [sp]
 800fe9c:	464b      	mov	r3, r9
 800fe9e:	aa03      	add	r2, sp, #12
 800fea0:	4621      	mov	r1, r4
 800fea2:	4640      	mov	r0, r8
 800fea4:	f7ff fee2 	bl	800fc6c <_printf_common>
 800fea8:	3001      	adds	r0, #1
 800feaa:	d14c      	bne.n	800ff46 <_printf_i+0x1fe>
 800feac:	f04f 30ff 	mov.w	r0, #4294967295
 800feb0:	b004      	add	sp, #16
 800feb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800feb6:	4835      	ldr	r0, [pc, #212]	; (800ff8c <_printf_i+0x244>)
 800feb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800febc:	6829      	ldr	r1, [r5, #0]
 800febe:	6823      	ldr	r3, [r4, #0]
 800fec0:	f851 6b04 	ldr.w	r6, [r1], #4
 800fec4:	6029      	str	r1, [r5, #0]
 800fec6:	061d      	lsls	r5, r3, #24
 800fec8:	d514      	bpl.n	800fef4 <_printf_i+0x1ac>
 800feca:	07df      	lsls	r7, r3, #31
 800fecc:	bf44      	itt	mi
 800fece:	f043 0320 	orrmi.w	r3, r3, #32
 800fed2:	6023      	strmi	r3, [r4, #0]
 800fed4:	b91e      	cbnz	r6, 800fede <_printf_i+0x196>
 800fed6:	6823      	ldr	r3, [r4, #0]
 800fed8:	f023 0320 	bic.w	r3, r3, #32
 800fedc:	6023      	str	r3, [r4, #0]
 800fede:	2310      	movs	r3, #16
 800fee0:	e7b0      	b.n	800fe44 <_printf_i+0xfc>
 800fee2:	6823      	ldr	r3, [r4, #0]
 800fee4:	f043 0320 	orr.w	r3, r3, #32
 800fee8:	6023      	str	r3, [r4, #0]
 800feea:	2378      	movs	r3, #120	; 0x78
 800feec:	4828      	ldr	r0, [pc, #160]	; (800ff90 <_printf_i+0x248>)
 800feee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fef2:	e7e3      	b.n	800febc <_printf_i+0x174>
 800fef4:	0659      	lsls	r1, r3, #25
 800fef6:	bf48      	it	mi
 800fef8:	b2b6      	uxthmi	r6, r6
 800fefa:	e7e6      	b.n	800feca <_printf_i+0x182>
 800fefc:	4615      	mov	r5, r2
 800fefe:	e7bb      	b.n	800fe78 <_printf_i+0x130>
 800ff00:	682b      	ldr	r3, [r5, #0]
 800ff02:	6826      	ldr	r6, [r4, #0]
 800ff04:	6961      	ldr	r1, [r4, #20]
 800ff06:	1d18      	adds	r0, r3, #4
 800ff08:	6028      	str	r0, [r5, #0]
 800ff0a:	0635      	lsls	r5, r6, #24
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	d501      	bpl.n	800ff14 <_printf_i+0x1cc>
 800ff10:	6019      	str	r1, [r3, #0]
 800ff12:	e002      	b.n	800ff1a <_printf_i+0x1d2>
 800ff14:	0670      	lsls	r0, r6, #25
 800ff16:	d5fb      	bpl.n	800ff10 <_printf_i+0x1c8>
 800ff18:	8019      	strh	r1, [r3, #0]
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	6123      	str	r3, [r4, #16]
 800ff1e:	4615      	mov	r5, r2
 800ff20:	e7ba      	b.n	800fe98 <_printf_i+0x150>
 800ff22:	682b      	ldr	r3, [r5, #0]
 800ff24:	1d1a      	adds	r2, r3, #4
 800ff26:	602a      	str	r2, [r5, #0]
 800ff28:	681d      	ldr	r5, [r3, #0]
 800ff2a:	6862      	ldr	r2, [r4, #4]
 800ff2c:	2100      	movs	r1, #0
 800ff2e:	4628      	mov	r0, r5
 800ff30:	f7f0 f94e 	bl	80001d0 <memchr>
 800ff34:	b108      	cbz	r0, 800ff3a <_printf_i+0x1f2>
 800ff36:	1b40      	subs	r0, r0, r5
 800ff38:	6060      	str	r0, [r4, #4]
 800ff3a:	6863      	ldr	r3, [r4, #4]
 800ff3c:	6123      	str	r3, [r4, #16]
 800ff3e:	2300      	movs	r3, #0
 800ff40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff44:	e7a8      	b.n	800fe98 <_printf_i+0x150>
 800ff46:	6923      	ldr	r3, [r4, #16]
 800ff48:	462a      	mov	r2, r5
 800ff4a:	4649      	mov	r1, r9
 800ff4c:	4640      	mov	r0, r8
 800ff4e:	47d0      	blx	sl
 800ff50:	3001      	adds	r0, #1
 800ff52:	d0ab      	beq.n	800feac <_printf_i+0x164>
 800ff54:	6823      	ldr	r3, [r4, #0]
 800ff56:	079b      	lsls	r3, r3, #30
 800ff58:	d413      	bmi.n	800ff82 <_printf_i+0x23a>
 800ff5a:	68e0      	ldr	r0, [r4, #12]
 800ff5c:	9b03      	ldr	r3, [sp, #12]
 800ff5e:	4298      	cmp	r0, r3
 800ff60:	bfb8      	it	lt
 800ff62:	4618      	movlt	r0, r3
 800ff64:	e7a4      	b.n	800feb0 <_printf_i+0x168>
 800ff66:	2301      	movs	r3, #1
 800ff68:	4632      	mov	r2, r6
 800ff6a:	4649      	mov	r1, r9
 800ff6c:	4640      	mov	r0, r8
 800ff6e:	47d0      	blx	sl
 800ff70:	3001      	adds	r0, #1
 800ff72:	d09b      	beq.n	800feac <_printf_i+0x164>
 800ff74:	3501      	adds	r5, #1
 800ff76:	68e3      	ldr	r3, [r4, #12]
 800ff78:	9903      	ldr	r1, [sp, #12]
 800ff7a:	1a5b      	subs	r3, r3, r1
 800ff7c:	42ab      	cmp	r3, r5
 800ff7e:	dcf2      	bgt.n	800ff66 <_printf_i+0x21e>
 800ff80:	e7eb      	b.n	800ff5a <_printf_i+0x212>
 800ff82:	2500      	movs	r5, #0
 800ff84:	f104 0619 	add.w	r6, r4, #25
 800ff88:	e7f5      	b.n	800ff76 <_printf_i+0x22e>
 800ff8a:	bf00      	nop
 800ff8c:	08010581 	.word	0x08010581
 800ff90:	08010592 	.word	0x08010592

0800ff94 <memmove>:
 800ff94:	4288      	cmp	r0, r1
 800ff96:	b510      	push	{r4, lr}
 800ff98:	eb01 0402 	add.w	r4, r1, r2
 800ff9c:	d902      	bls.n	800ffa4 <memmove+0x10>
 800ff9e:	4284      	cmp	r4, r0
 800ffa0:	4623      	mov	r3, r4
 800ffa2:	d807      	bhi.n	800ffb4 <memmove+0x20>
 800ffa4:	1e43      	subs	r3, r0, #1
 800ffa6:	42a1      	cmp	r1, r4
 800ffa8:	d008      	beq.n	800ffbc <memmove+0x28>
 800ffaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ffae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ffb2:	e7f8      	b.n	800ffa6 <memmove+0x12>
 800ffb4:	4402      	add	r2, r0
 800ffb6:	4601      	mov	r1, r0
 800ffb8:	428a      	cmp	r2, r1
 800ffba:	d100      	bne.n	800ffbe <memmove+0x2a>
 800ffbc:	bd10      	pop	{r4, pc}
 800ffbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ffc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ffc6:	e7f7      	b.n	800ffb8 <memmove+0x24>

0800ffc8 <_realloc_r>:
 800ffc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffcc:	4680      	mov	r8, r0
 800ffce:	4614      	mov	r4, r2
 800ffd0:	460e      	mov	r6, r1
 800ffd2:	b921      	cbnz	r1, 800ffde <_realloc_r+0x16>
 800ffd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ffd8:	4611      	mov	r1, r2
 800ffda:	f7ff bc39 	b.w	800f850 <_malloc_r>
 800ffde:	b92a      	cbnz	r2, 800ffec <_realloc_r+0x24>
 800ffe0:	f7ff fbca 	bl	800f778 <_free_r>
 800ffe4:	4625      	mov	r5, r4
 800ffe6:	4628      	mov	r0, r5
 800ffe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffec:	f000 f81b 	bl	8010026 <_malloc_usable_size_r>
 800fff0:	4284      	cmp	r4, r0
 800fff2:	4607      	mov	r7, r0
 800fff4:	d802      	bhi.n	800fffc <_realloc_r+0x34>
 800fff6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fffa:	d812      	bhi.n	8010022 <_realloc_r+0x5a>
 800fffc:	4621      	mov	r1, r4
 800fffe:	4640      	mov	r0, r8
 8010000:	f7ff fc26 	bl	800f850 <_malloc_r>
 8010004:	4605      	mov	r5, r0
 8010006:	2800      	cmp	r0, #0
 8010008:	d0ed      	beq.n	800ffe6 <_realloc_r+0x1e>
 801000a:	42bc      	cmp	r4, r7
 801000c:	4622      	mov	r2, r4
 801000e:	4631      	mov	r1, r6
 8010010:	bf28      	it	cs
 8010012:	463a      	movcs	r2, r7
 8010014:	f7ff fb9a 	bl	800f74c <memcpy>
 8010018:	4631      	mov	r1, r6
 801001a:	4640      	mov	r0, r8
 801001c:	f7ff fbac 	bl	800f778 <_free_r>
 8010020:	e7e1      	b.n	800ffe6 <_realloc_r+0x1e>
 8010022:	4635      	mov	r5, r6
 8010024:	e7df      	b.n	800ffe6 <_realloc_r+0x1e>

08010026 <_malloc_usable_size_r>:
 8010026:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801002a:	1f18      	subs	r0, r3, #4
 801002c:	2b00      	cmp	r3, #0
 801002e:	bfbc      	itt	lt
 8010030:	580b      	ldrlt	r3, [r1, r0]
 8010032:	18c0      	addlt	r0, r0, r3
 8010034:	4770      	bx	lr
	...

08010038 <_init>:
 8010038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801003a:	bf00      	nop
 801003c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801003e:	bc08      	pop	{r3}
 8010040:	469e      	mov	lr, r3
 8010042:	4770      	bx	lr

08010044 <_fini>:
 8010044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010046:	bf00      	nop
 8010048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801004a:	bc08      	pop	{r3}
 801004c:	469e      	mov	lr, r3
 801004e:	4770      	bx	lr
