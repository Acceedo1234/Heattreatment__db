
heattreatment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f154  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  0800f2e4  0800f2e4  0001f2e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f810  0800f810  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800f810  0800f810  0001f810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f818  0800f818  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f818  0800f818  0001f818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800f820  0800f820  0001f820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800f828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e4  20000070  0800f898  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000854  0800f898  00020854  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f039  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004adc  00000000  00000000  0003f0d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001928  00000000  00000000  00043bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001788  00000000  00000000  000454e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007048  00000000  00000000  00046c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000220aa  00000000  00000000  0004dcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e25a1  00000000  00000000  0006fd5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001522fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006dbc  00000000  00000000  0015234c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f2cc 	.word	0x0800f2cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800f2cc 	.word	0x0800f2cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ESPRXDataSeg>:
extern void W25qxx_EraseSector(uint32_t SectorAddr);

void ReadOnlineData(void);

void ESPRXDataSeg(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af00      	add	r7, sp, #0
	uint16_t ReceivePLCData,ReceivePLCData2,ReceivePLCData3,ReceivePLCData4;
	uint16_t ReceivePLCData7;
	uint8_t ReceivePLCData11,ReceivePLCData12,ReceivePLCData13,ReceivePLCData14;
	uint8_t ReceivePLCData5,ReceivePLCData6,ReceivePLCData8,ReceivePLCData9,ReceivePLCData10;
	uint8_t UpdateOLdataMem  =0;
 800057a:	2300      	movs	r3, #0
 800057c:	77fb      	strb	r3, [r7, #31]
	uint8_t FlashWriteOLdata[10];
	if(!RxCompleteU2C1WIFI){return;}
 800057e:	4bb2      	ldr	r3, [pc, #712]	; (8000848 <ESPRXDataSeg+0x2d4>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b00      	cmp	r3, #0
 8000584:	f000 821d 	beq.w	80009c2 <ESPRXDataSeg+0x44e>
	RxCompleteU2C1WIFI=0;
 8000588:	4baf      	ldr	r3, [pc, #700]	; (8000848 <ESPRXDataSeg+0x2d4>)
 800058a:	2200      	movs	r2, #0
 800058c:	701a      	strb	r2, [r3, #0]

	ReceivePLCData  = Uart_rx_buffer[3]+(Uart_rx_buffer[2]*10)+(Uart_rx_buffer[1]*100)+(Uart_rx_buffer[0]*1000);//Metal Temperature set
 800058e:	4baf      	ldr	r3, [pc, #700]	; (800084c <ESPRXDataSeg+0x2d8>)
 8000590:	78db      	ldrb	r3, [r3, #3]
 8000592:	b29a      	uxth	r2, r3
 8000594:	4bad      	ldr	r3, [pc, #692]	; (800084c <ESPRXDataSeg+0x2d8>)
 8000596:	785b      	ldrb	r3, [r3, #1]
 8000598:	b29b      	uxth	r3, r3
 800059a:	4619      	mov	r1, r3
 800059c:	0089      	lsls	r1, r1, #2
 800059e:	440b      	add	r3, r1
 80005a0:	4619      	mov	r1, r3
 80005a2:	0088      	lsls	r0, r1, #2
 80005a4:	4619      	mov	r1, r3
 80005a6:	4603      	mov	r3, r0
 80005a8:	440b      	add	r3, r1
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	b299      	uxth	r1, r3
 80005ae:	4ba7      	ldr	r3, [pc, #668]	; (800084c <ESPRXDataSeg+0x2d8>)
 80005b0:	789b      	ldrb	r3, [r3, #2]
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	4618      	mov	r0, r3
 80005b6:	0080      	lsls	r0, r0, #2
 80005b8:	4403      	add	r3, r0
 80005ba:	005b      	lsls	r3, r3, #1
 80005bc:	b29b      	uxth	r3, r3
 80005be:	440b      	add	r3, r1
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	4413      	add	r3, r2
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	4ba1      	ldr	r3, [pc, #644]	; (800084c <ESPRXDataSeg+0x2d8>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	4619      	mov	r1, r3
 80005ce:	0149      	lsls	r1, r1, #5
 80005d0:	1ac9      	subs	r1, r1, r3
 80005d2:	0089      	lsls	r1, r1, #2
 80005d4:	440b      	add	r3, r1
 80005d6:	00db      	lsls	r3, r3, #3
 80005d8:	b29b      	uxth	r3, r3
 80005da:	4413      	add	r3, r2
 80005dc:	83bb      	strh	r3, [r7, #28]
	ReceivePLCData2 = Uart_rx_buffer[7]+(Uart_rx_buffer[6]*10)+(Uart_rx_buffer[5]*100)+(Uart_rx_buffer[4]*1000);//Metal Temperature high set
 80005de:	4b9b      	ldr	r3, [pc, #620]	; (800084c <ESPRXDataSeg+0x2d8>)
 80005e0:	79db      	ldrb	r3, [r3, #7]
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	4b99      	ldr	r3, [pc, #612]	; (800084c <ESPRXDataSeg+0x2d8>)
 80005e6:	795b      	ldrb	r3, [r3, #5]
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	4619      	mov	r1, r3
 80005ec:	0089      	lsls	r1, r1, #2
 80005ee:	440b      	add	r3, r1
 80005f0:	4619      	mov	r1, r3
 80005f2:	0088      	lsls	r0, r1, #2
 80005f4:	4619      	mov	r1, r3
 80005f6:	4603      	mov	r3, r0
 80005f8:	440b      	add	r3, r1
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	b299      	uxth	r1, r3
 80005fe:	4b93      	ldr	r3, [pc, #588]	; (800084c <ESPRXDataSeg+0x2d8>)
 8000600:	799b      	ldrb	r3, [r3, #6]
 8000602:	b29b      	uxth	r3, r3
 8000604:	4618      	mov	r0, r3
 8000606:	0080      	lsls	r0, r0, #2
 8000608:	4403      	add	r3, r0
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	b29b      	uxth	r3, r3
 800060e:	440b      	add	r3, r1
 8000610:	b29b      	uxth	r3, r3
 8000612:	4413      	add	r3, r2
 8000614:	b29a      	uxth	r2, r3
 8000616:	4b8d      	ldr	r3, [pc, #564]	; (800084c <ESPRXDataSeg+0x2d8>)
 8000618:	791b      	ldrb	r3, [r3, #4]
 800061a:	b29b      	uxth	r3, r3
 800061c:	4619      	mov	r1, r3
 800061e:	0149      	lsls	r1, r1, #5
 8000620:	1ac9      	subs	r1, r1, r3
 8000622:	0089      	lsls	r1, r1, #2
 8000624:	440b      	add	r3, r1
 8000626:	00db      	lsls	r3, r3, #3
 8000628:	b29b      	uxth	r3, r3
 800062a:	4413      	add	r3, r2
 800062c:	837b      	strh	r3, [r7, #26]
	ReceivePLCData3 = Uart_rx_buffer[11]+(Uart_rx_buffer[10]*10)+(Uart_rx_buffer[9]*100)+(Uart_rx_buffer[8]*1000); //Metal Temperature Low set
 800062e:	4b87      	ldr	r3, [pc, #540]	; (800084c <ESPRXDataSeg+0x2d8>)
 8000630:	7adb      	ldrb	r3, [r3, #11]
 8000632:	b29a      	uxth	r2, r3
 8000634:	4b85      	ldr	r3, [pc, #532]	; (800084c <ESPRXDataSeg+0x2d8>)
 8000636:	7a5b      	ldrb	r3, [r3, #9]
 8000638:	b29b      	uxth	r3, r3
 800063a:	4619      	mov	r1, r3
 800063c:	0089      	lsls	r1, r1, #2
 800063e:	440b      	add	r3, r1
 8000640:	4619      	mov	r1, r3
 8000642:	0088      	lsls	r0, r1, #2
 8000644:	4619      	mov	r1, r3
 8000646:	4603      	mov	r3, r0
 8000648:	440b      	add	r3, r1
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	b299      	uxth	r1, r3
 800064e:	4b7f      	ldr	r3, [pc, #508]	; (800084c <ESPRXDataSeg+0x2d8>)
 8000650:	7a9b      	ldrb	r3, [r3, #10]
 8000652:	b29b      	uxth	r3, r3
 8000654:	4618      	mov	r0, r3
 8000656:	0080      	lsls	r0, r0, #2
 8000658:	4403      	add	r3, r0
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	b29b      	uxth	r3, r3
 800065e:	440b      	add	r3, r1
 8000660:	b29b      	uxth	r3, r3
 8000662:	4413      	add	r3, r2
 8000664:	b29a      	uxth	r2, r3
 8000666:	4b79      	ldr	r3, [pc, #484]	; (800084c <ESPRXDataSeg+0x2d8>)
 8000668:	7a1b      	ldrb	r3, [r3, #8]
 800066a:	b29b      	uxth	r3, r3
 800066c:	4619      	mov	r1, r3
 800066e:	0149      	lsls	r1, r1, #5
 8000670:	1ac9      	subs	r1, r1, r3
 8000672:	0089      	lsls	r1, r1, #2
 8000674:	440b      	add	r3, r1
 8000676:	00db      	lsls	r3, r3, #3
 8000678:	b29b      	uxth	r3, r3
 800067a:	4413      	add	r3, r2
 800067c:	833b      	strh	r3, [r7, #24]
	ReceivePLCData4 = Uart_rx_buffer[15]+(Uart_rx_buffer[14]*10)+(Uart_rx_buffer[13]*100)+(Uart_rx_buffer[12]*1000);//Process Time
 800067e:	4b73      	ldr	r3, [pc, #460]	; (800084c <ESPRXDataSeg+0x2d8>)
 8000680:	7bdb      	ldrb	r3, [r3, #15]
 8000682:	b29a      	uxth	r2, r3
 8000684:	4b71      	ldr	r3, [pc, #452]	; (800084c <ESPRXDataSeg+0x2d8>)
 8000686:	7b5b      	ldrb	r3, [r3, #13]
 8000688:	b29b      	uxth	r3, r3
 800068a:	4619      	mov	r1, r3
 800068c:	0089      	lsls	r1, r1, #2
 800068e:	440b      	add	r3, r1
 8000690:	4619      	mov	r1, r3
 8000692:	0088      	lsls	r0, r1, #2
 8000694:	4619      	mov	r1, r3
 8000696:	4603      	mov	r3, r0
 8000698:	440b      	add	r3, r1
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	b299      	uxth	r1, r3
 800069e:	4b6b      	ldr	r3, [pc, #428]	; (800084c <ESPRXDataSeg+0x2d8>)
 80006a0:	7b9b      	ldrb	r3, [r3, #14]
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	4618      	mov	r0, r3
 80006a6:	0080      	lsls	r0, r0, #2
 80006a8:	4403      	add	r3, r0
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	440b      	add	r3, r1
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	4413      	add	r3, r2
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	4b65      	ldr	r3, [pc, #404]	; (800084c <ESPRXDataSeg+0x2d8>)
 80006b8:	7b1b      	ldrb	r3, [r3, #12]
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	4619      	mov	r1, r3
 80006be:	0149      	lsls	r1, r1, #5
 80006c0:	1ac9      	subs	r1, r1, r3
 80006c2:	0089      	lsls	r1, r1, #2
 80006c4:	440b      	add	r3, r1
 80006c6:	00db      	lsls	r3, r3, #3
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	4413      	add	r3, r2
 80006cc:	82fb      	strh	r3, [r7, #22]
	//Date,Month,Year
	ReceivePLCData5 = Uart_rx_buffer[17]+(Uart_rx_buffer[16]*10);//SW_Date
 80006ce:	4b5f      	ldr	r3, [pc, #380]	; (800084c <ESPRXDataSeg+0x2d8>)
 80006d0:	7c5a      	ldrb	r2, [r3, #17]
 80006d2:	4b5e      	ldr	r3, [pc, #376]	; (800084c <ESPRXDataSeg+0x2d8>)
 80006d4:	7c1b      	ldrb	r3, [r3, #16]
 80006d6:	4619      	mov	r1, r3
 80006d8:	0089      	lsls	r1, r1, #2
 80006da:	440b      	add	r3, r1
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	4413      	add	r3, r2
 80006e2:	757b      	strb	r3, [r7, #21]
	ReceivePLCData6 = Uart_rx_buffer[19]+(Uart_rx_buffer[18]*10);//SW_Month
 80006e4:	4b59      	ldr	r3, [pc, #356]	; (800084c <ESPRXDataSeg+0x2d8>)
 80006e6:	7cda      	ldrb	r2, [r3, #19]
 80006e8:	4b58      	ldr	r3, [pc, #352]	; (800084c <ESPRXDataSeg+0x2d8>)
 80006ea:	7c9b      	ldrb	r3, [r3, #18]
 80006ec:	4619      	mov	r1, r3
 80006ee:	0089      	lsls	r1, r1, #2
 80006f0:	440b      	add	r3, r1
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4413      	add	r3, r2
 80006f8:	753b      	strb	r3, [r7, #20]
	ReceivePLCData7 = Uart_rx_buffer[23]+(Uart_rx_buffer[22]*10)+(Uart_rx_buffer[21]*100)+(Uart_rx_buffer[20]*1000);//SW_Year
 80006fa:	4b54      	ldr	r3, [pc, #336]	; (800084c <ESPRXDataSeg+0x2d8>)
 80006fc:	7ddb      	ldrb	r3, [r3, #23]
 80006fe:	b29a      	uxth	r2, r3
 8000700:	4b52      	ldr	r3, [pc, #328]	; (800084c <ESPRXDataSeg+0x2d8>)
 8000702:	7d5b      	ldrb	r3, [r3, #21]
 8000704:	b29b      	uxth	r3, r3
 8000706:	4619      	mov	r1, r3
 8000708:	0089      	lsls	r1, r1, #2
 800070a:	440b      	add	r3, r1
 800070c:	4619      	mov	r1, r3
 800070e:	0088      	lsls	r0, r1, #2
 8000710:	4619      	mov	r1, r3
 8000712:	4603      	mov	r3, r0
 8000714:	440b      	add	r3, r1
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	b299      	uxth	r1, r3
 800071a:	4b4c      	ldr	r3, [pc, #304]	; (800084c <ESPRXDataSeg+0x2d8>)
 800071c:	7d9b      	ldrb	r3, [r3, #22]
 800071e:	b29b      	uxth	r3, r3
 8000720:	4618      	mov	r0, r3
 8000722:	0080      	lsls	r0, r0, #2
 8000724:	4403      	add	r3, r0
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	b29b      	uxth	r3, r3
 800072a:	440b      	add	r3, r1
 800072c:	b29b      	uxth	r3, r3
 800072e:	4413      	add	r3, r2
 8000730:	b29a      	uxth	r2, r3
 8000732:	4b46      	ldr	r3, [pc, #280]	; (800084c <ESPRXDataSeg+0x2d8>)
 8000734:	7d1b      	ldrb	r3, [r3, #20]
 8000736:	b29b      	uxth	r3, r3
 8000738:	4619      	mov	r1, r3
 800073a:	0149      	lsls	r1, r1, #5
 800073c:	1ac9      	subs	r1, r1, r3
 800073e:	0089      	lsls	r1, r1, #2
 8000740:	440b      	add	r3, r1
 8000742:	00db      	lsls	r3, r3, #3
 8000744:	b29b      	uxth	r3, r3
 8000746:	4413      	add	r3, r2
 8000748:	827b      	strh	r3, [r7, #18]
	ReceivePLCData8 = Uart_rx_buffer[25]+(Uart_rx_buffer[24]*10);//SW_Hour
 800074a:	4b40      	ldr	r3, [pc, #256]	; (800084c <ESPRXDataSeg+0x2d8>)
 800074c:	7e5a      	ldrb	r2, [r3, #25]
 800074e:	4b3f      	ldr	r3, [pc, #252]	; (800084c <ESPRXDataSeg+0x2d8>)
 8000750:	7e1b      	ldrb	r3, [r3, #24]
 8000752:	4619      	mov	r1, r3
 8000754:	0089      	lsls	r1, r1, #2
 8000756:	440b      	add	r3, r1
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	b2db      	uxtb	r3, r3
 800075c:	4413      	add	r3, r2
 800075e:	747b      	strb	r3, [r7, #17]
	ReceivePLCData9 = Uart_rx_buffer[27]+(Uart_rx_buffer[26]*10);//SW_Minute
 8000760:	4b3a      	ldr	r3, [pc, #232]	; (800084c <ESPRXDataSeg+0x2d8>)
 8000762:	7eda      	ldrb	r2, [r3, #27]
 8000764:	4b39      	ldr	r3, [pc, #228]	; (800084c <ESPRXDataSeg+0x2d8>)
 8000766:	7e9b      	ldrb	r3, [r3, #26]
 8000768:	4619      	mov	r1, r3
 800076a:	0089      	lsls	r1, r1, #2
 800076c:	440b      	add	r3, r1
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	b2db      	uxtb	r3, r3
 8000772:	4413      	add	r3, r2
 8000774:	743b      	strb	r3, [r7, #16]
	//Currentshift_SW
	ReceivePLCData10 = Uart_rx_buffer[28];
 8000776:	4b35      	ldr	r3, [pc, #212]	; (800084c <ESPRXDataSeg+0x2d8>)
 8000778:	7f1b      	ldrb	r3, [r3, #28]
 800077a:	73fb      	strb	r3, [r7, #15]
	ReceivePLCData11 = Uart_rx_buffer[30]+(Uart_rx_buffer[29]*10);//Hys +
 800077c:	4b33      	ldr	r3, [pc, #204]	; (800084c <ESPRXDataSeg+0x2d8>)
 800077e:	7f9a      	ldrb	r2, [r3, #30]
 8000780:	4b32      	ldr	r3, [pc, #200]	; (800084c <ESPRXDataSeg+0x2d8>)
 8000782:	7f5b      	ldrb	r3, [r3, #29]
 8000784:	4619      	mov	r1, r3
 8000786:	0089      	lsls	r1, r1, #2
 8000788:	440b      	add	r3, r1
 800078a:	005b      	lsls	r3, r3, #1
 800078c:	b2db      	uxtb	r3, r3
 800078e:	4413      	add	r3, r2
 8000790:	73bb      	strb	r3, [r7, #14]
	ReceivePLCData12 = Uart_rx_buffer[32]+(Uart_rx_buffer[31]*10);//Hys -
 8000792:	4b2e      	ldr	r3, [pc, #184]	; (800084c <ESPRXDataSeg+0x2d8>)
 8000794:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000798:	4b2c      	ldr	r3, [pc, #176]	; (800084c <ESPRXDataSeg+0x2d8>)
 800079a:	7fdb      	ldrb	r3, [r3, #31]
 800079c:	4619      	mov	r1, r3
 800079e:	0089      	lsls	r1, r1, #2
 80007a0:	440b      	add	r3, r1
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	4413      	add	r3, r2
 80007a8:	737b      	strb	r3, [r7, #13]
	ReceivePLCData13 = Uart_rx_buffer[34]+(Uart_rx_buffer[33]*10);//Production reset status
 80007aa:	4b28      	ldr	r3, [pc, #160]	; (800084c <ESPRXDataSeg+0x2d8>)
 80007ac:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80007b0:	4b26      	ldr	r3, [pc, #152]	; (800084c <ESPRXDataSeg+0x2d8>)
 80007b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80007b6:	4619      	mov	r1, r3
 80007b8:	0089      	lsls	r1, r1, #2
 80007ba:	440b      	add	r3, r1
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	4413      	add	r3, r2
 80007c2:	733b      	strb	r3, [r7, #12]
	ReceivePLCData14 = Uart_rx_buffer[36]+(Uart_rx_buffer[35]*10);//Entry Status
 80007c4:	4b21      	ldr	r3, [pc, #132]	; (800084c <ESPRXDataSeg+0x2d8>)
 80007c6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80007ca:	4b20      	ldr	r3, [pc, #128]	; (800084c <ESPRXDataSeg+0x2d8>)
 80007cc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80007d0:	4619      	mov	r1, r3
 80007d2:	0089      	lsls	r1, r1, #2
 80007d4:	440b      	add	r3, r1
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	4413      	add	r3, r2
 80007dc:	72fb      	strb	r3, [r7, #11]

	SW_Hour = ReceivePLCData8;
 80007de:	4a1c      	ldr	r2, [pc, #112]	; (8000850 <ESPRXDataSeg+0x2dc>)
 80007e0:	7c7b      	ldrb	r3, [r7, #17]
 80007e2:	7013      	strb	r3, [r2, #0]
	SW_Minute = ReceivePLCData9;
 80007e4:	4a1b      	ldr	r2, [pc, #108]	; (8000854 <ESPRXDataSeg+0x2e0>)
 80007e6:	7c3b      	ldrb	r3, [r7, #16]
 80007e8:	7013      	strb	r3, [r2, #0]
	SW_Date = ReceivePLCData5;
 80007ea:	4a1b      	ldr	r2, [pc, #108]	; (8000858 <ESPRXDataSeg+0x2e4>)
 80007ec:	7d7b      	ldrb	r3, [r7, #21]
 80007ee:	7013      	strb	r3, [r2, #0]
	SW_Month = ReceivePLCData6;
 80007f0:	4a1a      	ldr	r2, [pc, #104]	; (800085c <ESPRXDataSeg+0x2e8>)
 80007f2:	7d3b      	ldrb	r3, [r7, #20]
 80007f4:	7013      	strb	r3, [r2, #0]
	SW_Year = 23;
 80007f6:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <ESPRXDataSeg+0x2ec>)
 80007f8:	2217      	movs	r2, #23
 80007fa:	701a      	strb	r2, [r3, #0]
	statusTCP = Uart_rx_buffer[53]+(Uart_rx_buffer[52]*10);
 80007fc:	4b13      	ldr	r3, [pc, #76]	; (800084c <ESPRXDataSeg+0x2d8>)
 80007fe:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8000802:	4b12      	ldr	r3, [pc, #72]	; (800084c <ESPRXDataSeg+0x2d8>)
 8000804:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000808:	4619      	mov	r1, r3
 800080a:	0089      	lsls	r1, r1, #2
 800080c:	440b      	add	r3, r1
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	b2db      	uxtb	r3, r3
 8000812:	4413      	add	r3, r2
 8000814:	b2da      	uxtb	r2, r3
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <ESPRXDataSeg+0x2f0>)
 8000818:	701a      	strb	r2, [r3, #0]
	skipIdTCP = Uart_rx_buffer[55]+(Uart_rx_buffer[54]*10);//generate id and skip id
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <ESPRXDataSeg+0x2d8>)
 800081c:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <ESPRXDataSeg+0x2d8>)
 8000822:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000826:	4619      	mov	r1, r3
 8000828:	0089      	lsls	r1, r1, #2
 800082a:	440b      	add	r3, r1
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	b2db      	uxtb	r3, r3
 8000830:	4413      	add	r3, r2
 8000832:	b2da      	uxtb	r2, r3
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <ESPRXDataSeg+0x2f4>)
 8000836:	701a      	strb	r2, [r3, #0]

	if((ReceivePLCData != 0)&&(temperatureSetOL != ReceivePLCData)&&(ReceivePLCData<5000))
 8000838:	8bbb      	ldrh	r3, [r7, #28]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d023      	beq.n	8000886 <ESPRXDataSeg+0x312>
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <ESPRXDataSeg+0x2f8>)
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	8bba      	ldrh	r2, [r7, #28]
 8000844:	429a      	cmp	r2, r3
 8000846:	e013      	b.n	8000870 <ESPRXDataSeg+0x2fc>
 8000848:	200000d7 	.word	0x200000d7
 800084c:	2000008c 	.word	0x2000008c
 8000850:	200000da 	.word	0x200000da
 8000854:	200000db 	.word	0x200000db
 8000858:	200000dc 	.word	0x200000dc
 800085c:	200000dd 	.word	0x200000dd
 8000860:	200000de 	.word	0x200000de
 8000864:	20000600 	.word	0x20000600
 8000868:	20000601 	.word	0x20000601
 800086c:	200000e0 	.word	0x200000e0
 8000870:	d009      	beq.n	8000886 <ESPRXDataSeg+0x312>
 8000872:	8bbb      	ldrh	r3, [r7, #28]
 8000874:	f241 3287 	movw	r2, #4999	; 0x1387
 8000878:	4293      	cmp	r3, r2
 800087a:	d804      	bhi.n	8000886 <ESPRXDataSeg+0x312>
	{
		temperatureSetOL = ReceivePLCData;
 800087c:	4a53      	ldr	r2, [pc, #332]	; (80009cc <ESPRXDataSeg+0x458>)
 800087e:	8bbb      	ldrh	r3, [r7, #28]
 8000880:	8013      	strh	r3, [r2, #0]
		UpdateOLdataMem  =1;
 8000882:	2301      	movs	r3, #1
 8000884:	77fb      	strb	r3, [r7, #31]
	}
	if((ReceivePLCData2 != 0)&&(temperaturehighSetOL != ReceivePLCData2)&&(ReceivePLCData2<5000))
 8000886:	8b7b      	ldrh	r3, [r7, #26]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d00e      	beq.n	80008aa <ESPRXDataSeg+0x336>
 800088c:	4b50      	ldr	r3, [pc, #320]	; (80009d0 <ESPRXDataSeg+0x45c>)
 800088e:	881b      	ldrh	r3, [r3, #0]
 8000890:	8b7a      	ldrh	r2, [r7, #26]
 8000892:	429a      	cmp	r2, r3
 8000894:	d009      	beq.n	80008aa <ESPRXDataSeg+0x336>
 8000896:	8b7b      	ldrh	r3, [r7, #26]
 8000898:	f241 3287 	movw	r2, #4999	; 0x1387
 800089c:	4293      	cmp	r3, r2
 800089e:	d804      	bhi.n	80008aa <ESPRXDataSeg+0x336>
	{
		temperaturehighSetOL = ReceivePLCData2;
 80008a0:	4a4b      	ldr	r2, [pc, #300]	; (80009d0 <ESPRXDataSeg+0x45c>)
 80008a2:	8b7b      	ldrh	r3, [r7, #26]
 80008a4:	8013      	strh	r3, [r2, #0]
		UpdateOLdataMem  =1;
 80008a6:	2301      	movs	r3, #1
 80008a8:	77fb      	strb	r3, [r7, #31]
	}
	if((ReceivePLCData3 != 0)&&(temperatureLowSetOL != ReceivePLCData3)&&(ReceivePLCData3<5000))
 80008aa:	8b3b      	ldrh	r3, [r7, #24]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d00e      	beq.n	80008ce <ESPRXDataSeg+0x35a>
 80008b0:	4b48      	ldr	r3, [pc, #288]	; (80009d4 <ESPRXDataSeg+0x460>)
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	8b3a      	ldrh	r2, [r7, #24]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d009      	beq.n	80008ce <ESPRXDataSeg+0x35a>
 80008ba:	8b3b      	ldrh	r3, [r7, #24]
 80008bc:	f241 3287 	movw	r2, #4999	; 0x1387
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d804      	bhi.n	80008ce <ESPRXDataSeg+0x35a>
	{
		temperatureLowSetOL  = ReceivePLCData3;
 80008c4:	4a43      	ldr	r2, [pc, #268]	; (80009d4 <ESPRXDataSeg+0x460>)
 80008c6:	8b3b      	ldrh	r3, [r7, #24]
 80008c8:	8013      	strh	r3, [r2, #0]
		UpdateOLdataMem  =1;
 80008ca:	2301      	movs	r3, #1
 80008cc:	77fb      	strb	r3, [r7, #31]
	}
	if((ReceivePLCData4 != 0)&&(productiontimeSetOL != ReceivePLCData4)&&(ReceivePLCData4<5000))
 80008ce:	8afb      	ldrh	r3, [r7, #22]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d00e      	beq.n	80008f2 <ESPRXDataSeg+0x37e>
 80008d4:	4b40      	ldr	r3, [pc, #256]	; (80009d8 <ESPRXDataSeg+0x464>)
 80008d6:	881b      	ldrh	r3, [r3, #0]
 80008d8:	8afa      	ldrh	r2, [r7, #22]
 80008da:	429a      	cmp	r2, r3
 80008dc:	d009      	beq.n	80008f2 <ESPRXDataSeg+0x37e>
 80008de:	8afb      	ldrh	r3, [r7, #22]
 80008e0:	f241 3287 	movw	r2, #4999	; 0x1387
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d804      	bhi.n	80008f2 <ESPRXDataSeg+0x37e>
	{
		productiontimeSetOL  = ReceivePLCData4;
 80008e8:	4a3b      	ldr	r2, [pc, #236]	; (80009d8 <ESPRXDataSeg+0x464>)
 80008ea:	8afb      	ldrh	r3, [r7, #22]
 80008ec:	8013      	strh	r3, [r2, #0]
		UpdateOLdataMem  =1;
 80008ee:	2301      	movs	r3, #1
 80008f0:	77fb      	strb	r3, [r7, #31]
	}
	if((ReceivePLCData11 != 0) && (ReceivePLCData11 != productionhysPosSetOL)&&(ReceivePLCData11<=10))
 80008f2:	7bbb      	ldrb	r3, [r7, #14]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d00c      	beq.n	8000912 <ESPRXDataSeg+0x39e>
 80008f8:	4b38      	ldr	r3, [pc, #224]	; (80009dc <ESPRXDataSeg+0x468>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	7bba      	ldrb	r2, [r7, #14]
 80008fe:	429a      	cmp	r2, r3
 8000900:	d007      	beq.n	8000912 <ESPRXDataSeg+0x39e>
 8000902:	7bbb      	ldrb	r3, [r7, #14]
 8000904:	2b0a      	cmp	r3, #10
 8000906:	d804      	bhi.n	8000912 <ESPRXDataSeg+0x39e>
	{
		productionhysPosSetOL= ReceivePLCData11;
 8000908:	4a34      	ldr	r2, [pc, #208]	; (80009dc <ESPRXDataSeg+0x468>)
 800090a:	7bbb      	ldrb	r3, [r7, #14]
 800090c:	7013      	strb	r3, [r2, #0]
		UpdateOLdataMem  =1;
 800090e:	2301      	movs	r3, #1
 8000910:	77fb      	strb	r3, [r7, #31]
	}
	if((ReceivePLCData12 != 0) && (ReceivePLCData12 != productionhysNegSetOL)&&(ReceivePLCData12<=10))
 8000912:	7b7b      	ldrb	r3, [r7, #13]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d00c      	beq.n	8000932 <ESPRXDataSeg+0x3be>
 8000918:	4b31      	ldr	r3, [pc, #196]	; (80009e0 <ESPRXDataSeg+0x46c>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	7b7a      	ldrb	r2, [r7, #13]
 800091e:	429a      	cmp	r2, r3
 8000920:	d007      	beq.n	8000932 <ESPRXDataSeg+0x3be>
 8000922:	7b7b      	ldrb	r3, [r7, #13]
 8000924:	2b0a      	cmp	r3, #10
 8000926:	d804      	bhi.n	8000932 <ESPRXDataSeg+0x3be>
	{
		productionhysNegSetOL= ReceivePLCData12;
 8000928:	4a2d      	ldr	r2, [pc, #180]	; (80009e0 <ESPRXDataSeg+0x46c>)
 800092a:	7b7b      	ldrb	r3, [r7, #13]
 800092c:	7013      	strb	r3, [r2, #0]
		UpdateOLdataMem  =1;
 800092e:	2301      	movs	r3, #1
 8000930:	77fb      	strb	r3, [r7, #31]
	}
	SWCurrentShift		 = ReceivePLCData10;
 8000932:	4a2c      	ldr	r2, [pc, #176]	; (80009e4 <ESPRXDataSeg+0x470>)
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	7013      	strb	r3, [r2, #0]
	productChangeOL		 = ReceivePLCData13;
 8000938:	4a2b      	ldr	r2, [pc, #172]	; (80009e8 <ESPRXDataSeg+0x474>)
 800093a:	7b3b      	ldrb	r3, [r7, #12]
 800093c:	7013      	strb	r3, [r2, #0]
	alarmOnOff			 = ReceivePLCData14;
 800093e:	4a2b      	ldr	r2, [pc, #172]	; (80009ec <ESPRXDataSeg+0x478>)
 8000940:	7afb      	ldrb	r3, [r7, #11]
 8000942:	7013      	strb	r3, [r2, #0]

	if(UpdateOLdataMem  == 1)
 8000944:	7ffb      	ldrb	r3, [r7, #31]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d13c      	bne.n	80009c4 <ESPRXDataSeg+0x450>
	{
		UpdateOLdataMem  =0;
 800094a:	2300      	movs	r3, #0
 800094c:	77fb      	strb	r3, [r7, #31]
		FlashWriteOLdata[0] = (uint8_t)temperatureSetOL&0x00ff;
 800094e:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <ESPRXDataSeg+0x458>)
 8000950:	881b      	ldrh	r3, [r3, #0]
 8000952:	b2db      	uxtb	r3, r3
 8000954:	703b      	strb	r3, [r7, #0]
		FlashWriteOLdata[1] = (uint8_t)(temperatureSetOL>>8)&0x00ff;
 8000956:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <ESPRXDataSeg+0x458>)
 8000958:	881b      	ldrh	r3, [r3, #0]
 800095a:	0a1b      	lsrs	r3, r3, #8
 800095c:	b29b      	uxth	r3, r3
 800095e:	b2db      	uxtb	r3, r3
 8000960:	707b      	strb	r3, [r7, #1]
		FlashWriteOLdata[2] = (uint8_t)temperaturehighSetOL&0x00ff;
 8000962:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <ESPRXDataSeg+0x45c>)
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	b2db      	uxtb	r3, r3
 8000968:	70bb      	strb	r3, [r7, #2]
		FlashWriteOLdata[3] = (uint8_t)(temperaturehighSetOL>>8)&0x00ff;
 800096a:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <ESPRXDataSeg+0x45c>)
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	0a1b      	lsrs	r3, r3, #8
 8000970:	b29b      	uxth	r3, r3
 8000972:	b2db      	uxtb	r3, r3
 8000974:	70fb      	strb	r3, [r7, #3]
		FlashWriteOLdata[4] = (uint8_t)temperatureLowSetOL&0x00ff;
 8000976:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <ESPRXDataSeg+0x460>)
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	713b      	strb	r3, [r7, #4]
		FlashWriteOLdata[5] = (uint8_t)(temperatureLowSetOL>>8)&0x00ff;
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <ESPRXDataSeg+0x460>)
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	0a1b      	lsrs	r3, r3, #8
 8000984:	b29b      	uxth	r3, r3
 8000986:	b2db      	uxtb	r3, r3
 8000988:	717b      	strb	r3, [r7, #5]
		FlashWriteOLdata[6] = (uint8_t)productiontimeSetOL&0x00ff;
 800098a:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <ESPRXDataSeg+0x464>)
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	b2db      	uxtb	r3, r3
 8000990:	71bb      	strb	r3, [r7, #6]
		FlashWriteOLdata[7] = (uint8_t)(productiontimeSetOL>>8)&0x00ff;
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <ESPRXDataSeg+0x464>)
 8000994:	881b      	ldrh	r3, [r3, #0]
 8000996:	0a1b      	lsrs	r3, r3, #8
 8000998:	b29b      	uxth	r3, r3
 800099a:	b2db      	uxtb	r3, r3
 800099c:	71fb      	strb	r3, [r7, #7]
		FlashWriteOLdata[8] = productionhysPosSetOL;
 800099e:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <ESPRXDataSeg+0x468>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	723b      	strb	r3, [r7, #8]
		FlashWriteOLdata[9] = productionhysNegSetOL;
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <ESPRXDataSeg+0x46c>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	727b      	strb	r3, [r7, #9]
		W25qxx_EraseSector(602);
 80009aa:	f240 205a 	movw	r0, #602	; 0x25a
 80009ae:	f002 fc27 	bl	8003200 <W25qxx_EraseSector>
		W25qxx_WriteSector(FlashWriteOLdata,602,0,10);
 80009b2:	4638      	mov	r0, r7
 80009b4:	230a      	movs	r3, #10
 80009b6:	2200      	movs	r2, #0
 80009b8:	f240 215a 	movw	r1, #602	; 0x25a
 80009bc:	f002 fd12 	bl	80033e4 <W25qxx_WriteSector>
 80009c0:	e000      	b.n	80009c4 <ESPRXDataSeg+0x450>
	if(!RxCompleteU2C1WIFI){return;}
 80009c2:	bf00      	nop
	}

}
 80009c4:	3720      	adds	r7, #32
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200000e0 	.word	0x200000e0
 80009d0:	200000e2 	.word	0x200000e2
 80009d4:	200000e4 	.word	0x200000e4
 80009d8:	200000e6 	.word	0x200000e6
 80009dc:	200000e8 	.word	0x200000e8
 80009e0:	200000e9 	.word	0x200000e9
 80009e4:	200000ea 	.word	0x200000ea
 80009e8:	200000eb 	.word	0x200000eb
 80009ec:	200000d9 	.word	0x200000d9

080009f0 <ReadOnlineData>:

void ReadOnlineData(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
	uint8_t FlashReadOLdata[10];
	W25qxx_ReadSector(FlashReadOLdata,602,0,10);
 80009f6:	1d38      	adds	r0, r7, #4
 80009f8:	230a      	movs	r3, #10
 80009fa:	2200      	movs	r2, #0
 80009fc:	f240 215a 	movw	r1, #602	; 0x25a
 8000a00:	f002 fdd0 	bl	80035a4 <W25qxx_ReadSector>
	temperatureSetOL 		= (FlashReadOLdata[1]<<8|FlashReadOLdata[0]);
 8000a04:	797b      	ldrb	r3, [r7, #5]
 8000a06:	021b      	lsls	r3, r3, #8
 8000a08:	b21a      	sxth	r2, r3
 8000a0a:	793b      	ldrb	r3, [r7, #4]
 8000a0c:	b21b      	sxth	r3, r3
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	b21b      	sxth	r3, r3
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <ReadOnlineData+0x78>)
 8000a16:	801a      	strh	r2, [r3, #0]
	temperaturehighSetOL 	= (FlashReadOLdata[3]<<8|FlashReadOLdata[2]);
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	021b      	lsls	r3, r3, #8
 8000a1c:	b21a      	sxth	r2, r3
 8000a1e:	79bb      	ldrb	r3, [r7, #6]
 8000a20:	b21b      	sxth	r3, r3
 8000a22:	4313      	orrs	r3, r2
 8000a24:	b21b      	sxth	r3, r3
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <ReadOnlineData+0x7c>)
 8000a2a:	801a      	strh	r2, [r3, #0]
	temperatureLowSetOL 	= (FlashReadOLdata[5]<<8|FlashReadOLdata[4]);
 8000a2c:	7a7b      	ldrb	r3, [r7, #9]
 8000a2e:	021b      	lsls	r3, r3, #8
 8000a30:	b21a      	sxth	r2, r3
 8000a32:	7a3b      	ldrb	r3, [r7, #8]
 8000a34:	b21b      	sxth	r3, r3
 8000a36:	4313      	orrs	r3, r2
 8000a38:	b21b      	sxth	r3, r3
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <ReadOnlineData+0x80>)
 8000a3e:	801a      	strh	r2, [r3, #0]
	productiontimeSetOL 	= (FlashReadOLdata[7]<<8|FlashReadOLdata[6]);
 8000a40:	7afb      	ldrb	r3, [r7, #11]
 8000a42:	021b      	lsls	r3, r3, #8
 8000a44:	b21a      	sxth	r2, r3
 8000a46:	7abb      	ldrb	r3, [r7, #10]
 8000a48:	b21b      	sxth	r3, r3
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	b21b      	sxth	r3, r3
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <ReadOnlineData+0x84>)
 8000a52:	801a      	strh	r2, [r3, #0]
	productionhysPosSetOL 	= FlashReadOLdata[8];
 8000a54:	7b3a      	ldrb	r2, [r7, #12]
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <ReadOnlineData+0x88>)
 8000a58:	701a      	strb	r2, [r3, #0]
	productionhysNegSetOL   = FlashReadOLdata[9];
 8000a5a:	7b7a      	ldrb	r2, [r7, #13]
 8000a5c:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <ReadOnlineData+0x8c>)
 8000a5e:	701a      	strb	r2, [r3, #0]
}
 8000a60:	bf00      	nop
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	200000e0 	.word	0x200000e0
 8000a6c:	200000e2 	.word	0x200000e2
 8000a70:	200000e4 	.word	0x200000e4
 8000a74:	200000e6 	.word	0x200000e6
 8000a78:	200000e8 	.word	0x200000e8
 8000a7c:	200000e9 	.word	0x200000e9

08000a80 <ESPRxDecoder>:


void ESPRxDecoder(unsigned char Rxwifi_data,unsigned char Rxseqdecoder)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	460a      	mov	r2, r1
 8000a8a:	71fb      	strb	r3, [r7, #7]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	71bb      	strb	r3, [r7, #6]

   static unsigned char Error_Retry;
	 switch(Rxseqdecoder)
 8000a90:	79bb      	ldrb	r3, [r7, #6]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	2b07      	cmp	r3, #7
 8000a96:	f201 80cc 	bhi.w	8001c32 <ESPRxDecoder+0x11b2>
 8000a9a:	a201      	add	r2, pc, #4	; (adr r2, 8000aa0 <ESPRxDecoder+0x20>)
 8000a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa0:	08000ac1 	.word	0x08000ac1
 8000aa4:	08000bdd 	.word	0x08000bdd
 8000aa8:	08000c1b 	.word	0x08000c1b
 8000aac:	08000e11 	.word	0x08000e11
 8000ab0:	08000e4f 	.word	0x08000e4f
 8000ab4:	08001061 	.word	0x08001061
 8000ab8:	08001087 	.word	0x08001087
 8000abc:	08001bfd 	.word	0x08001bfd
	   {
	   	case 1:
			 if((Rxwifi_data=='O')&&(bufferptr==0))
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	2b4f      	cmp	r3, #79	; 0x4f
 8000ac4:	d107      	bne.n	8000ad6 <ESPRxDecoder+0x56>
 8000ac6:	4b91      	ldr	r3, [pc, #580]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d103      	bne.n	8000ad6 <ESPRxDecoder+0x56>
			 {
			 	bufferptr=1;
 8000ace:	4b8f      	ldr	r3, [pc, #572]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	701a      	strb	r2, [r3, #0]
 8000ad4:	e014      	b.n	8000b00 <ESPRxDecoder+0x80>
			 }
			 else if((Rxwifi_data=='K')&&(bufferptr==1))
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	2b4b      	cmp	r3, #75	; 0x4b
 8000ada:	d111      	bne.n	8000b00 <ESPRxDecoder+0x80>
 8000adc:	4b8b      	ldr	r3, [pc, #556]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d10d      	bne.n	8000b00 <ESPRxDecoder+0x80>
			 {
			 	bufferptr=0;
 8000ae4:	4b89      	ldr	r3, [pc, #548]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	701a      	strb	r2, [r3, #0]
			 	wifi_command=30;
 8000aea:	4b89      	ldr	r3, [pc, #548]	; (8000d10 <ESPRxDecoder+0x290>)
 8000aec:	221e      	movs	r2, #30
 8000aee:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	71bb      	strb	r3, [r7, #6]
				wifi_command=30;
 8000af4:	4b86      	ldr	r3, [pc, #536]	; (8000d10 <ESPRxDecoder+0x290>)
 8000af6:	221e      	movs	r2, #30
 8000af8:	701a      	strb	r2, [r3, #0]
//				WifiStatusVar = 1;
				Check_CWMODE_For_Hang=0;
 8000afa:	4b86      	ldr	r3, [pc, #536]	; (8000d14 <ESPRxDecoder+0x294>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]
			 }
			 else{;}

			 if((Rxwifi_data=='n')&&(bufferptr==0))
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	2b6e      	cmp	r3, #110	; 0x6e
 8000b04:	d107      	bne.n	8000b16 <ESPRxDecoder+0x96>
 8000b06:	4b81      	ldr	r3, [pc, #516]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d103      	bne.n	8000b16 <ESPRxDecoder+0x96>
			 {
			 	bufferptr=1;
 8000b0e:	4b7f      	ldr	r3, [pc, #508]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	701a      	strb	r2, [r3, #0]
 8000b14:	e060      	b.n	8000bd8 <ESPRxDecoder+0x158>
			 }
			 else if((Rxwifi_data=='o')&&(bufferptr==1))
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	2b6f      	cmp	r3, #111	; 0x6f
 8000b1a:	d107      	bne.n	8000b2c <ESPRxDecoder+0xac>
 8000b1c:	4b7b      	ldr	r3, [pc, #492]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d103      	bne.n	8000b2c <ESPRxDecoder+0xac>
			 {
			 	bufferptr=2;
 8000b24:	4b79      	ldr	r3, [pc, #484]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000b26:	2202      	movs	r2, #2
 8000b28:	701a      	strb	r2, [r3, #0]
 8000b2a:	e055      	b.n	8000bd8 <ESPRxDecoder+0x158>
			 }
			 else if(bufferptr==2)
 8000b2c:	4b77      	ldr	r3, [pc, #476]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	d104      	bne.n	8000b3e <ESPRxDecoder+0xbe>
			 {
			 	bufferptr=3;
 8000b34:	4b75      	ldr	r3, [pc, #468]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000b36:	2203      	movs	r2, #3
 8000b38:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
				wifi_command=30;
				Check_CWMODE_For_Hang=0;
			 }
			 else{;}
		break;
 8000b3a:	f001 b87c 	b.w	8001c36 <ESPRxDecoder+0x11b6>
			 else if((Rxwifi_data=='c')&&(bufferptr==3))
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	2b63      	cmp	r3, #99	; 0x63
 8000b42:	d107      	bne.n	8000b54 <ESPRxDecoder+0xd4>
 8000b44:	4b71      	ldr	r3, [pc, #452]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b03      	cmp	r3, #3
 8000b4a:	d103      	bne.n	8000b54 <ESPRxDecoder+0xd4>
			 	bufferptr=4;
 8000b4c:	4b6f      	ldr	r3, [pc, #444]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000b4e:	2204      	movs	r2, #4
 8000b50:	701a      	strb	r2, [r3, #0]
 8000b52:	e041      	b.n	8000bd8 <ESPRxDecoder+0x158>
			 else if((Rxwifi_data=='h')&&(bufferptr==4))
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	2b68      	cmp	r3, #104	; 0x68
 8000b58:	d107      	bne.n	8000b6a <ESPRxDecoder+0xea>
 8000b5a:	4b6c      	ldr	r3, [pc, #432]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	d103      	bne.n	8000b6a <ESPRxDecoder+0xea>
			 	bufferptr=5;
 8000b62:	4b6a      	ldr	r3, [pc, #424]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000b64:	2205      	movs	r2, #5
 8000b66:	701a      	strb	r2, [r3, #0]
 8000b68:	e036      	b.n	8000bd8 <ESPRxDecoder+0x158>
			 else if((Rxwifi_data=='a')&&(bufferptr==5))
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	2b61      	cmp	r3, #97	; 0x61
 8000b6e:	d107      	bne.n	8000b80 <ESPRxDecoder+0x100>
 8000b70:	4b66      	ldr	r3, [pc, #408]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b05      	cmp	r3, #5
 8000b76:	d103      	bne.n	8000b80 <ESPRxDecoder+0x100>
			 	bufferptr=6;
 8000b78:	4b64      	ldr	r3, [pc, #400]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000b7a:	2206      	movs	r2, #6
 8000b7c:	701a      	strb	r2, [r3, #0]
 8000b7e:	e02b      	b.n	8000bd8 <ESPRxDecoder+0x158>
			 else if((Rxwifi_data=='n')&&(bufferptr==6))
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	2b6e      	cmp	r3, #110	; 0x6e
 8000b84:	d107      	bne.n	8000b96 <ESPRxDecoder+0x116>
 8000b86:	4b61      	ldr	r3, [pc, #388]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b06      	cmp	r3, #6
 8000b8c:	d103      	bne.n	8000b96 <ESPRxDecoder+0x116>
			 	bufferptr=7;
 8000b8e:	4b5f      	ldr	r3, [pc, #380]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000b90:	2207      	movs	r2, #7
 8000b92:	701a      	strb	r2, [r3, #0]
 8000b94:	e020      	b.n	8000bd8 <ESPRxDecoder+0x158>
			 else if((Rxwifi_data=='g')&&(bufferptr==7))
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	2b67      	cmp	r3, #103	; 0x67
 8000b9a:	d107      	bne.n	8000bac <ESPRxDecoder+0x12c>
 8000b9c:	4b5b      	ldr	r3, [pc, #364]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b07      	cmp	r3, #7
 8000ba2:	d103      	bne.n	8000bac <ESPRxDecoder+0x12c>
			 	bufferptr=8;
 8000ba4:	4b59      	ldr	r3, [pc, #356]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000ba6:	2208      	movs	r2, #8
 8000ba8:	701a      	strb	r2, [r3, #0]
 8000baa:	e015      	b.n	8000bd8 <ESPRxDecoder+0x158>
			 else if((Rxwifi_data=='e')&&(bufferptr==8))
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	2b65      	cmp	r3, #101	; 0x65
 8000bb0:	f041 8041 	bne.w	8001c36 <ESPRxDecoder+0x11b6>
 8000bb4:	4b55      	ldr	r3, [pc, #340]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b08      	cmp	r3, #8
 8000bba:	f041 803c 	bne.w	8001c36 <ESPRxDecoder+0x11b6>
			 	bufferptr=0;
 8000bbe:	4b53      	ldr	r3, [pc, #332]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	71bb      	strb	r3, [r7, #6]
				wifi_command=30;
 8000bc8:	4b51      	ldr	r3, [pc, #324]	; (8000d10 <ESPRxDecoder+0x290>)
 8000bca:	221e      	movs	r2, #30
 8000bcc:	701a      	strb	r2, [r3, #0]
				Check_CWMODE_For_Hang=0;
 8000bce:	4b51      	ldr	r3, [pc, #324]	; (8000d14 <ESPRxDecoder+0x294>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	701a      	strb	r2, [r3, #0]
		break;
 8000bd4:	f001 b82f 	b.w	8001c36 <ESPRxDecoder+0x11b6>
 8000bd8:	f001 b82d 	b.w	8001c36 <ESPRxDecoder+0x11b6>
		case 2:
			if((Rxwifi_data=='O')&&(bufferptr==0))
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	2b4f      	cmp	r3, #79	; 0x4f
 8000be0:	d108      	bne.n	8000bf4 <ESPRxDecoder+0x174>
 8000be2:	4b4a      	ldr	r3, [pc, #296]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d104      	bne.n	8000bf4 <ESPRxDecoder+0x174>
			 {
			 	bufferptr=1;
 8000bea:	4b48      	ldr	r3, [pc, #288]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	701a      	strb	r2, [r3, #0]
			 {
			 	bufferptr=0;
				Rxseqdecoder=0;
				wifi_command=49;
			 }
		break;
 8000bf0:	f001 b823 	b.w	8001c3a <ESPRxDecoder+0x11ba>
			 else if((Rxwifi_data=='K')&&(bufferptr==1))
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	2b4b      	cmp	r3, #75	; 0x4b
 8000bf8:	f041 801f 	bne.w	8001c3a <ESPRxDecoder+0x11ba>
 8000bfc:	4b43      	ldr	r3, [pc, #268]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	f041 801a 	bne.w	8001c3a <ESPRxDecoder+0x11ba>
			 	bufferptr=0;
 8000c06:	4b41      	ldr	r3, [pc, #260]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	71bb      	strb	r3, [r7, #6]
				wifi_command=49;
 8000c10:	4b3f      	ldr	r3, [pc, #252]	; (8000d10 <ESPRxDecoder+0x290>)
 8000c12:	2231      	movs	r2, #49	; 0x31
 8000c14:	701a      	strb	r2, [r3, #0]
		break;
 8000c16:	f001 b810 	b.w	8001c3a <ESPRxDecoder+0x11ba>
		case 3:
			if((Rxwifi_data=='A')&&(bufferptr==0))
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	2b41      	cmp	r3, #65	; 0x41
 8000c1e:	d107      	bne.n	8000c30 <ESPRxDecoder+0x1b0>
 8000c20:	4b3a      	ldr	r3, [pc, #232]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d103      	bne.n	8000c30 <ESPRxDecoder+0x1b0>
			 {
			 	bufferptr=1;
 8000c28:	4b38      	ldr	r3, [pc, #224]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	701a      	strb	r2, [r3, #0]
 8000c2e:	e0a1      	b.n	8000d74 <ESPRxDecoder+0x2f4>
			 }
			 else if((Rxwifi_data=='C')&&(bufferptr==1))
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	2b43      	cmp	r3, #67	; 0x43
 8000c34:	d107      	bne.n	8000c46 <ESPRxDecoder+0x1c6>
 8000c36:	4b35      	ldr	r3, [pc, #212]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d103      	bne.n	8000c46 <ESPRxDecoder+0x1c6>
			 {
			 	bufferptr=2;
 8000c3e:	4b33      	ldr	r3, [pc, #204]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000c40:	2202      	movs	r2, #2
 8000c42:	701a      	strb	r2, [r3, #0]
 8000c44:	e096      	b.n	8000d74 <ESPRxDecoder+0x2f4>
			 }
			 else if((Rxwifi_data=='C')&&(bufferptr==2))
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	2b43      	cmp	r3, #67	; 0x43
 8000c4a:	d107      	bne.n	8000c5c <ESPRxDecoder+0x1dc>
 8000c4c:	4b2f      	ldr	r3, [pc, #188]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	d103      	bne.n	8000c5c <ESPRxDecoder+0x1dc>
			 {
			 	bufferptr=3;
 8000c54:	4b2d      	ldr	r3, [pc, #180]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000c56:	2203      	movs	r2, #3
 8000c58:	701a      	strb	r2, [r3, #0]
 8000c5a:	e08b      	b.n	8000d74 <ESPRxDecoder+0x2f4>
			 }

			 else if((Rxwifi_data=='E')&&(bufferptr==3))
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	2b45      	cmp	r3, #69	; 0x45
 8000c60:	d107      	bne.n	8000c72 <ESPRxDecoder+0x1f2>
 8000c62:	4b2a      	ldr	r3, [pc, #168]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	d103      	bne.n	8000c72 <ESPRxDecoder+0x1f2>
			 {
			 	bufferptr=4;
 8000c6a:	4b28      	ldr	r3, [pc, #160]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000c6c:	2204      	movs	r2, #4
 8000c6e:	701a      	strb	r2, [r3, #0]
 8000c70:	e080      	b.n	8000d74 <ESPRxDecoder+0x2f4>
			 }
			 else if((Rxwifi_data=='E')&&(bufferptr==4))
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	2b45      	cmp	r3, #69	; 0x45
 8000c76:	d107      	bne.n	8000c88 <ESPRxDecoder+0x208>
 8000c78:	4b24      	ldr	r3, [pc, #144]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b04      	cmp	r3, #4
 8000c7e:	d103      	bne.n	8000c88 <ESPRxDecoder+0x208>
			 {
			 	bufferptr=5;
 8000c80:	4b22      	ldr	r3, [pc, #136]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000c82:	2205      	movs	r2, #5
 8000c84:	701a      	strb	r2, [r3, #0]
 8000c86:	e075      	b.n	8000d74 <ESPRxDecoder+0x2f4>
			 }
			 else if((Rxwifi_data=='D')&&(bufferptr==5))
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	2b44      	cmp	r3, #68	; 0x44
 8000c8c:	d107      	bne.n	8000c9e <ESPRxDecoder+0x21e>
 8000c8e:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b05      	cmp	r3, #5
 8000c94:	d103      	bne.n	8000c9e <ESPRxDecoder+0x21e>
			 {
			 	bufferptr=6;
 8000c96:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000c98:	2206      	movs	r2, #6
 8000c9a:	701a      	strb	r2, [r3, #0]
 8000c9c:	e06a      	b.n	8000d74 <ESPRxDecoder+0x2f4>
			 }
			 else if((Rxwifi_data=='O')&&(bufferptr==6))
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	2b4f      	cmp	r3, #79	; 0x4f
 8000ca2:	d107      	bne.n	8000cb4 <ESPRxDecoder+0x234>
 8000ca4:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b06      	cmp	r3, #6
 8000caa:	d103      	bne.n	8000cb4 <ESPRxDecoder+0x234>
			 {
			 	bufferptr=7;
 8000cac:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000cae:	2207      	movs	r2, #7
 8000cb0:	701a      	strb	r2, [r3, #0]
 8000cb2:	e05f      	b.n	8000d74 <ESPRxDecoder+0x2f4>
			 }
			 else if((Rxwifi_data=='_')&&(bufferptr==7))
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	2b5f      	cmp	r3, #95	; 0x5f
 8000cb8:	d107      	bne.n	8000cca <ESPRxDecoder+0x24a>
 8000cba:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b07      	cmp	r3, #7
 8000cc0:	d103      	bne.n	8000cca <ESPRxDecoder+0x24a>
			 {
			 	bufferptr=8;
 8000cc2:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000cc4:	2208      	movs	r2, #8
 8000cc6:	701a      	strb	r2, [r3, #0]
 8000cc8:	e054      	b.n	8000d74 <ESPRxDecoder+0x2f4>
			 }
			 else if((Rxwifi_data=='E')&&(bufferptr==8))
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b45      	cmp	r3, #69	; 0x45
 8000cce:	d107      	bne.n	8000ce0 <ESPRxDecoder+0x260>
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b08      	cmp	r3, #8
 8000cd6:	d103      	bne.n	8000ce0 <ESPRxDecoder+0x260>
			 {
			 	bufferptr=9;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000cda:	2209      	movs	r2, #9
 8000cdc:	701a      	strb	r2, [r3, #0]
 8000cde:	e049      	b.n	8000d74 <ESPRxDecoder+0x2f4>
			 }
			 else if((Rxwifi_data=='D')&&(bufferptr==9))
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	2b44      	cmp	r3, #68	; 0x44
 8000ce4:	d107      	bne.n	8000cf6 <ESPRxDecoder+0x276>
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b09      	cmp	r3, #9
 8000cec:	d103      	bne.n	8000cf6 <ESPRxDecoder+0x276>
			 {
			 	bufferptr=10;
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000cf0:	220a      	movs	r2, #10
 8000cf2:	701a      	strb	r2, [r3, #0]
 8000cf4:	e03e      	b.n	8000d74 <ESPRxDecoder+0x2f4>
			 }
			 else if((Rxwifi_data=='I')&&(bufferptr==10))
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	2b49      	cmp	r3, #73	; 0x49
 8000cfa:	d10d      	bne.n	8000d18 <ESPRxDecoder+0x298>
 8000cfc:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b0a      	cmp	r3, #10
 8000d02:	d109      	bne.n	8000d18 <ESPRxDecoder+0x298>
			 {
			 	bufferptr=11;
 8000d04:	4b01      	ldr	r3, [pc, #4]	; (8000d0c <ESPRxDecoder+0x28c>)
 8000d06:	220b      	movs	r2, #11
 8000d08:	701a      	strb	r2, [r3, #0]
 8000d0a:	e033      	b.n	8000d74 <ESPRxDecoder+0x2f4>
 8000d0c:	20000832 	.word	0x20000832
 8000d10:	20000734 	.word	0x20000734
 8000d14:	20000834 	.word	0x20000834
			 }
			 else if((Rxwifi_data=='M')&&(bufferptr==11))
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	2b4d      	cmp	r3, #77	; 0x4d
 8000d1c:	d107      	bne.n	8000d2e <ESPRxDecoder+0x2ae>
 8000d1e:	4b94      	ldr	r3, [pc, #592]	; (8000f70 <ESPRxDecoder+0x4f0>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b0b      	cmp	r3, #11
 8000d24:	d103      	bne.n	8000d2e <ESPRxDecoder+0x2ae>
			 {
			 	bufferptr=12;
 8000d26:	4b92      	ldr	r3, [pc, #584]	; (8000f70 <ESPRxDecoder+0x4f0>)
 8000d28:	220c      	movs	r2, #12
 8000d2a:	701a      	strb	r2, [r3, #0]
 8000d2c:	e022      	b.n	8000d74 <ESPRxDecoder+0x2f4>
			 }
			 else if((Rxwifi_data=='A')&&(bufferptr==12))
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	2b41      	cmp	r3, #65	; 0x41
 8000d32:	d107      	bne.n	8000d44 <ESPRxDecoder+0x2c4>
 8000d34:	4b8e      	ldr	r3, [pc, #568]	; (8000f70 <ESPRxDecoder+0x4f0>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b0c      	cmp	r3, #12
 8000d3a:	d103      	bne.n	8000d44 <ESPRxDecoder+0x2c4>
			 {
			 	bufferptr=13;
 8000d3c:	4b8c      	ldr	r3, [pc, #560]	; (8000f70 <ESPRxDecoder+0x4f0>)
 8000d3e:	220d      	movs	r2, #13
 8000d40:	701a      	strb	r2, [r3, #0]
 8000d42:	e017      	b.n	8000d74 <ESPRxDecoder+0x2f4>
			 }
			 else if((Rxwifi_data=='X')&&(bufferptr==13))
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	2b58      	cmp	r3, #88	; 0x58
 8000d48:	d114      	bne.n	8000d74 <ESPRxDecoder+0x2f4>
 8000d4a:	4b89      	ldr	r3, [pc, #548]	; (8000f70 <ESPRxDecoder+0x4f0>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b0d      	cmp	r3, #13
 8000d50:	d110      	bne.n	8000d74 <ESPRxDecoder+0x2f4>
				 {
			 	bufferptr=0;
 8000d52:	4b87      	ldr	r3, [pc, #540]	; (8000f70 <ESPRxDecoder+0x4f0>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	701a      	strb	r2, [r3, #0]
				Err_bufferptr=0;
 8000d58:	4b86      	ldr	r3, [pc, #536]	; (8000f74 <ESPRxDecoder+0x4f4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	71bb      	strb	r3, [r7, #6]
				wifi_command=70;
 8000d62:	4b85      	ldr	r3, [pc, #532]	; (8000f78 <ESPRxDecoder+0x4f8>)
 8000d64:	2246      	movs	r2, #70	; 0x46
 8000d66:	701a      	strb	r2, [r3, #0]
				Error_Retry=0;
 8000d68:	4b84      	ldr	r3, [pc, #528]	; (8000f7c <ESPRxDecoder+0x4fc>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
				WifiDisplay = 1;
 8000d6e:	4b84      	ldr	r3, [pc, #528]	; (8000f80 <ESPRxDecoder+0x500>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
				wifi_command=70;
				Error_Retry=0;
			 }	*/

			 if((Rxwifi_data=='N')&&(Err_bufferptr==0))
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	2b4e      	cmp	r3, #78	; 0x4e
 8000d78:	d107      	bne.n	8000d8a <ESPRxDecoder+0x30a>
 8000d7a:	4b7e      	ldr	r3, [pc, #504]	; (8000f74 <ESPRxDecoder+0x4f4>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d103      	bne.n	8000d8a <ESPRxDecoder+0x30a>
			 {
			 	Err_bufferptr=1;
 8000d82:	4b7c      	ldr	r3, [pc, #496]	; (8000f74 <ESPRxDecoder+0x4f4>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	701a      	strb	r2, [r3, #0]
 8000d88:	e040      	b.n	8000e0c <ESPRxDecoder+0x38c>
			 }
			 else if((Rxwifi_data=='o')&&(Err_bufferptr==1))
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	2b6f      	cmp	r3, #111	; 0x6f
 8000d8e:	d107      	bne.n	8000da0 <ESPRxDecoder+0x320>
 8000d90:	4b78      	ldr	r3, [pc, #480]	; (8000f74 <ESPRxDecoder+0x4f4>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d103      	bne.n	8000da0 <ESPRxDecoder+0x320>
			 {
			 	Err_bufferptr=2;
 8000d98:	4b76      	ldr	r3, [pc, #472]	; (8000f74 <ESPRxDecoder+0x4f4>)
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	701a      	strb	r2, [r3, #0]
 8000d9e:	e035      	b.n	8000e0c <ESPRxDecoder+0x38c>
			 }
			 else if((Rxwifi_data=='A')&&(Err_bufferptr==2))
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	2b41      	cmp	r3, #65	; 0x41
 8000da4:	d107      	bne.n	8000db6 <ESPRxDecoder+0x336>
 8000da6:	4b73      	ldr	r3, [pc, #460]	; (8000f74 <ESPRxDecoder+0x4f4>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d103      	bne.n	8000db6 <ESPRxDecoder+0x336>
			 {
			 	Err_bufferptr=3;
 8000dae:	4b71      	ldr	r3, [pc, #452]	; (8000f74 <ESPRxDecoder+0x4f4>)
 8000db0:	2203      	movs	r2, #3
 8000db2:	701a      	strb	r2, [r3, #0]
 8000db4:	e02a      	b.n	8000e0c <ESPRxDecoder+0x38c>
			 }
			 else if((Rxwifi_data=='P')&&(Err_bufferptr==3))
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	2b50      	cmp	r3, #80	; 0x50
 8000dba:	f040 8749 	bne.w	8001c50 <ESPRxDecoder+0x11d0>
 8000dbe:	4b6d      	ldr	r3, [pc, #436]	; (8000f74 <ESPRxDecoder+0x4f4>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b03      	cmp	r3, #3
 8000dc4:	f040 8744 	bne.w	8001c50 <ESPRxDecoder+0x11d0>
			 {
			 	Err_bufferptr=0;
 8000dc8:	4b6a      	ldr	r3, [pc, #424]	; (8000f74 <ESPRxDecoder+0x4f4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	701a      	strb	r2, [r3, #0]
				bufferptr=0;
 8000dce:	4b68      	ldr	r3, [pc, #416]	; (8000f70 <ESPRxDecoder+0x4f0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	71bb      	strb	r3, [r7, #6]
				WifiDisplay = 3;
 8000dd8:	4b69      	ldr	r3, [pc, #420]	; (8000f80 <ESPRxDecoder+0x500>)
 8000dda:	2203      	movs	r2, #3
 8000ddc:	701a      	strb	r2, [r3, #0]
				if(++Error_Retry<3)		//retry for error
 8000dde:	4b67      	ldr	r3, [pc, #412]	; (8000f7c <ESPRxDecoder+0x4fc>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	3301      	adds	r3, #1
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4b65      	ldr	r3, [pc, #404]	; (8000f7c <ESPRxDecoder+0x4fc>)
 8000de8:	701a      	strb	r2, [r3, #0]
 8000dea:	4b64      	ldr	r3, [pc, #400]	; (8000f7c <ESPRxDecoder+0x4fc>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d804      	bhi.n	8000dfc <ESPRxDecoder+0x37c>
				{
				   wifi_command=50;
 8000df2:	4b61      	ldr	r3, [pc, #388]	; (8000f78 <ESPRxDecoder+0x4f8>)
 8000df4:	2232      	movs	r2, #50	; 0x32
 8000df6:	701a      	strb	r2, [r3, #0]
				{
				   wifi_command=10;
				   Error_Retry=0;
				}
			 }
		break;
 8000df8:	f000 bf2a 	b.w	8001c50 <ESPRxDecoder+0x11d0>
				   wifi_command=10;
 8000dfc:	4b5e      	ldr	r3, [pc, #376]	; (8000f78 <ESPRxDecoder+0x4f8>)
 8000dfe:	220a      	movs	r2, #10
 8000e00:	701a      	strb	r2, [r3, #0]
				   Error_Retry=0;
 8000e02:	4b5e      	ldr	r3, [pc, #376]	; (8000f7c <ESPRxDecoder+0x4fc>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	701a      	strb	r2, [r3, #0]
		break;
 8000e08:	f000 bf22 	b.w	8001c50 <ESPRxDecoder+0x11d0>
 8000e0c:	f000 bf20 	b.w	8001c50 <ESPRxDecoder+0x11d0>
		case 4:	   //retry need to be added
			 if((Rxwifi_data=='O')&&(bufferptr==0))
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	2b4f      	cmp	r3, #79	; 0x4f
 8000e14:	d108      	bne.n	8000e28 <ESPRxDecoder+0x3a8>
 8000e16:	4b56      	ldr	r3, [pc, #344]	; (8000f70 <ESPRxDecoder+0x4f0>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d104      	bne.n	8000e28 <ESPRxDecoder+0x3a8>
			 {
			 	bufferptr=1;
 8000e1e:	4b54      	ldr	r3, [pc, #336]	; (8000f70 <ESPRxDecoder+0x4f0>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	701a      	strb	r2, [r3, #0]
			 {
			 	bufferptr=0;
				Rxseqdecoder=0;
				wifi_command=80;
			 }
		break;
 8000e24:	f000 bf16 	b.w	8001c54 <ESPRxDecoder+0x11d4>
			 else if((Rxwifi_data=='K')&&(bufferptr==1))
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	2b4b      	cmp	r3, #75	; 0x4b
 8000e2c:	f040 8712 	bne.w	8001c54 <ESPRxDecoder+0x11d4>
 8000e30:	4b4f      	ldr	r3, [pc, #316]	; (8000f70 <ESPRxDecoder+0x4f0>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	f040 870d 	bne.w	8001c54 <ESPRxDecoder+0x11d4>
			 	bufferptr=0;
 8000e3a:	4b4d      	ldr	r3, [pc, #308]	; (8000f70 <ESPRxDecoder+0x4f0>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	71bb      	strb	r3, [r7, #6]
				wifi_command=80;
 8000e44:	4b4c      	ldr	r3, [pc, #304]	; (8000f78 <ESPRxDecoder+0x4f8>)
 8000e46:	2250      	movs	r2, #80	; 0x50
 8000e48:	701a      	strb	r2, [r3, #0]
		break;
 8000e4a:	f000 bf03 	b.w	8001c54 <ESPRxDecoder+0x11d4>
		case 5:

			if((Rxwifi_data=='C')&&(bufferptr==0))
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	2b43      	cmp	r3, #67	; 0x43
 8000e52:	d107      	bne.n	8000e64 <ESPRxDecoder+0x3e4>
 8000e54:	4b46      	ldr	r3, [pc, #280]	; (8000f70 <ESPRxDecoder+0x4f0>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d103      	bne.n	8000e64 <ESPRxDecoder+0x3e4>
			 {
			 	bufferptr=1;
 8000e5c:	4b44      	ldr	r3, [pc, #272]	; (8000f70 <ESPRxDecoder+0x4f0>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
 8000e62:	e04e      	b.n	8000f02 <ESPRxDecoder+0x482>
			 }
			 else if((Rxwifi_data=='O')&&(bufferptr==1))
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	2b4f      	cmp	r3, #79	; 0x4f
 8000e68:	d107      	bne.n	8000e7a <ESPRxDecoder+0x3fa>
 8000e6a:	4b41      	ldr	r3, [pc, #260]	; (8000f70 <ESPRxDecoder+0x4f0>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d103      	bne.n	8000e7a <ESPRxDecoder+0x3fa>
			 {
			 	bufferptr=2;
 8000e72:	4b3f      	ldr	r3, [pc, #252]	; (8000f70 <ESPRxDecoder+0x4f0>)
 8000e74:	2202      	movs	r2, #2
 8000e76:	701a      	strb	r2, [r3, #0]
 8000e78:	e043      	b.n	8000f02 <ESPRxDecoder+0x482>
			 }
			 else if((Rxwifi_data=='N')&&(bufferptr==2))
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	2b4e      	cmp	r3, #78	; 0x4e
 8000e7e:	d107      	bne.n	8000e90 <ESPRxDecoder+0x410>
 8000e80:	4b3b      	ldr	r3, [pc, #236]	; (8000f70 <ESPRxDecoder+0x4f0>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d103      	bne.n	8000e90 <ESPRxDecoder+0x410>
			 {
			 	bufferptr=3;
 8000e88:	4b39      	ldr	r3, [pc, #228]	; (8000f70 <ESPRxDecoder+0x4f0>)
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	701a      	strb	r2, [r3, #0]
 8000e8e:	e038      	b.n	8000f02 <ESPRxDecoder+0x482>
			 }
			 else if((Rxwifi_data=='N')&&(bufferptr==3))
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	2b4e      	cmp	r3, #78	; 0x4e
 8000e94:	d107      	bne.n	8000ea6 <ESPRxDecoder+0x426>
 8000e96:	4b36      	ldr	r3, [pc, #216]	; (8000f70 <ESPRxDecoder+0x4f0>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b03      	cmp	r3, #3
 8000e9c:	d103      	bne.n	8000ea6 <ESPRxDecoder+0x426>
			 {
			 	bufferptr=4;
 8000e9e:	4b34      	ldr	r3, [pc, #208]	; (8000f70 <ESPRxDecoder+0x4f0>)
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	701a      	strb	r2, [r3, #0]
 8000ea4:	e02d      	b.n	8000f02 <ESPRxDecoder+0x482>
			 }
			 else if((Rxwifi_data=='E')&&(bufferptr==4))
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	2b45      	cmp	r3, #69	; 0x45
 8000eaa:	d107      	bne.n	8000ebc <ESPRxDecoder+0x43c>
 8000eac:	4b30      	ldr	r3, [pc, #192]	; (8000f70 <ESPRxDecoder+0x4f0>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b04      	cmp	r3, #4
 8000eb2:	d103      	bne.n	8000ebc <ESPRxDecoder+0x43c>
			 {
			 	bufferptr=5;
 8000eb4:	4b2e      	ldr	r3, [pc, #184]	; (8000f70 <ESPRxDecoder+0x4f0>)
 8000eb6:	2205      	movs	r2, #5
 8000eb8:	701a      	strb	r2, [r3, #0]
 8000eba:	e022      	b.n	8000f02 <ESPRxDecoder+0x482>
			 }
			 else if((Rxwifi_data=='C')&&(bufferptr==5))
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	2b43      	cmp	r3, #67	; 0x43
 8000ec0:	d107      	bne.n	8000ed2 <ESPRxDecoder+0x452>
 8000ec2:	4b2b      	ldr	r3, [pc, #172]	; (8000f70 <ESPRxDecoder+0x4f0>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b05      	cmp	r3, #5
 8000ec8:	d103      	bne.n	8000ed2 <ESPRxDecoder+0x452>
			 {
			 	bufferptr=6;
 8000eca:	4b29      	ldr	r3, [pc, #164]	; (8000f70 <ESPRxDecoder+0x4f0>)
 8000ecc:	2206      	movs	r2, #6
 8000ece:	701a      	strb	r2, [r3, #0]
 8000ed0:	e017      	b.n	8000f02 <ESPRxDecoder+0x482>
			 }
			 else if((Rxwifi_data=='T')&&(bufferptr==6))
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	2b54      	cmp	r3, #84	; 0x54
 8000ed6:	d114      	bne.n	8000f02 <ESPRxDecoder+0x482>
 8000ed8:	4b25      	ldr	r3, [pc, #148]	; (8000f70 <ESPRxDecoder+0x4f0>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b06      	cmp	r3, #6
 8000ede:	d110      	bne.n	8000f02 <ESPRxDecoder+0x482>
			 {
			 	Rxseqdecoder=0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	71bb      	strb	r3, [r7, #6]
				wifi_command=90;
 8000ee4:	4b24      	ldr	r3, [pc, #144]	; (8000f78 <ESPRxDecoder+0x4f8>)
 8000ee6:	225a      	movs	r2, #90	; 0x5a
 8000ee8:	701a      	strb	r2, [r3, #0]
				bufferptr=0;
 8000eea:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <ESPRxDecoder+0x4f0>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
				Error_Retry=0;
 8000ef0:	4b22      	ldr	r3, [pc, #136]	; (8000f7c <ESPRxDecoder+0x4fc>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
				Err_bufferptr=0; //wifi connected
 8000ef6:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <ESPRxDecoder+0x4f4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
			   WifiDisplay = 2;
 8000efc:	4b20      	ldr	r3, [pc, #128]	; (8000f80 <ESPRxDecoder+0x500>)
 8000efe:	2202      	movs	r2, #2
 8000f00:	701a      	strb	r2, [r3, #0]
			 }
			 	if((Rxwifi_data=='L')&&(bufferptr==0))	  //linked
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	2b4c      	cmp	r3, #76	; 0x4c
 8000f06:	d107      	bne.n	8000f18 <ESPRxDecoder+0x498>
 8000f08:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <ESPRxDecoder+0x4f0>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d103      	bne.n	8000f18 <ESPRxDecoder+0x498>
			 {
			 	bufferptr=1;
 8000f10:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <ESPRxDecoder+0x4f0>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	701a      	strb	r2, [r3, #0]
 8000f16:	e04a      	b.n	8000fae <ESPRxDecoder+0x52e>
			 }
			 else if((Rxwifi_data=='i')&&(bufferptr==1))
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	2b69      	cmp	r3, #105	; 0x69
 8000f1c:	d107      	bne.n	8000f2e <ESPRxDecoder+0x4ae>
 8000f1e:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <ESPRxDecoder+0x4f0>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d103      	bne.n	8000f2e <ESPRxDecoder+0x4ae>
			 {
			 	bufferptr=2;
 8000f26:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <ESPRxDecoder+0x4f0>)
 8000f28:	2202      	movs	r2, #2
 8000f2a:	701a      	strb	r2, [r3, #0]
 8000f2c:	e03f      	b.n	8000fae <ESPRxDecoder+0x52e>
			 }
			 else if((Rxwifi_data=='n')&&(bufferptr==2))
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	2b6e      	cmp	r3, #110	; 0x6e
 8000f32:	d107      	bne.n	8000f44 <ESPRxDecoder+0x4c4>
 8000f34:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <ESPRxDecoder+0x4f0>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d103      	bne.n	8000f44 <ESPRxDecoder+0x4c4>
			 {
			 	bufferptr=3;
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <ESPRxDecoder+0x4f0>)
 8000f3e:	2203      	movs	r2, #3
 8000f40:	701a      	strb	r2, [r3, #0]
 8000f42:	e034      	b.n	8000fae <ESPRxDecoder+0x52e>
			 }
			 else if((Rxwifi_data=='k')&&(bufferptr==3))
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	2b6b      	cmp	r3, #107	; 0x6b
 8000f48:	d107      	bne.n	8000f5a <ESPRxDecoder+0x4da>
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <ESPRxDecoder+0x4f0>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	d103      	bne.n	8000f5a <ESPRxDecoder+0x4da>
			 {
			 	bufferptr=4;
 8000f52:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <ESPRxDecoder+0x4f0>)
 8000f54:	2204      	movs	r2, #4
 8000f56:	701a      	strb	r2, [r3, #0]
 8000f58:	e029      	b.n	8000fae <ESPRxDecoder+0x52e>
			 }
			 else if((Rxwifi_data=='e')&&(bufferptr==4))
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b65      	cmp	r3, #101	; 0x65
 8000f5e:	d111      	bne.n	8000f84 <ESPRxDecoder+0x504>
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <ESPRxDecoder+0x4f0>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b04      	cmp	r3, #4
 8000f66:	d10d      	bne.n	8000f84 <ESPRxDecoder+0x504>
			 {
			 	bufferptr=5;
 8000f68:	4b01      	ldr	r3, [pc, #4]	; (8000f70 <ESPRxDecoder+0x4f0>)
 8000f6a:	2205      	movs	r2, #5
 8000f6c:	701a      	strb	r2, [r3, #0]
 8000f6e:	e01e      	b.n	8000fae <ESPRxDecoder+0x52e>
 8000f70:	20000832 	.word	0x20000832
 8000f74:	200000d3 	.word	0x200000d3
 8000f78:	20000734 	.word	0x20000734
 8000f7c:	200000ec 	.word	0x200000ec
 8000f80:	200000d4 	.word	0x200000d4
			 }
			 else if((Rxwifi_data=='d')&&(bufferptr==5))
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	2b64      	cmp	r3, #100	; 0x64
 8000f88:	d111      	bne.n	8000fae <ESPRxDecoder+0x52e>
 8000f8a:	4ba2      	ldr	r3, [pc, #648]	; (8001214 <ESPRxDecoder+0x794>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b05      	cmp	r3, #5
 8000f90:	d10d      	bne.n	8000fae <ESPRxDecoder+0x52e>
			 {
			 	Rxseqdecoder=0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	71bb      	strb	r3, [r7, #6]
				wifi_command=90;
 8000f96:	4ba0      	ldr	r3, [pc, #640]	; (8001218 <ESPRxDecoder+0x798>)
 8000f98:	225a      	movs	r2, #90	; 0x5a
 8000f9a:	701a      	strb	r2, [r3, #0]
				bufferptr=0;
 8000f9c:	4b9d      	ldr	r3, [pc, #628]	; (8001214 <ESPRxDecoder+0x794>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
				Error_Retry=0;
 8000fa2:	4b9e      	ldr	r3, [pc, #632]	; (800121c <ESPRxDecoder+0x79c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
				Err_bufferptr=0;
 8000fa8:	4b9d      	ldr	r3, [pc, #628]	; (8001220 <ESPRxDecoder+0x7a0>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
			 }
			 if((Rxwifi_data=='E')&&(Err_bufferptr==0))
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	2b45      	cmp	r3, #69	; 0x45
 8000fb2:	d107      	bne.n	8000fc4 <ESPRxDecoder+0x544>
 8000fb4:	4b9a      	ldr	r3, [pc, #616]	; (8001220 <ESPRxDecoder+0x7a0>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d103      	bne.n	8000fc4 <ESPRxDecoder+0x544>
			 {
			 	Err_bufferptr=1;
 8000fbc:	4b98      	ldr	r3, [pc, #608]	; (8001220 <ESPRxDecoder+0x7a0>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	701a      	strb	r2, [r3, #0]
 8000fc2:	e04b      	b.n	800105c <ESPRxDecoder+0x5dc>
			 }
			 else if((Rxwifi_data=='R')&&(Err_bufferptr==1))
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	2b52      	cmp	r3, #82	; 0x52
 8000fc8:	d107      	bne.n	8000fda <ESPRxDecoder+0x55a>
 8000fca:	4b95      	ldr	r3, [pc, #596]	; (8001220 <ESPRxDecoder+0x7a0>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d103      	bne.n	8000fda <ESPRxDecoder+0x55a>
			 {
			 	Err_bufferptr=2;
 8000fd2:	4b93      	ldr	r3, [pc, #588]	; (8001220 <ESPRxDecoder+0x7a0>)
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	701a      	strb	r2, [r3, #0]
 8000fd8:	e040      	b.n	800105c <ESPRxDecoder+0x5dc>
			 }
			 else if((Rxwifi_data=='R')&&(Err_bufferptr==2))
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	2b52      	cmp	r3, #82	; 0x52
 8000fde:	d107      	bne.n	8000ff0 <ESPRxDecoder+0x570>
 8000fe0:	4b8f      	ldr	r3, [pc, #572]	; (8001220 <ESPRxDecoder+0x7a0>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d103      	bne.n	8000ff0 <ESPRxDecoder+0x570>
			 {
			 	Err_bufferptr=3;
 8000fe8:	4b8d      	ldr	r3, [pc, #564]	; (8001220 <ESPRxDecoder+0x7a0>)
 8000fea:	2203      	movs	r2, #3
 8000fec:	701a      	strb	r2, [r3, #0]
 8000fee:	e035      	b.n	800105c <ESPRxDecoder+0x5dc>
			 }
			 else if((Rxwifi_data=='O')&&(Err_bufferptr==3))
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	2b4f      	cmp	r3, #79	; 0x4f
 8000ff4:	d107      	bne.n	8001006 <ESPRxDecoder+0x586>
 8000ff6:	4b8a      	ldr	r3, [pc, #552]	; (8001220 <ESPRxDecoder+0x7a0>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	d103      	bne.n	8001006 <ESPRxDecoder+0x586>
			 {
			 	Err_bufferptr=4;
 8000ffe:	4b88      	ldr	r3, [pc, #544]	; (8001220 <ESPRxDecoder+0x7a0>)
 8001000:	2204      	movs	r2, #4
 8001002:	701a      	strb	r2, [r3, #0]
 8001004:	e02a      	b.n	800105c <ESPRxDecoder+0x5dc>
			 }
			 else if((Rxwifi_data=='R')&&(Err_bufferptr==4))
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	2b52      	cmp	r3, #82	; 0x52
 800100a:	f040 8625 	bne.w	8001c58 <ESPRxDecoder+0x11d8>
 800100e:	4b84      	ldr	r3, [pc, #528]	; (8001220 <ESPRxDecoder+0x7a0>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b04      	cmp	r3, #4
 8001014:	f040 8620 	bne.w	8001c58 <ESPRxDecoder+0x11d8>
			 {
			   	Err_bufferptr=0;
 8001018:	4b81      	ldr	r3, [pc, #516]	; (8001220 <ESPRxDecoder+0x7a0>)
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]
				bufferptr=0;
 800101e:	4b7d      	ldr	r3, [pc, #500]	; (8001214 <ESPRxDecoder+0x794>)
 8001020:	2200      	movs	r2, #0
 8001022:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8001024:	2300      	movs	r3, #0
 8001026:	71bb      	strb	r3, [r7, #6]
				WifiDisplay = 4;
 8001028:	4b7e      	ldr	r3, [pc, #504]	; (8001224 <ESPRxDecoder+0x7a4>)
 800102a:	2204      	movs	r2, #4
 800102c:	701a      	strb	r2, [r3, #0]
				if(++Error_Retry<3)		//retry for error
 800102e:	4b7b      	ldr	r3, [pc, #492]	; (800121c <ESPRxDecoder+0x79c>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	3301      	adds	r3, #1
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4b79      	ldr	r3, [pc, #484]	; (800121c <ESPRxDecoder+0x79c>)
 8001038:	701a      	strb	r2, [r3, #0]
 800103a:	4b78      	ldr	r3, [pc, #480]	; (800121c <ESPRxDecoder+0x79c>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b02      	cmp	r3, #2
 8001040:	d804      	bhi.n	800104c <ESPRxDecoder+0x5cc>
				{
				   wifi_command=80;
 8001042:	4b75      	ldr	r3, [pc, #468]	; (8001218 <ESPRxDecoder+0x798>)
 8001044:	2250      	movs	r2, #80	; 0x50
 8001046:	701a      	strb	r2, [r3, #0]
				{
				   wifi_command=50;	 // modified by satheesh
				   Error_Retry=0;
				}
			 }
		break;
 8001048:	f000 be06 	b.w	8001c58 <ESPRxDecoder+0x11d8>
				   wifi_command=50;	 // modified by satheesh
 800104c:	4b72      	ldr	r3, [pc, #456]	; (8001218 <ESPRxDecoder+0x798>)
 800104e:	2232      	movs	r2, #50	; 0x32
 8001050:	701a      	strb	r2, [r3, #0]
				   Error_Retry=0;
 8001052:	4b72      	ldr	r3, [pc, #456]	; (800121c <ESPRxDecoder+0x79c>)
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
		break;
 8001058:	f000 bdfe 	b.w	8001c58 <ESPRxDecoder+0x11d8>
 800105c:	f000 bdfc 	b.w	8001c58 <ESPRxDecoder+0x11d8>
		case 6:
			 if((Rxwifi_data=='>')&&(bufferptr==0))
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	2b3e      	cmp	r3, #62	; 0x3e
 8001064:	f040 85fa 	bne.w	8001c5c <ESPRxDecoder+0x11dc>
 8001068:	4b6a      	ldr	r3, [pc, #424]	; (8001214 <ESPRxDecoder+0x794>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	f040 85f5 	bne.w	8001c5c <ESPRxDecoder+0x11dc>
			 {
			 	bufferptr=0;
 8001072:	4b68      	ldr	r3, [pc, #416]	; (8001214 <ESPRxDecoder+0x794>)
 8001074:	2200      	movs	r2, #0
 8001076:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8001078:	2300      	movs	r3, #0
 800107a:	71bb      	strb	r3, [r7, #6]
				wifi_command=100;
 800107c:	4b66      	ldr	r3, [pc, #408]	; (8001218 <ESPRxDecoder+0x798>)
 800107e:	2264      	movs	r2, #100	; 0x64
 8001080:	701a      	strb	r2, [r3, #0]
			 }
		break;
 8001082:	f000 bdeb 	b.w	8001c5c <ESPRxDecoder+0x11dc>
		case 7:
			checkbuff[refinc]= Rxwifi_data;
 8001086:	4b68      	ldr	r3, [pc, #416]	; (8001228 <ESPRxDecoder+0x7a8>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	4619      	mov	r1, r3
 800108c:	4a67      	ldr	r2, [pc, #412]	; (800122c <ESPRxDecoder+0x7ac>)
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	5453      	strb	r3, [r2, r1]
			refinc++;
 8001092:	4b65      	ldr	r3, [pc, #404]	; (8001228 <ESPRxDecoder+0x7a8>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	3301      	adds	r3, #1
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4b63      	ldr	r3, [pc, #396]	; (8001228 <ESPRxDecoder+0x7a8>)
 800109c:	701a      	strb	r2, [r3, #0]
			if((Rxwifi_data=='$')&&(Data_bufferptr==0))
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	2b24      	cmp	r3, #36	; 0x24
 80010a2:	d10b      	bne.n	80010bc <ESPRxDecoder+0x63c>
 80010a4:	4b62      	ldr	r3, [pc, #392]	; (8001230 <ESPRxDecoder+0x7b0>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d107      	bne.n	80010bc <ESPRxDecoder+0x63c>
			 {
				Data_bufferptr=1;
 80010ac:	4b60      	ldr	r3, [pc, #384]	; (8001230 <ESPRxDecoder+0x7b0>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	701a      	strb	r2, [r3, #0]
				Valid_DataWifi1= 1;
 80010b2:	4b60      	ldr	r3, [pc, #384]	; (8001234 <ESPRxDecoder+0x7b4>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	701a      	strb	r2, [r3, #0]
 80010b8:	f000 bc49 	b.w	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==1)	 //unit id
 80010bc:	4b5c      	ldr	r3, [pc, #368]	; (8001230 <ESPRxDecoder+0x7b0>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d10c      	bne.n	80010de <ESPRxDecoder+0x65e>
			 {
				 Uart_rx_buffer[0] = DecToASCIIFun(Rxwifi_data); Data_bufferptr=2;
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 fdd2 	bl	8001c70 <DecToASCIIFun>
 80010cc:	4603      	mov	r3, r0
 80010ce:	461a      	mov	r2, r3
 80010d0:	4b59      	ldr	r3, [pc, #356]	; (8001238 <ESPRxDecoder+0x7b8>)
 80010d2:	701a      	strb	r2, [r3, #0]
 80010d4:	4b56      	ldr	r3, [pc, #344]	; (8001230 <ESPRxDecoder+0x7b0>)
 80010d6:	2202      	movs	r2, #2
 80010d8:	701a      	strb	r2, [r3, #0]
 80010da:	f000 bc38 	b.w	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==2)
 80010de:	4b54      	ldr	r3, [pc, #336]	; (8001230 <ESPRxDecoder+0x7b0>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d10c      	bne.n	8001100 <ESPRxDecoder+0x680>
			 {
				 Uart_rx_buffer[1] = DecToASCIIFun(Rxwifi_data);
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 fdc1 	bl	8001c70 <DecToASCIIFun>
 80010ee:	4603      	mov	r3, r0
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b51      	ldr	r3, [pc, #324]	; (8001238 <ESPRxDecoder+0x7b8>)
 80010f4:	705a      	strb	r2, [r3, #1]
				 Data_bufferptr=3;
 80010f6:	4b4e      	ldr	r3, [pc, #312]	; (8001230 <ESPRxDecoder+0x7b0>)
 80010f8:	2203      	movs	r2, #3
 80010fa:	701a      	strb	r2, [r3, #0]
 80010fc:	f000 bc27 	b.w	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==3)	 //,
 8001100:	4b4b      	ldr	r3, [pc, #300]	; (8001230 <ESPRxDecoder+0x7b0>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b03      	cmp	r3, #3
 8001106:	d104      	bne.n	8001112 <ESPRxDecoder+0x692>
			 {
				 Data_bufferptr=4;
 8001108:	4b49      	ldr	r3, [pc, #292]	; (8001230 <ESPRxDecoder+0x7b0>)
 800110a:	2204      	movs	r2, #4
 800110c:	701a      	strb	r2, [r3, #0]
 800110e:	f000 bc1e 	b.w	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==4)	 //process id
 8001112:	4b47      	ldr	r3, [pc, #284]	; (8001230 <ESPRxDecoder+0x7b0>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b04      	cmp	r3, #4
 8001118:	d10c      	bne.n	8001134 <ESPRxDecoder+0x6b4>
			 {
				 Data_bufferptr=5;
 800111a:	4b45      	ldr	r3, [pc, #276]	; (8001230 <ESPRxDecoder+0x7b0>)
 800111c:	2205      	movs	r2, #5
 800111e:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[2] = DecToASCIIFun(Rxwifi_data);
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	4618      	mov	r0, r3
 8001124:	f000 fda4 	bl	8001c70 <DecToASCIIFun>
 8001128:	4603      	mov	r3, r0
 800112a:	461a      	mov	r2, r3
 800112c:	4b42      	ldr	r3, [pc, #264]	; (8001238 <ESPRxDecoder+0x7b8>)
 800112e:	709a      	strb	r2, [r3, #2]
 8001130:	f000 bc0d 	b.w	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==5)
 8001134:	4b3e      	ldr	r3, [pc, #248]	; (8001230 <ESPRxDecoder+0x7b0>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b05      	cmp	r3, #5
 800113a:	d10b      	bne.n	8001154 <ESPRxDecoder+0x6d4>
			 {
				 Data_bufferptr=6;
 800113c:	4b3c      	ldr	r3, [pc, #240]	; (8001230 <ESPRxDecoder+0x7b0>)
 800113e:	2206      	movs	r2, #6
 8001140:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[3] = DecToASCIIFun(Rxwifi_data);
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	4618      	mov	r0, r3
 8001146:	f000 fd93 	bl	8001c70 <DecToASCIIFun>
 800114a:	4603      	mov	r3, r0
 800114c:	461a      	mov	r2, r3
 800114e:	4b3a      	ldr	r3, [pc, #232]	; (8001238 <ESPRxDecoder+0x7b8>)
 8001150:	70da      	strb	r2, [r3, #3]
 8001152:	e3fc      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==6)
 8001154:	4b36      	ldr	r3, [pc, #216]	; (8001230 <ESPRxDecoder+0x7b0>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b06      	cmp	r3, #6
 800115a:	d10b      	bne.n	8001174 <ESPRxDecoder+0x6f4>
			 {
				 Data_bufferptr=7;
 800115c:	4b34      	ldr	r3, [pc, #208]	; (8001230 <ESPRxDecoder+0x7b0>)
 800115e:	2207      	movs	r2, #7
 8001160:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[4] = DecToASCIIFun(Rxwifi_data);
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	4618      	mov	r0, r3
 8001166:	f000 fd83 	bl	8001c70 <DecToASCIIFun>
 800116a:	4603      	mov	r3, r0
 800116c:	461a      	mov	r2, r3
 800116e:	4b32      	ldr	r3, [pc, #200]	; (8001238 <ESPRxDecoder+0x7b8>)
 8001170:	711a      	strb	r2, [r3, #4]
 8001172:	e3ec      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==7)
 8001174:	4b2e      	ldr	r3, [pc, #184]	; (8001230 <ESPRxDecoder+0x7b0>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b07      	cmp	r3, #7
 800117a:	d10b      	bne.n	8001194 <ESPRxDecoder+0x714>
			 {
				 Data_bufferptr=8;
 800117c:	4b2c      	ldr	r3, [pc, #176]	; (8001230 <ESPRxDecoder+0x7b0>)
 800117e:	2208      	movs	r2, #8
 8001180:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[5] = DecToASCIIFun(Rxwifi_data);
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	4618      	mov	r0, r3
 8001186:	f000 fd73 	bl	8001c70 <DecToASCIIFun>
 800118a:	4603      	mov	r3, r0
 800118c:	461a      	mov	r2, r3
 800118e:	4b2a      	ldr	r3, [pc, #168]	; (8001238 <ESPRxDecoder+0x7b8>)
 8001190:	715a      	strb	r2, [r3, #5]
 8001192:	e3dc      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==8)
 8001194:	4b26      	ldr	r3, [pc, #152]	; (8001230 <ESPRxDecoder+0x7b0>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b08      	cmp	r3, #8
 800119a:	d10b      	bne.n	80011b4 <ESPRxDecoder+0x734>
			 {
				 Data_bufferptr=9;
 800119c:	4b24      	ldr	r3, [pc, #144]	; (8001230 <ESPRxDecoder+0x7b0>)
 800119e:	2209      	movs	r2, #9
 80011a0:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[6] = DecToASCIIFun(Rxwifi_data);
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 fd63 	bl	8001c70 <DecToASCIIFun>
 80011aa:	4603      	mov	r3, r0
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b22      	ldr	r3, [pc, #136]	; (8001238 <ESPRxDecoder+0x7b8>)
 80011b0:	719a      	strb	r2, [r3, #6]
 80011b2:	e3cc      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==9)
 80011b4:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <ESPRxDecoder+0x7b0>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b09      	cmp	r3, #9
 80011ba:	d10b      	bne.n	80011d4 <ESPRxDecoder+0x754>
			 {
				 Data_bufferptr=10;
 80011bc:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <ESPRxDecoder+0x7b0>)
 80011be:	220a      	movs	r2, #10
 80011c0:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[7] = DecToASCIIFun(Rxwifi_data);
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 fd53 	bl	8001c70 <DecToASCIIFun>
 80011ca:	4603      	mov	r3, r0
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <ESPRxDecoder+0x7b8>)
 80011d0:	71da      	strb	r2, [r3, #7]
 80011d2:	e3bc      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==10)
 80011d4:	4b16      	ldr	r3, [pc, #88]	; (8001230 <ESPRxDecoder+0x7b0>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b0a      	cmp	r3, #10
 80011da:	d10b      	bne.n	80011f4 <ESPRxDecoder+0x774>
			 {
				 Data_bufferptr=11;
 80011dc:	4b14      	ldr	r3, [pc, #80]	; (8001230 <ESPRxDecoder+0x7b0>)
 80011de:	220b      	movs	r2, #11
 80011e0:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[8] = DecToASCIIFun(Rxwifi_data);
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 fd43 	bl	8001c70 <DecToASCIIFun>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b12      	ldr	r3, [pc, #72]	; (8001238 <ESPRxDecoder+0x7b8>)
 80011f0:	721a      	strb	r2, [r3, #8]
 80011f2:	e3ac      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==11)
 80011f4:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <ESPRxDecoder+0x7b0>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b0b      	cmp	r3, #11
 80011fa:	d11f      	bne.n	800123c <ESPRxDecoder+0x7bc>
			 {
				 Data_bufferptr=12;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <ESPRxDecoder+0x7b0>)
 80011fe:	220c      	movs	r2, #12
 8001200:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[9] = DecToASCIIFun(Rxwifi_data);
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	4618      	mov	r0, r3
 8001206:	f000 fd33 	bl	8001c70 <DecToASCIIFun>
 800120a:	4603      	mov	r3, r0
 800120c:	461a      	mov	r2, r3
 800120e:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <ESPRxDecoder+0x7b8>)
 8001210:	725a      	strb	r2, [r3, #9]
 8001212:	e39c      	b.n	800194e <ESPRxDecoder+0xece>
 8001214:	20000832 	.word	0x20000832
 8001218:	20000734 	.word	0x20000734
 800121c:	200000ec 	.word	0x200000ec
 8001220:	200000d3 	.word	0x200000d3
 8001224:	200000d4 	.word	0x200000d4
 8001228:	20000234 	.word	0x20000234
 800122c:	20000108 	.word	0x20000108
 8001230:	200000d2 	.word	0x200000d2
 8001234:	200000d8 	.word	0x200000d8
 8001238:	2000008c 	.word	0x2000008c
			 }
			 else if(Data_bufferptr==12)
 800123c:	4ba3      	ldr	r3, [pc, #652]	; (80014cc <ESPRxDecoder+0xa4c>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b0c      	cmp	r3, #12
 8001242:	d10b      	bne.n	800125c <ESPRxDecoder+0x7dc>
			 {
				 Data_bufferptr=13;
 8001244:	4ba1      	ldr	r3, [pc, #644]	; (80014cc <ESPRxDecoder+0xa4c>)
 8001246:	220d      	movs	r2, #13
 8001248:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[10] = DecToASCIIFun(Rxwifi_data);
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	4618      	mov	r0, r3
 800124e:	f000 fd0f 	bl	8001c70 <DecToASCIIFun>
 8001252:	4603      	mov	r3, r0
 8001254:	461a      	mov	r2, r3
 8001256:	4b9e      	ldr	r3, [pc, #632]	; (80014d0 <ESPRxDecoder+0xa50>)
 8001258:	729a      	strb	r2, [r3, #10]
 800125a:	e378      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==13)
 800125c:	4b9b      	ldr	r3, [pc, #620]	; (80014cc <ESPRxDecoder+0xa4c>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b0d      	cmp	r3, #13
 8001262:	d10b      	bne.n	800127c <ESPRxDecoder+0x7fc>
			 {
				 Data_bufferptr=14;
 8001264:	4b99      	ldr	r3, [pc, #612]	; (80014cc <ESPRxDecoder+0xa4c>)
 8001266:	220e      	movs	r2, #14
 8001268:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[11] = DecToASCIIFun(Rxwifi_data);
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	4618      	mov	r0, r3
 800126e:	f000 fcff 	bl	8001c70 <DecToASCIIFun>
 8001272:	4603      	mov	r3, r0
 8001274:	461a      	mov	r2, r3
 8001276:	4b96      	ldr	r3, [pc, #600]	; (80014d0 <ESPRxDecoder+0xa50>)
 8001278:	72da      	strb	r2, [r3, #11]
 800127a:	e368      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==14)	//,
 800127c:	4b93      	ldr	r3, [pc, #588]	; (80014cc <ESPRxDecoder+0xa4c>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b0e      	cmp	r3, #14
 8001282:	d103      	bne.n	800128c <ESPRxDecoder+0x80c>
			 {
				 Data_bufferptr=15;
 8001284:	4b91      	ldr	r3, [pc, #580]	; (80014cc <ESPRxDecoder+0xa4c>)
 8001286:	220f      	movs	r2, #15
 8001288:	701a      	strb	r2, [r3, #0]
 800128a:	e360      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==15)   //Rising_Temperature_High_Http
 800128c:	4b8f      	ldr	r3, [pc, #572]	; (80014cc <ESPRxDecoder+0xa4c>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b0f      	cmp	r3, #15
 8001292:	d10b      	bne.n	80012ac <ESPRxDecoder+0x82c>
			 {
				 Data_bufferptr=16;
 8001294:	4b8d      	ldr	r3, [pc, #564]	; (80014cc <ESPRxDecoder+0xa4c>)
 8001296:	2210      	movs	r2, #16
 8001298:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[12] = DecToASCIIFun(Rxwifi_data);
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	4618      	mov	r0, r3
 800129e:	f000 fce7 	bl	8001c70 <DecToASCIIFun>
 80012a2:	4603      	mov	r3, r0
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b8a      	ldr	r3, [pc, #552]	; (80014d0 <ESPRxDecoder+0xa50>)
 80012a8:	731a      	strb	r2, [r3, #12]
 80012aa:	e350      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==16)
 80012ac:	4b87      	ldr	r3, [pc, #540]	; (80014cc <ESPRxDecoder+0xa4c>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b10      	cmp	r3, #16
 80012b2:	d10b      	bne.n	80012cc <ESPRxDecoder+0x84c>
			 {
				 Data_bufferptr=17;
 80012b4:	4b85      	ldr	r3, [pc, #532]	; (80014cc <ESPRxDecoder+0xa4c>)
 80012b6:	2211      	movs	r2, #17
 80012b8:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[13] = DecToASCIIFun(Rxwifi_data);
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 fcd7 	bl	8001c70 <DecToASCIIFun>
 80012c2:	4603      	mov	r3, r0
 80012c4:	461a      	mov	r2, r3
 80012c6:	4b82      	ldr	r3, [pc, #520]	; (80014d0 <ESPRxDecoder+0xa50>)
 80012c8:	735a      	strb	r2, [r3, #13]
 80012ca:	e340      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==17)
 80012cc:	4b7f      	ldr	r3, [pc, #508]	; (80014cc <ESPRxDecoder+0xa4c>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b11      	cmp	r3, #17
 80012d2:	d10b      	bne.n	80012ec <ESPRxDecoder+0x86c>
			 {
				 Data_bufferptr=18;
 80012d4:	4b7d      	ldr	r3, [pc, #500]	; (80014cc <ESPRxDecoder+0xa4c>)
 80012d6:	2212      	movs	r2, #18
 80012d8:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[14] = DecToASCIIFun(Rxwifi_data);
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 fcc7 	bl	8001c70 <DecToASCIIFun>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b7a      	ldr	r3, [pc, #488]	; (80014d0 <ESPRxDecoder+0xa50>)
 80012e8:	739a      	strb	r2, [r3, #14]
 80012ea:	e330      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==18)
 80012ec:	4b77      	ldr	r3, [pc, #476]	; (80014cc <ESPRxDecoder+0xa4c>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b12      	cmp	r3, #18
 80012f2:	d10b      	bne.n	800130c <ESPRxDecoder+0x88c>
			 {
				 Data_bufferptr=19;
 80012f4:	4b75      	ldr	r3, [pc, #468]	; (80014cc <ESPRxDecoder+0xa4c>)
 80012f6:	2213      	movs	r2, #19
 80012f8:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[15] = DecToASCIIFun(Rxwifi_data);
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 fcb7 	bl	8001c70 <DecToASCIIFun>
 8001302:	4603      	mov	r3, r0
 8001304:	461a      	mov	r2, r3
 8001306:	4b72      	ldr	r3, [pc, #456]	; (80014d0 <ESPRxDecoder+0xa50>)
 8001308:	73da      	strb	r2, [r3, #15]
 800130a:	e320      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==19)	//,
 800130c:	4b6f      	ldr	r3, [pc, #444]	; (80014cc <ESPRxDecoder+0xa4c>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b13      	cmp	r3, #19
 8001312:	d103      	bne.n	800131c <ESPRxDecoder+0x89c>
			 {
				 Data_bufferptr=20;
 8001314:	4b6d      	ldr	r3, [pc, #436]	; (80014cc <ESPRxDecoder+0xa4c>)
 8001316:	2214      	movs	r2, #20
 8001318:	701a      	strb	r2, [r3, #0]
 800131a:	e318      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==20)   //Temperature_High_Http
 800131c:	4b6b      	ldr	r3, [pc, #428]	; (80014cc <ESPRxDecoder+0xa4c>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b14      	cmp	r3, #20
 8001322:	d10b      	bne.n	800133c <ESPRxDecoder+0x8bc>
			 {
				 Data_bufferptr=21;
 8001324:	4b69      	ldr	r3, [pc, #420]	; (80014cc <ESPRxDecoder+0xa4c>)
 8001326:	2215      	movs	r2, #21
 8001328:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[16] = DecToASCIIFun(Rxwifi_data);
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	4618      	mov	r0, r3
 800132e:	f000 fc9f 	bl	8001c70 <DecToASCIIFun>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	4b66      	ldr	r3, [pc, #408]	; (80014d0 <ESPRxDecoder+0xa50>)
 8001338:	741a      	strb	r2, [r3, #16]
 800133a:	e308      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==21)
 800133c:	4b63      	ldr	r3, [pc, #396]	; (80014cc <ESPRxDecoder+0xa4c>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b15      	cmp	r3, #21
 8001342:	d10b      	bne.n	800135c <ESPRxDecoder+0x8dc>
			 {
				 Data_bufferptr=22;
 8001344:	4b61      	ldr	r3, [pc, #388]	; (80014cc <ESPRxDecoder+0xa4c>)
 8001346:	2216      	movs	r2, #22
 8001348:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[17] = DecToASCIIFun(Rxwifi_data);
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	4618      	mov	r0, r3
 800134e:	f000 fc8f 	bl	8001c70 <DecToASCIIFun>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b5e      	ldr	r3, [pc, #376]	; (80014d0 <ESPRxDecoder+0xa50>)
 8001358:	745a      	strb	r2, [r3, #17]
 800135a:	e2f8      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==22)
 800135c:	4b5b      	ldr	r3, [pc, #364]	; (80014cc <ESPRxDecoder+0xa4c>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b16      	cmp	r3, #22
 8001362:	d10b      	bne.n	800137c <ESPRxDecoder+0x8fc>
			 {
				 Data_bufferptr=23;
 8001364:	4b59      	ldr	r3, [pc, #356]	; (80014cc <ESPRxDecoder+0xa4c>)
 8001366:	2217      	movs	r2, #23
 8001368:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[18] = DecToASCIIFun(Rxwifi_data);
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	4618      	mov	r0, r3
 800136e:	f000 fc7f 	bl	8001c70 <DecToASCIIFun>
 8001372:	4603      	mov	r3, r0
 8001374:	461a      	mov	r2, r3
 8001376:	4b56      	ldr	r3, [pc, #344]	; (80014d0 <ESPRxDecoder+0xa50>)
 8001378:	749a      	strb	r2, [r3, #18]
 800137a:	e2e8      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==23)
 800137c:	4b53      	ldr	r3, [pc, #332]	; (80014cc <ESPRxDecoder+0xa4c>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b17      	cmp	r3, #23
 8001382:	d10b      	bne.n	800139c <ESPRxDecoder+0x91c>
			 {
				 Data_bufferptr=24;
 8001384:	4b51      	ldr	r3, [pc, #324]	; (80014cc <ESPRxDecoder+0xa4c>)
 8001386:	2218      	movs	r2, #24
 8001388:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[19] = DecToASCIIFun(Rxwifi_data);
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	4618      	mov	r0, r3
 800138e:	f000 fc6f 	bl	8001c70 <DecToASCIIFun>
 8001392:	4603      	mov	r3, r0
 8001394:	461a      	mov	r2, r3
 8001396:	4b4e      	ldr	r3, [pc, #312]	; (80014d0 <ESPRxDecoder+0xa50>)
 8001398:	74da      	strb	r2, [r3, #19]
 800139a:	e2d8      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==24)   //,
 800139c:	4b4b      	ldr	r3, [pc, #300]	; (80014cc <ESPRxDecoder+0xa4c>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b18      	cmp	r3, #24
 80013a2:	d103      	bne.n	80013ac <ESPRxDecoder+0x92c>
			 {
				 Data_bufferptr=25;
 80013a4:	4b49      	ldr	r3, [pc, #292]	; (80014cc <ESPRxDecoder+0xa4c>)
 80013a6:	2219      	movs	r2, #25
 80013a8:	701a      	strb	r2, [r3, #0]
 80013aa:	e2d0      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==25)  //Temperature_Low_Http
 80013ac:	4b47      	ldr	r3, [pc, #284]	; (80014cc <ESPRxDecoder+0xa4c>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b19      	cmp	r3, #25
 80013b2:	d10b      	bne.n	80013cc <ESPRxDecoder+0x94c>
			 {
				 Data_bufferptr=26;
 80013b4:	4b45      	ldr	r3, [pc, #276]	; (80014cc <ESPRxDecoder+0xa4c>)
 80013b6:	221a      	movs	r2, #26
 80013b8:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[20] = DecToASCIIFun(Rxwifi_data);
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 fc57 	bl	8001c70 <DecToASCIIFun>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b42      	ldr	r3, [pc, #264]	; (80014d0 <ESPRxDecoder+0xa50>)
 80013c8:	751a      	strb	r2, [r3, #20]
 80013ca:	e2c0      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==26)
 80013cc:	4b3f      	ldr	r3, [pc, #252]	; (80014cc <ESPRxDecoder+0xa4c>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b1a      	cmp	r3, #26
 80013d2:	d10b      	bne.n	80013ec <ESPRxDecoder+0x96c>
			 {
				 Data_bufferptr=27;
 80013d4:	4b3d      	ldr	r3, [pc, #244]	; (80014cc <ESPRxDecoder+0xa4c>)
 80013d6:	221b      	movs	r2, #27
 80013d8:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[21] = DecToASCIIFun(Rxwifi_data);
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	4618      	mov	r0, r3
 80013de:	f000 fc47 	bl	8001c70 <DecToASCIIFun>
 80013e2:	4603      	mov	r3, r0
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b3a      	ldr	r3, [pc, #232]	; (80014d0 <ESPRxDecoder+0xa50>)
 80013e8:	755a      	strb	r2, [r3, #21]
 80013ea:	e2b0      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==27)
 80013ec:	4b37      	ldr	r3, [pc, #220]	; (80014cc <ESPRxDecoder+0xa4c>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b1b      	cmp	r3, #27
 80013f2:	d10b      	bne.n	800140c <ESPRxDecoder+0x98c>
			 {
				 Data_bufferptr=28;
 80013f4:	4b35      	ldr	r3, [pc, #212]	; (80014cc <ESPRxDecoder+0xa4c>)
 80013f6:	221c      	movs	r2, #28
 80013f8:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[22] = DecToASCIIFun(Rxwifi_data);
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 fc37 	bl	8001c70 <DecToASCIIFun>
 8001402:	4603      	mov	r3, r0
 8001404:	461a      	mov	r2, r3
 8001406:	4b32      	ldr	r3, [pc, #200]	; (80014d0 <ESPRxDecoder+0xa50>)
 8001408:	759a      	strb	r2, [r3, #22]
 800140a:	e2a0      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==28)
 800140c:	4b2f      	ldr	r3, [pc, #188]	; (80014cc <ESPRxDecoder+0xa4c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b1c      	cmp	r3, #28
 8001412:	d10b      	bne.n	800142c <ESPRxDecoder+0x9ac>
			 {
				 Data_bufferptr=29;
 8001414:	4b2d      	ldr	r3, [pc, #180]	; (80014cc <ESPRxDecoder+0xa4c>)
 8001416:	221d      	movs	r2, #29
 8001418:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[23] = DecToASCIIFun(Rxwifi_data);
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	4618      	mov	r0, r3
 800141e:	f000 fc27 	bl	8001c70 <DecToASCIIFun>
 8001422:	4603      	mov	r3, r0
 8001424:	461a      	mov	r2, r3
 8001426:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <ESPRxDecoder+0xa50>)
 8001428:	75da      	strb	r2, [r3, #23]
 800142a:	e290      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==29)  //,
 800142c:	4b27      	ldr	r3, [pc, #156]	; (80014cc <ESPRxDecoder+0xa4c>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b1d      	cmp	r3, #29
 8001432:	d103      	bne.n	800143c <ESPRxDecoder+0x9bc>
			 {
				 Data_bufferptr=30;
 8001434:	4b25      	ldr	r3, [pc, #148]	; (80014cc <ESPRxDecoder+0xa4c>)
 8001436:	221e      	movs	r2, #30
 8001438:	701a      	strb	r2, [r3, #0]
 800143a:	e288      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			else if(Data_bufferptr==30)  //Temperature_Low_Http
 800143c:	4b23      	ldr	r3, [pc, #140]	; (80014cc <ESPRxDecoder+0xa4c>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b1e      	cmp	r3, #30
 8001442:	d10b      	bne.n	800145c <ESPRxDecoder+0x9dc>
			 {
				 Data_bufferptr=32;
 8001444:	4b21      	ldr	r3, [pc, #132]	; (80014cc <ESPRxDecoder+0xa4c>)
 8001446:	2220      	movs	r2, #32
 8001448:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[24] = DecToASCIIFun(Rxwifi_data);
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	4618      	mov	r0, r3
 800144e:	f000 fc0f 	bl	8001c70 <DecToASCIIFun>
 8001452:	4603      	mov	r3, r0
 8001454:	461a      	mov	r2, r3
 8001456:	4b1e      	ldr	r3, [pc, #120]	; (80014d0 <ESPRxDecoder+0xa50>)
 8001458:	761a      	strb	r2, [r3, #24]
 800145a:	e278      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==32)
 800145c:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <ESPRxDecoder+0xa4c>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b20      	cmp	r3, #32
 8001462:	d10b      	bne.n	800147c <ESPRxDecoder+0x9fc>
			 {
				 Data_bufferptr=33;
 8001464:	4b19      	ldr	r3, [pc, #100]	; (80014cc <ESPRxDecoder+0xa4c>)
 8001466:	2221      	movs	r2, #33	; 0x21
 8001468:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[25] = DecToASCIIFun(Rxwifi_data);
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	4618      	mov	r0, r3
 800146e:	f000 fbff 	bl	8001c70 <DecToASCIIFun>
 8001472:	4603      	mov	r3, r0
 8001474:	461a      	mov	r2, r3
 8001476:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <ESPRxDecoder+0xa50>)
 8001478:	765a      	strb	r2, [r3, #25]
 800147a:	e268      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==33)
 800147c:	4b13      	ldr	r3, [pc, #76]	; (80014cc <ESPRxDecoder+0xa4c>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b21      	cmp	r3, #33	; 0x21
 8001482:	d10b      	bne.n	800149c <ESPRxDecoder+0xa1c>
			 {
				 Data_bufferptr=34;
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <ESPRxDecoder+0xa4c>)
 8001486:	2222      	movs	r2, #34	; 0x22
 8001488:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[26] = DecToASCIIFun(Rxwifi_data);
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	4618      	mov	r0, r3
 800148e:	f000 fbef 	bl	8001c70 <DecToASCIIFun>
 8001492:	4603      	mov	r3, r0
 8001494:	461a      	mov	r2, r3
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <ESPRxDecoder+0xa50>)
 8001498:	769a      	strb	r2, [r3, #26]
 800149a:	e258      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==34)
 800149c:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <ESPRxDecoder+0xa4c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b22      	cmp	r3, #34	; 0x22
 80014a2:	d10b      	bne.n	80014bc <ESPRxDecoder+0xa3c>
			 {
				 Data_bufferptr=35;
 80014a4:	4b09      	ldr	r3, [pc, #36]	; (80014cc <ESPRxDecoder+0xa4c>)
 80014a6:	2223      	movs	r2, #35	; 0x23
 80014a8:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[27] = DecToASCIIFun(Rxwifi_data);
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f000 fbdf 	bl	8001c70 <DecToASCIIFun>
 80014b2:	4603      	mov	r3, r0
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <ESPRxDecoder+0xa50>)
 80014b8:	76da      	strb	r2, [r3, #27]
 80014ba:	e248      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==35)  //,
 80014bc:	4b03      	ldr	r3, [pc, #12]	; (80014cc <ESPRxDecoder+0xa4c>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b23      	cmp	r3, #35	; 0x23
 80014c2:	d107      	bne.n	80014d4 <ESPRxDecoder+0xa54>
			 {
				 Data_bufferptr=36;
 80014c4:	4b01      	ldr	r3, [pc, #4]	; (80014cc <ESPRxDecoder+0xa4c>)
 80014c6:	2224      	movs	r2, #36	; 0x24
 80014c8:	701a      	strb	r2, [r3, #0]
 80014ca:	e240      	b.n	800194e <ESPRxDecoder+0xece>
 80014cc:	200000d2 	.word	0x200000d2
 80014d0:	2000008c 	.word	0x2000008c
			 }
			 else if(Data_bufferptr==36)  //R_seq1_hour
 80014d4:	4ba2      	ldr	r3, [pc, #648]	; (8001760 <ESPRxDecoder+0xce0>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b24      	cmp	r3, #36	; 0x24
 80014da:	d10b      	bne.n	80014f4 <ESPRxDecoder+0xa74>
			 {
				 Data_bufferptr=37;
 80014dc:	4ba0      	ldr	r3, [pc, #640]	; (8001760 <ESPRxDecoder+0xce0>)
 80014de:	2225      	movs	r2, #37	; 0x25
 80014e0:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[28] = DecToASCIIFun(Rxwifi_data);
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f000 fbc3 	bl	8001c70 <DecToASCIIFun>
 80014ea:	4603      	mov	r3, r0
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b9d      	ldr	r3, [pc, #628]	; (8001764 <ESPRxDecoder+0xce4>)
 80014f0:	771a      	strb	r2, [r3, #28]
 80014f2:	e22c      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==37)
 80014f4:	4b9a      	ldr	r3, [pc, #616]	; (8001760 <ESPRxDecoder+0xce0>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b25      	cmp	r3, #37	; 0x25
 80014fa:	d10b      	bne.n	8001514 <ESPRxDecoder+0xa94>
			 {
				 Data_bufferptr=38;
 80014fc:	4b98      	ldr	r3, [pc, #608]	; (8001760 <ESPRxDecoder+0xce0>)
 80014fe:	2226      	movs	r2, #38	; 0x26
 8001500:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[29] = DecToASCIIFun(Rxwifi_data);
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	4618      	mov	r0, r3
 8001506:	f000 fbb3 	bl	8001c70 <DecToASCIIFun>
 800150a:	4603      	mov	r3, r0
 800150c:	461a      	mov	r2, r3
 800150e:	4b95      	ldr	r3, [pc, #596]	; (8001764 <ESPRxDecoder+0xce4>)
 8001510:	775a      	strb	r2, [r3, #29]
 8001512:	e21c      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==38)  //R_seq1_min
 8001514:	4b92      	ldr	r3, [pc, #584]	; (8001760 <ESPRxDecoder+0xce0>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b26      	cmp	r3, #38	; 0x26
 800151a:	d10b      	bne.n	8001534 <ESPRxDecoder+0xab4>
			 {
				 Data_bufferptr=39;
 800151c:	4b90      	ldr	r3, [pc, #576]	; (8001760 <ESPRxDecoder+0xce0>)
 800151e:	2227      	movs	r2, #39	; 0x27
 8001520:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[30] = DecToASCIIFun(Rxwifi_data);
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	4618      	mov	r0, r3
 8001526:	f000 fba3 	bl	8001c70 <DecToASCIIFun>
 800152a:	4603      	mov	r3, r0
 800152c:	461a      	mov	r2, r3
 800152e:	4b8d      	ldr	r3, [pc, #564]	; (8001764 <ESPRxDecoder+0xce4>)
 8001530:	779a      	strb	r2, [r3, #30]
 8001532:	e20c      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==39)
 8001534:	4b8a      	ldr	r3, [pc, #552]	; (8001760 <ESPRxDecoder+0xce0>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b27      	cmp	r3, #39	; 0x27
 800153a:	d10b      	bne.n	8001554 <ESPRxDecoder+0xad4>
			 {
				 Data_bufferptr=40;
 800153c:	4b88      	ldr	r3, [pc, #544]	; (8001760 <ESPRxDecoder+0xce0>)
 800153e:	2228      	movs	r2, #40	; 0x28
 8001540:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[31] = DecToASCIIFun(Rxwifi_data);
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	4618      	mov	r0, r3
 8001546:	f000 fb93 	bl	8001c70 <DecToASCIIFun>
 800154a:	4603      	mov	r3, r0
 800154c:	461a      	mov	r2, r3
 800154e:	4b85      	ldr	r3, [pc, #532]	; (8001764 <ESPRxDecoder+0xce4>)
 8001550:	77da      	strb	r2, [r3, #31]
 8001552:	e1fc      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==40)  //,
 8001554:	4b82      	ldr	r3, [pc, #520]	; (8001760 <ESPRxDecoder+0xce0>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b28      	cmp	r3, #40	; 0x28
 800155a:	d103      	bne.n	8001564 <ESPRxDecoder+0xae4>
			 {
				 Data_bufferptr=41;
 800155c:	4b80      	ldr	r3, [pc, #512]	; (8001760 <ESPRxDecoder+0xce0>)
 800155e:	2229      	movs	r2, #41	; 0x29
 8001560:	701a      	strb	r2, [r3, #0]
 8001562:	e1f4      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==41)  //seq1_hour
 8001564:	4b7e      	ldr	r3, [pc, #504]	; (8001760 <ESPRxDecoder+0xce0>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b29      	cmp	r3, #41	; 0x29
 800156a:	d10c      	bne.n	8001586 <ESPRxDecoder+0xb06>
			 {
				 Data_bufferptr=42;
 800156c:	4b7c      	ldr	r3, [pc, #496]	; (8001760 <ESPRxDecoder+0xce0>)
 800156e:	222a      	movs	r2, #42	; 0x2a
 8001570:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[32] = DecToASCIIFun(Rxwifi_data);
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	4618      	mov	r0, r3
 8001576:	f000 fb7b 	bl	8001c70 <DecToASCIIFun>
 800157a:	4603      	mov	r3, r0
 800157c:	461a      	mov	r2, r3
 800157e:	4b79      	ldr	r3, [pc, #484]	; (8001764 <ESPRxDecoder+0xce4>)
 8001580:	f883 2020 	strb.w	r2, [r3, #32]
 8001584:	e1e3      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==42)
 8001586:	4b76      	ldr	r3, [pc, #472]	; (8001760 <ESPRxDecoder+0xce0>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b2a      	cmp	r3, #42	; 0x2a
 800158c:	d10c      	bne.n	80015a8 <ESPRxDecoder+0xb28>
			 {
				 Data_bufferptr=43;
 800158e:	4b74      	ldr	r3, [pc, #464]	; (8001760 <ESPRxDecoder+0xce0>)
 8001590:	222b      	movs	r2, #43	; 0x2b
 8001592:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[33] = DecToASCIIFun(Rxwifi_data);
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	4618      	mov	r0, r3
 8001598:	f000 fb6a 	bl	8001c70 <DecToASCIIFun>
 800159c:	4603      	mov	r3, r0
 800159e:	461a      	mov	r2, r3
 80015a0:	4b70      	ldr	r3, [pc, #448]	; (8001764 <ESPRxDecoder+0xce4>)
 80015a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80015a6:	e1d2      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==43)  //seq1_min
 80015a8:	4b6d      	ldr	r3, [pc, #436]	; (8001760 <ESPRxDecoder+0xce0>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b2b      	cmp	r3, #43	; 0x2b
 80015ae:	d10c      	bne.n	80015ca <ESPRxDecoder+0xb4a>
			 {
				 Data_bufferptr=44;
 80015b0:	4b6b      	ldr	r3, [pc, #428]	; (8001760 <ESPRxDecoder+0xce0>)
 80015b2:	222c      	movs	r2, #44	; 0x2c
 80015b4:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[34] = DecToASCIIFun(Rxwifi_data);
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 fb59 	bl	8001c70 <DecToASCIIFun>
 80015be:	4603      	mov	r3, r0
 80015c0:	461a      	mov	r2, r3
 80015c2:	4b68      	ldr	r3, [pc, #416]	; (8001764 <ESPRxDecoder+0xce4>)
 80015c4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80015c8:	e1c1      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==44)
 80015ca:	4b65      	ldr	r3, [pc, #404]	; (8001760 <ESPRxDecoder+0xce0>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b2c      	cmp	r3, #44	; 0x2c
 80015d0:	d10c      	bne.n	80015ec <ESPRxDecoder+0xb6c>
			 {
				 Data_bufferptr=45;
 80015d2:	4b63      	ldr	r3, [pc, #396]	; (8001760 <ESPRxDecoder+0xce0>)
 80015d4:	222d      	movs	r2, #45	; 0x2d
 80015d6:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[35] = DecToASCIIFun(Rxwifi_data);
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 fb48 	bl	8001c70 <DecToASCIIFun>
 80015e0:	4603      	mov	r3, r0
 80015e2:	461a      	mov	r2, r3
 80015e4:	4b5f      	ldr	r3, [pc, #380]	; (8001764 <ESPRxDecoder+0xce4>)
 80015e6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 80015ea:	e1b0      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==45)  //,
 80015ec:	4b5c      	ldr	r3, [pc, #368]	; (8001760 <ESPRxDecoder+0xce0>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b2d      	cmp	r3, #45	; 0x2d
 80015f2:	d103      	bne.n	80015fc <ESPRxDecoder+0xb7c>
			 {
				 Data_bufferptr=46;
 80015f4:	4b5a      	ldr	r3, [pc, #360]	; (8001760 <ESPRxDecoder+0xce0>)
 80015f6:	222e      	movs	r2, #46	; 0x2e
 80015f8:	701a      	strb	r2, [r3, #0]
 80015fa:	e1a8      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==46)  //R_seq2_hour
 80015fc:	4b58      	ldr	r3, [pc, #352]	; (8001760 <ESPRxDecoder+0xce0>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b2e      	cmp	r3, #46	; 0x2e
 8001602:	d10c      	bne.n	800161e <ESPRxDecoder+0xb9e>
			 {
				 Data_bufferptr=47;
 8001604:	4b56      	ldr	r3, [pc, #344]	; (8001760 <ESPRxDecoder+0xce0>)
 8001606:	222f      	movs	r2, #47	; 0x2f
 8001608:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[36] = DecToASCIIFun(Rxwifi_data);
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	4618      	mov	r0, r3
 800160e:	f000 fb2f 	bl	8001c70 <DecToASCIIFun>
 8001612:	4603      	mov	r3, r0
 8001614:	461a      	mov	r2, r3
 8001616:	4b53      	ldr	r3, [pc, #332]	; (8001764 <ESPRxDecoder+0xce4>)
 8001618:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800161c:	e197      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==47)
 800161e:	4b50      	ldr	r3, [pc, #320]	; (8001760 <ESPRxDecoder+0xce0>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b2f      	cmp	r3, #47	; 0x2f
 8001624:	d10c      	bne.n	8001640 <ESPRxDecoder+0xbc0>
			 {
				 Data_bufferptr=48;
 8001626:	4b4e      	ldr	r3, [pc, #312]	; (8001760 <ESPRxDecoder+0xce0>)
 8001628:	2230      	movs	r2, #48	; 0x30
 800162a:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[37] = DecToASCIIFun(Rxwifi_data);
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	4618      	mov	r0, r3
 8001630:	f000 fb1e 	bl	8001c70 <DecToASCIIFun>
 8001634:	4603      	mov	r3, r0
 8001636:	461a      	mov	r2, r3
 8001638:	4b4a      	ldr	r3, [pc, #296]	; (8001764 <ESPRxDecoder+0xce4>)
 800163a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800163e:	e186      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==48)  //R_seq2_hour
 8001640:	4b47      	ldr	r3, [pc, #284]	; (8001760 <ESPRxDecoder+0xce0>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b30      	cmp	r3, #48	; 0x30
 8001646:	d10c      	bne.n	8001662 <ESPRxDecoder+0xbe2>
			 {
				 Data_bufferptr=49;
 8001648:	4b45      	ldr	r3, [pc, #276]	; (8001760 <ESPRxDecoder+0xce0>)
 800164a:	2231      	movs	r2, #49	; 0x31
 800164c:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[38] = DecToASCIIFun(Rxwifi_data);
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	4618      	mov	r0, r3
 8001652:	f000 fb0d 	bl	8001c70 <DecToASCIIFun>
 8001656:	4603      	mov	r3, r0
 8001658:	461a      	mov	r2, r3
 800165a:	4b42      	ldr	r3, [pc, #264]	; (8001764 <ESPRxDecoder+0xce4>)
 800165c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8001660:	e175      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==49)
 8001662:	4b3f      	ldr	r3, [pc, #252]	; (8001760 <ESPRxDecoder+0xce0>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b31      	cmp	r3, #49	; 0x31
 8001668:	d10c      	bne.n	8001684 <ESPRxDecoder+0xc04>
			 {
				 Data_bufferptr=50;
 800166a:	4b3d      	ldr	r3, [pc, #244]	; (8001760 <ESPRxDecoder+0xce0>)
 800166c:	2232      	movs	r2, #50	; 0x32
 800166e:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[39] = DecToASCIIFun(Rxwifi_data);
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	4618      	mov	r0, r3
 8001674:	f000 fafc 	bl	8001c70 <DecToASCIIFun>
 8001678:	4603      	mov	r3, r0
 800167a:	461a      	mov	r2, r3
 800167c:	4b39      	ldr	r3, [pc, #228]	; (8001764 <ESPRxDecoder+0xce4>)
 800167e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 8001682:	e164      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==50)  //seq1_minute
 8001684:	4b36      	ldr	r3, [pc, #216]	; (8001760 <ESPRxDecoder+0xce0>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b32      	cmp	r3, #50	; 0x32
 800168a:	d103      	bne.n	8001694 <ESPRxDecoder+0xc14>
			 {
				 Data_bufferptr=52;
 800168c:	4b34      	ldr	r3, [pc, #208]	; (8001760 <ESPRxDecoder+0xce0>)
 800168e:	2234      	movs	r2, #52	; 0x34
 8001690:	701a      	strb	r2, [r3, #0]
 8001692:	e15c      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==52)  //seq2_hour
 8001694:	4b32      	ldr	r3, [pc, #200]	; (8001760 <ESPRxDecoder+0xce0>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b34      	cmp	r3, #52	; 0x34
 800169a:	d10c      	bne.n	80016b6 <ESPRxDecoder+0xc36>
			 {
				 Data_bufferptr=53;
 800169c:	4b30      	ldr	r3, [pc, #192]	; (8001760 <ESPRxDecoder+0xce0>)
 800169e:	2235      	movs	r2, #53	; 0x35
 80016a0:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[40] = DecToASCIIFun(Rxwifi_data);
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f000 fae3 	bl	8001c70 <DecToASCIIFun>
 80016aa:	4603      	mov	r3, r0
 80016ac:	461a      	mov	r2, r3
 80016ae:	4b2d      	ldr	r3, [pc, #180]	; (8001764 <ESPRxDecoder+0xce4>)
 80016b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80016b4:	e14b      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==53)
 80016b6:	4b2a      	ldr	r3, [pc, #168]	; (8001760 <ESPRxDecoder+0xce0>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b35      	cmp	r3, #53	; 0x35
 80016bc:	d10c      	bne.n	80016d8 <ESPRxDecoder+0xc58>
			 {
				 Data_bufferptr=54;
 80016be:	4b28      	ldr	r3, [pc, #160]	; (8001760 <ESPRxDecoder+0xce0>)
 80016c0:	2236      	movs	r2, #54	; 0x36
 80016c2:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[41] = DecToASCIIFun(Rxwifi_data);
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 fad2 	bl	8001c70 <DecToASCIIFun>
 80016cc:	4603      	mov	r3, r0
 80016ce:	461a      	mov	r2, r3
 80016d0:	4b24      	ldr	r3, [pc, #144]	; (8001764 <ESPRxDecoder+0xce4>)
 80016d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80016d6:	e13a      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==54)  //seq2_minute
 80016d8:	4b21      	ldr	r3, [pc, #132]	; (8001760 <ESPRxDecoder+0xce0>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b36      	cmp	r3, #54	; 0x36
 80016de:	d10c      	bne.n	80016fa <ESPRxDecoder+0xc7a>
			 {
				 Data_bufferptr=55;
 80016e0:	4b1f      	ldr	r3, [pc, #124]	; (8001760 <ESPRxDecoder+0xce0>)
 80016e2:	2237      	movs	r2, #55	; 0x37
 80016e4:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[42] = DecToASCIIFun(Rxwifi_data);
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 fac1 	bl	8001c70 <DecToASCIIFun>
 80016ee:	4603      	mov	r3, r0
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b1c      	ldr	r3, [pc, #112]	; (8001764 <ESPRxDecoder+0xce4>)
 80016f4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 80016f8:	e129      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==55)
 80016fa:	4b19      	ldr	r3, [pc, #100]	; (8001760 <ESPRxDecoder+0xce0>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b37      	cmp	r3, #55	; 0x37
 8001700:	d10c      	bne.n	800171c <ESPRxDecoder+0xc9c>
			 {
				 Data_bufferptr=56;
 8001702:	4b17      	ldr	r3, [pc, #92]	; (8001760 <ESPRxDecoder+0xce0>)
 8001704:	2238      	movs	r2, #56	; 0x38
 8001706:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[43] = DecToASCIIFun(Rxwifi_data);
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	4618      	mov	r0, r3
 800170c:	f000 fab0 	bl	8001c70 <DecToASCIIFun>
 8001710:	4603      	mov	r3, r0
 8001712:	461a      	mov	r2, r3
 8001714:	4b13      	ldr	r3, [pc, #76]	; (8001764 <ESPRxDecoder+0xce4>)
 8001716:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 800171a:	e118      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==56)  //,
 800171c:	4b10      	ldr	r3, [pc, #64]	; (8001760 <ESPRxDecoder+0xce0>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b38      	cmp	r3, #56	; 0x38
 8001722:	d103      	bne.n	800172c <ESPRxDecoder+0xcac>
			 {
				 Data_bufferptr=57;
 8001724:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <ESPRxDecoder+0xce0>)
 8001726:	2239      	movs	r2, #57	; 0x39
 8001728:	701a      	strb	r2, [r3, #0]
 800172a:	e110      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==57)  //Type of process
 800172c:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <ESPRxDecoder+0xce0>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b39      	cmp	r3, #57	; 0x39
 8001732:	d10c      	bne.n	800174e <ESPRxDecoder+0xcce>
			 {
				 Data_bufferptr=58;
 8001734:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <ESPRxDecoder+0xce0>)
 8001736:	223a      	movs	r2, #58	; 0x3a
 8001738:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[44] = DecToASCIIFun(Rxwifi_data);
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	4618      	mov	r0, r3
 800173e:	f000 fa97 	bl	8001c70 <DecToASCIIFun>
 8001742:	4603      	mov	r3, r0
 8001744:	461a      	mov	r2, r3
 8001746:	4b07      	ldr	r3, [pc, #28]	; (8001764 <ESPRxDecoder+0xce4>)
 8001748:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800174c:	e0ff      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==58)  //,
 800174e:	4b04      	ldr	r3, [pc, #16]	; (8001760 <ESPRxDecoder+0xce0>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b3a      	cmp	r3, #58	; 0x3a
 8001754:	d108      	bne.n	8001768 <ESPRxDecoder+0xce8>
			 {
				 Data_bufferptr=59;
 8001756:	4b02      	ldr	r3, [pc, #8]	; (8001760 <ESPRxDecoder+0xce0>)
 8001758:	223b      	movs	r2, #59	; 0x3b
 800175a:	701a      	strb	r2, [r3, #0]
 800175c:	e0f7      	b.n	800194e <ESPRxDecoder+0xece>
 800175e:	bf00      	nop
 8001760:	200000d2 	.word	0x200000d2
 8001764:	2000008c 	.word	0x2000008c
			 }
			 else if(Data_bufferptr==59)  //Offset time before timer
 8001768:	4b97      	ldr	r3, [pc, #604]	; (80019c8 <ESPRxDecoder+0xf48>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b3b      	cmp	r3, #59	; 0x3b
 800176e:	d10c      	bne.n	800178a <ESPRxDecoder+0xd0a>
			 {
				 Data_bufferptr=60;
 8001770:	4b95      	ldr	r3, [pc, #596]	; (80019c8 <ESPRxDecoder+0xf48>)
 8001772:	223c      	movs	r2, #60	; 0x3c
 8001774:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[45] = DecToASCIIFun(Rxwifi_data);
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	4618      	mov	r0, r3
 800177a:	f000 fa79 	bl	8001c70 <DecToASCIIFun>
 800177e:	4603      	mov	r3, r0
 8001780:	461a      	mov	r2, r3
 8001782:	4b92      	ldr	r3, [pc, #584]	; (80019cc <ESPRxDecoder+0xf4c>)
 8001784:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8001788:	e0e1      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==60)
 800178a:	4b8f      	ldr	r3, [pc, #572]	; (80019c8 <ESPRxDecoder+0xf48>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b3c      	cmp	r3, #60	; 0x3c
 8001790:	d10c      	bne.n	80017ac <ESPRxDecoder+0xd2c>
			 {
				 Data_bufferptr=61;
 8001792:	4b8d      	ldr	r3, [pc, #564]	; (80019c8 <ESPRxDecoder+0xf48>)
 8001794:	223d      	movs	r2, #61	; 0x3d
 8001796:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[46] = DecToASCIIFun(Rxwifi_data);
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	4618      	mov	r0, r3
 800179c:	f000 fa68 	bl	8001c70 <DecToASCIIFun>
 80017a0:	4603      	mov	r3, r0
 80017a2:	461a      	mov	r2, r3
 80017a4:	4b89      	ldr	r3, [pc, #548]	; (80019cc <ESPRxDecoder+0xf4c>)
 80017a6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 80017aa:	e0d0      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==61)  //,
 80017ac:	4b86      	ldr	r3, [pc, #536]	; (80019c8 <ESPRxDecoder+0xf48>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b3d      	cmp	r3, #61	; 0x3d
 80017b2:	d103      	bne.n	80017bc <ESPRxDecoder+0xd3c>
			 {
				 Data_bufferptr=62;
 80017b4:	4b84      	ldr	r3, [pc, #528]	; (80019c8 <ESPRxDecoder+0xf48>)
 80017b6:	223e      	movs	r2, #62	; 0x3e
 80017b8:	701a      	strb	r2, [r3, #0]
 80017ba:	e0c8      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==62)  //Offset time after timer
 80017bc:	4b82      	ldr	r3, [pc, #520]	; (80019c8 <ESPRxDecoder+0xf48>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b3e      	cmp	r3, #62	; 0x3e
 80017c2:	d10c      	bne.n	80017de <ESPRxDecoder+0xd5e>
			 {
				 Data_bufferptr=63;
 80017c4:	4b80      	ldr	r3, [pc, #512]	; (80019c8 <ESPRxDecoder+0xf48>)
 80017c6:	223f      	movs	r2, #63	; 0x3f
 80017c8:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[47] = DecToASCIIFun(Rxwifi_data);
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f000 fa4f 	bl	8001c70 <DecToASCIIFun>
 80017d2:	4603      	mov	r3, r0
 80017d4:	461a      	mov	r2, r3
 80017d6:	4b7d      	ldr	r3, [pc, #500]	; (80019cc <ESPRxDecoder+0xf4c>)
 80017d8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 80017dc:	e0b7      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==63)
 80017de:	4b7a      	ldr	r3, [pc, #488]	; (80019c8 <ESPRxDecoder+0xf48>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b3f      	cmp	r3, #63	; 0x3f
 80017e4:	d10c      	bne.n	8001800 <ESPRxDecoder+0xd80>
			 {
				 Data_bufferptr=64;
 80017e6:	4b78      	ldr	r3, [pc, #480]	; (80019c8 <ESPRxDecoder+0xf48>)
 80017e8:	2240      	movs	r2, #64	; 0x40
 80017ea:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[48] = DecToASCIIFun(Rxwifi_data);
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 fa3e 	bl	8001c70 <DecToASCIIFun>
 80017f4:	4603      	mov	r3, r0
 80017f6:	461a      	mov	r2, r3
 80017f8:	4b74      	ldr	r3, [pc, #464]	; (80019cc <ESPRxDecoder+0xf4c>)
 80017fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80017fe:	e0a6      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==64)  //No of temperture controller
 8001800:	4b71      	ldr	r3, [pc, #452]	; (80019c8 <ESPRxDecoder+0xf48>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b40      	cmp	r3, #64	; 0x40
 8001806:	d103      	bne.n	8001810 <ESPRxDecoder+0xd90>
			 {
				 Data_bufferptr=65;
 8001808:	4b6f      	ldr	r3, [pc, #444]	; (80019c8 <ESPRxDecoder+0xf48>)
 800180a:	2241      	movs	r2, #65	; 0x41
 800180c:	701a      	strb	r2, [r3, #0]
 800180e:	e09e      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==65)
 8001810:	4b6d      	ldr	r3, [pc, #436]	; (80019c8 <ESPRxDecoder+0xf48>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b41      	cmp	r3, #65	; 0x41
 8001816:	d10c      	bne.n	8001832 <ESPRxDecoder+0xdb2>
			 {
				 Data_bufferptr=66;
 8001818:	4b6b      	ldr	r3, [pc, #428]	; (80019c8 <ESPRxDecoder+0xf48>)
 800181a:	2242      	movs	r2, #66	; 0x42
 800181c:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[49] = DecToASCIIFun(Rxwifi_data);
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	4618      	mov	r0, r3
 8001822:	f000 fa25 	bl	8001c70 <DecToASCIIFun>
 8001826:	4603      	mov	r3, r0
 8001828:	461a      	mov	r2, r3
 800182a:	4b68      	ldr	r3, [pc, #416]	; (80019cc <ESPRxDecoder+0xf4c>)
 800182c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8001830:	e08d      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==66)  //Type of temperture controller
 8001832:	4b65      	ldr	r3, [pc, #404]	; (80019c8 <ESPRxDecoder+0xf48>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b42      	cmp	r3, #66	; 0x42
 8001838:	d103      	bne.n	8001842 <ESPRxDecoder+0xdc2>
			 {
				 Data_bufferptr=67;
 800183a:	4b63      	ldr	r3, [pc, #396]	; (80019c8 <ESPRxDecoder+0xf48>)
 800183c:	2243      	movs	r2, #67	; 0x43
 800183e:	701a      	strb	r2, [r3, #0]
 8001840:	e085      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==67)
 8001842:	4b61      	ldr	r3, [pc, #388]	; (80019c8 <ESPRxDecoder+0xf48>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b43      	cmp	r3, #67	; 0x43
 8001848:	d10c      	bne.n	8001864 <ESPRxDecoder+0xde4>
			 {
				 Data_bufferptr=68;
 800184a:	4b5f      	ldr	r3, [pc, #380]	; (80019c8 <ESPRxDecoder+0xf48>)
 800184c:	2244      	movs	r2, #68	; 0x44
 800184e:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[50] = DecToASCIIFun(Rxwifi_data);
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	4618      	mov	r0, r3
 8001854:	f000 fa0c 	bl	8001c70 <DecToASCIIFun>
 8001858:	4603      	mov	r3, r0
 800185a:	461a      	mov	r2, r3
 800185c:	4b5b      	ldr	r3, [pc, #364]	; (80019cc <ESPRxDecoder+0xf4c>)
 800185e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8001862:	e074      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==68)  //Type of power meter
 8001864:	4b58      	ldr	r3, [pc, #352]	; (80019c8 <ESPRxDecoder+0xf48>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b44      	cmp	r3, #68	; 0x44
 800186a:	d103      	bne.n	8001874 <ESPRxDecoder+0xdf4>
			 {
				 Data_bufferptr=69;
 800186c:	4b56      	ldr	r3, [pc, #344]	; (80019c8 <ESPRxDecoder+0xf48>)
 800186e:	2245      	movs	r2, #69	; 0x45
 8001870:	701a      	strb	r2, [r3, #0]
 8001872:	e06c      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==69)
 8001874:	4b54      	ldr	r3, [pc, #336]	; (80019c8 <ESPRxDecoder+0xf48>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b45      	cmp	r3, #69	; 0x45
 800187a:	d10c      	bne.n	8001896 <ESPRxDecoder+0xe16>
			 {
				 Data_bufferptr=70;
 800187c:	4b52      	ldr	r3, [pc, #328]	; (80019c8 <ESPRxDecoder+0xf48>)
 800187e:	2246      	movs	r2, #70	; 0x46
 8001880:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[51] = DecToASCIIFun(Rxwifi_data);
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	4618      	mov	r0, r3
 8001886:	f000 f9f3 	bl	8001c70 <DecToASCIIFun>
 800188a:	4603      	mov	r3, r0
 800188c:	461a      	mov	r2, r3
 800188e:	4b4f      	ldr	r3, [pc, #316]	; (80019cc <ESPRxDecoder+0xf4c>)
 8001890:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8001894:	e05b      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==70)  //,
 8001896:	4b4c      	ldr	r3, [pc, #304]	; (80019c8 <ESPRxDecoder+0xf48>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b46      	cmp	r3, #70	; 0x46
 800189c:	d103      	bne.n	80018a6 <ESPRxDecoder+0xe26>
			 {
				 Data_bufferptr=71;
 800189e:	4b4a      	ldr	r3, [pc, #296]	; (80019c8 <ESPRxDecoder+0xf48>)
 80018a0:	2247      	movs	r2, #71	; 0x47
 80018a2:	701a      	strb	r2, [r3, #0]
 80018a4:	e053      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==71)  //status
 80018a6:	4b48      	ldr	r3, [pc, #288]	; (80019c8 <ESPRxDecoder+0xf48>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b47      	cmp	r3, #71	; 0x47
 80018ac:	d10c      	bne.n	80018c8 <ESPRxDecoder+0xe48>
			 {
				 Data_bufferptr=72;
 80018ae:	4b46      	ldr	r3, [pc, #280]	; (80019c8 <ESPRxDecoder+0xf48>)
 80018b0:	2248      	movs	r2, #72	; 0x48
 80018b2:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[52] = DecToASCIIFun(Rxwifi_data);
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 f9da 	bl	8001c70 <DecToASCIIFun>
 80018bc:	4603      	mov	r3, r0
 80018be:	461a      	mov	r2, r3
 80018c0:	4b42      	ldr	r3, [pc, #264]	; (80019cc <ESPRxDecoder+0xf4c>)
 80018c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80018c6:	e042      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==72)
 80018c8:	4b3f      	ldr	r3, [pc, #252]	; (80019c8 <ESPRxDecoder+0xf48>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b48      	cmp	r3, #72	; 0x48
 80018ce:	d10c      	bne.n	80018ea <ESPRxDecoder+0xe6a>
			 {
				 Data_bufferptr=73;
 80018d0:	4b3d      	ldr	r3, [pc, #244]	; (80019c8 <ESPRxDecoder+0xf48>)
 80018d2:	2249      	movs	r2, #73	; 0x49
 80018d4:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[53] = DecToASCIIFun(Rxwifi_data);
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	4618      	mov	r0, r3
 80018da:	f000 f9c9 	bl	8001c70 <DecToASCIIFun>
 80018de:	4603      	mov	r3, r0
 80018e0:	461a      	mov	r2, r3
 80018e2:	4b3a      	ldr	r3, [pc, #232]	; (80019cc <ESPRxDecoder+0xf4c>)
 80018e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80018e8:	e031      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			  else if(Data_bufferptr==73)  //,
 80018ea:	4b37      	ldr	r3, [pc, #220]	; (80019c8 <ESPRxDecoder+0xf48>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b49      	cmp	r3, #73	; 0x49
 80018f0:	d103      	bne.n	80018fa <ESPRxDecoder+0xe7a>
			 {
				 Data_bufferptr=74;
 80018f2:	4b35      	ldr	r3, [pc, #212]	; (80019c8 <ESPRxDecoder+0xf48>)
 80018f4:	224a      	movs	r2, #74	; 0x4a
 80018f6:	701a      	strb	r2, [r3, #0]
 80018f8:	e029      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==74)  //status
 80018fa:	4b33      	ldr	r3, [pc, #204]	; (80019c8 <ESPRxDecoder+0xf48>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b4a      	cmp	r3, #74	; 0x4a
 8001900:	d10c      	bne.n	800191c <ESPRxDecoder+0xe9c>
			 {
				 Data_bufferptr=75;
 8001902:	4b31      	ldr	r3, [pc, #196]	; (80019c8 <ESPRxDecoder+0xf48>)
 8001904:	224b      	movs	r2, #75	; 0x4b
 8001906:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[54] = DecToASCIIFun(Rxwifi_data);
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	4618      	mov	r0, r3
 800190c:	f000 f9b0 	bl	8001c70 <DecToASCIIFun>
 8001910:	4603      	mov	r3, r0
 8001912:	461a      	mov	r2, r3
 8001914:	4b2d      	ldr	r3, [pc, #180]	; (80019cc <ESPRxDecoder+0xf4c>)
 8001916:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800191a:	e018      	b.n	800194e <ESPRxDecoder+0xece>
			 }
			 else if(Data_bufferptr==75)
 800191c:	4b2a      	ldr	r3, [pc, #168]	; (80019c8 <ESPRxDecoder+0xf48>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b4b      	cmp	r3, #75	; 0x4b
 8001922:	d114      	bne.n	800194e <ESPRxDecoder+0xece>
			 {
				 Data_bufferptr=0;
 8001924:	4b28      	ldr	r3, [pc, #160]	; (80019c8 <ESPRxDecoder+0xf48>)
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
				 Uart_rx_buffer[55] = DecToASCIIFun(Rxwifi_data);
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	4618      	mov	r0, r3
 800192e:	f000 f99f 	bl	8001c70 <DecToASCIIFun>
 8001932:	4603      	mov	r3, r0
 8001934:	461a      	mov	r2, r3
 8001936:	4b25      	ldr	r3, [pc, #148]	; (80019cc <ESPRxDecoder+0xf4c>)
 8001938:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
				 RefreshBlockInfo = 0;
 800193c:	4b24      	ldr	r3, [pc, #144]	; (80019d0 <ESPRxDecoder+0xf50>)
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]
				 RxCompleteU2C1WIFI=1;
 8001942:	4b24      	ldr	r3, [pc, #144]	; (80019d4 <ESPRxDecoder+0xf54>)
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
				 Updatetimeinfo=1;
 8001948:	4b23      	ldr	r3, [pc, #140]	; (80019d8 <ESPRxDecoder+0xf58>)
 800194a:	2201      	movs	r2, #1
 800194c:	701a      	strb	r2, [r3, #0]
			 }

		   if(Valid_DataWifi1)
 800194e:	4b23      	ldr	r3, [pc, #140]	; (80019dc <ESPRxDecoder+0xf5c>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 80aa 	beq.w	8001aac <ESPRxDecoder+0x102c>
		   {
			 if((Rxwifi_data=='U')&&(bufferptr==0))
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	2b55      	cmp	r3, #85	; 0x55
 800195c:	d107      	bne.n	800196e <ESPRxDecoder+0xeee>
 800195e:	4b20      	ldr	r3, [pc, #128]	; (80019e0 <ESPRxDecoder+0xf60>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d103      	bne.n	800196e <ESPRxDecoder+0xeee>
			 {
			 	bufferptr=1;
 8001966:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <ESPRxDecoder+0xf60>)
 8001968:	2201      	movs	r2, #1
 800196a:	701a      	strb	r2, [r3, #0]
 800196c:	e04f      	b.n	8001a0e <ESPRxDecoder+0xf8e>
			 }
			 else if((Rxwifi_data=='n')&&(bufferptr==1))
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	2b6e      	cmp	r3, #110	; 0x6e
 8001972:	d107      	bne.n	8001984 <ESPRxDecoder+0xf04>
 8001974:	4b1a      	ldr	r3, [pc, #104]	; (80019e0 <ESPRxDecoder+0xf60>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d103      	bne.n	8001984 <ESPRxDecoder+0xf04>
			 {
			 	bufferptr=2;
 800197c:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <ESPRxDecoder+0xf60>)
 800197e:	2202      	movs	r2, #2
 8001980:	701a      	strb	r2, [r3, #0]
 8001982:	e044      	b.n	8001a0e <ESPRxDecoder+0xf8e>
			 }
			 else if((Rxwifi_data=='l')&&(bufferptr==2))
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	2b6c      	cmp	r3, #108	; 0x6c
 8001988:	d107      	bne.n	800199a <ESPRxDecoder+0xf1a>
 800198a:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <ESPRxDecoder+0xf60>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d103      	bne.n	800199a <ESPRxDecoder+0xf1a>
			 {
			    bufferptr=3;
 8001992:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <ESPRxDecoder+0xf60>)
 8001994:	2203      	movs	r2, #3
 8001996:	701a      	strb	r2, [r3, #0]
 8001998:	e039      	b.n	8001a0e <ESPRxDecoder+0xf8e>
			 }
			 else if((Rxwifi_data=='i')&&(bufferptr==3))
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	2b69      	cmp	r3, #105	; 0x69
 800199e:	d107      	bne.n	80019b0 <ESPRxDecoder+0xf30>
 80019a0:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <ESPRxDecoder+0xf60>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b03      	cmp	r3, #3
 80019a6:	d103      	bne.n	80019b0 <ESPRxDecoder+0xf30>
			 {
			    bufferptr=4;
 80019a8:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <ESPRxDecoder+0xf60>)
 80019aa:	2204      	movs	r2, #4
 80019ac:	701a      	strb	r2, [r3, #0]
 80019ae:	e02e      	b.n	8001a0e <ESPRxDecoder+0xf8e>
			 }
			 else if((Rxwifi_data=='n')&&(bufferptr==4))
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	2b6e      	cmp	r3, #110	; 0x6e
 80019b4:	d116      	bne.n	80019e4 <ESPRxDecoder+0xf64>
 80019b6:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <ESPRxDecoder+0xf60>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d112      	bne.n	80019e4 <ESPRxDecoder+0xf64>
			 {
			    bufferptr=5;
 80019be:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <ESPRxDecoder+0xf60>)
 80019c0:	2205      	movs	r2, #5
 80019c2:	701a      	strb	r2, [r3, #0]
 80019c4:	e023      	b.n	8001a0e <ESPRxDecoder+0xf8e>
 80019c6:	bf00      	nop
 80019c8:	200000d2 	.word	0x200000d2
 80019cc:	2000008c 	.word	0x2000008c
 80019d0:	20000839 	.word	0x20000839
 80019d4:	200000d7 	.word	0x200000d7
 80019d8:	200000d6 	.word	0x200000d6
 80019dc:	200000d8 	.word	0x200000d8
 80019e0:	20000832 	.word	0x20000832
			 }
			 else if((Rxwifi_data=='k')&&(bufferptr==5))
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	2b6b      	cmp	r3, #107	; 0x6b
 80019e8:	d111      	bne.n	8001a0e <ESPRxDecoder+0xf8e>
 80019ea:	4b95      	ldr	r3, [pc, #596]	; (8001c40 <ESPRxDecoder+0x11c0>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b05      	cmp	r3, #5
 80019f0:	d10d      	bne.n	8001a0e <ESPRxDecoder+0xf8e>
			 {
			    bufferptr=0;
 80019f2:	4b93      	ldr	r3, [pc, #588]	; (8001c40 <ESPRxDecoder+0x11c0>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	71bb      	strb	r3, [r7, #6]
				wifi_command=102;
 80019fc:	4b91      	ldr	r3, [pc, #580]	; (8001c44 <ESPRxDecoder+0x11c4>)
 80019fe:	2266      	movs	r2, #102	; 0x66
 8001a00:	701a      	strb	r2, [r3, #0]
				//RefreshBlockInfo=0;//update at rx end
				Error_Close=0;
 8001a02:	4b91      	ldr	r3, [pc, #580]	; (8001c48 <ESPRxDecoder+0x11c8>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]
				Valid_DataWifi1=0;
 8001a08:	4b90      	ldr	r3, [pc, #576]	; (8001c4c <ESPRxDecoder+0x11cc>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
				//RxCompleteU2C1WIFI=1;			  /*receive complete*/
			 }
			 if((Rxwifi_data=='C')&&(bufferptr==0))
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	2b43      	cmp	r3, #67	; 0x43
 8001a12:	d107      	bne.n	8001a24 <ESPRxDecoder+0xfa4>
 8001a14:	4b8a      	ldr	r3, [pc, #552]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d103      	bne.n	8001a24 <ESPRxDecoder+0xfa4>
			 {
			 	bufferptr=1;
 8001a1c:	4b88      	ldr	r3, [pc, #544]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	701a      	strb	r2, [r3, #0]
 8001a22:	e0ea      	b.n	8001bfa <ESPRxDecoder+0x117a>
			 }
			 else if((Rxwifi_data=='L')&&(bufferptr==1))
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	2b4c      	cmp	r3, #76	; 0x4c
 8001a28:	d107      	bne.n	8001a3a <ESPRxDecoder+0xfba>
 8001a2a:	4b85      	ldr	r3, [pc, #532]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d103      	bne.n	8001a3a <ESPRxDecoder+0xfba>
			 {
			 	bufferptr=2;
 8001a32:	4b83      	ldr	r3, [pc, #524]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001a34:	2202      	movs	r2, #2
 8001a36:	701a      	strb	r2, [r3, #0]
 8001a38:	e0df      	b.n	8001bfa <ESPRxDecoder+0x117a>
			 }
			 else if((Rxwifi_data=='O')&&(bufferptr==2))
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	2b4f      	cmp	r3, #79	; 0x4f
 8001a3e:	d107      	bne.n	8001a50 <ESPRxDecoder+0xfd0>
 8001a40:	4b7f      	ldr	r3, [pc, #508]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d103      	bne.n	8001a50 <ESPRxDecoder+0xfd0>
			 {
			    bufferptr=3;
 8001a48:	4b7d      	ldr	r3, [pc, #500]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	701a      	strb	r2, [r3, #0]
 8001a4e:	e0d4      	b.n	8001bfa <ESPRxDecoder+0x117a>
			 }
			 else if((Rxwifi_data=='S')&&(bufferptr==3))
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	2b53      	cmp	r3, #83	; 0x53
 8001a54:	d107      	bne.n	8001a66 <ESPRxDecoder+0xfe6>
 8001a56:	4b7a      	ldr	r3, [pc, #488]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	d103      	bne.n	8001a66 <ESPRxDecoder+0xfe6>
			 {
			    bufferptr=4;
 8001a5e:	4b78      	ldr	r3, [pc, #480]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001a60:	2204      	movs	r2, #4
 8001a62:	701a      	strb	r2, [r3, #0]
 8001a64:	e0c9      	b.n	8001bfa <ESPRxDecoder+0x117a>
			 }
			 else if((Rxwifi_data=='E')&&(bufferptr==4))
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	2b45      	cmp	r3, #69	; 0x45
 8001a6a:	d107      	bne.n	8001a7c <ESPRxDecoder+0xffc>
 8001a6c:	4b74      	ldr	r3, [pc, #464]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b04      	cmp	r3, #4
 8001a72:	d103      	bne.n	8001a7c <ESPRxDecoder+0xffc>
			 {
			    bufferptr=5;
 8001a74:	4b72      	ldr	r3, [pc, #456]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001a76:	2205      	movs	r2, #5
 8001a78:	701a      	strb	r2, [r3, #0]
 8001a7a:	e0be      	b.n	8001bfa <ESPRxDecoder+0x117a>
			 }
			 else if((Rxwifi_data=='D')&&(bufferptr==5))
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	2b44      	cmp	r3, #68	; 0x44
 8001a80:	f040 80ee 	bne.w	8001c60 <ESPRxDecoder+0x11e0>
 8001a84:	4b6e      	ldr	r3, [pc, #440]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b05      	cmp	r3, #5
 8001a8a:	f040 80e9 	bne.w	8001c60 <ESPRxDecoder+0x11e0>
			 {
			    bufferptr=0;
 8001a8e:	4b6c      	ldr	r3, [pc, #432]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	71bb      	strb	r3, [r7, #6]
				wifi_command=102;
 8001a98:	4b6a      	ldr	r3, [pc, #424]	; (8001c44 <ESPRxDecoder+0x11c4>)
 8001a9a:	2266      	movs	r2, #102	; 0x66
 8001a9c:	701a      	strb	r2, [r3, #0]
				//RefreshBlockInfo=0;//update at rx end
				Error_Close=0;
 8001a9e:	4b6a      	ldr	r3, [pc, #424]	; (8001c48 <ESPRxDecoder+0x11c8>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
				Valid_DataWifi1=0;
 8001aa4:	4b69      	ldr	r3, [pc, #420]	; (8001c4c <ESPRxDecoder+0x11cc>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
					wifi_command=102;}
				Valid_DataWifi1=0;
				//RxCompleteU2C1WIFI=0;   /*Wrong receive*/
			 }
			}
		break;
 8001aaa:	e0d9      	b.n	8001c60 <ESPRxDecoder+0x11e0>
			  if((Rxwifi_data=='U')&&(bufferptr==0))
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	2b55      	cmp	r3, #85	; 0x55
 8001ab0:	d107      	bne.n	8001ac2 <ESPRxDecoder+0x1042>
 8001ab2:	4b63      	ldr	r3, [pc, #396]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d103      	bne.n	8001ac2 <ESPRxDecoder+0x1042>
			 	bufferptr=1;
 8001aba:	4b61      	ldr	r3, [pc, #388]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	701a      	strb	r2, [r3, #0]
 8001ac0:	e040      	b.n	8001b44 <ESPRxDecoder+0x10c4>
			 else if((Rxwifi_data=='n')&&(bufferptr==1))
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	2b6e      	cmp	r3, #110	; 0x6e
 8001ac6:	d107      	bne.n	8001ad8 <ESPRxDecoder+0x1058>
 8001ac8:	4b5d      	ldr	r3, [pc, #372]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d103      	bne.n	8001ad8 <ESPRxDecoder+0x1058>
			 	bufferptr=2;
 8001ad0:	4b5b      	ldr	r3, [pc, #364]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	701a      	strb	r2, [r3, #0]
 8001ad6:	e035      	b.n	8001b44 <ESPRxDecoder+0x10c4>
			 else if((Rxwifi_data=='l')&&(bufferptr==2))
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	2b6c      	cmp	r3, #108	; 0x6c
 8001adc:	d107      	bne.n	8001aee <ESPRxDecoder+0x106e>
 8001ade:	4b58      	ldr	r3, [pc, #352]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d103      	bne.n	8001aee <ESPRxDecoder+0x106e>
			    bufferptr=3;
 8001ae6:	4b56      	ldr	r3, [pc, #344]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001ae8:	2203      	movs	r2, #3
 8001aea:	701a      	strb	r2, [r3, #0]
 8001aec:	e02a      	b.n	8001b44 <ESPRxDecoder+0x10c4>
			 else if((Rxwifi_data=='i')&&(bufferptr==3))
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	2b69      	cmp	r3, #105	; 0x69
 8001af2:	d107      	bne.n	8001b04 <ESPRxDecoder+0x1084>
 8001af4:	4b52      	ldr	r3, [pc, #328]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d103      	bne.n	8001b04 <ESPRxDecoder+0x1084>
			    bufferptr=4;
 8001afc:	4b50      	ldr	r3, [pc, #320]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001afe:	2204      	movs	r2, #4
 8001b00:	701a      	strb	r2, [r3, #0]
 8001b02:	e01f      	b.n	8001b44 <ESPRxDecoder+0x10c4>
			 else if((Rxwifi_data=='n')&&(bufferptr==4))
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	2b6e      	cmp	r3, #110	; 0x6e
 8001b08:	d107      	bne.n	8001b1a <ESPRxDecoder+0x109a>
 8001b0a:	4b4d      	ldr	r3, [pc, #308]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d103      	bne.n	8001b1a <ESPRxDecoder+0x109a>
			    bufferptr=5;
 8001b12:	4b4b      	ldr	r3, [pc, #300]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001b14:	2205      	movs	r2, #5
 8001b16:	701a      	strb	r2, [r3, #0]
 8001b18:	e014      	b.n	8001b44 <ESPRxDecoder+0x10c4>
			 else if((Rxwifi_data=='k')&&(bufferptr==5))
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	2b6b      	cmp	r3, #107	; 0x6b
 8001b1e:	d111      	bne.n	8001b44 <ESPRxDecoder+0x10c4>
 8001b20:	4b47      	ldr	r3, [pc, #284]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b05      	cmp	r3, #5
 8001b26:	d10d      	bne.n	8001b44 <ESPRxDecoder+0x10c4>
			    bufferptr=0;
 8001b28:	4b45      	ldr	r3, [pc, #276]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	71bb      	strb	r3, [r7, #6]
				wifi_command=102;
 8001b32:	4b44      	ldr	r3, [pc, #272]	; (8001c44 <ESPRxDecoder+0x11c4>)
 8001b34:	2266      	movs	r2, #102	; 0x66
 8001b36:	701a      	strb	r2, [r3, #0]
				Error_Close=0;
 8001b38:	4b43      	ldr	r3, [pc, #268]	; (8001c48 <ESPRxDecoder+0x11c8>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	701a      	strb	r2, [r3, #0]
				Valid_DataWifi1=0;
 8001b3e:	4b43      	ldr	r3, [pc, #268]	; (8001c4c <ESPRxDecoder+0x11cc>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
			   if((Rxwifi_data=='C')&&(bufferptr==0))
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	2b43      	cmp	r3, #67	; 0x43
 8001b48:	d107      	bne.n	8001b5a <ESPRxDecoder+0x10da>
 8001b4a:	4b3d      	ldr	r3, [pc, #244]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d103      	bne.n	8001b5a <ESPRxDecoder+0x10da>
			 	bufferptr=1;
 8001b52:	4b3b      	ldr	r3, [pc, #236]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	701a      	strb	r2, [r3, #0]
 8001b58:	e04f      	b.n	8001bfa <ESPRxDecoder+0x117a>
			 else if((Rxwifi_data=='L')&&(bufferptr==1))
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	2b4c      	cmp	r3, #76	; 0x4c
 8001b5e:	d107      	bne.n	8001b70 <ESPRxDecoder+0x10f0>
 8001b60:	4b37      	ldr	r3, [pc, #220]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d103      	bne.n	8001b70 <ESPRxDecoder+0x10f0>
			 	bufferptr=2;
 8001b68:	4b35      	ldr	r3, [pc, #212]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	701a      	strb	r2, [r3, #0]
 8001b6e:	e044      	b.n	8001bfa <ESPRxDecoder+0x117a>
			 else if((Rxwifi_data=='O')&&(bufferptr==2))
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	2b4f      	cmp	r3, #79	; 0x4f
 8001b74:	d107      	bne.n	8001b86 <ESPRxDecoder+0x1106>
 8001b76:	4b32      	ldr	r3, [pc, #200]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d103      	bne.n	8001b86 <ESPRxDecoder+0x1106>
			    bufferptr=3;
 8001b7e:	4b30      	ldr	r3, [pc, #192]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001b80:	2203      	movs	r2, #3
 8001b82:	701a      	strb	r2, [r3, #0]
 8001b84:	e039      	b.n	8001bfa <ESPRxDecoder+0x117a>
			 else if((Rxwifi_data=='S')&&(bufferptr==3))
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	2b53      	cmp	r3, #83	; 0x53
 8001b8a:	d107      	bne.n	8001b9c <ESPRxDecoder+0x111c>
 8001b8c:	4b2c      	ldr	r3, [pc, #176]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b03      	cmp	r3, #3
 8001b92:	d103      	bne.n	8001b9c <ESPRxDecoder+0x111c>
			    bufferptr=4;
 8001b94:	4b2a      	ldr	r3, [pc, #168]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001b96:	2204      	movs	r2, #4
 8001b98:	701a      	strb	r2, [r3, #0]
 8001b9a:	e02e      	b.n	8001bfa <ESPRxDecoder+0x117a>
			 else if((Rxwifi_data=='E')&&(bufferptr==4))
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	2b45      	cmp	r3, #69	; 0x45
 8001ba0:	d107      	bne.n	8001bb2 <ESPRxDecoder+0x1132>
 8001ba2:	4b27      	ldr	r3, [pc, #156]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d103      	bne.n	8001bb2 <ESPRxDecoder+0x1132>
			    bufferptr=5;
 8001baa:	4b25      	ldr	r3, [pc, #148]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001bac:	2205      	movs	r2, #5
 8001bae:	701a      	strb	r2, [r3, #0]
 8001bb0:	e023      	b.n	8001bfa <ESPRxDecoder+0x117a>
			 else if((Rxwifi_data=='D')&&(bufferptr==5))
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	2b44      	cmp	r3, #68	; 0x44
 8001bb6:	d153      	bne.n	8001c60 <ESPRxDecoder+0x11e0>
 8001bb8:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b05      	cmp	r3, #5
 8001bbe:	d14f      	bne.n	8001c60 <ESPRxDecoder+0x11e0>
			    bufferptr=0;
 8001bc0:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	71bb      	strb	r3, [r7, #6]
				if(++Error_Close>3){wifi_command=10;Error_Close=0;}
 8001bca:	4b1f      	ldr	r3, [pc, #124]	; (8001c48 <ESPRxDecoder+0x11c8>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <ESPRxDecoder+0x11c8>)
 8001bd4:	701a      	strb	r2, [r3, #0]
 8001bd6:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <ESPRxDecoder+0x11c8>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b03      	cmp	r3, #3
 8001bdc:	d906      	bls.n	8001bec <ESPRxDecoder+0x116c>
 8001bde:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <ESPRxDecoder+0x11c4>)
 8001be0:	220a      	movs	r2, #10
 8001be2:	701a      	strb	r2, [r3, #0]
 8001be4:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <ESPRxDecoder+0x11c8>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
 8001bea:	e002      	b.n	8001bf2 <ESPRxDecoder+0x1172>
					wifi_command=102;}
 8001bec:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <ESPRxDecoder+0x11c4>)
 8001bee:	2266      	movs	r2, #102	; 0x66
 8001bf0:	701a      	strb	r2, [r3, #0]
				Valid_DataWifi1=0;
 8001bf2:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <ESPRxDecoder+0x11cc>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
		break;
 8001bf8:	e032      	b.n	8001c60 <ESPRxDecoder+0x11e0>
 8001bfa:	e031      	b.n	8001c60 <ESPRxDecoder+0x11e0>
		case 8:
			 if((Rxwifi_data=='O')&&(bufferptr==0))
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	2b4f      	cmp	r3, #79	; 0x4f
 8001c00:	d107      	bne.n	8001c12 <ESPRxDecoder+0x1192>
 8001c02:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d103      	bne.n	8001c12 <ESPRxDecoder+0x1192>
			 {
			 	bufferptr=1;
 8001c0a:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	701a      	strb	r2, [r3, #0]
			 {
			 	bufferptr=0;
				Rxseqdecoder=0;
				wifi_command=20;
			 }
		break;
 8001c10:	e028      	b.n	8001c64 <ESPRxDecoder+0x11e4>
			 else if((Rxwifi_data=='K')&&(bufferptr==1))
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	2b4b      	cmp	r3, #75	; 0x4b
 8001c16:	d125      	bne.n	8001c64 <ESPRxDecoder+0x11e4>
 8001c18:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d121      	bne.n	8001c64 <ESPRxDecoder+0x11e4>
			 	bufferptr=0;
 8001c20:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <ESPRxDecoder+0x11c0>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	701a      	strb	r2, [r3, #0]
				Rxseqdecoder=0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	71bb      	strb	r3, [r7, #6]
				wifi_command=20;
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <ESPRxDecoder+0x11c4>)
 8001c2c:	2214      	movs	r2, #20
 8001c2e:	701a      	strb	r2, [r3, #0]
		break;
 8001c30:	e018      	b.n	8001c64 <ESPRxDecoder+0x11e4>
	   	default:
		break;
 8001c32:	bf00      	nop
 8001c34:	e017      	b.n	8001c66 <ESPRxDecoder+0x11e6>
		break;
 8001c36:	bf00      	nop
 8001c38:	e015      	b.n	8001c66 <ESPRxDecoder+0x11e6>
		break;
 8001c3a:	bf00      	nop
 8001c3c:	e013      	b.n	8001c66 <ESPRxDecoder+0x11e6>
 8001c3e:	bf00      	nop
 8001c40:	20000832 	.word	0x20000832
 8001c44:	20000734 	.word	0x20000734
 8001c48:	200000d5 	.word	0x200000d5
 8001c4c:	200000d8 	.word	0x200000d8
		break;
 8001c50:	bf00      	nop
 8001c52:	e008      	b.n	8001c66 <ESPRxDecoder+0x11e6>
		break;
 8001c54:	bf00      	nop
 8001c56:	e006      	b.n	8001c66 <ESPRxDecoder+0x11e6>
		break;
 8001c58:	bf00      	nop
 8001c5a:	e004      	b.n	8001c66 <ESPRxDecoder+0x11e6>
		break;
 8001c5c:	bf00      	nop
 8001c5e:	e002      	b.n	8001c66 <ESPRxDecoder+0x11e6>
		break;
 8001c60:	bf00      	nop
 8001c62:	e000      	b.n	8001c66 <ESPRxDecoder+0x11e6>
		break;
 8001c64:	bf00      	nop
		}
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop

08001c70 <DecToASCIIFun>:

unsigned char DecToASCIIFun(unsigned char TempVar)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]
	unsigned char  ASCIIHex;
	switch(TempVar)
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	3b30      	subs	r3, #48	; 0x30
 8001c7e:	2b16      	cmp	r3, #22
 8001c80:	d860      	bhi.n	8001d44 <DecToASCIIFun+0xd4>
 8001c82:	a201      	add	r2, pc, #4	; (adr r2, 8001c88 <DecToASCIIFun+0x18>)
 8001c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c88:	08001ce5 	.word	0x08001ce5
 8001c8c:	08001ceb 	.word	0x08001ceb
 8001c90:	08001cf1 	.word	0x08001cf1
 8001c94:	08001cf7 	.word	0x08001cf7
 8001c98:	08001cfd 	.word	0x08001cfd
 8001c9c:	08001d03 	.word	0x08001d03
 8001ca0:	08001d09 	.word	0x08001d09
 8001ca4:	08001d0f 	.word	0x08001d0f
 8001ca8:	08001d15 	.word	0x08001d15
 8001cac:	08001d1b 	.word	0x08001d1b
 8001cb0:	08001d45 	.word	0x08001d45
 8001cb4:	08001d45 	.word	0x08001d45
 8001cb8:	08001d45 	.word	0x08001d45
 8001cbc:	08001d45 	.word	0x08001d45
 8001cc0:	08001d45 	.word	0x08001d45
 8001cc4:	08001d45 	.word	0x08001d45
 8001cc8:	08001d45 	.word	0x08001d45
 8001ccc:	08001d21 	.word	0x08001d21
 8001cd0:	08001d27 	.word	0x08001d27
 8001cd4:	08001d2d 	.word	0x08001d2d
 8001cd8:	08001d33 	.word	0x08001d33
 8001cdc:	08001d39 	.word	0x08001d39
 8001ce0:	08001d3f 	.word	0x08001d3f
	{
	case 48:
			ASCIIHex = 0x00;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	73fb      	strb	r3, [r7, #15]
			break;
 8001ce8:	e02c      	b.n	8001d44 <DecToASCIIFun+0xd4>
	case 49:
			ASCIIHex = 0x01;
 8001cea:	2301      	movs	r3, #1
 8001cec:	73fb      	strb	r3, [r7, #15]
			break;
 8001cee:	e029      	b.n	8001d44 <DecToASCIIFun+0xd4>
	case 50:
			ASCIIHex = 0x02;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	73fb      	strb	r3, [r7, #15]
			break;
 8001cf4:	e026      	b.n	8001d44 <DecToASCIIFun+0xd4>
	case 51:
			ASCIIHex = 0x03;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	73fb      	strb	r3, [r7, #15]
			break;
 8001cfa:	e023      	b.n	8001d44 <DecToASCIIFun+0xd4>
	case 52:
			ASCIIHex = 0x04;
 8001cfc:	2304      	movs	r3, #4
 8001cfe:	73fb      	strb	r3, [r7, #15]
			break;
 8001d00:	e020      	b.n	8001d44 <DecToASCIIFun+0xd4>
	case 53:
			ASCIIHex = 0x05;
 8001d02:	2305      	movs	r3, #5
 8001d04:	73fb      	strb	r3, [r7, #15]
			break;
 8001d06:	e01d      	b.n	8001d44 <DecToASCIIFun+0xd4>
	case 54:
			ASCIIHex = 0x06;
 8001d08:	2306      	movs	r3, #6
 8001d0a:	73fb      	strb	r3, [r7, #15]
			break;
 8001d0c:	e01a      	b.n	8001d44 <DecToASCIIFun+0xd4>
	case 55:
			ASCIIHex = 0x07;
 8001d0e:	2307      	movs	r3, #7
 8001d10:	73fb      	strb	r3, [r7, #15]
			break;
 8001d12:	e017      	b.n	8001d44 <DecToASCIIFun+0xd4>
	case 56:
			ASCIIHex = 0x08;
 8001d14:	2308      	movs	r3, #8
 8001d16:	73fb      	strb	r3, [r7, #15]
			break;
 8001d18:	e014      	b.n	8001d44 <DecToASCIIFun+0xd4>
	case 57:
			ASCIIHex = 0x09;
 8001d1a:	2309      	movs	r3, #9
 8001d1c:	73fb      	strb	r3, [r7, #15]
			break;
 8001d1e:	e011      	b.n	8001d44 <DecToASCIIFun+0xd4>
	case 65:
			ASCIIHex = 0x0A;
 8001d20:	230a      	movs	r3, #10
 8001d22:	73fb      	strb	r3, [r7, #15]
			break;
 8001d24:	e00e      	b.n	8001d44 <DecToASCIIFun+0xd4>
	case 66:
			ASCIIHex = 0x0B;
 8001d26:	230b      	movs	r3, #11
 8001d28:	73fb      	strb	r3, [r7, #15]
			break;
 8001d2a:	e00b      	b.n	8001d44 <DecToASCIIFun+0xd4>
	case 67:
			ASCIIHex = 0x0C;
 8001d2c:	230c      	movs	r3, #12
 8001d2e:	73fb      	strb	r3, [r7, #15]
			break;
 8001d30:	e008      	b.n	8001d44 <DecToASCIIFun+0xd4>
	case 68:
			ASCIIHex = 0x0D;
 8001d32:	230d      	movs	r3, #13
 8001d34:	73fb      	strb	r3, [r7, #15]
			break;
 8001d36:	e005      	b.n	8001d44 <DecToASCIIFun+0xd4>
	case 69:
			ASCIIHex = 0x0E;
 8001d38:	230e      	movs	r3, #14
 8001d3a:	73fb      	strb	r3, [r7, #15]
			break;
 8001d3c:	e002      	b.n	8001d44 <DecToASCIIFun+0xd4>
	case 70:
			ASCIIHex = 0x0F;
 8001d3e:	230f      	movs	r3, #15
 8001d40:	73fb      	strb	r3, [r7, #15]
			break;
 8001d42:	bf00      	nop
	}
	return (ASCIIHex);
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop

08001d54 <HAL_TIM_PeriodElapsedCallback>:
 uint8_t seq1_remaining_time_Hr,seq1_remaining_time_min,seq2_remaining_time_Hr,seq2_remaining_time_min;
 uint16_t Read_Quench_IP_Start,Read_Quench_IP_Stop,Quenching_Seconds_Cont;


 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 	if(htim == &htim7)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a8f      	ldr	r2, [pc, #572]	; (8001f9c <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d102      	bne.n	8001d6a <HAL_TIM_PeriodElapsedCallback+0x16>
 	{
 		Flag1MS=1;
 8001d64:	4b8e      	ldr	r3, [pc, #568]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]
 	}
 	if(htim == &htim6)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a8d      	ldr	r2, [pc, #564]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	f040 810f 	bne.w	8001f92 <HAL_TIM_PeriodElapsedCallback+0x23e>
	{
 		Flag100milliSeconds=1;
 8001d74:	4b8c      	ldr	r3, [pc, #560]	; (8001fa8 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	701a      	strb	r2, [r3, #0]
 		if(++LocCount1S >= 10)
 8001d7a:	4b8c      	ldr	r3, [pc, #560]	; (8001fac <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	4b8a      	ldr	r3, [pc, #552]	; (8001fac <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001d84:	701a      	strb	r2, [r3, #0]
 8001d86:	4b89      	ldr	r3, [pc, #548]	; (8001fac <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b09      	cmp	r3, #9
 8001d8c:	f240 808c 	bls.w	8001ea8 <HAL_TIM_PeriodElapsedCallback+0x154>
		{
			LocCount1S=0;
 8001d90:	4b86      	ldr	r3, [pc, #536]	; (8001fac <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	701a      	strb	r2, [r3, #0]
			if(++SimCount >= 20)
 8001d96:	4b86      	ldr	r3, [pc, #536]	; (8001fb0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	4b84      	ldr	r3, [pc, #528]	; (8001fb0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001da0:	701a      	strb	r2, [r3, #0]
 8001da2:	4b83      	ldr	r3, [pc, #524]	; (8001fb0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b13      	cmp	r3, #19
 8001da8:	d906      	bls.n	8001db8 <HAL_TIM_PeriodElapsedCallback+0x64>
			{
				SimCount=0;
 8001daa:	4b81      	ldr	r3, [pc, #516]	; (8001fb0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOC, RELAY4_Pin);
 8001db0:	2120      	movs	r1, #32
 8001db2:	4880      	ldr	r0, [pc, #512]	; (8001fb4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001db4:	f008 fb84 	bl	800a4c0 <HAL_GPIO_TogglePin>
			}
			Flag1Second =1;
 8001db8:	4b7f      	ldr	r3, [pc, #508]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	701a      	strb	r2, [r3, #0]
			//DHCP_time_handler( );
			if(!stop_timer_count){
 8001dbe:	4b7f      	ldr	r3, [pc, #508]	; (8001fbc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d12e      	bne.n	8001e24 <HAL_TIM_PeriodElapsedCallback+0xd0>
				if(start_process_control_timer ==1){
 8001dc6:	4b7e      	ldr	r3, [pc, #504]	; (8001fc0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d113      	bne.n	8001df6 <HAL_TIM_PeriodElapsedCallback+0xa2>
					if(++seq1_count_inc >= seq1_duration_total){
 8001dce:	4b7d      	ldr	r3, [pc, #500]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	4b7b      	ldr	r3, [pc, #492]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001dd8:	801a      	strh	r2, [r3, #0]
 8001dda:	4b7a      	ldr	r3, [pc, #488]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001ddc:	881a      	ldrh	r2, [r3, #0]
 8001dde:	4b7a      	ldr	r3, [pc, #488]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001de0:	881b      	ldrh	r3, [r3, #0]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d31e      	bcc.n	8001e24 <HAL_TIM_PeriodElapsedCallback+0xd0>
						seq1_count_inc = seq1_duration_total;
 8001de6:	4b78      	ldr	r3, [pc, #480]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001de8:	881a      	ldrh	r2, [r3, #0]
 8001dea:	4b76      	ldr	r3, [pc, #472]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001dec:	801a      	strh	r2, [r3, #0]
						process_complete=1;
 8001dee:	4b77      	ldr	r3, [pc, #476]	; (8001fcc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001df0:	2201      	movs	r2, #1
 8001df2:	701a      	strb	r2, [r3, #0]
 8001df4:	e016      	b.n	8001e24 <HAL_TIM_PeriodElapsedCallback+0xd0>
					}
				}
				else if(start_process_control_timer == 2){
 8001df6:	4b72      	ldr	r3, [pc, #456]	; (8001fc0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d112      	bne.n	8001e24 <HAL_TIM_PeriodElapsedCallback+0xd0>
					if(++seq2_count_inc >= seq2_duration_total){
 8001dfe:	4b74      	ldr	r3, [pc, #464]	; (8001fd0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	3301      	adds	r3, #1
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	4b72      	ldr	r3, [pc, #456]	; (8001fd0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001e08:	801a      	strh	r2, [r3, #0]
 8001e0a:	4b71      	ldr	r3, [pc, #452]	; (8001fd0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001e0c:	881a      	ldrh	r2, [r3, #0]
 8001e0e:	4b71      	ldr	r3, [pc, #452]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d306      	bcc.n	8001e24 <HAL_TIM_PeriodElapsedCallback+0xd0>
						seq2_count_inc = seq2_duration_total;
 8001e16:	4b6f      	ldr	r3, [pc, #444]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001e18:	881a      	ldrh	r2, [r3, #0]
 8001e1a:	4b6d      	ldr	r3, [pc, #436]	; (8001fd0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001e1c:	801a      	strh	r2, [r3, #0]
						process_complete=2;
 8001e1e:	4b6b      	ldr	r3, [pc, #428]	; (8001fcc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001e20:	2202      	movs	r2, #2
 8001e22:	701a      	strb	r2, [r3, #0]
					}
				}
			}

			seq1_remaining_time_total_min = seq1_duration_total-seq1_count_inc;
 8001e24:	4b68      	ldr	r3, [pc, #416]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001e26:	881a      	ldrh	r2, [r3, #0]
 8001e28:	4b66      	ldr	r3, [pc, #408]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	4b69      	ldr	r3, [pc, #420]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001e32:	801a      	strh	r2, [r3, #0]
			seq2_remaining_time_total_min = seq2_duration_total-seq2_count_inc;
 8001e34:	4b67      	ldr	r3, [pc, #412]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001e36:	881a      	ldrh	r2, [r3, #0]
 8001e38:	4b65      	ldr	r3, [pc, #404]	; (8001fd0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	4b66      	ldr	r3, [pc, #408]	; (8001fdc <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001e42:	801a      	strh	r2, [r3, #0]
			seq1_remaining_time_Hr  = (seq1_remaining_time_total_min/60);
 8001e44:	4b64      	ldr	r3, [pc, #400]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	4a65      	ldr	r2, [pc, #404]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4e:	095b      	lsrs	r3, r3, #5
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	4b63      	ldr	r3, [pc, #396]	; (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001e56:	701a      	strb	r2, [r3, #0]
			seq1_remaining_time_min = (seq1_remaining_time_total_min%60);
 8001e58:	4b5f      	ldr	r3, [pc, #380]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001e5a:	881a      	ldrh	r2, [r3, #0]
 8001e5c:	4b60      	ldr	r3, [pc, #384]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001e5e:	fba3 1302 	umull	r1, r3, r3, r2
 8001e62:	0959      	lsrs	r1, r3, #5
 8001e64:	460b      	mov	r3, r1
 8001e66:	011b      	lsls	r3, r3, #4
 8001e68:	1a5b      	subs	r3, r3, r1
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	4b5d      	ldr	r3, [pc, #372]	; (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001e74:	701a      	strb	r2, [r3, #0]
			seq2_remaining_time_Hr  = (seq2_remaining_time_total_min/60);
 8001e76:	4b59      	ldr	r3, [pc, #356]	; (8001fdc <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	4a59      	ldr	r2, [pc, #356]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e80:	095b      	lsrs	r3, r3, #5
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	4b59      	ldr	r3, [pc, #356]	; (8001fec <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001e88:	701a      	strb	r2, [r3, #0]
			seq2_remaining_time_min = (seq2_remaining_time_total_min%60);
 8001e8a:	4b54      	ldr	r3, [pc, #336]	; (8001fdc <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001e8c:	881a      	ldrh	r2, [r3, #0]
 8001e8e:	4b54      	ldr	r3, [pc, #336]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001e90:	fba3 1302 	umull	r1, r3, r3, r2
 8001e94:	0959      	lsrs	r1, r3, #5
 8001e96:	460b      	mov	r3, r1
 8001e98:	011b      	lsls	r3, r3, #4
 8001e9a:	1a5b      	subs	r3, r3, r1
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	4b52      	ldr	r3, [pc, #328]	; (8001ff0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001ea6:	701a      	strb	r2, [r3, #0]

		}

		if(++CountAT_Quench > 9)
 8001ea8:	4b52      	ldr	r3, [pc, #328]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	3301      	adds	r3, #1
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	4b50      	ldr	r3, [pc, #320]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001eb2:	701a      	strb	r2, [r3, #0]
 8001eb4:	4b4f      	ldr	r3, [pc, #316]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b09      	cmp	r3, #9
 8001eba:	d96a      	bls.n	8001f92 <HAL_TIM_PeriodElapsedCallback+0x23e>
		{
			CountAT_Quench=0;
 8001ebc:	4b4d      	ldr	r3, [pc, #308]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	701a      	strb	r2, [r3, #0]
			Read_Quench_IP_Start = 0;//(IO1PIN & (1<<25));
 8001ec2:	4b4d      	ldr	r3, [pc, #308]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	801a      	strh	r2, [r3, #0]
			Read_Quench_IP_Stop  = 0;// (IO1PIN &(1<<24));
 8001ec8:	4b4c      	ldr	r3, [pc, #304]	; (8001ffc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	801a      	strh	r2, [r3, #0]

			if((NewQuenchingReq)
 8001ece:	4b4c      	ldr	r3, [pc, #304]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d015      	beq.n	8001f02 <HAL_TIM_PeriodElapsedCallback+0x1ae>
				&&(!Read_Quench_IP_Start)
 8001ed6:	4b48      	ldr	r3, [pc, #288]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d111      	bne.n	8001f02 <HAL_TIM_PeriodElapsedCallback+0x1ae>
				&&(status_to_server != 30)
 8001ede:	4b49      	ldr	r3, [pc, #292]	; (8002004 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b1e      	cmp	r3, #30
 8001ee4:	d00d      	beq.n	8001f02 <HAL_TIM_PeriodElapsedCallback+0x1ae>
				&&(Status_Quench_Duration==0))
 8001ee6:	4b48      	ldr	r3, [pc, #288]	; (8002008 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d109      	bne.n	8001f02 <HAL_TIM_PeriodElapsedCallback+0x1ae>
			{
				NewQuenchingReq=0;
 8001eee:	4b44      	ldr	r3, [pc, #272]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	701a      	strb	r2, [r3, #0]
				Status_Quench_Duration  = 1;
 8001ef4:	4b44      	ldr	r3, [pc, #272]	; (8002008 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	701a      	strb	r2, [r3, #0]
				Quenching_Seconds_Cont = 0;
 8001efa:	4b44      	ldr	r3, [pc, #272]	; (800200c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	801a      	strh	r2, [r3, #0]
 8001f00:	e047      	b.n	8001f92 <HAL_TIM_PeriodElapsedCallback+0x23e>
			}
			else if((Status_Quench_Duration==1)&&(Read_Quench_IP_Stop))
 8001f02:	4b41      	ldr	r3, [pc, #260]	; (8002008 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d10a      	bne.n	8001f20 <HAL_TIM_PeriodElapsedCallback+0x1cc>
 8001f0a:	4b3c      	ldr	r3, [pc, #240]	; (8001ffc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001f0c:	881b      	ldrh	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d006      	beq.n	8001f20 <HAL_TIM_PeriodElapsedCallback+0x1cc>
			{
				Quenching_Seconds_Cont	 += 1;
 8001f12:	4b3e      	ldr	r3, [pc, #248]	; (800200c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	3301      	adds	r3, #1
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	4b3c      	ldr	r3, [pc, #240]	; (800200c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001f1c:	801a      	strh	r2, [r3, #0]
 8001f1e:	e038      	b.n	8001f92 <HAL_TIM_PeriodElapsedCallback+0x23e>
			}
			else if((Status_Quench_Duration==1)&&(!Read_Quench_IP_Stop))
 8001f20:	4b39      	ldr	r3, [pc, #228]	; (8002008 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d10d      	bne.n	8001f44 <HAL_TIM_PeriodElapsedCallback+0x1f0>
 8001f28:	4b34      	ldr	r3, [pc, #208]	; (8001ffc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d109      	bne.n	8001f44 <HAL_TIM_PeriodElapsedCallback+0x1f0>
			{
				Quenching_Seconds_Cont	 += 1;
 8001f30:	4b36      	ldr	r3, [pc, #216]	; (800200c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	3301      	adds	r3, #1
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	4b34      	ldr	r3, [pc, #208]	; (800200c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001f3a:	801a      	strh	r2, [r3, #0]
				Status_Quench_Duration=2;
 8001f3c:	4b32      	ldr	r3, [pc, #200]	; (8002008 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001f3e:	2202      	movs	r2, #2
 8001f40:	701a      	strb	r2, [r3, #0]
 8001f42:	e026      	b.n	8001f92 <HAL_TIM_PeriodElapsedCallback+0x23e>
			}
			else if((Status_Quench_Duration==2)&&(!Read_Quench_IP_Stop))
 8001f44:	4b30      	ldr	r3, [pc, #192]	; (8002008 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d10d      	bne.n	8001f68 <HAL_TIM_PeriodElapsedCallback+0x214>
 8001f4c:	4b2b      	ldr	r3, [pc, #172]	; (8001ffc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d109      	bne.n	8001f68 <HAL_TIM_PeriodElapsedCallback+0x214>
			{
				Quenching_Seconds_Cont	 += 1;
 8001f54:	4b2d      	ldr	r3, [pc, #180]	; (800200c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	4b2b      	ldr	r3, [pc, #172]	; (800200c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001f5e:	801a      	strh	r2, [r3, #0]
				Status_Quench_Duration=2;
 8001f60:	4b29      	ldr	r3, [pc, #164]	; (8002008 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001f62:	2202      	movs	r2, #2
 8001f64:	701a      	strb	r2, [r3, #0]
 8001f66:	e014      	b.n	8001f92 <HAL_TIM_PeriodElapsedCallback+0x23e>
			}
			else if((Status_Quench_Duration==2)&&(Read_Quench_IP_Stop))
 8001f68:	4b27      	ldr	r3, [pc, #156]	; (8002008 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d110      	bne.n	8001f92 <HAL_TIM_PeriodElapsedCallback+0x23e>
 8001f70:	4b22      	ldr	r3, [pc, #136]	; (8001ffc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00c      	beq.n	8001f92 <HAL_TIM_PeriodElapsedCallback+0x23e>
			{
				Quenching_Seconds_Cont	 += 1;
 8001f78:	4b24      	ldr	r3, [pc, #144]	; (800200c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	4b22      	ldr	r3, [pc, #136]	; (800200c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001f82:	801a      	strh	r2, [r3, #0]
				Status_Quench_Duration=0;
 8001f84:	4b20      	ldr	r3, [pc, #128]	; (8002008 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	701a      	strb	r2, [r3, #0]
				Write_memory_Once=1;
 8001f8a:	4b21      	ldr	r3, [pc, #132]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	701a      	strb	r2, [r3, #0]
			}
		 }

	}
 
 }
 8001f90:	e7ff      	b.n	8001f92 <HAL_TIM_PeriodElapsedCallback+0x23e>
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000578 	.word	0x20000578
 8001fa0:	200000ed 	.word	0x200000ed
 8001fa4:	2000052c 	.word	0x2000052c
 8001fa8:	200000ef 	.word	0x200000ef
 8001fac:	200000f1 	.word	0x200000f1
 8001fb0:	200000f0 	.word	0x200000f0
 8001fb4:	48000800 	.word	0x48000800
 8001fb8:	200000ee 	.word	0x200000ee
 8001fbc:	20000628 	.word	0x20000628
 8001fc0:	20000627 	.word	0x20000627
 8001fc4:	200000f6 	.word	0x200000f6
 8001fc8:	2000062a 	.word	0x2000062a
 8001fcc:	20000629 	.word	0x20000629
 8001fd0:	200000f8 	.word	0x200000f8
 8001fd4:	2000062c 	.word	0x2000062c
 8001fd8:	200000fa 	.word	0x200000fa
 8001fdc:	200000fc 	.word	0x200000fc
 8001fe0:	88888889 	.word	0x88888889
 8001fe4:	200000fe 	.word	0x200000fe
 8001fe8:	200000ff 	.word	0x200000ff
 8001fec:	20000100 	.word	0x20000100
 8001ff0:	20000101 	.word	0x20000101
 8001ff4:	200000f2 	.word	0x200000f2
 8001ff8:	20000102 	.word	0x20000102
 8001ffc:	20000104 	.word	0x20000104
 8002000:	2000060f 	.word	0x2000060f
 8002004:	20000610 	.word	0x20000610
 8002008:	200000f3 	.word	0x200000f3
 800200c:	20000106 	.word	0x20000106
 8002010:	200000f4 	.word	0x200000f4

08002014 <HAL_UART_RxCpltCallback>:

extern uint8_t Rxseqdecoder;
extern void ESPRxDecoder(unsigned char Rxwifi_data,unsigned char Rxseqdecoder);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
	if(huart == &hlpuart1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a3c      	ldr	r2, [pc, #240]	; (8002110 <HAL_UART_RxCpltCallback+0xfc>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d10c      	bne.n	800203e <HAL_UART_RxCpltCallback+0x2a>
	{
		ESPRxDecoder(rxTempBuff[0],Rxseqdecoder);
 8002024:	4b3b      	ldr	r3, [pc, #236]	; (8002114 <HAL_UART_RxCpltCallback+0x100>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	4a3b      	ldr	r2, [pc, #236]	; (8002118 <HAL_UART_RxCpltCallback+0x104>)
 800202a:	7812      	ldrb	r2, [r2, #0]
 800202c:	4611      	mov	r1, r2
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe fd26 	bl	8000a80 <ESPRxDecoder>

		HAL_UART_Receive_IT(&hlpuart1,rxTempBuff,1);
 8002034:	2201      	movs	r2, #1
 8002036:	4937      	ldr	r1, [pc, #220]	; (8002114 <HAL_UART_RxCpltCallback+0x100>)
 8002038:	4835      	ldr	r0, [pc, #212]	; (8002110 <HAL_UART_RxCpltCallback+0xfc>)
 800203a:	f00b f9af 	bl	800d39c <HAL_UART_Receive_IT>
	}

	if(huart == &huart1)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a36      	ldr	r2, [pc, #216]	; (800211c <HAL_UART_RxCpltCallback+0x108>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d15f      	bne.n	8002106 <HAL_UART_RxCpltCallback+0xf2>
	{
		if((u8rxbuf[0] == 0x01)&&(u8rxbuf[1] == 0x03)&&(u8rxbuf[2] == 0x08)){
 8002046:	4b36      	ldr	r3, [pc, #216]	; (8002120 <HAL_UART_RxCpltCallback+0x10c>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d113      	bne.n	8002076 <HAL_UART_RxCpltCallback+0x62>
 800204e:	4b34      	ldr	r3, [pc, #208]	; (8002120 <HAL_UART_RxCpltCallback+0x10c>)
 8002050:	785b      	ldrb	r3, [r3, #1]
 8002052:	2b03      	cmp	r3, #3
 8002054:	d10f      	bne.n	8002076 <HAL_UART_RxCpltCallback+0x62>
 8002056:	4b32      	ldr	r3, [pc, #200]	; (8002120 <HAL_UART_RxCpltCallback+0x10c>)
 8002058:	789b      	ldrb	r3, [r3, #2]
 800205a:	2b08      	cmp	r3, #8
 800205c:	d10b      	bne.n	8002076 <HAL_UART_RxCpltCallback+0x62>
			act_temperature_c1 = (u8rxbuf[3]<<8 | u8rxbuf[4]);
 800205e:	4b30      	ldr	r3, [pc, #192]	; (8002120 <HAL_UART_RxCpltCallback+0x10c>)
 8002060:	78db      	ldrb	r3, [r3, #3]
 8002062:	021b      	lsls	r3, r3, #8
 8002064:	b21a      	sxth	r2, r3
 8002066:	4b2e      	ldr	r3, [pc, #184]	; (8002120 <HAL_UART_RxCpltCallback+0x10c>)
 8002068:	791b      	ldrb	r3, [r3, #4]
 800206a:	b21b      	sxth	r3, r3
 800206c:	4313      	orrs	r3, r2
 800206e:	b21b      	sxth	r3, r3
 8002070:	b29a      	uxth	r2, r3
 8002072:	4b2c      	ldr	r3, [pc, #176]	; (8002124 <HAL_UART_RxCpltCallback+0x110>)
 8002074:	801a      	strh	r2, [r3, #0]
		}
		if((u8rxbuf[0] == 0x02)&&(u8rxbuf[1] == 0x03)&&(u8rxbuf[2] == 0x08)){
 8002076:	4b2a      	ldr	r3, [pc, #168]	; (8002120 <HAL_UART_RxCpltCallback+0x10c>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b02      	cmp	r3, #2
 800207c:	d113      	bne.n	80020a6 <HAL_UART_RxCpltCallback+0x92>
 800207e:	4b28      	ldr	r3, [pc, #160]	; (8002120 <HAL_UART_RxCpltCallback+0x10c>)
 8002080:	785b      	ldrb	r3, [r3, #1]
 8002082:	2b03      	cmp	r3, #3
 8002084:	d10f      	bne.n	80020a6 <HAL_UART_RxCpltCallback+0x92>
 8002086:	4b26      	ldr	r3, [pc, #152]	; (8002120 <HAL_UART_RxCpltCallback+0x10c>)
 8002088:	789b      	ldrb	r3, [r3, #2]
 800208a:	2b08      	cmp	r3, #8
 800208c:	d10b      	bne.n	80020a6 <HAL_UART_RxCpltCallback+0x92>
			act_temperature_c2 = (u8rxbuf[3]<<8 | u8rxbuf[4]);
 800208e:	4b24      	ldr	r3, [pc, #144]	; (8002120 <HAL_UART_RxCpltCallback+0x10c>)
 8002090:	78db      	ldrb	r3, [r3, #3]
 8002092:	021b      	lsls	r3, r3, #8
 8002094:	b21a      	sxth	r2, r3
 8002096:	4b22      	ldr	r3, [pc, #136]	; (8002120 <HAL_UART_RxCpltCallback+0x10c>)
 8002098:	791b      	ldrb	r3, [r3, #4]
 800209a:	b21b      	sxth	r3, r3
 800209c:	4313      	orrs	r3, r2
 800209e:	b21b      	sxth	r3, r3
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	4b21      	ldr	r3, [pc, #132]	; (8002128 <HAL_UART_RxCpltCallback+0x114>)
 80020a4:	801a      	strh	r2, [r3, #0]
		}
		if((u8rxbuf[0] == 0x03)&&(u8rxbuf[1] == 0x03)&&(u8rxbuf[2] == 0x08)){
 80020a6:	4b1e      	ldr	r3, [pc, #120]	; (8002120 <HAL_UART_RxCpltCallback+0x10c>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d113      	bne.n	80020d6 <HAL_UART_RxCpltCallback+0xc2>
 80020ae:	4b1c      	ldr	r3, [pc, #112]	; (8002120 <HAL_UART_RxCpltCallback+0x10c>)
 80020b0:	785b      	ldrb	r3, [r3, #1]
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	d10f      	bne.n	80020d6 <HAL_UART_RxCpltCallback+0xc2>
 80020b6:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <HAL_UART_RxCpltCallback+0x10c>)
 80020b8:	789b      	ldrb	r3, [r3, #2]
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d10b      	bne.n	80020d6 <HAL_UART_RxCpltCallback+0xc2>
			act_temperature_c3 = (u8rxbuf[3]<<8 | u8rxbuf[4]);
 80020be:	4b18      	ldr	r3, [pc, #96]	; (8002120 <HAL_UART_RxCpltCallback+0x10c>)
 80020c0:	78db      	ldrb	r3, [r3, #3]
 80020c2:	021b      	lsls	r3, r3, #8
 80020c4:	b21a      	sxth	r2, r3
 80020c6:	4b16      	ldr	r3, [pc, #88]	; (8002120 <HAL_UART_RxCpltCallback+0x10c>)
 80020c8:	791b      	ldrb	r3, [r3, #4]
 80020ca:	b21b      	sxth	r3, r3
 80020cc:	4313      	orrs	r3, r2
 80020ce:	b21b      	sxth	r3, r3
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	4b16      	ldr	r3, [pc, #88]	; (800212c <HAL_UART_RxCpltCallback+0x118>)
 80020d4:	801a      	strh	r2, [r3, #0]
		}
		if((u8rxbuf[0] == 0x04)&&(u8rxbuf[1] == 0x03)&&(u8rxbuf[2] == 0x08)){
 80020d6:	4b12      	ldr	r3, [pc, #72]	; (8002120 <HAL_UART_RxCpltCallback+0x10c>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d113      	bne.n	8002106 <HAL_UART_RxCpltCallback+0xf2>
 80020de:	4b10      	ldr	r3, [pc, #64]	; (8002120 <HAL_UART_RxCpltCallback+0x10c>)
 80020e0:	785b      	ldrb	r3, [r3, #1]
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d10f      	bne.n	8002106 <HAL_UART_RxCpltCallback+0xf2>
 80020e6:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <HAL_UART_RxCpltCallback+0x10c>)
 80020e8:	789b      	ldrb	r3, [r3, #2]
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	d10b      	bne.n	8002106 <HAL_UART_RxCpltCallback+0xf2>
			act_temperature_c4 = (u8rxbuf[3]<<8 | u8rxbuf[4]);
 80020ee:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <HAL_UART_RxCpltCallback+0x10c>)
 80020f0:	78db      	ldrb	r3, [r3, #3]
 80020f2:	021b      	lsls	r3, r3, #8
 80020f4:	b21a      	sxth	r2, r3
 80020f6:	4b0a      	ldr	r3, [pc, #40]	; (8002120 <HAL_UART_RxCpltCallback+0x10c>)
 80020f8:	791b      	ldrb	r3, [r3, #4]
 80020fa:	b21b      	sxth	r3, r3
 80020fc:	4313      	orrs	r3, r2
 80020fe:	b21b      	sxth	r3, r3
 8002100:	b29a      	uxth	r2, r3
 8002102:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <HAL_UART_RxCpltCallback+0x11c>)
 8002104:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	2000028c 	.word	0x2000028c
 8002114:	200005c4 	.word	0x200005c4
 8002118:	20000833 	.word	0x20000833
 800211c:	20000310 	.word	0x20000310
 8002120:	20000630 	.word	0x20000630
 8002124:	2000061e 	.word	0x2000061e
 8002128:	20000620 	.word	0x20000620
 800212c:	20000622 	.word	0x20000622
 8002130:	20000624 	.word	0x20000624

08002134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002138:	f007 fdf0 	bl	8009d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800213c:	f000 f842 	bl	80021c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002140:	f000 fab0 	bl	80026a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002144:	f000 f92c 	bl	80023a0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002148:	f000 f88e 	bl	8002268 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800214c:	f000 f8f8 	bl	8002340 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8002150:	f000 fa3a 	bl	80025c8 <MX_TIM6_Init>
  MX_SPI2_Init();
 8002154:	f000 f99c 	bl	8002490 <MX_SPI2_Init>
  MX_TIM1_Init();
 8002158:	f000 f9e2 	bl	8002520 <MX_TIM1_Init>
  MX_LPUART1_UART_Init();
 800215c:	f000 f8c4 	bl	80022e8 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8002160:	f000 f94e 	bl	8002400 <MX_SPI1_Init>
  MX_TIM7_Init();
 8002164:	f000 fa66 	bl	8002634 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8002168:	4811      	ldr	r0, [pc, #68]	; (80021b0 <main+0x7c>)
 800216a:	f00a fc75 	bl	800ca58 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 800216e:	4811      	ldr	r0, [pc, #68]	; (80021b4 <main+0x80>)
 8002170:	f00a fc72 	bl	800ca58 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 8002174:	4810      	ldr	r0, [pc, #64]	; (80021b8 <main+0x84>)
 8002176:	f00a fc23 	bl	800c9c0 <HAL_TIM_Base_Start>
//  for(i=0;i<=250;i++)
//  {
//	  data[i]=i;
//  }

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800217a:	2200      	movs	r2, #0
 800217c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002180:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002184:	f008 f984 	bl	800a490 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8002188:	2002      	movs	r0, #2
 800218a:	f007 fe3b 	bl	8009e04 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800218e:	2201      	movs	r2, #1
 8002190:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002194:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002198:	f008 f97a 	bl	800a490 <HAL_GPIO_WritePin>
/*Ethernet Init
  wiz5500Init();*/

  W25qxx_Init();
 800219c:	f000 ff5e 	bl	800305c <W25qxx_Init>
  //rtc_set_time(13,14,30);
  //rtc_set_date(2,20,2,23);
  HAL_UART_Receive_IT(&hlpuart1,rxTempBuff,1);
 80021a0:	2201      	movs	r2, #1
 80021a2:	4906      	ldr	r1, [pc, #24]	; (80021bc <main+0x88>)
 80021a4:	4806      	ldr	r0, [pc, #24]	; (80021c0 <main+0x8c>)
 80021a6:	f00b f8f9 	bl	800d39c <HAL_UART_Receive_IT>
  while (1)
  {
	  cppMain();
 80021aa:	f007 fd3b 	bl	8009c24 <cppMain>
 80021ae:	e7fc      	b.n	80021aa <main+0x76>
 80021b0:	2000052c 	.word	0x2000052c
 80021b4:	20000578 	.word	0x20000578
 80021b8:	200004e0 	.word	0x200004e0
 80021bc:	200005c4 	.word	0x200005c4
 80021c0:	2000028c 	.word	0x2000028c

080021c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b096      	sub	sp, #88	; 0x58
 80021c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ca:	f107 0314 	add.w	r3, r7, #20
 80021ce:	2244      	movs	r2, #68	; 0x44
 80021d0:	2100      	movs	r1, #0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f00c fc12 	bl	800e9fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021d8:	463b      	mov	r3, r7
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	605a      	str	r2, [r3, #4]
 80021e0:	609a      	str	r2, [r3, #8]
 80021e2:	60da      	str	r2, [r3, #12]
 80021e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80021e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80021ea:	f008 fab7 	bl	800a75c <HAL_PWREx_ControlVoltageScaling>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80021f4:	f000 fb48 	bl	8002888 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80021f8:	2310      	movs	r3, #16
 80021fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80021fc:	2301      	movs	r3, #1
 80021fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002204:	2360      	movs	r3, #96	; 0x60
 8002206:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002208:	2302      	movs	r3, #2
 800220a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800220c:	2301      	movs	r3, #1
 800220e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002210:	2301      	movs	r3, #1
 8002212:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 86;
 8002214:	2356      	movs	r3, #86	; 0x56
 8002216:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002218:	2307      	movs	r3, #7
 800221a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800221c:	2302      	movs	r3, #2
 800221e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 8002220:	2308      	movs	r3, #8
 8002222:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002224:	f107 0314 	add.w	r3, r7, #20
 8002228:	4618      	mov	r0, r3
 800222a:	f008 faed 	bl	800a808 <HAL_RCC_OscConfig>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002234:	f000 fb28 	bl	8002888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002238:	230f      	movs	r3, #15
 800223a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800223c:	2303      	movs	r3, #3
 800223e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002240:	2300      	movs	r3, #0
 8002242:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002244:	2300      	movs	r3, #0
 8002246:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002248:	2300      	movs	r3, #0
 800224a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800224c:	463b      	mov	r3, r7
 800224e:	2102      	movs	r1, #2
 8002250:	4618      	mov	r0, r3
 8002252:	f008 feed 	bl	800b030 <HAL_RCC_ClockConfig>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800225c:	f000 fb14 	bl	8002888 <Error_Handler>
  }
}
 8002260:	bf00      	nop
 8002262:	3758      	adds	r7, #88	; 0x58
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800226c:	4b1b      	ldr	r3, [pc, #108]	; (80022dc <MX_I2C1_Init+0x74>)
 800226e:	4a1c      	ldr	r2, [pc, #112]	; (80022e0 <MX_I2C1_Init+0x78>)
 8002270:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00A0A7FD;
 8002272:	4b1a      	ldr	r3, [pc, #104]	; (80022dc <MX_I2C1_Init+0x74>)
 8002274:	4a1b      	ldr	r2, [pc, #108]	; (80022e4 <MX_I2C1_Init+0x7c>)
 8002276:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002278:	4b18      	ldr	r3, [pc, #96]	; (80022dc <MX_I2C1_Init+0x74>)
 800227a:	2200      	movs	r2, #0
 800227c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800227e:	4b17      	ldr	r3, [pc, #92]	; (80022dc <MX_I2C1_Init+0x74>)
 8002280:	2201      	movs	r2, #1
 8002282:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002284:	4b15      	ldr	r3, [pc, #84]	; (80022dc <MX_I2C1_Init+0x74>)
 8002286:	2200      	movs	r2, #0
 8002288:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800228a:	4b14      	ldr	r3, [pc, #80]	; (80022dc <MX_I2C1_Init+0x74>)
 800228c:	2200      	movs	r2, #0
 800228e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <MX_I2C1_Init+0x74>)
 8002292:	2200      	movs	r2, #0
 8002294:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002296:	4b11      	ldr	r3, [pc, #68]	; (80022dc <MX_I2C1_Init+0x74>)
 8002298:	2200      	movs	r2, #0
 800229a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800229c:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <MX_I2C1_Init+0x74>)
 800229e:	2200      	movs	r2, #0
 80022a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022a2:	480e      	ldr	r0, [pc, #56]	; (80022dc <MX_I2C1_Init+0x74>)
 80022a4:	f008 f926 	bl	800a4f4 <HAL_I2C_Init>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80022ae:	f000 faeb 	bl	8002888 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80022b2:	2100      	movs	r1, #0
 80022b4:	4809      	ldr	r0, [pc, #36]	; (80022dc <MX_I2C1_Init+0x74>)
 80022b6:	f008 f9ac 	bl	800a612 <HAL_I2CEx_ConfigAnalogFilter>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80022c0:	f000 fae2 	bl	8002888 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80022c4:	2100      	movs	r1, #0
 80022c6:	4805      	ldr	r0, [pc, #20]	; (80022dc <MX_I2C1_Init+0x74>)
 80022c8:	f008 f9ee 	bl	800a6a8 <HAL_I2CEx_ConfigDigitalFilter>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80022d2:	f000 fad9 	bl	8002888 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000238 	.word	0x20000238
 80022e0:	40005400 	.word	0x40005400
 80022e4:	00a0a7fd 	.word	0x00a0a7fd

080022e8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80022ec:	4b12      	ldr	r3, [pc, #72]	; (8002338 <MX_LPUART1_UART_Init+0x50>)
 80022ee:	4a13      	ldr	r2, [pc, #76]	; (800233c <MX_LPUART1_UART_Init+0x54>)
 80022f0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80022f2:	4b11      	ldr	r3, [pc, #68]	; (8002338 <MX_LPUART1_UART_Init+0x50>)
 80022f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022f8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022fa:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <MX_LPUART1_UART_Init+0x50>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002300:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <MX_LPUART1_UART_Init+0x50>)
 8002302:	2200      	movs	r2, #0
 8002304:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002306:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <MX_LPUART1_UART_Init+0x50>)
 8002308:	2200      	movs	r2, #0
 800230a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800230c:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <MX_LPUART1_UART_Init+0x50>)
 800230e:	220c      	movs	r2, #12
 8002310:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002312:	4b09      	ldr	r3, [pc, #36]	; (8002338 <MX_LPUART1_UART_Init+0x50>)
 8002314:	2200      	movs	r2, #0
 8002316:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002318:	4b07      	ldr	r3, [pc, #28]	; (8002338 <MX_LPUART1_UART_Init+0x50>)
 800231a:	2200      	movs	r2, #0
 800231c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800231e:	4b06      	ldr	r3, [pc, #24]	; (8002338 <MX_LPUART1_UART_Init+0x50>)
 8002320:	2200      	movs	r2, #0
 8002322:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002324:	4804      	ldr	r0, [pc, #16]	; (8002338 <MX_LPUART1_UART_Init+0x50>)
 8002326:	f00a ff7d 	bl	800d224 <HAL_UART_Init>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8002330:	f000 faaa 	bl	8002888 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002334:	bf00      	nop
 8002336:	bd80      	pop	{r7, pc}
 8002338:	2000028c 	.word	0x2000028c
 800233c:	40008000 	.word	0x40008000

08002340 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002344:	4b14      	ldr	r3, [pc, #80]	; (8002398 <MX_USART1_UART_Init+0x58>)
 8002346:	4a15      	ldr	r2, [pc, #84]	; (800239c <MX_USART1_UART_Init+0x5c>)
 8002348:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800234a:	4b13      	ldr	r3, [pc, #76]	; (8002398 <MX_USART1_UART_Init+0x58>)
 800234c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002350:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002352:	4b11      	ldr	r3, [pc, #68]	; (8002398 <MX_USART1_UART_Init+0x58>)
 8002354:	2200      	movs	r2, #0
 8002356:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002358:	4b0f      	ldr	r3, [pc, #60]	; (8002398 <MX_USART1_UART_Init+0x58>)
 800235a:	2200      	movs	r2, #0
 800235c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800235e:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <MX_USART1_UART_Init+0x58>)
 8002360:	2200      	movs	r2, #0
 8002362:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <MX_USART1_UART_Init+0x58>)
 8002366:	220c      	movs	r2, #12
 8002368:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800236a:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <MX_USART1_UART_Init+0x58>)
 800236c:	2200      	movs	r2, #0
 800236e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002370:	4b09      	ldr	r3, [pc, #36]	; (8002398 <MX_USART1_UART_Init+0x58>)
 8002372:	2200      	movs	r2, #0
 8002374:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002376:	4b08      	ldr	r3, [pc, #32]	; (8002398 <MX_USART1_UART_Init+0x58>)
 8002378:	2200      	movs	r2, #0
 800237a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <MX_USART1_UART_Init+0x58>)
 800237e:	2200      	movs	r2, #0
 8002380:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002382:	4805      	ldr	r0, [pc, #20]	; (8002398 <MX_USART1_UART_Init+0x58>)
 8002384:	f00a ff4e 	bl	800d224 <HAL_UART_Init>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800238e:	f000 fa7b 	bl	8002888 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000310 	.word	0x20000310
 800239c:	40013800 	.word	0x40013800

080023a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023a4:	4b14      	ldr	r3, [pc, #80]	; (80023f8 <MX_USART2_UART_Init+0x58>)
 80023a6:	4a15      	ldr	r2, [pc, #84]	; (80023fc <MX_USART2_UART_Init+0x5c>)
 80023a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80023aa:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <MX_USART2_UART_Init+0x58>)
 80023ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80023b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023b2:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <MX_USART2_UART_Init+0x58>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023b8:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <MX_USART2_UART_Init+0x58>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023be:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <MX_USART2_UART_Init+0x58>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023c4:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <MX_USART2_UART_Init+0x58>)
 80023c6:	220c      	movs	r2, #12
 80023c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ca:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <MX_USART2_UART_Init+0x58>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023d0:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <MX_USART2_UART_Init+0x58>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023d6:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <MX_USART2_UART_Init+0x58>)
 80023d8:	2200      	movs	r2, #0
 80023da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023dc:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <MX_USART2_UART_Init+0x58>)
 80023de:	2200      	movs	r2, #0
 80023e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023e2:	4805      	ldr	r0, [pc, #20]	; (80023f8 <MX_USART2_UART_Init+0x58>)
 80023e4:	f00a ff1e 	bl	800d224 <HAL_UART_Init>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80023ee:	f000 fa4b 	bl	8002888 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000394 	.word	0x20000394
 80023fc:	40004400 	.word	0x40004400

08002400 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002404:	4b1f      	ldr	r3, [pc, #124]	; (8002484 <MX_SPI1_Init+0x84>)
 8002406:	4a20      	ldr	r2, [pc, #128]	; (8002488 <MX_SPI1_Init+0x88>)
 8002408:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800240a:	4b1e      	ldr	r3, [pc, #120]	; (8002484 <MX_SPI1_Init+0x84>)
 800240c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002410:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002412:	4b1c      	ldr	r3, [pc, #112]	; (8002484 <MX_SPI1_Init+0x84>)
 8002414:	2200      	movs	r2, #0
 8002416:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002418:	4b1a      	ldr	r3, [pc, #104]	; (8002484 <MX_SPI1_Init+0x84>)
 800241a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800241e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002420:	4b18      	ldr	r3, [pc, #96]	; (8002484 <MX_SPI1_Init+0x84>)
 8002422:	2200      	movs	r2, #0
 8002424:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002426:	4b17      	ldr	r3, [pc, #92]	; (8002484 <MX_SPI1_Init+0x84>)
 8002428:	2200      	movs	r2, #0
 800242a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800242c:	4b15      	ldr	r3, [pc, #84]	; (8002484 <MX_SPI1_Init+0x84>)
 800242e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002432:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002434:	4b13      	ldr	r3, [pc, #76]	; (8002484 <MX_SPI1_Init+0x84>)
 8002436:	2210      	movs	r2, #16
 8002438:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800243a:	4b12      	ldr	r3, [pc, #72]	; (8002484 <MX_SPI1_Init+0x84>)
 800243c:	2200      	movs	r2, #0
 800243e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002440:	4b10      	ldr	r3, [pc, #64]	; (8002484 <MX_SPI1_Init+0x84>)
 8002442:	2200      	movs	r2, #0
 8002444:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002446:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <MX_SPI1_Init+0x84>)
 8002448:	2200      	movs	r2, #0
 800244a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800244c:	4b0d      	ldr	r3, [pc, #52]	; (8002484 <MX_SPI1_Init+0x84>)
 800244e:	2207      	movs	r2, #7
 8002450:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002452:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <MX_SPI1_Init+0x84>)
 8002454:	2200      	movs	r2, #0
 8002456:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002458:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <MX_SPI1_Init+0x84>)
 800245a:	2208      	movs	r2, #8
 800245c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800245e:	4809      	ldr	r0, [pc, #36]	; (8002484 <MX_SPI1_Init+0x84>)
 8002460:	f009 fb46 	bl	800baf0 <HAL_SPI_Init>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800246a:	f000 fa0d 	bl	8002888 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi2);
 800246e:	4b07      	ldr	r3, [pc, #28]	; (800248c <MX_SPI1_Init+0x8c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4b05      	ldr	r3, [pc, #20]	; (800248c <MX_SPI1_Init+0x8c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800247c:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000418 	.word	0x20000418
 8002488:	40013000 	.word	0x40013000
 800248c:	2000047c 	.word	0x2000047c

08002490 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002494:	4b1f      	ldr	r3, [pc, #124]	; (8002514 <MX_SPI2_Init+0x84>)
 8002496:	4a20      	ldr	r2, [pc, #128]	; (8002518 <MX_SPI2_Init+0x88>)
 8002498:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800249a:	4b1e      	ldr	r3, [pc, #120]	; (8002514 <MX_SPI2_Init+0x84>)
 800249c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80024a2:	4b1c      	ldr	r3, [pc, #112]	; (8002514 <MX_SPI2_Init+0x84>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80024a8:	4b1a      	ldr	r3, [pc, #104]	; (8002514 <MX_SPI2_Init+0x84>)
 80024aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80024ae:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024b0:	4b18      	ldr	r3, [pc, #96]	; (8002514 <MX_SPI2_Init+0x84>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024b6:	4b17      	ldr	r3, [pc, #92]	; (8002514 <MX_SPI2_Init+0x84>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80024bc:	4b15      	ldr	r3, [pc, #84]	; (8002514 <MX_SPI2_Init+0x84>)
 80024be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024c2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80024c4:	4b13      	ldr	r3, [pc, #76]	; (8002514 <MX_SPI2_Init+0x84>)
 80024c6:	2208      	movs	r2, #8
 80024c8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024ca:	4b12      	ldr	r3, [pc, #72]	; (8002514 <MX_SPI2_Init+0x84>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80024d0:	4b10      	ldr	r3, [pc, #64]	; (8002514 <MX_SPI2_Init+0x84>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024d6:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <MX_SPI2_Init+0x84>)
 80024d8:	2200      	movs	r2, #0
 80024da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80024dc:	4b0d      	ldr	r3, [pc, #52]	; (8002514 <MX_SPI2_Init+0x84>)
 80024de:	2207      	movs	r2, #7
 80024e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80024e2:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <MX_SPI2_Init+0x84>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80024e8:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <MX_SPI2_Init+0x84>)
 80024ea:	2208      	movs	r2, #8
 80024ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80024ee:	4809      	ldr	r0, [pc, #36]	; (8002514 <MX_SPI2_Init+0x84>)
 80024f0:	f009 fafe 	bl	800baf0 <HAL_SPI_Init>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80024fa:	f000 f9c5 	bl	8002888 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 80024fe:	4b07      	ldr	r3, [pc, #28]	; (800251c <MX_SPI2_Init+0x8c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4b05      	ldr	r3, [pc, #20]	; (800251c <MX_SPI2_Init+0x8c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800250c:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI2_Init 2 */

}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	2000047c 	.word	0x2000047c
 8002518:	40003800 	.word	0x40003800
 800251c:	20000418 	.word	0x20000418

08002520 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002526:	f107 0310 	add.w	r3, r7, #16
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	605a      	str	r2, [r3, #4]
 8002530:	609a      	str	r2, [r3, #8]
 8002532:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002534:	1d3b      	adds	r3, r7, #4
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	605a      	str	r2, [r3, #4]
 800253c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800253e:	4b20      	ldr	r3, [pc, #128]	; (80025c0 <MX_TIM1_Init+0xa0>)
 8002540:	4a20      	ldr	r2, [pc, #128]	; (80025c4 <MX_TIM1_Init+0xa4>)
 8002542:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002544:	4b1e      	ldr	r3, [pc, #120]	; (80025c0 <MX_TIM1_Init+0xa0>)
 8002546:	2200      	movs	r2, #0
 8002548:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800254a:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <MX_TIM1_Init+0xa0>)
 800254c:	2200      	movs	r2, #0
 800254e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002550:	4b1b      	ldr	r3, [pc, #108]	; (80025c0 <MX_TIM1_Init+0xa0>)
 8002552:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002556:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002558:	4b19      	ldr	r3, [pc, #100]	; (80025c0 <MX_TIM1_Init+0xa0>)
 800255a:	2200      	movs	r2, #0
 800255c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800255e:	4b18      	ldr	r3, [pc, #96]	; (80025c0 <MX_TIM1_Init+0xa0>)
 8002560:	2200      	movs	r2, #0
 8002562:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002564:	4b16      	ldr	r3, [pc, #88]	; (80025c0 <MX_TIM1_Init+0xa0>)
 8002566:	2200      	movs	r2, #0
 8002568:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800256a:	4815      	ldr	r0, [pc, #84]	; (80025c0 <MX_TIM1_Init+0xa0>)
 800256c:	f00a f9d0 	bl	800c910 <HAL_TIM_Base_Init>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002576:	f000 f987 	bl	8002888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800257a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800257e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002580:	f107 0310 	add.w	r3, r7, #16
 8002584:	4619      	mov	r1, r3
 8002586:	480e      	ldr	r0, [pc, #56]	; (80025c0 <MX_TIM1_Init+0xa0>)
 8002588:	f00a fbd9 	bl	800cd3e <HAL_TIM_ConfigClockSource>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002592:	f000 f979 	bl	8002888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002596:	2300      	movs	r3, #0
 8002598:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800259a:	2300      	movs	r3, #0
 800259c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	4619      	mov	r1, r3
 80025a6:	4806      	ldr	r0, [pc, #24]	; (80025c0 <MX_TIM1_Init+0xa0>)
 80025a8:	f00a fdb8 	bl	800d11c <HAL_TIMEx_MasterConfigSynchronization>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80025b2:	f000 f969 	bl	8002888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80025b6:	bf00      	nop
 80025b8:	3720      	adds	r7, #32
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	200004e0 	.word	0x200004e0
 80025c4:	40012c00 	.word	0x40012c00

080025c8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ce:	1d3b      	adds	r3, r7, #4
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80025d8:	4b14      	ldr	r3, [pc, #80]	; (800262c <MX_TIM6_Init+0x64>)
 80025da:	4a15      	ldr	r2, [pc, #84]	; (8002630 <MX_TIM6_Init+0x68>)
 80025dc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 43000-1;
 80025de:	4b13      	ldr	r3, [pc, #76]	; (800262c <MX_TIM6_Init+0x64>)
 80025e0:	f24a 72f7 	movw	r2, #42999	; 0xa7f7
 80025e4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e6:	4b11      	ldr	r3, [pc, #68]	; (800262c <MX_TIM6_Init+0x64>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 80025ec:	4b0f      	ldr	r3, [pc, #60]	; (800262c <MX_TIM6_Init+0x64>)
 80025ee:	2264      	movs	r2, #100	; 0x64
 80025f0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f2:	4b0e      	ldr	r3, [pc, #56]	; (800262c <MX_TIM6_Init+0x64>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80025f8:	480c      	ldr	r0, [pc, #48]	; (800262c <MX_TIM6_Init+0x64>)
 80025fa:	f00a f989 	bl	800c910 <HAL_TIM_Base_Init>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002604:	f000 f940 	bl	8002888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002608:	2300      	movs	r3, #0
 800260a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800260c:	2300      	movs	r3, #0
 800260e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002610:	1d3b      	adds	r3, r7, #4
 8002612:	4619      	mov	r1, r3
 8002614:	4805      	ldr	r0, [pc, #20]	; (800262c <MX_TIM6_Init+0x64>)
 8002616:	f00a fd81 	bl	800d11c <HAL_TIMEx_MasterConfigSynchronization>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002620:	f000 f932 	bl	8002888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002624:	bf00      	nop
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	2000052c 	.word	0x2000052c
 8002630:	40001000 	.word	0x40001000

08002634 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800263a:	1d3b      	adds	r3, r7, #4
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002644:	4b15      	ldr	r3, [pc, #84]	; (800269c <MX_TIM7_Init+0x68>)
 8002646:	4a16      	ldr	r2, [pc, #88]	; (80026a0 <MX_TIM7_Init+0x6c>)
 8002648:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 43000-1;
 800264a:	4b14      	ldr	r3, [pc, #80]	; (800269c <MX_TIM7_Init+0x68>)
 800264c:	f24a 72f7 	movw	r2, #42999	; 0xa7f7
 8002650:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002652:	4b12      	ldr	r3, [pc, #72]	; (800269c <MX_TIM7_Init+0x68>)
 8002654:	2200      	movs	r2, #0
 8002656:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 8002658:	4b10      	ldr	r3, [pc, #64]	; (800269c <MX_TIM7_Init+0x68>)
 800265a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800265e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002660:	4b0e      	ldr	r3, [pc, #56]	; (800269c <MX_TIM7_Init+0x68>)
 8002662:	2200      	movs	r2, #0
 8002664:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002666:	480d      	ldr	r0, [pc, #52]	; (800269c <MX_TIM7_Init+0x68>)
 8002668:	f00a f952 	bl	800c910 <HAL_TIM_Base_Init>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002672:	f000 f909 	bl	8002888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002676:	2300      	movs	r3, #0
 8002678:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800267a:	2300      	movs	r3, #0
 800267c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800267e:	1d3b      	adds	r3, r7, #4
 8002680:	4619      	mov	r1, r3
 8002682:	4806      	ldr	r0, [pc, #24]	; (800269c <MX_TIM7_Init+0x68>)
 8002684:	f00a fd4a 	bl	800d11c <HAL_TIMEx_MasterConfigSynchronization>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800268e:	f000 f8fb 	bl	8002888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002692:	bf00      	nop
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000578 	.word	0x20000578
 80026a0:	40001400 	.word	0x40001400

080026a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08a      	sub	sp, #40	; 0x28
 80026a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026aa:	f107 0314 	add.w	r3, r7, #20
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	605a      	str	r2, [r3, #4]
 80026b4:	609a      	str	r2, [r3, #8]
 80026b6:	60da      	str	r2, [r3, #12]
 80026b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ba:	4b6f      	ldr	r3, [pc, #444]	; (8002878 <MX_GPIO_Init+0x1d4>)
 80026bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026be:	4a6e      	ldr	r2, [pc, #440]	; (8002878 <MX_GPIO_Init+0x1d4>)
 80026c0:	f043 0304 	orr.w	r3, r3, #4
 80026c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026c6:	4b6c      	ldr	r3, [pc, #432]	; (8002878 <MX_GPIO_Init+0x1d4>)
 80026c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	613b      	str	r3, [r7, #16]
 80026d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d2:	4b69      	ldr	r3, [pc, #420]	; (8002878 <MX_GPIO_Init+0x1d4>)
 80026d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d6:	4a68      	ldr	r2, [pc, #416]	; (8002878 <MX_GPIO_Init+0x1d4>)
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026de:	4b66      	ldr	r3, [pc, #408]	; (8002878 <MX_GPIO_Init+0x1d4>)
 80026e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ea:	4b63      	ldr	r3, [pc, #396]	; (8002878 <MX_GPIO_Init+0x1d4>)
 80026ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ee:	4a62      	ldr	r2, [pc, #392]	; (8002878 <MX_GPIO_Init+0x1d4>)
 80026f0:	f043 0302 	orr.w	r3, r3, #2
 80026f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026f6:	4b60      	ldr	r3, [pc, #384]	; (8002878 <MX_GPIO_Init+0x1d4>)
 80026f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002702:	4b5d      	ldr	r3, [pc, #372]	; (8002878 <MX_GPIO_Init+0x1d4>)
 8002704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002706:	4a5c      	ldr	r2, [pc, #368]	; (8002878 <MX_GPIO_Init+0x1d4>)
 8002708:	f043 0308 	orr.w	r3, r3, #8
 800270c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800270e:	4b5a      	ldr	r3, [pc, #360]	; (8002878 <MX_GPIO_Init+0x1d4>)
 8002710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	607b      	str	r3, [r7, #4]
 8002718:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCDD6_Pin|LCDD5_Pin|LCDD4_Pin|LCDD3_Pin
 800271a:	2200      	movs	r2, #0
 800271c:	f64f 417f 	movw	r1, #64639	; 0xfc7f
 8002720:	4856      	ldr	r0, [pc, #344]	; (800287c <MX_GPIO_Init+0x1d8>)
 8002722:	f007 feb5 	bl	800a490 <HAL_GPIO_WritePin>
                          |LCDD2_Pin|LCDD1_Pin|LCDD0_Pin|RELAY3_Pin
                          |RELAY4_Pin|W5500_INT_Pin|GLCDEN_Pin|GLCDCS2_Pin
                          |GLCDRW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RELAY2_Pin|LCDRS_Pin, GPIO_PIN_RESET);
 8002726:	2200      	movs	r2, #0
 8002728:	2112      	movs	r1, #18
 800272a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800272e:	f007 feaf 	bl	800a490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _W25QXX_CS_PIN_Pin|WIFIRST_Pin|LCDD7_Pin, GPIO_PIN_RESET);
 8002732:	2200      	movs	r2, #0
 8002734:	2125      	movs	r1, #37	; 0x25
 8002736:	4852      	ldr	r0, [pc, #328]	; (8002880 <MX_GPIO_Init+0x1dc>)
 8002738:	f007 feaa 	bl	800a490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 800273c:	2201      	movs	r2, #1
 800273e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002742:	484f      	ldr	r0, [pc, #316]	; (8002880 <MX_GPIO_Init+0x1dc>)
 8002744:	f007 fea4 	bl	800a490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W5500RST_GPIO_Port, W5500RST_Pin, GPIO_PIN_SET);
 8002748:	2201      	movs	r2, #1
 800274a:	2180      	movs	r1, #128	; 0x80
 800274c:	484b      	ldr	r0, [pc, #300]	; (800287c <MX_GPIO_Init+0x1d8>)
 800274e:	f007 fe9f 	bl	800a490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(InputMachine_GPIO_Port, InputMachine_Pin, GPIO_PIN_SET);
 8002752:	2201      	movs	r2, #1
 8002754:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002758:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800275c:	f007 fe98 	bl	800a490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 8002760:	2200      	movs	r2, #0
 8002762:	2104      	movs	r1, #4
 8002764:	4847      	ldr	r0, [pc, #284]	; (8002884 <MX_GPIO_Init+0x1e0>)
 8002766:	f007 fe93 	bl	800a490 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCDD6_Pin LCDD5_Pin LCDD4_Pin LCDD3_Pin
                           LCDD2_Pin LCDD1_Pin LCDD0_Pin RELAY3_Pin
                           RELAY4_Pin W5500_INT_Pin W5500RST_Pin */
  GPIO_InitStruct.Pin = LCDD6_Pin|LCDD5_Pin|LCDD4_Pin|LCDD3_Pin
 800276a:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 800276e:	617b      	str	r3, [r7, #20]
                          |LCDD2_Pin|LCDD1_Pin|LCDD0_Pin|RELAY3_Pin
                          |RELAY4_Pin|W5500_INT_Pin|W5500RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002770:	2301      	movs	r3, #1
 8002772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002774:	2300      	movs	r3, #0
 8002776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002778:	2300      	movs	r3, #0
 800277a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800277c:	f107 0314 	add.w	r3, r7, #20
 8002780:	4619      	mov	r1, r3
 8002782:	483e      	ldr	r0, [pc, #248]	; (800287c <MX_GPIO_Init+0x1d8>)
 8002784:	f007 fcf2 	bl	800a16c <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY2_Pin InputMachine_Pin */
  GPIO_InitStruct.Pin = RELAY2_Pin|InputMachine_Pin;
 8002788:	f241 0302 	movw	r3, #4098	; 0x1002
 800278c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800278e:	2301      	movs	r3, #1
 8002790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002796:	2300      	movs	r3, #0
 8002798:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279a:	f107 0314 	add.w	r3, r7, #20
 800279e:	4619      	mov	r1, r3
 80027a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027a4:	f007 fce2 	bl	800a16c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCDRS_Pin */
  GPIO_InitStruct.Pin = LCDRS_Pin;
 80027a8:	2310      	movs	r3, #16
 80027aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ac:	2301      	movs	r3, #1
 80027ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027b0:	2301      	movs	r3, #1
 80027b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b4:	2300      	movs	r3, #0
 80027b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCDRS_GPIO_Port, &GPIO_InitStruct);
 80027b8:	f107 0314 	add.w	r3, r7, #20
 80027bc:	4619      	mov	r1, r3
 80027be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027c2:	f007 fcd3 	bl	800a16c <HAL_GPIO_Init>

  /*Configure GPIO pins : _W25QXX_CS_PIN_Pin WIFIRST_Pin LCDD7_Pin */
  GPIO_InitStruct.Pin = _W25QXX_CS_PIN_Pin|WIFIRST_Pin|LCDD7_Pin;
 80027c6:	2325      	movs	r3, #37	; 0x25
 80027c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ca:	2301      	movs	r3, #1
 80027cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d2:	2300      	movs	r3, #0
 80027d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d6:	f107 0314 	add.w	r3, r7, #20
 80027da:	4619      	mov	r1, r3
 80027dc:	4828      	ldr	r0, [pc, #160]	; (8002880 <MX_GPIO_Init+0x1dc>)
 80027de:	f007 fcc5 	bl	800a16c <HAL_GPIO_Init>

  /*Configure GPIO pin : W5500_CS_Pin */
  GPIO_InitStruct.Pin = W5500_CS_Pin;
 80027e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027e8:	2301      	movs	r3, #1
 80027ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027f0:	2302      	movs	r3, #2
 80027f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(W5500_CS_GPIO_Port, &GPIO_InitStruct);
 80027f4:	f107 0314 	add.w	r3, r7, #20
 80027f8:	4619      	mov	r1, r3
 80027fa:	4821      	ldr	r0, [pc, #132]	; (8002880 <MX_GPIO_Init+0x1dc>)
 80027fc:	f007 fcb6 	bl	800a16c <HAL_GPIO_Init>

  /*Configure GPIO pins : InputMachine1_Pin InputMachine2_Pin */
  GPIO_InitStruct.Pin = InputMachine1_Pin|InputMachine2_Pin;
 8002800:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002806:	2300      	movs	r3, #0
 8002808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800280e:	f107 0314 	add.w	r3, r7, #20
 8002812:	4619      	mov	r1, r3
 8002814:	4819      	ldr	r0, [pc, #100]	; (800287c <MX_GPIO_Init+0x1d8>)
 8002816:	f007 fca9 	bl	800a16c <HAL_GPIO_Init>

  /*Configure GPIO pins : InputMachine3_Pin InputMachine4_Pin InputMachine5_Pin InputMachine6_Pin */
  GPIO_InitStruct.Pin = InputMachine3_Pin|InputMachine4_Pin|InputMachine5_Pin|InputMachine6_Pin;
 800281a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800281e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002820:	2300      	movs	r3, #0
 8002822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002824:	2300      	movs	r3, #0
 8002826:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002828:	f107 0314 	add.w	r3, r7, #20
 800282c:	4619      	mov	r1, r3
 800282e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002832:	f007 fc9b 	bl	800a16c <HAL_GPIO_Init>

  /*Configure GPIO pins : GLCDEN_Pin GLCDCS2_Pin GLCDRW_Pin */
  GPIO_InitStruct.Pin = GLCDEN_Pin|GLCDCS2_Pin|GLCDRW_Pin;
 8002836:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800283a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800283c:	2301      	movs	r3, #1
 800283e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002840:	2301      	movs	r3, #1
 8002842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002844:	2300      	movs	r3, #0
 8002846:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	4619      	mov	r1, r3
 800284e:	480b      	ldr	r0, [pc, #44]	; (800287c <MX_GPIO_Init+0x1d8>)
 8002850:	f007 fc8c 	bl	800a16c <HAL_GPIO_Init>

  /*Configure GPIO pin : GLCDCS1_Pin */
  GPIO_InitStruct.Pin = GLCDCS1_Pin;
 8002854:	2304      	movs	r3, #4
 8002856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002858:	2301      	movs	r3, #1
 800285a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800285c:	2301      	movs	r3, #1
 800285e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002860:	2300      	movs	r3, #0
 8002862:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GLCDCS1_GPIO_Port, &GPIO_InitStruct);
 8002864:	f107 0314 	add.w	r3, r7, #20
 8002868:	4619      	mov	r1, r3
 800286a:	4806      	ldr	r0, [pc, #24]	; (8002884 <MX_GPIO_Init+0x1e0>)
 800286c:	f007 fc7e 	bl	800a16c <HAL_GPIO_Init>

}
 8002870:	bf00      	nop
 8002872:	3728      	adds	r7, #40	; 0x28
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40021000 	.word	0x40021000
 800287c:	48000800 	.word	0x48000800
 8002880:	48000400 	.word	0x48000400
 8002884:	48000c00 	.word	0x48000c00

08002888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800288c:	b672      	cpsid	i
}
 800288e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002890:	e7fe      	b.n	8002890 <Error_Handler+0x8>
	...

08002894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800289a:	4b0f      	ldr	r3, [pc, #60]	; (80028d8 <HAL_MspInit+0x44>)
 800289c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800289e:	4a0e      	ldr	r2, [pc, #56]	; (80028d8 <HAL_MspInit+0x44>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	6613      	str	r3, [r2, #96]	; 0x60
 80028a6:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <HAL_MspInit+0x44>)
 80028a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	607b      	str	r3, [r7, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028b2:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <HAL_MspInit+0x44>)
 80028b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b6:	4a08      	ldr	r2, [pc, #32]	; (80028d8 <HAL_MspInit+0x44>)
 80028b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028bc:	6593      	str	r3, [r2, #88]	; 0x58
 80028be:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <HAL_MspInit+0x44>)
 80028c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c6:	603b      	str	r3, [r7, #0]
 80028c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	40021000 	.word	0x40021000

080028dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b0a2      	sub	sp, #136	; 0x88
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	60da      	str	r2, [r3, #12]
 80028f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028f4:	f107 0314 	add.w	r3, r7, #20
 80028f8:	2260      	movs	r2, #96	; 0x60
 80028fa:	2100      	movs	r1, #0
 80028fc:	4618      	mov	r0, r3
 80028fe:	f00c f87d 	bl	800e9fc <memset>
  if(hi2c->Instance==I2C1)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a20      	ldr	r2, [pc, #128]	; (8002988 <HAL_I2C_MspInit+0xac>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d138      	bne.n	800297e <HAL_I2C_MspInit+0xa2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800290c:	2340      	movs	r3, #64	; 0x40
 800290e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002910:	2300      	movs	r3, #0
 8002912:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002914:	f107 0314 	add.w	r3, r7, #20
 8002918:	4618      	mov	r0, r3
 800291a:	f008 fdad 	bl	800b478 <HAL_RCCEx_PeriphCLKConfig>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002924:	f7ff ffb0 	bl	8002888 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002928:	4b18      	ldr	r3, [pc, #96]	; (800298c <HAL_I2C_MspInit+0xb0>)
 800292a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292c:	4a17      	ldr	r2, [pc, #92]	; (800298c <HAL_I2C_MspInit+0xb0>)
 800292e:	f043 0302 	orr.w	r3, r3, #2
 8002932:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002934:	4b15      	ldr	r3, [pc, #84]	; (800298c <HAL_I2C_MspInit+0xb0>)
 8002936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	613b      	str	r3, [r7, #16]
 800293e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002940:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002944:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002946:	2312      	movs	r3, #18
 8002948:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294a:	2300      	movs	r3, #0
 800294c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294e:	2303      	movs	r3, #3
 8002950:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002954:	2304      	movs	r3, #4
 8002956:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800295a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800295e:	4619      	mov	r1, r3
 8002960:	480b      	ldr	r0, [pc, #44]	; (8002990 <HAL_I2C_MspInit+0xb4>)
 8002962:	f007 fc03 	bl	800a16c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002966:	4b09      	ldr	r3, [pc, #36]	; (800298c <HAL_I2C_MspInit+0xb0>)
 8002968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296a:	4a08      	ldr	r2, [pc, #32]	; (800298c <HAL_I2C_MspInit+0xb0>)
 800296c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002970:	6593      	str	r3, [r2, #88]	; 0x58
 8002972:	4b06      	ldr	r3, [pc, #24]	; (800298c <HAL_I2C_MspInit+0xb0>)
 8002974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002976:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800297e:	bf00      	nop
 8002980:	3788      	adds	r7, #136	; 0x88
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40005400 	.word	0x40005400
 800298c:	40021000 	.word	0x40021000
 8002990:	48000400 	.word	0x48000400

08002994 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b0a6      	sub	sp, #152	; 0x98
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	60da      	str	r2, [r3, #12]
 80029aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b0:	2260      	movs	r2, #96	; 0x60
 80029b2:	2100      	movs	r1, #0
 80029b4:	4618      	mov	r0, r3
 80029b6:	f00c f821 	bl	800e9fc <memset>
  if(huart->Instance==LPUART1)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a6b      	ldr	r2, [pc, #428]	; (8002b6c <HAL_UART_MspInit+0x1d8>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d144      	bne.n	8002a4e <HAL_UART_MspInit+0xba>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80029c4:	2320      	movs	r3, #32
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80029c8:	2300      	movs	r3, #0
 80029ca:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029d0:	4618      	mov	r0, r3
 80029d2:	f008 fd51 	bl	800b478 <HAL_RCCEx_PeriphCLKConfig>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80029dc:	f7ff ff54 	bl	8002888 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80029e0:	4b63      	ldr	r3, [pc, #396]	; (8002b70 <HAL_UART_MspInit+0x1dc>)
 80029e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e4:	4a62      	ldr	r2, [pc, #392]	; (8002b70 <HAL_UART_MspInit+0x1dc>)
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	65d3      	str	r3, [r2, #92]	; 0x5c
 80029ec:	4b60      	ldr	r3, [pc, #384]	; (8002b70 <HAL_UART_MspInit+0x1dc>)
 80029ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	623b      	str	r3, [r7, #32]
 80029f6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f8:	4b5d      	ldr	r3, [pc, #372]	; (8002b70 <HAL_UART_MspInit+0x1dc>)
 80029fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fc:	4a5c      	ldr	r2, [pc, #368]	; (8002b70 <HAL_UART_MspInit+0x1dc>)
 80029fe:	f043 0302 	orr.w	r3, r3, #2
 8002a02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a04:	4b5a      	ldr	r3, [pc, #360]	; (8002b70 <HAL_UART_MspInit+0x1dc>)
 8002a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	61fb      	str	r3, [r7, #28]
 8002a0e:	69fb      	ldr	r3, [r7, #28]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a10:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a24:	2303      	movs	r3, #3
 8002a26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002a2a:	2308      	movs	r3, #8
 8002a2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a30:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002a34:	4619      	mov	r1, r3
 8002a36:	484f      	ldr	r0, [pc, #316]	; (8002b74 <HAL_UART_MspInit+0x1e0>)
 8002a38:	f007 fb98 	bl	800a16c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	2100      	movs	r1, #0
 8002a40:	2046      	movs	r0, #70	; 0x46
 8002a42:	f007 fade 	bl	800a002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002a46:	2046      	movs	r0, #70	; 0x46
 8002a48:	f007 faf7 	bl	800a03a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a4c:	e089      	b.n	8002b62 <HAL_UART_MspInit+0x1ce>
  else if(huart->Instance==USART1)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a49      	ldr	r2, [pc, #292]	; (8002b78 <HAL_UART_MspInit+0x1e4>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d143      	bne.n	8002ae0 <HAL_UART_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a64:	4618      	mov	r0, r3
 8002a66:	f008 fd07 	bl	800b478 <HAL_RCCEx_PeriphCLKConfig>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8002a70:	f7ff ff0a 	bl	8002888 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a74:	4b3e      	ldr	r3, [pc, #248]	; (8002b70 <HAL_UART_MspInit+0x1dc>)
 8002a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a78:	4a3d      	ldr	r2, [pc, #244]	; (8002b70 <HAL_UART_MspInit+0x1dc>)
 8002a7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a7e:	6613      	str	r3, [r2, #96]	; 0x60
 8002a80:	4b3b      	ldr	r3, [pc, #236]	; (8002b70 <HAL_UART_MspInit+0x1dc>)
 8002a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a88:	61bb      	str	r3, [r7, #24]
 8002a8a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a8c:	4b38      	ldr	r3, [pc, #224]	; (8002b70 <HAL_UART_MspInit+0x1dc>)
 8002a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a90:	4a37      	ldr	r2, [pc, #220]	; (8002b70 <HAL_UART_MspInit+0x1dc>)
 8002a92:	f043 0302 	orr.w	r3, r3, #2
 8002a96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a98:	4b35      	ldr	r3, [pc, #212]	; (8002b70 <HAL_UART_MspInit+0x1dc>)
 8002a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	617b      	str	r3, [r7, #20]
 8002aa2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002aa4:	23c0      	movs	r3, #192	; 0xc0
 8002aa6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aaa:	2302      	movs	r3, #2
 8002aac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002abc:	2307      	movs	r3, #7
 8002abe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	482a      	ldr	r0, [pc, #168]	; (8002b74 <HAL_UART_MspInit+0x1e0>)
 8002aca:	f007 fb4f 	bl	800a16c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	2025      	movs	r0, #37	; 0x25
 8002ad4:	f007 fa95 	bl	800a002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ad8:	2025      	movs	r0, #37	; 0x25
 8002ada:	f007 faae 	bl	800a03a <HAL_NVIC_EnableIRQ>
}
 8002ade:	e040      	b.n	8002b62 <HAL_UART_MspInit+0x1ce>
  else if(huart->Instance==USART2)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a25      	ldr	r2, [pc, #148]	; (8002b7c <HAL_UART_MspInit+0x1e8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d13b      	bne.n	8002b62 <HAL_UART_MspInit+0x1ce>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002aea:	2302      	movs	r3, #2
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002aee:	2300      	movs	r3, #0
 8002af0:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002af6:	4618      	mov	r0, r3
 8002af8:	f008 fcbe 	bl	800b478 <HAL_RCCEx_PeriphCLKConfig>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_UART_MspInit+0x172>
      Error_Handler();
 8002b02:	f7ff fec1 	bl	8002888 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b06:	4b1a      	ldr	r3, [pc, #104]	; (8002b70 <HAL_UART_MspInit+0x1dc>)
 8002b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0a:	4a19      	ldr	r2, [pc, #100]	; (8002b70 <HAL_UART_MspInit+0x1dc>)
 8002b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b10:	6593      	str	r3, [r2, #88]	; 0x58
 8002b12:	4b17      	ldr	r3, [pc, #92]	; (8002b70 <HAL_UART_MspInit+0x1dc>)
 8002b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b1e:	4b14      	ldr	r3, [pc, #80]	; (8002b70 <HAL_UART_MspInit+0x1dc>)
 8002b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b22:	4a13      	ldr	r2, [pc, #76]	; (8002b70 <HAL_UART_MspInit+0x1dc>)
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b2a:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <HAL_UART_MspInit+0x1dc>)
 8002b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b36:	230c      	movs	r3, #12
 8002b38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b4e:	2307      	movs	r3, #7
 8002b50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b54:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b5e:	f007 fb05 	bl	800a16c <HAL_GPIO_Init>
}
 8002b62:	bf00      	nop
 8002b64:	3798      	adds	r7, #152	; 0x98
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40008000 	.word	0x40008000
 8002b70:	40021000 	.word	0x40021000
 8002b74:	48000400 	.word	0x48000400
 8002b78:	40013800 	.word	0x40013800
 8002b7c:	40004400 	.word	0x40004400

08002b80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b08c      	sub	sp, #48	; 0x30
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b88:	f107 031c 	add.w	r3, r7, #28
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	609a      	str	r2, [r3, #8]
 8002b94:	60da      	str	r2, [r3, #12]
 8002b96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a2f      	ldr	r2, [pc, #188]	; (8002c5c <HAL_SPI_MspInit+0xdc>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d129      	bne.n	8002bf6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ba2:	4b2f      	ldr	r3, [pc, #188]	; (8002c60 <HAL_SPI_MspInit+0xe0>)
 8002ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba6:	4a2e      	ldr	r2, [pc, #184]	; (8002c60 <HAL_SPI_MspInit+0xe0>)
 8002ba8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bac:	6613      	str	r3, [r2, #96]	; 0x60
 8002bae:	4b2c      	ldr	r3, [pc, #176]	; (8002c60 <HAL_SPI_MspInit+0xe0>)
 8002bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bb6:	61bb      	str	r3, [r7, #24]
 8002bb8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bba:	4b29      	ldr	r3, [pc, #164]	; (8002c60 <HAL_SPI_MspInit+0xe0>)
 8002bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bbe:	4a28      	ldr	r2, [pc, #160]	; (8002c60 <HAL_SPI_MspInit+0xe0>)
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bc6:	4b26      	ldr	r3, [pc, #152]	; (8002c60 <HAL_SPI_MspInit+0xe0>)
 8002bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	617b      	str	r3, [r7, #20]
 8002bd0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002bd2:	23e0      	movs	r3, #224	; 0xe0
 8002bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bde:	2303      	movs	r3, #3
 8002be0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002be2:	2305      	movs	r3, #5
 8002be4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be6:	f107 031c 	add.w	r3, r7, #28
 8002bea:	4619      	mov	r1, r3
 8002bec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bf0:	f007 fabc 	bl	800a16c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002bf4:	e02d      	b.n	8002c52 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI2)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a1a      	ldr	r2, [pc, #104]	; (8002c64 <HAL_SPI_MspInit+0xe4>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d128      	bne.n	8002c52 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002c00:	4b17      	ldr	r3, [pc, #92]	; (8002c60 <HAL_SPI_MspInit+0xe0>)
 8002c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c04:	4a16      	ldr	r2, [pc, #88]	; (8002c60 <HAL_SPI_MspInit+0xe0>)
 8002c06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c0a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c0c:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <HAL_SPI_MspInit+0xe0>)
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c18:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <HAL_SPI_MspInit+0xe0>)
 8002c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1c:	4a10      	ldr	r2, [pc, #64]	; (8002c60 <HAL_SPI_MspInit+0xe0>)
 8002c1e:	f043 0302 	orr.w	r3, r3, #2
 8002c22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c24:	4b0e      	ldr	r3, [pc, #56]	; (8002c60 <HAL_SPI_MspInit+0xe0>)
 8002c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002c30:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c36:	2302      	movs	r3, #2
 8002c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c42:	2305      	movs	r3, #5
 8002c44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c46:	f107 031c 	add.w	r3, r7, #28
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4806      	ldr	r0, [pc, #24]	; (8002c68 <HAL_SPI_MspInit+0xe8>)
 8002c4e:	f007 fa8d 	bl	800a16c <HAL_GPIO_Init>
}
 8002c52:	bf00      	nop
 8002c54:	3730      	adds	r7, #48	; 0x30
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40013000 	.word	0x40013000
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40003800 	.word	0x40003800
 8002c68:	48000400 	.word	0x48000400

08002c6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a23      	ldr	r2, [pc, #140]	; (8002d08 <HAL_TIM_Base_MspInit+0x9c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d10c      	bne.n	8002c98 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c7e:	4b23      	ldr	r3, [pc, #140]	; (8002d0c <HAL_TIM_Base_MspInit+0xa0>)
 8002c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c82:	4a22      	ldr	r2, [pc, #136]	; (8002d0c <HAL_TIM_Base_MspInit+0xa0>)
 8002c84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c88:	6613      	str	r3, [r2, #96]	; 0x60
 8002c8a:	4b20      	ldr	r3, [pc, #128]	; (8002d0c <HAL_TIM_Base_MspInit+0xa0>)
 8002c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002c96:	e032      	b.n	8002cfe <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a1c      	ldr	r2, [pc, #112]	; (8002d10 <HAL_TIM_Base_MspInit+0xa4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d114      	bne.n	8002ccc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002ca2:	4b1a      	ldr	r3, [pc, #104]	; (8002d0c <HAL_TIM_Base_MspInit+0xa0>)
 8002ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca6:	4a19      	ldr	r2, [pc, #100]	; (8002d0c <HAL_TIM_Base_MspInit+0xa0>)
 8002ca8:	f043 0310 	orr.w	r3, r3, #16
 8002cac:	6593      	str	r3, [r2, #88]	; 0x58
 8002cae:	4b17      	ldr	r3, [pc, #92]	; (8002d0c <HAL_TIM_Base_MspInit+0xa0>)
 8002cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb2:	f003 0310 	and.w	r3, r3, #16
 8002cb6:	613b      	str	r3, [r7, #16]
 8002cb8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	2036      	movs	r0, #54	; 0x36
 8002cc0:	f007 f99f 	bl	800a002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002cc4:	2036      	movs	r0, #54	; 0x36
 8002cc6:	f007 f9b8 	bl	800a03a <HAL_NVIC_EnableIRQ>
}
 8002cca:	e018      	b.n	8002cfe <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM7)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a10      	ldr	r2, [pc, #64]	; (8002d14 <HAL_TIM_Base_MspInit+0xa8>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d113      	bne.n	8002cfe <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002cd6:	4b0d      	ldr	r3, [pc, #52]	; (8002d0c <HAL_TIM_Base_MspInit+0xa0>)
 8002cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cda:	4a0c      	ldr	r2, [pc, #48]	; (8002d0c <HAL_TIM_Base_MspInit+0xa0>)
 8002cdc:	f043 0320 	orr.w	r3, r3, #32
 8002ce0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ce2:	4b0a      	ldr	r3, [pc, #40]	; (8002d0c <HAL_TIM_Base_MspInit+0xa0>)
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce6:	f003 0320 	and.w	r3, r3, #32
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002cee:	2200      	movs	r2, #0
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	2037      	movs	r0, #55	; 0x37
 8002cf4:	f007 f985 	bl	800a002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002cf8:	2037      	movs	r0, #55	; 0x37
 8002cfa:	f007 f99e 	bl	800a03a <HAL_NVIC_EnableIRQ>
}
 8002cfe:	bf00      	nop
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40012c00 	.word	0x40012c00
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	40001000 	.word	0x40001000
 8002d14:	40001400 	.word	0x40001400

08002d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d1c:	e7fe      	b.n	8002d1c <NMI_Handler+0x4>

08002d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d22:	e7fe      	b.n	8002d22 <HardFault_Handler+0x4>

08002d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d28:	e7fe      	b.n	8002d28 <MemManage_Handler+0x4>

08002d2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d2e:	e7fe      	b.n	8002d2e <BusFault_Handler+0x4>

08002d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d34:	e7fe      	b.n	8002d34 <UsageFault_Handler+0x4>

08002d36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d36:	b480      	push	{r7}
 8002d38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d48:	bf00      	nop
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d52:	b480      	push	{r7}
 8002d54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d56:	bf00      	nop
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d64:	f007 f82e 	bl	8009dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d68:	bf00      	nop
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d70:	4802      	ldr	r0, [pc, #8]	; (8002d7c <USART1_IRQHandler+0x10>)
 8002d72:	f00a fb69 	bl	800d448 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d76:	bf00      	nop
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20000310 	.word	0x20000310

08002d80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002d84:	4802      	ldr	r0, [pc, #8]	; (8002d90 <TIM6_DAC_IRQHandler+0x10>)
 8002d86:	f009 febb 	bl	800cb00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	2000052c 	.word	0x2000052c

08002d94 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002d98:	4802      	ldr	r0, [pc, #8]	; (8002da4 <TIM7_IRQHandler+0x10>)
 8002d9a:	f009 feb1 	bl	800cb00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	20000578 	.word	0x20000578

08002da8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002dac:	4802      	ldr	r0, [pc, #8]	; (8002db8 <LPUART1_IRQHandler+0x10>)
 8002dae:	f00a fb4b 	bl	800d448 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002db2:	bf00      	nop
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	2000028c 	.word	0x2000028c

08002dbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dc4:	4a14      	ldr	r2, [pc, #80]	; (8002e18 <_sbrk+0x5c>)
 8002dc6:	4b15      	ldr	r3, [pc, #84]	; (8002e1c <_sbrk+0x60>)
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dd0:	4b13      	ldr	r3, [pc, #76]	; (8002e20 <_sbrk+0x64>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d102      	bne.n	8002dde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dd8:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <_sbrk+0x64>)
 8002dda:	4a12      	ldr	r2, [pc, #72]	; (8002e24 <_sbrk+0x68>)
 8002ddc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dde:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <_sbrk+0x64>)
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4413      	add	r3, r2
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d207      	bcs.n	8002dfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dec:	f00b fdc6 	bl	800e97c <__errno>
 8002df0:	4603      	mov	r3, r0
 8002df2:	220c      	movs	r2, #12
 8002df4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002df6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dfa:	e009      	b.n	8002e10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dfc:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <_sbrk+0x64>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e02:	4b07      	ldr	r3, [pc, #28]	; (8002e20 <_sbrk+0x64>)
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4413      	add	r3, r2
 8002e0a:	4a05      	ldr	r2, [pc, #20]	; (8002e20 <_sbrk+0x64>)
 8002e0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	20010000 	.word	0x20010000
 8002e1c:	00000400 	.word	0x00000400
 8002e20:	200005cc 	.word	0x200005cc
 8002e24:	20000858 	.word	0x20000858

08002e28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002e2c:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <SystemInit+0x20>)
 8002e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e32:	4a05      	ldr	r2, [pc, #20]	; (8002e48 <SystemInit+0x20>)
 8002e34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002e3c:	bf00      	nop
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	e000ed00 	.word	0xe000ed00

08002e4c <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af02      	add	r7, sp, #8
 8002e52:	4603      	mov	r3, r0
 8002e54:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8002e56:	f107 020f 	add.w	r2, r7, #15
 8002e5a:	1df9      	adds	r1, r7, #7
 8002e5c:	2364      	movs	r3, #100	; 0x64
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	2301      	movs	r3, #1
 8002e62:	4804      	ldr	r0, [pc, #16]	; (8002e74 <W25qxx_Spi+0x28>)
 8002e64:	f009 f985 	bl	800c172 <HAL_SPI_TransmitReceive>
	return ret;
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	20000418 	.word	0x20000418

08002e78 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	2300      	movs	r3, #0
 8002e84:	60bb      	str	r3, [r7, #8]
 8002e86:	2300      	movs	r3, #0
 8002e88:	607b      	str	r3, [r7, #4]
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002e8e:	2200      	movs	r2, #0
 8002e90:	2101      	movs	r1, #1
 8002e92:	4813      	ldr	r0, [pc, #76]	; (8002ee0 <W25qxx_ReadID+0x68>)
 8002e94:	f007 fafc 	bl	800a490 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8002e98:	209f      	movs	r0, #159	; 0x9f
 8002e9a:	f7ff ffd7 	bl	8002e4c <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002e9e:	20a5      	movs	r0, #165	; 0xa5
 8002ea0:	f7ff ffd4 	bl	8002e4c <W25qxx_Spi>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002ea8:	20a5      	movs	r0, #165	; 0xa5
 8002eaa:	f7ff ffcf 	bl	8002e4c <W25qxx_Spi>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002eb2:	20a5      	movs	r0, #165	; 0xa5
 8002eb4:	f7ff ffca 	bl	8002e4c <W25qxx_Spi>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	4807      	ldr	r0, [pc, #28]	; (8002ee0 <W25qxx_ReadID+0x68>)
 8002ec2:	f007 fae5 	bl	800a490 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	041a      	lsls	r2, r3, #16
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	021b      	lsls	r3, r3, #8
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]
	return Temp;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	48000400 	.word	0x48000400

08002ee4 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8002ee4:	b590      	push	{r4, r7, lr}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002eea:	2200      	movs	r2, #0
 8002eec:	2101      	movs	r1, #1
 8002eee:	4816      	ldr	r0, [pc, #88]	; (8002f48 <W25qxx_ReadUniqID+0x64>)
 8002ef0:	f007 face 	bl	800a490 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8002ef4:	204b      	movs	r0, #75	; 0x4b
 8002ef6:	f7ff ffa9 	bl	8002e4c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8002efa:	2300      	movs	r3, #0
 8002efc:	71fb      	strb	r3, [r7, #7]
 8002efe:	e005      	b.n	8002f0c <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002f00:	20a5      	movs	r0, #165	; 0xa5
 8002f02:	f7ff ffa3 	bl	8002e4c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8002f06:	79fb      	ldrb	r3, [r7, #7]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	71fb      	strb	r3, [r7, #7]
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	2b03      	cmp	r3, #3
 8002f10:	d9f6      	bls.n	8002f00 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8002f12:	2300      	movs	r3, #0
 8002f14:	71bb      	strb	r3, [r7, #6]
 8002f16:	e00b      	b.n	8002f30 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002f18:	79bc      	ldrb	r4, [r7, #6]
 8002f1a:	20a5      	movs	r0, #165	; 0xa5
 8002f1c:	f7ff ff96 	bl	8002e4c <W25qxx_Spi>
 8002f20:	4603      	mov	r3, r0
 8002f22:	461a      	mov	r2, r3
 8002f24:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <W25qxx_ReadUniqID+0x68>)
 8002f26:	4423      	add	r3, r4
 8002f28:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8002f2a:	79bb      	ldrb	r3, [r7, #6]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	71bb      	strb	r3, [r7, #6]
 8002f30:	79bb      	ldrb	r3, [r7, #6]
 8002f32:	2b07      	cmp	r3, #7
 8002f34:	d9f0      	bls.n	8002f18 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002f36:	2201      	movs	r2, #1
 8002f38:	2101      	movs	r1, #1
 8002f3a:	4803      	ldr	r0, [pc, #12]	; (8002f48 <W25qxx_ReadUniqID+0x64>)
 8002f3c:	f007 faa8 	bl	800a490 <HAL_GPIO_WritePin>
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd90      	pop	{r4, r7, pc}
 8002f48:	48000400 	.word	0x48000400
 8002f4c:	200005d0 	.word	0x200005d0

08002f50 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002f54:	2200      	movs	r2, #0
 8002f56:	2101      	movs	r1, #1
 8002f58:	4807      	ldr	r0, [pc, #28]	; (8002f78 <W25qxx_WriteEnable+0x28>)
 8002f5a:	f007 fa99 	bl	800a490 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8002f5e:	2006      	movs	r0, #6
 8002f60:	f7ff ff74 	bl	8002e4c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002f64:	2201      	movs	r2, #1
 8002f66:	2101      	movs	r1, #1
 8002f68:	4803      	ldr	r0, [pc, #12]	; (8002f78 <W25qxx_WriteEnable+0x28>)
 8002f6a:	f007 fa91 	bl	800a490 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8002f6e:	2001      	movs	r0, #1
 8002f70:	f006 ff48 	bl	8009e04 <HAL_Delay>
}
 8002f74:	bf00      	nop
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	48000400 	.word	0x48000400

08002f7c <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	481c      	ldr	r0, [pc, #112]	; (8003000 <W25qxx_ReadStatusRegister+0x84>)
 8002f90:	f007 fa7e 	bl	800a490 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d10c      	bne.n	8002fb4 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8002f9a:	2005      	movs	r0, #5
 8002f9c:	f7ff ff56 	bl	8002e4c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002fa0:	20a5      	movs	r0, #165	; 0xa5
 8002fa2:	f7ff ff53 	bl	8002e4c <W25qxx_Spi>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8002faa:	4a16      	ldr	r2, [pc, #88]	; (8003004 <W25qxx_ReadStatusRegister+0x88>)
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
 8002fae:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8002fb2:	e01b      	b.n	8002fec <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8002fb4:	79fb      	ldrb	r3, [r7, #7]
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d10c      	bne.n	8002fd4 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8002fba:	2035      	movs	r0, #53	; 0x35
 8002fbc:	f7ff ff46 	bl	8002e4c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002fc0:	20a5      	movs	r0, #165	; 0xa5
 8002fc2:	f7ff ff43 	bl	8002e4c <W25qxx_Spi>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8002fca:	4a0e      	ldr	r2, [pc, #56]	; (8003004 <W25qxx_ReadStatusRegister+0x88>)
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
 8002fce:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8002fd2:	e00b      	b.n	8002fec <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8002fd4:	2015      	movs	r0, #21
 8002fd6:	f7ff ff39 	bl	8002e4c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002fda:	20a5      	movs	r0, #165	; 0xa5
 8002fdc:	f7ff ff36 	bl	8002e4c <W25qxx_Spi>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8002fe4:	4a07      	ldr	r2, [pc, #28]	; (8003004 <W25qxx_ReadStatusRegister+0x88>)
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
 8002fe8:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002fec:	2201      	movs	r2, #1
 8002fee:	2101      	movs	r1, #1
 8002ff0:	4803      	ldr	r0, [pc, #12]	; (8003000 <W25qxx_ReadStatusRegister+0x84>)
 8002ff2:	f007 fa4d 	bl	800a490 <HAL_GPIO_WritePin>
	return status;
 8002ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	48000400 	.word	0x48000400
 8003004:	200005d0 	.word	0x200005d0

08003008 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 800300c:	2001      	movs	r0, #1
 800300e:	f006 fef9 	bl	8009e04 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003012:	2200      	movs	r2, #0
 8003014:	2101      	movs	r1, #1
 8003016:	480f      	ldr	r0, [pc, #60]	; (8003054 <W25qxx_WaitForWriteEnd+0x4c>)
 8003018:	f007 fa3a 	bl	800a490 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 800301c:	2005      	movs	r0, #5
 800301e:	f7ff ff15 	bl	8002e4c <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003022:	20a5      	movs	r0, #165	; 0xa5
 8003024:	f7ff ff12 	bl	8002e4c <W25qxx_Spi>
 8003028:	4603      	mov	r3, r0
 800302a:	461a      	mov	r2, r3
 800302c:	4b0a      	ldr	r3, [pc, #40]	; (8003058 <W25qxx_WaitForWriteEnd+0x50>)
 800302e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8003032:	2001      	movs	r0, #1
 8003034:	f006 fee6 	bl	8009e04 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8003038:	4b07      	ldr	r3, [pc, #28]	; (8003058 <W25qxx_WaitForWriteEnd+0x50>)
 800303a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1ed      	bne.n	8003022 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003046:	2201      	movs	r2, #1
 8003048:	2101      	movs	r1, #1
 800304a:	4802      	ldr	r0, [pc, #8]	; (8003054 <W25qxx_WaitForWriteEnd+0x4c>)
 800304c:	f007 fa20 	bl	800a490 <HAL_GPIO_WritePin>
}
 8003050:	bf00      	nop
 8003052:	bd80      	pop	{r7, pc}
 8003054:	48000400 	.word	0x48000400
 8003058:	200005d0 	.word	0x200005d0

0800305c <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8003062:	4b65      	ldr	r3, [pc, #404]	; (80031f8 <W25qxx_Init+0x19c>)
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 800306a:	e002      	b.n	8003072 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 800306c:	2001      	movs	r0, #1
 800306e:	f006 fec9 	bl	8009e04 <HAL_Delay>
	while (HAL_GetTick() < 100)
 8003072:	f006 febb 	bl	8009dec <HAL_GetTick>
 8003076:	4603      	mov	r3, r0
 8003078:	2b63      	cmp	r3, #99	; 0x63
 800307a:	d9f7      	bls.n	800306c <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800307c:	2201      	movs	r2, #1
 800307e:	2101      	movs	r1, #1
 8003080:	485e      	ldr	r0, [pc, #376]	; (80031fc <W25qxx_Init+0x1a0>)
 8003082:	f007 fa05 	bl	800a490 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8003086:	2064      	movs	r0, #100	; 0x64
 8003088:	f006 febc 	bl	8009e04 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 800308c:	f7ff fef4 	bl	8002e78 <W25qxx_ReadID>
 8003090:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	b2db      	uxtb	r3, r3
 8003096:	3b11      	subs	r3, #17
 8003098:	2b0f      	cmp	r3, #15
 800309a:	d86c      	bhi.n	8003176 <W25qxx_Init+0x11a>
 800309c:	a201      	add	r2, pc, #4	; (adr r2, 80030a4 <W25qxx_Init+0x48>)
 800309e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a2:	bf00      	nop
 80030a4:	08003169 	.word	0x08003169
 80030a8:	0800315b 	.word	0x0800315b
 80030ac:	0800314d 	.word	0x0800314d
 80030b0:	0800313f 	.word	0x0800313f
 80030b4:	08003131 	.word	0x08003131
 80030b8:	08003123 	.word	0x08003123
 80030bc:	08003115 	.word	0x08003115
 80030c0:	08003105 	.word	0x08003105
 80030c4:	080030f5 	.word	0x080030f5
 80030c8:	08003177 	.word	0x08003177
 80030cc:	08003177 	.word	0x08003177
 80030d0:	08003177 	.word	0x08003177
 80030d4:	08003177 	.word	0x08003177
 80030d8:	08003177 	.word	0x08003177
 80030dc:	08003177 	.word	0x08003177
 80030e0:	080030e5 	.word	0x080030e5
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 80030e4:	4b44      	ldr	r3, [pc, #272]	; (80031f8 <W25qxx_Init+0x19c>)
 80030e6:	220a      	movs	r2, #10
 80030e8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 80030ea:	4b43      	ldr	r3, [pc, #268]	; (80031f8 <W25qxx_Init+0x19c>)
 80030ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030f0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 80030f2:	e046      	b.n	8003182 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 80030f4:	4b40      	ldr	r3, [pc, #256]	; (80031f8 <W25qxx_Init+0x19c>)
 80030f6:	2209      	movs	r2, #9
 80030f8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 80030fa:	4b3f      	ldr	r3, [pc, #252]	; (80031f8 <W25qxx_Init+0x19c>)
 80030fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003100:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8003102:	e03e      	b.n	8003182 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8003104:	4b3c      	ldr	r3, [pc, #240]	; (80031f8 <W25qxx_Init+0x19c>)
 8003106:	2208      	movs	r2, #8
 8003108:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 800310a:	4b3b      	ldr	r3, [pc, #236]	; (80031f8 <W25qxx_Init+0x19c>)
 800310c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003110:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8003112:	e036      	b.n	8003182 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8003114:	4b38      	ldr	r3, [pc, #224]	; (80031f8 <W25qxx_Init+0x19c>)
 8003116:	2207      	movs	r2, #7
 8003118:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 800311a:	4b37      	ldr	r3, [pc, #220]	; (80031f8 <W25qxx_Init+0x19c>)
 800311c:	2280      	movs	r2, #128	; 0x80
 800311e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8003120:	e02f      	b.n	8003182 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8003122:	4b35      	ldr	r3, [pc, #212]	; (80031f8 <W25qxx_Init+0x19c>)
 8003124:	2206      	movs	r2, #6
 8003126:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8003128:	4b33      	ldr	r3, [pc, #204]	; (80031f8 <W25qxx_Init+0x19c>)
 800312a:	2240      	movs	r2, #64	; 0x40
 800312c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 800312e:	e028      	b.n	8003182 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8003130:	4b31      	ldr	r3, [pc, #196]	; (80031f8 <W25qxx_Init+0x19c>)
 8003132:	2205      	movs	r2, #5
 8003134:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8003136:	4b30      	ldr	r3, [pc, #192]	; (80031f8 <W25qxx_Init+0x19c>)
 8003138:	2220      	movs	r2, #32
 800313a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 800313c:	e021      	b.n	8003182 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 800313e:	4b2e      	ldr	r3, [pc, #184]	; (80031f8 <W25qxx_Init+0x19c>)
 8003140:	2204      	movs	r2, #4
 8003142:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8003144:	4b2c      	ldr	r3, [pc, #176]	; (80031f8 <W25qxx_Init+0x19c>)
 8003146:	2210      	movs	r2, #16
 8003148:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 800314a:	e01a      	b.n	8003182 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 800314c:	4b2a      	ldr	r3, [pc, #168]	; (80031f8 <W25qxx_Init+0x19c>)
 800314e:	2203      	movs	r2, #3
 8003150:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8003152:	4b29      	ldr	r3, [pc, #164]	; (80031f8 <W25qxx_Init+0x19c>)
 8003154:	2208      	movs	r2, #8
 8003156:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8003158:	e013      	b.n	8003182 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 800315a:	4b27      	ldr	r3, [pc, #156]	; (80031f8 <W25qxx_Init+0x19c>)
 800315c:	2202      	movs	r2, #2
 800315e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8003160:	4b25      	ldr	r3, [pc, #148]	; (80031f8 <W25qxx_Init+0x19c>)
 8003162:	2204      	movs	r2, #4
 8003164:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8003166:	e00c      	b.n	8003182 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8003168:	4b23      	ldr	r3, [pc, #140]	; (80031f8 <W25qxx_Init+0x19c>)
 800316a:	2201      	movs	r2, #1
 800316c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 800316e:	4b22      	ldr	r3, [pc, #136]	; (80031f8 <W25qxx_Init+0x19c>)
 8003170:	2202      	movs	r2, #2
 8003172:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8003174:	e005      	b.n	8003182 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8003176:	4b20      	ldr	r3, [pc, #128]	; (80031f8 <W25qxx_Init+0x19c>)
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 800317e:	2300      	movs	r3, #0
 8003180:	e036      	b.n	80031f0 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 8003182:	4b1d      	ldr	r3, [pc, #116]	; (80031f8 <W25qxx_Init+0x19c>)
 8003184:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003188:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800318a:	4b1b      	ldr	r3, [pc, #108]	; (80031f8 <W25qxx_Init+0x19c>)
 800318c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003190:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8003192:	4b19      	ldr	r3, [pc, #100]	; (80031f8 <W25qxx_Init+0x19c>)
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	4a17      	ldr	r2, [pc, #92]	; (80031f8 <W25qxx_Init+0x19c>)
 800319a:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 800319c:	4b16      	ldr	r3, [pc, #88]	; (80031f8 <W25qxx_Init+0x19c>)
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	4a15      	ldr	r2, [pc, #84]	; (80031f8 <W25qxx_Init+0x19c>)
 80031a2:	6912      	ldr	r2, [r2, #16]
 80031a4:	fb02 f303 	mul.w	r3, r2, r3
 80031a8:	4a13      	ldr	r2, [pc, #76]	; (80031f8 <W25qxx_Init+0x19c>)
 80031aa:	8952      	ldrh	r2, [r2, #10]
 80031ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80031b0:	4a11      	ldr	r2, [pc, #68]	; (80031f8 <W25qxx_Init+0x19c>)
 80031b2:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80031b4:	4b10      	ldr	r3, [pc, #64]	; (80031f8 <W25qxx_Init+0x19c>)
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	4a0f      	ldr	r2, [pc, #60]	; (80031f8 <W25qxx_Init+0x19c>)
 80031bc:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80031be:	4b0e      	ldr	r3, [pc, #56]	; (80031f8 <W25qxx_Init+0x19c>)
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	4a0d      	ldr	r2, [pc, #52]	; (80031f8 <W25qxx_Init+0x19c>)
 80031c4:	6912      	ldr	r2, [r2, #16]
 80031c6:	fb02 f303 	mul.w	r3, r2, r3
 80031ca:	0a9b      	lsrs	r3, r3, #10
 80031cc:	4a0a      	ldr	r2, [pc, #40]	; (80031f8 <W25qxx_Init+0x19c>)
 80031ce:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 80031d0:	f7ff fe88 	bl	8002ee4 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80031d4:	2001      	movs	r0, #1
 80031d6:	f7ff fed1 	bl	8002f7c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80031da:	2002      	movs	r0, #2
 80031dc:	f7ff fece 	bl	8002f7c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80031e0:	2003      	movs	r0, #3
 80031e2:	f7ff fecb 	bl	8002f7c <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 80031e6:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <W25qxx_Init+0x19c>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 80031ee:	2301      	movs	r3, #1
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	200005d0 	.word	0x200005d0
 80031fc:	48000400 	.word	0x48000400

08003200 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8003208:	e002      	b.n	8003210 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 800320a:	2001      	movs	r0, #1
 800320c:	f006 fdfa 	bl	8009e04 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8003210:	4b25      	ldr	r3, [pc, #148]	; (80032a8 <W25qxx_EraseSector+0xa8>)
 8003212:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003216:	2b01      	cmp	r3, #1
 8003218:	d0f7      	beq.n	800320a <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 800321a:	4b23      	ldr	r3, [pc, #140]	; (80032a8 <W25qxx_EraseSector+0xa8>)
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 8003222:	f7ff fef1 	bl	8003008 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8003226:	4b20      	ldr	r3, [pc, #128]	; (80032a8 <W25qxx_EraseSector+0xa8>)
 8003228:	691a      	ldr	r2, [r3, #16]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	fb02 f303 	mul.w	r3, r2, r3
 8003230:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8003232:	f7ff fe8d 	bl	8002f50 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003236:	2200      	movs	r2, #0
 8003238:	2101      	movs	r1, #1
 800323a:	481c      	ldr	r0, [pc, #112]	; (80032ac <W25qxx_EraseSector+0xac>)
 800323c:	f007 f928 	bl	800a490 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8003240:	4b19      	ldr	r3, [pc, #100]	; (80032a8 <W25qxx_EraseSector+0xa8>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b08      	cmp	r3, #8
 8003246:	d909      	bls.n	800325c <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 8003248:	2021      	movs	r0, #33	; 0x21
 800324a:	f7ff fdff 	bl	8002e4c <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	0e1b      	lsrs	r3, r3, #24
 8003252:	b2db      	uxtb	r3, r3
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff fdf9 	bl	8002e4c <W25qxx_Spi>
 800325a:	e002      	b.n	8003262 <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 800325c:	2020      	movs	r0, #32
 800325e:	f7ff fdf5 	bl	8002e4c <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	0c1b      	lsrs	r3, r3, #16
 8003266:	b2db      	uxtb	r3, r3
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff fdef 	bl	8002e4c <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	0a1b      	lsrs	r3, r3, #8
 8003272:	b2db      	uxtb	r3, r3
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff fde9 	bl	8002e4c <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	b2db      	uxtb	r3, r3
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff fde4 	bl	8002e4c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003284:	2201      	movs	r2, #1
 8003286:	2101      	movs	r1, #1
 8003288:	4808      	ldr	r0, [pc, #32]	; (80032ac <W25qxx_EraseSector+0xac>)
 800328a:	f007 f901 	bl	800a490 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800328e:	f7ff febb 	bl	8003008 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 8003292:	2001      	movs	r0, #1
 8003294:	f006 fdb6 	bl	8009e04 <HAL_Delay>
	w25qxx.Lock = 0;
 8003298:	4b03      	ldr	r3, [pc, #12]	; (80032a8 <W25qxx_EraseSector+0xa8>)
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80032a0:	bf00      	nop
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	200005d0 	.word	0x200005d0
 80032ac:	48000400 	.word	0x48000400

080032b0 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 80032b8:	4b07      	ldr	r3, [pc, #28]	; (80032d8 <W25qxx_SectorToPage+0x28>)
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	fb02 f303 	mul.w	r3, r2, r3
 80032c2:	4a05      	ldr	r2, [pc, #20]	; (80032d8 <W25qxx_SectorToPage+0x28>)
 80032c4:	8952      	ldrh	r2, [r2, #10]
 80032c6:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	200005d0 	.word	0x200005d0

080032dc <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
 80032e8:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80032ea:	e002      	b.n	80032f2 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 80032ec:	2001      	movs	r0, #1
 80032ee:	f006 fd89 	bl	8009e04 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80032f2:	4b39      	ldr	r3, [pc, #228]	; (80033d8 <W25qxx_WritePage+0xfc>)
 80032f4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d0f7      	beq.n	80032ec <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 80032fc:	4b36      	ldr	r3, [pc, #216]	; (80033d8 <W25qxx_WritePage+0xfc>)
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4413      	add	r3, r2
 800330a:	4a33      	ldr	r2, [pc, #204]	; (80033d8 <W25qxx_WritePage+0xfc>)
 800330c:	8952      	ldrh	r2, [r2, #10]
 800330e:	4293      	cmp	r3, r2
 8003310:	d802      	bhi.n	8003318 <W25qxx_WritePage+0x3c>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d105      	bne.n	8003324 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003318:	4b2f      	ldr	r3, [pc, #188]	; (80033d8 <W25qxx_WritePage+0xfc>)
 800331a:	895b      	ldrh	r3, [r3, #10]
 800331c:	461a      	mov	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	4413      	add	r3, r2
 800332a:	4a2b      	ldr	r2, [pc, #172]	; (80033d8 <W25qxx_WritePage+0xfc>)
 800332c:	8952      	ldrh	r2, [r2, #10]
 800332e:	4293      	cmp	r3, r2
 8003330:	d905      	bls.n	800333e <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003332:	4b29      	ldr	r3, [pc, #164]	; (80033d8 <W25qxx_WritePage+0xfc>)
 8003334:	895b      	ldrh	r3, [r3, #10]
 8003336:	461a      	mov	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 800333e:	f7ff fe63 	bl	8003008 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8003342:	f7ff fe05 	bl	8002f50 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003346:	2200      	movs	r2, #0
 8003348:	2101      	movs	r1, #1
 800334a:	4824      	ldr	r0, [pc, #144]	; (80033dc <W25qxx_WritePage+0x100>)
 800334c:	f007 f8a0 	bl	800a490 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8003350:	4b21      	ldr	r3, [pc, #132]	; (80033d8 <W25qxx_WritePage+0xfc>)
 8003352:	895b      	ldrh	r3, [r3, #10]
 8003354:	461a      	mov	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	fb02 f303 	mul.w	r3, r2, r3
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	4413      	add	r3, r2
 8003360:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8003362:	4b1d      	ldr	r3, [pc, #116]	; (80033d8 <W25qxx_WritePage+0xfc>)
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b08      	cmp	r3, #8
 8003368:	d909      	bls.n	800337e <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 800336a:	2012      	movs	r0, #18
 800336c:	f7ff fd6e 	bl	8002e4c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	0e1b      	lsrs	r3, r3, #24
 8003374:	b2db      	uxtb	r3, r3
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff fd68 	bl	8002e4c <W25qxx_Spi>
 800337c:	e002      	b.n	8003384 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 800337e:	2002      	movs	r0, #2
 8003380:	f7ff fd64 	bl	8002e4c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	0c1b      	lsrs	r3, r3, #16
 8003388:	b2db      	uxtb	r3, r3
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff fd5e 	bl	8002e4c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	0a1b      	lsrs	r3, r3, #8
 8003394:	b2db      	uxtb	r3, r3
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff fd58 	bl	8002e4c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff fd53 	bl	8002e4c <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	2364      	movs	r3, #100	; 0x64
 80033ac:	68f9      	ldr	r1, [r7, #12]
 80033ae:	480c      	ldr	r0, [pc, #48]	; (80033e0 <W25qxx_WritePage+0x104>)
 80033b0:	f008 fc41 	bl	800bc36 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80033b4:	2201      	movs	r2, #1
 80033b6:	2101      	movs	r1, #1
 80033b8:	4808      	ldr	r0, [pc, #32]	; (80033dc <W25qxx_WritePage+0x100>)
 80033ba:	f007 f869 	bl	800a490 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80033be:	f7ff fe23 	bl	8003008 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 80033c2:	2001      	movs	r0, #1
 80033c4:	f006 fd1e 	bl	8009e04 <HAL_Delay>
	w25qxx.Lock = 0;
 80033c8:	4b03      	ldr	r3, [pc, #12]	; (80033d8 <W25qxx_WritePage+0xfc>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80033d0:	bf00      	nop
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	200005d0 	.word	0x200005d0
 80033dc:	48000400 	.word	0x48000400
 80033e0:	20000418 	.word	0x20000418

080033e4 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b088      	sub	sp, #32
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
 80033f0:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 80033f2:	4b2c      	ldr	r3, [pc, #176]	; (80034a4 <W25qxx_WriteSector+0xc0>)
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d802      	bhi.n	8003402 <W25qxx_WriteSector+0x1e>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d102      	bne.n	8003408 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8003402:	4b28      	ldr	r3, [pc, #160]	; (80034a4 <W25qxx_WriteSector+0xc0>)
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8003408:	4b26      	ldr	r3, [pc, #152]	; (80034a4 <W25qxx_WriteSector+0xc0>)
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	429a      	cmp	r2, r3
 8003410:	d243      	bcs.n	800349a <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	441a      	add	r2, r3
 8003418:	4b22      	ldr	r3, [pc, #136]	; (80034a4 <W25qxx_WriteSector+0xc0>)
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	429a      	cmp	r2, r3
 800341e:	d905      	bls.n	800342c <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8003420:	4b20      	ldr	r3, [pc, #128]	; (80034a4 <W25qxx_WriteSector+0xc0>)
 8003422:	691a      	ldr	r2, [r3, #16]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	61bb      	str	r3, [r7, #24]
 800342a:	e001      	b.n	8003430 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8003430:	68b8      	ldr	r0, [r7, #8]
 8003432:	f7ff ff3d 	bl	80032b0 <W25qxx_SectorToPage>
 8003436:	4602      	mov	r2, r0
 8003438:	4b1a      	ldr	r3, [pc, #104]	; (80034a4 <W25qxx_WriteSector+0xc0>)
 800343a:	895b      	ldrh	r3, [r3, #10]
 800343c:	4619      	mov	r1, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	fbb3 f3f1 	udiv	r3, r3, r1
 8003444:	4413      	add	r3, r2
 8003446:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8003448:	4b16      	ldr	r3, [pc, #88]	; (80034a4 <W25qxx_WriteSector+0xc0>)
 800344a:	895b      	ldrh	r3, [r3, #10]
 800344c:	461a      	mov	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	fbb3 f1f2 	udiv	r1, r3, r2
 8003454:	fb01 f202 	mul.w	r2, r1, r2
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	69f9      	ldr	r1, [r7, #28]
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f7ff ff3a 	bl	80032dc <W25qxx_WritePage>
		StartPage++;
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	3301      	adds	r3, #1
 800346c:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 800346e:	4b0d      	ldr	r3, [pc, #52]	; (80034a4 <W25qxx_WriteSector+0xc0>)
 8003470:	895b      	ldrh	r3, [r3, #10]
 8003472:	461a      	mov	r2, r3
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	1a9a      	subs	r2, r3, r2
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	4413      	add	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800347e:	4b09      	ldr	r3, [pc, #36]	; (80034a4 <W25qxx_WriteSector+0xc0>)
 8003480:	895b      	ldrh	r3, [r3, #10]
 8003482:	461a      	mov	r2, r3
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	4413      	add	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	2b00      	cmp	r3, #0
 8003496:	dce1      	bgt.n	800345c <W25qxx_WriteSector+0x78>
 8003498:	e000      	b.n	800349c <W25qxx_WriteSector+0xb8>
		return;
 800349a:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 800349c:	3720      	adds	r7, #32
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	200005d0 	.word	0x200005d0

080034a8 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
 80034b4:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80034b6:	e002      	b.n	80034be <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 80034b8:	2001      	movs	r0, #1
 80034ba:	f006 fca3 	bl	8009e04 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80034be:	4b36      	ldr	r3, [pc, #216]	; (8003598 <W25qxx_ReadPage+0xf0>)
 80034c0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d0f7      	beq.n	80034b8 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 80034c8:	4b33      	ldr	r3, [pc, #204]	; (8003598 <W25qxx_ReadPage+0xf0>)
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 80034d0:	4b31      	ldr	r3, [pc, #196]	; (8003598 <W25qxx_ReadPage+0xf0>)
 80034d2:	895b      	ldrh	r3, [r3, #10]
 80034d4:	461a      	mov	r2, r3
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	4293      	cmp	r3, r2
 80034da:	d802      	bhi.n	80034e2 <W25qxx_ReadPage+0x3a>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d102      	bne.n	80034e8 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 80034e2:	4b2d      	ldr	r3, [pc, #180]	; (8003598 <W25qxx_ReadPage+0xf0>)
 80034e4:	895b      	ldrh	r3, [r3, #10]
 80034e6:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	4413      	add	r3, r2
 80034ee:	4a2a      	ldr	r2, [pc, #168]	; (8003598 <W25qxx_ReadPage+0xf0>)
 80034f0:	8952      	ldrh	r2, [r2, #10]
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d905      	bls.n	8003502 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80034f6:	4b28      	ldr	r3, [pc, #160]	; (8003598 <W25qxx_ReadPage+0xf0>)
 80034f8:	895b      	ldrh	r3, [r3, #10]
 80034fa:	461a      	mov	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8003502:	4b25      	ldr	r3, [pc, #148]	; (8003598 <W25qxx_ReadPage+0xf0>)
 8003504:	895b      	ldrh	r3, [r3, #10]
 8003506:	461a      	mov	r2, r3
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	fb02 f303 	mul.w	r3, r2, r3
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	4413      	add	r3, r2
 8003512:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003514:	2200      	movs	r2, #0
 8003516:	2101      	movs	r1, #1
 8003518:	4820      	ldr	r0, [pc, #128]	; (800359c <W25qxx_ReadPage+0xf4>)
 800351a:	f006 ffb9 	bl	800a490 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800351e:	4b1e      	ldr	r3, [pc, #120]	; (8003598 <W25qxx_ReadPage+0xf0>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b08      	cmp	r3, #8
 8003524:	d909      	bls.n	800353a <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 8003526:	200c      	movs	r0, #12
 8003528:	f7ff fc90 	bl	8002e4c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	0e1b      	lsrs	r3, r3, #24
 8003530:	b2db      	uxtb	r3, r3
 8003532:	4618      	mov	r0, r3
 8003534:	f7ff fc8a 	bl	8002e4c <W25qxx_Spi>
 8003538:	e002      	b.n	8003540 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 800353a:	200b      	movs	r0, #11
 800353c:	f7ff fc86 	bl	8002e4c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	0c1b      	lsrs	r3, r3, #16
 8003544:	b2db      	uxtb	r3, r3
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff fc80 	bl	8002e4c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	0a1b      	lsrs	r3, r3, #8
 8003550:	b2db      	uxtb	r3, r3
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff fc7a 	bl	8002e4c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	b2db      	uxtb	r3, r3
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff fc75 	bl	8002e4c <W25qxx_Spi>
	W25qxx_Spi(0);
 8003562:	2000      	movs	r0, #0
 8003564:	f7ff fc72 	bl	8002e4c <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	b29a      	uxth	r2, r3
 800356c:	2364      	movs	r3, #100	; 0x64
 800356e:	68f9      	ldr	r1, [r7, #12]
 8003570:	480b      	ldr	r0, [pc, #44]	; (80035a0 <W25qxx_ReadPage+0xf8>)
 8003572:	f008 fcce 	bl	800bf12 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003576:	2201      	movs	r2, #1
 8003578:	2101      	movs	r1, #1
 800357a:	4808      	ldr	r0, [pc, #32]	; (800359c <W25qxx_ReadPage+0xf4>)
 800357c:	f006 ff88 	bl	800a490 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8003580:	2001      	movs	r0, #1
 8003582:	f006 fc3f 	bl	8009e04 <HAL_Delay>
	w25qxx.Lock = 0;
 8003586:	4b04      	ldr	r3, [pc, #16]	; (8003598 <W25qxx_ReadPage+0xf0>)
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800358e:	bf00      	nop
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	200005d0 	.word	0x200005d0
 800359c:	48000400 	.word	0x48000400
 80035a0:	20000418 	.word	0x20000418

080035a4 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b088      	sub	sp, #32
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
 80035b0:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 80035b2:	4b2c      	ldr	r3, [pc, #176]	; (8003664 <W25qxx_ReadSector+0xc0>)
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d802      	bhi.n	80035c2 <W25qxx_ReadSector+0x1e>
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d102      	bne.n	80035c8 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 80035c2:	4b28      	ldr	r3, [pc, #160]	; (8003664 <W25qxx_ReadSector+0xc0>)
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80035c8:	4b26      	ldr	r3, [pc, #152]	; (8003664 <W25qxx_ReadSector+0xc0>)
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d243      	bcs.n	800365a <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	441a      	add	r2, r3
 80035d8:	4b22      	ldr	r3, [pc, #136]	; (8003664 <W25qxx_ReadSector+0xc0>)
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d905      	bls.n	80035ec <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 80035e0:	4b20      	ldr	r3, [pc, #128]	; (8003664 <W25qxx_ReadSector+0xc0>)
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	61bb      	str	r3, [r7, #24]
 80035ea:	e001      	b.n	80035f0 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80035f0:	68b8      	ldr	r0, [r7, #8]
 80035f2:	f7ff fe5d 	bl	80032b0 <W25qxx_SectorToPage>
 80035f6:	4602      	mov	r2, r0
 80035f8:	4b1a      	ldr	r3, [pc, #104]	; (8003664 <W25qxx_ReadSector+0xc0>)
 80035fa:	895b      	ldrh	r3, [r3, #10]
 80035fc:	4619      	mov	r1, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	fbb3 f3f1 	udiv	r3, r3, r1
 8003604:	4413      	add	r3, r2
 8003606:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8003608:	4b16      	ldr	r3, [pc, #88]	; (8003664 <W25qxx_ReadSector+0xc0>)
 800360a:	895b      	ldrh	r3, [r3, #10]
 800360c:	461a      	mov	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	fbb3 f1f2 	udiv	r1, r3, r2
 8003614:	fb01 f202 	mul.w	r2, r1, r2
 8003618:	1a9b      	subs	r3, r3, r2
 800361a:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	69f9      	ldr	r1, [r7, #28]
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f7ff ff40 	bl	80034a8 <W25qxx_ReadPage>
		StartPage++;
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	3301      	adds	r3, #1
 800362c:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 800362e:	4b0d      	ldr	r3, [pc, #52]	; (8003664 <W25qxx_ReadSector+0xc0>)
 8003630:	895b      	ldrh	r3, [r3, #10]
 8003632:	461a      	mov	r2, r3
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	1a9a      	subs	r2, r3, r2
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	4413      	add	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800363e:	4b09      	ldr	r3, [pc, #36]	; (8003664 <W25qxx_ReadSector+0xc0>)
 8003640:	895b      	ldrh	r3, [r3, #10]
 8003642:	461a      	mov	r2, r3
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4413      	add	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800364e:	2300      	movs	r3, #0
 8003650:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	2b00      	cmp	r3, #0
 8003656:	dce1      	bgt.n	800361c <W25qxx_ReadSector+0x78>
 8003658:	e000      	b.n	800365c <W25qxx_ReadSector+0xb8>
		return;
 800365a:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 800365c:	3720      	adds	r7, #32
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	200005d0 	.word	0x200005d0

08003668 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003668:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800366c:	f7ff fbdc 	bl	8002e28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003670:	480c      	ldr	r0, [pc, #48]	; (80036a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003672:	490d      	ldr	r1, [pc, #52]	; (80036a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003674:	4a0d      	ldr	r2, [pc, #52]	; (80036ac <LoopForever+0xe>)
  movs r3, #0
 8003676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003678:	e002      	b.n	8003680 <LoopCopyDataInit>

0800367a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800367a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800367c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800367e:	3304      	adds	r3, #4

08003680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003684:	d3f9      	bcc.n	800367a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003686:	4a0a      	ldr	r2, [pc, #40]	; (80036b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003688:	4c0a      	ldr	r4, [pc, #40]	; (80036b4 <LoopForever+0x16>)
  movs r3, #0
 800368a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800368c:	e001      	b.n	8003692 <LoopFillZerobss>

0800368e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800368e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003690:	3204      	adds	r2, #4

08003692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003694:	d3fb      	bcc.n	800368e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003696:	f00b f977 	bl	800e988 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800369a:	f7fe fd4b 	bl	8002134 <main>

0800369e <LoopForever>:

LoopForever:
    b LoopForever
 800369e:	e7fe      	b.n	800369e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80036a0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80036a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036a8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80036ac:	0800f828 	.word	0x0800f828
  ldr r2, =_sbss
 80036b0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80036b4:	20000854 	.word	0x20000854

080036b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80036b8:	e7fe      	b.n	80036b8 <ADC1_IRQHandler>
	...

080036bc <_ZN6commonC1Ev>:
 *      Author: MKS
 */

#include "common.h"

common::common() {
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	4a04      	ldr	r2, [pc, #16]	; (80036d8 <_ZN6commonC1Ev+0x1c>)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4618      	mov	r0, r3
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	0800f704 	.word	0x0800f704

080036dc <_ZN6commonD1Ev>:

common::~common() {
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	4a04      	ldr	r2, [pc, #16]	; (80036f8 <_ZN6commonD1Ev+0x1c>)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4618      	mov	r0, r3
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	0800f704 	.word	0x0800f704

080036fc <_ZN6commonD0Ev>:
common::~common() {
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
}
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7ff ffe9 	bl	80036dc <_ZN6commonD1Ev>
 800370a:	2104      	movs	r1, #4
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f00b f930 	bl	800e972 <_ZdlPvj>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4618      	mov	r0, r3
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <_ZN14DisplayRoutineC1Ev>:
extern uint16_t MAC_Gen_Prod_Input1_Production,Production_Zeit;
extern uint16_t MAC_Gen_Rej_Input_Production,Rejection_Zeit;
extern uint16_t Manual_RejectionCount;
extern uint16_t SectorPos;

DisplayRoutine::DisplayRoutine() {
 800371c:	b5b0      	push	{r4, r5, r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	4a39      	ldr	r2, [pc, #228]	; (800380c <_ZN14DisplayRoutineC1Ev+0xf0>)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	3304      	adds	r3, #4
 800372e:	4618      	mov	r0, r3
 8003730:	f000 fa02 	bl	8003b38 <_ZN4GLCDC1Ev>
 8003734:	687d      	ldr	r5, [r7, #4]
 8003736:	4b36      	ldr	r3, [pc, #216]	; (8003810 <_ZN14DisplayRoutineC1Ev+0xf4>)
 8003738:	f605 2408 	addw	r4, r5, #2568	; 0xa08
 800373c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800373e:	c407      	stmia	r4!, {r0, r1, r2}
 8003740:	7023      	strb	r3, [r4, #0]
 8003742:	f605 2315 	addw	r3, r5, #2581	; 0xa15
 8003746:	2200      	movs	r2, #0
 8003748:	801a      	strh	r2, [r3, #0]
 800374a:	687c      	ldr	r4, [r7, #4]
 800374c:	4b31      	ldr	r3, [pc, #196]	; (8003814 <_ZN14DisplayRoutineC1Ev+0xf8>)
 800374e:	f604 2217 	addw	r2, r4, #2583	; 0xa17
 8003752:	cb03      	ldmia	r3!, {r0, r1}
 8003754:	6010      	str	r0, [r2, #0]
 8003756:	6051      	str	r1, [r2, #4]
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	7213      	strb	r3, [r2, #8]
 800375c:	f504 6322 	add.w	r3, r4, #2592	; 0xa20
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	711a      	strb	r2, [r3, #4]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a2b      	ldr	r2, [pc, #172]	; (8003818 <_ZN14DisplayRoutineC1Ev+0xfc>)
 800376a:	f603 2325 	addw	r3, r3, #2597	; 0xa25
 800376e:	8812      	ldrh	r2, [r2, #0]
 8003770:	801a      	strh	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a29      	ldr	r2, [pc, #164]	; (800381c <_ZN14DisplayRoutineC1Ev+0x100>)
 8003776:	f603 2327 	addw	r3, r3, #2599	; 0xa27
 800377a:	6810      	ldr	r0, [r2, #0]
 800377c:	6018      	str	r0, [r3, #0]
 800377e:	8891      	ldrh	r1, [r2, #4]
 8003780:	7992      	ldrb	r2, [r2, #6]
 8003782:	8099      	strh	r1, [r3, #4]
 8003784:	719a      	strb	r2, [r3, #6]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	222f      	movs	r2, #47	; 0x2f
 800378a:	f8a3 2a2e 	strh.w	r2, [r3, #2606]	; 0xa2e
 800378e:	687c      	ldr	r4, [r7, #4]
 8003790:	4a23      	ldr	r2, [pc, #140]	; (8003820 <_ZN14DisplayRoutineC1Ev+0x104>)
 8003792:	f504 6323 	add.w	r3, r4, #2608	; 0xa30
 8003796:	ca07      	ldmia	r2, {r0, r1, r2}
 8003798:	c303      	stmia	r3!, {r0, r1}
 800379a:	701a      	strb	r2, [r3, #0]
 800379c:	2300      	movs	r3, #0
 800379e:	f884 3a39 	strb.w	r3, [r4, #2617]	; 0xa39
 80037a2:	687c      	ldr	r4, [r7, #4]
 80037a4:	4b1f      	ldr	r3, [pc, #124]	; (8003824 <_ZN14DisplayRoutineC1Ev+0x108>)
 80037a6:	f604 223a 	addw	r2, r4, #2618	; 0xa3a
 80037aa:	cb03      	ldmia	r3!, {r0, r1}
 80037ac:	6010      	str	r0, [r2, #0]
 80037ae:	6051      	str	r1, [r2, #4]
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	7213      	strb	r3, [r2, #8]
 80037b4:	2300      	movs	r3, #0
 80037b6:	f884 3a43 	strb.w	r3, [r4, #2627]	; 0xa43
 80037ba:	687c      	ldr	r4, [r7, #4]
 80037bc:	4a1a      	ldr	r2, [pc, #104]	; (8003828 <_ZN14DisplayRoutineC1Ev+0x10c>)
 80037be:	f604 2344 	addw	r3, r4, #2628	; 0xa44
 80037c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80037c4:	c303      	stmia	r3!, {r0, r1}
 80037c6:	701a      	strb	r2, [r3, #0]
 80037c8:	f604 234d 	addw	r3, r4, #2637	; 0xa4d
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	687c      	ldr	r4, [r7, #4]
 80037d2:	4b16      	ldr	r3, [pc, #88]	; (800382c <_ZN14DisplayRoutineC1Ev+0x110>)
 80037d4:	f604 2251 	addw	r2, r4, #2641	; 0xa51
 80037d8:	cb03      	ldmia	r3!, {r0, r1}
 80037da:	6010      	str	r0, [r2, #0]
 80037dc:	6051      	str	r1, [r2, #4]
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	7213      	strb	r3, [r2, #8]
 80037e2:	f604 235a 	addw	r3, r4, #2650	; 0xa5a
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	687c      	ldr	r4, [r7, #4]
 80037ec:	4b10      	ldr	r3, [pc, #64]	; (8003830 <_ZN14DisplayRoutineC1Ev+0x114>)
 80037ee:	f604 225e 	addw	r2, r4, #2654	; 0xa5e
 80037f2:	cb03      	ldmia	r3!, {r0, r1}
 80037f4:	6010      	str	r0, [r2, #0]
 80037f6:	6051      	str	r1, [r2, #4]
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	8113      	strh	r3, [r2, #8]
 80037fc:	2300      	movs	r3, #0
 80037fe:	f8a4 3a68 	strh.w	r3, [r4, #2664]	; 0xa68
	// TODO Auto-generated constructor stub

}
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bdb0      	pop	{r4, r5, r7, pc}
 800380c:	0800f714 	.word	0x0800f714
 8003810:	0800f2e4 	.word	0x0800f2e4
 8003814:	0800f2f4 	.word	0x0800f2f4
 8003818:	0800f304 	.word	0x0800f304
 800381c:	0800f308 	.word	0x0800f308
 8003820:	0800f310 	.word	0x0800f310
 8003824:	0800f31c 	.word	0x0800f31c
 8003828:	0800f328 	.word	0x0800f328
 800382c:	0800f338 	.word	0x0800f338
 8003830:	0800f348 	.word	0x0800f348

08003834 <_ZN14DisplayRoutineD1Ev>:

DisplayRoutine::~DisplayRoutine() {
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	4a06      	ldr	r2, [pc, #24]	; (8003858 <_ZN14DisplayRoutineD1Ev+0x24>)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	3304      	adds	r3, #4
 8003846:	4618      	mov	r0, r3
 8003848:	f004 f8f2 	bl	8007a30 <_ZN4GLCDD1Ev>
	// TODO Auto-generated destructor stub
}
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4618      	mov	r0, r3
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	0800f714 	.word	0x0800f714

0800385c <_ZN14DisplayRoutineD0Ev>:
DisplayRoutine::~DisplayRoutine() {
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
}
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f7ff ffe5 	bl	8003834 <_ZN14DisplayRoutineD1Ev>
 800386a:	f44f 6127 	mov.w	r1, #2672	; 0xa70
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f00b f87f 	bl	800e972 <_ZdlPvj>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4618      	mov	r0, r3
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
	...

08003880 <_ZN14DisplayRoutine3runEv>:

void DisplayRoutine::run()
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
	//m_gLCDDrive.m_clrlcd();/*  Try in local if not need comment out*/
	m_gLCDDrive.m_lcdputs1(0,1,Lpdc);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	1d18      	adds	r0, r3, #4
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 8003892:	2201      	movs	r2, #1
 8003894:	2100      	movs	r1, #0
 8003896:	f004 fb8b 	bl	8007fb0 <_ZN4GLCD10m_lcdputs1EhhPh>
//	value2Digit(date_Rtc,2,65);
//	m_gLCDDrive.m_lcdputs1(81,2,backslash);
//	value2Digit(month_Rtc,2,86);
//	m_gLCDDrive.m_lcdputs1(103,2,backslash);
//	value2Digit(year_Rtc,2,110);
	m_gLCDDrive.m_lcdputs1(0,2,Prod);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	1d18      	adds	r0, r3, #4
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f603 2317 	addw	r3, r3, #2583	; 0xa17
 80038a4:	2202      	movs	r2, #2
 80038a6:	2100      	movs	r1, #0
 80038a8:	f004 fb82 	bl	8007fb0 <_ZN4GLCD10m_lcdputs1EhhPh>
	value4Digit(MAC_Gen_Prod_Input1_Production,2,66);
 80038ac:	4b48      	ldr	r3, [pc, #288]	; (80039d0 <_ZN14DisplayRoutine3runEv+0x150>)
 80038ae:	8819      	ldrh	r1, [r3, #0]
 80038b0:	2342      	movs	r3, #66	; 0x42
 80038b2:	2202      	movs	r2, #2
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f893 	bl	80039e0 <_ZN14DisplayRoutine11value4DigitEthh>
	m_gLCDDrive.m_lcdputs1(98,2,space);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	1d18      	adds	r0, r3, #4
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f603 2327 	addw	r3, r3, #2599	; 0xa27
 80038c4:	2202      	movs	r2, #2
 80038c6:	2162      	movs	r1, #98	; 0x62
 80038c8:	f004 fb72 	bl	8007fb0 <_ZN4GLCD10m_lcdputs1EhhPh>

	m_gLCDDrive.m_lcdputs1(0,3,production);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	1d18      	adds	r0, r3, #4
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 80038d6:	2203      	movs	r2, #3
 80038d8:	2100      	movs	r1, #0
 80038da:	f004 fb69 	bl	8007fb0 <_ZN4GLCD10m_lcdputs1EhhPh>
	value4Digit(MAC_Gen_Prod_Input1_Production,3,66);
 80038de:	4b3c      	ldr	r3, [pc, #240]	; (80039d0 <_ZN14DisplayRoutine3runEv+0x150>)
 80038e0:	8819      	ldrh	r1, [r3, #0]
 80038e2:	2342      	movs	r3, #66	; 0x42
 80038e4:	2203      	movs	r2, #3
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f87a 	bl	80039e0 <_ZN14DisplayRoutine11value4DigitEthh>
	m_gLCDDrive.m_lcdputs1(98,3,space);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	1d18      	adds	r0, r3, #4
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f603 2327 	addw	r3, r3, #2599	; 0xa27
 80038f6:	2203      	movs	r2, #3
 80038f8:	2162      	movs	r1, #98	; 0x62
 80038fa:	f004 fb59 	bl	8007fb0 <_ZN4GLCD10m_lcdputs1EhhPh>

	m_gLCDDrive.m_lcdputs1(0,4,rejection);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	1d18      	adds	r0, r3, #4
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f603 233a 	addw	r3, r3, #2618	; 0xa3a
 8003908:	2204      	movs	r2, #4
 800390a:	2100      	movs	r1, #0
 800390c:	f004 fb50 	bl	8007fb0 <_ZN4GLCD10m_lcdputs1EhhPh>
	value4Digit(MAC_Gen_Rej_Input_Production,4,66);
 8003910:	4b30      	ldr	r3, [pc, #192]	; (80039d4 <_ZN14DisplayRoutine3runEv+0x154>)
 8003912:	8819      	ldrh	r1, [r3, #0]
 8003914:	2342      	movs	r3, #66	; 0x42
 8003916:	2204      	movs	r2, #4
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f861 	bl	80039e0 <_ZN14DisplayRoutine11value4DigitEthh>
	m_gLCDDrive.m_lcdputs1(98,4,space);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	1d18      	adds	r0, r3, #4
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f603 2327 	addw	r3, r3, #2599	; 0xa27
 8003928:	2204      	movs	r2, #4
 800392a:	2162      	movs	r1, #98	; 0x62
 800392c:	f004 fb40 	bl	8007fb0 <_ZN4GLCD10m_lcdputs1EhhPh>

	m_gLCDDrive.m_lcdputs1(0,5,Mrejection);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	1d18      	adds	r0, r3, #4
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f603 2344 	addw	r3, r3, #2628	; 0xa44
 800393a:	2205      	movs	r2, #5
 800393c:	2100      	movs	r1, #0
 800393e:	f004 fb37 	bl	8007fb0 <_ZN4GLCD10m_lcdputs1EhhPh>
	value4Digit(Manual_RejectionCount,5,66);
 8003942:	4b25      	ldr	r3, [pc, #148]	; (80039d8 <_ZN14DisplayRoutine3runEv+0x158>)
 8003944:	8819      	ldrh	r1, [r3, #0]
 8003946:	2342      	movs	r3, #66	; 0x42
 8003948:	2205      	movs	r2, #5
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f848 	bl	80039e0 <_ZN14DisplayRoutine11value4DigitEthh>
	m_gLCDDrive.m_lcdputs1(98,5,space);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	1d18      	adds	r0, r3, #4
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f603 2327 	addw	r3, r3, #2599	; 0xa27
 800395a:	2205      	movs	r2, #5
 800395c:	2162      	movs	r1, #98	; 0x62
 800395e:	f004 fb27 	bl	8007fb0 <_ZN4GLCD10m_lcdputs1EhhPh>

	m_gLCDDrive.m_lcdputs1(0,6,Mtimer);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	1d18      	adds	r0, r3, #4
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f603 2351 	addw	r3, r3, #2641	; 0xa51
 800396c:	2206      	movs	r2, #6
 800396e:	2100      	movs	r1, #0
 8003970:	f004 fb1e 	bl	8007fb0 <_ZN4GLCD10m_lcdputs1EhhPh>
	value4Digit(Manual_RejectionCount,6,66);
 8003974:	4b18      	ldr	r3, [pc, #96]	; (80039d8 <_ZN14DisplayRoutine3runEv+0x158>)
 8003976:	8819      	ldrh	r1, [r3, #0]
 8003978:	2342      	movs	r3, #66	; 0x42
 800397a:	2206      	movs	r2, #6
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f82f 	bl	80039e0 <_ZN14DisplayRoutine11value4DigitEthh>
	m_gLCDDrive.m_lcdputs1(98,6,space);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	1d18      	adds	r0, r3, #4
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f603 2327 	addw	r3, r3, #2599	; 0xa27
 800398c:	2206      	movs	r2, #6
 800398e:	2162      	movs	r1, #98	; 0x62
 8003990:	f004 fb0e 	bl	8007fb0 <_ZN4GLCD10m_lcdputs1EhhPh>

	m_gLCDDrive.m_lcdputs1(0,7,Wifi);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	1d18      	adds	r0, r3, #4
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f603 235e 	addw	r3, r3, #2654	; 0xa5e
 800399e:	2207      	movs	r2, #7
 80039a0:	2100      	movs	r1, #0
 80039a2:	f004 fb05 	bl	8007fb0 <_ZN4GLCD10m_lcdputs1EhhPh>
	value4Digit(wifi_command,7,66);
 80039a6:	4b0d      	ldr	r3, [pc, #52]	; (80039dc <_ZN14DisplayRoutine3runEv+0x15c>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	b299      	uxth	r1, r3
 80039ac:	2342      	movs	r3, #66	; 0x42
 80039ae:	2207      	movs	r2, #7
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 f815 	bl	80039e0 <_ZN14DisplayRoutine11value4DigitEthh>
	m_gLCDDrive.m_lcdputs1(98,7,space);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	1d18      	adds	r0, r3, #4
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f603 2327 	addw	r3, r3, #2599	; 0xa27
 80039c0:	2207      	movs	r2, #7
 80039c2:	2162      	movs	r1, #98	; 0x62
 80039c4:	f004 faf4 	bl	8007fb0 <_ZN4GLCD10m_lcdputs1EhhPh>
//	value2Digit(SectorPos,6,95);
	//Prod

}
 80039c8:	bf00      	nop
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	20000608 	.word	0x20000608
 80039d4:	2000060a 	.word	0x2000060a
 80039d8:	2000060c 	.word	0x2000060c
 80039dc:	20000734 	.word	0x20000734

080039e0 <_ZN14DisplayRoutine11value4DigitEthh>:
	GLCDNumericArray[0] =(unsigned int)(((value%100)/10)+0x30);
    GLCDNumericArray[1] =(unsigned int)((value%10)+0x30);
	m_gLCDDrive.m_lcdputs1(posCol,posLine,GLCDNumericArray);
}
void DisplayRoutine::value4Digit(uint16_t value4dig,uint8_t posLine,uint8_t posCol)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	4608      	mov	r0, r1
 80039ea:	4611      	mov	r1, r2
 80039ec:	461a      	mov	r2, r3
 80039ee:	4603      	mov	r3, r0
 80039f0:	807b      	strh	r3, [r7, #2]
 80039f2:	460b      	mov	r3, r1
 80039f4:	707b      	strb	r3, [r7, #1]
 80039f6:	4613      	mov	r3, r2
 80039f8:	703b      	strb	r3, [r7, #0]
	gLCDNumericArraySize_4[0] =(unsigned char)(((value4dig%10000)/1000)+0x30);
 80039fa:	887b      	ldrh	r3, [r7, #2]
 80039fc:	4a2e      	ldr	r2, [pc, #184]	; (8003ab8 <_ZN14DisplayRoutine11value4DigitEthh+0xd8>)
 80039fe:	fba2 1203 	umull	r1, r2, r2, r3
 8003a02:	0b52      	lsrs	r2, r2, #13
 8003a04:	f242 7110 	movw	r1, #10000	; 0x2710
 8003a08:	fb01 f202 	mul.w	r2, r1, r2
 8003a0c:	1a9b      	subs	r3, r3, r2
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	4a2a      	ldr	r2, [pc, #168]	; (8003abc <_ZN14DisplayRoutine11value4DigitEthh+0xdc>)
 8003a12:	fba2 2303 	umull	r2, r3, r2, r3
 8003a16:	099b      	lsrs	r3, r3, #6
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	3330      	adds	r3, #48	; 0x30
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f883 2a6c 	strb.w	r2, [r3, #2668]	; 0xa6c
	gLCDNumericArraySize_4[1] =(unsigned char)((value4dig%1000)/100+0x30);
 8003a26:	887b      	ldrh	r3, [r7, #2]
 8003a28:	4a24      	ldr	r2, [pc, #144]	; (8003abc <_ZN14DisplayRoutine11value4DigitEthh+0xdc>)
 8003a2a:	fba2 1203 	umull	r1, r2, r2, r3
 8003a2e:	0992      	lsrs	r2, r2, #6
 8003a30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003a34:	fb01 f202 	mul.w	r2, r1, r2
 8003a38:	1a9b      	subs	r3, r3, r2
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	4a20      	ldr	r2, [pc, #128]	; (8003ac0 <_ZN14DisplayRoutine11value4DigitEthh+0xe0>)
 8003a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a42:	095b      	lsrs	r3, r3, #5
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	3330      	adds	r3, #48	; 0x30
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f883 2a6d 	strb.w	r2, [r3, #2669]	; 0xa6d
	gLCDNumericArraySize_4[2] =(unsigned char)(((value4dig%100)/10)+0x30);
 8003a52:	887b      	ldrh	r3, [r7, #2]
 8003a54:	4a1a      	ldr	r2, [pc, #104]	; (8003ac0 <_ZN14DisplayRoutine11value4DigitEthh+0xe0>)
 8003a56:	fba2 1203 	umull	r1, r2, r2, r3
 8003a5a:	0952      	lsrs	r2, r2, #5
 8003a5c:	2164      	movs	r1, #100	; 0x64
 8003a5e:	fb01 f202 	mul.w	r2, r1, r2
 8003a62:	1a9b      	subs	r3, r3, r2
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	4a17      	ldr	r2, [pc, #92]	; (8003ac4 <_ZN14DisplayRoutine11value4DigitEthh+0xe4>)
 8003a68:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6c:	08db      	lsrs	r3, r3, #3
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	3330      	adds	r3, #48	; 0x30
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f883 2a6e 	strb.w	r2, [r3, #2670]	; 0xa6e
	gLCDNumericArraySize_4[3] =(unsigned char)((value4dig%10)+0x30);
 8003a7c:	887a      	ldrh	r2, [r7, #2]
 8003a7e:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <_ZN14DisplayRoutine11value4DigitEthh+0xe4>)
 8003a80:	fba3 1302 	umull	r1, r3, r3, r2
 8003a84:	08d9      	lsrs	r1, r3, #3
 8003a86:	460b      	mov	r3, r1
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	3330      	adds	r3, #48	; 0x30
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f883 2a6f 	strb.w	r2, [r3, #2671]	; 0xa6f
	m_gLCDDrive.m_lcdputs1(posCol,posLine,gLCDNumericArraySize_4);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	1d18      	adds	r0, r3, #4
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f603 236c 	addw	r3, r3, #2668	; 0xa6c
 8003aa8:	787a      	ldrb	r2, [r7, #1]
 8003aaa:	7839      	ldrb	r1, [r7, #0]
 8003aac:	f004 fa80 	bl	8007fb0 <_ZN4GLCD10m_lcdputs1EhhPh>
}
 8003ab0:	bf00      	nop
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	d1b71759 	.word	0xd1b71759
 8003abc:	10624dd3 	.word	0x10624dd3
 8003ac0:	51eb851f 	.word	0x51eb851f
 8003ac4:	cccccccd 	.word	0xcccccccd

08003ac8 <_ZN14DisplayRoutine4InitEv>:

void DisplayRoutine::Init()
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
	m_gLCDDrive.m_displayon();
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3304      	adds	r3, #4
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f004 f88d 	bl	8007bf4 <_ZN4GLCD11m_displayonEv>
	m_gLCDDrive.m_setstartline(0);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	3304      	adds	r3, #4
 8003ade:	2100      	movs	r1, #0
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f004 f989 	bl	8007df8 <_ZN4GLCD14m_setstartlineEh>
	m_gLCDDrive.m_clrlcd();
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	4618      	mov	r0, r3
 8003aec:	f004 fa95 	bl	800801a <_ZN4GLCD8m_clrlcdEv>


}
 8003af0:	bf00      	nop
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <_ZN6common26ReadtheValueAssignPinstateEhh>:

class common {
public:
	common();
	virtual ~common();
	GPIO_PinState ReadtheValueAssignPinstate(uint8_t position, uint8_t value)
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	460b      	mov	r3, r1
 8003b02:	70fb      	strb	r3, [r7, #3]
 8003b04:	4613      	mov	r3, r2
 8003b06:	70bb      	strb	r3, [r7, #2]
	{
		GPIO_PinState pinstate;
		position = 1 << position;
 8003b08:	78fb      	ldrb	r3, [r7, #3]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	70fb      	strb	r3, [r7, #3]
		if(position & value){
 8003b12:	78fa      	ldrb	r2, [r7, #3]
 8003b14:	78bb      	ldrb	r3, [r7, #2]
 8003b16:	4013      	ands	r3, r2
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d002      	beq.n	8003b24 <_ZN6common26ReadtheValueAssignPinstateEhh+0x2c>
			pinstate = GPIO_PIN_SET;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	73fb      	strb	r3, [r7, #15]
 8003b22:	e001      	b.n	8003b28 <_ZN6common26ReadtheValueAssignPinstateEhh+0x30>
		}
		else
		{
			pinstate = GPIO_PIN_RESET;
 8003b24:	2300      	movs	r3, #0
 8003b26:	73fb      	strb	r3, [r7, #15]
		}
		return(pinstate);
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
	}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
	...

08003b38 <_ZN4GLCDC1Ev>:

#include "GLCD.h"
#include "main.h"
#define GLCDDELAY 10
extern TIM_HandleTypeDef htim1;
GLCD::GLCD() {
 8003b38:	b5b0      	push	{r4, r5, r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7ff fdba 	bl	80036bc <_ZN6commonC1Ev>
 8003b48:	4ac8      	ldr	r2, [pc, #800]	; (8003e6c <_ZN4GLCDC1Ev+0x334>)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	687d      	ldr	r5, [r7, #4]
 8003b50:	4bc7      	ldr	r3, [pc, #796]	; (8003e70 <_ZN4GLCDC1Ev+0x338>)
 8003b52:	1d2c      	adds	r4, r5, #4
 8003b54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b56:	c407      	stmia	r4!, {r0, r1, r2}
 8003b58:	8023      	strh	r3, [r4, #0]
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	74ab      	strb	r3, [r5, #18]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	615a      	str	r2, [r3, #20]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	619a      	str	r2, [r3, #24]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	775a      	strb	r2, [r3, #29]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	331e      	adds	r3, #30
 8003b74:	f640 0208 	movw	r2, #2056	; 0x808
 8003b78:	2100      	movs	r1, #0
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f00a ff3e 	bl	800e9fc <memset>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	227e      	movs	r2, #126	; 0x7e
 8003b84:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2281      	movs	r2, #129	; 0x81
 8003b8c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2295      	movs	r2, #149	; 0x95
 8003b94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	22b1      	movs	r2, #177	; 0xb1
 8003b9c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	22b1      	movs	r2, #177	; 0xb1
 8003ba4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2295      	movs	r2, #149	; 0x95
 8003bac:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2281      	movs	r2, #129	; 0x81
 8003bb4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	227e      	movs	r2, #126	; 0x7e
 8003bbc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	227e      	movs	r2, #126	; 0x7e
 8003bc4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	22ff      	movs	r2, #255	; 0xff
 8003bcc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	22eb      	movs	r2, #235	; 0xeb
 8003bd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	22cf      	movs	r2, #207	; 0xcf
 8003bdc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	22cf      	movs	r2, #207	; 0xcf
 8003be4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	22eb      	movs	r2, #235	; 0xeb
 8003bec:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	22ff      	movs	r2, #255	; 0xff
 8003bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	227e      	movs	r2, #126	; 0x7e
 8003bfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	220e      	movs	r2, #14
 8003c04:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	221f      	movs	r2, #31
 8003c0c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	223f      	movs	r2, #63	; 0x3f
 8003c14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	227e      	movs	r2, #126	; 0x7e
 8003c1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	223f      	movs	r2, #63	; 0x3f
 8003c24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	221f      	movs	r2, #31
 8003c2c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	220e      	movs	r2, #14
 8003c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2208      	movs	r2, #8
 8003c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	221c      	movs	r2, #28
 8003c44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	223e      	movs	r2, #62	; 0x3e
 8003c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	227f      	movs	r2, #127	; 0x7f
 8003c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	223e      	movs	r2, #62	; 0x3e
 8003c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	221c      	movs	r2, #28
 8003c64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2208      	movs	r2, #8
 8003c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2218      	movs	r2, #24
 8003c74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	22ba      	movs	r2, #186	; 0xba
 8003c7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	22ff      	movs	r2, #255	; 0xff
 8003c84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	22ff      	movs	r2, #255	; 0xff
 8003c8c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	22ff      	movs	r2, #255	; 0xff
 8003c94:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	22ba      	movs	r2, #186	; 0xba
 8003c9c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2218      	movs	r2, #24
 8003ca4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2210      	movs	r2, #16
 8003cac:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	22b8      	movs	r2, #184	; 0xb8
 8003cb4:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	22fc      	movs	r2, #252	; 0xfc
 8003cbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	22ff      	movs	r2, #255	; 0xff
 8003cc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	22fc      	movs	r2, #252	; 0xfc
 8003ccc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	22b8      	movs	r2, #184	; 0xb8
 8003cd4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2210      	movs	r2, #16
 8003cdc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2218      	movs	r2, #24
 8003ce4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	223c      	movs	r2, #60	; 0x3c
 8003cec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	223c      	movs	r2, #60	; 0x3c
 8003cf4:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2218      	movs	r2, #24
 8003cfc:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	22ff      	movs	r2, #255	; 0xff
 8003d04:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	22ff      	movs	r2, #255	; 0xff
 8003d0c:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	22e7      	movs	r2, #231	; 0xe7
 8003d14:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	22c3      	movs	r2, #195	; 0xc3
 8003d1c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	22c3      	movs	r2, #195	; 0xc3
 8003d24:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	22e7      	movs	r2, #231	; 0xe7
 8003d2c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	22ff      	movs	r2, #255	; 0xff
 8003d34:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	22ff      	movs	r2, #255	; 0xff
 8003d3c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	223c      	movs	r2, #60	; 0x3c
 8003d44:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2266      	movs	r2, #102	; 0x66
 8003d4c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2242      	movs	r2, #66	; 0x42
 8003d54:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2242      	movs	r2, #66	; 0x42
 8003d5c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2266      	movs	r2, #102	; 0x66
 8003d64:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	223c      	movs	r2, #60	; 0x3c
 8003d6c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	22ff      	movs	r2, #255	; 0xff
 8003d74:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	22c3      	movs	r2, #195	; 0xc3
 8003d7c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2299      	movs	r2, #153	; 0x99
 8003d84:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	22bd      	movs	r2, #189	; 0xbd
 8003d8c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	22bd      	movs	r2, #189	; 0xbd
 8003d94:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2299      	movs	r2, #153	; 0x99
 8003d9c:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	22c3      	movs	r2, #195	; 0xc3
 8003da4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	22ff      	movs	r2, #255	; 0xff
 8003dac:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2270      	movs	r2, #112	; 0x70
 8003db4:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	22f8      	movs	r2, #248	; 0xf8
 8003dbc:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2288      	movs	r2, #136	; 0x88
 8003dc4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2288      	movs	r2, #136	; 0x88
 8003dcc:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	22fd      	movs	r2, #253	; 0xfd
 8003dd4:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	227f      	movs	r2, #127	; 0x7f
 8003ddc:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2207      	movs	r2, #7
 8003de4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	220f      	movs	r2, #15
 8003dec:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	224e      	movs	r2, #78	; 0x4e
 8003df4:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	225f      	movs	r2, #95	; 0x5f
 8003dfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	22f1      	movs	r2, #241	; 0xf1
 8003e04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	22f1      	movs	r2, #241	; 0xf1
 8003e0c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	225f      	movs	r2, #95	; 0x5f
 8003e14:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	224e      	movs	r2, #78	; 0x4e
 8003e1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	22c0      	movs	r2, #192	; 0xc0
 8003e24:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	22e0      	movs	r2, #224	; 0xe0
 8003e2c:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	22ff      	movs	r2, #255	; 0xff
 8003e34:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	227f      	movs	r2, #127	; 0x7f
 8003e3c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2205      	movs	r2, #5
 8003e44:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2205      	movs	r2, #5
 8003e4c:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2207      	movs	r2, #7
 8003e54:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2207      	movs	r2, #7
 8003e5c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	22c0      	movs	r2, #192	; 0xc0
 8003e64:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 8003e68:	e004      	b.n	8003e74 <_ZN4GLCDC1Ev+0x33c>
 8003e6a:	bf00      	nop
 8003e6c:	0800f724 	.word	0x0800f724
 8003e70:	0800f354 	.word	0x0800f354
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	22ff      	movs	r2, #255	; 0xff
 8003e78:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	227f      	movs	r2, #127	; 0x7f
 8003e80:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2205      	movs	r2, #5
 8003e88:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2205      	movs	r2, #5
 8003e90:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2265      	movs	r2, #101	; 0x65
 8003e98:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	227f      	movs	r2, #127	; 0x7f
 8003ea0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	223f      	movs	r2, #63	; 0x3f
 8003ea8:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2299      	movs	r2, #153	; 0x99
 8003eb0:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	225a      	movs	r2, #90	; 0x5a
 8003eb8:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	223c      	movs	r2, #60	; 0x3c
 8003ec0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	22e7      	movs	r2, #231	; 0xe7
 8003ec8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	22e7      	movs	r2, #231	; 0xe7
 8003ed0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	223c      	movs	r2, #60	; 0x3c
 8003ed8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	225a      	movs	r2, #90	; 0x5a
 8003ee0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2299      	movs	r2, #153	; 0x99
 8003ee8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	227f      	movs	r2, #127	; 0x7f
 8003ef0:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	223e      	movs	r2, #62	; 0x3e
 8003ef8:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	223e      	movs	r2, #62	; 0x3e
 8003f00:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	221c      	movs	r2, #28
 8003f08:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	221c      	movs	r2, #28
 8003f10:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2208      	movs	r2, #8
 8003f18:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2208      	movs	r2, #8
 8003f20:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2208      	movs	r2, #8
 8003f28:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2208      	movs	r2, #8
 8003f30:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	221c      	movs	r2, #28
 8003f38:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	221c      	movs	r2, #28
 8003f40:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	223e      	movs	r2, #62	; 0x3e
 8003f48:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	223e      	movs	r2, #62	; 0x3e
 8003f50:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	227f      	movs	r2, #127	; 0x7f
 8003f58:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2224      	movs	r2, #36	; 0x24
 8003f60:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2266      	movs	r2, #102	; 0x66
 8003f68:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	22ff      	movs	r2, #255	; 0xff
 8003f70:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	22ff      	movs	r2, #255	; 0xff
 8003f78:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2266      	movs	r2, #102	; 0x66
 8003f80:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2224      	movs	r2, #36	; 0x24
 8003f88:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	225f      	movs	r2, #95	; 0x5f
 8003f90:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	225f      	movs	r2, #95	; 0x5f
 8003f98:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	225f      	movs	r2, #95	; 0x5f
 8003fa0:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	225f      	movs	r2, #95	; 0x5f
 8003fa8:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2206      	movs	r2, #6
 8003fb0:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	220f      	movs	r2, #15
 8003fb8:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2209      	movs	r2, #9
 8003fc0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	227f      	movs	r2, #127	; 0x7f
 8003fc8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	227f      	movs	r2, #127	; 0x7f
 8003fd0:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	227f      	movs	r2, #127	; 0x7f
 8003fe0:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	227f      	movs	r2, #127	; 0x7f
 8003fe8:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2240      	movs	r2, #64	; 0x40
 8003ff0:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	22da      	movs	r2, #218	; 0xda
 8003ff8:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	22bf      	movs	r2, #191	; 0xbf
 8004000:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	22a5      	movs	r2, #165	; 0xa5
 8004008:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	22fd      	movs	r2, #253	; 0xfd
 8004010:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2259      	movs	r2, #89	; 0x59
 8004018:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2203      	movs	r2, #3
 8004020:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2270      	movs	r2, #112	; 0x70
 8004030:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2270      	movs	r2, #112	; 0x70
 8004038:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2270      	movs	r2, #112	; 0x70
 8004040:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2270      	movs	r2, #112	; 0x70
 8004048:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2270      	movs	r2, #112	; 0x70
 8004050:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2270      	movs	r2, #112	; 0x70
 8004058:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2280      	movs	r2, #128	; 0x80
 8004060:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2294      	movs	r2, #148	; 0x94
 8004068:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	22b6      	movs	r2, #182	; 0xb6
 8004070:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	22ff      	movs	r2, #255	; 0xff
 8004078:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	22ff      	movs	r2, #255	; 0xff
 8004080:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	22b6      	movs	r2, #182	; 0xb6
 8004088:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2294      	movs	r2, #148	; 0x94
 8004090:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2280      	movs	r2, #128	; 0x80
 8004098:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2204      	movs	r2, #4
 80040a0:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2206      	movs	r2, #6
 80040a8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	227f      	movs	r2, #127	; 0x7f
 80040b0:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	227f      	movs	r2, #127	; 0x7f
 80040b8:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2206      	movs	r2, #6
 80040c0:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2204      	movs	r2, #4
 80040c8:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2210      	movs	r2, #16
 80040d0:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2230      	movs	r2, #48	; 0x30
 80040d8:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	227f      	movs	r2, #127	; 0x7f
 80040e0:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	227f      	movs	r2, #127	; 0x7f
 80040e8:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2230      	movs	r2, #48	; 0x30
 80040f0:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2210      	movs	r2, #16
 80040f8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2208      	movs	r2, #8
 8004100:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2208      	movs	r2, #8
 8004108:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2208      	movs	r2, #8
 8004110:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	222a      	movs	r2, #42	; 0x2a
 8004118:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	223e      	movs	r2, #62	; 0x3e
 8004120:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	221c      	movs	r2, #28
 8004128:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2208      	movs	r2, #8
 8004130:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2208      	movs	r2, #8
 8004138:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	221c      	movs	r2, #28
 8004140:	f883 20f7 	strb.w	r2, [r3, #247]	; 0xf7
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	223e      	movs	r2, #62	; 0x3e
 8004148:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	222a      	movs	r2, #42	; 0x2a
 8004150:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2208      	movs	r2, #8
 8004158:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2208      	movs	r2, #8
 8004160:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2208      	movs	r2, #8
 8004168:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	223c      	movs	r2, #60	; 0x3c
 8004170:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	223c      	movs	r2, #60	; 0x3c
 8004178:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2220      	movs	r2, #32
 8004180:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2220      	movs	r2, #32
 8004190:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2220      	movs	r2, #32
 8004198:	f883 2103 	strb.w	r2, [r3, #259]	; 0x103
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2220      	movs	r2, #32
 80041a0:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2208      	movs	r2, #8
 80041a8:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	221c      	movs	r2, #28
 80041b0:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	223e      	movs	r2, #62	; 0x3e
 80041b8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2208      	movs	r2, #8
 80041c0:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2208      	movs	r2, #8
 80041c8:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	223e      	movs	r2, #62	; 0x3e
 80041d0:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	221c      	movs	r2, #28
 80041d8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2208      	movs	r2, #8
 80041e0:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2230      	movs	r2, #48	; 0x30
 80041e8:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2238      	movs	r2, #56	; 0x38
 80041f0:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	223c      	movs	r2, #60	; 0x3c
 80041f8:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	223e      	movs	r2, #62	; 0x3e
 8004200:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	223e      	movs	r2, #62	; 0x3e
 8004208:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	223c      	movs	r2, #60	; 0x3c
 8004210:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2238      	movs	r2, #56	; 0x38
 8004218:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2230      	movs	r2, #48	; 0x30
 8004220:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2206      	movs	r2, #6
 8004228:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	220e      	movs	r2, #14
 8004230:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	221e      	movs	r2, #30
 8004238:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	223e      	movs	r2, #62	; 0x3e
 8004240:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	223e      	movs	r2, #62	; 0x3e
 8004248:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	221e      	movs	r2, #30
 8004250:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	220e      	movs	r2, #14
 8004258:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2206      	movs	r2, #6
 8004260:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2206      	movs	r2, #6
 8004268:	f883 2127 	strb.w	r2, [r3, #295]	; 0x127
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	225f      	movs	r2, #95	; 0x5f
 8004270:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	225f      	movs	r2, #95	; 0x5f
 8004278:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2206      	movs	r2, #6
 8004280:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2207      	movs	r2, #7
 8004288:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2207      	movs	r2, #7
 8004290:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2207      	movs	r2, #7
 8004298:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2207      	movs	r2, #7
 80042a0:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2214      	movs	r2, #20
 80042a8:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	227f      	movs	r2, #127	; 0x7f
 80042b0:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	227f      	movs	r2, #127	; 0x7f
 80042b8:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2214      	movs	r2, #20
 80042c0:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	227f      	movs	r2, #127	; 0x7f
 80042c8:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	227f      	movs	r2, #127	; 0x7f
 80042d0:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2214      	movs	r2, #20
 80042d8:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2224      	movs	r2, #36	; 0x24
 80042e0:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	222e      	movs	r2, #46	; 0x2e
 80042e8:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	226b      	movs	r2, #107	; 0x6b
 80042f0:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	226b      	movs	r2, #107	; 0x6b
 80042f8:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	223a      	movs	r2, #58	; 0x3a
 8004300:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2212      	movs	r2, #18
 8004308:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2246      	movs	r2, #70	; 0x46
 8004310:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2266      	movs	r2, #102	; 0x66
 8004318:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2230      	movs	r2, #48	; 0x30
 8004320:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2218      	movs	r2, #24
 8004328:	f883 2149 	strb.w	r2, [r3, #329]	; 0x149
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	220c      	movs	r2, #12
 8004330:	f883 214a 	strb.w	r2, [r3, #330]	; 0x14a
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2266      	movs	r2, #102	; 0x66
 8004338:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2262      	movs	r2, #98	; 0x62
 8004340:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2230      	movs	r2, #48	; 0x30
 8004348:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	227a      	movs	r2, #122	; 0x7a
 8004350:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	224f      	movs	r2, #79	; 0x4f
 8004358:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	225d      	movs	r2, #93	; 0x5d
 8004360:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2237      	movs	r2, #55	; 0x37
 8004368:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	227a      	movs	r2, #122	; 0x7a
 8004370:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2248      	movs	r2, #72	; 0x48
 8004378:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2204      	movs	r2, #4
 8004380:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2207      	movs	r2, #7
 8004388:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2203      	movs	r2, #3
 8004390:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	221c      	movs	r2, #28
 8004398:	f883 215f 	strb.w	r2, [r3, #351]	; 0x15f
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	223e      	movs	r2, #62	; 0x3e
 80043a0:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2263      	movs	r2, #99	; 0x63
 80043a8:	f883 2161 	strb.w	r2, [r3, #353]	; 0x161
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2241      	movs	r2, #65	; 0x41
 80043b0:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2241      	movs	r2, #65	; 0x41
 80043b8:	f883 2167 	strb.w	r2, [r3, #359]	; 0x167
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2263      	movs	r2, #99	; 0x63
 80043c0:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	223e      	movs	r2, #62	; 0x3e
 80043c8:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	221c      	movs	r2, #28
 80043d0:	f883 216a 	strb.w	r2, [r3, #362]	; 0x16a
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2208      	movs	r2, #8
 80043d8:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	222a      	movs	r2, #42	; 0x2a
 80043e0:	f883 216f 	strb.w	r2, [r3, #367]	; 0x16f
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	223e      	movs	r2, #62	; 0x3e
 80043e8:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	221c      	movs	r2, #28
 80043f0:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	221c      	movs	r2, #28
 80043f8:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	223e      	movs	r2, #62	; 0x3e
 8004400:	f883 2173 	strb.w	r2, [r3, #371]	; 0x173
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	222a      	movs	r2, #42	; 0x2a
 8004408:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2208      	movs	r2, #8
 8004410:	f883 2175 	strb.w	r2, [r3, #373]	; 0x175
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2208      	movs	r2, #8
 8004418:	f883 2176 	strb.w	r2, [r3, #374]	; 0x176
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2208      	movs	r2, #8
 8004420:	f883 2177 	strb.w	r2, [r3, #375]	; 0x177
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	223e      	movs	r2, #62	; 0x3e
 8004428:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	223e      	movs	r2, #62	; 0x3e
 8004430:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2208      	movs	r2, #8
 8004438:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2208      	movs	r2, #8
 8004440:	f883 217b 	strb.w	r2, [r3, #379]	; 0x17b
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2280      	movs	r2, #128	; 0x80
 8004448:	f883 217f 	strb.w	r2, [r3, #383]	; 0x17f
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	22e0      	movs	r2, #224	; 0xe0
 8004450:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2260      	movs	r2, #96	; 0x60
 8004458:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2208      	movs	r2, #8
 8004460:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2208      	movs	r2, #8
 8004468:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2208      	movs	r2, #8
 8004470:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2208      	movs	r2, #8
 8004478:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2208      	movs	r2, #8
 8004480:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2208      	movs	r2, #8
 8004488:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2260      	movs	r2, #96	; 0x60
 8004490:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2260      	movs	r2, #96	; 0x60
 8004498:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2260      	movs	r2, #96	; 0x60
 80044a0:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2230      	movs	r2, #48	; 0x30
 80044a8:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2218      	movs	r2, #24
 80044b0:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	220c      	movs	r2, #12
 80044b8:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2206      	movs	r2, #6
 80044c0:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2203      	movs	r2, #3
 80044c8:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	223e      	movs	r2, #62	; 0x3e
 80044d8:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	227f      	movs	r2, #127	; 0x7f
 80044e0:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2271      	movs	r2, #113	; 0x71
 80044e8:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2259      	movs	r2, #89	; 0x59
 80044f0:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	224d      	movs	r2, #77	; 0x4d
 80044f8:	f883 21a2 	strb.w	r2, [r3, #418]	; 0x1a2
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	227f      	movs	r2, #127	; 0x7f
 8004500:	f883 21a3 	strb.w	r2, [r3, #419]	; 0x1a3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	223e      	movs	r2, #62	; 0x3e
 8004508:	f883 21a4 	strb.w	r2, [r3, #420]	; 0x1a4
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2240      	movs	r2, #64	; 0x40
 8004510:	f883 21a6 	strb.w	r2, [r3, #422]	; 0x1a6
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2242      	movs	r2, #66	; 0x42
 8004518:	f883 21a7 	strb.w	r2, [r3, #423]	; 0x1a7
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	227f      	movs	r2, #127	; 0x7f
 8004520:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	227f      	movs	r2, #127	; 0x7f
 8004528:	f883 21a9 	strb.w	r2, [r3, #425]	; 0x1a9
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2240      	movs	r2, #64	; 0x40
 8004530:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2240      	movs	r2, #64	; 0x40
 8004538:	f883 21ab 	strb.w	r2, [r3, #427]	; 0x1ab
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2262      	movs	r2, #98	; 0x62
 8004540:	f883 21ae 	strb.w	r2, [r3, #430]	; 0x1ae
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2273      	movs	r2, #115	; 0x73
 8004548:	f883 21af 	strb.w	r2, [r3, #431]	; 0x1af
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2259      	movs	r2, #89	; 0x59
 8004550:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2249      	movs	r2, #73	; 0x49
 8004558:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	226f      	movs	r2, #111	; 0x6f
 8004560:	f883 21b2 	strb.w	r2, [r3, #434]	; 0x1b2
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2266      	movs	r2, #102	; 0x66
 8004568:	f883 21b3 	strb.w	r2, [r3, #435]	; 0x1b3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2222      	movs	r2, #34	; 0x22
 8004570:	f883 21b6 	strb.w	r2, [r3, #438]	; 0x1b6
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2263      	movs	r2, #99	; 0x63
 8004578:	f883 21b7 	strb.w	r2, [r3, #439]	; 0x1b7
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2249      	movs	r2, #73	; 0x49
 8004580:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2249      	movs	r2, #73	; 0x49
 8004588:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	227f      	movs	r2, #127	; 0x7f
 8004590:	f883 21ba 	strb.w	r2, [r3, #442]	; 0x1ba
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2236      	movs	r2, #54	; 0x36
 8004598:	f883 21bb 	strb.w	r2, [r3, #443]	; 0x1bb
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2218      	movs	r2, #24
 80045a0:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	221c      	movs	r2, #28
 80045a8:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2216      	movs	r2, #22
 80045b0:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2253      	movs	r2, #83	; 0x53
 80045b8:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	227f      	movs	r2, #127	; 0x7f
 80045c0:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	227f      	movs	r2, #127	; 0x7f
 80045c8:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2250      	movs	r2, #80	; 0x50
 80045d0:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2227      	movs	r2, #39	; 0x27
 80045d8:	f883 21c6 	strb.w	r2, [r3, #454]	; 0x1c6
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2267      	movs	r2, #103	; 0x67
 80045e0:	f883 21c7 	strb.w	r2, [r3, #455]	; 0x1c7
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2245      	movs	r2, #69	; 0x45
 80045e8:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2245      	movs	r2, #69	; 0x45
 80045f0:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	227d      	movs	r2, #125	; 0x7d
 80045f8:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2239      	movs	r2, #57	; 0x39
 8004600:	f883 21cb 	strb.w	r2, [r3, #459]	; 0x1cb
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	223c      	movs	r2, #60	; 0x3c
 8004608:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	227e      	movs	r2, #126	; 0x7e
 8004610:	f883 21cf 	strb.w	r2, [r3, #463]	; 0x1cf
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	224b      	movs	r2, #75	; 0x4b
 8004618:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2249      	movs	r2, #73	; 0x49
 8004620:	f883 21d1 	strb.w	r2, [r3, #465]	; 0x1d1
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2279      	movs	r2, #121	; 0x79
 8004628:	f883 21d2 	strb.w	r2, [r3, #466]	; 0x1d2
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2230      	movs	r2, #48	; 0x30
 8004630:	f883 21d3 	strb.w	r2, [r3, #467]	; 0x1d3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2203      	movs	r2, #3
 8004638:	f883 21d6 	strb.w	r2, [r3, #470]	; 0x1d6
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2203      	movs	r2, #3
 8004640:	f883 21d7 	strb.w	r2, [r3, #471]	; 0x1d7
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2271      	movs	r2, #113	; 0x71
 8004648:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2279      	movs	r2, #121	; 0x79
 8004650:	f883 21d9 	strb.w	r2, [r3, #473]	; 0x1d9
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	220f      	movs	r2, #15
 8004658:	f883 21da 	strb.w	r2, [r3, #474]	; 0x1da
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2207      	movs	r2, #7
 8004660:	f883 21db 	strb.w	r2, [r3, #475]	; 0x1db
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2236      	movs	r2, #54	; 0x36
 8004668:	f883 21de 	strb.w	r2, [r3, #478]	; 0x1de
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	227f      	movs	r2, #127	; 0x7f
 8004670:	f883 21df 	strb.w	r2, [r3, #479]	; 0x1df
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2249      	movs	r2, #73	; 0x49
 8004678:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2249      	movs	r2, #73	; 0x49
 8004680:	f883 21e1 	strb.w	r2, [r3, #481]	; 0x1e1
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	227f      	movs	r2, #127	; 0x7f
 8004688:	f883 21e2 	strb.w	r2, [r3, #482]	; 0x1e2
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2236      	movs	r2, #54	; 0x36
 8004690:	f883 21e3 	strb.w	r2, [r3, #483]	; 0x1e3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2206      	movs	r2, #6
 8004698:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	224f      	movs	r2, #79	; 0x4f
 80046a0:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2249      	movs	r2, #73	; 0x49
 80046a8:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2269      	movs	r2, #105	; 0x69
 80046b0:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	223f      	movs	r2, #63	; 0x3f
 80046b8:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	221e      	movs	r2, #30
 80046c0:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2266      	movs	r2, #102	; 0x66
 80046c8:	f883 21f0 	strb.w	r2, [r3, #496]	; 0x1f0
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2266      	movs	r2, #102	; 0x66
 80046d0:	f883 21f1 	strb.w	r2, [r3, #497]	; 0x1f1
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2280      	movs	r2, #128	; 0x80
 80046d8:	f883 21f7 	strb.w	r2, [r3, #503]	; 0x1f7
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	22e6      	movs	r2, #230	; 0xe6
 80046e0:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2266      	movs	r2, #102	; 0x66
 80046e8:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2208      	movs	r2, #8
 80046f0:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	221c      	movs	r2, #28
 80046f8:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2236      	movs	r2, #54	; 0x36
 8004700:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2263      	movs	r2, #99	; 0x63
 8004708:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2241      	movs	r2, #65	; 0x41
 8004710:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2224      	movs	r2, #36	; 0x24
 8004718:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2224      	movs	r2, #36	; 0x24
 8004720:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2224      	movs	r2, #36	; 0x24
 8004728:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2224      	movs	r2, #36	; 0x24
 8004730:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2224      	movs	r2, #36	; 0x24
 8004738:	f883 220a 	strb.w	r2, [r3, #522]	; 0x20a
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2224      	movs	r2, #36	; 0x24
 8004740:	f883 220b 	strb.w	r2, [r3, #523]	; 0x20b
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2241      	movs	r2, #65	; 0x41
 8004748:	f883 220f 	strb.w	r2, [r3, #527]	; 0x20f
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2263      	movs	r2, #99	; 0x63
 8004750:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2236      	movs	r2, #54	; 0x36
 8004758:	f883 2211 	strb.w	r2, [r3, #529]	; 0x211
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	221c      	movs	r2, #28
 8004760:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2208      	movs	r2, #8
 8004768:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 2216 	strb.w	r2, [r3, #534]	; 0x216
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2203      	movs	r2, #3
 8004778:	f883 2217 	strb.w	r2, [r3, #535]	; 0x217
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2251      	movs	r2, #81	; 0x51
 8004780:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2259      	movs	r2, #89	; 0x59
 8004788:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	220f      	movs	r2, #15
 8004790:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2206      	movs	r2, #6
 8004798:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	223e      	movs	r2, #62	; 0x3e
 80047a0:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	227f      	movs	r2, #127	; 0x7f
 80047a8:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2241      	movs	r2, #65	; 0x41
 80047b0:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	225d      	movs	r2, #93	; 0x5d
 80047b8:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	225d      	movs	r2, #93	; 0x5d
 80047c0:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	221f      	movs	r2, #31
 80047c8:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	221e      	movs	r2, #30
 80047d0:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	227c      	movs	r2, #124	; 0x7c
 80047d8:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	227e      	movs	r2, #126	; 0x7e
 80047e0:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2213      	movs	r2, #19
 80047e8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2213      	movs	r2, #19
 80047f0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	227e      	movs	r2, #126	; 0x7e
 80047f8:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	227c      	movs	r2, #124	; 0x7c
 8004800:	f883 222b 	strb.w	r2, [r3, #555]	; 0x22b
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2241      	movs	r2, #65	; 0x41
 8004808:	f883 222e 	strb.w	r2, [r3, #558]	; 0x22e
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	227f      	movs	r2, #127	; 0x7f
 8004810:	f883 222f 	strb.w	r2, [r3, #559]	; 0x22f
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	227f      	movs	r2, #127	; 0x7f
 8004818:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2249      	movs	r2, #73	; 0x49
 8004820:	f883 2231 	strb.w	r2, [r3, #561]	; 0x231
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2249      	movs	r2, #73	; 0x49
 8004828:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	227f      	movs	r2, #127	; 0x7f
 8004830:	f883 2233 	strb.w	r2, [r3, #563]	; 0x233
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2236      	movs	r2, #54	; 0x36
 8004838:	f883 2234 	strb.w	r2, [r3, #564]	; 0x234
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	221c      	movs	r2, #28
 8004840:	f883 2236 	strb.w	r2, [r3, #566]	; 0x236
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	223e      	movs	r2, #62	; 0x3e
 8004848:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2263      	movs	r2, #99	; 0x63
 8004850:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2241      	movs	r2, #65	; 0x41
 8004858:	f883 2239 	strb.w	r2, [r3, #569]	; 0x239
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2241      	movs	r2, #65	; 0x41
 8004860:	f883 223a 	strb.w	r2, [r3, #570]	; 0x23a
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2263      	movs	r2, #99	; 0x63
 8004868:	f883 223b 	strb.w	r2, [r3, #571]	; 0x23b
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2222      	movs	r2, #34	; 0x22
 8004870:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2241      	movs	r2, #65	; 0x41
 8004878:	f883 223e 	strb.w	r2, [r3, #574]	; 0x23e
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	227f      	movs	r2, #127	; 0x7f
 8004880:	f883 223f 	strb.w	r2, [r3, #575]	; 0x23f
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	227f      	movs	r2, #127	; 0x7f
 8004888:	f883 2240 	strb.w	r2, [r3, #576]	; 0x240
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2241      	movs	r2, #65	; 0x41
 8004890:	f883 2241 	strb.w	r2, [r3, #577]	; 0x241
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2263      	movs	r2, #99	; 0x63
 8004898:	f883 2242 	strb.w	r2, [r3, #578]	; 0x242
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	223e      	movs	r2, #62	; 0x3e
 80048a0:	f883 2243 	strb.w	r2, [r3, #579]	; 0x243
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	221c      	movs	r2, #28
 80048a8:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2241      	movs	r2, #65	; 0x41
 80048b0:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	227f      	movs	r2, #127	; 0x7f
 80048b8:	f883 2247 	strb.w	r2, [r3, #583]	; 0x247
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	227f      	movs	r2, #127	; 0x7f
 80048c0:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2249      	movs	r2, #73	; 0x49
 80048c8:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	225d      	movs	r2, #93	; 0x5d
 80048d0:	f883 224a 	strb.w	r2, [r3, #586]	; 0x24a
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2241      	movs	r2, #65	; 0x41
 80048d8:	f883 224b 	strb.w	r2, [r3, #587]	; 0x24b
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2263      	movs	r2, #99	; 0x63
 80048e0:	f883 224c 	strb.w	r2, [r3, #588]	; 0x24c
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2241      	movs	r2, #65	; 0x41
 80048e8:	f883 224e 	strb.w	r2, [r3, #590]	; 0x24e
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	227f      	movs	r2, #127	; 0x7f
 80048f0:	f883 224f 	strb.w	r2, [r3, #591]	; 0x24f
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	227f      	movs	r2, #127	; 0x7f
 80048f8:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2249      	movs	r2, #73	; 0x49
 8004900:	f883 2251 	strb.w	r2, [r3, #593]	; 0x251
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	221d      	movs	r2, #29
 8004908:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2253 	strb.w	r2, [r3, #595]	; 0x253
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2203      	movs	r2, #3
 8004918:	f883 2254 	strb.w	r2, [r3, #596]	; 0x254
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	221c      	movs	r2, #28
 8004920:	f883 2256 	strb.w	r2, [r3, #598]	; 0x256
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	223e      	movs	r2, #62	; 0x3e
 8004928:	f883 2257 	strb.w	r2, [r3, #599]	; 0x257
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2263      	movs	r2, #99	; 0x63
 8004930:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2241      	movs	r2, #65	; 0x41
 8004938:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2251      	movs	r2, #81	; 0x51
 8004940:	f883 225a 	strb.w	r2, [r3, #602]	; 0x25a
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2273      	movs	r2, #115	; 0x73
 8004948:	f883 225b 	strb.w	r2, [r3, #603]	; 0x25b
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2272      	movs	r2, #114	; 0x72
 8004950:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	227f      	movs	r2, #127	; 0x7f
 8004958:	f883 225e 	strb.w	r2, [r3, #606]	; 0x25e
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	227f      	movs	r2, #127	; 0x7f
 8004960:	f883 225f 	strb.w	r2, [r3, #607]	; 0x25f
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2208      	movs	r2, #8
 8004968:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2208      	movs	r2, #8
 8004970:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	227f      	movs	r2, #127	; 0x7f
 8004978:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	227f      	movs	r2, #127	; 0x7f
 8004980:	f883 2263 	strb.w	r2, [r3, #611]	; 0x263
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2241      	movs	r2, #65	; 0x41
 8004988:	f883 2267 	strb.w	r2, [r3, #615]	; 0x267
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	227f      	movs	r2, #127	; 0x7f
 8004990:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	227f      	movs	r2, #127	; 0x7f
 8004998:	f883 2269 	strb.w	r2, [r3, #617]	; 0x269
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2241      	movs	r2, #65	; 0x41
 80049a0:	f883 226a 	strb.w	r2, [r3, #618]	; 0x26a
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2230      	movs	r2, #48	; 0x30
 80049a8:	f883 226e 	strb.w	r2, [r3, #622]	; 0x26e
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2270      	movs	r2, #112	; 0x70
 80049b0:	f883 226f 	strb.w	r2, [r3, #623]	; 0x26f
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2240      	movs	r2, #64	; 0x40
 80049b8:	f883 2270 	strb.w	r2, [r3, #624]	; 0x270
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2241      	movs	r2, #65	; 0x41
 80049c0:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	227f      	movs	r2, #127	; 0x7f
 80049c8:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	223f      	movs	r2, #63	; 0x3f
 80049d0:	f883 2273 	strb.w	r2, [r3, #627]	; 0x273
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2241      	movs	r2, #65	; 0x41
 80049e0:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	227f      	movs	r2, #127	; 0x7f
 80049e8:	f883 2277 	strb.w	r2, [r3, #631]	; 0x277
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	227f      	movs	r2, #127	; 0x7f
 80049f0:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2208      	movs	r2, #8
 80049f8:	f883 2279 	strb.w	r2, [r3, #633]	; 0x279
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	221c      	movs	r2, #28
 8004a00:	f883 227a 	strb.w	r2, [r3, #634]	; 0x27a
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2277      	movs	r2, #119	; 0x77
 8004a08:	f883 227b 	strb.w	r2, [r3, #635]	; 0x27b
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2263      	movs	r2, #99	; 0x63
 8004a10:	f883 227c 	strb.w	r2, [r3, #636]	; 0x27c
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2241      	movs	r2, #65	; 0x41
 8004a18:	f883 227e 	strb.w	r2, [r3, #638]	; 0x27e
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	227f      	movs	r2, #127	; 0x7f
 8004a20:	f883 227f 	strb.w	r2, [r3, #639]	; 0x27f
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	227f      	movs	r2, #127	; 0x7f
 8004a28:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2241      	movs	r2, #65	; 0x41
 8004a30:	f883 2281 	strb.w	r2, [r3, #641]	; 0x281
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2240      	movs	r2, #64	; 0x40
 8004a38:	f883 2282 	strb.w	r2, [r3, #642]	; 0x282
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2260      	movs	r2, #96	; 0x60
 8004a40:	f883 2283 	strb.w	r2, [r3, #643]	; 0x283
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2270      	movs	r2, #112	; 0x70
 8004a48:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	227f      	movs	r2, #127	; 0x7f
 8004a50:	f883 2286 	strb.w	r2, [r3, #646]	; 0x286
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	227f      	movs	r2, #127	; 0x7f
 8004a58:	f883 2287 	strb.w	r2, [r3, #647]	; 0x287
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	220e      	movs	r2, #14
 8004a60:	f883 2288 	strb.w	r2, [r3, #648]	; 0x288
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	221c      	movs	r2, #28
 8004a68:	f883 2289 	strb.w	r2, [r3, #649]	; 0x289
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	220e      	movs	r2, #14
 8004a70:	f883 228a 	strb.w	r2, [r3, #650]	; 0x28a
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	227f      	movs	r2, #127	; 0x7f
 8004a78:	f883 228b 	strb.w	r2, [r3, #651]	; 0x28b
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	227f      	movs	r2, #127	; 0x7f
 8004a80:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	227f      	movs	r2, #127	; 0x7f
 8004a88:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	227f      	movs	r2, #127	; 0x7f
 8004a90:	f883 228f 	strb.w	r2, [r3, #655]	; 0x28f
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2206      	movs	r2, #6
 8004a98:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	220c      	movs	r2, #12
 8004aa0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2218      	movs	r2, #24
 8004aa8:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	227f      	movs	r2, #127	; 0x7f
 8004ab0:	f883 2293 	strb.w	r2, [r3, #659]	; 0x293
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	227f      	movs	r2, #127	; 0x7f
 8004ab8:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	221c      	movs	r2, #28
 8004ac0:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	223e      	movs	r2, #62	; 0x3e
 8004ac8:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2263      	movs	r2, #99	; 0x63
 8004ad0:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2241      	movs	r2, #65	; 0x41
 8004ad8:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2263      	movs	r2, #99	; 0x63
 8004ae0:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	223e      	movs	r2, #62	; 0x3e
 8004ae8:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	221c      	movs	r2, #28
 8004af0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2241      	movs	r2, #65	; 0x41
 8004af8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	227f      	movs	r2, #127	; 0x7f
 8004b00:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	227f      	movs	r2, #127	; 0x7f
 8004b08:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2249      	movs	r2, #73	; 0x49
 8004b10:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2209      	movs	r2, #9
 8004b18:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	220f      	movs	r2, #15
 8004b20:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2206      	movs	r2, #6
 8004b28:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	221e      	movs	r2, #30
 8004b30:	f883 22a6 	strb.w	r2, [r3, #678]	; 0x2a6
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	223f      	movs	r2, #63	; 0x3f
 8004b38:	f883 22a7 	strb.w	r2, [r3, #679]	; 0x2a7
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2221      	movs	r2, #33	; 0x21
 8004b40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2271      	movs	r2, #113	; 0x71
 8004b48:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	227f      	movs	r2, #127	; 0x7f
 8004b50:	f883 22aa 	strb.w	r2, [r3, #682]	; 0x2aa
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	225e      	movs	r2, #94	; 0x5e
 8004b58:	f883 22ab 	strb.w	r2, [r3, #683]	; 0x2ab
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2241      	movs	r2, #65	; 0x41
 8004b60:	f883 22ae 	strb.w	r2, [r3, #686]	; 0x2ae
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	227f      	movs	r2, #127	; 0x7f
 8004b68:	f883 22af 	strb.w	r2, [r3, #687]	; 0x2af
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	227f      	movs	r2, #127	; 0x7f
 8004b70:	f883 22b0 	strb.w	r2, [r3, #688]	; 0x2b0
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2209      	movs	r2, #9
 8004b78:	f883 22b1 	strb.w	r2, [r3, #689]	; 0x2b1
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2219      	movs	r2, #25
 8004b80:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	227f      	movs	r2, #127	; 0x7f
 8004b88:	f883 22b3 	strb.w	r2, [r3, #691]	; 0x2b3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2266      	movs	r2, #102	; 0x66
 8004b90:	f883 22b4 	strb.w	r2, [r3, #692]	; 0x2b4
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2226      	movs	r2, #38	; 0x26
 8004b98:	f883 22b6 	strb.w	r2, [r3, #694]	; 0x2b6
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	226f      	movs	r2, #111	; 0x6f
 8004ba0:	f883 22b7 	strb.w	r2, [r3, #695]	; 0x2b7
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	224d      	movs	r2, #77	; 0x4d
 8004ba8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2259      	movs	r2, #89	; 0x59
 8004bb0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2273      	movs	r2, #115	; 0x73
 8004bb8:	f883 22ba 	strb.w	r2, [r3, #698]	; 0x2ba
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2232      	movs	r2, #50	; 0x32
 8004bc0:	f883 22bb 	strb.w	r2, [r3, #699]	; 0x2bb
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2203      	movs	r2, #3
 8004bc8:	f883 22be 	strb.w	r2, [r3, #702]	; 0x2be
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2241      	movs	r2, #65	; 0x41
 8004bd0:	f883 22bf 	strb.w	r2, [r3, #703]	; 0x2bf
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	227f      	movs	r2, #127	; 0x7f
 8004bd8:	f883 22c0 	strb.w	r2, [r3, #704]	; 0x2c0
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	227f      	movs	r2, #127	; 0x7f
 8004be0:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2241      	movs	r2, #65	; 0x41
 8004be8:	f883 22c2 	strb.w	r2, [r3, #706]	; 0x2c2
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2203      	movs	r2, #3
 8004bf0:	f883 22c3 	strb.w	r2, [r3, #707]	; 0x2c3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	227f      	movs	r2, #127	; 0x7f
 8004bf8:	f883 22c6 	strb.w	r2, [r3, #710]	; 0x2c6
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	227f      	movs	r2, #127	; 0x7f
 8004c00:	f883 22c7 	strb.w	r2, [r3, #711]	; 0x2c7
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2240      	movs	r2, #64	; 0x40
 8004c08:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2240      	movs	r2, #64	; 0x40
 8004c10:	f883 22c9 	strb.w	r2, [r3, #713]	; 0x2c9
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	227f      	movs	r2, #127	; 0x7f
 8004c18:	f883 22ca 	strb.w	r2, [r3, #714]	; 0x2ca
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	227f      	movs	r2, #127	; 0x7f
 8004c20:	f883 22cb 	strb.w	r2, [r3, #715]	; 0x2cb
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	221f      	movs	r2, #31
 8004c28:	f883 22ce 	strb.w	r2, [r3, #718]	; 0x2ce
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	223f      	movs	r2, #63	; 0x3f
 8004c30:	f883 22cf 	strb.w	r2, [r3, #719]	; 0x2cf
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2260      	movs	r2, #96	; 0x60
 8004c38:	f883 22d0 	strb.w	r2, [r3, #720]	; 0x2d0
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2260      	movs	r2, #96	; 0x60
 8004c40:	f883 22d1 	strb.w	r2, [r3, #721]	; 0x2d1
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	223f      	movs	r2, #63	; 0x3f
 8004c48:	f883 22d2 	strb.w	r2, [r3, #722]	; 0x2d2
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	221f      	movs	r2, #31
 8004c50:	f883 22d3 	strb.w	r2, [r3, #723]	; 0x2d3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	227f      	movs	r2, #127	; 0x7f
 8004c58:	f883 22d6 	strb.w	r2, [r3, #726]	; 0x2d6
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	227f      	movs	r2, #127	; 0x7f
 8004c60:	f883 22d7 	strb.w	r2, [r3, #727]	; 0x2d7
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2230      	movs	r2, #48	; 0x30
 8004c68:	f883 22d8 	strb.w	r2, [r3, #728]	; 0x2d8
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2218      	movs	r2, #24
 8004c70:	f883 22d9 	strb.w	r2, [r3, #729]	; 0x2d9
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2230      	movs	r2, #48	; 0x30
 8004c78:	f883 22da 	strb.w	r2, [r3, #730]	; 0x2da
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	227f      	movs	r2, #127	; 0x7f
 8004c80:	f883 22db 	strb.w	r2, [r3, #731]	; 0x2db
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	227f      	movs	r2, #127	; 0x7f
 8004c88:	f883 22dc 	strb.w	r2, [r3, #732]	; 0x2dc
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2243      	movs	r2, #67	; 0x43
 8004c90:	f883 22de 	strb.w	r2, [r3, #734]	; 0x2de
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2267      	movs	r2, #103	; 0x67
 8004c98:	f883 22df 	strb.w	r2, [r3, #735]	; 0x2df
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	223c      	movs	r2, #60	; 0x3c
 8004ca0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2218      	movs	r2, #24
 8004ca8:	f883 22e1 	strb.w	r2, [r3, #737]	; 0x2e1
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	223c      	movs	r2, #60	; 0x3c
 8004cb0:	f883 22e2 	strb.w	r2, [r3, #738]	; 0x2e2
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2267      	movs	r2, #103	; 0x67
 8004cb8:	f883 22e3 	strb.w	r2, [r3, #739]	; 0x2e3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2243      	movs	r2, #67	; 0x43
 8004cc0:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2207      	movs	r2, #7
 8004cc8:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	224f      	movs	r2, #79	; 0x4f
 8004cd0:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2278      	movs	r2, #120	; 0x78
 8004cd8:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2278      	movs	r2, #120	; 0x78
 8004ce0:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	224f      	movs	r2, #79	; 0x4f
 8004ce8:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2207      	movs	r2, #7
 8004cf0:	f883 22eb 	strb.w	r2, [r3, #747]	; 0x2eb
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2247      	movs	r2, #71	; 0x47
 8004cf8:	f883 22ee 	strb.w	r2, [r3, #750]	; 0x2ee
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2263      	movs	r2, #99	; 0x63
 8004d00:	f883 22ef 	strb.w	r2, [r3, #751]	; 0x2ef
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2271      	movs	r2, #113	; 0x71
 8004d08:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2259      	movs	r2, #89	; 0x59
 8004d10:	f883 22f1 	strb.w	r2, [r3, #753]	; 0x2f1
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	224d      	movs	r2, #77	; 0x4d
 8004d18:	f883 22f2 	strb.w	r2, [r3, #754]	; 0x2f2
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2267      	movs	r2, #103	; 0x67
 8004d20:	f883 22f3 	strb.w	r2, [r3, #755]	; 0x2f3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2273      	movs	r2, #115	; 0x73
 8004d28:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	227f      	movs	r2, #127	; 0x7f
 8004d30:	f883 22f7 	strb.w	r2, [r3, #759]	; 0x2f7
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	227f      	movs	r2, #127	; 0x7f
 8004d38:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2241      	movs	r2, #65	; 0x41
 8004d40:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2241      	movs	r2, #65	; 0x41
 8004d48:	f883 22fa 	strb.w	r2, [r3, #762]	; 0x2fa
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 22fe 	strb.w	r2, [r3, #766]	; 0x2fe
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2203      	movs	r2, #3
 8004d58:	f883 22ff 	strb.w	r2, [r3, #767]	; 0x2ff
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2206      	movs	r2, #6
 8004d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	220c      	movs	r2, #12
 8004d68:	f883 2301 	strb.w	r2, [r3, #769]	; 0x301
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2218      	movs	r2, #24
 8004d70:	f883 2302 	strb.w	r2, [r3, #770]	; 0x302
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2230      	movs	r2, #48	; 0x30
 8004d78:	f883 2303 	strb.w	r2, [r3, #771]	; 0x303
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2260      	movs	r2, #96	; 0x60
 8004d80:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2241      	movs	r2, #65	; 0x41
 8004d88:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2241      	movs	r2, #65	; 0x41
 8004d90:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	227f      	movs	r2, #127	; 0x7f
 8004d98:	f883 2309 	strb.w	r2, [r3, #777]	; 0x309
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	227f      	movs	r2, #127	; 0x7f
 8004da0:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2208      	movs	r2, #8
 8004da8:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	220c      	movs	r2, #12
 8004db0:	f883 230f 	strb.w	r2, [r3, #783]	; 0x30f
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2206      	movs	r2, #6
 8004db8:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2203      	movs	r2, #3
 8004dc0:	f883 2311 	strb.w	r2, [r3, #785]	; 0x311
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2206      	movs	r2, #6
 8004dc8:	f883 2312 	strb.w	r2, [r3, #786]	; 0x312
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	220c      	movs	r2, #12
 8004dd0:	f883 2313 	strb.w	r2, [r3, #787]	; 0x313
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2208      	movs	r2, #8
 8004dd8:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2280      	movs	r2, #128	; 0x80
 8004de0:	f883 2316 	strb.w	r2, [r3, #790]	; 0x316
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2280      	movs	r2, #128	; 0x80
 8004de8:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2280      	movs	r2, #128	; 0x80
 8004df0:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2280      	movs	r2, #128	; 0x80
 8004df8:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2280      	movs	r2, #128	; 0x80
 8004e00:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2280      	movs	r2, #128	; 0x80
 8004e08:	f883 231b 	strb.w	r2, [r3, #795]	; 0x31b
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2280      	movs	r2, #128	; 0x80
 8004e10:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2280      	movs	r2, #128	; 0x80
 8004e18:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2203      	movs	r2, #3
 8004e20:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2207      	movs	r2, #7
 8004e28:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2204      	movs	r2, #4
 8004e30:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2220      	movs	r2, #32
 8004e38:	f883 2326 	strb.w	r2, [r3, #806]	; 0x326
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2274      	movs	r2, #116	; 0x74
 8004e40:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2254      	movs	r2, #84	; 0x54
 8004e48:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2254      	movs	r2, #84	; 0x54
 8004e50:	f883 2329 	strb.w	r2, [r3, #809]	; 0x329
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	223c      	movs	r2, #60	; 0x3c
 8004e58:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2278      	movs	r2, #120	; 0x78
 8004e60:	f883 232b 	strb.w	r2, [r3, #811]	; 0x32b
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2240      	movs	r2, #64	; 0x40
 8004e68:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2241      	movs	r2, #65	; 0x41
 8004e70:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	227f      	movs	r2, #127	; 0x7f
 8004e78:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	223f      	movs	r2, #63	; 0x3f
 8004e80:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2248      	movs	r2, #72	; 0x48
 8004e88:	f883 2331 	strb.w	r2, [r3, #817]	; 0x331
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2248      	movs	r2, #72	; 0x48
 8004e90:	f883 2332 	strb.w	r2, [r3, #818]	; 0x332
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2278      	movs	r2, #120	; 0x78
 8004e98:	f883 2333 	strb.w	r2, [r3, #819]	; 0x333
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2230      	movs	r2, #48	; 0x30
 8004ea0:	f883 2334 	strb.w	r2, [r3, #820]	; 0x334
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2238      	movs	r2, #56	; 0x38
 8004ea8:	f883 2336 	strb.w	r2, [r3, #822]	; 0x336
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	227c      	movs	r2, #124	; 0x7c
 8004eb0:	f883 2337 	strb.w	r2, [r3, #823]	; 0x337
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2244      	movs	r2, #68	; 0x44
 8004eb8:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2244      	movs	r2, #68	; 0x44
 8004ec0:	f883 2339 	strb.w	r2, [r3, #825]	; 0x339
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	226c      	movs	r2, #108	; 0x6c
 8004ec8:	f883 233a 	strb.w	r2, [r3, #826]	; 0x33a
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2228      	movs	r2, #40	; 0x28
 8004ed0:	f883 233b 	strb.w	r2, [r3, #827]	; 0x33b
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2230      	movs	r2, #48	; 0x30
 8004ed8:	f883 233e 	strb.w	r2, [r3, #830]	; 0x33e
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2278      	movs	r2, #120	; 0x78
 8004ee0:	f883 233f 	strb.w	r2, [r3, #831]	; 0x33f
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2248      	movs	r2, #72	; 0x48
 8004ee8:	f883 2340 	strb.w	r2, [r3, #832]	; 0x340
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2249      	movs	r2, #73	; 0x49
 8004ef0:	f883 2341 	strb.w	r2, [r3, #833]	; 0x341
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	223f      	movs	r2, #63	; 0x3f
 8004ef8:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	227f      	movs	r2, #127	; 0x7f
 8004f00:	f883 2343 	strb.w	r2, [r3, #835]	; 0x343
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2240      	movs	r2, #64	; 0x40
 8004f08:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2238      	movs	r2, #56	; 0x38
 8004f10:	f883 2346 	strb.w	r2, [r3, #838]	; 0x346
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	227c      	movs	r2, #124	; 0x7c
 8004f18:	f883 2347 	strb.w	r2, [r3, #839]	; 0x347
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2254      	movs	r2, #84	; 0x54
 8004f20:	f883 2348 	strb.w	r2, [r3, #840]	; 0x348
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2254      	movs	r2, #84	; 0x54
 8004f28:	f883 2349 	strb.w	r2, [r3, #841]	; 0x349
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	225c      	movs	r2, #92	; 0x5c
 8004f30:	f883 234a 	strb.w	r2, [r3, #842]	; 0x34a
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2218      	movs	r2, #24
 8004f38:	f883 234b 	strb.w	r2, [r3, #843]	; 0x34b
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2248      	movs	r2, #72	; 0x48
 8004f40:	f883 234e 	strb.w	r2, [r3, #846]	; 0x34e
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	227e      	movs	r2, #126	; 0x7e
 8004f48:	f883 234f 	strb.w	r2, [r3, #847]	; 0x34f
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	227f      	movs	r2, #127	; 0x7f
 8004f50:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2249      	movs	r2, #73	; 0x49
 8004f58:	f883 2351 	strb.w	r2, [r3, #849]	; 0x351
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2203      	movs	r2, #3
 8004f60:	f883 2352 	strb.w	r2, [r3, #850]	; 0x352
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 2353 	strb.w	r2, [r3, #851]	; 0x353
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2298      	movs	r2, #152	; 0x98
 8004f70:	f883 2356 	strb.w	r2, [r3, #854]	; 0x356
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	22bc      	movs	r2, #188	; 0xbc
 8004f78:	f883 2357 	strb.w	r2, [r3, #855]	; 0x357
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	22a4      	movs	r2, #164	; 0xa4
 8004f80:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	22a4      	movs	r2, #164	; 0xa4
 8004f88:	f883 2359 	strb.w	r2, [r3, #857]	; 0x359
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	22f8      	movs	r2, #248	; 0xf8
 8004f90:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	227c      	movs	r2, #124	; 0x7c
 8004f98:	f883 235b 	strb.w	r2, [r3, #859]	; 0x35b
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2204      	movs	r2, #4
 8004fa0:	f883 235c 	strb.w	r2, [r3, #860]	; 0x35c
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2241      	movs	r2, #65	; 0x41
 8004fa8:	f883 235e 	strb.w	r2, [r3, #862]	; 0x35e
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	227f      	movs	r2, #127	; 0x7f
 8004fb0:	f883 235f 	strb.w	r2, [r3, #863]	; 0x35f
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	227f      	movs	r2, #127	; 0x7f
 8004fb8:	f883 2360 	strb.w	r2, [r3, #864]	; 0x360
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2208      	movs	r2, #8
 8004fc0:	f883 2361 	strb.w	r2, [r3, #865]	; 0x361
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2204      	movs	r2, #4
 8004fc8:	f883 2362 	strb.w	r2, [r3, #866]	; 0x362
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	227c      	movs	r2, #124	; 0x7c
 8004fd0:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2278      	movs	r2, #120	; 0x78
 8004fd8:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2244      	movs	r2, #68	; 0x44
 8004fe0:	f883 2367 	strb.w	r2, [r3, #871]	; 0x367
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	227d      	movs	r2, #125	; 0x7d
 8004fe8:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	227d      	movs	r2, #125	; 0x7d
 8004ff0:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2240      	movs	r2, #64	; 0x40
 8004ff8:	f883 236a 	strb.w	r2, [r3, #874]	; 0x36a
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2260      	movs	r2, #96	; 0x60
 8005000:	f883 236e 	strb.w	r2, [r3, #878]	; 0x36e
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	22e0      	movs	r2, #224	; 0xe0
 8005008:	f883 236f 	strb.w	r2, [r3, #879]	; 0x36f
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2280      	movs	r2, #128	; 0x80
 8005010:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2280      	movs	r2, #128	; 0x80
 8005018:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	22fd      	movs	r2, #253	; 0xfd
 8005020:	f883 2372 	strb.w	r2, [r3, #882]	; 0x372
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	227d      	movs	r2, #125	; 0x7d
 8005028:	f883 2373 	strb.w	r2, [r3, #883]	; 0x373
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2241      	movs	r2, #65	; 0x41
 8005030:	f883 2376 	strb.w	r2, [r3, #886]	; 0x376
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	227f      	movs	r2, #127	; 0x7f
 8005038:	f883 2377 	strb.w	r2, [r3, #887]	; 0x377
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	227f      	movs	r2, #127	; 0x7f
 8005040:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2210      	movs	r2, #16
 8005048:	f883 2379 	strb.w	r2, [r3, #889]	; 0x379
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2238      	movs	r2, #56	; 0x38
 8005050:	f883 237a 	strb.w	r2, [r3, #890]	; 0x37a
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	226c      	movs	r2, #108	; 0x6c
 8005058:	f883 237b 	strb.w	r2, [r3, #891]	; 0x37b
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2244      	movs	r2, #68	; 0x44
 8005060:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2241      	movs	r2, #65	; 0x41
 8005068:	f883 237f 	strb.w	r2, [r3, #895]	; 0x37f
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	227f      	movs	r2, #127	; 0x7f
 8005070:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	227f      	movs	r2, #127	; 0x7f
 8005078:	f883 2381 	strb.w	r2, [r3, #897]	; 0x381
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2240      	movs	r2, #64	; 0x40
 8005080:	f883 2382 	strb.w	r2, [r3, #898]	; 0x382
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	227c      	movs	r2, #124	; 0x7c
 8005088:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	227c      	movs	r2, #124	; 0x7c
 8005090:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2218      	movs	r2, #24
 8005098:	f883 2388 	strb.w	r2, [r3, #904]	; 0x388
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2238      	movs	r2, #56	; 0x38
 80050a0:	f883 2389 	strb.w	r2, [r3, #905]	; 0x389
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	221c      	movs	r2, #28
 80050a8:	f883 238a 	strb.w	r2, [r3, #906]	; 0x38a
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	227c      	movs	r2, #124	; 0x7c
 80050b0:	f883 238b 	strb.w	r2, [r3, #907]	; 0x38b
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2278      	movs	r2, #120	; 0x78
 80050b8:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	227c      	movs	r2, #124	; 0x7c
 80050c0:	f883 238e 	strb.w	r2, [r3, #910]	; 0x38e
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	227c      	movs	r2, #124	; 0x7c
 80050c8:	f883 238f 	strb.w	r2, [r3, #911]	; 0x38f
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2204      	movs	r2, #4
 80050d0:	f883 2390 	strb.w	r2, [r3, #912]	; 0x390
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2204      	movs	r2, #4
 80050d8:	f883 2391 	strb.w	r2, [r3, #913]	; 0x391
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	227c      	movs	r2, #124	; 0x7c
 80050e0:	f883 2392 	strb.w	r2, [r3, #914]	; 0x392
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2278      	movs	r2, #120	; 0x78
 80050e8:	f883 2393 	strb.w	r2, [r3, #915]	; 0x393
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2238      	movs	r2, #56	; 0x38
 80050f0:	f883 2396 	strb.w	r2, [r3, #918]	; 0x396
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	227c      	movs	r2, #124	; 0x7c
 80050f8:	f883 2397 	strb.w	r2, [r3, #919]	; 0x397
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2244      	movs	r2, #68	; 0x44
 8005100:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2244      	movs	r2, #68	; 0x44
 8005108:	f883 2399 	strb.w	r2, [r3, #921]	; 0x399
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	227c      	movs	r2, #124	; 0x7c
 8005110:	f883 239a 	strb.w	r2, [r3, #922]	; 0x39a
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2238      	movs	r2, #56	; 0x38
 8005118:	f883 239b 	strb.w	r2, [r3, #923]	; 0x39b
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2284      	movs	r2, #132	; 0x84
 8005120:	f883 239e 	strb.w	r2, [r3, #926]	; 0x39e
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	22fc      	movs	r2, #252	; 0xfc
 8005128:	f883 239f 	strb.w	r2, [r3, #927]	; 0x39f
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	22f8      	movs	r2, #248	; 0xf8
 8005130:	f883 23a0 	strb.w	r2, [r3, #928]	; 0x3a0
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	22a4      	movs	r2, #164	; 0xa4
 8005138:	f883 23a1 	strb.w	r2, [r3, #929]	; 0x3a1
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2224      	movs	r2, #36	; 0x24
 8005140:	f883 23a2 	strb.w	r2, [r3, #930]	; 0x3a2
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	223c      	movs	r2, #60	; 0x3c
 8005148:	f883 23a3 	strb.w	r2, [r3, #931]	; 0x3a3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2218      	movs	r2, #24
 8005150:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2218      	movs	r2, #24
 8005158:	f883 23a6 	strb.w	r2, [r3, #934]	; 0x3a6
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	223c      	movs	r2, #60	; 0x3c
 8005160:	f883 23a7 	strb.w	r2, [r3, #935]	; 0x3a7
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2224      	movs	r2, #36	; 0x24
 8005168:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	22a4      	movs	r2, #164	; 0xa4
 8005170:	f883 23a9 	strb.w	r2, [r3, #937]	; 0x3a9
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	22f8      	movs	r2, #248	; 0xf8
 8005178:	f883 23aa 	strb.w	r2, [r3, #938]	; 0x3aa
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	22fc      	movs	r2, #252	; 0xfc
 8005180:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2284      	movs	r2, #132	; 0x84
 8005188:	f883 23ac 	strb.w	r2, [r3, #940]	; 0x3ac
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2244      	movs	r2, #68	; 0x44
 8005190:	f883 23ae 	strb.w	r2, [r3, #942]	; 0x3ae
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	227c      	movs	r2, #124	; 0x7c
 8005198:	f883 23af 	strb.w	r2, [r3, #943]	; 0x3af
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2278      	movs	r2, #120	; 0x78
 80051a0:	f883 23b0 	strb.w	r2, [r3, #944]	; 0x3b0
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	224c      	movs	r2, #76	; 0x4c
 80051a8:	f883 23b1 	strb.w	r2, [r3, #945]	; 0x3b1
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2204      	movs	r2, #4
 80051b0:	f883 23b2 	strb.w	r2, [r3, #946]	; 0x3b2
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	221c      	movs	r2, #28
 80051b8:	f883 23b3 	strb.w	r2, [r3, #947]	; 0x3b3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2218      	movs	r2, #24
 80051c0:	f883 23b4 	strb.w	r2, [r3, #948]	; 0x3b4
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2248      	movs	r2, #72	; 0x48
 80051c8:	f883 23b6 	strb.w	r2, [r3, #950]	; 0x3b6
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	225c      	movs	r2, #92	; 0x5c
 80051d0:	f883 23b7 	strb.w	r2, [r3, #951]	; 0x3b7
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2254      	movs	r2, #84	; 0x54
 80051d8:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2254      	movs	r2, #84	; 0x54
 80051e0:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2274      	movs	r2, #116	; 0x74
 80051e8:	f883 23ba 	strb.w	r2, [r3, #954]	; 0x3ba
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2224      	movs	r2, #36	; 0x24
 80051f0:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2204      	movs	r2, #4
 80051f8:	f883 23bf 	strb.w	r2, [r3, #959]	; 0x3bf
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	223e      	movs	r2, #62	; 0x3e
 8005200:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	227f      	movs	r2, #127	; 0x7f
 8005208:	f883 23c1 	strb.w	r2, [r3, #961]	; 0x3c1
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2244      	movs	r2, #68	; 0x44
 8005210:	f883 23c2 	strb.w	r2, [r3, #962]	; 0x3c2
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2224      	movs	r2, #36	; 0x24
 8005218:	f883 23c3 	strb.w	r2, [r3, #963]	; 0x3c3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	223c      	movs	r2, #60	; 0x3c
 8005220:	f883 23c6 	strb.w	r2, [r3, #966]	; 0x3c6
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	227c      	movs	r2, #124	; 0x7c
 8005228:	f883 23c7 	strb.w	r2, [r3, #967]	; 0x3c7
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2240      	movs	r2, #64	; 0x40
 8005230:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2240      	movs	r2, #64	; 0x40
 8005238:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	223c      	movs	r2, #60	; 0x3c
 8005240:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	227c      	movs	r2, #124	; 0x7c
 8005248:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2240      	movs	r2, #64	; 0x40
 8005250:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	221c      	movs	r2, #28
 8005258:	f883 23ce 	strb.w	r2, [r3, #974]	; 0x3ce
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	223c      	movs	r2, #60	; 0x3c
 8005260:	f883 23cf 	strb.w	r2, [r3, #975]	; 0x3cf
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2260      	movs	r2, #96	; 0x60
 8005268:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2260      	movs	r2, #96	; 0x60
 8005270:	f883 23d1 	strb.w	r2, [r3, #977]	; 0x3d1
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	223c      	movs	r2, #60	; 0x3c
 8005278:	f883 23d2 	strb.w	r2, [r3, #978]	; 0x3d2
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	221c      	movs	r2, #28
 8005280:	f883 23d3 	strb.w	r2, [r3, #979]	; 0x3d3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	223c      	movs	r2, #60	; 0x3c
 8005288:	f883 23d6 	strb.w	r2, [r3, #982]	; 0x3d6
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	227c      	movs	r2, #124	; 0x7c
 8005290:	f883 23d7 	strb.w	r2, [r3, #983]	; 0x3d7
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2270      	movs	r2, #112	; 0x70
 8005298:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2238      	movs	r2, #56	; 0x38
 80052a0:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2270      	movs	r2, #112	; 0x70
 80052a8:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	227c      	movs	r2, #124	; 0x7c
 80052b0:	f883 23db 	strb.w	r2, [r3, #987]	; 0x3db
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	223c      	movs	r2, #60	; 0x3c
 80052b8:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2244      	movs	r2, #68	; 0x44
 80052c0:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	226c      	movs	r2, #108	; 0x6c
 80052c8:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2238      	movs	r2, #56	; 0x38
 80052d0:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2210      	movs	r2, #16
 80052d8:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2238      	movs	r2, #56	; 0x38
 80052e0:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	226c      	movs	r2, #108	; 0x6c
 80052e8:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2244      	movs	r2, #68	; 0x44
 80052f0:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	229c      	movs	r2, #156	; 0x9c
 80052f8:	f883 23e6 	strb.w	r2, [r3, #998]	; 0x3e6
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	22bc      	movs	r2, #188	; 0xbc
 8005300:	f883 23e7 	strb.w	r2, [r3, #999]	; 0x3e7
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	22a0      	movs	r2, #160	; 0xa0
 8005308:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	22a0      	movs	r2, #160	; 0xa0
 8005310:	f883 23e9 	strb.w	r2, [r3, #1001]	; 0x3e9
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	22fc      	movs	r2, #252	; 0xfc
 8005318:	f883 23ea 	strb.w	r2, [r3, #1002]	; 0x3ea
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	227c      	movs	r2, #124	; 0x7c
 8005320:	f883 23eb 	strb.w	r2, [r3, #1003]	; 0x3eb
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	224c      	movs	r2, #76	; 0x4c
 8005328:	f883 23ee 	strb.w	r2, [r3, #1006]	; 0x3ee
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2264      	movs	r2, #100	; 0x64
 8005330:	f883 23ef 	strb.w	r2, [r3, #1007]	; 0x3ef
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2274      	movs	r2, #116	; 0x74
 8005338:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	225c      	movs	r2, #92	; 0x5c
 8005340:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	224c      	movs	r2, #76	; 0x4c
 8005348:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2264      	movs	r2, #100	; 0x64
 8005350:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2208      	movs	r2, #8
 8005358:	f883 23f6 	strb.w	r2, [r3, #1014]	; 0x3f6
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2208      	movs	r2, #8
 8005360:	f883 23f7 	strb.w	r2, [r3, #1015]	; 0x3f7
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	223e      	movs	r2, #62	; 0x3e
 8005368:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2277      	movs	r2, #119	; 0x77
 8005370:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2241      	movs	r2, #65	; 0x41
 8005378:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2241      	movs	r2, #65	; 0x41
 8005380:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2277      	movs	r2, #119	; 0x77
 8005388:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2277      	movs	r2, #119	; 0x77
 8005390:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2241      	movs	r2, #65	; 0x41
 8005398:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2241      	movs	r2, #65	; 0x41
 80053a0:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2277      	movs	r2, #119	; 0x77
 80053a8:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	223e      	movs	r2, #62	; 0x3e
 80053b0:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2208      	movs	r2, #8
 80053b8:	f883 240a 	strb.w	r2, [r3, #1034]	; 0x40a
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2208      	movs	r2, #8
 80053c0:	f883 240b 	strb.w	r2, [r3, #1035]	; 0x40b
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2202      	movs	r2, #2
 80053c8:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2203      	movs	r2, #3
 80053d0:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2203      	movs	r2, #3
 80053e0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2203      	movs	r2, #3
 80053f0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2270      	movs	r2, #112	; 0x70
 8005400:	f883 2416 	strb.w	r2, [r3, #1046]	; 0x416
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2278      	movs	r2, #120	; 0x78
 8005408:	f883 2417 	strb.w	r2, [r3, #1047]	; 0x417
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	224c      	movs	r2, #76	; 0x4c
 8005410:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2246      	movs	r2, #70	; 0x46
 8005418:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	224c      	movs	r2, #76	; 0x4c
 8005420:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2278      	movs	r2, #120	; 0x78
 8005428:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2270      	movs	r2, #112	; 0x70
 8005430:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	220e      	movs	r2, #14
 8005438:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	229f      	movs	r2, #159	; 0x9f
 8005440:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2291      	movs	r2, #145	; 0x91
 8005448:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	22b1      	movs	r2, #177	; 0xb1
 8005450:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	22fb      	movs	r2, #251	; 0xfb
 8005458:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	224a      	movs	r2, #74	; 0x4a
 8005460:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	223a      	movs	r2, #58	; 0x3a
 8005468:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	227a      	movs	r2, #122	; 0x7a
 8005470:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2240      	movs	r2, #64	; 0x40
 8005478:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2240      	movs	r2, #64	; 0x40
 8005480:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	227a      	movs	r2, #122	; 0x7a
 8005488:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	227a      	movs	r2, #122	; 0x7a
 8005490:	f883 242b 	strb.w	r2, [r3, #1067]	; 0x42b
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2240      	movs	r2, #64	; 0x40
 8005498:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2238      	movs	r2, #56	; 0x38
 80054a0:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	227c      	movs	r2, #124	; 0x7c
 80054a8:	f883 242f 	strb.w	r2, [r3, #1071]	; 0x42f
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2254      	movs	r2, #84	; 0x54
 80054b0:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2255      	movs	r2, #85	; 0x55
 80054b8:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	225d      	movs	r2, #93	; 0x5d
 80054c0:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2219      	movs	r2, #25
 80054c8:	f883 2433 	strb.w	r2, [r3, #1075]	; 0x433
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2223      	movs	r2, #35	; 0x23
 80054d8:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2275      	movs	r2, #117	; 0x75
 80054e0:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2255      	movs	r2, #85	; 0x55
 80054e8:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2255      	movs	r2, #85	; 0x55
 80054f0:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	227d      	movs	r2, #125	; 0x7d
 80054f8:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	227b      	movs	r2, #123	; 0x7b
 8005500:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2242      	movs	r2, #66	; 0x42
 8005508:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2221      	movs	r2, #33	; 0x21
 8005510:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2275      	movs	r2, #117	; 0x75
 8005518:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2254      	movs	r2, #84	; 0x54
 8005520:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2254      	movs	r2, #84	; 0x54
 8005528:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	227d      	movs	r2, #125	; 0x7d
 8005530:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2279      	movs	r2, #121	; 0x79
 8005538:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2240      	movs	r2, #64	; 0x40
 8005540:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2221      	movs	r2, #33	; 0x21
 8005548:	f883 2446 	strb.w	r2, [r3, #1094]	; 0x446
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2275      	movs	r2, #117	; 0x75
 8005550:	f883 2447 	strb.w	r2, [r3, #1095]	; 0x447
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2255      	movs	r2, #85	; 0x55
 8005558:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2254      	movs	r2, #84	; 0x54
 8005560:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	227c      	movs	r2, #124	; 0x7c
 8005568:	f883 244a 	strb.w	r2, [r3, #1098]	; 0x44a
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2278      	movs	r2, #120	; 0x78
 8005570:	f883 244b 	strb.w	r2, [r3, #1099]	; 0x44b
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2240      	movs	r2, #64	; 0x40
 8005578:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2220      	movs	r2, #32
 8005580:	f883 244e 	strb.w	r2, [r3, #1102]	; 0x44e
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2274      	movs	r2, #116	; 0x74
 8005588:	f883 244f 	strb.w	r2, [r3, #1103]	; 0x44f
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2257      	movs	r2, #87	; 0x57
 8005590:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2257      	movs	r2, #87	; 0x57
 8005598:	f883 2451 	strb.w	r2, [r3, #1105]	; 0x451
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	227c      	movs	r2, #124	; 0x7c
 80055a0:	f883 2452 	strb.w	r2, [r3, #1106]	; 0x452
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2278      	movs	r2, #120	; 0x78
 80055a8:	f883 2453 	strb.w	r2, [r3, #1107]	; 0x453
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2240      	movs	r2, #64	; 0x40
 80055b0:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2218      	movs	r2, #24
 80055b8:	f883 2456 	strb.w	r2, [r3, #1110]	; 0x456
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	223c      	movs	r2, #60	; 0x3c
 80055c0:	f883 2457 	strb.w	r2, [r3, #1111]	; 0x457
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	22a4      	movs	r2, #164	; 0xa4
 80055c8:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	22a4      	movs	r2, #164	; 0xa4
 80055d0:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	22e4      	movs	r2, #228	; 0xe4
 80055d8:	f883 245a 	strb.w	r2, [r3, #1114]	; 0x45a
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2240      	movs	r2, #64	; 0x40
 80055e0:	f883 245b 	strb.w	r2, [r3, #1115]	; 0x45b
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	f883 245e 	strb.w	r2, [r3, #1118]	; 0x45e
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	223b      	movs	r2, #59	; 0x3b
 80055f0:	f883 245f 	strb.w	r2, [r3, #1119]	; 0x45f
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	227d      	movs	r2, #125	; 0x7d
 80055f8:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2255      	movs	r2, #85	; 0x55
 8005600:	f883 2461 	strb.w	r2, [r3, #1121]	; 0x461
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2255      	movs	r2, #85	; 0x55
 8005608:	f883 2462 	strb.w	r2, [r3, #1122]	; 0x462
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	225d      	movs	r2, #93	; 0x5d
 8005610:	f883 2463 	strb.w	r2, [r3, #1123]	; 0x463
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	221b      	movs	r2, #27
 8005618:	f883 2464 	strb.w	r2, [r3, #1124]	; 0x464
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2202      	movs	r2, #2
 8005620:	f883 2465 	strb.w	r2, [r3, #1125]	; 0x465
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2239      	movs	r2, #57	; 0x39
 8005628:	f883 2466 	strb.w	r2, [r3, #1126]	; 0x466
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	227d      	movs	r2, #125	; 0x7d
 8005630:	f883 2467 	strb.w	r2, [r3, #1127]	; 0x467
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2254      	movs	r2, #84	; 0x54
 8005638:	f883 2468 	strb.w	r2, [r3, #1128]	; 0x468
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2254      	movs	r2, #84	; 0x54
 8005640:	f883 2469 	strb.w	r2, [r3, #1129]	; 0x469
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	225d      	movs	r2, #93	; 0x5d
 8005648:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2219      	movs	r2, #25
 8005650:	f883 246b 	strb.w	r2, [r3, #1131]	; 0x46b
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2239      	movs	r2, #57	; 0x39
 8005658:	f883 246e 	strb.w	r2, [r3, #1134]	; 0x46e
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	227d      	movs	r2, #125	; 0x7d
 8005660:	f883 246f 	strb.w	r2, [r3, #1135]	; 0x46f
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2255      	movs	r2, #85	; 0x55
 8005668:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2254      	movs	r2, #84	; 0x54
 8005670:	f883 2471 	strb.w	r2, [r3, #1137]	; 0x471
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	225c      	movs	r2, #92	; 0x5c
 8005678:	f883 2472 	strb.w	r2, [r3, #1138]	; 0x472
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2218      	movs	r2, #24
 8005680:	f883 2473 	strb.w	r2, [r3, #1139]	; 0x473
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2476 	strb.w	r2, [r3, #1142]	; 0x476
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2245      	movs	r2, #69	; 0x45
 8005690:	f883 2477 	strb.w	r2, [r3, #1143]	; 0x477
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	227c      	movs	r2, #124	; 0x7c
 8005698:	f883 2478 	strb.w	r2, [r3, #1144]	; 0x478
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	227c      	movs	r2, #124	; 0x7c
 80056a0:	f883 2479 	strb.w	r2, [r3, #1145]	; 0x479
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2241      	movs	r2, #65	; 0x41
 80056a8:	f883 247a 	strb.w	r2, [r3, #1146]	; 0x47a
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 247b 	strb.w	r2, [r3, #1147]	; 0x47b
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 247e 	strb.w	r2, [r3, #1150]	; 0x47e
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2203      	movs	r2, #3
 80056c0:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2245      	movs	r2, #69	; 0x45
 80056c8:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	227d      	movs	r2, #125	; 0x7d
 80056d0:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	227d      	movs	r2, #125	; 0x7d
 80056d8:	f883 2482 	strb.w	r2, [r3, #1154]	; 0x482
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2243      	movs	r2, #67	; 0x43
 80056e0:	f883 2483 	strb.w	r2, [r3, #1155]	; 0x483
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 2484 	strb.w	r2, [r3, #1156]	; 0x484
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2486 	strb.w	r2, [r3, #1158]	; 0x486
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2245      	movs	r2, #69	; 0x45
 80056f8:	f883 2487 	strb.w	r2, [r3, #1159]	; 0x487
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	227d      	movs	r2, #125	; 0x7d
 8005700:	f883 2488 	strb.w	r2, [r3, #1160]	; 0x488
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	227c      	movs	r2, #124	; 0x7c
 8005708:	f883 2489 	strb.w	r2, [r3, #1161]	; 0x489
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2240      	movs	r2, #64	; 0x40
 8005710:	f883 248a 	strb.w	r2, [r3, #1162]	; 0x48a
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2279      	movs	r2, #121	; 0x79
 8005718:	f883 248e 	strb.w	r2, [r3, #1166]	; 0x48e
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	227d      	movs	r2, #125	; 0x7d
 8005720:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2216      	movs	r2, #22
 8005728:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2212      	movs	r2, #18
 8005730:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2216      	movs	r2, #22
 8005738:	f883 2492 	strb.w	r2, [r3, #1170]	; 0x492
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	227d      	movs	r2, #125	; 0x7d
 8005740:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2279      	movs	r2, #121	; 0x79
 8005748:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2270      	movs	r2, #112	; 0x70
 8005750:	f883 2496 	strb.w	r2, [r3, #1174]	; 0x496
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2278      	movs	r2, #120	; 0x78
 8005758:	f883 2497 	strb.w	r2, [r3, #1175]	; 0x497
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	222b      	movs	r2, #43	; 0x2b
 8005760:	f883 2498 	strb.w	r2, [r3, #1176]	; 0x498
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	222b      	movs	r2, #43	; 0x2b
 8005768:	f883 2499 	strb.w	r2, [r3, #1177]	; 0x499
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2278      	movs	r2, #120	; 0x78
 8005770:	f883 249a 	strb.w	r2, [r3, #1178]	; 0x49a
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2270      	movs	r2, #112	; 0x70
 8005778:	f883 249b 	strb.w	r2, [r3, #1179]	; 0x49b
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2244      	movs	r2, #68	; 0x44
 8005780:	f883 249e 	strb.w	r2, [r3, #1182]	; 0x49e
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	227c      	movs	r2, #124	; 0x7c
 8005788:	f883 249f 	strb.w	r2, [r3, #1183]	; 0x49f
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	227c      	movs	r2, #124	; 0x7c
 8005790:	f883 24a0 	strb.w	r2, [r3, #1184]	; 0x4a0
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2255      	movs	r2, #85	; 0x55
 8005798:	f883 24a1 	strb.w	r2, [r3, #1185]	; 0x4a1
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2255      	movs	r2, #85	; 0x55
 80057a0:	f883 24a2 	strb.w	r2, [r3, #1186]	; 0x4a2
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2245      	movs	r2, #69	; 0x45
 80057a8:	f883 24a3 	strb.w	r2, [r3, #1187]	; 0x4a3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2220      	movs	r2, #32
 80057b0:	f883 24a6 	strb.w	r2, [r3, #1190]	; 0x4a6
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2274      	movs	r2, #116	; 0x74
 80057b8:	f883 24a7 	strb.w	r2, [r3, #1191]	; 0x4a7
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2254      	movs	r2, #84	; 0x54
 80057c0:	f883 24a8 	strb.w	r2, [r3, #1192]	; 0x4a8
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2254      	movs	r2, #84	; 0x54
 80057c8:	f883 24a9 	strb.w	r2, [r3, #1193]	; 0x4a9
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	227c      	movs	r2, #124	; 0x7c
 80057d0:	f883 24aa 	strb.w	r2, [r3, #1194]	; 0x4aa
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	227c      	movs	r2, #124	; 0x7c
 80057d8:	f883 24ab 	strb.w	r2, [r3, #1195]	; 0x4ab
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2254      	movs	r2, #84	; 0x54
 80057e0:	f883 24ac 	strb.w	r2, [r3, #1196]	; 0x4ac
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2254      	movs	r2, #84	; 0x54
 80057e8:	f883 24ad 	strb.w	r2, [r3, #1197]	; 0x4ad
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	227c      	movs	r2, #124	; 0x7c
 80057f0:	f883 24ae 	strb.w	r2, [r3, #1198]	; 0x4ae
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	227e      	movs	r2, #126	; 0x7e
 80057f8:	f883 24af 	strb.w	r2, [r3, #1199]	; 0x4af
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	220b      	movs	r2, #11
 8005800:	f883 24b0 	strb.w	r2, [r3, #1200]	; 0x4b0
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2209      	movs	r2, #9
 8005808:	f883 24b1 	strb.w	r2, [r3, #1201]	; 0x4b1
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	227f      	movs	r2, #127	; 0x7f
 8005810:	f883 24b2 	strb.w	r2, [r3, #1202]	; 0x4b2
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	227f      	movs	r2, #127	; 0x7f
 8005818:	f883 24b3 	strb.w	r2, [r3, #1203]	; 0x4b3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2249      	movs	r2, #73	; 0x49
 8005820:	f883 24b4 	strb.w	r2, [r3, #1204]	; 0x4b4
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2232      	movs	r2, #50	; 0x32
 8005828:	f883 24b6 	strb.w	r2, [r3, #1206]	; 0x4b6
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	227b      	movs	r2, #123	; 0x7b
 8005830:	f883 24b7 	strb.w	r2, [r3, #1207]	; 0x4b7
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2249      	movs	r2, #73	; 0x49
 8005838:	f883 24b8 	strb.w	r2, [r3, #1208]	; 0x4b8
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2249      	movs	r2, #73	; 0x49
 8005840:	f883 24b9 	strb.w	r2, [r3, #1209]	; 0x4b9
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	227b      	movs	r2, #123	; 0x7b
 8005848:	f883 24ba 	strb.w	r2, [r3, #1210]	; 0x4ba
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2232      	movs	r2, #50	; 0x32
 8005850:	f883 24bb 	strb.w	r2, [r3, #1211]	; 0x4bb
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2232      	movs	r2, #50	; 0x32
 8005858:	f883 24be 	strb.w	r2, [r3, #1214]	; 0x4be
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	227a      	movs	r2, #122	; 0x7a
 8005860:	f883 24bf 	strb.w	r2, [r3, #1215]	; 0x4bf
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2248      	movs	r2, #72	; 0x48
 8005868:	f883 24c0 	strb.w	r2, [r3, #1216]	; 0x4c0
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2248      	movs	r2, #72	; 0x48
 8005870:	f883 24c1 	strb.w	r2, [r3, #1217]	; 0x4c1
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	227a      	movs	r2, #122	; 0x7a
 8005878:	f883 24c2 	strb.w	r2, [r3, #1218]	; 0x4c2
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2232      	movs	r2, #50	; 0x32
 8005880:	f883 24c3 	strb.w	r2, [r3, #1219]	; 0x4c3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2232      	movs	r2, #50	; 0x32
 8005888:	f883 24c6 	strb.w	r2, [r3, #1222]	; 0x4c6
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	227a      	movs	r2, #122	; 0x7a
 8005890:	f883 24c7 	strb.w	r2, [r3, #1223]	; 0x4c7
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	224a      	movs	r2, #74	; 0x4a
 8005898:	f883 24c8 	strb.w	r2, [r3, #1224]	; 0x4c8
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2248      	movs	r2, #72	; 0x48
 80058a0:	f883 24c9 	strb.w	r2, [r3, #1225]	; 0x4c9
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2278      	movs	r2, #120	; 0x78
 80058a8:	f883 24ca 	strb.w	r2, [r3, #1226]	; 0x4ca
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2230      	movs	r2, #48	; 0x30
 80058b0:	f883 24cb 	strb.w	r2, [r3, #1227]	; 0x4cb
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	223a      	movs	r2, #58	; 0x3a
 80058b8:	f883 24ce 	strb.w	r2, [r3, #1230]	; 0x4ce
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	227b      	movs	r2, #123	; 0x7b
 80058c0:	f883 24cf 	strb.w	r2, [r3, #1231]	; 0x4cf
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2241      	movs	r2, #65	; 0x41
 80058c8:	f883 24d0 	strb.w	r2, [r3, #1232]	; 0x4d0
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2241      	movs	r2, #65	; 0x41
 80058d0:	f883 24d1 	strb.w	r2, [r3, #1233]	; 0x4d1
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	227b      	movs	r2, #123	; 0x7b
 80058d8:	f883 24d2 	strb.w	r2, [r3, #1234]	; 0x4d2
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	227a      	movs	r2, #122	; 0x7a
 80058e0:	f883 24d3 	strb.w	r2, [r3, #1235]	; 0x4d3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2240      	movs	r2, #64	; 0x40
 80058e8:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	223a      	movs	r2, #58	; 0x3a
 80058f0:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	227a      	movs	r2, #122	; 0x7a
 80058f8:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2242      	movs	r2, #66	; 0x42
 8005900:	f883 24d8 	strb.w	r2, [r3, #1240]	; 0x4d8
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2240      	movs	r2, #64	; 0x40
 8005908:	f883 24d9 	strb.w	r2, [r3, #1241]	; 0x4d9
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2278      	movs	r2, #120	; 0x78
 8005910:	f883 24da 	strb.w	r2, [r3, #1242]	; 0x4da
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2278      	movs	r2, #120	; 0x78
 8005918:	f883 24db 	strb.w	r2, [r3, #1243]	; 0x4db
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2240      	movs	r2, #64	; 0x40
 8005920:	f883 24dc 	strb.w	r2, [r3, #1244]	; 0x4dc
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	229a      	movs	r2, #154	; 0x9a
 8005928:	f883 24de 	strb.w	r2, [r3, #1246]	; 0x4de
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	22ba      	movs	r2, #186	; 0xba
 8005930:	f883 24df 	strb.w	r2, [r3, #1247]	; 0x4df
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	22a0      	movs	r2, #160	; 0xa0
 8005938:	f883 24e0 	strb.w	r2, [r3, #1248]	; 0x4e0
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	22a0      	movs	r2, #160	; 0xa0
 8005940:	f883 24e1 	strb.w	r2, [r3, #1249]	; 0x4e1
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	22fa      	movs	r2, #250	; 0xfa
 8005948:	f883 24e2 	strb.w	r2, [r3, #1250]	; 0x4e2
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	227a      	movs	r2, #122	; 0x7a
 8005950:	f883 24e3 	strb.w	r2, [r3, #1251]	; 0x4e3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 24e6 	strb.w	r2, [r3, #1254]	; 0x4e6
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2219      	movs	r2, #25
 8005960:	f883 24e7 	strb.w	r2, [r3, #1255]	; 0x4e7
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	223c      	movs	r2, #60	; 0x3c
 8005968:	f883 24e8 	strb.w	r2, [r3, #1256]	; 0x4e8
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2266      	movs	r2, #102	; 0x66
 8005970:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2266      	movs	r2, #102	; 0x66
 8005978:	f883 24ea 	strb.w	r2, [r3, #1258]	; 0x4ea
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	223c      	movs	r2, #60	; 0x3c
 8005980:	f883 24eb 	strb.w	r2, [r3, #1259]	; 0x4eb
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2219      	movs	r2, #25
 8005988:	f883 24ec 	strb.w	r2, [r3, #1260]	; 0x4ec
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 24ed 	strb.w	r2, [r3, #1261]	; 0x4ed
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	223d      	movs	r2, #61	; 0x3d
 8005998:	f883 24ee 	strb.w	r2, [r3, #1262]	; 0x4ee
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	227d      	movs	r2, #125	; 0x7d
 80059a0:	f883 24ef 	strb.w	r2, [r3, #1263]	; 0x4ef
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2240      	movs	r2, #64	; 0x40
 80059a8:	f883 24f0 	strb.w	r2, [r3, #1264]	; 0x4f0
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2240      	movs	r2, #64	; 0x40
 80059b0:	f883 24f1 	strb.w	r2, [r3, #1265]	; 0x4f1
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	227d      	movs	r2, #125	; 0x7d
 80059b8:	f883 24f2 	strb.w	r2, [r3, #1266]	; 0x4f2
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	223d      	movs	r2, #61	; 0x3d
 80059c0:	f883 24f3 	strb.w	r2, [r3, #1267]	; 0x4f3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2218      	movs	r2, #24
 80059c8:	f883 24f6 	strb.w	r2, [r3, #1270]	; 0x4f6
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	223c      	movs	r2, #60	; 0x3c
 80059d0:	f883 24f7 	strb.w	r2, [r3, #1271]	; 0x4f7
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2224      	movs	r2, #36	; 0x24
 80059d8:	f883 24f8 	strb.w	r2, [r3, #1272]	; 0x4f8
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	22e7      	movs	r2, #231	; 0xe7
 80059e0:	f883 24f9 	strb.w	r2, [r3, #1273]	; 0x4f9
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	22e7      	movs	r2, #231	; 0xe7
 80059e8:	f883 24fa 	strb.w	r2, [r3, #1274]	; 0x4fa
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2224      	movs	r2, #36	; 0x24
 80059f0:	f883 24fb 	strb.w	r2, [r3, #1275]	; 0x4fb
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2224      	movs	r2, #36	; 0x24
 80059f8:	f883 24fc 	strb.w	r2, [r3, #1276]	; 0x4fc
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2268      	movs	r2, #104	; 0x68
 8005a00:	f883 24fe 	strb.w	r2, [r3, #1278]	; 0x4fe
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	227e      	movs	r2, #126	; 0x7e
 8005a08:	f883 24ff 	strb.w	r2, [r3, #1279]	; 0x4ff
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	227f      	movs	r2, #127	; 0x7f
 8005a10:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2249      	movs	r2, #73	; 0x49
 8005a18:	f883 2501 	strb.w	r2, [r3, #1281]	; 0x501
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2243      	movs	r2, #67	; 0x43
 8005a20:	f883 2502 	strb.w	r2, [r3, #1282]	; 0x502
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2266      	movs	r2, #102	; 0x66
 8005a28:	f883 2503 	strb.w	r2, [r3, #1283]	; 0x503
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	222b      	movs	r2, #43	; 0x2b
 8005a38:	f883 2506 	strb.w	r2, [r3, #1286]	; 0x506
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	222f      	movs	r2, #47	; 0x2f
 8005a40:	f883 2507 	strb.w	r2, [r3, #1287]	; 0x507
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	22fc      	movs	r2, #252	; 0xfc
 8005a48:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	22fc      	movs	r2, #252	; 0xfc
 8005a50:	f883 2509 	strb.w	r2, [r3, #1289]	; 0x509
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	222f      	movs	r2, #47	; 0x2f
 8005a58:	f883 250a 	strb.w	r2, [r3, #1290]	; 0x50a
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	222b      	movs	r2, #43	; 0x2b
 8005a60:	f883 250b 	strb.w	r2, [r3, #1291]	; 0x50b
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	22ff      	movs	r2, #255	; 0xff
 8005a68:	f883 250e 	strb.w	r2, [r3, #1294]	; 0x50e
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	22ff      	movs	r2, #255	; 0xff
 8005a70:	f883 250f 	strb.w	r2, [r3, #1295]	; 0x50f
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2209      	movs	r2, #9
 8005a78:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2209      	movs	r2, #9
 8005a80:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	222f      	movs	r2, #47	; 0x2f
 8005a88:	f883 2512 	strb.w	r2, [r3, #1298]	; 0x512
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	22f6      	movs	r2, #246	; 0xf6
 8005a90:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	22f8      	movs	r2, #248	; 0xf8
 8005a98:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	22a0      	movs	r2, #160	; 0xa0
 8005aa0:	f883 2515 	strb.w	r2, [r3, #1301]	; 0x515
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2240      	movs	r2, #64	; 0x40
 8005aa8:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	22c0      	movs	r2, #192	; 0xc0
 8005ab0:	f883 2517 	strb.w	r2, [r3, #1303]	; 0x517
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2288      	movs	r2, #136	; 0x88
 8005ab8:	f883 2518 	strb.w	r2, [r3, #1304]	; 0x518
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	22fe      	movs	r2, #254	; 0xfe
 8005ac0:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	227f      	movs	r2, #127	; 0x7f
 8005ac8:	f883 251a 	strb.w	r2, [r3, #1306]	; 0x51a
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2209      	movs	r2, #9
 8005ad0:	f883 251b 	strb.w	r2, [r3, #1307]	; 0x51b
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2203      	movs	r2, #3
 8005ad8:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 251d 	strb.w	r2, [r3, #1309]	; 0x51d
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	f883 251e 	strb.w	r2, [r3, #1310]	; 0x51e
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2274      	movs	r2, #116	; 0x74
 8005af0:	f883 251f 	strb.w	r2, [r3, #1311]	; 0x51f
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2254      	movs	r2, #84	; 0x54
 8005af8:	f883 2520 	strb.w	r2, [r3, #1312]	; 0x520
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2255      	movs	r2, #85	; 0x55
 8005b00:	f883 2521 	strb.w	r2, [r3, #1313]	; 0x521
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	227d      	movs	r2, #125	; 0x7d
 8005b08:	f883 2522 	strb.w	r2, [r3, #1314]	; 0x522
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2279      	movs	r2, #121	; 0x79
 8005b10:	f883 2523 	strb.w	r2, [r3, #1315]	; 0x523
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2240      	movs	r2, #64	; 0x40
 8005b18:	f883 2524 	strb.w	r2, [r3, #1316]	; 0x524
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2244      	movs	r2, #68	; 0x44
 8005b20:	f883 2527 	strb.w	r2, [r3, #1319]	; 0x527
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	227d      	movs	r2, #125	; 0x7d
 8005b28:	f883 2528 	strb.w	r2, [r3, #1320]	; 0x528
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	227d      	movs	r2, #125	; 0x7d
 8005b30:	f883 2529 	strb.w	r2, [r3, #1321]	; 0x529
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2241      	movs	r2, #65	; 0x41
 8005b38:	f883 252a 	strb.w	r2, [r3, #1322]	; 0x52a
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2230      	movs	r2, #48	; 0x30
 8005b40:	f883 252e 	strb.w	r2, [r3, #1326]	; 0x52e
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2278      	movs	r2, #120	; 0x78
 8005b48:	f883 252f 	strb.w	r2, [r3, #1327]	; 0x52f
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2248      	movs	r2, #72	; 0x48
 8005b50:	f883 2530 	strb.w	r2, [r3, #1328]	; 0x530
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	224a      	movs	r2, #74	; 0x4a
 8005b58:	f883 2531 	strb.w	r2, [r3, #1329]	; 0x531
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	227a      	movs	r2, #122	; 0x7a
 8005b60:	f883 2532 	strb.w	r2, [r3, #1330]	; 0x532
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2232      	movs	r2, #50	; 0x32
 8005b68:	f883 2533 	strb.w	r2, [r3, #1331]	; 0x533
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2238      	movs	r2, #56	; 0x38
 8005b70:	f883 2536 	strb.w	r2, [r3, #1334]	; 0x536
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2278      	movs	r2, #120	; 0x78
 8005b78:	f883 2537 	strb.w	r2, [r3, #1335]	; 0x537
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2240      	movs	r2, #64	; 0x40
 8005b80:	f883 2538 	strb.w	r2, [r3, #1336]	; 0x538
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2242      	movs	r2, #66	; 0x42
 8005b88:	f883 2539 	strb.w	r2, [r3, #1337]	; 0x539
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	227a      	movs	r2, #122	; 0x7a
 8005b90:	f883 253a 	strb.w	r2, [r3, #1338]	; 0x53a
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	227a      	movs	r2, #122	; 0x7a
 8005b98:	f883 253b 	strb.w	r2, [r3, #1339]	; 0x53b
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2240      	movs	r2, #64	; 0x40
 8005ba0:	f883 253c 	strb.w	r2, [r3, #1340]	; 0x53c
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	227a      	movs	r2, #122	; 0x7a
 8005ba8:	f883 253e 	strb.w	r2, [r3, #1342]	; 0x53e
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	227a      	movs	r2, #122	; 0x7a
 8005bb0:	f883 253f 	strb.w	r2, [r3, #1343]	; 0x53f
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	220a      	movs	r2, #10
 8005bb8:	f883 2540 	strb.w	r2, [r3, #1344]	; 0x540
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	220a      	movs	r2, #10
 8005bc0:	f883 2541 	strb.w	r2, [r3, #1345]	; 0x541
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	227a      	movs	r2, #122	; 0x7a
 8005bc8:	f883 2542 	strb.w	r2, [r3, #1346]	; 0x542
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2270      	movs	r2, #112	; 0x70
 8005bd0:	f883 2543 	strb.w	r2, [r3, #1347]	; 0x543
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	227d      	movs	r2, #125	; 0x7d
 8005bd8:	f883 2546 	strb.w	r2, [r3, #1350]	; 0x546
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	227d      	movs	r2, #125	; 0x7d
 8005be0:	f883 2547 	strb.w	r2, [r3, #1351]	; 0x547
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2219      	movs	r2, #25
 8005be8:	f883 2548 	strb.w	r2, [r3, #1352]	; 0x548
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2231      	movs	r2, #49	; 0x31
 8005bf0:	f883 2549 	strb.w	r2, [r3, #1353]	; 0x549
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	227d      	movs	r2, #125	; 0x7d
 8005bf8:	f883 254a 	strb.w	r2, [r3, #1354]	; 0x54a
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	227d      	movs	r2, #125	; 0x7d
 8005c00:	f883 254b 	strb.w	r2, [r3, #1355]	; 0x54b
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2226      	movs	r2, #38	; 0x26
 8005c08:	f883 254f 	strb.w	r2, [r3, #1359]	; 0x54f
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	222f      	movs	r2, #47	; 0x2f
 8005c10:	f883 2550 	strb.w	r2, [r3, #1360]	; 0x550
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2229      	movs	r2, #41	; 0x29
 8005c18:	f883 2551 	strb.w	r2, [r3, #1361]	; 0x551
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	222f      	movs	r2, #47	; 0x2f
 8005c20:	f883 2552 	strb.w	r2, [r3, #1362]	; 0x552
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	222f      	movs	r2, #47	; 0x2f
 8005c28:	f883 2553 	strb.w	r2, [r3, #1363]	; 0x553
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2228      	movs	r2, #40	; 0x28
 8005c30:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2226      	movs	r2, #38	; 0x26
 8005c38:	f883 2557 	strb.w	r2, [r3, #1367]	; 0x557
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	222f      	movs	r2, #47	; 0x2f
 8005c40:	f883 2558 	strb.w	r2, [r3, #1368]	; 0x558
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2229      	movs	r2, #41	; 0x29
 8005c48:	f883 2559 	strb.w	r2, [r3, #1369]	; 0x559
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	222f      	movs	r2, #47	; 0x2f
 8005c50:	f883 255a 	strb.w	r2, [r3, #1370]	; 0x55a
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2226      	movs	r2, #38	; 0x26
 8005c58:	f883 255b 	strb.w	r2, [r3, #1371]	; 0x55b
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2230      	movs	r2, #48	; 0x30
 8005c60:	f883 255e 	strb.w	r2, [r3, #1374]	; 0x55e
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2278      	movs	r2, #120	; 0x78
 8005c68:	f883 255f 	strb.w	r2, [r3, #1375]	; 0x55f
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	224d      	movs	r2, #77	; 0x4d
 8005c70:	f883 2560 	strb.w	r2, [r3, #1376]	; 0x560
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2245      	movs	r2, #69	; 0x45
 8005c78:	f883 2561 	strb.w	r2, [r3, #1377]	; 0x561
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2260      	movs	r2, #96	; 0x60
 8005c80:	f883 2562 	strb.w	r2, [r3, #1378]	; 0x562
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2220      	movs	r2, #32
 8005c88:	f883 2563 	strb.w	r2, [r3, #1379]	; 0x563
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2238      	movs	r2, #56	; 0x38
 8005c90:	f883 2566 	strb.w	r2, [r3, #1382]	; 0x566
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2238      	movs	r2, #56	; 0x38
 8005c98:	f883 2567 	strb.w	r2, [r3, #1383]	; 0x567
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2208      	movs	r2, #8
 8005ca0:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2208      	movs	r2, #8
 8005ca8:	f883 2569 	strb.w	r2, [r3, #1385]	; 0x569
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2208      	movs	r2, #8
 8005cb0:	f883 256a 	strb.w	r2, [r3, #1386]	; 0x56a
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2208      	movs	r2, #8
 8005cb8:	f883 256b 	strb.w	r2, [r3, #1387]	; 0x56b
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2208      	movs	r2, #8
 8005cc0:	f883 256e 	strb.w	r2, [r3, #1390]	; 0x56e
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2208      	movs	r2, #8
 8005cc8:	f883 256f 	strb.w	r2, [r3, #1391]	; 0x56f
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2208      	movs	r2, #8
 8005cd0:	f883 2570 	strb.w	r2, [r3, #1392]	; 0x570
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2208      	movs	r2, #8
 8005cd8:	f883 2571 	strb.w	r2, [r3, #1393]	; 0x571
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2238      	movs	r2, #56	; 0x38
 8005ce0:	f883 2572 	strb.w	r2, [r3, #1394]	; 0x572
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2238      	movs	r2, #56	; 0x38
 8005ce8:	f883 2573 	strb.w	r2, [r3, #1395]	; 0x573
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	224f      	movs	r2, #79	; 0x4f
 8005cf0:	f883 2576 	strb.w	r2, [r3, #1398]	; 0x576
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	226f      	movs	r2, #111	; 0x6f
 8005cf8:	f883 2577 	strb.w	r2, [r3, #1399]	; 0x577
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2230      	movs	r2, #48	; 0x30
 8005d00:	f883 2578 	strb.w	r2, [r3, #1400]	; 0x578
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2218      	movs	r2, #24
 8005d08:	f883 2579 	strb.w	r2, [r3, #1401]	; 0x579
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	22cc      	movs	r2, #204	; 0xcc
 8005d10:	f883 257a 	strb.w	r2, [r3, #1402]	; 0x57a
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	22ee      	movs	r2, #238	; 0xee
 8005d18:	f883 257b 	strb.w	r2, [r3, #1403]	; 0x57b
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	22bb      	movs	r2, #187	; 0xbb
 8005d20:	f883 257c 	strb.w	r2, [r3, #1404]	; 0x57c
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2291      	movs	r2, #145	; 0x91
 8005d28:	f883 257d 	strb.w	r2, [r3, #1405]	; 0x57d
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	224f      	movs	r2, #79	; 0x4f
 8005d30:	f883 257e 	strb.w	r2, [r3, #1406]	; 0x57e
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	226f      	movs	r2, #111	; 0x6f
 8005d38:	f883 257f 	strb.w	r2, [r3, #1407]	; 0x57f
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2230      	movs	r2, #48	; 0x30
 8005d40:	f883 2580 	strb.w	r2, [r3, #1408]	; 0x580
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2218      	movs	r2, #24
 8005d48:	f883 2581 	strb.w	r2, [r3, #1409]	; 0x581
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	226c      	movs	r2, #108	; 0x6c
 8005d50:	f883 2582 	strb.w	r2, [r3, #1410]	; 0x582
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2276      	movs	r2, #118	; 0x76
 8005d58:	f883 2583 	strb.w	r2, [r3, #1411]	; 0x583
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	22fb      	movs	r2, #251	; 0xfb
 8005d60:	f883 2584 	strb.w	r2, [r3, #1412]	; 0x584
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	22f9      	movs	r2, #249	; 0xf9
 8005d68:	f883 2585 	strb.w	r2, [r3, #1413]	; 0x585
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	227b      	movs	r2, #123	; 0x7b
 8005d70:	f883 2589 	strb.w	r2, [r3, #1417]	; 0x589
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	227b      	movs	r2, #123	; 0x7b
 8005d78:	f883 258a 	strb.w	r2, [r3, #1418]	; 0x58a
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2208      	movs	r2, #8
 8005d80:	f883 258e 	strb.w	r2, [r3, #1422]	; 0x58e
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	221c      	movs	r2, #28
 8005d88:	f883 258f 	strb.w	r2, [r3, #1423]	; 0x58f
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2236      	movs	r2, #54	; 0x36
 8005d90:	f883 2590 	strb.w	r2, [r3, #1424]	; 0x590
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2222      	movs	r2, #34	; 0x22
 8005d98:	f883 2591 	strb.w	r2, [r3, #1425]	; 0x591
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2208      	movs	r2, #8
 8005da0:	f883 2592 	strb.w	r2, [r3, #1426]	; 0x592
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	221c      	movs	r2, #28
 8005da8:	f883 2593 	strb.w	r2, [r3, #1427]	; 0x593
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2236      	movs	r2, #54	; 0x36
 8005db0:	f883 2594 	strb.w	r2, [r3, #1428]	; 0x594
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2222      	movs	r2, #34	; 0x22
 8005db8:	f883 2595 	strb.w	r2, [r3, #1429]	; 0x595
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2222      	movs	r2, #34	; 0x22
 8005dc0:	f883 2596 	strb.w	r2, [r3, #1430]	; 0x596
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2236      	movs	r2, #54	; 0x36
 8005dc8:	f883 2597 	strb.w	r2, [r3, #1431]	; 0x597
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	221c      	movs	r2, #28
 8005dd0:	f883 2598 	strb.w	r2, [r3, #1432]	; 0x598
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2208      	movs	r2, #8
 8005dd8:	f883 2599 	strb.w	r2, [r3, #1433]	; 0x599
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2222      	movs	r2, #34	; 0x22
 8005de0:	f883 259a 	strb.w	r2, [r3, #1434]	; 0x59a
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2236      	movs	r2, #54	; 0x36
 8005de8:	f883 259b 	strb.w	r2, [r3, #1435]	; 0x59b
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	221c      	movs	r2, #28
 8005df0:	f883 259c 	strb.w	r2, [r3, #1436]	; 0x59c
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2208      	movs	r2, #8
 8005df8:	f883 259d 	strb.w	r2, [r3, #1437]	; 0x59d
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	22aa      	movs	r2, #170	; 0xaa
 8005e00:	f883 259e 	strb.w	r2, [r3, #1438]	; 0x59e
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2255      	movs	r2, #85	; 0x55
 8005e08:	f883 25a0 	strb.w	r2, [r3, #1440]	; 0x5a0
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	22aa      	movs	r2, #170	; 0xaa
 8005e10:	f883 25a2 	strb.w	r2, [r3, #1442]	; 0x5a2
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2255      	movs	r2, #85	; 0x55
 8005e18:	f883 25a4 	strb.w	r2, [r3, #1444]	; 0x5a4
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	22aa      	movs	r2, #170	; 0xaa
 8005e20:	f883 25a6 	strb.w	r2, [r3, #1446]	; 0x5a6
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2255      	movs	r2, #85	; 0x55
 8005e28:	f883 25a7 	strb.w	r2, [r3, #1447]	; 0x5a7
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	22aa      	movs	r2, #170	; 0xaa
 8005e30:	f883 25a8 	strb.w	r2, [r3, #1448]	; 0x5a8
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2255      	movs	r2, #85	; 0x55
 8005e38:	f883 25a9 	strb.w	r2, [r3, #1449]	; 0x5a9
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	22aa      	movs	r2, #170	; 0xaa
 8005e40:	f883 25aa 	strb.w	r2, [r3, #1450]	; 0x5aa
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2255      	movs	r2, #85	; 0x55
 8005e48:	f883 25ab 	strb.w	r2, [r3, #1451]	; 0x5ab
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	22aa      	movs	r2, #170	; 0xaa
 8005e50:	f883 25ac 	strb.w	r2, [r3, #1452]	; 0x5ac
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2255      	movs	r2, #85	; 0x55
 8005e58:	f883 25ad 	strb.w	r2, [r3, #1453]	; 0x5ad
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	22dd      	movs	r2, #221	; 0xdd
 8005e60:	f883 25ae 	strb.w	r2, [r3, #1454]	; 0x5ae
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	22ff      	movs	r2, #255	; 0xff
 8005e68:	f883 25af 	strb.w	r2, [r3, #1455]	; 0x5af
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	22aa      	movs	r2, #170	; 0xaa
 8005e70:	f883 25b0 	strb.w	r2, [r3, #1456]	; 0x5b0
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2277      	movs	r2, #119	; 0x77
 8005e78:	f883 25b1 	strb.w	r2, [r3, #1457]	; 0x5b1
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	22dd      	movs	r2, #221	; 0xdd
 8005e80:	f883 25b2 	strb.w	r2, [r3, #1458]	; 0x5b2
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	22aa      	movs	r2, #170	; 0xaa
 8005e88:	f883 25b3 	strb.w	r2, [r3, #1459]	; 0x5b3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	22ff      	movs	r2, #255	; 0xff
 8005e90:	f883 25b4 	strb.w	r2, [r3, #1460]	; 0x5b4
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2277      	movs	r2, #119	; 0x77
 8005e98:	f883 25b5 	strb.w	r2, [r3, #1461]	; 0x5b5
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	22ff      	movs	r2, #255	; 0xff
 8005ea0:	f883 25b9 	strb.w	r2, [r3, #1465]	; 0x5b9
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	22ff      	movs	r2, #255	; 0xff
 8005ea8:	f883 25ba 	strb.w	r2, [r3, #1466]	; 0x5ba
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2210      	movs	r2, #16
 8005eb0:	f883 25be 	strb.w	r2, [r3, #1470]	; 0x5be
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2210      	movs	r2, #16
 8005eb8:	f883 25bf 	strb.w	r2, [r3, #1471]	; 0x5bf
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2210      	movs	r2, #16
 8005ec0:	f883 25c0 	strb.w	r2, [r3, #1472]	; 0x5c0
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	22ff      	movs	r2, #255	; 0xff
 8005ec8:	f883 25c1 	strb.w	r2, [r3, #1473]	; 0x5c1
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	22ff      	movs	r2, #255	; 0xff
 8005ed0:	f883 25c2 	strb.w	r2, [r3, #1474]	; 0x5c2
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2214      	movs	r2, #20
 8005ed8:	f883 25c6 	strb.w	r2, [r3, #1478]	; 0x5c6
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2214      	movs	r2, #20
 8005ee0:	f883 25c7 	strb.w	r2, [r3, #1479]	; 0x5c7
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2214      	movs	r2, #20
 8005ee8:	f883 25c8 	strb.w	r2, [r3, #1480]	; 0x5c8
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	22ff      	movs	r2, #255	; 0xff
 8005ef0:	f883 25c9 	strb.w	r2, [r3, #1481]	; 0x5c9
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	22ff      	movs	r2, #255	; 0xff
 8005ef8:	f883 25ca 	strb.w	r2, [r3, #1482]	; 0x5ca
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2210      	movs	r2, #16
 8005f00:	f883 25ce 	strb.w	r2, [r3, #1486]	; 0x5ce
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2210      	movs	r2, #16
 8005f08:	f883 25cf 	strb.w	r2, [r3, #1487]	; 0x5cf
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	22ff      	movs	r2, #255	; 0xff
 8005f10:	f883 25d0 	strb.w	r2, [r3, #1488]	; 0x5d0
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	22ff      	movs	r2, #255	; 0xff
 8005f18:	f883 25d1 	strb.w	r2, [r3, #1489]	; 0x5d1
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	22ff      	movs	r2, #255	; 0xff
 8005f20:	f883 25d3 	strb.w	r2, [r3, #1491]	; 0x5d3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	22ff      	movs	r2, #255	; 0xff
 8005f28:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2210      	movs	r2, #16
 8005f30:	f883 25d6 	strb.w	r2, [r3, #1494]	; 0x5d6
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2210      	movs	r2, #16
 8005f38:	f883 25d7 	strb.w	r2, [r3, #1495]	; 0x5d7
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	22f0      	movs	r2, #240	; 0xf0
 8005f40:	f883 25d8 	strb.w	r2, [r3, #1496]	; 0x5d8
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	22f0      	movs	r2, #240	; 0xf0
 8005f48:	f883 25d9 	strb.w	r2, [r3, #1497]	; 0x5d9
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2210      	movs	r2, #16
 8005f50:	f883 25da 	strb.w	r2, [r3, #1498]	; 0x5da
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	22f0      	movs	r2, #240	; 0xf0
 8005f58:	f883 25db 	strb.w	r2, [r3, #1499]	; 0x5db
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	22f0      	movs	r2, #240	; 0xf0
 8005f60:	f883 25dc 	strb.w	r2, [r3, #1500]	; 0x5dc
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2214      	movs	r2, #20
 8005f68:	f883 25de 	strb.w	r2, [r3, #1502]	; 0x5de
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2214      	movs	r2, #20
 8005f70:	f883 25df 	strb.w	r2, [r3, #1503]	; 0x5df
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2214      	movs	r2, #20
 8005f78:	f883 25e0 	strb.w	r2, [r3, #1504]	; 0x5e0
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	22fc      	movs	r2, #252	; 0xfc
 8005f80:	f883 25e1 	strb.w	r2, [r3, #1505]	; 0x5e1
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	22fc      	movs	r2, #252	; 0xfc
 8005f88:	f883 25e2 	strb.w	r2, [r3, #1506]	; 0x5e2
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2214      	movs	r2, #20
 8005f90:	f883 25e6 	strb.w	r2, [r3, #1510]	; 0x5e6
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2214      	movs	r2, #20
 8005f98:	f883 25e7 	strb.w	r2, [r3, #1511]	; 0x5e7
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	22f7      	movs	r2, #247	; 0xf7
 8005fa0:	f883 25e8 	strb.w	r2, [r3, #1512]	; 0x5e8
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	22f7      	movs	r2, #247	; 0xf7
 8005fa8:	f883 25e9 	strb.w	r2, [r3, #1513]	; 0x5e9
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	22ff      	movs	r2, #255	; 0xff
 8005fb0:	f883 25eb 	strb.w	r2, [r3, #1515]	; 0x5eb
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	22ff      	movs	r2, #255	; 0xff
 8005fb8:	f883 25ec 	strb.w	r2, [r3, #1516]	; 0x5ec
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	22ff      	movs	r2, #255	; 0xff
 8005fc0:	f883 25f0 	strb.w	r2, [r3, #1520]	; 0x5f0
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	22ff      	movs	r2, #255	; 0xff
 8005fc8:	f883 25f1 	strb.w	r2, [r3, #1521]	; 0x5f1
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	22ff      	movs	r2, #255	; 0xff
 8005fd0:	f883 25f3 	strb.w	r2, [r3, #1523]	; 0x5f3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	22ff      	movs	r2, #255	; 0xff
 8005fd8:	f883 25f4 	strb.w	r2, [r3, #1524]	; 0x5f4
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2214      	movs	r2, #20
 8005fe0:	f883 25f6 	strb.w	r2, [r3, #1526]	; 0x5f6
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2214      	movs	r2, #20
 8005fe8:	f883 25f7 	strb.w	r2, [r3, #1527]	; 0x5f7
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	22f4      	movs	r2, #244	; 0xf4
 8005ff0:	f883 25f8 	strb.w	r2, [r3, #1528]	; 0x5f8
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	22f4      	movs	r2, #244	; 0xf4
 8005ff8:	f883 25f9 	strb.w	r2, [r3, #1529]	; 0x5f9
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2204      	movs	r2, #4
 8006000:	f883 25fa 	strb.w	r2, [r3, #1530]	; 0x5fa
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	22fc      	movs	r2, #252	; 0xfc
 8006008:	f883 25fb 	strb.w	r2, [r3, #1531]	; 0x5fb
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	22fc      	movs	r2, #252	; 0xfc
 8006010:	f883 25fc 	strb.w	r2, [r3, #1532]	; 0x5fc
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2214      	movs	r2, #20
 8006018:	f883 25fe 	strb.w	r2, [r3, #1534]	; 0x5fe
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2214      	movs	r2, #20
 8006020:	f883 25ff 	strb.w	r2, [r3, #1535]	; 0x5ff
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2217      	movs	r2, #23
 8006028:	f883 2600 	strb.w	r2, [r3, #1536]	; 0x600
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2217      	movs	r2, #23
 8006030:	f883 2601 	strb.w	r2, [r3, #1537]	; 0x601
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2210      	movs	r2, #16
 8006038:	f883 2602 	strb.w	r2, [r3, #1538]	; 0x602
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	221f      	movs	r2, #31
 8006040:	f883 2603 	strb.w	r2, [r3, #1539]	; 0x603
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	221f      	movs	r2, #31
 8006048:	f883 2604 	strb.w	r2, [r3, #1540]	; 0x604
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2210      	movs	r2, #16
 8006050:	f883 2606 	strb.w	r2, [r3, #1542]	; 0x606
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2210      	movs	r2, #16
 8006058:	f883 2607 	strb.w	r2, [r3, #1543]	; 0x607
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	221f      	movs	r2, #31
 8006060:	f883 2608 	strb.w	r2, [r3, #1544]	; 0x608
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	221f      	movs	r2, #31
 8006068:	f883 2609 	strb.w	r2, [r3, #1545]	; 0x609
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2210      	movs	r2, #16
 8006070:	f883 260a 	strb.w	r2, [r3, #1546]	; 0x60a
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	221f      	movs	r2, #31
 8006078:	f883 260b 	strb.w	r2, [r3, #1547]	; 0x60b
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	221f      	movs	r2, #31
 8006080:	f883 260c 	strb.w	r2, [r3, #1548]	; 0x60c
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2214      	movs	r2, #20
 8006088:	f883 260e 	strb.w	r2, [r3, #1550]	; 0x60e
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2214      	movs	r2, #20
 8006090:	f883 260f 	strb.w	r2, [r3, #1551]	; 0x60f
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2214      	movs	r2, #20
 8006098:	f883 2610 	strb.w	r2, [r3, #1552]	; 0x610
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	221f      	movs	r2, #31
 80060a0:	f883 2611 	strb.w	r2, [r3, #1553]	; 0x611
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	221f      	movs	r2, #31
 80060a8:	f883 2612 	strb.w	r2, [r3, #1554]	; 0x612
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2210      	movs	r2, #16
 80060b0:	f883 2616 	strb.w	r2, [r3, #1558]	; 0x616
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2210      	movs	r2, #16
 80060b8:	f883 2617 	strb.w	r2, [r3, #1559]	; 0x617
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2210      	movs	r2, #16
 80060c0:	f883 2618 	strb.w	r2, [r3, #1560]	; 0x618
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	22f0      	movs	r2, #240	; 0xf0
 80060c8:	f883 2619 	strb.w	r2, [r3, #1561]	; 0x619
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	22f0      	movs	r2, #240	; 0xf0
 80060d0:	f883 261a 	strb.w	r2, [r3, #1562]	; 0x61a
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	221f      	movs	r2, #31
 80060d8:	f883 2621 	strb.w	r2, [r3, #1569]	; 0x621
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	221f      	movs	r2, #31
 80060e0:	f883 2622 	strb.w	r2, [r3, #1570]	; 0x622
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2210      	movs	r2, #16
 80060e8:	f883 2623 	strb.w	r2, [r3, #1571]	; 0x623
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2210      	movs	r2, #16
 80060f0:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2210      	movs	r2, #16
 80060f8:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2210      	movs	r2, #16
 8006100:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2210      	movs	r2, #16
 8006108:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2210      	movs	r2, #16
 8006110:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	221f      	movs	r2, #31
 8006118:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	221f      	movs	r2, #31
 8006120:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2210      	movs	r2, #16
 8006128:	f883 262b 	strb.w	r2, [r3, #1579]	; 0x62b
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2210      	movs	r2, #16
 8006130:	f883 262c 	strb.w	r2, [r3, #1580]	; 0x62c
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2210      	movs	r2, #16
 8006138:	f883 262d 	strb.w	r2, [r3, #1581]	; 0x62d
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2210      	movs	r2, #16
 8006140:	f883 262e 	strb.w	r2, [r3, #1582]	; 0x62e
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2210      	movs	r2, #16
 8006148:	f883 262f 	strb.w	r2, [r3, #1583]	; 0x62f
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2210      	movs	r2, #16
 8006150:	f883 2630 	strb.w	r2, [r3, #1584]	; 0x630
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	22f0      	movs	r2, #240	; 0xf0
 8006158:	f883 2631 	strb.w	r2, [r3, #1585]	; 0x631
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	22f0      	movs	r2, #240	; 0xf0
 8006160:	f883 2632 	strb.w	r2, [r3, #1586]	; 0x632
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2210      	movs	r2, #16
 8006168:	f883 2633 	strb.w	r2, [r3, #1587]	; 0x633
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2210      	movs	r2, #16
 8006170:	f883 2634 	strb.w	r2, [r3, #1588]	; 0x634
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2210      	movs	r2, #16
 8006178:	f883 2635 	strb.w	r2, [r3, #1589]	; 0x635
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	22ff      	movs	r2, #255	; 0xff
 8006180:	f883 2639 	strb.w	r2, [r3, #1593]	; 0x639
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	22ff      	movs	r2, #255	; 0xff
 8006188:	f883 263a 	strb.w	r2, [r3, #1594]	; 0x63a
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2210      	movs	r2, #16
 8006190:	f883 263b 	strb.w	r2, [r3, #1595]	; 0x63b
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2210      	movs	r2, #16
 8006198:	f883 263c 	strb.w	r2, [r3, #1596]	; 0x63c
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2210      	movs	r2, #16
 80061a0:	f883 263d 	strb.w	r2, [r3, #1597]	; 0x63d
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2210      	movs	r2, #16
 80061a8:	f883 263e 	strb.w	r2, [r3, #1598]	; 0x63e
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2210      	movs	r2, #16
 80061b0:	f883 263f 	strb.w	r2, [r3, #1599]	; 0x63f
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2210      	movs	r2, #16
 80061b8:	f883 2640 	strb.w	r2, [r3, #1600]	; 0x640
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2210      	movs	r2, #16
 80061c0:	f883 2641 	strb.w	r2, [r3, #1601]	; 0x641
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2210      	movs	r2, #16
 80061c8:	f883 2642 	strb.w	r2, [r3, #1602]	; 0x642
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2210      	movs	r2, #16
 80061d0:	f883 2643 	strb.w	r2, [r3, #1603]	; 0x643
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2210      	movs	r2, #16
 80061d8:	f883 2644 	strb.w	r2, [r3, #1604]	; 0x644
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2210      	movs	r2, #16
 80061e0:	f883 2645 	strb.w	r2, [r3, #1605]	; 0x645
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2210      	movs	r2, #16
 80061e8:	f883 2646 	strb.w	r2, [r3, #1606]	; 0x646
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2210      	movs	r2, #16
 80061f0:	f883 2647 	strb.w	r2, [r3, #1607]	; 0x647
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2210      	movs	r2, #16
 80061f8:	f883 2648 	strb.w	r2, [r3, #1608]	; 0x648
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	22ff      	movs	r2, #255	; 0xff
 8006200:	f883 2649 	strb.w	r2, [r3, #1609]	; 0x649
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	22ff      	movs	r2, #255	; 0xff
 8006208:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2210      	movs	r2, #16
 8006210:	f883 264b 	strb.w	r2, [r3, #1611]	; 0x64b
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2210      	movs	r2, #16
 8006218:	f883 264c 	strb.w	r2, [r3, #1612]	; 0x64c
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2210      	movs	r2, #16
 8006220:	f883 264d 	strb.w	r2, [r3, #1613]	; 0x64d
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	22ff      	movs	r2, #255	; 0xff
 8006228:	f883 2651 	strb.w	r2, [r3, #1617]	; 0x651
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	22ff      	movs	r2, #255	; 0xff
 8006230:	f883 2652 	strb.w	r2, [r3, #1618]	; 0x652
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2214      	movs	r2, #20
 8006238:	f883 2653 	strb.w	r2, [r3, #1619]	; 0x653
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2214      	movs	r2, #20
 8006240:	f883 2654 	strb.w	r2, [r3, #1620]	; 0x654
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2214      	movs	r2, #20
 8006248:	f883 2655 	strb.w	r2, [r3, #1621]	; 0x655
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	22ff      	movs	r2, #255	; 0xff
 8006250:	f883 2658 	strb.w	r2, [r3, #1624]	; 0x658
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	22ff      	movs	r2, #255	; 0xff
 8006258:	f883 2659 	strb.w	r2, [r3, #1625]	; 0x659
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	22ff      	movs	r2, #255	; 0xff
 8006260:	f883 265b 	strb.w	r2, [r3, #1627]	; 0x65b
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	22ff      	movs	r2, #255	; 0xff
 8006268:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2210      	movs	r2, #16
 8006270:	f883 265d 	strb.w	r2, [r3, #1629]	; 0x65d
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	221f      	movs	r2, #31
 8006278:	f883 2660 	strb.w	r2, [r3, #1632]	; 0x660
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	221f      	movs	r2, #31
 8006280:	f883 2661 	strb.w	r2, [r3, #1633]	; 0x661
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2210      	movs	r2, #16
 8006288:	f883 2662 	strb.w	r2, [r3, #1634]	; 0x662
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2217      	movs	r2, #23
 8006290:	f883 2663 	strb.w	r2, [r3, #1635]	; 0x663
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2217      	movs	r2, #23
 8006298:	f883 2664 	strb.w	r2, [r3, #1636]	; 0x664
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2214      	movs	r2, #20
 80062a0:	f883 2665 	strb.w	r2, [r3, #1637]	; 0x665
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	22fc      	movs	r2, #252	; 0xfc
 80062a8:	f883 2668 	strb.w	r2, [r3, #1640]	; 0x668
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	22fc      	movs	r2, #252	; 0xfc
 80062b0:	f883 2669 	strb.w	r2, [r3, #1641]	; 0x669
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2204      	movs	r2, #4
 80062b8:	f883 266a 	strb.w	r2, [r3, #1642]	; 0x66a
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	22f4      	movs	r2, #244	; 0xf4
 80062c0:	f883 266b 	strb.w	r2, [r3, #1643]	; 0x66b
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	22f4      	movs	r2, #244	; 0xf4
 80062c8:	f883 266c 	strb.w	r2, [r3, #1644]	; 0x66c
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2214      	movs	r2, #20
 80062d0:	f883 266d 	strb.w	r2, [r3, #1645]	; 0x66d
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2214      	movs	r2, #20
 80062d8:	f883 266e 	strb.w	r2, [r3, #1646]	; 0x66e
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2214      	movs	r2, #20
 80062e0:	f883 266f 	strb.w	r2, [r3, #1647]	; 0x66f
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2217      	movs	r2, #23
 80062e8:	f883 2670 	strb.w	r2, [r3, #1648]	; 0x670
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2217      	movs	r2, #23
 80062f0:	f883 2671 	strb.w	r2, [r3, #1649]	; 0x671
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2210      	movs	r2, #16
 80062f8:	f883 2672 	strb.w	r2, [r3, #1650]	; 0x672
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2217      	movs	r2, #23
 8006300:	f883 2673 	strb.w	r2, [r3, #1651]	; 0x673
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2217      	movs	r2, #23
 8006308:	f883 2674 	strb.w	r2, [r3, #1652]	; 0x674
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2214      	movs	r2, #20
 8006310:	f883 2675 	strb.w	r2, [r3, #1653]	; 0x675
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2214      	movs	r2, #20
 8006318:	f883 2676 	strb.w	r2, [r3, #1654]	; 0x676
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2214      	movs	r2, #20
 8006320:	f883 2677 	strb.w	r2, [r3, #1655]	; 0x677
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	22f4      	movs	r2, #244	; 0xf4
 8006328:	f883 2678 	strb.w	r2, [r3, #1656]	; 0x678
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	22f4      	movs	r2, #244	; 0xf4
 8006330:	f883 2679 	strb.w	r2, [r3, #1657]	; 0x679
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2204      	movs	r2, #4
 8006338:	f883 267a 	strb.w	r2, [r3, #1658]	; 0x67a
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	22f4      	movs	r2, #244	; 0xf4
 8006340:	f883 267b 	strb.w	r2, [r3, #1659]	; 0x67b
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	22f4      	movs	r2, #244	; 0xf4
 8006348:	f883 267c 	strb.w	r2, [r3, #1660]	; 0x67c
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2214      	movs	r2, #20
 8006350:	f883 267d 	strb.w	r2, [r3, #1661]	; 0x67d
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	22ff      	movs	r2, #255	; 0xff
 8006358:	f883 2680 	strb.w	r2, [r3, #1664]	; 0x680
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	22ff      	movs	r2, #255	; 0xff
 8006360:	f883 2681 	strb.w	r2, [r3, #1665]	; 0x681
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	22f7      	movs	r2, #247	; 0xf7
 8006368:	f883 2683 	strb.w	r2, [r3, #1667]	; 0x683
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	22f7      	movs	r2, #247	; 0xf7
 8006370:	f883 2684 	strb.w	r2, [r3, #1668]	; 0x684
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2214      	movs	r2, #20
 8006378:	f883 2685 	strb.w	r2, [r3, #1669]	; 0x685
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2214      	movs	r2, #20
 8006380:	f883 2686 	strb.w	r2, [r3, #1670]	; 0x686
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2214      	movs	r2, #20
 8006388:	f883 2687 	strb.w	r2, [r3, #1671]	; 0x687
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2214      	movs	r2, #20
 8006390:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2214      	movs	r2, #20
 8006398:	f883 2689 	strb.w	r2, [r3, #1673]	; 0x689
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2214      	movs	r2, #20
 80063a0:	f883 268a 	strb.w	r2, [r3, #1674]	; 0x68a
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2214      	movs	r2, #20
 80063a8:	f883 268b 	strb.w	r2, [r3, #1675]	; 0x68b
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2214      	movs	r2, #20
 80063b0:	f883 268c 	strb.w	r2, [r3, #1676]	; 0x68c
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2214      	movs	r2, #20
 80063b8:	f883 268d 	strb.w	r2, [r3, #1677]	; 0x68d
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2214      	movs	r2, #20
 80063c0:	f883 268e 	strb.w	r2, [r3, #1678]	; 0x68e
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2214      	movs	r2, #20
 80063c8:	f883 268f 	strb.w	r2, [r3, #1679]	; 0x68f
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	22f7      	movs	r2, #247	; 0xf7
 80063d0:	f883 2690 	strb.w	r2, [r3, #1680]	; 0x690
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	22f7      	movs	r2, #247	; 0xf7
 80063d8:	f883 2691 	strb.w	r2, [r3, #1681]	; 0x691
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	22f7      	movs	r2, #247	; 0xf7
 80063e0:	f883 2693 	strb.w	r2, [r3, #1683]	; 0x693
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	22f7      	movs	r2, #247	; 0xf7
 80063e8:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2214      	movs	r2, #20
 80063f0:	f883 2695 	strb.w	r2, [r3, #1685]	; 0x695
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2214      	movs	r2, #20
 80063f8:	f883 2696 	strb.w	r2, [r3, #1686]	; 0x696
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2214      	movs	r2, #20
 8006400:	f883 2697 	strb.w	r2, [r3, #1687]	; 0x697
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2214      	movs	r2, #20
 8006408:	f883 2698 	strb.w	r2, [r3, #1688]	; 0x698
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2217      	movs	r2, #23
 8006410:	f883 2699 	strb.w	r2, [r3, #1689]	; 0x699
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2217      	movs	r2, #23
 8006418:	f883 269a 	strb.w	r2, [r3, #1690]	; 0x69a
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2214      	movs	r2, #20
 8006420:	f883 269b 	strb.w	r2, [r3, #1691]	; 0x69b
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2214      	movs	r2, #20
 8006428:	f883 269c 	strb.w	r2, [r3, #1692]	; 0x69c
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2214      	movs	r2, #20
 8006430:	f883 269d 	strb.w	r2, [r3, #1693]	; 0x69d
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2210      	movs	r2, #16
 8006438:	f883 269e 	strb.w	r2, [r3, #1694]	; 0x69e
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2210      	movs	r2, #16
 8006440:	f883 269f 	strb.w	r2, [r3, #1695]	; 0x69f
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	221f      	movs	r2, #31
 8006448:	f883 26a0 	strb.w	r2, [r3, #1696]	; 0x6a0
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	221f      	movs	r2, #31
 8006450:	f883 26a1 	strb.w	r2, [r3, #1697]	; 0x6a1
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2210      	movs	r2, #16
 8006458:	f883 26a2 	strb.w	r2, [r3, #1698]	; 0x6a2
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	221f      	movs	r2, #31
 8006460:	f883 26a3 	strb.w	r2, [r3, #1699]	; 0x6a3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	221f      	movs	r2, #31
 8006468:	f883 26a4 	strb.w	r2, [r3, #1700]	; 0x6a4
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2210      	movs	r2, #16
 8006470:	f883 26a5 	strb.w	r2, [r3, #1701]	; 0x6a5
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2214      	movs	r2, #20
 8006478:	f883 26a6 	strb.w	r2, [r3, #1702]	; 0x6a6
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2214      	movs	r2, #20
 8006480:	f883 26a7 	strb.w	r2, [r3, #1703]	; 0x6a7
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2214      	movs	r2, #20
 8006488:	f883 26a8 	strb.w	r2, [r3, #1704]	; 0x6a8
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	22f4      	movs	r2, #244	; 0xf4
 8006490:	f883 26a9 	strb.w	r2, [r3, #1705]	; 0x6a9
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	22f4      	movs	r2, #244	; 0xf4
 8006498:	f883 26aa 	strb.w	r2, [r3, #1706]	; 0x6aa
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2214      	movs	r2, #20
 80064a0:	f883 26ab 	strb.w	r2, [r3, #1707]	; 0x6ab
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2214      	movs	r2, #20
 80064a8:	f883 26ac 	strb.w	r2, [r3, #1708]	; 0x6ac
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2214      	movs	r2, #20
 80064b0:	f883 26ad 	strb.w	r2, [r3, #1709]	; 0x6ad
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2210      	movs	r2, #16
 80064b8:	f883 26ae 	strb.w	r2, [r3, #1710]	; 0x6ae
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2210      	movs	r2, #16
 80064c0:	f883 26af 	strb.w	r2, [r3, #1711]	; 0x6af
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	22f0      	movs	r2, #240	; 0xf0
 80064c8:	f883 26b0 	strb.w	r2, [r3, #1712]	; 0x6b0
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	22f0      	movs	r2, #240	; 0xf0
 80064d0:	f883 26b1 	strb.w	r2, [r3, #1713]	; 0x6b1
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2210      	movs	r2, #16
 80064d8:	f883 26b2 	strb.w	r2, [r3, #1714]	; 0x6b2
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	22f0      	movs	r2, #240	; 0xf0
 80064e0:	f883 26b3 	strb.w	r2, [r3, #1715]	; 0x6b3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	22f0      	movs	r2, #240	; 0xf0
 80064e8:	f883 26b4 	strb.w	r2, [r3, #1716]	; 0x6b4
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2210      	movs	r2, #16
 80064f0:	f883 26b5 	strb.w	r2, [r3, #1717]	; 0x6b5
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	221f      	movs	r2, #31
 80064f8:	f883 26b8 	strb.w	r2, [r3, #1720]	; 0x6b8
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	221f      	movs	r2, #31
 8006500:	f883 26b9 	strb.w	r2, [r3, #1721]	; 0x6b9
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2210      	movs	r2, #16
 8006508:	f883 26ba 	strb.w	r2, [r3, #1722]	; 0x6ba
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	221f      	movs	r2, #31
 8006510:	f883 26bb 	strb.w	r2, [r3, #1723]	; 0x6bb
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	221f      	movs	r2, #31
 8006518:	f883 26bc 	strb.w	r2, [r3, #1724]	; 0x6bc
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2210      	movs	r2, #16
 8006520:	f883 26bd 	strb.w	r2, [r3, #1725]	; 0x6bd
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	221f      	movs	r2, #31
 8006528:	f883 26c1 	strb.w	r2, [r3, #1729]	; 0x6c1
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	221f      	movs	r2, #31
 8006530:	f883 26c2 	strb.w	r2, [r3, #1730]	; 0x6c2
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2214      	movs	r2, #20
 8006538:	f883 26c3 	strb.w	r2, [r3, #1731]	; 0x6c3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2214      	movs	r2, #20
 8006540:	f883 26c4 	strb.w	r2, [r3, #1732]	; 0x6c4
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2214      	movs	r2, #20
 8006548:	f883 26c5 	strb.w	r2, [r3, #1733]	; 0x6c5
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	22fc      	movs	r2, #252	; 0xfc
 8006550:	f883 26c9 	strb.w	r2, [r3, #1737]	; 0x6c9
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	22fc      	movs	r2, #252	; 0xfc
 8006558:	f883 26ca 	strb.w	r2, [r3, #1738]	; 0x6ca
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2214      	movs	r2, #20
 8006560:	f883 26cb 	strb.w	r2, [r3, #1739]	; 0x6cb
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2214      	movs	r2, #20
 8006568:	f883 26cc 	strb.w	r2, [r3, #1740]	; 0x6cc
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2214      	movs	r2, #20
 8006570:	f883 26cd 	strb.w	r2, [r3, #1741]	; 0x6cd
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	22f0      	movs	r2, #240	; 0xf0
 8006578:	f883 26d0 	strb.w	r2, [r3, #1744]	; 0x6d0
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	22f0      	movs	r2, #240	; 0xf0
 8006580:	f883 26d1 	strb.w	r2, [r3, #1745]	; 0x6d1
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2210      	movs	r2, #16
 8006588:	f883 26d2 	strb.w	r2, [r3, #1746]	; 0x6d2
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	22f0      	movs	r2, #240	; 0xf0
 8006590:	f883 26d3 	strb.w	r2, [r3, #1747]	; 0x6d3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	22f0      	movs	r2, #240	; 0xf0
 8006598:	f883 26d4 	strb.w	r2, [r3, #1748]	; 0x6d4
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2210      	movs	r2, #16
 80065a0:	f883 26d5 	strb.w	r2, [r3, #1749]	; 0x6d5
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2210      	movs	r2, #16
 80065a8:	f883 26d6 	strb.w	r2, [r3, #1750]	; 0x6d6
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2210      	movs	r2, #16
 80065b0:	f883 26d7 	strb.w	r2, [r3, #1751]	; 0x6d7
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	22ff      	movs	r2, #255	; 0xff
 80065b8:	f883 26d8 	strb.w	r2, [r3, #1752]	; 0x6d8
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	22ff      	movs	r2, #255	; 0xff
 80065c0:	f883 26d9 	strb.w	r2, [r3, #1753]	; 0x6d9
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2210      	movs	r2, #16
 80065c8:	f883 26da 	strb.w	r2, [r3, #1754]	; 0x6da
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	22ff      	movs	r2, #255	; 0xff
 80065d0:	f883 26db 	strb.w	r2, [r3, #1755]	; 0x6db
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	22ff      	movs	r2, #255	; 0xff
 80065d8:	f883 26dc 	strb.w	r2, [r3, #1756]	; 0x6dc
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2210      	movs	r2, #16
 80065e0:	f883 26dd 	strb.w	r2, [r3, #1757]	; 0x6dd
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2214      	movs	r2, #20
 80065e8:	f883 26de 	strb.w	r2, [r3, #1758]	; 0x6de
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2214      	movs	r2, #20
 80065f0:	f883 26df 	strb.w	r2, [r3, #1759]	; 0x6df
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2214      	movs	r2, #20
 80065f8:	f883 26e0 	strb.w	r2, [r3, #1760]	; 0x6e0
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	22ff      	movs	r2, #255	; 0xff
 8006600:	f883 26e1 	strb.w	r2, [r3, #1761]	; 0x6e1
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	22ff      	movs	r2, #255	; 0xff
 8006608:	f883 26e2 	strb.w	r2, [r3, #1762]	; 0x6e2
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2214      	movs	r2, #20
 8006610:	f883 26e3 	strb.w	r2, [r3, #1763]	; 0x6e3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2214      	movs	r2, #20
 8006618:	f883 26e4 	strb.w	r2, [r3, #1764]	; 0x6e4
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2214      	movs	r2, #20
 8006620:	f883 26e5 	strb.w	r2, [r3, #1765]	; 0x6e5
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2210      	movs	r2, #16
 8006628:	f883 26e6 	strb.w	r2, [r3, #1766]	; 0x6e6
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2210      	movs	r2, #16
 8006630:	f883 26e7 	strb.w	r2, [r3, #1767]	; 0x6e7
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2210      	movs	r2, #16
 8006638:	f883 26e8 	strb.w	r2, [r3, #1768]	; 0x6e8
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	221f      	movs	r2, #31
 8006640:	f883 26e9 	strb.w	r2, [r3, #1769]	; 0x6e9
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	221f      	movs	r2, #31
 8006648:	f883 26ea 	strb.w	r2, [r3, #1770]	; 0x6ea
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	22f0      	movs	r2, #240	; 0xf0
 8006650:	f883 26f1 	strb.w	r2, [r3, #1777]	; 0x6f1
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	22f0      	movs	r2, #240	; 0xf0
 8006658:	f883 26f2 	strb.w	r2, [r3, #1778]	; 0x6f2
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2210      	movs	r2, #16
 8006660:	f883 26f3 	strb.w	r2, [r3, #1779]	; 0x6f3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2210      	movs	r2, #16
 8006668:	f883 26f4 	strb.w	r2, [r3, #1780]	; 0x6f4
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2210      	movs	r2, #16
 8006670:	f883 26f5 	strb.w	r2, [r3, #1781]	; 0x6f5
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	22ff      	movs	r2, #255	; 0xff
 8006678:	f883 26f6 	strb.w	r2, [r3, #1782]	; 0x6f6
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	22ff      	movs	r2, #255	; 0xff
 8006680:	f883 26f7 	strb.w	r2, [r3, #1783]	; 0x6f7
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	22ff      	movs	r2, #255	; 0xff
 8006688:	f883 26f8 	strb.w	r2, [r3, #1784]	; 0x6f8
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	22ff      	movs	r2, #255	; 0xff
 8006690:	f883 26f9 	strb.w	r2, [r3, #1785]	; 0x6f9
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	22ff      	movs	r2, #255	; 0xff
 8006698:	f883 26fa 	strb.w	r2, [r3, #1786]	; 0x6fa
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	22ff      	movs	r2, #255	; 0xff
 80066a0:	f883 26fb 	strb.w	r2, [r3, #1787]	; 0x6fb
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	22ff      	movs	r2, #255	; 0xff
 80066a8:	f883 26fc 	strb.w	r2, [r3, #1788]	; 0x6fc
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	22ff      	movs	r2, #255	; 0xff
 80066b0:	f883 26fd 	strb.w	r2, [r3, #1789]	; 0x6fd
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	22f0      	movs	r2, #240	; 0xf0
 80066b8:	f883 26fe 	strb.w	r2, [r3, #1790]	; 0x6fe
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	22f0      	movs	r2, #240	; 0xf0
 80066c0:	f883 26ff 	strb.w	r2, [r3, #1791]	; 0x6ff
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	22f0      	movs	r2, #240	; 0xf0
 80066c8:	f883 2700 	strb.w	r2, [r3, #1792]	; 0x700
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	22f0      	movs	r2, #240	; 0xf0
 80066d0:	f883 2701 	strb.w	r2, [r3, #1793]	; 0x701
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	22f0      	movs	r2, #240	; 0xf0
 80066d8:	f883 2702 	strb.w	r2, [r3, #1794]	; 0x702
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	22f0      	movs	r2, #240	; 0xf0
 80066e0:	f883 2703 	strb.w	r2, [r3, #1795]	; 0x703
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	22f0      	movs	r2, #240	; 0xf0
 80066e8:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	22f0      	movs	r2, #240	; 0xf0
 80066f0:	f883 2705 	strb.w	r2, [r3, #1797]	; 0x705
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	22ff      	movs	r2, #255	; 0xff
 80066f8:	f883 2706 	strb.w	r2, [r3, #1798]	; 0x706
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	22ff      	movs	r2, #255	; 0xff
 8006700:	f883 2707 	strb.w	r2, [r3, #1799]	; 0x707
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	22ff      	movs	r2, #255	; 0xff
 8006708:	f883 2708 	strb.w	r2, [r3, #1800]	; 0x708
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	22ff      	movs	r2, #255	; 0xff
 8006710:	f883 2709 	strb.w	r2, [r3, #1801]	; 0x709
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	22ff      	movs	r2, #255	; 0xff
 8006718:	f883 2712 	strb.w	r2, [r3, #1810]	; 0x712
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	22ff      	movs	r2, #255	; 0xff
 8006720:	f883 2713 	strb.w	r2, [r3, #1811]	; 0x713
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	22ff      	movs	r2, #255	; 0xff
 8006728:	f883 2714 	strb.w	r2, [r3, #1812]	; 0x714
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	22ff      	movs	r2, #255	; 0xff
 8006730:	f883 2715 	strb.w	r2, [r3, #1813]	; 0x715
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	220f      	movs	r2, #15
 8006738:	f883 2716 	strb.w	r2, [r3, #1814]	; 0x716
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	220f      	movs	r2, #15
 8006740:	f883 2717 	strb.w	r2, [r3, #1815]	; 0x717
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	220f      	movs	r2, #15
 8006748:	f883 2718 	strb.w	r2, [r3, #1816]	; 0x718
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	220f      	movs	r2, #15
 8006750:	f883 2719 	strb.w	r2, [r3, #1817]	; 0x719
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	220f      	movs	r2, #15
 8006758:	f883 271a 	strb.w	r2, [r3, #1818]	; 0x71a
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	220f      	movs	r2, #15
 8006760:	f883 271b 	strb.w	r2, [r3, #1819]	; 0x71b
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	220f      	movs	r2, #15
 8006768:	f883 271c 	strb.w	r2, [r3, #1820]	; 0x71c
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	220f      	movs	r2, #15
 8006770:	f883 271d 	strb.w	r2, [r3, #1821]	; 0x71d
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2238      	movs	r2, #56	; 0x38
 8006778:	f883 271e 	strb.w	r2, [r3, #1822]	; 0x71e
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	227c      	movs	r2, #124	; 0x7c
 8006780:	f883 271f 	strb.w	r2, [r3, #1823]	; 0x71f
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2244      	movs	r2, #68	; 0x44
 8006788:	f883 2720 	strb.w	r2, [r3, #1824]	; 0x720
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	226c      	movs	r2, #108	; 0x6c
 8006790:	f883 2721 	strb.w	r2, [r3, #1825]	; 0x721
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2238      	movs	r2, #56	; 0x38
 8006798:	f883 2722 	strb.w	r2, [r3, #1826]	; 0x722
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	226c      	movs	r2, #108	; 0x6c
 80067a0:	f883 2723 	strb.w	r2, [r3, #1827]	; 0x723
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2244      	movs	r2, #68	; 0x44
 80067a8:	f883 2724 	strb.w	r2, [r3, #1828]	; 0x724
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	22fc      	movs	r2, #252	; 0xfc
 80067b0:	f883 2726 	strb.w	r2, [r3, #1830]	; 0x726
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	22fe      	movs	r2, #254	; 0xfe
 80067b8:	f883 2727 	strb.w	r2, [r3, #1831]	; 0x727
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	222a      	movs	r2, #42	; 0x2a
 80067c0:	f883 2728 	strb.w	r2, [r3, #1832]	; 0x728
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	222a      	movs	r2, #42	; 0x2a
 80067c8:	f883 2729 	strb.w	r2, [r3, #1833]	; 0x729
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	223e      	movs	r2, #62	; 0x3e
 80067d0:	f883 272a 	strb.w	r2, [r3, #1834]	; 0x72a
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2214      	movs	r2, #20
 80067d8:	f883 272b 	strb.w	r2, [r3, #1835]	; 0x72b
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	227e      	movs	r2, #126	; 0x7e
 80067e0:	f883 272e 	strb.w	r2, [r3, #1838]	; 0x72e
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	227e      	movs	r2, #126	; 0x7e
 80067e8:	f883 272f 	strb.w	r2, [r3, #1839]	; 0x72f
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2202      	movs	r2, #2
 80067f0:	f883 2730 	strb.w	r2, [r3, #1840]	; 0x730
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2202      	movs	r2, #2
 80067f8:	f883 2731 	strb.w	r2, [r3, #1841]	; 0x731
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2206      	movs	r2, #6
 8006800:	f883 2732 	strb.w	r2, [r3, #1842]	; 0x732
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2206      	movs	r2, #6
 8006808:	f883 2733 	strb.w	r2, [r3, #1843]	; 0x733
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2202      	movs	r2, #2
 8006810:	f883 2736 	strb.w	r2, [r3, #1846]	; 0x736
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	227e      	movs	r2, #126	; 0x7e
 8006818:	f883 2737 	strb.w	r2, [r3, #1847]	; 0x737
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	227e      	movs	r2, #126	; 0x7e
 8006820:	f883 2738 	strb.w	r2, [r3, #1848]	; 0x738
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2202      	movs	r2, #2
 8006828:	f883 2739 	strb.w	r2, [r3, #1849]	; 0x739
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	227e      	movs	r2, #126	; 0x7e
 8006830:	f883 273a 	strb.w	r2, [r3, #1850]	; 0x73a
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	227e      	movs	r2, #126	; 0x7e
 8006838:	f883 273b 	strb.w	r2, [r3, #1851]	; 0x73b
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2202      	movs	r2, #2
 8006840:	f883 273c 	strb.w	r2, [r3, #1852]	; 0x73c
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2263      	movs	r2, #99	; 0x63
 8006848:	f883 273e 	strb.w	r2, [r3, #1854]	; 0x73e
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2277      	movs	r2, #119	; 0x77
 8006850:	f883 273f 	strb.w	r2, [r3, #1855]	; 0x73f
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	225d      	movs	r2, #93	; 0x5d
 8006858:	f883 2740 	strb.w	r2, [r3, #1856]	; 0x740
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2249      	movs	r2, #73	; 0x49
 8006860:	f883 2741 	strb.w	r2, [r3, #1857]	; 0x741
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2263      	movs	r2, #99	; 0x63
 8006868:	f883 2742 	strb.w	r2, [r3, #1858]	; 0x742
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2263      	movs	r2, #99	; 0x63
 8006870:	f883 2743 	strb.w	r2, [r3, #1859]	; 0x743
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2238      	movs	r2, #56	; 0x38
 8006878:	f883 2746 	strb.w	r2, [r3, #1862]	; 0x746
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	227c      	movs	r2, #124	; 0x7c
 8006880:	f883 2747 	strb.w	r2, [r3, #1863]	; 0x747
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2244      	movs	r2, #68	; 0x44
 8006888:	f883 2748 	strb.w	r2, [r3, #1864]	; 0x748
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	227c      	movs	r2, #124	; 0x7c
 8006890:	f883 2749 	strb.w	r2, [r3, #1865]	; 0x749
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	223c      	movs	r2, #60	; 0x3c
 8006898:	f883 274a 	strb.w	r2, [r3, #1866]	; 0x74a
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2204      	movs	r2, #4
 80068a0:	f883 274b 	strb.w	r2, [r3, #1867]	; 0x74b
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2204      	movs	r2, #4
 80068a8:	f883 274c 	strb.w	r2, [r3, #1868]	; 0x74c
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2280      	movs	r2, #128	; 0x80
 80068b0:	f883 274e 	strb.w	r2, [r3, #1870]	; 0x74e
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	22fe      	movs	r2, #254	; 0xfe
 80068b8:	f883 274f 	strb.w	r2, [r3, #1871]	; 0x74f
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	227e      	movs	r2, #126	; 0x7e
 80068c0:	f883 2750 	strb.w	r2, [r3, #1872]	; 0x750
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2220      	movs	r2, #32
 80068c8:	f883 2751 	strb.w	r2, [r3, #1873]	; 0x751
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2220      	movs	r2, #32
 80068d0:	f883 2752 	strb.w	r2, [r3, #1874]	; 0x752
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	223e      	movs	r2, #62	; 0x3e
 80068d8:	f883 2753 	strb.w	r2, [r3, #1875]	; 0x753
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	221e      	movs	r2, #30
 80068e0:	f883 2754 	strb.w	r2, [r3, #1876]	; 0x754
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2204      	movs	r2, #4
 80068e8:	f883 2756 	strb.w	r2, [r3, #1878]	; 0x756
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2206      	movs	r2, #6
 80068f0:	f883 2757 	strb.w	r2, [r3, #1879]	; 0x757
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2202      	movs	r2, #2
 80068f8:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	227e      	movs	r2, #126	; 0x7e
 8006900:	f883 2759 	strb.w	r2, [r3, #1881]	; 0x759
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	227c      	movs	r2, #124	; 0x7c
 8006908:	f883 275a 	strb.w	r2, [r3, #1882]	; 0x75a
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2206      	movs	r2, #6
 8006910:	f883 275b 	strb.w	r2, [r3, #1883]	; 0x75b
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2202      	movs	r2, #2
 8006918:	f883 275c 	strb.w	r2, [r3, #1884]	; 0x75c
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2299      	movs	r2, #153	; 0x99
 8006920:	f883 275e 	strb.w	r2, [r3, #1886]	; 0x75e
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	22bd      	movs	r2, #189	; 0xbd
 8006928:	f883 275f 	strb.w	r2, [r3, #1887]	; 0x75f
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	22e7      	movs	r2, #231	; 0xe7
 8006930:	f883 2760 	strb.w	r2, [r3, #1888]	; 0x760
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	22e7      	movs	r2, #231	; 0xe7
 8006938:	f883 2761 	strb.w	r2, [r3, #1889]	; 0x761
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	22bd      	movs	r2, #189	; 0xbd
 8006940:	f883 2762 	strb.w	r2, [r3, #1890]	; 0x762
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2299      	movs	r2, #153	; 0x99
 8006948:	f883 2763 	strb.w	r2, [r3, #1891]	; 0x763
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	221c      	movs	r2, #28
 8006950:	f883 2766 	strb.w	r2, [r3, #1894]	; 0x766
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	223e      	movs	r2, #62	; 0x3e
 8006958:	f883 2767 	strb.w	r2, [r3, #1895]	; 0x767
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	226b      	movs	r2, #107	; 0x6b
 8006960:	f883 2768 	strb.w	r2, [r3, #1896]	; 0x768
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2249      	movs	r2, #73	; 0x49
 8006968:	f883 2769 	strb.w	r2, [r3, #1897]	; 0x769
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	226b      	movs	r2, #107	; 0x6b
 8006970:	f883 276a 	strb.w	r2, [r3, #1898]	; 0x76a
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	223e      	movs	r2, #62	; 0x3e
 8006978:	f883 276b 	strb.w	r2, [r3, #1899]	; 0x76b
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	221c      	movs	r2, #28
 8006980:	f883 276c 	strb.w	r2, [r3, #1900]	; 0x76c
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	224c      	movs	r2, #76	; 0x4c
 8006988:	f883 276e 	strb.w	r2, [r3, #1902]	; 0x76e
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	227e      	movs	r2, #126	; 0x7e
 8006990:	f883 276f 	strb.w	r2, [r3, #1903]	; 0x76f
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2273      	movs	r2, #115	; 0x73
 8006998:	f883 2770 	strb.w	r2, [r3, #1904]	; 0x770
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2771 	strb.w	r2, [r3, #1905]	; 0x771
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2273      	movs	r2, #115	; 0x73
 80069a8:	f883 2772 	strb.w	r2, [r3, #1906]	; 0x772
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	227e      	movs	r2, #126	; 0x7e
 80069b0:	f883 2773 	strb.w	r2, [r3, #1907]	; 0x773
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	224c      	movs	r2, #76	; 0x4c
 80069b8:	f883 2774 	strb.w	r2, [r3, #1908]	; 0x774
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2230      	movs	r2, #48	; 0x30
 80069c0:	f883 2776 	strb.w	r2, [r3, #1910]	; 0x776
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2278      	movs	r2, #120	; 0x78
 80069c8:	f883 2777 	strb.w	r2, [r3, #1911]	; 0x777
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	224a      	movs	r2, #74	; 0x4a
 80069d0:	f883 2778 	strb.w	r2, [r3, #1912]	; 0x778
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	224f      	movs	r2, #79	; 0x4f
 80069d8:	f883 2779 	strb.w	r2, [r3, #1913]	; 0x779
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	227d      	movs	r2, #125	; 0x7d
 80069e0:	f883 277a 	strb.w	r2, [r3, #1914]	; 0x77a
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2239      	movs	r2, #57	; 0x39
 80069e8:	f883 277b 	strb.w	r2, [r3, #1915]	; 0x77b
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2218      	movs	r2, #24
 80069f0:	f883 277e 	strb.w	r2, [r3, #1918]	; 0x77e
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	223c      	movs	r2, #60	; 0x3c
 80069f8:	f883 277f 	strb.w	r2, [r3, #1919]	; 0x77f
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2224      	movs	r2, #36	; 0x24
 8006a00:	f883 2780 	strb.w	r2, [r3, #1920]	; 0x780
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	223c      	movs	r2, #60	; 0x3c
 8006a08:	f883 2781 	strb.w	r2, [r3, #1921]	; 0x781
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	223c      	movs	r2, #60	; 0x3c
 8006a10:	f883 2782 	strb.w	r2, [r3, #1922]	; 0x782
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2224      	movs	r2, #36	; 0x24
 8006a18:	f883 2783 	strb.w	r2, [r3, #1923]	; 0x783
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	223c      	movs	r2, #60	; 0x3c
 8006a20:	f883 2784 	strb.w	r2, [r3, #1924]	; 0x784
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2218      	movs	r2, #24
 8006a28:	f883 2785 	strb.w	r2, [r3, #1925]	; 0x785
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2298      	movs	r2, #152	; 0x98
 8006a30:	f883 2786 	strb.w	r2, [r3, #1926]	; 0x786
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	22fc      	movs	r2, #252	; 0xfc
 8006a38:	f883 2787 	strb.w	r2, [r3, #1927]	; 0x787
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2264      	movs	r2, #100	; 0x64
 8006a40:	f883 2788 	strb.w	r2, [r3, #1928]	; 0x788
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	223c      	movs	r2, #60	; 0x3c
 8006a48:	f883 2789 	strb.w	r2, [r3, #1929]	; 0x789
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	223e      	movs	r2, #62	; 0x3e
 8006a50:	f883 278a 	strb.w	r2, [r3, #1930]	; 0x78a
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2227      	movs	r2, #39	; 0x27
 8006a58:	f883 278b 	strb.w	r2, [r3, #1931]	; 0x78b
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	223d      	movs	r2, #61	; 0x3d
 8006a60:	f883 278c 	strb.w	r2, [r3, #1932]	; 0x78c
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2218      	movs	r2, #24
 8006a68:	f883 278d 	strb.w	r2, [r3, #1933]	; 0x78d
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	221c      	movs	r2, #28
 8006a70:	f883 278e 	strb.w	r2, [r3, #1934]	; 0x78e
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	223e      	movs	r2, #62	; 0x3e
 8006a78:	f883 278f 	strb.w	r2, [r3, #1935]	; 0x78f
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	226b      	movs	r2, #107	; 0x6b
 8006a80:	f883 2790 	strb.w	r2, [r3, #1936]	; 0x790
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2249      	movs	r2, #73	; 0x49
 8006a88:	f883 2791 	strb.w	r2, [r3, #1937]	; 0x791
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2249      	movs	r2, #73	; 0x49
 8006a90:	f883 2792 	strb.w	r2, [r3, #1938]	; 0x792
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	227e      	movs	r2, #126	; 0x7e
 8006a98:	f883 2796 	strb.w	r2, [r3, #1942]	; 0x796
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	227f      	movs	r2, #127	; 0x7f
 8006aa0:	f883 2797 	strb.w	r2, [r3, #1943]	; 0x797
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2798 	strb.w	r2, [r3, #1944]	; 0x798
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2799 	strb.w	r2, [r3, #1945]	; 0x799
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	227f      	movs	r2, #127	; 0x7f
 8006ab8:	f883 279a 	strb.w	r2, [r3, #1946]	; 0x79a
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	227e      	movs	r2, #126	; 0x7e
 8006ac0:	f883 279b 	strb.w	r2, [r3, #1947]	; 0x79b
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	222a      	movs	r2, #42	; 0x2a
 8006ac8:	f883 279e 	strb.w	r2, [r3, #1950]	; 0x79e
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	222a      	movs	r2, #42	; 0x2a
 8006ad0:	f883 279f 	strb.w	r2, [r3, #1951]	; 0x79f
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	222a      	movs	r2, #42	; 0x2a
 8006ad8:	f883 27a0 	strb.w	r2, [r3, #1952]	; 0x7a0
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	222a      	movs	r2, #42	; 0x2a
 8006ae0:	f883 27a1 	strb.w	r2, [r3, #1953]	; 0x7a1
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	222a      	movs	r2, #42	; 0x2a
 8006ae8:	f883 27a2 	strb.w	r2, [r3, #1954]	; 0x7a2
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	222a      	movs	r2, #42	; 0x2a
 8006af0:	f883 27a3 	strb.w	r2, [r3, #1955]	; 0x7a3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2244      	movs	r2, #68	; 0x44
 8006af8:	f883 27a6 	strb.w	r2, [r3, #1958]	; 0x7a6
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2244      	movs	r2, #68	; 0x44
 8006b00:	f883 27a7 	strb.w	r2, [r3, #1959]	; 0x7a7
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	225f      	movs	r2, #95	; 0x5f
 8006b08:	f883 27a8 	strb.w	r2, [r3, #1960]	; 0x7a8
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	225f      	movs	r2, #95	; 0x5f
 8006b10:	f883 27a9 	strb.w	r2, [r3, #1961]	; 0x7a9
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2244      	movs	r2, #68	; 0x44
 8006b18:	f883 27aa 	strb.w	r2, [r3, #1962]	; 0x7aa
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2244      	movs	r2, #68	; 0x44
 8006b20:	f883 27ab 	strb.w	r2, [r3, #1963]	; 0x7ab
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2240      	movs	r2, #64	; 0x40
 8006b28:	f883 27ae 	strb.w	r2, [r3, #1966]	; 0x7ae
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2251      	movs	r2, #81	; 0x51
 8006b30:	f883 27af 	strb.w	r2, [r3, #1967]	; 0x7af
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	225b      	movs	r2, #91	; 0x5b
 8006b38:	f883 27b0 	strb.w	r2, [r3, #1968]	; 0x7b0
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	224e      	movs	r2, #78	; 0x4e
 8006b40:	f883 27b1 	strb.w	r2, [r3, #1969]	; 0x7b1
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2244      	movs	r2, #68	; 0x44
 8006b48:	f883 27b2 	strb.w	r2, [r3, #1970]	; 0x7b2
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2240      	movs	r2, #64	; 0x40
 8006b50:	f883 27b3 	strb.w	r2, [r3, #1971]	; 0x7b3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2240      	movs	r2, #64	; 0x40
 8006b58:	f883 27b6 	strb.w	r2, [r3, #1974]	; 0x7b6
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2244      	movs	r2, #68	; 0x44
 8006b60:	f883 27b7 	strb.w	r2, [r3, #1975]	; 0x7b7
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	224e      	movs	r2, #78	; 0x4e
 8006b68:	f883 27b8 	strb.w	r2, [r3, #1976]	; 0x7b8
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	225b      	movs	r2, #91	; 0x5b
 8006b70:	f883 27b9 	strb.w	r2, [r3, #1977]	; 0x7b9
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2251      	movs	r2, #81	; 0x51
 8006b78:	f883 27ba 	strb.w	r2, [r3, #1978]	; 0x7ba
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2240      	movs	r2, #64	; 0x40
 8006b80:	f883 27bb 	strb.w	r2, [r3, #1979]	; 0x7bb
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	22fe      	movs	r2, #254	; 0xfe
 8006b88:	f883 27c1 	strb.w	r2, [r3, #1985]	; 0x7c1
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	22ff      	movs	r2, #255	; 0xff
 8006b90:	f883 27c2 	strb.w	r2, [r3, #1986]	; 0x7c2
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 27c3 	strb.w	r2, [r3, #1987]	; 0x7c3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2207      	movs	r2, #7
 8006ba0:	f883 27c4 	strb.w	r2, [r3, #1988]	; 0x7c4
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2206      	movs	r2, #6
 8006ba8:	f883 27c5 	strb.w	r2, [r3, #1989]	; 0x7c5
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2260      	movs	r2, #96	; 0x60
 8006bb0:	f883 27c6 	strb.w	r2, [r3, #1990]	; 0x7c6
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	22e0      	movs	r2, #224	; 0xe0
 8006bb8:	f883 27c7 	strb.w	r2, [r3, #1991]	; 0x7c7
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2280      	movs	r2, #128	; 0x80
 8006bc0:	f883 27c8 	strb.w	r2, [r3, #1992]	; 0x7c8
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	22ff      	movs	r2, #255	; 0xff
 8006bc8:	f883 27c9 	strb.w	r2, [r3, #1993]	; 0x7c9
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	227f      	movs	r2, #127	; 0x7f
 8006bd0:	f883 27ca 	strb.w	r2, [r3, #1994]	; 0x7ca
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2208      	movs	r2, #8
 8006bd8:	f883 27ce 	strb.w	r2, [r3, #1998]	; 0x7ce
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2208      	movs	r2, #8
 8006be0:	f883 27cf 	strb.w	r2, [r3, #1999]	; 0x7cf
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	226b      	movs	r2, #107	; 0x6b
 8006be8:	f883 27d0 	strb.w	r2, [r3, #2000]	; 0x7d0
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	226b      	movs	r2, #107	; 0x6b
 8006bf0:	f883 27d1 	strb.w	r2, [r3, #2001]	; 0x7d1
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2208      	movs	r2, #8
 8006bf8:	f883 27d2 	strb.w	r2, [r3, #2002]	; 0x7d2
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2208      	movs	r2, #8
 8006c00:	f883 27d3 	strb.w	r2, [r3, #2003]	; 0x7d3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2224      	movs	r2, #36	; 0x24
 8006c08:	f883 27d6 	strb.w	r2, [r3, #2006]	; 0x7d6
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2236      	movs	r2, #54	; 0x36
 8006c10:	f883 27d7 	strb.w	r2, [r3, #2007]	; 0x7d7
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2212      	movs	r2, #18
 8006c18:	f883 27d8 	strb.w	r2, [r3, #2008]	; 0x7d8
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2236      	movs	r2, #54	; 0x36
 8006c20:	f883 27d9 	strb.w	r2, [r3, #2009]	; 0x7d9
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2224      	movs	r2, #36	; 0x24
 8006c28:	f883 27da 	strb.w	r2, [r3, #2010]	; 0x7da
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2236      	movs	r2, #54	; 0x36
 8006c30:	f883 27db 	strb.w	r2, [r3, #2011]	; 0x7db
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2212      	movs	r2, #18
 8006c38:	f883 27dc 	strb.w	r2, [r3, #2012]	; 0x7dc
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2206      	movs	r2, #6
 8006c40:	f883 27df 	strb.w	r2, [r3, #2015]	; 0x7df
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	220f      	movs	r2, #15
 8006c48:	f883 27e0 	strb.w	r2, [r3, #2016]	; 0x7e0
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2209      	movs	r2, #9
 8006c50:	f883 27e1 	strb.w	r2, [r3, #2017]	; 0x7e1
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	220f      	movs	r2, #15
 8006c58:	f883 27e2 	strb.w	r2, [r3, #2018]	; 0x7e2
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2206      	movs	r2, #6
 8006c60:	f883 27e3 	strb.w	r2, [r3, #2019]	; 0x7e3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2218      	movs	r2, #24
 8006c68:	f883 27e9 	strb.w	r2, [r3, #2025]	; 0x7e9
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2218      	movs	r2, #24
 8006c70:	f883 27ea 	strb.w	r2, [r3, #2026]	; 0x7ea
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2210      	movs	r2, #16
 8006c78:	f883 27f1 	strb.w	r2, [r3, #2033]	; 0x7f1
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2210      	movs	r2, #16
 8006c80:	f883 27f2 	strb.w	r2, [r3, #2034]	; 0x7f2
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2210      	movs	r2, #16
 8006c88:	f883 27f6 	strb.w	r2, [r3, #2038]	; 0x7f6
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2230      	movs	r2, #48	; 0x30
 8006c90:	f883 27f7 	strb.w	r2, [r3, #2039]	; 0x7f7
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2270      	movs	r2, #112	; 0x70
 8006c98:	f883 27f8 	strb.w	r2, [r3, #2040]	; 0x7f8
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	22c0      	movs	r2, #192	; 0xc0
 8006ca0:	f883 27f9 	strb.w	r2, [r3, #2041]	; 0x7f9
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	22ff      	movs	r2, #255	; 0xff
 8006ca8:	f883 27fa 	strb.w	r2, [r3, #2042]	; 0x7fa
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	22ff      	movs	r2, #255	; 0xff
 8006cb0:	f883 27fb 	strb.w	r2, [r3, #2043]	; 0x7fb
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 27fc 	strb.w	r2, [r3, #2044]	; 0x7fc
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 27fd 	strb.w	r2, [r3, #2045]	; 0x7fd
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	221f      	movs	r2, #31
 8006cc8:	f883 27ff 	strb.w	r2, [r3, #2047]	; 0x7ff
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	221f      	movs	r2, #31
 8006cd0:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 2801 	strb.w	r2, [r3, #2049]	; 0x801
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	221f      	movs	r2, #31
 8006ce0:	f883 2802 	strb.w	r2, [r3, #2050]	; 0x802
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	221e      	movs	r2, #30
 8006ce8:	f883 2803 	strb.w	r2, [r3, #2051]	; 0x803
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2219      	movs	r2, #25
 8006cf0:	f883 2807 	strb.w	r2, [r3, #2055]	; 0x807
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	221d      	movs	r2, #29
 8006cf8:	f883 2808 	strb.w	r2, [r3, #2056]	; 0x808
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2217      	movs	r2, #23
 8006d00:	f883 2809 	strb.w	r2, [r3, #2057]	; 0x809
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2212      	movs	r2, #18
 8006d08:	f883 280a 	strb.w	r2, [r3, #2058]	; 0x80a
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	223c      	movs	r2, #60	; 0x3c
 8006d10:	f883 2810 	strb.w	r2, [r3, #2064]	; 0x810
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	223c      	movs	r2, #60	; 0x3c
 8006d18:	f883 2811 	strb.w	r2, [r3, #2065]	; 0x811
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	223c      	movs	r2, #60	; 0x3c
 8006d20:	f883 2812 	strb.w	r2, [r3, #2066]	; 0x812
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	223c      	movs	r2, #60	; 0x3c
 8006d28:	f883 2813 	strb.w	r2, [r3, #2067]	; 0x813
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f603 0326 	addw	r3, r3, #2086	; 0x826
 8006d32:	f240 12db 	movw	r2, #475	; 0x1db
 8006d36:	2100      	movs	r1, #0
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f007 fe5f 	bl	800e9fc <memset>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	225f      	movs	r2, #95	; 0x5f
 8006d42:	f883 282d 	strb.w	r2, [r3, #2093]	; 0x82d
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2207      	movs	r2, #7
 8006d4a:	f883 2831 	strb.w	r2, [r3, #2097]	; 0x831
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2207      	movs	r2, #7
 8006d52:	f883 2833 	strb.w	r2, [r3, #2099]	; 0x833
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2214      	movs	r2, #20
 8006d5a:	f883 2835 	strb.w	r2, [r3, #2101]	; 0x835
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	227f      	movs	r2, #127	; 0x7f
 8006d62:	f883 2836 	strb.w	r2, [r3, #2102]	; 0x836
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2214      	movs	r2, #20
 8006d6a:	f883 2837 	strb.w	r2, [r3, #2103]	; 0x837
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	227f      	movs	r2, #127	; 0x7f
 8006d72:	f883 2838 	strb.w	r2, [r3, #2104]	; 0x838
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2214      	movs	r2, #20
 8006d7a:	f883 2839 	strb.w	r2, [r3, #2105]	; 0x839
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2224      	movs	r2, #36	; 0x24
 8006d82:	f883 283a 	strb.w	r2, [r3, #2106]	; 0x83a
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	222a      	movs	r2, #42	; 0x2a
 8006d8a:	f883 283b 	strb.w	r2, [r3, #2107]	; 0x83b
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	227f      	movs	r2, #127	; 0x7f
 8006d92:	f883 283c 	strb.w	r2, [r3, #2108]	; 0x83c
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	222a      	movs	r2, #42	; 0x2a
 8006d9a:	f883 283d 	strb.w	r2, [r3, #2109]	; 0x83d
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2212      	movs	r2, #18
 8006da2:	f883 283e 	strb.w	r2, [r3, #2110]	; 0x83e
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2223      	movs	r2, #35	; 0x23
 8006daa:	f883 283f 	strb.w	r2, [r3, #2111]	; 0x83f
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2213      	movs	r2, #19
 8006db2:	f883 2840 	strb.w	r2, [r3, #2112]	; 0x840
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2208      	movs	r2, #8
 8006dba:	f883 2841 	strb.w	r2, [r3, #2113]	; 0x841
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2264      	movs	r2, #100	; 0x64
 8006dc2:	f883 2842 	strb.w	r2, [r3, #2114]	; 0x842
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2262      	movs	r2, #98	; 0x62
 8006dca:	f883 2843 	strb.w	r2, [r3, #2115]	; 0x843
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2236      	movs	r2, #54	; 0x36
 8006dd2:	f883 2844 	strb.w	r2, [r3, #2116]	; 0x844
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2249      	movs	r2, #73	; 0x49
 8006dda:	f883 2845 	strb.w	r2, [r3, #2117]	; 0x845
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2255      	movs	r2, #85	; 0x55
 8006de2:	f883 2846 	strb.w	r2, [r3, #2118]	; 0x846
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2222      	movs	r2, #34	; 0x22
 8006dea:	f883 2847 	strb.w	r2, [r3, #2119]	; 0x847
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2250      	movs	r2, #80	; 0x50
 8006df2:	f883 2848 	strb.w	r2, [r3, #2120]	; 0x848
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2205      	movs	r2, #5
 8006dfa:	f883 284a 	strb.w	r2, [r3, #2122]	; 0x84a
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2203      	movs	r2, #3
 8006e02:	f883 284b 	strb.w	r2, [r3, #2123]	; 0x84b
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	221c      	movs	r2, #28
 8006e0a:	f883 284f 	strb.w	r2, [r3, #2127]	; 0x84f
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2222      	movs	r2, #34	; 0x22
 8006e12:	f883 2850 	strb.w	r2, [r3, #2128]	; 0x850
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2241      	movs	r2, #65	; 0x41
 8006e1a:	f883 2851 	strb.w	r2, [r3, #2129]	; 0x851
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2241      	movs	r2, #65	; 0x41
 8006e22:	f883 2854 	strb.w	r2, [r3, #2132]	; 0x854
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2222      	movs	r2, #34	; 0x22
 8006e2a:	f883 2855 	strb.w	r2, [r3, #2133]	; 0x855
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	221c      	movs	r2, #28
 8006e32:	f883 2856 	strb.w	r2, [r3, #2134]	; 0x856
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2208      	movs	r2, #8
 8006e3a:	f883 2858 	strb.w	r2, [r3, #2136]	; 0x858
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	222a      	movs	r2, #42	; 0x2a
 8006e42:	f883 2859 	strb.w	r2, [r3, #2137]	; 0x859
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	221c      	movs	r2, #28
 8006e4a:	f883 285a 	strb.w	r2, [r3, #2138]	; 0x85a
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	222a      	movs	r2, #42	; 0x2a
 8006e52:	f883 285b 	strb.w	r2, [r3, #2139]	; 0x85b
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2208      	movs	r2, #8
 8006e5a:	f883 285c 	strb.w	r2, [r3, #2140]	; 0x85c
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2208      	movs	r2, #8
 8006e62:	f883 285d 	strb.w	r2, [r3, #2141]	; 0x85d
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2208      	movs	r2, #8
 8006e6a:	f883 285e 	strb.w	r2, [r3, #2142]	; 0x85e
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	223e      	movs	r2, #62	; 0x3e
 8006e72:	f883 285f 	strb.w	r2, [r3, #2143]	; 0x85f
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2208      	movs	r2, #8
 8006e7a:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2208      	movs	r2, #8
 8006e82:	f883 2861 	strb.w	r2, [r3, #2145]	; 0x861
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2250      	movs	r2, #80	; 0x50
 8006e8a:	f883 2863 	strb.w	r2, [r3, #2147]	; 0x863
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2230      	movs	r2, #48	; 0x30
 8006e92:	f883 2864 	strb.w	r2, [r3, #2148]	; 0x864
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2208      	movs	r2, #8
 8006e9a:	f883 2867 	strb.w	r2, [r3, #2151]	; 0x867
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2208      	movs	r2, #8
 8006ea2:	f883 2868 	strb.w	r2, [r3, #2152]	; 0x868
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2208      	movs	r2, #8
 8006eaa:	f883 2869 	strb.w	r2, [r3, #2153]	; 0x869
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2208      	movs	r2, #8
 8006eb2:	f883 286a 	strb.w	r2, [r3, #2154]	; 0x86a
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2208      	movs	r2, #8
 8006eba:	f883 286b 	strb.w	r2, [r3, #2155]	; 0x86b
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2230      	movs	r2, #48	; 0x30
 8006ec2:	f883 286d 	strb.w	r2, [r3, #2157]	; 0x86d
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2230      	movs	r2, #48	; 0x30
 8006eca:	f883 286e 	strb.w	r2, [r3, #2158]	; 0x86e
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2220      	movs	r2, #32
 8006ed2:	f883 2871 	strb.w	r2, [r3, #2161]	; 0x871
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2210      	movs	r2, #16
 8006eda:	f883 2872 	strb.w	r2, [r3, #2162]	; 0x872
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2208      	movs	r2, #8
 8006ee2:	f883 2873 	strb.w	r2, [r3, #2163]	; 0x873
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2204      	movs	r2, #4
 8006eea:	f883 2874 	strb.w	r2, [r3, #2164]	; 0x874
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2202      	movs	r2, #2
 8006ef2:	f883 2875 	strb.w	r2, [r3, #2165]	; 0x875
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	223e      	movs	r2, #62	; 0x3e
 8006efa:	f883 2876 	strb.w	r2, [r3, #2166]	; 0x876
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2251      	movs	r2, #81	; 0x51
 8006f02:	f883 2877 	strb.w	r2, [r3, #2167]	; 0x877
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2249      	movs	r2, #73	; 0x49
 8006f0a:	f883 2878 	strb.w	r2, [r3, #2168]	; 0x878
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2245      	movs	r2, #69	; 0x45
 8006f12:	f883 2879 	strb.w	r2, [r3, #2169]	; 0x879
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	223e      	movs	r2, #62	; 0x3e
 8006f1a:	f883 287a 	strb.w	r2, [r3, #2170]	; 0x87a
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2242      	movs	r2, #66	; 0x42
 8006f22:	f883 287c 	strb.w	r2, [r3, #2172]	; 0x87c
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	227f      	movs	r2, #127	; 0x7f
 8006f2a:	f883 287d 	strb.w	r2, [r3, #2173]	; 0x87d
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2240      	movs	r2, #64	; 0x40
 8006f32:	f883 287e 	strb.w	r2, [r3, #2174]	; 0x87e
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2242      	movs	r2, #66	; 0x42
 8006f3a:	f883 2880 	strb.w	r2, [r3, #2176]	; 0x880
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2261      	movs	r2, #97	; 0x61
 8006f42:	f883 2881 	strb.w	r2, [r3, #2177]	; 0x881
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2251      	movs	r2, #81	; 0x51
 8006f4a:	f883 2882 	strb.w	r2, [r3, #2178]	; 0x882
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2249      	movs	r2, #73	; 0x49
 8006f52:	f883 2883 	strb.w	r2, [r3, #2179]	; 0x883
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2246      	movs	r2, #70	; 0x46
 8006f5a:	f883 2884 	strb.w	r2, [r3, #2180]	; 0x884
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2221      	movs	r2, #33	; 0x21
 8006f62:	f883 2885 	strb.w	r2, [r3, #2181]	; 0x885
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2241      	movs	r2, #65	; 0x41
 8006f6a:	f883 2886 	strb.w	r2, [r3, #2182]	; 0x886
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2245      	movs	r2, #69	; 0x45
 8006f72:	f883 2887 	strb.w	r2, [r3, #2183]	; 0x887
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	224b      	movs	r2, #75	; 0x4b
 8006f7a:	f883 2888 	strb.w	r2, [r3, #2184]	; 0x888
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2231      	movs	r2, #49	; 0x31
 8006f82:	f883 2889 	strb.w	r2, [r3, #2185]	; 0x889
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2218      	movs	r2, #24
 8006f8a:	f883 288a 	strb.w	r2, [r3, #2186]	; 0x88a
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2214      	movs	r2, #20
 8006f92:	f883 288b 	strb.w	r2, [r3, #2187]	; 0x88b
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2212      	movs	r2, #18
 8006f9a:	f883 288c 	strb.w	r2, [r3, #2188]	; 0x88c
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	227f      	movs	r2, #127	; 0x7f
 8006fa2:	f883 288d 	strb.w	r2, [r3, #2189]	; 0x88d
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2210      	movs	r2, #16
 8006faa:	f883 288e 	strb.w	r2, [r3, #2190]	; 0x88e
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2227      	movs	r2, #39	; 0x27
 8006fb2:	f883 288f 	strb.w	r2, [r3, #2191]	; 0x88f
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2245      	movs	r2, #69	; 0x45
 8006fba:	f883 2890 	strb.w	r2, [r3, #2192]	; 0x890
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2245      	movs	r2, #69	; 0x45
 8006fc2:	f883 2891 	strb.w	r2, [r3, #2193]	; 0x891
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2245      	movs	r2, #69	; 0x45
 8006fca:	f883 2892 	strb.w	r2, [r3, #2194]	; 0x892
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2239      	movs	r2, #57	; 0x39
 8006fd2:	f883 2893 	strb.w	r2, [r3, #2195]	; 0x893
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	223c      	movs	r2, #60	; 0x3c
 8006fda:	f883 2894 	strb.w	r2, [r3, #2196]	; 0x894
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	224a      	movs	r2, #74	; 0x4a
 8006fe2:	f883 2895 	strb.w	r2, [r3, #2197]	; 0x895
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2249      	movs	r2, #73	; 0x49
 8006fea:	f883 2896 	strb.w	r2, [r3, #2198]	; 0x896
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2249      	movs	r2, #73	; 0x49
 8006ff2:	f883 2897 	strb.w	r2, [r3, #2199]	; 0x897
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2230      	movs	r2, #48	; 0x30
 8006ffa:	f883 2898 	strb.w	r2, [r3, #2200]	; 0x898
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	f883 2899 	strb.w	r2, [r3, #2201]	; 0x899
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2271      	movs	r2, #113	; 0x71
 800700a:	f883 289a 	strb.w	r2, [r3, #2202]	; 0x89a
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2209      	movs	r2, #9
 8007012:	f883 289b 	strb.w	r2, [r3, #2203]	; 0x89b
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2205      	movs	r2, #5
 800701a:	f883 289c 	strb.w	r2, [r3, #2204]	; 0x89c
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2203      	movs	r2, #3
 8007022:	f883 289d 	strb.w	r2, [r3, #2205]	; 0x89d
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2236      	movs	r2, #54	; 0x36
 800702a:	f883 289e 	strb.w	r2, [r3, #2206]	; 0x89e
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2249      	movs	r2, #73	; 0x49
 8007032:	f883 289f 	strb.w	r2, [r3, #2207]	; 0x89f
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2249      	movs	r2, #73	; 0x49
 800703a:	f883 28a0 	strb.w	r2, [r3, #2208]	; 0x8a0
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2249      	movs	r2, #73	; 0x49
 8007042:	f883 28a1 	strb.w	r2, [r3, #2209]	; 0x8a1
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2236      	movs	r2, #54	; 0x36
 800704a:	f883 28a2 	strb.w	r2, [r3, #2210]	; 0x8a2
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2206      	movs	r2, #6
 8007052:	f883 28a3 	strb.w	r2, [r3, #2211]	; 0x8a3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2249      	movs	r2, #73	; 0x49
 800705a:	f883 28a4 	strb.w	r2, [r3, #2212]	; 0x8a4
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2249      	movs	r2, #73	; 0x49
 8007062:	f883 28a5 	strb.w	r2, [r3, #2213]	; 0x8a5
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2229      	movs	r2, #41	; 0x29
 800706a:	f883 28a6 	strb.w	r2, [r3, #2214]	; 0x8a6
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	221e      	movs	r2, #30
 8007072:	f883 28a7 	strb.w	r2, [r3, #2215]	; 0x8a7
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2236      	movs	r2, #54	; 0x36
 800707a:	f883 28a9 	strb.w	r2, [r3, #2217]	; 0x8a9
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2236      	movs	r2, #54	; 0x36
 8007082:	f883 28aa 	strb.w	r2, [r3, #2218]	; 0x8aa
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2256      	movs	r2, #86	; 0x56
 800708a:	f883 28ae 	strb.w	r2, [r3, #2222]	; 0x8ae
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2236      	movs	r2, #54	; 0x36
 8007092:	f883 28af 	strb.w	r2, [r3, #2223]	; 0x8af
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2208      	movs	r2, #8
 800709a:	f883 28b3 	strb.w	r2, [r3, #2227]	; 0x8b3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2214      	movs	r2, #20
 80070a2:	f883 28b4 	strb.w	r2, [r3, #2228]	; 0x8b4
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2222      	movs	r2, #34	; 0x22
 80070aa:	f883 28b5 	strb.w	r2, [r3, #2229]	; 0x8b5
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2241      	movs	r2, #65	; 0x41
 80070b2:	f883 28b6 	strb.w	r2, [r3, #2230]	; 0x8b6
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2214      	movs	r2, #20
 80070ba:	f883 28b7 	strb.w	r2, [r3, #2231]	; 0x8b7
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2214      	movs	r2, #20
 80070c2:	f883 28b8 	strb.w	r2, [r3, #2232]	; 0x8b8
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2214      	movs	r2, #20
 80070ca:	f883 28b9 	strb.w	r2, [r3, #2233]	; 0x8b9
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2214      	movs	r2, #20
 80070d2:	f883 28ba 	strb.w	r2, [r3, #2234]	; 0x8ba
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2214      	movs	r2, #20
 80070da:	f883 28bb 	strb.w	r2, [r3, #2235]	; 0x8bb
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2241      	movs	r2, #65	; 0x41
 80070e2:	f883 28bc 	strb.w	r2, [r3, #2236]	; 0x8bc
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2222      	movs	r2, #34	; 0x22
 80070ea:	f883 28bd 	strb.w	r2, [r3, #2237]	; 0x8bd
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2214      	movs	r2, #20
 80070f2:	f883 28be 	strb.w	r2, [r3, #2238]	; 0x8be
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2208      	movs	r2, #8
 80070fa:	f883 28bf 	strb.w	r2, [r3, #2239]	; 0x8bf
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2202      	movs	r2, #2
 8007102:	f883 28c1 	strb.w	r2, [r3, #2241]	; 0x8c1
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2201      	movs	r2, #1
 800710a:	f883 28c2 	strb.w	r2, [r3, #2242]	; 0x8c2
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2251      	movs	r2, #81	; 0x51
 8007112:	f883 28c3 	strb.w	r2, [r3, #2243]	; 0x8c3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2209      	movs	r2, #9
 800711a:	f883 28c4 	strb.w	r2, [r3, #2244]	; 0x8c4
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2206      	movs	r2, #6
 8007122:	f883 28c5 	strb.w	r2, [r3, #2245]	; 0x8c5
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2232      	movs	r2, #50	; 0x32
 800712a:	f883 28c6 	strb.w	r2, [r3, #2246]	; 0x8c6
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2249      	movs	r2, #73	; 0x49
 8007132:	f883 28c7 	strb.w	r2, [r3, #2247]	; 0x8c7
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2279      	movs	r2, #121	; 0x79
 800713a:	f883 28c8 	strb.w	r2, [r3, #2248]	; 0x8c8
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2241      	movs	r2, #65	; 0x41
 8007142:	f883 28c9 	strb.w	r2, [r3, #2249]	; 0x8c9
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	223e      	movs	r2, #62	; 0x3e
 800714a:	f883 28ca 	strb.w	r2, [r3, #2250]	; 0x8ca
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	227e      	movs	r2, #126	; 0x7e
 8007152:	f883 28cb 	strb.w	r2, [r3, #2251]	; 0x8cb
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2211      	movs	r2, #17
 800715a:	f883 28cc 	strb.w	r2, [r3, #2252]	; 0x8cc
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2211      	movs	r2, #17
 8007162:	f883 28cd 	strb.w	r2, [r3, #2253]	; 0x8cd
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2211      	movs	r2, #17
 800716a:	f883 28ce 	strb.w	r2, [r3, #2254]	; 0x8ce
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	227e      	movs	r2, #126	; 0x7e
 8007172:	f883 28cf 	strb.w	r2, [r3, #2255]	; 0x8cf
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	227f      	movs	r2, #127	; 0x7f
 800717a:	f883 28d0 	strb.w	r2, [r3, #2256]	; 0x8d0
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2249      	movs	r2, #73	; 0x49
 8007182:	f883 28d1 	strb.w	r2, [r3, #2257]	; 0x8d1
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2249      	movs	r2, #73	; 0x49
 800718a:	f883 28d2 	strb.w	r2, [r3, #2258]	; 0x8d2
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2249      	movs	r2, #73	; 0x49
 8007192:	f883 28d3 	strb.w	r2, [r3, #2259]	; 0x8d3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2236      	movs	r2, #54	; 0x36
 800719a:	f883 28d4 	strb.w	r2, [r3, #2260]	; 0x8d4
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	223e      	movs	r2, #62	; 0x3e
 80071a2:	f883 28d5 	strb.w	r2, [r3, #2261]	; 0x8d5
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2241      	movs	r2, #65	; 0x41
 80071aa:	f883 28d6 	strb.w	r2, [r3, #2262]	; 0x8d6
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2241      	movs	r2, #65	; 0x41
 80071b2:	f883 28d7 	strb.w	r2, [r3, #2263]	; 0x8d7
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2241      	movs	r2, #65	; 0x41
 80071ba:	f883 28d8 	strb.w	r2, [r3, #2264]	; 0x8d8
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2222      	movs	r2, #34	; 0x22
 80071c2:	f883 28d9 	strb.w	r2, [r3, #2265]	; 0x8d9
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	227f      	movs	r2, #127	; 0x7f
 80071ca:	f883 28da 	strb.w	r2, [r3, #2266]	; 0x8da
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2241      	movs	r2, #65	; 0x41
 80071d2:	f883 28db 	strb.w	r2, [r3, #2267]	; 0x8db
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2241      	movs	r2, #65	; 0x41
 80071da:	f883 28dc 	strb.w	r2, [r3, #2268]	; 0x8dc
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2222      	movs	r2, #34	; 0x22
 80071e2:	f883 28dd 	strb.w	r2, [r3, #2269]	; 0x8dd
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	221c      	movs	r2, #28
 80071ea:	f883 28de 	strb.w	r2, [r3, #2270]	; 0x8de
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	227f      	movs	r2, #127	; 0x7f
 80071f2:	f883 28df 	strb.w	r2, [r3, #2271]	; 0x8df
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2249      	movs	r2, #73	; 0x49
 80071fa:	f883 28e0 	strb.w	r2, [r3, #2272]	; 0x8e0
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2249      	movs	r2, #73	; 0x49
 8007202:	f883 28e1 	strb.w	r2, [r3, #2273]	; 0x8e1
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2249      	movs	r2, #73	; 0x49
 800720a:	f883 28e2 	strb.w	r2, [r3, #2274]	; 0x8e2
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2241      	movs	r2, #65	; 0x41
 8007212:	f883 28e3 	strb.w	r2, [r3, #2275]	; 0x8e3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	227f      	movs	r2, #127	; 0x7f
 800721a:	f883 28e4 	strb.w	r2, [r3, #2276]	; 0x8e4
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2209      	movs	r2, #9
 8007222:	f883 28e5 	strb.w	r2, [r3, #2277]	; 0x8e5
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2209      	movs	r2, #9
 800722a:	f883 28e6 	strb.w	r2, [r3, #2278]	; 0x8e6
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 28e7 	strb.w	r2, [r3, #2279]	; 0x8e7
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	f883 28e8 	strb.w	r2, [r3, #2280]	; 0x8e8
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	223e      	movs	r2, #62	; 0x3e
 8007242:	f883 28e9 	strb.w	r2, [r3, #2281]	; 0x8e9
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2241      	movs	r2, #65	; 0x41
 800724a:	f883 28ea 	strb.w	r2, [r3, #2282]	; 0x8ea
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2241      	movs	r2, #65	; 0x41
 8007252:	f883 28eb 	strb.w	r2, [r3, #2283]	; 0x8eb
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2251      	movs	r2, #81	; 0x51
 800725a:	f883 28ec 	strb.w	r2, [r3, #2284]	; 0x8ec
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2232      	movs	r2, #50	; 0x32
 8007262:	f883 28ed 	strb.w	r2, [r3, #2285]	; 0x8ed
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	227f      	movs	r2, #127	; 0x7f
 800726a:	f883 28ee 	strb.w	r2, [r3, #2286]	; 0x8ee
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2208      	movs	r2, #8
 8007272:	f883 28ef 	strb.w	r2, [r3, #2287]	; 0x8ef
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2208      	movs	r2, #8
 800727a:	f883 28f0 	strb.w	r2, [r3, #2288]	; 0x8f0
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2208      	movs	r2, #8
 8007282:	f883 28f1 	strb.w	r2, [r3, #2289]	; 0x8f1
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	227f      	movs	r2, #127	; 0x7f
 800728a:	f883 28f2 	strb.w	r2, [r3, #2290]	; 0x8f2
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2241      	movs	r2, #65	; 0x41
 8007292:	f883 28f4 	strb.w	r2, [r3, #2292]	; 0x8f4
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	227f      	movs	r2, #127	; 0x7f
 800729a:	f883 28f5 	strb.w	r2, [r3, #2293]	; 0x8f5
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2241      	movs	r2, #65	; 0x41
 80072a2:	f883 28f6 	strb.w	r2, [r3, #2294]	; 0x8f6
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2220      	movs	r2, #32
 80072aa:	f883 28f8 	strb.w	r2, [r3, #2296]	; 0x8f8
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2240      	movs	r2, #64	; 0x40
 80072b2:	f883 28f9 	strb.w	r2, [r3, #2297]	; 0x8f9
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2241      	movs	r2, #65	; 0x41
 80072ba:	f883 28fa 	strb.w	r2, [r3, #2298]	; 0x8fa
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	223f      	movs	r2, #63	; 0x3f
 80072c2:	f883 28fb 	strb.w	r2, [r3, #2299]	; 0x8fb
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 28fc 	strb.w	r2, [r3, #2300]	; 0x8fc
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	227f      	movs	r2, #127	; 0x7f
 80072d2:	f883 28fd 	strb.w	r2, [r3, #2301]	; 0x8fd
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2208      	movs	r2, #8
 80072da:	f883 28fe 	strb.w	r2, [r3, #2302]	; 0x8fe
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2214      	movs	r2, #20
 80072e2:	f883 28ff 	strb.w	r2, [r3, #2303]	; 0x8ff
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2222      	movs	r2, #34	; 0x22
 80072ea:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2241      	movs	r2, #65	; 0x41
 80072f2:	f883 2901 	strb.w	r2, [r3, #2305]	; 0x901
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	227f      	movs	r2, #127	; 0x7f
 80072fa:	f883 2902 	strb.w	r2, [r3, #2306]	; 0x902
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2240      	movs	r2, #64	; 0x40
 8007302:	f883 2903 	strb.w	r2, [r3, #2307]	; 0x903
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2240      	movs	r2, #64	; 0x40
 800730a:	f883 2904 	strb.w	r2, [r3, #2308]	; 0x904
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2240      	movs	r2, #64	; 0x40
 8007312:	f883 2905 	strb.w	r2, [r3, #2309]	; 0x905
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2240      	movs	r2, #64	; 0x40
 800731a:	f883 2906 	strb.w	r2, [r3, #2310]	; 0x906
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	227f      	movs	r2, #127	; 0x7f
 8007322:	f883 2907 	strb.w	r2, [r3, #2311]	; 0x907
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2202      	movs	r2, #2
 800732a:	f883 2908 	strb.w	r2, [r3, #2312]	; 0x908
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2204      	movs	r2, #4
 8007332:	f883 2909 	strb.w	r2, [r3, #2313]	; 0x909
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2202      	movs	r2, #2
 800733a:	f883 290a 	strb.w	r2, [r3, #2314]	; 0x90a
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	227f      	movs	r2, #127	; 0x7f
 8007342:	f883 290b 	strb.w	r2, [r3, #2315]	; 0x90b
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	227f      	movs	r2, #127	; 0x7f
 800734a:	f883 290c 	strb.w	r2, [r3, #2316]	; 0x90c
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2204      	movs	r2, #4
 8007352:	f883 290d 	strb.w	r2, [r3, #2317]	; 0x90d
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2208      	movs	r2, #8
 800735a:	f883 290e 	strb.w	r2, [r3, #2318]	; 0x90e
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2210      	movs	r2, #16
 8007362:	f883 290f 	strb.w	r2, [r3, #2319]	; 0x90f
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	227f      	movs	r2, #127	; 0x7f
 800736a:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	223e      	movs	r2, #62	; 0x3e
 8007372:	f883 2911 	strb.w	r2, [r3, #2321]	; 0x911
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2241      	movs	r2, #65	; 0x41
 800737a:	f883 2912 	strb.w	r2, [r3, #2322]	; 0x912
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2241      	movs	r2, #65	; 0x41
 8007382:	f883 2913 	strb.w	r2, [r3, #2323]	; 0x913
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2241      	movs	r2, #65	; 0x41
 800738a:	f883 2914 	strb.w	r2, [r3, #2324]	; 0x914
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	223e      	movs	r2, #62	; 0x3e
 8007392:	f883 2915 	strb.w	r2, [r3, #2325]	; 0x915
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	227f      	movs	r2, #127	; 0x7f
 800739a:	f883 2916 	strb.w	r2, [r3, #2326]	; 0x916
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2209      	movs	r2, #9
 80073a2:	f883 2917 	strb.w	r2, [r3, #2327]	; 0x917
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2209      	movs	r2, #9
 80073aa:	f883 2918 	strb.w	r2, [r3, #2328]	; 0x918
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2209      	movs	r2, #9
 80073b2:	f883 2919 	strb.w	r2, [r3, #2329]	; 0x919
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2206      	movs	r2, #6
 80073ba:	f883 291a 	strb.w	r2, [r3, #2330]	; 0x91a
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	223e      	movs	r2, #62	; 0x3e
 80073c2:	f883 291b 	strb.w	r2, [r3, #2331]	; 0x91b
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2241      	movs	r2, #65	; 0x41
 80073ca:	f883 291c 	strb.w	r2, [r3, #2332]	; 0x91c
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2251      	movs	r2, #81	; 0x51
 80073d2:	f883 291d 	strb.w	r2, [r3, #2333]	; 0x91d
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2221      	movs	r2, #33	; 0x21
 80073da:	f883 291e 	strb.w	r2, [r3, #2334]	; 0x91e
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	225e      	movs	r2, #94	; 0x5e
 80073e2:	f883 291f 	strb.w	r2, [r3, #2335]	; 0x91f
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	227f      	movs	r2, #127	; 0x7f
 80073ea:	f883 2920 	strb.w	r2, [r3, #2336]	; 0x920
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2209      	movs	r2, #9
 80073f2:	f883 2921 	strb.w	r2, [r3, #2337]	; 0x921
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2219      	movs	r2, #25
 80073fa:	f883 2922 	strb.w	r2, [r3, #2338]	; 0x922
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2229      	movs	r2, #41	; 0x29
 8007402:	f883 2923 	strb.w	r2, [r3, #2339]	; 0x923
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2246      	movs	r2, #70	; 0x46
 800740a:	f883 2924 	strb.w	r2, [r3, #2340]	; 0x924
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2246      	movs	r2, #70	; 0x46
 8007412:	f883 2925 	strb.w	r2, [r3, #2341]	; 0x925
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2249      	movs	r2, #73	; 0x49
 800741a:	f883 2926 	strb.w	r2, [r3, #2342]	; 0x926
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2249      	movs	r2, #73	; 0x49
 8007422:	f883 2927 	strb.w	r2, [r3, #2343]	; 0x927
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2249      	movs	r2, #73	; 0x49
 800742a:	f883 2928 	strb.w	r2, [r3, #2344]	; 0x928
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2231      	movs	r2, #49	; 0x31
 8007432:	f883 2929 	strb.w	r2, [r3, #2345]	; 0x929
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2201      	movs	r2, #1
 800743a:	f883 292a 	strb.w	r2, [r3, #2346]	; 0x92a
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 292b 	strb.w	r2, [r3, #2347]	; 0x92b
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	227f      	movs	r2, #127	; 0x7f
 800744a:	f883 292c 	strb.w	r2, [r3, #2348]	; 0x92c
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 292d 	strb.w	r2, [r3, #2349]	; 0x92d
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2201      	movs	r2, #1
 800745a:	f883 292e 	strb.w	r2, [r3, #2350]	; 0x92e
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	223f      	movs	r2, #63	; 0x3f
 8007462:	f883 292f 	strb.w	r2, [r3, #2351]	; 0x92f
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2240      	movs	r2, #64	; 0x40
 800746a:	f883 2930 	strb.w	r2, [r3, #2352]	; 0x930
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2240      	movs	r2, #64	; 0x40
 8007472:	f883 2931 	strb.w	r2, [r3, #2353]	; 0x931
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2240      	movs	r2, #64	; 0x40
 800747a:	f883 2932 	strb.w	r2, [r3, #2354]	; 0x932
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	223f      	movs	r2, #63	; 0x3f
 8007482:	f883 2933 	strb.w	r2, [r3, #2355]	; 0x933
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	221f      	movs	r2, #31
 800748a:	f883 2934 	strb.w	r2, [r3, #2356]	; 0x934
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2220      	movs	r2, #32
 8007492:	f883 2935 	strb.w	r2, [r3, #2357]	; 0x935
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2240      	movs	r2, #64	; 0x40
 800749a:	f883 2936 	strb.w	r2, [r3, #2358]	; 0x936
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2220      	movs	r2, #32
 80074a2:	f883 2937 	strb.w	r2, [r3, #2359]	; 0x937
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	221f      	movs	r2, #31
 80074aa:	f883 2938 	strb.w	r2, [r3, #2360]	; 0x938
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	227f      	movs	r2, #127	; 0x7f
 80074b2:	f883 2939 	strb.w	r2, [r3, #2361]	; 0x939
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2220      	movs	r2, #32
 80074ba:	f883 293a 	strb.w	r2, [r3, #2362]	; 0x93a
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2218      	movs	r2, #24
 80074c2:	f883 293b 	strb.w	r2, [r3, #2363]	; 0x93b
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2220      	movs	r2, #32
 80074ca:	f883 293c 	strb.w	r2, [r3, #2364]	; 0x93c
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	227f      	movs	r2, #127	; 0x7f
 80074d2:	f883 293d 	strb.w	r2, [r3, #2365]	; 0x93d
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2263      	movs	r2, #99	; 0x63
 80074da:	f883 293e 	strb.w	r2, [r3, #2366]	; 0x93e
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2214      	movs	r2, #20
 80074e2:	f883 293f 	strb.w	r2, [r3, #2367]	; 0x93f
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2208      	movs	r2, #8
 80074ea:	f883 2940 	strb.w	r2, [r3, #2368]	; 0x940
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2214      	movs	r2, #20
 80074f2:	f883 2941 	strb.w	r2, [r3, #2369]	; 0x941
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2263      	movs	r2, #99	; 0x63
 80074fa:	f883 2942 	strb.w	r2, [r3, #2370]	; 0x942
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2203      	movs	r2, #3
 8007502:	f883 2943 	strb.w	r2, [r3, #2371]	; 0x943
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2204      	movs	r2, #4
 800750a:	f883 2944 	strb.w	r2, [r3, #2372]	; 0x944
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2278      	movs	r2, #120	; 0x78
 8007512:	f883 2945 	strb.w	r2, [r3, #2373]	; 0x945
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2204      	movs	r2, #4
 800751a:	f883 2946 	strb.w	r2, [r3, #2374]	; 0x946
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2203      	movs	r2, #3
 8007522:	f883 2947 	strb.w	r2, [r3, #2375]	; 0x947
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2261      	movs	r2, #97	; 0x61
 800752a:	f883 2948 	strb.w	r2, [r3, #2376]	; 0x948
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2251      	movs	r2, #81	; 0x51
 8007532:	f883 2949 	strb.w	r2, [r3, #2377]	; 0x949
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2249      	movs	r2, #73	; 0x49
 800753a:	f883 294a 	strb.w	r2, [r3, #2378]	; 0x94a
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2245      	movs	r2, #69	; 0x45
 8007542:	f883 294b 	strb.w	r2, [r3, #2379]	; 0x94b
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2243      	movs	r2, #67	; 0x43
 800754a:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	227f      	movs	r2, #127	; 0x7f
 8007552:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2241      	movs	r2, #65	; 0x41
 800755a:	f883 2950 	strb.w	r2, [r3, #2384]	; 0x950
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2241      	movs	r2, #65	; 0x41
 8007562:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2202      	movs	r2, #2
 800756a:	f883 2952 	strb.w	r2, [r3, #2386]	; 0x952
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2204      	movs	r2, #4
 8007572:	f883 2953 	strb.w	r2, [r3, #2387]	; 0x953
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2208      	movs	r2, #8
 800757a:	f883 2954 	strb.w	r2, [r3, #2388]	; 0x954
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2210      	movs	r2, #16
 8007582:	f883 2955 	strb.w	r2, [r3, #2389]	; 0x955
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2220      	movs	r2, #32
 800758a:	f883 2956 	strb.w	r2, [r3, #2390]	; 0x956
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2241      	movs	r2, #65	; 0x41
 8007592:	f883 2957 	strb.w	r2, [r3, #2391]	; 0x957
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2241      	movs	r2, #65	; 0x41
 800759a:	f883 2958 	strb.w	r2, [r3, #2392]	; 0x958
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	227f      	movs	r2, #127	; 0x7f
 80075a2:	f883 2959 	strb.w	r2, [r3, #2393]	; 0x959
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2204      	movs	r2, #4
 80075aa:	f883 295c 	strb.w	r2, [r3, #2396]	; 0x95c
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2202      	movs	r2, #2
 80075b2:	f883 295d 	strb.w	r2, [r3, #2397]	; 0x95d
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2201      	movs	r2, #1
 80075ba:	f883 295e 	strb.w	r2, [r3, #2398]	; 0x95e
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2202      	movs	r2, #2
 80075c2:	f883 295f 	strb.w	r2, [r3, #2399]	; 0x95f
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2204      	movs	r2, #4
 80075ca:	f883 2960 	strb.w	r2, [r3, #2400]	; 0x960
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2240      	movs	r2, #64	; 0x40
 80075d2:	f883 2961 	strb.w	r2, [r3, #2401]	; 0x961
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2240      	movs	r2, #64	; 0x40
 80075da:	f883 2962 	strb.w	r2, [r3, #2402]	; 0x962
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2240      	movs	r2, #64	; 0x40
 80075e2:	f883 2963 	strb.w	r2, [r3, #2403]	; 0x963
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2240      	movs	r2, #64	; 0x40
 80075ea:	f883 2964 	strb.w	r2, [r3, #2404]	; 0x964
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2240      	movs	r2, #64	; 0x40
 80075f2:	f883 2965 	strb.w	r2, [r3, #2405]	; 0x965
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f883 2967 	strb.w	r2, [r3, #2407]	; 0x967
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2202      	movs	r2, #2
 8007602:	f883 2968 	strb.w	r2, [r3, #2408]	; 0x968
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2204      	movs	r2, #4
 800760a:	f883 2969 	strb.w	r2, [r3, #2409]	; 0x969
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2220      	movs	r2, #32
 8007612:	f883 296b 	strb.w	r2, [r3, #2411]	; 0x96b
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2254      	movs	r2, #84	; 0x54
 800761a:	f883 296c 	strb.w	r2, [r3, #2412]	; 0x96c
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2254      	movs	r2, #84	; 0x54
 8007622:	f883 296d 	strb.w	r2, [r3, #2413]	; 0x96d
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2254      	movs	r2, #84	; 0x54
 800762a:	f883 296e 	strb.w	r2, [r3, #2414]	; 0x96e
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2278      	movs	r2, #120	; 0x78
 8007632:	f883 296f 	strb.w	r2, [r3, #2415]	; 0x96f
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	227f      	movs	r2, #127	; 0x7f
 800763a:	f883 2970 	strb.w	r2, [r3, #2416]	; 0x970
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2248      	movs	r2, #72	; 0x48
 8007642:	f883 2971 	strb.w	r2, [r3, #2417]	; 0x971
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2244      	movs	r2, #68	; 0x44
 800764a:	f883 2972 	strb.w	r2, [r3, #2418]	; 0x972
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2244      	movs	r2, #68	; 0x44
 8007652:	f883 2973 	strb.w	r2, [r3, #2419]	; 0x973
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2238      	movs	r2, #56	; 0x38
 800765a:	f883 2974 	strb.w	r2, [r3, #2420]	; 0x974
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2238      	movs	r2, #56	; 0x38
 8007662:	f883 2975 	strb.w	r2, [r3, #2421]	; 0x975
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2244      	movs	r2, #68	; 0x44
 800766a:	f883 2976 	strb.w	r2, [r3, #2422]	; 0x976
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2244      	movs	r2, #68	; 0x44
 8007672:	f883 2977 	strb.w	r2, [r3, #2423]	; 0x977
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2244      	movs	r2, #68	; 0x44
 800767a:	f883 2978 	strb.w	r2, [r3, #2424]	; 0x978
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2220      	movs	r2, #32
 8007682:	f883 2979 	strb.w	r2, [r3, #2425]	; 0x979
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2238      	movs	r2, #56	; 0x38
 800768a:	f883 297a 	strb.w	r2, [r3, #2426]	; 0x97a
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2244      	movs	r2, #68	; 0x44
 8007692:	f883 297b 	strb.w	r2, [r3, #2427]	; 0x97b
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2244      	movs	r2, #68	; 0x44
 800769a:	f883 297c 	strb.w	r2, [r3, #2428]	; 0x97c
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2248      	movs	r2, #72	; 0x48
 80076a2:	f883 297d 	strb.w	r2, [r3, #2429]	; 0x97d
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	227f      	movs	r2, #127	; 0x7f
 80076aa:	f883 297e 	strb.w	r2, [r3, #2430]	; 0x97e
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2238      	movs	r2, #56	; 0x38
 80076b2:	f883 297f 	strb.w	r2, [r3, #2431]	; 0x97f
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2254      	movs	r2, #84	; 0x54
 80076ba:	f883 2980 	strb.w	r2, [r3, #2432]	; 0x980
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2254      	movs	r2, #84	; 0x54
 80076c2:	f883 2981 	strb.w	r2, [r3, #2433]	; 0x981
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2254      	movs	r2, #84	; 0x54
 80076ca:	f883 2982 	strb.w	r2, [r3, #2434]	; 0x982
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2218      	movs	r2, #24
 80076d2:	f883 2983 	strb.w	r2, [r3, #2435]	; 0x983
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2208      	movs	r2, #8
 80076da:	f883 2984 	strb.w	r2, [r3, #2436]	; 0x984
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	227e      	movs	r2, #126	; 0x7e
 80076e2:	f883 2985 	strb.w	r2, [r3, #2437]	; 0x985
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2209      	movs	r2, #9
 80076ea:	f883 2986 	strb.w	r2, [r3, #2438]	; 0x986
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2201      	movs	r2, #1
 80076f2:	f883 2987 	strb.w	r2, [r3, #2439]	; 0x987
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2202      	movs	r2, #2
 80076fa:	f883 2988 	strb.w	r2, [r3, #2440]	; 0x988
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2208      	movs	r2, #8
 8007702:	f883 2989 	strb.w	r2, [r3, #2441]	; 0x989
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2214      	movs	r2, #20
 800770a:	f883 298a 	strb.w	r2, [r3, #2442]	; 0x98a
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2254      	movs	r2, #84	; 0x54
 8007712:	f883 298b 	strb.w	r2, [r3, #2443]	; 0x98b
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2254      	movs	r2, #84	; 0x54
 800771a:	f883 298c 	strb.w	r2, [r3, #2444]	; 0x98c
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	223c      	movs	r2, #60	; 0x3c
 8007722:	f883 298d 	strb.w	r2, [r3, #2445]	; 0x98d
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	227f      	movs	r2, #127	; 0x7f
 800772a:	f883 298e 	strb.w	r2, [r3, #2446]	; 0x98e
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2208      	movs	r2, #8
 8007732:	f883 298f 	strb.w	r2, [r3, #2447]	; 0x98f
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2204      	movs	r2, #4
 800773a:	f883 2990 	strb.w	r2, [r3, #2448]	; 0x990
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2204      	movs	r2, #4
 8007742:	f883 2991 	strb.w	r2, [r3, #2449]	; 0x991
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2278      	movs	r2, #120	; 0x78
 800774a:	f883 2992 	strb.w	r2, [r3, #2450]	; 0x992
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2244      	movs	r2, #68	; 0x44
 8007752:	f883 2994 	strb.w	r2, [r3, #2452]	; 0x994
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	227d      	movs	r2, #125	; 0x7d
 800775a:	f883 2995 	strb.w	r2, [r3, #2453]	; 0x995
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2240      	movs	r2, #64	; 0x40
 8007762:	f883 2996 	strb.w	r2, [r3, #2454]	; 0x996
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2220      	movs	r2, #32
 800776a:	f883 2998 	strb.w	r2, [r3, #2456]	; 0x998
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2240      	movs	r2, #64	; 0x40
 8007772:	f883 2999 	strb.w	r2, [r3, #2457]	; 0x999
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2244      	movs	r2, #68	; 0x44
 800777a:	f883 299a 	strb.w	r2, [r3, #2458]	; 0x99a
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	223d      	movs	r2, #61	; 0x3d
 8007782:	f883 299b 	strb.w	r2, [r3, #2459]	; 0x99b
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	227f      	movs	r2, #127	; 0x7f
 800778a:	f883 299e 	strb.w	r2, [r3, #2462]	; 0x99e
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2210      	movs	r2, #16
 8007792:	f883 299f 	strb.w	r2, [r3, #2463]	; 0x99f
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2228      	movs	r2, #40	; 0x28
 800779a:	f883 29a0 	strb.w	r2, [r3, #2464]	; 0x9a0
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2244      	movs	r2, #68	; 0x44
 80077a2:	f883 29a1 	strb.w	r2, [r3, #2465]	; 0x9a1
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2241      	movs	r2, #65	; 0x41
 80077aa:	f883 29a3 	strb.w	r2, [r3, #2467]	; 0x9a3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	227f      	movs	r2, #127	; 0x7f
 80077b2:	f883 29a4 	strb.w	r2, [r3, #2468]	; 0x9a4
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2240      	movs	r2, #64	; 0x40
 80077ba:	f883 29a5 	strb.w	r2, [r3, #2469]	; 0x9a5
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	227c      	movs	r2, #124	; 0x7c
 80077c2:	f883 29a7 	strb.w	r2, [r3, #2471]	; 0x9a7
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2204      	movs	r2, #4
 80077ca:	f883 29a8 	strb.w	r2, [r3, #2472]	; 0x9a8
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2218      	movs	r2, #24
 80077d2:	f883 29a9 	strb.w	r2, [r3, #2473]	; 0x9a9
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2204      	movs	r2, #4
 80077da:	f883 29aa 	strb.w	r2, [r3, #2474]	; 0x9aa
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2278      	movs	r2, #120	; 0x78
 80077e2:	f883 29ab 	strb.w	r2, [r3, #2475]	; 0x9ab
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	227c      	movs	r2, #124	; 0x7c
 80077ea:	f883 29ac 	strb.w	r2, [r3, #2476]	; 0x9ac
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2208      	movs	r2, #8
 80077f2:	f883 29ad 	strb.w	r2, [r3, #2477]	; 0x9ad
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2204      	movs	r2, #4
 80077fa:	f883 29ae 	strb.w	r2, [r3, #2478]	; 0x9ae
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2204      	movs	r2, #4
 8007802:	f883 29af 	strb.w	r2, [r3, #2479]	; 0x9af
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2278      	movs	r2, #120	; 0x78
 800780a:	f883 29b0 	strb.w	r2, [r3, #2480]	; 0x9b0
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2238      	movs	r2, #56	; 0x38
 8007812:	f883 29b1 	strb.w	r2, [r3, #2481]	; 0x9b1
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2244      	movs	r2, #68	; 0x44
 800781a:	f883 29b2 	strb.w	r2, [r3, #2482]	; 0x9b2
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2244      	movs	r2, #68	; 0x44
 8007822:	f883 29b3 	strb.w	r2, [r3, #2483]	; 0x9b3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2244      	movs	r2, #68	; 0x44
 800782a:	f883 29b4 	strb.w	r2, [r3, #2484]	; 0x9b4
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2238      	movs	r2, #56	; 0x38
 8007832:	f883 29b5 	strb.w	r2, [r3, #2485]	; 0x9b5
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	227c      	movs	r2, #124	; 0x7c
 800783a:	f883 29b6 	strb.w	r2, [r3, #2486]	; 0x9b6
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2214      	movs	r2, #20
 8007842:	f883 29b7 	strb.w	r2, [r3, #2487]	; 0x9b7
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2214      	movs	r2, #20
 800784a:	f883 29b8 	strb.w	r2, [r3, #2488]	; 0x9b8
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2214      	movs	r2, #20
 8007852:	f883 29b9 	strb.w	r2, [r3, #2489]	; 0x9b9
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2208      	movs	r2, #8
 800785a:	f883 29ba 	strb.w	r2, [r3, #2490]	; 0x9ba
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2208      	movs	r2, #8
 8007862:	f883 29bb 	strb.w	r2, [r3, #2491]	; 0x9bb
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2214      	movs	r2, #20
 800786a:	f883 29bc 	strb.w	r2, [r3, #2492]	; 0x9bc
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2214      	movs	r2, #20
 8007872:	f883 29bd 	strb.w	r2, [r3, #2493]	; 0x9bd
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2218      	movs	r2, #24
 800787a:	f883 29be 	strb.w	r2, [r3, #2494]	; 0x9be
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	227c      	movs	r2, #124	; 0x7c
 8007882:	f883 29bf 	strb.w	r2, [r3, #2495]	; 0x9bf
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	227c      	movs	r2, #124	; 0x7c
 800788a:	f883 29c0 	strb.w	r2, [r3, #2496]	; 0x9c0
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2208      	movs	r2, #8
 8007892:	f883 29c1 	strb.w	r2, [r3, #2497]	; 0x9c1
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2204      	movs	r2, #4
 800789a:	f883 29c2 	strb.w	r2, [r3, #2498]	; 0x9c2
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2204      	movs	r2, #4
 80078a2:	f883 29c3 	strb.w	r2, [r3, #2499]	; 0x9c3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2208      	movs	r2, #8
 80078aa:	f883 29c4 	strb.w	r2, [r3, #2500]	; 0x9c4
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2248      	movs	r2, #72	; 0x48
 80078b2:	f883 29c5 	strb.w	r2, [r3, #2501]	; 0x9c5
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2254      	movs	r2, #84	; 0x54
 80078ba:	f883 29c6 	strb.w	r2, [r3, #2502]	; 0x9c6
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2254      	movs	r2, #84	; 0x54
 80078c2:	f883 29c7 	strb.w	r2, [r3, #2503]	; 0x9c7
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2254      	movs	r2, #84	; 0x54
 80078ca:	f883 29c8 	strb.w	r2, [r3, #2504]	; 0x9c8
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2220      	movs	r2, #32
 80078d2:	f883 29c9 	strb.w	r2, [r3, #2505]	; 0x9c9
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2204      	movs	r2, #4
 80078da:	f883 29ca 	strb.w	r2, [r3, #2506]	; 0x9ca
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	223f      	movs	r2, #63	; 0x3f
 80078e2:	f883 29cb 	strb.w	r2, [r3, #2507]	; 0x9cb
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2244      	movs	r2, #68	; 0x44
 80078ea:	f883 29cc 	strb.w	r2, [r3, #2508]	; 0x9cc
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2240      	movs	r2, #64	; 0x40
 80078f2:	f883 29cd 	strb.w	r2, [r3, #2509]	; 0x9cd
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2220      	movs	r2, #32
 80078fa:	f883 29ce 	strb.w	r2, [r3, #2510]	; 0x9ce
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	223c      	movs	r2, #60	; 0x3c
 8007902:	f883 29cf 	strb.w	r2, [r3, #2511]	; 0x9cf
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2240      	movs	r2, #64	; 0x40
 800790a:	f883 29d0 	strb.w	r2, [r3, #2512]	; 0x9d0
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2240      	movs	r2, #64	; 0x40
 8007912:	f883 29d1 	strb.w	r2, [r3, #2513]	; 0x9d1
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2220      	movs	r2, #32
 800791a:	f883 29d2 	strb.w	r2, [r3, #2514]	; 0x9d2
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	227c      	movs	r2, #124	; 0x7c
 8007922:	f883 29d3 	strb.w	r2, [r3, #2515]	; 0x9d3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	221c      	movs	r2, #28
 800792a:	f883 29d4 	strb.w	r2, [r3, #2516]	; 0x9d4
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2220      	movs	r2, #32
 8007932:	f883 29d5 	strb.w	r2, [r3, #2517]	; 0x9d5
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2240      	movs	r2, #64	; 0x40
 800793a:	f883 29d6 	strb.w	r2, [r3, #2518]	; 0x9d6
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2220      	movs	r2, #32
 8007942:	f883 29d7 	strb.w	r2, [r3, #2519]	; 0x9d7
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	221c      	movs	r2, #28
 800794a:	f883 29d8 	strb.w	r2, [r3, #2520]	; 0x9d8
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	223c      	movs	r2, #60	; 0x3c
 8007952:	f883 29d9 	strb.w	r2, [r3, #2521]	; 0x9d9
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2240      	movs	r2, #64	; 0x40
 800795a:	f883 29da 	strb.w	r2, [r3, #2522]	; 0x9da
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2230      	movs	r2, #48	; 0x30
 8007962:	f883 29db 	strb.w	r2, [r3, #2523]	; 0x9db
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2240      	movs	r2, #64	; 0x40
 800796a:	f883 29dc 	strb.w	r2, [r3, #2524]	; 0x9dc
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	223c      	movs	r2, #60	; 0x3c
 8007972:	f883 29dd 	strb.w	r2, [r3, #2525]	; 0x9dd
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2244      	movs	r2, #68	; 0x44
 800797a:	f883 29de 	strb.w	r2, [r3, #2526]	; 0x9de
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2228      	movs	r2, #40	; 0x28
 8007982:	f883 29df 	strb.w	r2, [r3, #2527]	; 0x9df
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2210      	movs	r2, #16
 800798a:	f883 29e0 	strb.w	r2, [r3, #2528]	; 0x9e0
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2228      	movs	r2, #40	; 0x28
 8007992:	f883 29e1 	strb.w	r2, [r3, #2529]	; 0x9e1
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2244      	movs	r2, #68	; 0x44
 800799a:	f883 29e2 	strb.w	r2, [r3, #2530]	; 0x9e2
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	220c      	movs	r2, #12
 80079a2:	f883 29e3 	strb.w	r2, [r3, #2531]	; 0x9e3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2250      	movs	r2, #80	; 0x50
 80079aa:	f883 29e4 	strb.w	r2, [r3, #2532]	; 0x9e4
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2250      	movs	r2, #80	; 0x50
 80079b2:	f883 29e5 	strb.w	r2, [r3, #2533]	; 0x9e5
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2250      	movs	r2, #80	; 0x50
 80079ba:	f883 29e6 	strb.w	r2, [r3, #2534]	; 0x9e6
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	223c      	movs	r2, #60	; 0x3c
 80079c2:	f883 29e7 	strb.w	r2, [r3, #2535]	; 0x9e7
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2244      	movs	r2, #68	; 0x44
 80079ca:	f883 29e8 	strb.w	r2, [r3, #2536]	; 0x9e8
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2264      	movs	r2, #100	; 0x64
 80079d2:	f883 29e9 	strb.w	r2, [r3, #2537]	; 0x9e9
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2254      	movs	r2, #84	; 0x54
 80079da:	f883 29ea 	strb.w	r2, [r3, #2538]	; 0x9ea
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	224c      	movs	r2, #76	; 0x4c
 80079e2:	f883 29eb 	strb.w	r2, [r3, #2539]	; 0x9eb
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2244      	movs	r2, #68	; 0x44
 80079ea:	f883 29ec 	strb.w	r2, [r3, #2540]	; 0x9ec
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2208      	movs	r2, #8
 80079f2:	f883 29ee 	strb.w	r2, [r3, #2542]	; 0x9ee
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2236      	movs	r2, #54	; 0x36
 80079fa:	f883 29ef 	strb.w	r2, [r3, #2543]	; 0x9ef
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2241      	movs	r2, #65	; 0x41
 8007a02:	f883 29f0 	strb.w	r2, [r3, #2544]	; 0x9f0
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	227f      	movs	r2, #127	; 0x7f
 8007a0a:	f883 29f4 	strb.w	r2, [r3, #2548]	; 0x9f4
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2241      	movs	r2, #65	; 0x41
 8007a12:	f883 29f8 	strb.w	r2, [r3, #2552]	; 0x9f8
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2236      	movs	r2, #54	; 0x36
 8007a1a:	f883 29f9 	strb.w	r2, [r3, #2553]	; 0x9f9
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2208      	movs	r2, #8
 8007a22:	f883 29fa 	strb.w	r2, [r3, #2554]	; 0x9fa
	// TODO Auto-generated constructor stub

}
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bdb0      	pop	{r4, r5, r7, pc}

08007a30 <_ZN4GLCDD1Ev>:

GLCD::~GLCD() {
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	4a05      	ldr	r2, [pc, #20]	; (8007a50 <_ZN4GLCDD1Ev+0x20>)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	601a      	str	r2, [r3, #0]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7fb fe4b 	bl	80036dc <_ZN6commonD1Ev>
	// TODO Auto-generated destructor stub
}
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3708      	adds	r7, #8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	0800f724 	.word	0x0800f724

08007a54 <_ZN4GLCDD0Ev>:
GLCD::~GLCD() {
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
}
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f7ff ffe7 	bl	8007a30 <_ZN4GLCDD1Ev>
 8007a62:	f640 2104 	movw	r1, #2564	; 0xa04
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f006 ff83 	bl	800e972 <_ZdlPvj>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3708      	adds	r7, #8
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
	...

08007a78 <_ZN4GLCD9m_ctrloffEv>:

void GLCD::m_ctrloff(){
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8007a80:	2200      	movs	r2, #0
 8007a82:	2110      	movs	r1, #16
 8007a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007a88:	f002 fd02 	bl	800a490 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007a92:	480c      	ldr	r0, [pc, #48]	; (8007ac4 <_ZN4GLCD9m_ctrloffEv+0x4c>)
 8007a94:	f002 fcfc 	bl	800a490 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007a9e:	4809      	ldr	r0, [pc, #36]	; (8007ac4 <_ZN4GLCD9m_ctrloffEv+0x4c>)
 8007aa0:	f002 fcf6 	bl	800a490 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	2104      	movs	r1, #4
 8007aa8:	4807      	ldr	r0, [pc, #28]	; (8007ac8 <_ZN4GLCD9m_ctrloffEv+0x50>)
 8007aaa:	f002 fcf1 	bl	800a490 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_RESET);
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007ab4:	4803      	ldr	r0, [pc, #12]	; (8007ac4 <_ZN4GLCD9m_ctrloffEv+0x4c>)
 8007ab6:	f002 fceb 	bl	800a490 <HAL_GPIO_WritePin>
}
 8007aba:	bf00      	nop
 8007abc:	3708      	adds	r7, #8
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	48000800 	.word	0x48000800
 8007ac8:	48000c00 	.word	0x48000c00

08007acc <_ZN4GLCD7m_delayEjh>:
	__HAL_TIM_SET_COUNTER(&htim1, 0);  // reset the counter
	while ((__HAL_TIM_GET_COUNTER(&htim1))<delay);  // wait for the delay to complete
}

void GLCD::m_delay(unsigned int j,uint8_t a)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b087      	sub	sp, #28
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	71fb      	strb	r3, [r7, #7]
	unsigned int i,k;
	for(i=0;i<j;i++)
 8007ada:	2300      	movs	r3, #0
 8007adc:	617b      	str	r3, [r7, #20]
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d20d      	bcs.n	8007b02 <_ZN4GLCD7m_delayEjh+0x36>
 	{for(k=0;k<a;k++);
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	613b      	str	r3, [r7, #16]
 8007aea:	79fb      	ldrb	r3, [r7, #7]
 8007aec:	693a      	ldr	r2, [r7, #16]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d203      	bcs.n	8007afa <_ZN4GLCD7m_delayEjh+0x2e>
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	3301      	adds	r3, #1
 8007af6:	613b      	str	r3, [r7, #16]
 8007af8:	e7f7      	b.n	8007aea <_ZN4GLCD7m_delayEjh+0x1e>
	for(i=0;i<j;i++)
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	3301      	adds	r3, #1
 8007afe:	617b      	str	r3, [r7, #20]
 8007b00:	e7ed      	b.n	8007ade <_ZN4GLCD7m_delayEjh+0x12>
	}
}
 8007b02:	bf00      	nop
 8007b04:	371c      	adds	r7, #28
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
	...

08007b10 <_ZN4GLCD16m_IOWritethedataEh>:

void GLCD::m_IOWritethedata(const uint8_t finput)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(GPIOC,LCDD0_Pin,ReadtheValueAssignPinstate(0,finput));
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	78fa      	ldrb	r2, [r7, #3]
 8007b20:	2100      	movs	r1, #0
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7fb ffe8 	bl	8003af8 <_ZN6common26ReadtheValueAssignPinstateEhh>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	2108      	movs	r1, #8
 8007b2e:	482f      	ldr	r0, [pc, #188]	; (8007bec <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8007b30:	f002 fcae 	bl	800a490 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD1_Pin,ReadtheValueAssignPinstate(1,finput));
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	78fa      	ldrb	r2, [r7, #3]
 8007b38:	2101      	movs	r1, #1
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7fb ffdc 	bl	8003af8 <_ZN6common26ReadtheValueAssignPinstateEhh>
 8007b40:	4603      	mov	r3, r0
 8007b42:	461a      	mov	r2, r3
 8007b44:	2104      	movs	r1, #4
 8007b46:	4829      	ldr	r0, [pc, #164]	; (8007bec <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8007b48:	f002 fca2 	bl	800a490 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD2_Pin,ReadtheValueAssignPinstate(2,finput));
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	78fa      	ldrb	r2, [r7, #3]
 8007b50:	2102      	movs	r1, #2
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7fb ffd0 	bl	8003af8 <_ZN6common26ReadtheValueAssignPinstateEhh>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	2102      	movs	r1, #2
 8007b5e:	4823      	ldr	r0, [pc, #140]	; (8007bec <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8007b60:	f002 fc96 	bl	800a490 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD3_Pin,ReadtheValueAssignPinstate(3,finput));
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	78fa      	ldrb	r2, [r7, #3]
 8007b68:	2103      	movs	r1, #3
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7fb ffc4 	bl	8003af8 <_ZN6common26ReadtheValueAssignPinstateEhh>
 8007b70:	4603      	mov	r3, r0
 8007b72:	461a      	mov	r2, r3
 8007b74:	2101      	movs	r1, #1
 8007b76:	481d      	ldr	r0, [pc, #116]	; (8007bec <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8007b78:	f002 fc8a 	bl	800a490 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD4_Pin,ReadtheValueAssignPinstate(4,finput));
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	78fa      	ldrb	r2, [r7, #3]
 8007b80:	2104      	movs	r1, #4
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fb ffb8 	bl	8003af8 <_ZN6common26ReadtheValueAssignPinstateEhh>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007b90:	4816      	ldr	r0, [pc, #88]	; (8007bec <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8007b92:	f002 fc7d 	bl	800a490 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD5_Pin,ReadtheValueAssignPinstate(5,finput));
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	78fa      	ldrb	r2, [r7, #3]
 8007b9a:	2105      	movs	r1, #5
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7fb ffab 	bl	8003af8 <_ZN6common26ReadtheValueAssignPinstateEhh>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007baa:	4810      	ldr	r0, [pc, #64]	; (8007bec <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8007bac:	f002 fc70 	bl	800a490 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,LCDD6_Pin,ReadtheValueAssignPinstate(6,finput));
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	78fa      	ldrb	r2, [r7, #3]
 8007bb4:	2106      	movs	r1, #6
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7fb ff9e 	bl	8003af8 <_ZN6common26ReadtheValueAssignPinstateEhh>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007bc4:	4809      	ldr	r0, [pc, #36]	; (8007bec <_ZN4GLCD16m_IOWritethedataEh+0xdc>)
 8007bc6:	f002 fc63 	bl	800a490 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,LCDD7_Pin, ReadtheValueAssignPinstate(7,finput));
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	78fa      	ldrb	r2, [r7, #3]
 8007bce:	2107      	movs	r1, #7
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7fb ff91 	bl	8003af8 <_ZN6common26ReadtheValueAssignPinstateEhh>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	461a      	mov	r2, r3
 8007bda:	2120      	movs	r1, #32
 8007bdc:	4804      	ldr	r0, [pc, #16]	; (8007bf0 <_ZN4GLCD16m_IOWritethedataEh+0xe0>)
 8007bde:	f002 fc57 	bl	800a490 <HAL_GPIO_WritePin>
}
 8007be2:	bf00      	nop
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	48000800 	.word	0x48000800
 8007bf0:	48000400 	.word	0x48000400

08007bf4 <_ZN4GLCD11m_displayonEv>:

void GLCD::m_displayon(){
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
	m_ctrloff();
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f7ff ff3b 	bl	8007a78 <_ZN4GLCD9m_ctrloffEv>
	m_IOWritethedata(0x3f);
 8007c02:	213f      	movs	r1, #63	; 0x3f
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f7ff ff83 	bl	8007b10 <_ZN4GLCD16m_IOWritethedataEh>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	2104      	movs	r1, #4
 8007c0e:	4815      	ldr	r0, [pc, #84]	; (8007c64 <_ZN4GLCD11m_displayonEv+0x70>)
 8007c10:	f002 fc3e 	bl	800a490 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 8007c14:	2201      	movs	r2, #1
 8007c16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c1a:	4813      	ldr	r0, [pc, #76]	; (8007c68 <_ZN4GLCD11m_displayonEv+0x74>)
 8007c1c:	f002 fc38 	bl	800a490 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8007c20:	2200      	movs	r2, #0
 8007c22:	2110      	movs	r1, #16
 8007c24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c28:	f002 fc32 	bl	800a490 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007c32:	480d      	ldr	r0, [pc, #52]	; (8007c68 <_ZN4GLCD11m_displayonEv+0x74>)
 8007c34:	f002 fc2c 	bl	800a490 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c3e:	480a      	ldr	r0, [pc, #40]	; (8007c68 <_ZN4GLCD11m_displayonEv+0x74>)
 8007c40:	f002 fc26 	bl	800a490 <HAL_GPIO_WritePin>
	//m_delay(GLCDDELAY);
	m_delay(10,100);
 8007c44:	2264      	movs	r2, #100	; 0x64
 8007c46:	210a      	movs	r1, #10
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f7ff ff3f 	bl	8007acc <_ZN4GLCD7m_delayEjh>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c54:	4804      	ldr	r0, [pc, #16]	; (8007c68 <_ZN4GLCD11m_displayonEv+0x74>)
 8007c56:	f002 fc1b 	bl	800a490 <HAL_GPIO_WritePin>
}
 8007c5a:	bf00      	nop
 8007c5c:	3708      	adds	r7, #8
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	48000c00 	.word	0x48000c00
 8007c68:	48000800 	.word	0x48000800

08007c6c <_ZN4GLCD11m_setcolumnEh>:
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
}


void GLCD::m_setcolumn(uint8_t Columvalue)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	460b      	mov	r3, r1
 8007c76:	70fb      	strb	r3, [r7, #3]
	uint8_t dport;
	if(Columvalue <64)
 8007c78:	78fb      	ldrb	r3, [r7, #3]
 8007c7a:	2b3f      	cmp	r3, #63	; 0x3f
 8007c7c:	d839      	bhi.n	8007cf2 <_ZN4GLCD11m_setcolumnEh+0x86>
	{
		m_ctrloff();
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f7ff fefa 	bl	8007a78 <_ZN4GLCD9m_ctrloffEv>
		c=Columvalue;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	78fa      	ldrb	r2, [r7, #3]
 8007c88:	771a      	strb	r2, [r3, #28]
		m_IOWritethedata((0x40|(Columvalue&63)));
 8007c8a:	78fb      	ldrb	r3, [r7, #3]
 8007c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	4619      	mov	r1, r3
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f7ff ff38 	bl	8007b10 <_ZN4GLCD16m_IOWritethedataEh>
		HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	2104      	movs	r1, #4
 8007ca4:	4831      	ldr	r0, [pc, #196]	; (8007d6c <_ZN4GLCD11m_setcolumnEh+0x100>)
 8007ca6:	f002 fbf3 	bl	800a490 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_RESET);
 8007caa:	2200      	movs	r2, #0
 8007cac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007cb0:	482f      	ldr	r0, [pc, #188]	; (8007d70 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8007cb2:	f002 fbed 	bl	800a490 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	2110      	movs	r1, #16
 8007cba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007cbe:	f002 fbe7 	bl	800a490 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007cc8:	4829      	ldr	r0, [pc, #164]	; (8007d70 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8007cca:	f002 fbe1 	bl	800a490 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007cd4:	4826      	ldr	r0, [pc, #152]	; (8007d70 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8007cd6:	f002 fbdb 	bl	800a490 <HAL_GPIO_WritePin>
		//m_delay(GLCDDELAY);
		m_delay(10,100);
 8007cda:	2264      	movs	r2, #100	; 0x64
 8007cdc:	210a      	movs	r1, #10
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f7ff fef4 	bl	8007acc <_ZN4GLCD7m_delayEjh>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007cea:	4821      	ldr	r0, [pc, #132]	; (8007d70 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8007cec:	f002 fbd0 	bl	800a490 <HAL_GPIO_WritePin>
		//m_delay(GLCDDELAY);
		m_delay(10,100);
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);

	}
}
 8007cf0:	e038      	b.n	8007d64 <_ZN4GLCD11m_setcolumnEh+0xf8>
		c=Columvalue;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	78fa      	ldrb	r2, [r7, #3]
 8007cf6:	771a      	strb	r2, [r3, #28]
		dport=0x40|((Columvalue-64)&63);	  //0x40 represents Column 0
 8007cf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007cfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d00:	b25b      	sxtb	r3, r3
 8007d02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d06:	b25b      	sxtb	r3, r3
 8007d08:	73fb      	strb	r3, [r7, #15]
		m_IOWritethedata(dport);
 8007d0a:	7bfb      	ldrb	r3, [r7, #15]
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f7ff fefe 	bl	8007b10 <_ZN4GLCD16m_IOWritethedataEh>
		HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 8007d14:	2200      	movs	r2, #0
 8007d16:	2104      	movs	r1, #4
 8007d18:	4814      	ldr	r0, [pc, #80]	; (8007d6c <_ZN4GLCD11m_setcolumnEh+0x100>)
 8007d1a:	f002 fbb9 	bl	800a490 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007d24:	4812      	ldr	r0, [pc, #72]	; (8007d70 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8007d26:	f002 fbb3 	bl	800a490 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	2110      	movs	r1, #16
 8007d2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d32:	f002 fbad 	bl	800a490 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8007d36:	2200      	movs	r2, #0
 8007d38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007d3c:	480c      	ldr	r0, [pc, #48]	; (8007d70 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8007d3e:	f002 fba7 	bl	800a490 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8007d42:	2201      	movs	r2, #1
 8007d44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007d48:	4809      	ldr	r0, [pc, #36]	; (8007d70 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8007d4a:	f002 fba1 	bl	800a490 <HAL_GPIO_WritePin>
		m_delay(10,100);
 8007d4e:	2264      	movs	r2, #100	; 0x64
 8007d50:	210a      	movs	r1, #10
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f7ff feba 	bl	8007acc <_ZN4GLCD7m_delayEjh>
		HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007d5e:	4804      	ldr	r0, [pc, #16]	; (8007d70 <_ZN4GLCD11m_setcolumnEh+0x104>)
 8007d60:	f002 fb96 	bl	800a490 <HAL_GPIO_WritePin>
}
 8007d64:	bf00      	nop
 8007d66:	3710      	adds	r7, #16
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	48000c00 	.word	0x48000c00
 8007d70:	48000800 	.word	0x48000800

08007d74 <_ZN4GLCD9m_setpageEh>:

void GLCD::m_setpage(uint8_t x)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	70fb      	strb	r3, [r7, #3]
	uint8_t dport;
	m_ctrloff();
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f7ff fe79 	bl	8007a78 <_ZN4GLCD9m_ctrloffEv>
	dport= 0xb8|x;	   //0xb8 represents Page 0
 8007d86:	78fb      	ldrb	r3, [r7, #3]
 8007d88:	f063 0347 	orn	r3, r3, #71	; 0x47
 8007d8c:	73fb      	strb	r3, [r7, #15]
	m_IOWritethedata(dport);
 8007d8e:	7bfb      	ldrb	r3, [r7, #15]
 8007d90:	4619      	mov	r1, r3
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f7ff febc 	bl	8007b10 <_ZN4GLCD16m_IOWritethedataEh>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 8007d98:	2201      	movs	r2, #1
 8007d9a:	2104      	movs	r1, #4
 8007d9c:	4814      	ldr	r0, [pc, #80]	; (8007df0 <_ZN4GLCD9m_setpageEh+0x7c>)
 8007d9e:	f002 fb77 	bl	800a490 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 8007da2:	2201      	movs	r2, #1
 8007da4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007da8:	4812      	ldr	r0, [pc, #72]	; (8007df4 <_ZN4GLCD9m_setpageEh+0x80>)
 8007daa:	f002 fb71 	bl	800a490 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8007dae:	2200      	movs	r2, #0
 8007db0:	2110      	movs	r1, #16
 8007db2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007db6:	f002 fb6b 	bl	800a490 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007dc0:	480c      	ldr	r0, [pc, #48]	; (8007df4 <_ZN4GLCD9m_setpageEh+0x80>)
 8007dc2:	f002 fb65 	bl	800a490 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007dcc:	4809      	ldr	r0, [pc, #36]	; (8007df4 <_ZN4GLCD9m_setpageEh+0x80>)
 8007dce:	f002 fb5f 	bl	800a490 <HAL_GPIO_WritePin>
	//m_delay(GLCDDELAY);
	m_delay(10,100);
 8007dd2:	2264      	movs	r2, #100	; 0x64
 8007dd4:	210a      	movs	r1, #10
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f7ff fe78 	bl	8007acc <_ZN4GLCD7m_delayEjh>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007de2:	4804      	ldr	r0, [pc, #16]	; (8007df4 <_ZN4GLCD9m_setpageEh+0x80>)
 8007de4:	f002 fb54 	bl	800a490 <HAL_GPIO_WritePin>
}
 8007de8:	bf00      	nop
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	48000c00 	.word	0x48000c00
 8007df4:	48000800 	.word	0x48000800

08007df8 <_ZN4GLCD14m_setstartlineEh>:

void GLCD::m_setstartline(uint8_t z)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	460b      	mov	r3, r1
 8007e02:	70fb      	strb	r3, [r7, #3]
	uint8_t dport;
	m_ctrloff();
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f7ff fe37 	bl	8007a78 <_ZN4GLCD9m_ctrloffEv>
	dport=0xc0|z;	   //0xc0 represents Line 0
 8007e0a:	78fb      	ldrb	r3, [r7, #3]
 8007e0c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8007e10:	73fb      	strb	r3, [r7, #15]
	m_IOWritethedata(dport);
 8007e12:	7bfb      	ldrb	r3, [r7, #15]
 8007e14:	4619      	mov	r1, r3
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f7ff fe7a 	bl	8007b10 <_ZN4GLCD16m_IOWritethedataEh>
	HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	2104      	movs	r1, #4
 8007e20:	4814      	ldr	r0, [pc, #80]	; (8007e74 <_ZN4GLCD14m_setstartlineEh+0x7c>)
 8007e22:	f002 fb35 	bl	800a490 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 8007e26:	2201      	movs	r2, #1
 8007e28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007e2c:	4812      	ldr	r0, [pc, #72]	; (8007e78 <_ZN4GLCD14m_setstartlineEh+0x80>)
 8007e2e:	f002 fb2f 	bl	800a490 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_RESET);
 8007e32:	2200      	movs	r2, #0
 8007e34:	2110      	movs	r1, #16
 8007e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007e3a:	f002 fb29 	bl	800a490 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007e44:	480c      	ldr	r0, [pc, #48]	; (8007e78 <_ZN4GLCD14m_setstartlineEh+0x80>)
 8007e46:	f002 fb23 	bl	800a490 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007e50:	4809      	ldr	r0, [pc, #36]	; (8007e78 <_ZN4GLCD14m_setstartlineEh+0x80>)
 8007e52:	f002 fb1d 	bl	800a490 <HAL_GPIO_WritePin>
	//m_delay(GLCDDELAY);
	m_delay(10,100);
 8007e56:	2264      	movs	r2, #100	; 0x64
 8007e58:	210a      	movs	r1, #10
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f7ff fe36 	bl	8007acc <_ZN4GLCD7m_delayEjh>
	HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8007e60:	2200      	movs	r2, #0
 8007e62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007e66:	4804      	ldr	r0, [pc, #16]	; (8007e78 <_ZN4GLCD14m_setstartlineEh+0x80>)
 8007e68:	f002 fb12 	bl	800a490 <HAL_GPIO_WritePin>
}
 8007e6c:	bf00      	nop
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}
 8007e74:	48000c00 	.word	0x48000c00
 8007e78:	48000800 	.word	0x48000800

08007e7c <_ZN4GLCD9m_lcddataEPht>:

void GLCD::m_lcddata(uint8_t *value,uint16_t limit)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b086      	sub	sp, #24
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	4613      	mov	r3, r2
 8007e88:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint8_t dport;
	for(i=0;i<limit;i++)
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	82fb      	strh	r3, [r7, #22]
 8007e8e:	8afa      	ldrh	r2, [r7, #22]
 8007e90:	88fb      	ldrh	r3, [r7, #6]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	f080 8085 	bcs.w	8007fa2 <_ZN4GLCD9m_lcddataEPht+0x126>
	{
		if(c<64)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	7f1b      	ldrb	r3, [r3, #28]
 8007e9c:	2b3f      	cmp	r3, #63	; 0x3f
 8007e9e:	d838      	bhi.n	8007f12 <_ZN4GLCD9m_lcddataEPht+0x96>
		{
			dport=value[i];
 8007ea0:	8afb      	ldrh	r3, [r7, #22]
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	757b      	strb	r3, [r7, #21]
			m_IOWritethedata(dport);
 8007eaa:	7d7b      	ldrb	r3, [r7, #21]
 8007eac:	4619      	mov	r1, r3
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	f7ff fe2e 	bl	8007b10 <_ZN4GLCD16m_IOWritethedataEh>
			HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_SET);
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	2104      	movs	r1, #4
 8007eb8:	483b      	ldr	r0, [pc, #236]	; (8007fa8 <_ZN4GLCD9m_lcddataEPht+0x12c>)
 8007eba:	f002 fae9 	bl	800a490 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_RESET);
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007ec4:	4839      	ldr	r0, [pc, #228]	; (8007fac <_ZN4GLCD9m_lcddataEPht+0x130>)
 8007ec6:	f002 fae3 	bl	800a490 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_SET);
 8007eca:	2201      	movs	r2, #1
 8007ecc:	2110      	movs	r1, #16
 8007ece:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007ed2:	f002 fadd 	bl	800a490 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007edc:	4833      	ldr	r0, [pc, #204]	; (8007fac <_ZN4GLCD9m_lcddataEPht+0x130>)
 8007ede:	f002 fad7 	bl	800a490 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007ee8:	4830      	ldr	r0, [pc, #192]	; (8007fac <_ZN4GLCD9m_lcddataEPht+0x130>)
 8007eea:	f002 fad1 	bl	800a490 <HAL_GPIO_WritePin>
			//m_delay(GLCDDELAY);
			m_delay(10,100);
 8007eee:	2264      	movs	r2, #100	; 0x64
 8007ef0:	210a      	movs	r1, #10
 8007ef2:	68f8      	ldr	r0, [r7, #12]
 8007ef4:	f7ff fdea 	bl	8007acc <_ZN4GLCD7m_delayEjh>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007efe:	482b      	ldr	r0, [pc, #172]	; (8007fac <_ZN4GLCD9m_lcddataEPht+0x130>)
 8007f00:	f002 fac6 	bl	800a490 <HAL_GPIO_WritePin>
			c++;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	7f1b      	ldrb	r3, [r3, #28]
 8007f08:	3301      	adds	r3, #1
 8007f0a:	b2da      	uxtb	r2, r3
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	771a      	strb	r2, [r3, #28]
 8007f10:	e03d      	b.n	8007f8e <_ZN4GLCD9m_lcddataEPht+0x112>
		}
		else
		{
			m_setcolumn(c);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	7f1b      	ldrb	r3, [r3, #28]
 8007f16:	4619      	mov	r1, r3
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f7ff fea7 	bl	8007c6c <_ZN4GLCD11m_setcolumnEh>
			dport=value[i];
 8007f1e:	8afb      	ldrh	r3, [r7, #22]
 8007f20:	68ba      	ldr	r2, [r7, #8]
 8007f22:	4413      	add	r3, r2
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	757b      	strb	r3, [r7, #21]
			m_IOWritethedata(dport);
 8007f28:	7d7b      	ldrb	r3, [r7, #21]
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f7ff fdef 	bl	8007b10 <_ZN4GLCD16m_IOWritethedataEh>
			HAL_GPIO_WritePin(GLCDCS1_GPIO_Port, GLCDCS1_Pin, GPIO_PIN_RESET);
 8007f32:	2200      	movs	r2, #0
 8007f34:	2104      	movs	r1, #4
 8007f36:	481c      	ldr	r0, [pc, #112]	; (8007fa8 <_ZN4GLCD9m_lcddataEPht+0x12c>)
 8007f38:	f002 faaa 	bl	800a490 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDCS2_Pin, GPIO_PIN_SET);
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007f42:	481a      	ldr	r0, [pc, #104]	; (8007fac <_ZN4GLCD9m_lcddataEPht+0x130>)
 8007f44:	f002 faa4 	bl	800a490 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,LCDRS_Pin, GPIO_PIN_SET);
 8007f48:	2201      	movs	r2, #1
 8007f4a:	2110      	movs	r1, #16
 8007f4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007f50:	f002 fa9e 	bl	800a490 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDRW_Pin, GPIO_PIN_RESET);
 8007f54:	2200      	movs	r2, #0
 8007f56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007f5a:	4814      	ldr	r0, [pc, #80]	; (8007fac <_ZN4GLCD9m_lcddataEPht+0x130>)
 8007f5c:	f002 fa98 	bl	800a490 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_SET);
 8007f60:	2201      	movs	r2, #1
 8007f62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007f66:	4811      	ldr	r0, [pc, #68]	; (8007fac <_ZN4GLCD9m_lcddataEPht+0x130>)
 8007f68:	f002 fa92 	bl	800a490 <HAL_GPIO_WritePin>
			//m_delay(GLCDDELAY);
			m_delay(10,100);
 8007f6c:	2264      	movs	r2, #100	; 0x64
 8007f6e:	210a      	movs	r1, #10
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f7ff fdab 	bl	8007acc <_ZN4GLCD7m_delayEjh>
			HAL_GPIO_WritePin(GPIOC,GLCDEN_Pin, GPIO_PIN_RESET);
 8007f76:	2200      	movs	r2, #0
 8007f78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007f7c:	480b      	ldr	r0, [pc, #44]	; (8007fac <_ZN4GLCD9m_lcddataEPht+0x130>)
 8007f7e:	f002 fa87 	bl	800a490 <HAL_GPIO_WritePin>
			c++;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	7f1b      	ldrb	r3, [r3, #28]
 8007f86:	3301      	adds	r3, #1
 8007f88:	b2da      	uxtb	r2, r3
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	771a      	strb	r2, [r3, #28]
		}
		if(c>127)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	7f1b      	ldrb	r3, [r3, #28]
 8007f92:	b25b      	sxtb	r3, r3
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	db03      	blt.n	8007fa0 <_ZN4GLCD9m_lcddataEPht+0x124>
	for(i=0;i<limit;i++)
 8007f98:	8afb      	ldrh	r3, [r7, #22]
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	82fb      	strh	r3, [r7, #22]
 8007f9e:	e776      	b.n	8007e8e <_ZN4GLCD9m_lcddataEPht+0x12>
	           return;
 8007fa0:	bf00      	nop
	}
}
 8007fa2:	3718      	adds	r7, #24
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	48000c00 	.word	0x48000c00
 8007fac:	48000800 	.word	0x48000800

08007fb0 <_ZN4GLCD10m_lcdputs1EhhPh>:

void GLCD::m_lcdputs1(uint8_t y,uint8_t x,unsigned char *str)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b086      	sub	sp, #24
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	607b      	str	r3, [r7, #4]
 8007fba:	460b      	mov	r3, r1
 8007fbc:	72fb      	strb	r3, [r7, #11]
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	uint16_t a;
	m_setcolumn(y);
 8007fc2:	7afb      	ldrb	r3, [r7, #11]
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f7ff fe50 	bl	8007c6c <_ZN4GLCD11m_setcolumnEh>
	m_setpage(x);
 8007fcc:	7abb      	ldrb	r3, [r7, #10]
 8007fce:	4619      	mov	r1, r3
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	f7ff fecf 	bl	8007d74 <_ZN4GLCD9m_setpageEh>
	for(i=0;str[i]!=0;i++)
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	75fb      	strb	r3, [r7, #23]
 8007fda:	7dfb      	ldrb	r3, [r7, #23]
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	4413      	add	r3, r2
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d015      	beq.n	8008012 <_ZN4GLCD10m_lcdputs1EhhPh+0x62>
	{
		a=(*(str+i));
 8007fe6:	7dfb      	ldrb	r3, [r7, #23]
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	4413      	add	r3, r2
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	82bb      	strh	r3, [r7, #20]
		a*=8;
 8007ff0:	8abb      	ldrh	r3, [r7, #20]
 8007ff2:	00db      	lsls	r3, r3, #3
 8007ff4:	82bb      	strh	r3, [r7, #20]
		m_lcddata(&Character8x8[a],8);
 8007ff6:	8abb      	ldrh	r3, [r7, #20]
 8007ff8:	3318      	adds	r3, #24
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	3306      	adds	r3, #6
 8008000:	2208      	movs	r2, #8
 8008002:	4619      	mov	r1, r3
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f7ff ff39 	bl	8007e7c <_ZN4GLCD9m_lcddataEPht>
	for(i=0;str[i]!=0;i++)
 800800a:	7dfb      	ldrb	r3, [r7, #23]
 800800c:	3301      	adds	r3, #1
 800800e:	75fb      	strb	r3, [r7, #23]
 8008010:	e7e3      	b.n	8007fda <_ZN4GLCD10m_lcdputs1EhhPh+0x2a>
	}
}
 8008012:	bf00      	nop
 8008014:	3718      	adds	r7, #24
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <_ZN4GLCD8m_clrlcdEv>:
		m_lcddata(&font5x7[a],5);
	}
}

void GLCD::m_clrlcd(void)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b084      	sub	sp, #16
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
    uint8_t i,j;
    for (i=0;i < 8;i++)
 8008022:	2300      	movs	r3, #0
 8008024:	73fb      	strb	r3, [r7, #15]
 8008026:	7bfb      	ldrb	r3, [r7, #15]
 8008028:	2b07      	cmp	r3, #7
 800802a:	d81d      	bhi.n	8008068 <_ZN4GLCD8m_clrlcdEv+0x4e>
    {
    m_setpage(i);
 800802c:	7bfb      	ldrb	r3, [r7, #15]
 800802e:	4619      	mov	r1, r3
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f7ff fe9f 	bl	8007d74 <_ZN4GLCD9m_setpageEh>
    m_setcolumn(0);
 8008036:	2100      	movs	r1, #0
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f7ff fe17 	bl	8007c6c <_ZN4GLCD11m_setcolumnEh>
        for (j= 0 ;j < 128; j++)
 800803e:	2300      	movs	r3, #0
 8008040:	73bb      	strb	r3, [r7, #14]
 8008042:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008046:	2b00      	cmp	r3, #0
 8008048:	db0a      	blt.n	8008060 <_ZN4GLCD8m_clrlcdEv+0x46>
        	m_lcddata(&z,1);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	331d      	adds	r3, #29
 800804e:	2201      	movs	r2, #1
 8008050:	4619      	mov	r1, r3
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f7ff ff12 	bl	8007e7c <_ZN4GLCD9m_lcddataEPht>
        for (j= 0 ;j < 128; j++)
 8008058:	7bbb      	ldrb	r3, [r7, #14]
 800805a:	3301      	adds	r3, #1
 800805c:	73bb      	strb	r3, [r7, #14]
 800805e:	e7f0      	b.n	8008042 <_ZN4GLCD8m_clrlcdEv+0x28>
    for (i=0;i < 8;i++)
 8008060:	7bfb      	ldrb	r3, [r7, #15]
 8008062:	3301      	adds	r3, #1
 8008064:	73fb      	strb	r3, [r7, #15]
 8008066:	e7de      	b.n	8008026 <_ZN4GLCD8m_clrlcdEv+0xc>
    }
}
 8008068:	bf00      	nop
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <_ZN10W5500ClassC1Ev>:
// SPI details
//SPISettings wiznet_SPI_settings(8000000, MSBFIRST, SPI_MODE0);
uint8_t SPI_CS;


W5500Class::W5500Class() {
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	4a04      	ldr	r2, [pc, #16]	; (800808c <_ZN10W5500ClassC1Ev+0x1c>)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4618      	mov	r0, r3
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr
 800808c:	0800f734 	.word	0x0800f734

08008090 <_ZN10W5500ClassD1Ev>:

W5500Class::~W5500Class() {
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	4a04      	ldr	r2, [pc, #16]	; (80080ac <_ZN10W5500ClassD1Ev+0x1c>)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4618      	mov	r0, r3
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr
 80080ac:	0800f734 	.word	0x0800f734

080080b0 <_ZN10W5500ClassD0Ev>:
W5500Class::~W5500Class() {
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
}
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f7ff ffe9 	bl	8008090 <_ZN10W5500ClassD1Ev>
 80080be:	2104      	movs	r1, #4
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f006 fc56 	bl	800e972 <_ZdlPvj>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4618      	mov	r0, r3
 80080ca:	3708      	adds	r7, #8
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <_Z41__static_initialization_and_destruction_0ii>:
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d107      	bne.n	80080f0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d102      	bne.n	80080f0 <_Z41__static_initialization_and_destruction_0ii+0x20>
W5500Class w5500;
 80080ea:	4809      	ldr	r0, [pc, #36]	; (8008110 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80080ec:	f7ff ffc0 	bl	8008070 <_ZN10W5500ClassC1Ev>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d107      	bne.n	8008106 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d102      	bne.n	8008106 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8008100:	4803      	ldr	r0, [pc, #12]	; (8008110 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8008102:	f7ff ffc5 	bl	8008090 <_ZN10W5500ClassD1Ev>
}
 8008106:	bf00      	nop
 8008108:	3708      	adds	r7, #8
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	20000604 	.word	0x20000604

08008114 <_GLOBAL__sub_I_w5500>:
 8008114:	b580      	push	{r7, lr}
 8008116:	af00      	add	r7, sp, #0
 8008118:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800811c:	2001      	movs	r0, #1
 800811e:	f7ff ffd7 	bl	80080d0 <_Z41__static_initialization_and_destruction_0ii>
 8008122:	bd80      	pop	{r7, pc}

08008124 <_GLOBAL__sub_D_w5500>:
 8008124:	b580      	push	{r7, lr}
 8008126:	af00      	add	r7, sp, #0
 8008128:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800812c:	2000      	movs	r0, #0
 800812e:	f7ff ffcf 	bl	80080d0 <_Z41__static_initialization_and_destruction_0ii>
 8008132:	bd80      	pop	{r7, pc}

08008134 <_ZN13HeattreatmentC1Ev>:
uint8_t start_process_control_timer;
uint8_t stop_timer_count;
uint8_t process_complete;
uint16_t seq1_duration_total,seq2_duration_total;

Heattreatment::Heattreatment() {
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	4a04      	ldr	r2, [pc, #16]	; (8008150 <_ZN13HeattreatmentC1Ev+0x1c>)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4618      	mov	r0, r3
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr
 8008150:	0800f744 	.word	0x0800f744

08008154 <_ZN13HeattreatmentD1Ev>:

Heattreatment::~Heattreatment() {
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	4a04      	ldr	r2, [pc, #16]	; (8008170 <_ZN13HeattreatmentD1Ev+0x1c>)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4618      	mov	r0, r3
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr
 8008170:	0800f744 	.word	0x0800f744

08008174 <_ZN13HeattreatmentD0Ev>:
Heattreatment::~Heattreatment() {
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
}
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f7ff ffe9 	bl	8008154 <_ZN13HeattreatmentD1Ev>
 8008182:	210c      	movs	r1, #12
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f006 fbf4 	bl	800e972 <_ZdlPvj>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4618      	mov	r0, r3
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <_ZN13Heattreatment3runEv>:

void Heattreatment::run()
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
	stateMachineProcessControl();
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f805 	bl	80081ac <_ZN13Heattreatment26stateMachineProcessControlEv>
}
 80081a2:	bf00      	nop
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
	...

080081ac <_ZN13Heattreatment26stateMachineProcessControlEv>:

void Heattreatment::stateMachineProcessControl(void){
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
	switch(SEQMONITOR)
 80081b4:	4b96      	ldr	r3, [pc, #600]	; (8008410 <_ZN13Heattreatment26stateMachineProcessControlEv+0x264>)
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	2b67      	cmp	r3, #103	; 0x67
 80081ba:	f000 8157 	beq.w	800846c <_ZN13Heattreatment26stateMachineProcessControlEv+0x2c0>
 80081be:	2b67      	cmp	r3, #103	; 0x67
 80081c0:	f300 82eb 	bgt.w	800879a <_ZN13Heattreatment26stateMachineProcessControlEv+0x5ee>
 80081c4:	2b65      	cmp	r3, #101	; 0x65
 80081c6:	f000 809c 	beq.w	8008302 <_ZN13Heattreatment26stateMachineProcessControlEv+0x156>
 80081ca:	2b65      	cmp	r3, #101	; 0x65
 80081cc:	f300 82e5 	bgt.w	800879a <_ZN13Heattreatment26stateMachineProcessControlEv+0x5ee>
 80081d0:	2b1a      	cmp	r3, #26
 80081d2:	dc2b      	bgt.n	800822c <_ZN13Heattreatment26stateMachineProcessControlEv+0x80>
 80081d4:	2b0a      	cmp	r3, #10
 80081d6:	f2c0 82e0 	blt.w	800879a <_ZN13Heattreatment26stateMachineProcessControlEv+0x5ee>
 80081da:	3b0a      	subs	r3, #10
 80081dc:	2b10      	cmp	r3, #16
 80081de:	f200 82dc 	bhi.w	800879a <_ZN13Heattreatment26stateMachineProcessControlEv+0x5ee>
 80081e2:	a201      	add	r2, pc, #4	; (adr r2, 80081e8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x3c>)
 80081e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e8:	08008233 	.word	0x08008233
 80081ec:	0800879b 	.word	0x0800879b
 80081f0:	0800879b 	.word	0x0800879b
 80081f4:	0800879b 	.word	0x0800879b
 80081f8:	0800879b 	.word	0x0800879b
 80081fc:	0800879b 	.word	0x0800879b
 8008200:	0800879b 	.word	0x0800879b
 8008204:	0800879b 	.word	0x0800879b
 8008208:	0800879b 	.word	0x0800879b
 800820c:	0800879b 	.word	0x0800879b
 8008210:	0800828d 	.word	0x0800828d
 8008214:	080082db 	.word	0x080082db
 8008218:	08008491 	.word	0x08008491
 800821c:	08008527 	.word	0x08008527
 8008220:	080085f3 	.word	0x080085f3
 8008224:	080086c1 	.word	0x080086c1
 8008228:	08008787 	.word	0x08008787
 800822c:	2b64      	cmp	r3, #100	; 0x64
 800822e:	d061      	beq.n	80082f4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x148>
 8008230:	e2b3      	b.n	800879a <_ZN13Heattreatment26stateMachineProcessControlEv+0x5ee>
	{
		case 10:
			if((SEQMONITOR==21)||(SEQMONITOR==100)||(SEQMONITOR==101)||(SEQMONITOR==103)||(SEQMONITOR==22)||(SEQMONITOR==23)
 8008232:	4b77      	ldr	r3, [pc, #476]	; (8008410 <_ZN13Heattreatment26stateMachineProcessControlEv+0x264>)
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	2b15      	cmp	r3, #21
 8008238:	d01f      	beq.n	800827a <_ZN13Heattreatment26stateMachineProcessControlEv+0xce>
 800823a:	4b75      	ldr	r3, [pc, #468]	; (8008410 <_ZN13Heattreatment26stateMachineProcessControlEv+0x264>)
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	2b64      	cmp	r3, #100	; 0x64
 8008240:	d01b      	beq.n	800827a <_ZN13Heattreatment26stateMachineProcessControlEv+0xce>
 8008242:	4b73      	ldr	r3, [pc, #460]	; (8008410 <_ZN13Heattreatment26stateMachineProcessControlEv+0x264>)
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	2b65      	cmp	r3, #101	; 0x65
 8008248:	d017      	beq.n	800827a <_ZN13Heattreatment26stateMachineProcessControlEv+0xce>
 800824a:	4b71      	ldr	r3, [pc, #452]	; (8008410 <_ZN13Heattreatment26stateMachineProcessControlEv+0x264>)
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	2b67      	cmp	r3, #103	; 0x67
 8008250:	d013      	beq.n	800827a <_ZN13Heattreatment26stateMachineProcessControlEv+0xce>
 8008252:	4b6f      	ldr	r3, [pc, #444]	; (8008410 <_ZN13Heattreatment26stateMachineProcessControlEv+0x264>)
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	2b16      	cmp	r3, #22
 8008258:	d00f      	beq.n	800827a <_ZN13Heattreatment26stateMachineProcessControlEv+0xce>
 800825a:	4b6d      	ldr	r3, [pc, #436]	; (8008410 <_ZN13Heattreatment26stateMachineProcessControlEv+0x264>)
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	2b17      	cmp	r3, #23
 8008260:	d00b      	beq.n	800827a <_ZN13Heattreatment26stateMachineProcessControlEv+0xce>
			||(SEQMONITOR==24)||(SEQMONITOR==25)||(SEQMONITOR==20))
 8008262:	4b6b      	ldr	r3, [pc, #428]	; (8008410 <_ZN13Heattreatment26stateMachineProcessControlEv+0x264>)
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	2b18      	cmp	r3, #24
 8008268:	d007      	beq.n	800827a <_ZN13Heattreatment26stateMachineProcessControlEv+0xce>
 800826a:	4b69      	ldr	r3, [pc, #420]	; (8008410 <_ZN13Heattreatment26stateMachineProcessControlEv+0x264>)
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	2b19      	cmp	r3, #25
 8008270:	d003      	beq.n	800827a <_ZN13Heattreatment26stateMachineProcessControlEv+0xce>
 8008272:	4b67      	ldr	r3, [pc, #412]	; (8008410 <_ZN13Heattreatment26stateMachineProcessControlEv+0x264>)
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	2b14      	cmp	r3, #20
 8008278:	d104      	bne.n	8008284 <_ZN13Heattreatment26stateMachineProcessControlEv+0xd8>
			{
				SEQMONITOR=SEQMONITOR+0;
 800827a:	4b65      	ldr	r3, [pc, #404]	; (8008410 <_ZN13Heattreatment26stateMachineProcessControlEv+0x264>)
 800827c:	781a      	ldrb	r2, [r3, #0]
 800827e:	4b64      	ldr	r3, [pc, #400]	; (8008410 <_ZN13Heattreatment26stateMachineProcessControlEv+0x264>)
 8008280:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				SEQMONITOR= 20;		 //Initialization
			}
		break;
 8008282:	e28f      	b.n	80087a4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x5f8>
				SEQMONITOR= 20;		 //Initialization
 8008284:	4b62      	ldr	r3, [pc, #392]	; (8008410 <_ZN13Heattreatment26stateMachineProcessControlEv+0x264>)
 8008286:	2214      	movs	r2, #20
 8008288:	701a      	strb	r2, [r3, #0]
		break;
 800828a:	e28b      	b.n	80087a4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x5f8>
		case 20:
			m_simEndProcess= HAL_GPIO_ReadPin(GPIOC,InputMachine1_Pin);
 800828c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008290:	4860      	ldr	r0, [pc, #384]	; (8008414 <_ZN13Heattreatment26stateMachineProcessControlEv+0x268>)
 8008292:	f002 f8e5 	bl	800a460 <HAL_GPIO_ReadPin>
 8008296:	4603      	mov	r3, r0
 8008298:	461a      	mov	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	715a      	strb	r2, [r3, #5]
			if((m_simEndProcess ==GPIO_PIN_SET )||(skipIdTCP==0x01))
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	795b      	ldrb	r3, [r3, #5]
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d003      	beq.n	80082ae <_ZN13Heattreatment26stateMachineProcessControlEv+0x102>
 80082a6:	4b5c      	ldr	r3, [pc, #368]	; (8008418 <_ZN13Heattreatment26stateMachineProcessControlEv+0x26c>)
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d10c      	bne.n	80082c8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x11c>
			{
				SEQMONITOR=21;
 80082ae:	4b58      	ldr	r3, [pc, #352]	; (8008410 <_ZN13Heattreatment26stateMachineProcessControlEv+0x264>)
 80082b0:	2215      	movs	r2, #21
 80082b2:	701a      	strb	r2, [r3, #0]
				status_to_server=1;
 80082b4:	4b59      	ldr	r3, [pc, #356]	; (800841c <_ZN13Heattreatment26stateMachineProcessControlEv+0x270>)
 80082b6:	2201      	movs	r2, #1
 80082b8:	701a      	strb	r2, [r3, #0]
				seq1_count_inc  = 0;
 80082ba:	4b59      	ldr	r3, [pc, #356]	; (8008420 <_ZN13Heattreatment26stateMachineProcessControlEv+0x274>)
 80082bc:	2200      	movs	r2, #0
 80082be:	801a      	strh	r2, [r3, #0]
				seq2_count_inc  = 0;
 80082c0:	4b58      	ldr	r3, [pc, #352]	; (8008424 <_ZN13Heattreatment26stateMachineProcessControlEv+0x278>)
 80082c2:	2200      	movs	r2, #0
 80082c4:	801a      	strh	r2, [r3, #0]
			}
			else if(m_simEndProcess ==GPIO_PIN_RESET)
			{
				status_to_server=30;
			}
		break;
 80082c6:	e26c      	b.n	80087a2 <_ZN13Heattreatment26stateMachineProcessControlEv+0x5f6>
			else if(m_simEndProcess ==GPIO_PIN_RESET)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	795b      	ldrb	r3, [r3, #5]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f040 8268 	bne.w	80087a2 <_ZN13Heattreatment26stateMachineProcessControlEv+0x5f6>
				status_to_server=30;
 80082d2:	4b52      	ldr	r3, [pc, #328]	; (800841c <_ZN13Heattreatment26stateMachineProcessControlEv+0x270>)
 80082d4:	221e      	movs	r2, #30
 80082d6:	701a      	strb	r2, [r3, #0]
		break;
 80082d8:	e263      	b.n	80087a2 <_ZN13Heattreatment26stateMachineProcessControlEv+0x5f6>
		case 21:
				ProcessId_Value = ProcessId_Value+1;
 80082da:	4b53      	ldr	r3, [pc, #332]	; (8008428 <_ZN13Heattreatment26stateMachineProcessControlEv+0x27c>)
 80082dc:	881b      	ldrh	r3, [r3, #0]
 80082de:	3301      	adds	r3, #1
 80082e0:	b29a      	uxth	r2, r3
 80082e2:	4b51      	ldr	r3, [pc, #324]	; (8008428 <_ZN13Heattreatment26stateMachineProcessControlEv+0x27c>)
 80082e4:	801a      	strh	r2, [r3, #0]
				SEQMONITOR	= 100; //wait for server ack
 80082e6:	4b4a      	ldr	r3, [pc, #296]	; (8008410 <_ZN13Heattreatment26stateMachineProcessControlEv+0x264>)
 80082e8:	2264      	movs	r2, #100	; 0x64
 80082ea:	701a      	strb	r2, [r3, #0]
				status_to_server= 1;
 80082ec:	4b4b      	ldr	r3, [pc, #300]	; (800841c <_ZN13Heattreatment26stateMachineProcessControlEv+0x270>)
 80082ee:	2201      	movs	r2, #1
 80082f0:	701a      	strb	r2, [r3, #0]
		break;
 80082f2:	e257      	b.n	80087a4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x5f8>
		case 100:	//Status_Http(from server)
				SEQMONITOR=101;
 80082f4:	4b46      	ldr	r3, [pc, #280]	; (8008410 <_ZN13Heattreatment26stateMachineProcessControlEv+0x264>)
 80082f6:	2265      	movs	r2, #101	; 0x65
 80082f8:	701a      	strb	r2, [r3, #0]
				status_to_server = 1;
 80082fa:	4b48      	ldr	r3, [pc, #288]	; (800841c <_ZN13Heattreatment26stateMachineProcessControlEv+0x270>)
 80082fc:	2201      	movs	r2, #1
 80082fe:	701a      	strb	r2, [r3, #0]
		break;
 8008300:	e250      	b.n	80087a4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x5f8>
		case 101:
				if(statusTCP == 11)
 8008302:	4b4a      	ldr	r3, [pc, #296]	; (800842c <_ZN13Heattreatment26stateMachineProcessControlEv+0x280>)
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	2b0b      	cmp	r3, #11
 8008308:	d17d      	bne.n	8008406 <_ZN13Heattreatment26stateMachineProcessControlEv+0x25a>
				{
					if(temperatureHighTCP !=0){
 800830a:	4b49      	ldr	r3, [pc, #292]	; (8008430 <_ZN13Heattreatment26stateMachineProcessControlEv+0x284>)
 800830c:	881b      	ldrh	r3, [r3, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d003      	beq.n	800831a <_ZN13Heattreatment26stateMachineProcessControlEv+0x16e>
						Seq1temperature = temperatureHighTCP;
 8008312:	4b47      	ldr	r3, [pc, #284]	; (8008430 <_ZN13Heattreatment26stateMachineProcessControlEv+0x284>)
 8008314:	881a      	ldrh	r2, [r3, #0]
 8008316:	4b47      	ldr	r3, [pc, #284]	; (8008434 <_ZN13Heattreatment26stateMachineProcessControlEv+0x288>)
 8008318:	801a      	strh	r2, [r3, #0]
					}
					if(temperatureLowTCP !=0){
 800831a:	4b47      	ldr	r3, [pc, #284]	; (8008438 <_ZN13Heattreatment26stateMachineProcessControlEv+0x28c>)
 800831c:	881b      	ldrh	r3, [r3, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d003      	beq.n	800832a <_ZN13Heattreatment26stateMachineProcessControlEv+0x17e>
						Seq2temperature = temperatureLowTCP;
 8008322:	4b45      	ldr	r3, [pc, #276]	; (8008438 <_ZN13Heattreatment26stateMachineProcessControlEv+0x28c>)
 8008324:	881a      	ldrh	r2, [r3, #0]
 8008326:	4b45      	ldr	r3, [pc, #276]	; (800843c <_ZN13Heattreatment26stateMachineProcessControlEv+0x290>)
 8008328:	801a      	strh	r2, [r3, #0]
					}
					if(durationHrS1!= Seq1durationHr)
 800832a:	4b45      	ldr	r3, [pc, #276]	; (8008440 <_ZN13Heattreatment26stateMachineProcessControlEv+0x294>)
 800832c:	781a      	ldrb	r2, [r3, #0]
 800832e:	4b45      	ldr	r3, [pc, #276]	; (8008444 <_ZN13Heattreatment26stateMachineProcessControlEv+0x298>)
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	429a      	cmp	r2, r3
 8008334:	d012      	beq.n	800835c <_ZN13Heattreatment26stateMachineProcessControlEv+0x1b0>
					{
						Seq1durationHr = durationHrS1;
 8008336:	4b42      	ldr	r3, [pc, #264]	; (8008440 <_ZN13Heattreatment26stateMachineProcessControlEv+0x294>)
 8008338:	781a      	ldrb	r2, [r3, #0]
 800833a:	4b42      	ldr	r3, [pc, #264]	; (8008444 <_ZN13Heattreatment26stateMachineProcessControlEv+0x298>)
 800833c:	701a      	strb	r2, [r3, #0]
						seq1_duration_total = (Seq1durationHr*60)+Seq1durationMin;
 800833e:	4b41      	ldr	r3, [pc, #260]	; (8008444 <_ZN13Heattreatment26stateMachineProcessControlEv+0x298>)
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	b29b      	uxth	r3, r3
 8008344:	461a      	mov	r2, r3
 8008346:	0112      	lsls	r2, r2, #4
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	b29a      	uxth	r2, r3
 800834e:	4b3e      	ldr	r3, [pc, #248]	; (8008448 <_ZN13Heattreatment26stateMachineProcessControlEv+0x29c>)
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	b29b      	uxth	r3, r3
 8008354:	4413      	add	r3, r2
 8008356:	b29a      	uxth	r2, r3
 8008358:	4b3c      	ldr	r3, [pc, #240]	; (800844c <_ZN13Heattreatment26stateMachineProcessControlEv+0x2a0>)
 800835a:	801a      	strh	r2, [r3, #0]
					}
					if(durationMinS1!= Seq1durationMin)
 800835c:	4b3c      	ldr	r3, [pc, #240]	; (8008450 <_ZN13Heattreatment26stateMachineProcessControlEv+0x2a4>)
 800835e:	781a      	ldrb	r2, [r3, #0]
 8008360:	4b39      	ldr	r3, [pc, #228]	; (8008448 <_ZN13Heattreatment26stateMachineProcessControlEv+0x29c>)
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	429a      	cmp	r2, r3
 8008366:	d012      	beq.n	800838e <_ZN13Heattreatment26stateMachineProcessControlEv+0x1e2>
					{
						Seq1durationMin = durationMinS1;
 8008368:	4b39      	ldr	r3, [pc, #228]	; (8008450 <_ZN13Heattreatment26stateMachineProcessControlEv+0x2a4>)
 800836a:	781a      	ldrb	r2, [r3, #0]
 800836c:	4b36      	ldr	r3, [pc, #216]	; (8008448 <_ZN13Heattreatment26stateMachineProcessControlEv+0x29c>)
 800836e:	701a      	strb	r2, [r3, #0]
						seq1_duration_total = (Seq1durationHr*60)+Seq1durationMin;
 8008370:	4b34      	ldr	r3, [pc, #208]	; (8008444 <_ZN13Heattreatment26stateMachineProcessControlEv+0x298>)
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	b29b      	uxth	r3, r3
 8008376:	461a      	mov	r2, r3
 8008378:	0112      	lsls	r2, r2, #4
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	b29a      	uxth	r2, r3
 8008380:	4b31      	ldr	r3, [pc, #196]	; (8008448 <_ZN13Heattreatment26stateMachineProcessControlEv+0x29c>)
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	b29b      	uxth	r3, r3
 8008386:	4413      	add	r3, r2
 8008388:	b29a      	uxth	r2, r3
 800838a:	4b30      	ldr	r3, [pc, #192]	; (800844c <_ZN13Heattreatment26stateMachineProcessControlEv+0x2a0>)
 800838c:	801a      	strh	r2, [r3, #0]
					}
					if(durationHrS2!= Seq2durationHr)
 800838e:	4b31      	ldr	r3, [pc, #196]	; (8008454 <_ZN13Heattreatment26stateMachineProcessControlEv+0x2a8>)
 8008390:	781a      	ldrb	r2, [r3, #0]
 8008392:	4b31      	ldr	r3, [pc, #196]	; (8008458 <_ZN13Heattreatment26stateMachineProcessControlEv+0x2ac>)
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	429a      	cmp	r2, r3
 8008398:	d012      	beq.n	80083c0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x214>
					{
						Seq2durationHr = durationHrS2;
 800839a:	4b2e      	ldr	r3, [pc, #184]	; (8008454 <_ZN13Heattreatment26stateMachineProcessControlEv+0x2a8>)
 800839c:	781a      	ldrb	r2, [r3, #0]
 800839e:	4b2e      	ldr	r3, [pc, #184]	; (8008458 <_ZN13Heattreatment26stateMachineProcessControlEv+0x2ac>)
 80083a0:	701a      	strb	r2, [r3, #0]
						seq2_duration_total = (Seq2durationHr*60)+Seq2durationMin;
 80083a2:	4b2d      	ldr	r3, [pc, #180]	; (8008458 <_ZN13Heattreatment26stateMachineProcessControlEv+0x2ac>)
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	461a      	mov	r2, r3
 80083aa:	0112      	lsls	r2, r2, #4
 80083ac:	1ad3      	subs	r3, r2, r3
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	4b2a      	ldr	r3, [pc, #168]	; (800845c <_ZN13Heattreatment26stateMachineProcessControlEv+0x2b0>)
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	4413      	add	r3, r2
 80083ba:	b29a      	uxth	r2, r3
 80083bc:	4b28      	ldr	r3, [pc, #160]	; (8008460 <_ZN13Heattreatment26stateMachineProcessControlEv+0x2b4>)
 80083be:	801a      	strh	r2, [r3, #0]
					}
					if(durationMinS2!= Seq2durationMin)
 80083c0:	4b28      	ldr	r3, [pc, #160]	; (8008464 <_ZN13Heattreatment26stateMachineProcessControlEv+0x2b8>)
 80083c2:	781a      	ldrb	r2, [r3, #0]
 80083c4:	4b25      	ldr	r3, [pc, #148]	; (800845c <_ZN13Heattreatment26stateMachineProcessControlEv+0x2b0>)
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d012      	beq.n	80083f2 <_ZN13Heattreatment26stateMachineProcessControlEv+0x246>
					{
						Seq2durationMin = durationMinS2;
 80083cc:	4b25      	ldr	r3, [pc, #148]	; (8008464 <_ZN13Heattreatment26stateMachineProcessControlEv+0x2b8>)
 80083ce:	781a      	ldrb	r2, [r3, #0]
 80083d0:	4b22      	ldr	r3, [pc, #136]	; (800845c <_ZN13Heattreatment26stateMachineProcessControlEv+0x2b0>)
 80083d2:	701a      	strb	r2, [r3, #0]
						seq2_duration_total = (Seq2durationHr*60)+Seq2durationMin;
 80083d4:	4b20      	ldr	r3, [pc, #128]	; (8008458 <_ZN13Heattreatment26stateMachineProcessControlEv+0x2ac>)
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	b29b      	uxth	r3, r3
 80083da:	461a      	mov	r2, r3
 80083dc:	0112      	lsls	r2, r2, #4
 80083de:	1ad3      	subs	r3, r2, r3
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	4b1d      	ldr	r3, [pc, #116]	; (800845c <_ZN13Heattreatment26stateMachineProcessControlEv+0x2b0>)
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	4413      	add	r3, r2
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	4b1c      	ldr	r3, [pc, #112]	; (8008460 <_ZN13Heattreatment26stateMachineProcessControlEv+0x2b4>)
 80083f0:	801a      	strh	r2, [r3, #0]
					}
					updateSetData		= 1;
 80083f2:	4b1d      	ldr	r3, [pc, #116]	; (8008468 <_ZN13Heattreatment26stateMachineProcessControlEv+0x2bc>)
 80083f4:	2201      	movs	r2, #1
 80083f6:	701a      	strb	r2, [r3, #0]
					status_to_server 	= 20;
 80083f8:	4b08      	ldr	r3, [pc, #32]	; (800841c <_ZN13Heattreatment26stateMachineProcessControlEv+0x270>)
 80083fa:	2214      	movs	r2, #20
 80083fc:	701a      	strb	r2, [r3, #0]
					SEQMONITOR			=103;
 80083fe:	4b04      	ldr	r3, [pc, #16]	; (8008410 <_ZN13Heattreatment26stateMachineProcessControlEv+0x264>)
 8008400:	2267      	movs	r2, #103	; 0x67
 8008402:	701a      	strb	r2, [r3, #0]
				}
				else{
					status_to_server=1;
				}
		break;
 8008404:	e1ce      	b.n	80087a4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x5f8>
					status_to_server=1;
 8008406:	4b05      	ldr	r3, [pc, #20]	; (800841c <_ZN13Heattreatment26stateMachineProcessControlEv+0x270>)
 8008408:	2201      	movs	r2, #1
 800840a:	701a      	strb	r2, [r3, #0]
		break;
 800840c:	e1ca      	b.n	80087a4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x5f8>
 800840e:	bf00      	nop
 8008410:	20000626 	.word	0x20000626
 8008414:	48000800 	.word	0x48000800
 8008418:	20000601 	.word	0x20000601
 800841c:	20000610 	.word	0x20000610
 8008420:	200000f6 	.word	0x200000f6
 8008424:	200000f8 	.word	0x200000f8
 8008428:	20000612 	.word	0x20000612
 800842c:	20000600 	.word	0x20000600
 8008430:	200005f8 	.word	0x200005f8
 8008434:	20000614 	.word	0x20000614
 8008438:	200005fa 	.word	0x200005fa
 800843c:	20000616 	.word	0x20000616
 8008440:	200005fc 	.word	0x200005fc
 8008444:	20000618 	.word	0x20000618
 8008448:	20000619 	.word	0x20000619
 800844c:	2000062a 	.word	0x2000062a
 8008450:	200005fd 	.word	0x200005fd
 8008454:	200005fe 	.word	0x200005fe
 8008458:	2000061a 	.word	0x2000061a
 800845c:	2000061b 	.word	0x2000061b
 8008460:	2000062c 	.word	0x2000062c
 8008464:	200005ff 	.word	0x200005ff
 8008468:	2000060e 	.word	0x2000060e
		case 103:
				if(statusTCP ==20){
 800846c:	4b86      	ldr	r3, [pc, #536]	; (8008688 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4dc>)
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	2b14      	cmp	r3, #20
 8008472:	d106      	bne.n	8008482 <_ZN13Heattreatment26stateMachineProcessControlEv+0x2d6>
					status_to_server=20;
 8008474:	4b85      	ldr	r3, [pc, #532]	; (800868c <_ZN13Heattreatment26stateMachineProcessControlEv+0x4e0>)
 8008476:	2214      	movs	r2, #20
 8008478:	701a      	strb	r2, [r3, #0]
					SEQMONITOR=22;
 800847a:	4b85      	ldr	r3, [pc, #532]	; (8008690 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4e4>)
 800847c:	2216      	movs	r2, #22
 800847e:	701a      	strb	r2, [r3, #0]
				}
				else{
					status_to_server=20;
					SEQMONITOR=103;
				}
		break;
 8008480:	e190      	b.n	80087a4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x5f8>
					status_to_server=20;
 8008482:	4b82      	ldr	r3, [pc, #520]	; (800868c <_ZN13Heattreatment26stateMachineProcessControlEv+0x4e0>)
 8008484:	2214      	movs	r2, #20
 8008486:	701a      	strb	r2, [r3, #0]
					SEQMONITOR=103;
 8008488:	4b81      	ldr	r3, [pc, #516]	; (8008690 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4e4>)
 800848a:	2267      	movs	r2, #103	; 0x67
 800848c:	701a      	strb	r2, [r3, #0]
		break;
 800848e:	e189      	b.n	80087a4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x5f8>
		case 22:
				temperature_reference = Seq1temperature;
 8008490:	4b80      	ldr	r3, [pc, #512]	; (8008694 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4e8>)
 8008492:	881a      	ldrh	r2, [r3, #0]
 8008494:	4b80      	ldr	r3, [pc, #512]	; (8008698 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4ec>)
 8008496:	801a      	strh	r2, [r3, #0]
				m_temeperatureUpperBound = Seq1temperature+3;
 8008498:	4b7e      	ldr	r3, [pc, #504]	; (8008694 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4e8>)
 800849a:	881b      	ldrh	r3, [r3, #0]
 800849c:	3303      	adds	r3, #3
 800849e:	b29a      	uxth	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	80da      	strh	r2, [r3, #6]
				m_temperatureLowerBound  = Seq1temperature-3;
 80084a4:	4b7b      	ldr	r3, [pc, #492]	; (8008694 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4e8>)
 80084a6:	881b      	ldrh	r3, [r3, #0]
 80084a8:	3b03      	subs	r3, #3
 80084aa:	b29a      	uxth	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	811a      	strh	r2, [r3, #8]
				if((act_temperature_c1 >= m_temperatureLowerBound)&&(act_temperature_c1 <= m_temeperatureUpperBound)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	891a      	ldrh	r2, [r3, #8]
 80084b4:	4b79      	ldr	r3, [pc, #484]	; (800869c <_ZN13Heattreatment26stateMachineProcessControlEv+0x4f0>)
 80084b6:	881b      	ldrh	r3, [r3, #0]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d82d      	bhi.n	8008518 <_ZN13Heattreatment26stateMachineProcessControlEv+0x36c>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	88da      	ldrh	r2, [r3, #6]
 80084c0:	4b76      	ldr	r3, [pc, #472]	; (800869c <_ZN13Heattreatment26stateMachineProcessControlEv+0x4f0>)
 80084c2:	881b      	ldrh	r3, [r3, #0]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d327      	bcc.n	8008518 <_ZN13Heattreatment26stateMachineProcessControlEv+0x36c>
				&&(act_temperature_c2 >= m_temperatureLowerBound)&&(act_temperature_c2 <= m_temeperatureUpperBound)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	891a      	ldrh	r2, [r3, #8]
 80084cc:	4b74      	ldr	r3, [pc, #464]	; (80086a0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4f4>)
 80084ce:	881b      	ldrh	r3, [r3, #0]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d821      	bhi.n	8008518 <_ZN13Heattreatment26stateMachineProcessControlEv+0x36c>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	88da      	ldrh	r2, [r3, #6]
 80084d8:	4b71      	ldr	r3, [pc, #452]	; (80086a0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4f4>)
 80084da:	881b      	ldrh	r3, [r3, #0]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d31b      	bcc.n	8008518 <_ZN13Heattreatment26stateMachineProcessControlEv+0x36c>
				&&(act_temperature_c3 >= m_temperatureLowerBound)&&(act_temperature_c3 <= m_temeperatureUpperBound)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	891a      	ldrh	r2, [r3, #8]
 80084e4:	4b6f      	ldr	r3, [pc, #444]	; (80086a4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4f8>)
 80084e6:	881b      	ldrh	r3, [r3, #0]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d815      	bhi.n	8008518 <_ZN13Heattreatment26stateMachineProcessControlEv+0x36c>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	88da      	ldrh	r2, [r3, #6]
 80084f0:	4b6c      	ldr	r3, [pc, #432]	; (80086a4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4f8>)
 80084f2:	881b      	ldrh	r3, [r3, #0]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d30f      	bcc.n	8008518 <_ZN13Heattreatment26stateMachineProcessControlEv+0x36c>
				&&(act_temperature_c4 >= m_temperatureLowerBound)&&(act_temperature_c4 <= m_temeperatureUpperBound))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	891a      	ldrh	r2, [r3, #8]
 80084fc:	4b6a      	ldr	r3, [pc, #424]	; (80086a8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4fc>)
 80084fe:	881b      	ldrh	r3, [r3, #0]
 8008500:	429a      	cmp	r2, r3
 8008502:	d809      	bhi.n	8008518 <_ZN13Heattreatment26stateMachineProcessControlEv+0x36c>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	88da      	ldrh	r2, [r3, #6]
 8008508:	4b67      	ldr	r3, [pc, #412]	; (80086a8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4fc>)
 800850a:	881b      	ldrh	r3, [r3, #0]
 800850c:	429a      	cmp	r2, r3
 800850e:	d303      	bcc.n	8008518 <_ZN13Heattreatment26stateMachineProcessControlEv+0x36c>
				{
					SEQMONITOR=23;
 8008510:	4b5f      	ldr	r3, [pc, #380]	; (8008690 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4e4>)
 8008512:	2217      	movs	r2, #23
 8008514:	701a      	strb	r2, [r3, #0]
 8008516:	e002      	b.n	800851e <_ZN13Heattreatment26stateMachineProcessControlEv+0x372>
				}
				else{
					SEQMONITOR=22;
 8008518:	4b5d      	ldr	r3, [pc, #372]	; (8008690 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4e4>)
 800851a:	2216      	movs	r2, #22
 800851c:	701a      	strb	r2, [r3, #0]
				}
				status_to_server=20;
 800851e:	4b5b      	ldr	r3, [pc, #364]	; (800868c <_ZN13Heattreatment26stateMachineProcessControlEv+0x4e0>)
 8008520:	2214      	movs	r2, #20
 8008522:	701a      	strb	r2, [r3, #0]
		break;
 8008524:	e13e      	b.n	80087a4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x5f8>
		case 23:
			temperature_reference = Seq1temperature;
 8008526:	4b5b      	ldr	r3, [pc, #364]	; (8008694 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4e8>)
 8008528:	881a      	ldrh	r2, [r3, #0]
 800852a:	4b5b      	ldr	r3, [pc, #364]	; (8008698 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4ec>)
 800852c:	801a      	strh	r2, [r3, #0]
			m_temeperatureUpperBound = Seq1temperature+5;
 800852e:	4b59      	ldr	r3, [pc, #356]	; (8008694 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4e8>)
 8008530:	881b      	ldrh	r3, [r3, #0]
 8008532:	3305      	adds	r3, #5
 8008534:	b29a      	uxth	r2, r3
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	80da      	strh	r2, [r3, #6]
			m_temperatureLowerBound  = Seq1temperature-5;
 800853a:	4b56      	ldr	r3, [pc, #344]	; (8008694 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4e8>)
 800853c:	881b      	ldrh	r3, [r3, #0]
 800853e:	3b05      	subs	r3, #5
 8008540:	b29a      	uxth	r2, r3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	811a      	strh	r2, [r3, #8]
			if(!start_process_control_timer)
 8008546:	4b59      	ldr	r3, [pc, #356]	; (80086ac <_ZN13Heattreatment26stateMachineProcessControlEv+0x500>)
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d102      	bne.n	8008554 <_ZN13Heattreatment26stateMachineProcessControlEv+0x3a8>
			{
				start_process_control_timer=1;
 800854e:	4b57      	ldr	r3, [pc, #348]	; (80086ac <_ZN13Heattreatment26stateMachineProcessControlEv+0x500>)
 8008550:	2201      	movs	r2, #1
 8008552:	701a      	strb	r2, [r3, #0]
			}
			if(((act_temperature_c1 >= m_temperatureLowerBound)&&(act_temperature_c1 <=m_temeperatureUpperBound))
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	891a      	ldrh	r2, [r3, #8]
 8008558:	4b50      	ldr	r3, [pc, #320]	; (800869c <_ZN13Heattreatment26stateMachineProcessControlEv+0x4f0>)
 800855a:	881b      	ldrh	r3, [r3, #0]
 800855c:	429a      	cmp	r2, r3
 800855e:	d805      	bhi.n	800856c <_ZN13Heattreatment26stateMachineProcessControlEv+0x3c0>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	88da      	ldrh	r2, [r3, #6]
 8008564:	4b4d      	ldr	r3, [pc, #308]	; (800869c <_ZN13Heattreatment26stateMachineProcessControlEv+0x4f0>)
 8008566:	881b      	ldrh	r3, [r3, #0]
 8008568:	429a      	cmp	r2, r3
 800856a:	d223      	bcs.n	80085b4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x408>
			||((act_temperature_c2 >= m_temperatureLowerBound)&&(act_temperature_c2 <=m_temeperatureUpperBound))
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	891a      	ldrh	r2, [r3, #8]
 8008570:	4b4b      	ldr	r3, [pc, #300]	; (80086a0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4f4>)
 8008572:	881b      	ldrh	r3, [r3, #0]
 8008574:	429a      	cmp	r2, r3
 8008576:	d805      	bhi.n	8008584 <_ZN13Heattreatment26stateMachineProcessControlEv+0x3d8>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	88da      	ldrh	r2, [r3, #6]
 800857c:	4b48      	ldr	r3, [pc, #288]	; (80086a0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4f4>)
 800857e:	881b      	ldrh	r3, [r3, #0]
 8008580:	429a      	cmp	r2, r3
 8008582:	d217      	bcs.n	80085b4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x408>
			||((act_temperature_c3 >= m_temperatureLowerBound)&&(act_temperature_c3 <=m_temeperatureUpperBound))
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	891a      	ldrh	r2, [r3, #8]
 8008588:	4b46      	ldr	r3, [pc, #280]	; (80086a4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4f8>)
 800858a:	881b      	ldrh	r3, [r3, #0]
 800858c:	429a      	cmp	r2, r3
 800858e:	d805      	bhi.n	800859c <_ZN13Heattreatment26stateMachineProcessControlEv+0x3f0>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	88da      	ldrh	r2, [r3, #6]
 8008594:	4b43      	ldr	r3, [pc, #268]	; (80086a4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4f8>)
 8008596:	881b      	ldrh	r3, [r3, #0]
 8008598:	429a      	cmp	r2, r3
 800859a:	d20b      	bcs.n	80085b4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x408>
			||((act_temperature_c4 >= m_temperatureLowerBound)&&(act_temperature_c4 <=m_temeperatureUpperBound)))
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	891a      	ldrh	r2, [r3, #8]
 80085a0:	4b41      	ldr	r3, [pc, #260]	; (80086a8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4fc>)
 80085a2:	881b      	ldrh	r3, [r3, #0]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d809      	bhi.n	80085bc <_ZN13Heattreatment26stateMachineProcessControlEv+0x410>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	88da      	ldrh	r2, [r3, #6]
 80085ac:	4b3e      	ldr	r3, [pc, #248]	; (80086a8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4fc>)
 80085ae:	881b      	ldrh	r3, [r3, #0]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d303      	bcc.n	80085bc <_ZN13Heattreatment26stateMachineProcessControlEv+0x410>
			{
				stop_timer_count = 0;
 80085b4:	4b3e      	ldr	r3, [pc, #248]	; (80086b0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x504>)
 80085b6:	2200      	movs	r2, #0
 80085b8:	701a      	strb	r2, [r3, #0]
 80085ba:	e002      	b.n	80085c2 <_ZN13Heattreatment26stateMachineProcessControlEv+0x416>
			}
			else
			{
				stop_timer_count = 1;
 80085bc:	4b3c      	ldr	r3, [pc, #240]	; (80086b0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x504>)
 80085be:	2201      	movs	r2, #1
 80085c0:	701a      	strb	r2, [r3, #0]
			}
			if(process_complete==1){
 80085c2:	4b3c      	ldr	r3, [pc, #240]	; (80086b4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x508>)
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d10c      	bne.n	80085e4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x438>
				process_complete = 0;
 80085ca:	4b3a      	ldr	r3, [pc, #232]	; (80086b4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x508>)
 80085cc:	2200      	movs	r2, #0
 80085ce:	701a      	strb	r2, [r3, #0]
				start_process_control_timer=0;
 80085d0:	4b36      	ldr	r3, [pc, #216]	; (80086ac <_ZN13Heattreatment26stateMachineProcessControlEv+0x500>)
 80085d2:	2200      	movs	r2, #0
 80085d4:	701a      	strb	r2, [r3, #0]
				SEQMONITOR = 24;
 80085d6:	4b2e      	ldr	r3, [pc, #184]	; (8008690 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4e4>)
 80085d8:	2218      	movs	r2, #24
 80085da:	701a      	strb	r2, [r3, #0]
				NewQuenchingReq=1;
 80085dc:	4b36      	ldr	r3, [pc, #216]	; (80086b8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x50c>)
 80085de:	2201      	movs	r2, #1
 80085e0:	701a      	strb	r2, [r3, #0]
 80085e2:	e002      	b.n	80085ea <_ZN13Heattreatment26stateMachineProcessControlEv+0x43e>

			}
			else{
				SEQMONITOR = 23;
 80085e4:	4b2a      	ldr	r3, [pc, #168]	; (8008690 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4e4>)
 80085e6:	2217      	movs	r2, #23
 80085e8:	701a      	strb	r2, [r3, #0]
			}
			status_to_server=21;
 80085ea:	4b28      	ldr	r3, [pc, #160]	; (800868c <_ZN13Heattreatment26stateMachineProcessControlEv+0x4e0>)
 80085ec:	2215      	movs	r2, #21
 80085ee:	701a      	strb	r2, [r3, #0]
		 break;
 80085f0:	e0d8      	b.n	80087a4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x5f8>
		case 24:
				temperature_reference = Seq2temperature;
 80085f2:	4b32      	ldr	r3, [pc, #200]	; (80086bc <_ZN13Heattreatment26stateMachineProcessControlEv+0x510>)
 80085f4:	881a      	ldrh	r2, [r3, #0]
 80085f6:	4b28      	ldr	r3, [pc, #160]	; (8008698 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4ec>)
 80085f8:	801a      	strh	r2, [r3, #0]
				m_temeperatureUpperBound = Seq2temperature+3;
 80085fa:	4b30      	ldr	r3, [pc, #192]	; (80086bc <_ZN13Heattreatment26stateMachineProcessControlEv+0x510>)
 80085fc:	881b      	ldrh	r3, [r3, #0]
 80085fe:	3303      	adds	r3, #3
 8008600:	b29a      	uxth	r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	80da      	strh	r2, [r3, #6]
				m_temperatureLowerBound  = Seq2temperature-3;
 8008606:	4b2d      	ldr	r3, [pc, #180]	; (80086bc <_ZN13Heattreatment26stateMachineProcessControlEv+0x510>)
 8008608:	881b      	ldrh	r3, [r3, #0]
 800860a:	3b03      	subs	r3, #3
 800860c:	b29a      	uxth	r2, r3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	811a      	strh	r2, [r3, #8]
				if((act_temperature_c1 >= m_temperatureLowerBound)&&(act_temperature_c1 <= m_temeperatureUpperBound)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	891a      	ldrh	r2, [r3, #8]
 8008616:	4b21      	ldr	r3, [pc, #132]	; (800869c <_ZN13Heattreatment26stateMachineProcessControlEv+0x4f0>)
 8008618:	881b      	ldrh	r3, [r3, #0]
 800861a:	429a      	cmp	r2, r3
 800861c:	d82d      	bhi.n	800867a <_ZN13Heattreatment26stateMachineProcessControlEv+0x4ce>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	88da      	ldrh	r2, [r3, #6]
 8008622:	4b1e      	ldr	r3, [pc, #120]	; (800869c <_ZN13Heattreatment26stateMachineProcessControlEv+0x4f0>)
 8008624:	881b      	ldrh	r3, [r3, #0]
 8008626:	429a      	cmp	r2, r3
 8008628:	d327      	bcc.n	800867a <_ZN13Heattreatment26stateMachineProcessControlEv+0x4ce>
				&&(act_temperature_c2 >= m_temperatureLowerBound)&&(act_temperature_c2 <= m_temeperatureUpperBound)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	891a      	ldrh	r2, [r3, #8]
 800862e:	4b1c      	ldr	r3, [pc, #112]	; (80086a0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4f4>)
 8008630:	881b      	ldrh	r3, [r3, #0]
 8008632:	429a      	cmp	r2, r3
 8008634:	d821      	bhi.n	800867a <_ZN13Heattreatment26stateMachineProcessControlEv+0x4ce>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	88da      	ldrh	r2, [r3, #6]
 800863a:	4b19      	ldr	r3, [pc, #100]	; (80086a0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4f4>)
 800863c:	881b      	ldrh	r3, [r3, #0]
 800863e:	429a      	cmp	r2, r3
 8008640:	d31b      	bcc.n	800867a <_ZN13Heattreatment26stateMachineProcessControlEv+0x4ce>
				&&(act_temperature_c3 >= m_temperatureLowerBound)&&(act_temperature_c3 <= m_temeperatureUpperBound)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	891a      	ldrh	r2, [r3, #8]
 8008646:	4b17      	ldr	r3, [pc, #92]	; (80086a4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4f8>)
 8008648:	881b      	ldrh	r3, [r3, #0]
 800864a:	429a      	cmp	r2, r3
 800864c:	d815      	bhi.n	800867a <_ZN13Heattreatment26stateMachineProcessControlEv+0x4ce>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	88da      	ldrh	r2, [r3, #6]
 8008652:	4b14      	ldr	r3, [pc, #80]	; (80086a4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4f8>)
 8008654:	881b      	ldrh	r3, [r3, #0]
 8008656:	429a      	cmp	r2, r3
 8008658:	d30f      	bcc.n	800867a <_ZN13Heattreatment26stateMachineProcessControlEv+0x4ce>
				&&(act_temperature_c4 >= m_temperatureLowerBound)&&(act_temperature_c4 <= m_temeperatureUpperBound))
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	891a      	ldrh	r2, [r3, #8]
 800865e:	4b12      	ldr	r3, [pc, #72]	; (80086a8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4fc>)
 8008660:	881b      	ldrh	r3, [r3, #0]
 8008662:	429a      	cmp	r2, r3
 8008664:	d809      	bhi.n	800867a <_ZN13Heattreatment26stateMachineProcessControlEv+0x4ce>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	88da      	ldrh	r2, [r3, #6]
 800866a:	4b0f      	ldr	r3, [pc, #60]	; (80086a8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4fc>)
 800866c:	881b      	ldrh	r3, [r3, #0]
 800866e:	429a      	cmp	r2, r3
 8008670:	d303      	bcc.n	800867a <_ZN13Heattreatment26stateMachineProcessControlEv+0x4ce>
				{
					SEQMONITOR=25;
 8008672:	4b07      	ldr	r3, [pc, #28]	; (8008690 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4e4>)
 8008674:	2219      	movs	r2, #25
 8008676:	701a      	strb	r2, [r3, #0]
 8008678:	e002      	b.n	8008680 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4d4>
				}
				else{
					SEQMONITOR=24;
 800867a:	4b05      	ldr	r3, [pc, #20]	; (8008690 <_ZN13Heattreatment26stateMachineProcessControlEv+0x4e4>)
 800867c:	2218      	movs	r2, #24
 800867e:	701a      	strb	r2, [r3, #0]
				}
				status_to_server=22;
 8008680:	4b02      	ldr	r3, [pc, #8]	; (800868c <_ZN13Heattreatment26stateMachineProcessControlEv+0x4e0>)
 8008682:	2216      	movs	r2, #22
 8008684:	701a      	strb	r2, [r3, #0]
		break;
 8008686:	e08d      	b.n	80087a4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x5f8>
 8008688:	20000600 	.word	0x20000600
 800868c:	20000610 	.word	0x20000610
 8008690:	20000626 	.word	0x20000626
 8008694:	20000614 	.word	0x20000614
 8008698:	2000061c 	.word	0x2000061c
 800869c:	2000061e 	.word	0x2000061e
 80086a0:	20000620 	.word	0x20000620
 80086a4:	20000622 	.word	0x20000622
 80086a8:	20000624 	.word	0x20000624
 80086ac:	20000627 	.word	0x20000627
 80086b0:	20000628 	.word	0x20000628
 80086b4:	20000629 	.word	0x20000629
 80086b8:	2000060f 	.word	0x2000060f
 80086bc:	20000616 	.word	0x20000616
		case 25:
				temperature_reference = Seq2temperature;
 80086c0:	4b40      	ldr	r3, [pc, #256]	; (80087c4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x618>)
 80086c2:	881a      	ldrh	r2, [r3, #0]
 80086c4:	4b40      	ldr	r3, [pc, #256]	; (80087c8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x61c>)
 80086c6:	801a      	strh	r2, [r3, #0]
				m_temeperatureUpperBound = Seq2temperature+5;
 80086c8:	4b3e      	ldr	r3, [pc, #248]	; (80087c4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x618>)
 80086ca:	881b      	ldrh	r3, [r3, #0]
 80086cc:	3305      	adds	r3, #5
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	80da      	strh	r2, [r3, #6]
				m_temperatureLowerBound  = Seq2temperature-5;
 80086d4:	4b3b      	ldr	r3, [pc, #236]	; (80087c4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x618>)
 80086d6:	881b      	ldrh	r3, [r3, #0]
 80086d8:	3b05      	subs	r3, #5
 80086da:	b29a      	uxth	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	811a      	strh	r2, [r3, #8]
				if(!start_process_control_timer)
 80086e0:	4b3a      	ldr	r3, [pc, #232]	; (80087cc <_ZN13Heattreatment26stateMachineProcessControlEv+0x620>)
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d102      	bne.n	80086ee <_ZN13Heattreatment26stateMachineProcessControlEv+0x542>
				{
					start_process_control_timer=2;
 80086e8:	4b38      	ldr	r3, [pc, #224]	; (80087cc <_ZN13Heattreatment26stateMachineProcessControlEv+0x620>)
 80086ea:	2202      	movs	r2, #2
 80086ec:	701a      	strb	r2, [r3, #0]
				}
				if(((act_temperature_c1 >= m_temperatureLowerBound)&&(act_temperature_c1 <=m_temeperatureUpperBound))
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	891a      	ldrh	r2, [r3, #8]
 80086f2:	4b37      	ldr	r3, [pc, #220]	; (80087d0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x624>)
 80086f4:	881b      	ldrh	r3, [r3, #0]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d805      	bhi.n	8008706 <_ZN13Heattreatment26stateMachineProcessControlEv+0x55a>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	88da      	ldrh	r2, [r3, #6]
 80086fe:	4b34      	ldr	r3, [pc, #208]	; (80087d0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x624>)
 8008700:	881b      	ldrh	r3, [r3, #0]
 8008702:	429a      	cmp	r2, r3
 8008704:	d223      	bcs.n	800874e <_ZN13Heattreatment26stateMachineProcessControlEv+0x5a2>
				||((act_temperature_c2 >= m_temperatureLowerBound)&&(act_temperature_c2 <=m_temeperatureUpperBound))
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	891a      	ldrh	r2, [r3, #8]
 800870a:	4b32      	ldr	r3, [pc, #200]	; (80087d4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x628>)
 800870c:	881b      	ldrh	r3, [r3, #0]
 800870e:	429a      	cmp	r2, r3
 8008710:	d805      	bhi.n	800871e <_ZN13Heattreatment26stateMachineProcessControlEv+0x572>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	88da      	ldrh	r2, [r3, #6]
 8008716:	4b2f      	ldr	r3, [pc, #188]	; (80087d4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x628>)
 8008718:	881b      	ldrh	r3, [r3, #0]
 800871a:	429a      	cmp	r2, r3
 800871c:	d217      	bcs.n	800874e <_ZN13Heattreatment26stateMachineProcessControlEv+0x5a2>
				||((act_temperature_c3 >= m_temperatureLowerBound)&&(act_temperature_c3 <=m_temeperatureUpperBound))
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	891a      	ldrh	r2, [r3, #8]
 8008722:	4b2d      	ldr	r3, [pc, #180]	; (80087d8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x62c>)
 8008724:	881b      	ldrh	r3, [r3, #0]
 8008726:	429a      	cmp	r2, r3
 8008728:	d805      	bhi.n	8008736 <_ZN13Heattreatment26stateMachineProcessControlEv+0x58a>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	88da      	ldrh	r2, [r3, #6]
 800872e:	4b2a      	ldr	r3, [pc, #168]	; (80087d8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x62c>)
 8008730:	881b      	ldrh	r3, [r3, #0]
 8008732:	429a      	cmp	r2, r3
 8008734:	d20b      	bcs.n	800874e <_ZN13Heattreatment26stateMachineProcessControlEv+0x5a2>
				||((act_temperature_c4 >= m_temperatureLowerBound)&&(act_temperature_c4 <=m_temeperatureUpperBound)))
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	891a      	ldrh	r2, [r3, #8]
 800873a:	4b28      	ldr	r3, [pc, #160]	; (80087dc <_ZN13Heattreatment26stateMachineProcessControlEv+0x630>)
 800873c:	881b      	ldrh	r3, [r3, #0]
 800873e:	429a      	cmp	r2, r3
 8008740:	d809      	bhi.n	8008756 <_ZN13Heattreatment26stateMachineProcessControlEv+0x5aa>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	88da      	ldrh	r2, [r3, #6]
 8008746:	4b25      	ldr	r3, [pc, #148]	; (80087dc <_ZN13Heattreatment26stateMachineProcessControlEv+0x630>)
 8008748:	881b      	ldrh	r3, [r3, #0]
 800874a:	429a      	cmp	r2, r3
 800874c:	d303      	bcc.n	8008756 <_ZN13Heattreatment26stateMachineProcessControlEv+0x5aa>
				{
					stop_timer_count = 0;
 800874e:	4b24      	ldr	r3, [pc, #144]	; (80087e0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x634>)
 8008750:	2200      	movs	r2, #0
 8008752:	701a      	strb	r2, [r3, #0]
 8008754:	e002      	b.n	800875c <_ZN13Heattreatment26stateMachineProcessControlEv+0x5b0>
				}
				else
				{
					stop_timer_count = 1;
 8008756:	4b22      	ldr	r3, [pc, #136]	; (80087e0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x634>)
 8008758:	2201      	movs	r2, #1
 800875a:	701a      	strb	r2, [r3, #0]
				}
				if(process_complete==2){
 800875c:	4b21      	ldr	r3, [pc, #132]	; (80087e4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x638>)
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	2b02      	cmp	r3, #2
 8008762:	d109      	bne.n	8008778 <_ZN13Heattreatment26stateMachineProcessControlEv+0x5cc>
					process_complete = 0;
 8008764:	4b1f      	ldr	r3, [pc, #124]	; (80087e4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x638>)
 8008766:	2200      	movs	r2, #0
 8008768:	701a      	strb	r2, [r3, #0]
					start_process_control_timer=0;
 800876a:	4b18      	ldr	r3, [pc, #96]	; (80087cc <_ZN13Heattreatment26stateMachineProcessControlEv+0x620>)
 800876c:	2200      	movs	r2, #0
 800876e:	701a      	strb	r2, [r3, #0]
					SEQMONITOR = 24;
 8008770:	4b1d      	ldr	r3, [pc, #116]	; (80087e8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x63c>)
 8008772:	2218      	movs	r2, #24
 8008774:	701a      	strb	r2, [r3, #0]
 8008776:	e002      	b.n	800877e <_ZN13Heattreatment26stateMachineProcessControlEv+0x5d2>
				}
				else{
					SEQMONITOR = 25;
 8008778:	4b1b      	ldr	r3, [pc, #108]	; (80087e8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x63c>)
 800877a:	2219      	movs	r2, #25
 800877c:	701a      	strb	r2, [r3, #0]
				}
				status_to_server=23;
 800877e:	4b1b      	ldr	r3, [pc, #108]	; (80087ec <_ZN13Heattreatment26stateMachineProcessControlEv+0x640>)
 8008780:	2217      	movs	r2, #23
 8008782:	701a      	strb	r2, [r3, #0]
			 break;
 8008784:	e00e      	b.n	80087a4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x5f8>
		case 26:
			status_to_server=30;
 8008786:	4b19      	ldr	r3, [pc, #100]	; (80087ec <_ZN13Heattreatment26stateMachineProcessControlEv+0x640>)
 8008788:	221e      	movs	r2, #30
 800878a:	701a      	strb	r2, [r3, #0]
			SEQMONITOR   = 20;
 800878c:	4b16      	ldr	r3, [pc, #88]	; (80087e8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x63c>)
 800878e:	2214      	movs	r2, #20
 8008790:	701a      	strb	r2, [r3, #0]
			temperature_reference = 32;
 8008792:	4b0d      	ldr	r3, [pc, #52]	; (80087c8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x61c>)
 8008794:	2220      	movs	r2, #32
 8008796:	801a      	strh	r2, [r3, #0]
		break;
 8008798:	e004      	b.n	80087a4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x5f8>
		default:
			SEQMONITOR   = 10;
 800879a:	4b13      	ldr	r3, [pc, #76]	; (80087e8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x63c>)
 800879c:	220a      	movs	r2, #10
 800879e:	701a      	strb	r2, [r3, #0]
		break;
 80087a0:	e000      	b.n	80087a4 <_ZN13Heattreatment26stateMachineProcessControlEv+0x5f8>
		break;
 80087a2:	bf00      	nop
	}
	if((skipIdTCP==10)&&(SEQMONITOR!=26))
 80087a4:	4b12      	ldr	r3, [pc, #72]	; (80087f0 <_ZN13Heattreatment26stateMachineProcessControlEv+0x644>)
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	2b0a      	cmp	r3, #10
 80087aa:	d106      	bne.n	80087ba <_ZN13Heattreatment26stateMachineProcessControlEv+0x60e>
 80087ac:	4b0e      	ldr	r3, [pc, #56]	; (80087e8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x63c>)
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	2b1a      	cmp	r3, #26
 80087b2:	d002      	beq.n	80087ba <_ZN13Heattreatment26stateMachineProcessControlEv+0x60e>
	{
		SEQMONITOR = 26;
 80087b4:	4b0c      	ldr	r3, [pc, #48]	; (80087e8 <_ZN13Heattreatment26stateMachineProcessControlEv+0x63c>)
 80087b6:	221a      	movs	r2, #26
 80087b8:	701a      	strb	r2, [r3, #0]
	}
}
 80087ba:	bf00      	nop
 80087bc:	3708      	adds	r7, #8
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	20000616 	.word	0x20000616
 80087c8:	2000061c 	.word	0x2000061c
 80087cc:	20000627 	.word	0x20000627
 80087d0:	2000061e 	.word	0x2000061e
 80087d4:	20000620 	.word	0x20000620
 80087d8:	20000622 	.word	0x20000622
 80087dc:	20000624 	.word	0x20000624
 80087e0:	20000628 	.word	0x20000628
 80087e4:	20000629 	.word	0x20000629
 80087e8:	20000626 	.word	0x20000626
 80087ec:	20000610 	.word	0x20000610
 80087f0:	20000601 	.word	0x20000601

080087f4 <_ZN9ModbusrtuC1Ev>:
#include "Modbusrtu.h"
#include "Modbus_types.h"

extern uint16_t temperature_reference;
uint8_t TxSeqComplete;
Modbusrtu::Modbusrtu() {
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	4a0e      	ldr	r2, [pc, #56]	; (8008838 <_ZN9ModbusrtuC1Ev+0x44>)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	601a      	str	r2, [r3, #0]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2201      	movs	r2, #1
 8008806:	769a      	strb	r2, [r3, #26]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	4a0c      	ldr	r2, [pc, #48]	; (800883c <_ZN9ModbusrtuC1Ev+0x48>)
 800880c:	331b      	adds	r3, #27
 800880e:	4611      	mov	r1, r2
 8008810:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008814:	4618      	mov	r0, r3
 8008816:	f006 f8e3 	bl	800e9e0 <memcpy>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a08      	ldr	r2, [pc, #32]	; (8008840 <_ZN9ModbusrtuC1Ev+0x4c>)
 800881e:	f203 131b 	addw	r3, r3, #283	; 0x11b
 8008822:	4611      	mov	r1, r2
 8008824:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008828:	4618      	mov	r0, r3
 800882a:	f006 f8d9 	bl	800e9e0 <memcpy>
	// TODO Auto-generated constructor stub

}
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4618      	mov	r0, r3
 8008832:	3708      	adds	r7, #8
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	0800f754 	.word	0x0800f754
 800883c:	0800f364 	.word	0x0800f364
 8008840:	0800f464 	.word	0x0800f464

08008844 <_ZN9ModbusrtuD1Ev>:

Modbusrtu::~Modbusrtu() {
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	4a04      	ldr	r2, [pc, #16]	; (8008860 <_ZN9ModbusrtuD1Ev+0x1c>)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4618      	mov	r0, r3
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr
 8008860:	0800f754 	.word	0x0800f754

08008864 <_ZN9ModbusrtuD0Ev>:
Modbusrtu::~Modbusrtu() {
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
}
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f7ff ffe9 	bl	8008844 <_ZN9ModbusrtuD1Ev>
 8008872:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f006 f87b 	bl	800e972 <_ZdlPvj>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4618      	mov	r0, r3
 8008880:	3708      	adds	r7, #8
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
	...

08008888 <_ZN9Modbusrtu21ModbusReadTransactionEv>:

void Modbusrtu::ModbusReadTransaction(void)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
	m_settemperature = temperature_reference*10;
 8008890:	4b76      	ldr	r3, [pc, #472]	; (8008a6c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x1e4>)
 8008892:	881b      	ldrh	r3, [r3, #0]
 8008894:	461a      	mov	r2, r3
 8008896:	0092      	lsls	r2, r2, #2
 8008898:	4413      	add	r3, r2
 800889a:	005b      	lsls	r3, r3, #1
 800889c:	b29a      	uxth	r2, r3
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	821a      	strh	r2, [r3, #16]
	switch(Cntid)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	791b      	ldrb	r3, [r3, #4]
 80088a6:	2b03      	cmp	r3, #3
 80088a8:	f200 813c 	bhi.w	8008b24 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x29c>
 80088ac:	a201      	add	r2, pc, #4	; (adr r2, 80088b4 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2c>)
 80088ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b2:	bf00      	nop
 80088b4:	080088c5 	.word	0x080088c5
 80088b8:	08008955 	.word	0x08008955
 80088bc:	080089df 	.word	0x080089df
 80088c0:	08008a71 	.word	0x08008a71
	{
	case 0:
		_u8MBSlave 			= mTemperatureSensorId;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	7e9a      	ldrb	r2, [r3, #26]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	715a      	strb	r2, [r3, #5]
		u8MBFunction 		= 0x03;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2203      	movs	r2, #3
 80088d0:	719a      	strb	r2, [r3, #6]
		_u16ReadAddress 	= 0x00;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	811a      	strh	r2, [r3, #8]
		_u16ReadQty     	= 0x04;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2204      	movs	r2, #4
 80088dc:	819a      	strh	r2, [r3, #12]
		u8ModbusRegister[0] = _u8MBSlave;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	795a      	ldrb	r2, [r3, #5]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	749a      	strb	r2, [r3, #18]
		u8ModbusRegister[1] =  u8MBFunction;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	799a      	ldrb	r2, [r3, #6]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	74da      	strb	r2, [r3, #19]
		u8ModbusRegister[2] = static_cast<uint8_t>((_u16ReadAddress & 0xff00)>>8);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	891b      	ldrh	r3, [r3, #8]
 80088f2:	0a1b      	lsrs	r3, r3, #8
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	b2da      	uxtb	r2, r3
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	751a      	strb	r2, [r3, #20]
		u8ModbusRegister[3] = static_cast<uint8_t>(_u16ReadAddress & 0x00ff);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	891b      	ldrh	r3, [r3, #8]
 8008900:	b2da      	uxtb	r2, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	755a      	strb	r2, [r3, #21]
		u8ModbusRegister[4] = static_cast<uint8_t>((_u16ReadQty & 0xff00)>>8);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	899b      	ldrh	r3, [r3, #12]
 800890a:	0a1b      	lsrs	r3, r3, #8
 800890c:	b29b      	uxth	r3, r3
 800890e:	b2da      	uxtb	r2, r3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	759a      	strb	r2, [r3, #22]
		u8ModbusRegister[5] = static_cast<uint8_t>(_u16ReadQty & 0x00ff);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	899b      	ldrh	r3, [r3, #12]
 8008918:	b2da      	uxtb	r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	75da      	strb	r2, [r3, #23]
		u16CRC 				= ASCChecksum(u8ModbusRegister,6);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	3312      	adds	r3, #18
 8008922:	2206      	movs	r2, #6
 8008924:	4619      	mov	r1, r3
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f922 	bl	8008b70 <_ZN9Modbusrtu11ASCChecksumEPhh>
 800892c:	4603      	mov	r3, r0
 800892e:	461a      	mov	r2, r3
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	81da      	strh	r2, [r3, #14]
		u8ModbusRegister[6] = static_cast<uint8_t>(u16CRC & 0x00ff);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	89db      	ldrh	r3, [r3, #14]
 8008938:	b2da      	uxtb	r2, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	761a      	strb	r2, [r3, #24]
		u8ModbusRegister[7] = static_cast<uint8_t>((u16CRC & 0xff00)>>8);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	89db      	ldrh	r3, [r3, #14]
 8008942:	0a1b      	lsrs	r3, r3, #8
 8008944:	b29b      	uxth	r3, r3
 8008946:	b2da      	uxtb	r2, r3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	765a      	strb	r2, [r3, #25]

		Cntid=1;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	711a      	strb	r2, [r3, #4]
	break;
 8008952:	e0ee      	b.n	8008b32 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2aa>
	case 1:
		_u8MBSlave 			= mTemperatureSensorId;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	7e9a      	ldrb	r2, [r3, #26]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	715a      	strb	r2, [r3, #5]
		u8MBFunction 		= 0x06;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2206      	movs	r2, #6
 8008960:	719a      	strb	r2, [r3, #6]
		_u16WriteAddress 	= 0x00;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	815a      	strh	r2, [r3, #10]
		u8ModbusRegister[0] = _u8MBSlave;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	795a      	ldrb	r2, [r3, #5]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	749a      	strb	r2, [r3, #18]
		u8ModbusRegister[1] =  u8MBFunction;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	799a      	ldrb	r2, [r3, #6]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	74da      	strb	r2, [r3, #19]
		u8ModbusRegister[2] = static_cast<uint8_t>((_u16WriteAddress & 0xff00)>>8);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	895b      	ldrh	r3, [r3, #10]
 800897c:	0a1b      	lsrs	r3, r3, #8
 800897e:	b29b      	uxth	r3, r3
 8008980:	b2da      	uxtb	r2, r3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	751a      	strb	r2, [r3, #20]
		u8ModbusRegister[3] = static_cast<uint8_t>(_u16WriteAddress & 0x00ff);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	895b      	ldrh	r3, [r3, #10]
 800898a:	b2da      	uxtb	r2, r3
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	755a      	strb	r2, [r3, #21]
		u8ModbusRegister[4] = static_cast<uint8_t>((m_settemperature & 0xff00)>>8);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	8a1b      	ldrh	r3, [r3, #16]
 8008994:	0a1b      	lsrs	r3, r3, #8
 8008996:	b29b      	uxth	r3, r3
 8008998:	b2da      	uxtb	r2, r3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	759a      	strb	r2, [r3, #22]
		u8ModbusRegister[5] = static_cast<uint8_t>(m_settemperature & 0x00ff);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	8a1b      	ldrh	r3, [r3, #16]
 80089a2:	b2da      	uxtb	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	75da      	strb	r2, [r3, #23]
		u16CRC 				= ASCChecksum(u8ModbusRegister,6);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	3312      	adds	r3, #18
 80089ac:	2206      	movs	r2, #6
 80089ae:	4619      	mov	r1, r3
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 f8dd 	bl	8008b70 <_ZN9Modbusrtu11ASCChecksumEPhh>
 80089b6:	4603      	mov	r3, r0
 80089b8:	461a      	mov	r2, r3
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	81da      	strh	r2, [r3, #14]
		u8ModbusRegister[6] = static_cast<uint8_t>(u16CRC & 0x00ff);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	89db      	ldrh	r3, [r3, #14]
 80089c2:	b2da      	uxtb	r2, r3
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	761a      	strb	r2, [r3, #24]
		u8ModbusRegister[7] = static_cast<uint8_t>((u16CRC & 0xff00)>>8);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	89db      	ldrh	r3, [r3, #14]
 80089cc:	0a1b      	lsrs	r3, r3, #8
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	b2da      	uxtb	r2, r3
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	765a      	strb	r2, [r3, #25]
		Cntid=2;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2202      	movs	r2, #2
 80089da:	711a      	strb	r2, [r3, #4]
	break;
 80089dc:	e0a9      	b.n	8008b32 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2aa>
	case 2:
			_u8MBSlave 			= mTemperatureSensorId;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	7e9a      	ldrb	r2, [r3, #26]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	715a      	strb	r2, [r3, #5]
			u8MBFunction 		= 0x06;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2206      	movs	r2, #6
 80089ea:	719a      	strb	r2, [r3, #6]
			_u16WriteAddress 	= 0x01;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	815a      	strh	r2, [r3, #10]
			u8ModbusRegister[0] = _u8MBSlave;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	795a      	ldrb	r2, [r3, #5]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	749a      	strb	r2, [r3, #18]
			u8ModbusRegister[1] =  u8MBFunction;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	799a      	ldrb	r2, [r3, #6]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	74da      	strb	r2, [r3, #19]
			u8ModbusRegister[2] = static_cast<uint8_t>((_u16WriteAddress & 0xff00)>>8);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	895b      	ldrh	r3, [r3, #10]
 8008a06:	0a1b      	lsrs	r3, r3, #8
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	b2da      	uxtb	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	751a      	strb	r2, [r3, #20]
			u8ModbusRegister[3] = static_cast<uint8_t>(_u16WriteAddress & 0x00ff);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	895b      	ldrh	r3, [r3, #10]
 8008a14:	b2da      	uxtb	r2, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	755a      	strb	r2, [r3, #21]
			u8ModbusRegister[4] = static_cast<uint8_t>(((m_settemperature+200) & 0xff00)>>8);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	8a1b      	ldrh	r3, [r3, #16]
 8008a1e:	33c8      	adds	r3, #200	; 0xc8
 8008a20:	121b      	asrs	r3, r3, #8
 8008a22:	b2da      	uxtb	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	759a      	strb	r2, [r3, #22]
			u8ModbusRegister[5] = static_cast<uint8_t>((m_settemperature+200) & 0x00ff);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	8a1b      	ldrh	r3, [r3, #16]
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	3b38      	subs	r3, #56	; 0x38
 8008a30:	b2da      	uxtb	r2, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	75da      	strb	r2, [r3, #23]
			u16CRC 				= ASCChecksum(u8ModbusRegister,6);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	3312      	adds	r3, #18
 8008a3a:	2206      	movs	r2, #6
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 f896 	bl	8008b70 <_ZN9Modbusrtu11ASCChecksumEPhh>
 8008a44:	4603      	mov	r3, r0
 8008a46:	461a      	mov	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	81da      	strh	r2, [r3, #14]
			u8ModbusRegister[6] = static_cast<uint8_t>(u16CRC & 0x00ff);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	89db      	ldrh	r3, [r3, #14]
 8008a50:	b2da      	uxtb	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	761a      	strb	r2, [r3, #24]
			u8ModbusRegister[7] = static_cast<uint8_t>((u16CRC & 0xff00)>>8);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	89db      	ldrh	r3, [r3, #14]
 8008a5a:	0a1b      	lsrs	r3, r3, #8
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	b2da      	uxtb	r2, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	765a      	strb	r2, [r3, #25]
			Cntid=3;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2203      	movs	r2, #3
 8008a68:	711a      	strb	r2, [r3, #4]
		break;
 8008a6a:	e062      	b.n	8008b32 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2aa>
 8008a6c:	2000061c 	.word	0x2000061c
	case 3:
			_u8MBSlave 			= mTemperatureSensorId;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	7e9a      	ldrb	r2, [r3, #26]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	715a      	strb	r2, [r3, #5]
			u8MBFunction 		= 0x06;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2206      	movs	r2, #6
 8008a7c:	719a      	strb	r2, [r3, #6]
			_u16WriteAddress 	= 0x02;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2202      	movs	r2, #2
 8008a82:	815a      	strh	r2, [r3, #10]
			u8ModbusRegister[0] = _u8MBSlave;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	795a      	ldrb	r2, [r3, #5]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	749a      	strb	r2, [r3, #18]
			u8ModbusRegister[1] =  u8MBFunction;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	799a      	ldrb	r2, [r3, #6]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	74da      	strb	r2, [r3, #19]
			u8ModbusRegister[2] = static_cast<uint8_t>((_u16WriteAddress & 0xff00)>>8);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	895b      	ldrh	r3, [r3, #10]
 8008a98:	0a1b      	lsrs	r3, r3, #8
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	b2da      	uxtb	r2, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	751a      	strb	r2, [r3, #20]
			u8ModbusRegister[3] = static_cast<uint8_t>(_u16WriteAddress & 0x00ff);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	895b      	ldrh	r3, [r3, #10]
 8008aa6:	b2da      	uxtb	r2, r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	755a      	strb	r2, [r3, #21]
			u8ModbusRegister[4] = static_cast<uint8_t>(((m_settemperature-200) & 0xff00)>>8);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	8a1b      	ldrh	r3, [r3, #16]
 8008ab0:	3bc8      	subs	r3, #200	; 0xc8
 8008ab2:	121b      	asrs	r3, r3, #8
 8008ab4:	b2da      	uxtb	r2, r3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	759a      	strb	r2, [r3, #22]
			u8ModbusRegister[5] = static_cast<uint8_t>((m_settemperature-200) & 0x00ff);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	8a1b      	ldrh	r3, [r3, #16]
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	3338      	adds	r3, #56	; 0x38
 8008ac2:	b2da      	uxtb	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	75da      	strb	r2, [r3, #23]
			u16CRC 				= ASCChecksum(u8ModbusRegister,6);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	3312      	adds	r3, #18
 8008acc:	2206      	movs	r2, #6
 8008ace:	4619      	mov	r1, r3
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 f84d 	bl	8008b70 <_ZN9Modbusrtu11ASCChecksumEPhh>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	461a      	mov	r2, r3
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	81da      	strh	r2, [r3, #14]
			u8ModbusRegister[6] = static_cast<uint8_t>(u16CRC & 0x00ff);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	89db      	ldrh	r3, [r3, #14]
 8008ae2:	b2da      	uxtb	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	761a      	strb	r2, [r3, #24]
			u8ModbusRegister[7] = static_cast<uint8_t>((u16CRC & 0xff00)>>8);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	89db      	ldrh	r3, [r3, #14]
 8008aec:	0a1b      	lsrs	r3, r3, #8
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	b2da      	uxtb	r2, r3
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	765a      	strb	r2, [r3, #25]
			Cntid=0;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	711a      	strb	r2, [r3, #4]
			if(mTemperatureSensorId ==1){mTemperatureSensorId=2;}
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	7e9b      	ldrb	r3, [r3, #26]
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d103      	bne.n	8008b0c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x284>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2202      	movs	r2, #2
 8008b08:	769a      	strb	r2, [r3, #26]
			else if(mTemperatureSensorId ==2){mTemperatureSensorId=3;}
			else{mTemperatureSensorId=1;}
		break;
 8008b0a:	e012      	b.n	8008b32 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2aa>
			else if(mTemperatureSensorId ==2){mTemperatureSensorId=3;}
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	7e9b      	ldrb	r3, [r3, #26]
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d103      	bne.n	8008b1c <_ZN9Modbusrtu21ModbusReadTransactionEv+0x294>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2203      	movs	r2, #3
 8008b18:	769a      	strb	r2, [r3, #26]
		break;
 8008b1a:	e00a      	b.n	8008b32 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2aa>
			else{mTemperatureSensorId=1;}
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	769a      	strb	r2, [r3, #26]
		break;
 8008b22:	e006      	b.n	8008b32 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2aa>
	default:
		Cntid=0;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	711a      	strb	r2, [r3, #4]
		mTemperatureSensorId=1;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	769a      	strb	r2, [r3, #26]
	break;
 8008b30:	bf00      	nop
	}


	//out_read_rxint_set.Noofbytesrx = (_u16ReadQty*2)+5;
	HAL_UART_Transmit_IT(&huart1,u8ModbusRegister,sizeof(u8ModbusRegister));
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	3312      	adds	r3, #18
 8008b36:	2208      	movs	r2, #8
 8008b38:	4619      	mov	r1, r3
 8008b3a:	4803      	ldr	r0, [pc, #12]	; (8008b48 <_ZN9Modbusrtu21ModbusReadTransactionEv+0x2c0>)
 8008b3c:	f004 fbc0 	bl	800d2c0 <HAL_UART_Transmit_IT>

}
 8008b40:	bf00      	nop
 8008b42:	3708      	adds	r7, #8
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	20000310 	.word	0x20000310

08008b4c <HAL_UART_TxCpltCallback>:
//Hardware callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1,u8rxbuf,13);
 8008b54:	220d      	movs	r2, #13
 8008b56:	4904      	ldr	r1, [pc, #16]	; (8008b68 <HAL_UART_TxCpltCallback+0x1c>)
 8008b58:	4804      	ldr	r0, [pc, #16]	; (8008b6c <HAL_UART_TxCpltCallback+0x20>)
 8008b5a:	f004 fc1f 	bl	800d39c <HAL_UART_Receive_IT>
}
 8008b5e:	bf00      	nop
 8008b60:	3708      	adds	r7, #8
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	20000630 	.word	0x20000630
 8008b6c:	20000310 	.word	0x20000310

08008b70 <_ZN9Modbusrtu11ASCChecksumEPhh>:

uint16_t Modbusrtu::ASCChecksum(uint8_t *ASCSrc, uint8_t NoOfBytes)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b087      	sub	sp, #28
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	71fb      	strb	r3, [r7, #7]
	uint8_t i, CheckSumBytes;
	uint8_t CRCRegLow = 0xff;
 8008b7e:	23ff      	movs	r3, #255	; 0xff
 8008b80:	75bb      	strb	r3, [r7, #22]
	uint8_t CRCRegHigh = 0xff;
 8008b82:	23ff      	movs	r3, #255	; 0xff
 8008b84:	757b      	strb	r3, [r7, #21]
	uint8_t CRCIndex;

	CheckSumBytes = NoOfBytes;
 8008b86:	79fb      	ldrb	r3, [r7, #7]
 8008b88:	753b      	strb	r3, [r7, #20]
   	for(i=0;i < CheckSumBytes;i++)
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	75fb      	strb	r3, [r7, #23]
 8008b8e:	7dfa      	ldrb	r2, [r7, #23]
 8008b90:	7d3b      	ldrb	r3, [r7, #20]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d217      	bcs.n	8008bc6 <_ZN9Modbusrtu11ASCChecksumEPhh+0x56>
   	{
	    CRCIndex = CRCRegLow ^ *ASCSrc++; 				//TransmittingData[i];
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	1c5a      	adds	r2, r3, #1
 8008b9a:	60ba      	str	r2, [r7, #8]
 8008b9c:	781a      	ldrb	r2, [r3, #0]
 8008b9e:	7dbb      	ldrb	r3, [r7, #22]
 8008ba0:	4053      	eors	r3, r2
 8008ba2:	74fb      	strb	r3, [r7, #19]
		CRCRegLow = CRCRegHigh ^ CRCArrayHigh[CRCIndex];
 8008ba4:	7cfb      	ldrb	r3, [r7, #19]
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	4413      	add	r3, r2
 8008baa:	7eda      	ldrb	r2, [r3, #27]
 8008bac:	7d7b      	ldrb	r3, [r7, #21]
 8008bae:	4053      	eors	r3, r2
 8008bb0:	75bb      	strb	r3, [r7, #22]
		CRCRegHigh = CRCArrayLow[CRCIndex];
 8008bb2:	7cfb      	ldrb	r3, [r7, #19]
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	4413      	add	r3, r2
 8008bb8:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8008bbc:	757b      	strb	r3, [r7, #21]
   	for(i=0;i < CheckSumBytes;i++)
 8008bbe:	7dfb      	ldrb	r3, [r7, #23]
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	75fb      	strb	r3, [r7, #23]
 8008bc4:	e7e3      	b.n	8008b8e <_ZN9Modbusrtu11ASCChecksumEPhh+0x1e>

	}
	return (CRCRegHigh << 8 | CRCRegLow );
 8008bc6:	7d7b      	ldrb	r3, [r7, #21]
 8008bc8:	021b      	lsls	r3, r3, #8
 8008bca:	b21a      	sxth	r2, r3
 8008bcc:	7dbb      	ldrb	r3, [r7, #22]
 8008bce:	b21b      	sxth	r3, r3
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	b21b      	sxth	r3, r3
 8008bd4:	b29b      	uxth	r3, r3
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	371c      	adds	r7, #28
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr
	...

08008be4 <_ZN14OfflineStorageC1Ev>:
uint16_t ProcessId_Value_K1;
uint16_t seq1_count_inc_K1,seq2_count_inc_K1;



OfflineStorage::OfflineStorage() {
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	4a04      	ldr	r2, [pc, #16]	; (8008c00 <_ZN14OfflineStorageC1Ev+0x1c>)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr
 8008c00:	0800f764 	.word	0x0800f764

08008c04 <_ZN14OfflineStorageD1Ev>:

OfflineStorage::~OfflineStorage() {
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	4a04      	ldr	r2, [pc, #16]	; (8008c20 <_ZN14OfflineStorageD1Ev+0x1c>)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	4618      	mov	r0, r3
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr
 8008c20:	0800f764 	.word	0x0800f764

08008c24 <_ZN14OfflineStorageD0Ev>:
OfflineStorage::~OfflineStorage() {
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
}
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f7ff ffe9 	bl	8008c04 <_ZN14OfflineStorageD1Ev>
 8008c32:	212c      	movs	r1, #44	; 0x2c
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f005 fe9c 	bl	800e972 <_ZdlPvj>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3708      	adds	r7, #8
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <_ZN14OfflineStorage3runEv>:

void OfflineStorage::run()
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
	m_writeSeqMonitor();
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 f80b 	bl	8008c68 <_ZN14OfflineStorage17m_writeSeqMonitorEv>
	m_writeHeattreatmentData();
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f82e 	bl	8008cb4 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv>
	m_quenchCount();
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 f8b5 	bl	8008dc8 <_ZN14OfflineStorage13m_quenchCountEv>

}
 8008c5e:	bf00      	nop
 8008c60:	3708      	adds	r7, #8
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
	...

08008c68 <_ZN14OfflineStorage17m_writeSeqMonitorEv>:

void OfflineStorage::m_writeSeqMonitor(){
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
	if(SEQMONITOR == SEQMONITOR_K1){return;}
 8008c70:	4b0e      	ldr	r3, [pc, #56]	; (8008cac <_ZN14OfflineStorage17m_writeSeqMonitorEv+0x44>)
 8008c72:	781a      	ldrb	r2, [r3, #0]
 8008c74:	4b0e      	ldr	r3, [pc, #56]	; (8008cb0 <_ZN14OfflineStorage17m_writeSeqMonitorEv+0x48>)
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d012      	beq.n	8008ca2 <_ZN14OfflineStorage17m_writeSeqMonitorEv+0x3a>
	SEQMONITOR_K1 = SEQMONITOR;
 8008c7c:	4b0b      	ldr	r3, [pc, #44]	; (8008cac <_ZN14OfflineStorage17m_writeSeqMonitorEv+0x44>)
 8008c7e:	781a      	ldrb	r2, [r3, #0]
 8008c80:	4b0b      	ldr	r3, [pc, #44]	; (8008cb0 <_ZN14OfflineStorage17m_writeSeqMonitorEv+0x48>)
 8008c82:	701a      	strb	r2, [r3, #0]
	m_writeFlashBuf[0] = SEQMONITOR;
 8008c84:	4b09      	ldr	r3, [pc, #36]	; (8008cac <_ZN14OfflineStorage17m_writeSeqMonitorEv+0x44>)
 8008c86:	781a      	ldrb	r2, [r3, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	711a      	strb	r2, [r3, #4]

	W25qxx_EraseSector(0);
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	f7fa fab7 	bl	8003200 <W25qxx_EraseSector>
	W25qxx_WriteSector(m_writeFlashBuf,0,0,1);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	1d18      	adds	r0, r3, #4
 8008c96:	2301      	movs	r3, #1
 8008c98:	2200      	movs	r2, #0
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	f7fa fba2 	bl	80033e4 <W25qxx_WriteSector>
 8008ca0:	e000      	b.n	8008ca4 <_ZN14OfflineStorage17m_writeSeqMonitorEv+0x3c>
	if(SEQMONITOR == SEQMONITOR_K1){return;}
 8008ca2:	bf00      	nop
}
 8008ca4:	3708      	adds	r7, #8
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	20000626 	.word	0x20000626
 8008cb0:	20000730 	.word	0x20000730

08008cb4 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv>:

void OfflineStorage::m_writeHeattreatmentData(){
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
	if((ProcessId_Value != ProcessId_Value_K1)||(updateSetData==1))
 8008cbc:	4b39      	ldr	r3, [pc, #228]	; (8008da4 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0xf0>)
 8008cbe:	881a      	ldrh	r2, [r3, #0]
 8008cc0:	4b39      	ldr	r3, [pc, #228]	; (8008da8 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0xf4>)
 8008cc2:	881b      	ldrh	r3, [r3, #0]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d103      	bne.n	8008cd0 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x1c>
 8008cc8:	4b38      	ldr	r3, [pc, #224]	; (8008dac <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0xf8>)
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d165      	bne.n	8008d9c <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0xe8>
	{
		m_writeFlashBuf[0] = (uint8_t)(ProcessId_Value && 0xff);
 8008cd0:	4b34      	ldr	r3, [pc, #208]	; (8008da4 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0xf0>)
 8008cd2:	881b      	ldrh	r3, [r3, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	bf14      	ite	ne
 8008cd8:	2301      	movne	r3, #1
 8008cda:	2300      	moveq	r3, #0
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	461a      	mov	r2, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	711a      	strb	r2, [r3, #4]
		m_writeFlashBuf[1] = (uint8_t)(ProcessId_Value>>8) && 0xff;
 8008ce4:	4b2f      	ldr	r3, [pc, #188]	; (8008da4 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0xf0>)
 8008ce6:	881b      	ldrh	r3, [r3, #0]
 8008ce8:	0a1b      	lsrs	r3, r3, #8
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	bf14      	ite	ne
 8008cf2:	2301      	movne	r3, #1
 8008cf4:	2300      	moveq	r3, #0
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	715a      	strb	r2, [r3, #5]
		ProcessId_Value_K1=ProcessId_Value;
 8008cfe:	4b29      	ldr	r3, [pc, #164]	; (8008da4 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0xf0>)
 8008d00:	881a      	ldrh	r2, [r3, #0]
 8008d02:	4b29      	ldr	r3, [pc, #164]	; (8008da8 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0xf4>)
 8008d04:	801a      	strh	r2, [r3, #0]

		m_writeFlashBuf[2] = (uint8_t)(Seq1temperature && 0xff);
 8008d06:	4b2a      	ldr	r3, [pc, #168]	; (8008db0 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0xfc>)
 8008d08:	881b      	ldrh	r3, [r3, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	bf14      	ite	ne
 8008d0e:	2301      	movne	r3, #1
 8008d10:	2300      	moveq	r3, #0
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	461a      	mov	r2, r3
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	719a      	strb	r2, [r3, #6]
		m_writeFlashBuf[3] = (uint8_t)(Seq1temperature>>8) && 0xff;
 8008d1a:	4b25      	ldr	r3, [pc, #148]	; (8008db0 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0xfc>)
 8008d1c:	881b      	ldrh	r3, [r3, #0]
 8008d1e:	0a1b      	lsrs	r3, r3, #8
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	bf14      	ite	ne
 8008d28:	2301      	movne	r3, #1
 8008d2a:	2300      	moveq	r3, #0
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	461a      	mov	r2, r3
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	71da      	strb	r2, [r3, #7]
		m_writeFlashBuf[4] = (uint8_t)(Seq2temperature && 0xff);
 8008d34:	4b1f      	ldr	r3, [pc, #124]	; (8008db4 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x100>)
 8008d36:	881b      	ldrh	r3, [r3, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	bf14      	ite	ne
 8008d3c:	2301      	movne	r3, #1
 8008d3e:	2300      	moveq	r3, #0
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	461a      	mov	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	721a      	strb	r2, [r3, #8]
		m_writeFlashBuf[5] = (uint8_t)(Seq2temperature>>8) && 0xff;
 8008d48:	4b1a      	ldr	r3, [pc, #104]	; (8008db4 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x100>)
 8008d4a:	881b      	ldrh	r3, [r3, #0]
 8008d4c:	0a1b      	lsrs	r3, r3, #8
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	bf14      	ite	ne
 8008d56:	2301      	movne	r3, #1
 8008d58:	2300      	moveq	r3, #0
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	725a      	strb	r2, [r3, #9]
		m_writeFlashBuf[6] = (uint8_t)(Seq1durationHr);
 8008d62:	4b15      	ldr	r3, [pc, #84]	; (8008db8 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x104>)
 8008d64:	781a      	ldrb	r2, [r3, #0]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	729a      	strb	r2, [r3, #10]
		m_writeFlashBuf[7] = (uint8_t)(Seq1durationMin);
 8008d6a:	4b14      	ldr	r3, [pc, #80]	; (8008dbc <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x108>)
 8008d6c:	781a      	ldrb	r2, [r3, #0]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	72da      	strb	r2, [r3, #11]
		m_writeFlashBuf[8] = (uint8_t)(Seq2durationHr);
 8008d72:	4b13      	ldr	r3, [pc, #76]	; (8008dc0 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x10c>)
 8008d74:	781a      	ldrb	r2, [r3, #0]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	731a      	strb	r2, [r3, #12]
		m_writeFlashBuf[9] = (uint8_t)(Seq2durationMin);
 8008d7a:	4b12      	ldr	r3, [pc, #72]	; (8008dc4 <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0x110>)
 8008d7c:	781a      	ldrb	r2, [r3, #0]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	735a      	strb	r2, [r3, #13]

		updateSetData	= 0;
 8008d82:	4b0a      	ldr	r3, [pc, #40]	; (8008dac <_ZN14OfflineStorage24m_writeHeattreatmentDataEv+0xf8>)
 8008d84:	2200      	movs	r2, #0
 8008d86:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(1);
 8008d88:	2001      	movs	r0, #1
 8008d8a:	f7fa fa39 	bl	8003200 <W25qxx_EraseSector>
		W25qxx_WriteSector(m_writeFlashBuf,1,0,10);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	1d18      	adds	r0, r3, #4
 8008d92:	230a      	movs	r3, #10
 8008d94:	2200      	movs	r2, #0
 8008d96:	2101      	movs	r1, #1
 8008d98:	f7fa fb24 	bl	80033e4 <W25qxx_WriteSector>

	}
}
 8008d9c:	bf00      	nop
 8008d9e:	3708      	adds	r7, #8
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	20000612 	.word	0x20000612
 8008da8:	20000732 	.word	0x20000732
 8008dac:	2000060e 	.word	0x2000060e
 8008db0:	20000614 	.word	0x20000614
 8008db4:	20000616 	.word	0x20000616
 8008db8:	20000618 	.word	0x20000618
 8008dbc:	20000619 	.word	0x20000619
 8008dc0:	2000061a 	.word	0x2000061a
 8008dc4:	2000061b 	.word	0x2000061b

08008dc8 <_ZN14OfflineStorage13m_quenchCountEv>:
		W25qxx_EraseSector(2);
		W25qxx_WriteSector(m_writeFlashBuf,2,0,4);
	}
}

void OfflineStorage::m_quenchCount(){
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
	if(Write_memory_Once==0){return;}
 8008dd0:	4b16      	ldr	r3, [pc, #88]	; (8008e2c <_ZN14OfflineStorage13m_quenchCountEv+0x64>)
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d024      	beq.n	8008e22 <_ZN14OfflineStorage13m_quenchCountEv+0x5a>
		Write_memory_Once=0;
 8008dd8:	4b14      	ldr	r3, [pc, #80]	; (8008e2c <_ZN14OfflineStorage13m_quenchCountEv+0x64>)
 8008dda:	2200      	movs	r2, #0
 8008ddc:	701a      	strb	r2, [r3, #0]
		m_writeFlashBuf[0] = (uint8_t)(Quenching_Seconds_Cont && 0xff);
 8008dde:	4b14      	ldr	r3, [pc, #80]	; (8008e30 <_ZN14OfflineStorage13m_quenchCountEv+0x68>)
 8008de0:	881b      	ldrh	r3, [r3, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	bf14      	ite	ne
 8008de6:	2301      	movne	r3, #1
 8008de8:	2300      	moveq	r3, #0
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	461a      	mov	r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	711a      	strb	r2, [r3, #4]
		m_writeFlashBuf[1] = (uint8_t)(Quenching_Seconds_Cont>>8) && 0xff;
 8008df2:	4b0f      	ldr	r3, [pc, #60]	; (8008e30 <_ZN14OfflineStorage13m_quenchCountEv+0x68>)
 8008df4:	881b      	ldrh	r3, [r3, #0]
 8008df6:	0a1b      	lsrs	r3, r3, #8
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	bf14      	ite	ne
 8008e00:	2301      	movne	r3, #1
 8008e02:	2300      	moveq	r3, #0
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	461a      	mov	r2, r3
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	715a      	strb	r2, [r3, #5]
		W25qxx_EraseSector(3);
 8008e0c:	2003      	movs	r0, #3
 8008e0e:	f7fa f9f7 	bl	8003200 <W25qxx_EraseSector>
		W25qxx_WriteSector(m_writeFlashBuf,3,0,2);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	1d18      	adds	r0, r3, #4
 8008e16:	2302      	movs	r3, #2
 8008e18:	2200      	movs	r2, #0
 8008e1a:	2103      	movs	r1, #3
 8008e1c:	f7fa fae2 	bl	80033e4 <W25qxx_WriteSector>
 8008e20:	e000      	b.n	8008e24 <_ZN14OfflineStorage13m_quenchCountEv+0x5c>
	if(Write_memory_Once==0){return;}
 8008e22:	bf00      	nop
}
 8008e24:	3708      	adds	r7, #8
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	200000f4 	.word	0x200000f4
 8008e30:	20000106 	.word	0x20000106

08008e34 <_ZN14OfflineStorage16m_readSeqMonitorEv>:
	seq1_count_inc_K1 = seq1_count_inc;
	seq2_count_inc_K1 = seq2_count_inc;
	SEQMONITOR_K1 = SEQMONITOR;
}

void OfflineStorage::m_readSeqMonitor(){
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
	W25qxx_ReadSector(m_readFlashBuf,0,0,1);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f103 0018 	add.w	r0, r3, #24
 8008e42:	2301      	movs	r3, #1
 8008e44:	2200      	movs	r2, #0
 8008e46:	2100      	movs	r1, #0
 8008e48:	f7fa fbac 	bl	80035a4 <W25qxx_ReadSector>
	SEQMONITOR = m_readFlashBuf[0];
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	7e1a      	ldrb	r2, [r3, #24]
 8008e50:	4b04      	ldr	r3, [pc, #16]	; (8008e64 <_ZN14OfflineStorage16m_readSeqMonitorEv+0x30>)
 8008e52:	701a      	strb	r2, [r3, #0]
	SEQMONITOR_K1 = SEQMONITOR;
 8008e54:	4b03      	ldr	r3, [pc, #12]	; (8008e64 <_ZN14OfflineStorage16m_readSeqMonitorEv+0x30>)
 8008e56:	781a      	ldrb	r2, [r3, #0]
 8008e58:	4b03      	ldr	r3, [pc, #12]	; (8008e68 <_ZN14OfflineStorage16m_readSeqMonitorEv+0x34>)
 8008e5a:	701a      	strb	r2, [r3, #0]
}
 8008e5c:	bf00      	nop
 8008e5e:	3708      	adds	r7, #8
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	20000626 	.word	0x20000626
 8008e68:	20000730 	.word	0x20000730

08008e6c <_ZN14OfflineStorage23m_readHeattreatmentDataEv>:

void OfflineStorage::m_readHeattreatmentData(){
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
	W25qxx_ReadSector(m_readFlashBuf,1,0,10);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f103 0018 	add.w	r0, r3, #24
 8008e7a:	230a      	movs	r3, #10
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	2101      	movs	r1, #1
 8008e80:	f7fa fb90 	bl	80035a4 <W25qxx_ReadSector>
	ProcessId_Value = 2;//(m_readFlashBuf[1]<<8 | m_readFlashBuf[0]);
 8008e84:	4b1a      	ldr	r3, [pc, #104]	; (8008ef0 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x84>)
 8008e86:	2202      	movs	r2, #2
 8008e88:	801a      	strh	r2, [r3, #0]
	Seq1temperature = (m_readFlashBuf[3]<<8 | m_readFlashBuf[2]);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	7edb      	ldrb	r3, [r3, #27]
 8008e8e:	021b      	lsls	r3, r3, #8
 8008e90:	b21a      	sxth	r2, r3
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	7e9b      	ldrb	r3, [r3, #26]
 8008e96:	b21b      	sxth	r3, r3
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	b21b      	sxth	r3, r3
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	4b15      	ldr	r3, [pc, #84]	; (8008ef4 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x88>)
 8008ea0:	801a      	strh	r2, [r3, #0]
	Seq2temperature = (m_readFlashBuf[5]<<8 | m_readFlashBuf[4]);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	7f5b      	ldrb	r3, [r3, #29]
 8008ea6:	021b      	lsls	r3, r3, #8
 8008ea8:	b21a      	sxth	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	7f1b      	ldrb	r3, [r3, #28]
 8008eae:	b21b      	sxth	r3, r3
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	b21b      	sxth	r3, r3
 8008eb4:	b29a      	uxth	r2, r3
 8008eb6:	4b10      	ldr	r3, [pc, #64]	; (8008ef8 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x8c>)
 8008eb8:	801a      	strh	r2, [r3, #0]
	Seq1durationHr = m_readFlashBuf[6];
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	7f9a      	ldrb	r2, [r3, #30]
 8008ebe:	4b0f      	ldr	r3, [pc, #60]	; (8008efc <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x90>)
 8008ec0:	701a      	strb	r2, [r3, #0]
	Seq1durationMin = m_readFlashBuf[7];
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	7fda      	ldrb	r2, [r3, #31]
 8008ec6:	4b0e      	ldr	r3, [pc, #56]	; (8008f00 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x94>)
 8008ec8:	701a      	strb	r2, [r3, #0]
	Seq2durationHr = m_readFlashBuf[8];
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f893 2020 	ldrb.w	r2, [r3, #32]
 8008ed0:	4b0c      	ldr	r3, [pc, #48]	; (8008f04 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x98>)
 8008ed2:	701a      	strb	r2, [r3, #0]
	Seq2durationMin = m_readFlashBuf[9];
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8008eda:	4b0b      	ldr	r3, [pc, #44]	; (8008f08 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x9c>)
 8008edc:	701a      	strb	r2, [r3, #0]

	ProcessId_Value_K1 = ProcessId_Value;
 8008ede:	4b04      	ldr	r3, [pc, #16]	; (8008ef0 <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0x84>)
 8008ee0:	881a      	ldrh	r2, [r3, #0]
 8008ee2:	4b0a      	ldr	r3, [pc, #40]	; (8008f0c <_ZN14OfflineStorage23m_readHeattreatmentDataEv+0xa0>)
 8008ee4:	801a      	strh	r2, [r3, #0]
}
 8008ee6:	bf00      	nop
 8008ee8:	3708      	adds	r7, #8
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	20000612 	.word	0x20000612
 8008ef4:	20000614 	.word	0x20000614
 8008ef8:	20000616 	.word	0x20000616
 8008efc:	20000618 	.word	0x20000618
 8008f00:	20000619 	.word	0x20000619
 8008f04:	2000061a 	.word	0x2000061a
 8008f08:	2000061b 	.word	0x2000061b
 8008f0c:	20000732 	.word	0x20000732

08008f10 <_ZN14OfflineStorage17m_readquenchcountEv>:

void OfflineStorage::m_readquenchcount(){
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
	W25qxx_ReadSector(m_readFlashBuf,3,0,2);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f103 0018 	add.w	r0, r3, #24
 8008f1e:	2302      	movs	r3, #2
 8008f20:	2200      	movs	r2, #0
 8008f22:	2103      	movs	r1, #3
 8008f24:	f7fa fb3e 	bl	80035a4 <W25qxx_ReadSector>
	Quenching_Seconds_Cont =(m_readFlashBuf[1]<<8 | m_readFlashBuf[0]);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	7e5b      	ldrb	r3, [r3, #25]
 8008f2c:	021b      	lsls	r3, r3, #8
 8008f2e:	b21a      	sxth	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	7e1b      	ldrb	r3, [r3, #24]
 8008f34:	b21b      	sxth	r3, r3
 8008f36:	4313      	orrs	r3, r2
 8008f38:	b21b      	sxth	r3, r3
 8008f3a:	b29a      	uxth	r2, r3
 8008f3c:	4b02      	ldr	r3, [pc, #8]	; (8008f48 <_ZN14OfflineStorage17m_readquenchcountEv+0x38>)
 8008f3e:	801a      	strh	r2, [r3, #0]
}
 8008f40:	bf00      	nop
 8008f42:	3708      	adds	r7, #8
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	20000106 	.word	0x20000106

08008f4c <_ZN14OfflineStorage19ReadOfflinedataInitEv>:

void OfflineStorage::ReadOfflinedataInit()
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
	m_readSeqMonitor();
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f7ff ff6d 	bl	8008e34 <_ZN14OfflineStorage16m_readSeqMonitorEv>
	m_readHeattreatmentData();
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f7ff ff86 	bl	8008e6c <_ZN14OfflineStorage23m_readHeattreatmentDataEv>
	m_readquenchcount();
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f7ff ffd5 	bl	8008f10 <_ZN14OfflineStorage17m_readquenchcountEv>
}
 8008f66:	bf00      	nop
 8008f68:	3708      	adds	r7, #8
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
	...

08008f70 <_ZN7ESP8266C1Ev>:
extern UART_HandleTypeDef hlpuart1;
extern uint8_t ProductionSet_uintFormat[200];
uint8_t ProductionSet_uintFormat_MEM[850]={0};
uint16_t lenOfURl;

ESP8266::ESP8266() {
 8008f70:	b5b0      	push	{r4, r5, r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	4ac9      	ldr	r2, [pc, #804]	; (80092a0 <_ZN7ESP8266C1Ev+0x330>)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	601a      	str	r2, [r3, #0]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	49c8      	ldr	r1, [pc, #800]	; (80092a4 <_ZN7ESP8266C1Ev+0x334>)
 8008f82:	f103 020e 	add.w	r2, r3, #14
 8008f86:	460b      	mov	r3, r1
 8008f88:	cb03      	ldmia	r3!, {r0, r1}
 8008f8a:	6010      	str	r0, [r2, #0]
 8008f8c:	6051      	str	r1, [r2, #4]
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	7213      	strb	r3, [r2, #8]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	4ac4      	ldr	r2, [pc, #784]	; (80092a8 <_ZN7ESP8266C1Ev+0x338>)
 8008f96:	3317      	adds	r3, #23
 8008f98:	6810      	ldr	r0, [r2, #0]
 8008f9a:	6018      	str	r0, [r3, #0]
 8008f9c:	8891      	ldrh	r1, [r2, #4]
 8008f9e:	7992      	ldrb	r2, [r2, #6]
 8008fa0:	8099      	strh	r1, [r3, #4]
 8008fa2:	719a      	strb	r2, [r3, #6]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	49c1      	ldr	r1, [pc, #772]	; (80092ac <_ZN7ESP8266C1Ev+0x33c>)
 8008fa8:	f103 021e 	add.w	r2, r3, #30
 8008fac:	6808      	ldr	r0, [r1, #0]
 8008fae:	6010      	str	r0, [r2, #0]
 8008fb0:	7909      	ldrb	r1, [r1, #4]
 8008fb2:	7111      	strb	r1, [r2, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8008fba:	687d      	ldr	r5, [r7, #4]
 8008fbc:	4bbc      	ldr	r3, [pc, #752]	; (80092b0 <_ZN7ESP8266C1Ev+0x340>)
 8008fbe:	f105 0424 	add.w	r4, r5, #36	; 0x24
 8008fc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008fc4:	c407      	stmia	r4!, {r0, r1, r2}
 8008fc6:	8023      	strh	r3, [r4, #0]
 8008fc8:	2300      	movs	r3, #0
 8008fca:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	3333      	adds	r3, #51	; 0x33
 8008fd2:	222d      	movs	r2, #45	; 0x2d
 8008fd4:	2100      	movs	r1, #0
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f005 fd10 	bl	800e9fc <memset>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2241      	movs	r2, #65	; 0x41
 8008fe0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2254      	movs	r2, #84	; 0x54
 8008fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	222b      	movs	r2, #43	; 0x2b
 8008ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2243      	movs	r2, #67	; 0x43
 8008ff8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2257      	movs	r2, #87	; 0x57
 8009000:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	224a      	movs	r2, #74	; 0x4a
 8009008:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2241      	movs	r2, #65	; 0x41
 8009010:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2250      	movs	r2, #80	; 0x50
 8009018:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	223d      	movs	r2, #61	; 0x3d
 8009020:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2222      	movs	r2, #34	; 0x22
 8009028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2241      	movs	r2, #65	; 0x41
 8009030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2243      	movs	r2, #67	; 0x43
 8009038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2243      	movs	r2, #67	; 0x43
 8009040:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2245      	movs	r2, #69	; 0x45
 8009048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2245      	movs	r2, #69	; 0x45
 8009050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2244      	movs	r2, #68	; 0x44
 8009058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	224f      	movs	r2, #79	; 0x4f
 8009060:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	225f      	movs	r2, #95	; 0x5f
 8009068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2245      	movs	r2, #69	; 0x45
 8009070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2244      	movs	r2, #68	; 0x44
 8009078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2249      	movs	r2, #73	; 0x49
 8009080:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	224d      	movs	r2, #77	; 0x4d
 8009088:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2241      	movs	r2, #65	; 0x41
 8009090:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2258      	movs	r2, #88	; 0x58
 8009098:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2222      	movs	r2, #34	; 0x22
 80090a0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	222c      	movs	r2, #44	; 0x2c
 80090a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2222      	movs	r2, #34	; 0x22
 80090b0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2241      	movs	r2, #65	; 0x41
 80090b8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2243      	movs	r2, #67	; 0x43
 80090c0:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2243      	movs	r2, #67	; 0x43
 80090c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2245      	movs	r2, #69	; 0x45
 80090d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2245      	movs	r2, #69	; 0x45
 80090d8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2244      	movs	r2, #68	; 0x44
 80090e0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	224f      	movs	r2, #79	; 0x4f
 80090e8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2240      	movs	r2, #64	; 0x40
 80090f0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2231      	movs	r2, #49	; 0x31
 80090f8:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2232      	movs	r2, #50	; 0x32
 8009100:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2233      	movs	r2, #51	; 0x33
 8009108:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2222      	movs	r2, #34	; 0x22
 8009110:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	220d      	movs	r2, #13
 8009118:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	220a      	movs	r2, #10
 8009120:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4a63      	ldr	r2, [pc, #396]	; (80092b4 <_ZN7ESP8266C1Ev+0x344>)
 8009128:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800912c:	ca07      	ldmia	r2, {r0, r1, r2}
 800912e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009132:	2200      	movs	r2, #0
 8009134:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8009138:	687d      	ldr	r5, [r7, #4]
 800913a:	4b5f      	ldr	r3, [pc, #380]	; (80092b8 <_ZN7ESP8266C1Ev+0x348>)
 800913c:	f105 046d 	add.w	r4, r5, #109	; 0x6d
 8009140:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009142:	6020      	str	r0, [r4, #0]
 8009144:	6061      	str	r1, [r4, #4]
 8009146:	60a2      	str	r2, [r4, #8]
 8009148:	881b      	ldrh	r3, [r3, #0]
 800914a:	81a3      	strh	r3, [r4, #12]
 800914c:	2300      	movs	r3, #0
 800914e:	f885 307b 	strb.w	r3, [r5, #123]	; 0x7b
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	337c      	adds	r3, #124	; 0x7c
 8009156:	2232      	movs	r2, #50	; 0x32
 8009158:	2100      	movs	r1, #0
 800915a:	4618      	mov	r0, r3
 800915c:	f005 fc4e 	bl	800e9fc <memset>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2241      	movs	r2, #65	; 0x41
 8009164:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2254      	movs	r2, #84	; 0x54
 800916c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	222b      	movs	r2, #43	; 0x2b
 8009174:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2243      	movs	r2, #67	; 0x43
 800917c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2249      	movs	r2, #73	; 0x49
 8009184:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2250      	movs	r2, #80	; 0x50
 800918c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2253      	movs	r2, #83	; 0x53
 8009194:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2254      	movs	r2, #84	; 0x54
 800919c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2241      	movs	r2, #65	; 0x41
 80091a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2252      	movs	r2, #82	; 0x52
 80091ac:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2254      	movs	r2, #84	; 0x54
 80091b4:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	223d      	movs	r2, #61	; 0x3d
 80091bc:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2231      	movs	r2, #49	; 0x31
 80091c4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	222c      	movs	r2, #44	; 0x2c
 80091cc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2222      	movs	r2, #34	; 0x22
 80091d4:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2254      	movs	r2, #84	; 0x54
 80091dc:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2243      	movs	r2, #67	; 0x43
 80091e4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2250      	movs	r2, #80	; 0x50
 80091ec:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2222      	movs	r2, #34	; 0x22
 80091f4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	222c      	movs	r2, #44	; 0x2c
 80091fc:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2222      	movs	r2, #34	; 0x22
 8009204:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2275      	movs	r2, #117	; 0x75
 800920c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2273      	movs	r2, #115	; 0x73
 8009214:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	226d      	movs	r2, #109	; 0x6d
 800921c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2232      	movs	r2, #50	; 0x32
 8009224:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	222d      	movs	r2, #45	; 0x2d
 800922c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2268      	movs	r2, #104	; 0x68
 8009234:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2274      	movs	r2, #116	; 0x74
 800923c:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	222e      	movs	r2, #46	; 0x2e
 8009244:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2261      	movs	r2, #97	; 0x61
 800924c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2263      	movs	r2, #99	; 0x63
 8009254:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2263      	movs	r2, #99	; 0x63
 800925c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2265      	movs	r2, #101	; 0x65
 8009264:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2265      	movs	r2, #101	; 0x65
 800926c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2264      	movs	r2, #100	; 0x64
 8009274:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	226f      	movs	r2, #111	; 0x6f
 800927c:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	222e      	movs	r2, #46	; 0x2e
 8009284:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2269      	movs	r2, #105	; 0x69
 800928c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	226e      	movs	r2, #110	; 0x6e
 8009294:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2222      	movs	r2, #34	; 0x22
 800929c:	e00e      	b.n	80092bc <_ZN7ESP8266C1Ev+0x34c>
 800929e:	bf00      	nop
 80092a0:	0800f774 	.word	0x0800f774
 80092a4:	0800f564 	.word	0x0800f564
 80092a8:	0800f570 	.word	0x0800f570
 80092ac:	0800f578 	.word	0x0800f578
 80092b0:	0800f580 	.word	0x0800f580
 80092b4:	0800f590 	.word	0x0800f590
 80092b8:	0800f5a0 	.word	0x0800f5a0
 80092bc:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	222c      	movs	r2, #44	; 0x2c
 80092c4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2239      	movs	r2, #57	; 0x39
 80092cc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2230      	movs	r2, #48	; 0x30
 80092d4:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2231      	movs	r2, #49	; 0x31
 80092dc:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2232      	movs	r2, #50	; 0x32
 80092e4:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	220d      	movs	r2, #13
 80092ec:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	220a      	movs	r2, #10
 80092f4:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	33c2      	adds	r3, #194	; 0xc2
 80092fc:	2200      	movs	r2, #0
 80092fe:	601a      	str	r2, [r3, #0]
 8009300:	605a      	str	r2, [r3, #4]
 8009302:	609a      	str	r2, [r3, #8]
 8009304:	60da      	str	r2, [r3, #12]
 8009306:	611a      	str	r2, [r3, #16]
 8009308:	687d      	ldr	r5, [r7, #4]
 800930a:	4b08      	ldr	r3, [pc, #32]	; (800932c <_ZN7ESP8266C1Ev+0x3bc>)
 800930c:	f205 248e 	addw	r4, r5, #654	; 0x28e
 8009310:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009312:	6020      	str	r0, [r4, #0]
 8009314:	6061      	str	r1, [r4, #4]
 8009316:	60a2      	str	r2, [r4, #8]
 8009318:	881b      	ldrh	r3, [r3, #0]
 800931a:	81a3      	strh	r3, [r4, #12]
 800931c:	2300      	movs	r3, #0
 800931e:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
	// TODO Auto-generated constructor stub

}
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	4618      	mov	r0, r3
 8009326:	3708      	adds	r7, #8
 8009328:	46bd      	mov	sp, r7
 800932a:	bdb0      	pop	{r4, r5, r7, pc}
 800932c:	0800f5b0 	.word	0x0800f5b0

08009330 <_ZN7ESP8266D1Ev>:

ESP8266::~ESP8266() {
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	4a04      	ldr	r2, [pc, #16]	; (800934c <_ZN7ESP8266D1Ev+0x1c>)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	4618      	mov	r0, r3
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr
 800934c:	0800f774 	.word	0x0800f774

08009350 <_ZN7ESP8266D0Ev>:
ESP8266::~ESP8266() {
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
}
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f7ff ffe9 	bl	8009330 <_ZN7ESP8266D1Ev>
 800935e:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f005 fb05 	bl	800e972 <_ZdlPvj>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4618      	mov	r0, r3
 800936c:	3708      	adds	r7, #8
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}

08009372 <_ZN7ESP82663runEv>:


void ESP8266::run()
{
 8009372:	b580      	push	{r7, lr}
 8009374:	b082      	sub	sp, #8
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
	Send_WifiCmd();
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f804 	bl	8009388 <_ZN7ESP826612Send_WifiCmdEv>

}
 8009380:	bf00      	nop
 8009382:	3708      	adds	r7, #8
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <_ZN7ESP826612Send_WifiCmdEv>:

void ESP8266::Send_WifiCmd()
{
 8009388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800938a:	b09d      	sub	sp, #116	; 0x74
 800938c:	af12      	add	r7, sp, #72	; 0x48
 800938e:	6278      	str	r0, [r7, #36]	; 0x24
	switch(wifi_command)
 8009390:	4bc0      	ldr	r3, [pc, #768]	; (8009694 <_ZN7ESP826612Send_WifiCmdEv+0x30c>)
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	3b05      	subs	r3, #5
 8009396:	2b73      	cmp	r3, #115	; 0x73
 8009398:	f200 83b5 	bhi.w	8009b06 <_ZN7ESP826612Send_WifiCmdEv+0x77e>
 800939c:	a201      	add	r2, pc, #4	; (adr r2, 80093a4 <_ZN7ESP826612Send_WifiCmdEv+0x1c>)
 800939e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a2:	bf00      	nop
 80093a4:	08009575 	.word	0x08009575
 80093a8:	08009b07 	.word	0x08009b07
 80093ac:	08009b07 	.word	0x08009b07
 80093b0:	08009b07 	.word	0x08009b07
 80093b4:	08009b07 	.word	0x08009b07
 80093b8:	08009599 	.word	0x08009599
 80093bc:	080095c3 	.word	0x080095c3
 80093c0:	080095f1 	.word	0x080095f1
 80093c4:	08009615 	.word	0x08009615
 80093c8:	08009643 	.word	0x08009643
 80093cc:	0800966d 	.word	0x0800966d
 80093d0:	08009b07 	.word	0x08009b07
 80093d4:	08009b07 	.word	0x08009b07
 80093d8:	08009b07 	.word	0x08009b07
 80093dc:	08009b07 	.word	0x08009b07
 80093e0:	080096b1 	.word	0x080096b1
 80093e4:	080096ed 	.word	0x080096ed
 80093e8:	08009b07 	.word	0x08009b07
 80093ec:	08009b07 	.word	0x08009b07
 80093f0:	08009b07 	.word	0x08009b07
 80093f4:	08009b07 	.word	0x08009b07
 80093f8:	08009b07 	.word	0x08009b07
 80093fc:	08009b07 	.word	0x08009b07
 8009400:	08009b07 	.word	0x08009b07
 8009404:	08009b07 	.word	0x08009b07
 8009408:	08009731 	.word	0x08009731
 800940c:	08009b07 	.word	0x08009b07
 8009410:	08009b07 	.word	0x08009b07
 8009414:	08009b07 	.word	0x08009b07
 8009418:	08009b07 	.word	0x08009b07
 800941c:	08009b07 	.word	0x08009b07
 8009420:	08009b07 	.word	0x08009b07
 8009424:	08009b07 	.word	0x08009b07
 8009428:	08009b07 	.word	0x08009b07
 800942c:	08009b07 	.word	0x08009b07
 8009430:	08009b07 	.word	0x08009b07
 8009434:	08009761 	.word	0x08009761
 8009438:	08009b07 	.word	0x08009b07
 800943c:	08009b07 	.word	0x08009b07
 8009440:	08009b07 	.word	0x08009b07
 8009444:	08009b07 	.word	0x08009b07
 8009448:	08009b07 	.word	0x08009b07
 800944c:	08009b07 	.word	0x08009b07
 8009450:	08009b07 	.word	0x08009b07
 8009454:	0800978f 	.word	0x0800978f
 8009458:	080097bd 	.word	0x080097bd
 800945c:	080097e7 	.word	0x080097e7
 8009460:	08009b07 	.word	0x08009b07
 8009464:	08009b07 	.word	0x08009b07
 8009468:	08009b07 	.word	0x08009b07
 800946c:	08009b07 	.word	0x08009b07
 8009470:	08009b07 	.word	0x08009b07
 8009474:	08009b07 	.word	0x08009b07
 8009478:	08009b07 	.word	0x08009b07
 800947c:	08009b07 	.word	0x08009b07
 8009480:	08009b07 	.word	0x08009b07
 8009484:	08009b07 	.word	0x08009b07
 8009488:	08009b07 	.word	0x08009b07
 800948c:	08009b07 	.word	0x08009b07
 8009490:	08009b07 	.word	0x08009b07
 8009494:	08009b07 	.word	0x08009b07
 8009498:	08009b07 	.word	0x08009b07
 800949c:	08009b07 	.word	0x08009b07
 80094a0:	08009b07 	.word	0x08009b07
 80094a4:	08009b07 	.word	0x08009b07
 80094a8:	08009815 	.word	0x08009815
 80094ac:	0800983f 	.word	0x0800983f
 80094b0:	08009b07 	.word	0x08009b07
 80094b4:	08009b07 	.word	0x08009b07
 80094b8:	08009b07 	.word	0x08009b07
 80094bc:	08009b07 	.word	0x08009b07
 80094c0:	08009b07 	.word	0x08009b07
 80094c4:	08009b07 	.word	0x08009b07
 80094c8:	08009b07 	.word	0x08009b07
 80094cc:	08009b07 	.word	0x08009b07
 80094d0:	0800986d 	.word	0x0800986d
 80094d4:	08009897 	.word	0x08009897
 80094d8:	08009b07 	.word	0x08009b07
 80094dc:	08009b07 	.word	0x08009b07
 80094e0:	08009b07 	.word	0x08009b07
 80094e4:	08009b07 	.word	0x08009b07
 80094e8:	08009b07 	.word	0x08009b07
 80094ec:	08009b07 	.word	0x08009b07
 80094f0:	08009b07 	.word	0x08009b07
 80094f4:	08009b07 	.word	0x08009b07
 80094f8:	080098c5 	.word	0x080098c5
 80094fc:	08009949 	.word	0x08009949
 8009500:	08009b07 	.word	0x08009b07
 8009504:	08009b07 	.word	0x08009b07
 8009508:	08009b07 	.word	0x08009b07
 800950c:	08009b07 	.word	0x08009b07
 8009510:	08009b07 	.word	0x08009b07
 8009514:	08009b07 	.word	0x08009b07
 8009518:	08009b07 	.word	0x08009b07
 800951c:	08009b07 	.word	0x08009b07
 8009520:	08009977 	.word	0x08009977
 8009524:	08009a63 	.word	0x08009a63
 8009528:	08009a8f 	.word	0x08009a8f
 800952c:	08009abb 	.word	0x08009abb
 8009530:	08009b07 	.word	0x08009b07
 8009534:	08009b07 	.word	0x08009b07
 8009538:	08009b07 	.word	0x08009b07
 800953c:	08009b07 	.word	0x08009b07
 8009540:	08009b07 	.word	0x08009b07
 8009544:	08009b07 	.word	0x08009b07
 8009548:	08009ae7 	.word	0x08009ae7
 800954c:	08009b07 	.word	0x08009b07
 8009550:	08009b07 	.word	0x08009b07
 8009554:	08009b07 	.word	0x08009b07
 8009558:	08009b07 	.word	0x08009b07
 800955c:	08009b07 	.word	0x08009b07
 8009560:	08009b07 	.word	0x08009b07
 8009564:	08009b07 	.word	0x08009b07
 8009568:	08009b07 	.word	0x08009b07
 800956c:	08009b07 	.word	0x08009b07
 8009570:	08009b0f 	.word	0x08009b0f
	{
	case 5: //step --1 Reset COntroller PIN
		HAL_GPIO_WritePin(GPIOB, WIFIRST_Pin, GPIO_PIN_SET);
 8009574:	2201      	movs	r2, #1
 8009576:	2104      	movs	r1, #4
 8009578:	4847      	ldr	r0, [pc, #284]	; (8009698 <_ZN7ESP826612Send_WifiCmdEv+0x310>)
 800957a:	f000 ff89 	bl	800a490 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800957e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009582:	f000 fc3f 	bl	8009e04 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, WIFIRST_Pin, GPIO_PIN_RESET);
 8009586:	2200      	movs	r2, #0
 8009588:	2104      	movs	r1, #4
 800958a:	4843      	ldr	r0, [pc, #268]	; (8009698 <_ZN7ESP826612Send_WifiCmdEv+0x310>)
 800958c:	f000 ff80 	bl	800a490 <HAL_GPIO_WritePin>
		wifi_command=13;
 8009590:	4b40      	ldr	r3, [pc, #256]	; (8009694 <_ZN7ESP826612Send_WifiCmdEv+0x30c>)
 8009592:	220d      	movs	r2, #13
 8009594:	701a      	strb	r2, [r3, #0]

	break;
 8009596:	e2d5      	b.n	8009b44 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	case 10://WI-Fi Reset
	NoOfdata_byte=7;
 8009598:	4b40      	ldr	r3, [pc, #256]	; (800969c <_ZN7ESP826612Send_WifiCmdEv+0x314>)
 800959a:	2207      	movs	r2, #7
 800959c:	801a      	strh	r2, [r3, #0]
	wifi_command=13;
 800959e:	4b3d      	ldr	r3, [pc, #244]	; (8009694 <_ZN7ESP826612Send_WifiCmdEv+0x30c>)
 80095a0:	220d      	movs	r2, #13
 80095a2:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 80095a4:	4b3e      	ldr	r3, [pc, #248]	; (80096a0 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 80095a6:	2200      	movs	r2, #0
 80095a8:	701a      	strb	r2, [r3, #0]
	bufferptr=0;
 80095aa:	4b3e      	ldr	r3, [pc, #248]	; (80096a4 <_ZN7ESP826612Send_WifiCmdEv+0x31c>)
 80095ac:	2200      	movs	r2, #0
 80095ae:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDAtRst,NoOfdata_byte);
 80095b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b2:	330e      	adds	r3, #14
 80095b4:	4a39      	ldr	r2, [pc, #228]	; (800969c <_ZN7ESP826612Send_WifiCmdEv+0x314>)
 80095b6:	8812      	ldrh	r2, [r2, #0]
 80095b8:	4619      	mov	r1, r3
 80095ba:	483b      	ldr	r0, [pc, #236]	; (80096a8 <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 80095bc:	f003 fe80 	bl	800d2c0 <HAL_UART_Transmit_IT>
	break;
 80095c0:	e2c0      	b.n	8009b44 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	case 11:
	if(++Timerdelay >12)
 80095c2:	4b37      	ldr	r3, [pc, #220]	; (80096a0 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	3301      	adds	r3, #1
 80095c8:	b2da      	uxtb	r2, r3
 80095ca:	4b35      	ldr	r3, [pc, #212]	; (80096a0 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 80095cc:	701a      	strb	r2, [r3, #0]
 80095ce:	4b34      	ldr	r3, [pc, #208]	; (80096a0 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	2b0c      	cmp	r3, #12
 80095d4:	bf8c      	ite	hi
 80095d6:	2301      	movhi	r3, #1
 80095d8:	2300      	movls	r3, #0
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	2b00      	cmp	r3, #0
 80095de:	f000 8298 	beq.w	8009b12 <_ZN7ESP826612Send_WifiCmdEv+0x78a>
	{
		Timerdelay=0;
 80095e2:	4b2f      	ldr	r3, [pc, #188]	; (80096a0 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 80095e4:	2200      	movs	r2, #0
 80095e6:	701a      	strb	r2, [r3, #0]
		wifi_command=14;
 80095e8:	4b2a      	ldr	r3, [pc, #168]	; (8009694 <_ZN7ESP826612Send_WifiCmdEv+0x30c>)
 80095ea:	220e      	movs	r2, #14
 80095ec:	701a      	strb	r2, [r3, #0]
	}
	break;
 80095ee:	e290      	b.n	8009b12 <_ZN7ESP826612Send_WifiCmdEv+0x78a>
	case 12:
	NoOfdata_byte=6;
 80095f0:	4b2a      	ldr	r3, [pc, #168]	; (800969c <_ZN7ESP826612Send_WifiCmdEv+0x314>)
 80095f2:	2206      	movs	r2, #6
 80095f4:	801a      	strh	r2, [r3, #0]
	wifi_command=13;
 80095f6:	4b27      	ldr	r3, [pc, #156]	; (8009694 <_ZN7ESP826612Send_WifiCmdEv+0x30c>)
 80095f8:	220d      	movs	r2, #13
 80095fa:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 80095fc:	4b28      	ldr	r3, [pc, #160]	; (80096a0 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 80095fe:	2200      	movs	r2, #0
 8009600:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDAtEch0,NoOfdata_byte);
 8009602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009604:	3317      	adds	r3, #23
 8009606:	4a25      	ldr	r2, [pc, #148]	; (800969c <_ZN7ESP826612Send_WifiCmdEv+0x314>)
 8009608:	8812      	ldrh	r2, [r2, #0]
 800960a:	4619      	mov	r1, r3
 800960c:	4826      	ldr	r0, [pc, #152]	; (80096a8 <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 800960e:	f003 fe57 	bl	800d2c0 <HAL_UART_Transmit_IT>
	break;
 8009612:	e297      	b.n	8009b44 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	case 13:
	if(++Timerdelay >15)
 8009614:	4b22      	ldr	r3, [pc, #136]	; (80096a0 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	3301      	adds	r3, #1
 800961a:	b2da      	uxtb	r2, r3
 800961c:	4b20      	ldr	r3, [pc, #128]	; (80096a0 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 800961e:	701a      	strb	r2, [r3, #0]
 8009620:	4b1f      	ldr	r3, [pc, #124]	; (80096a0 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	2b0f      	cmp	r3, #15
 8009626:	bf8c      	ite	hi
 8009628:	2301      	movhi	r3, #1
 800962a:	2300      	movls	r3, #0
 800962c:	b2db      	uxtb	r3, r3
 800962e:	2b00      	cmp	r3, #0
 8009630:	f000 8271 	beq.w	8009b16 <_ZN7ESP826612Send_WifiCmdEv+0x78e>
	{
		Timerdelay=0;
 8009634:	4b1a      	ldr	r3, [pc, #104]	; (80096a0 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 8009636:	2200      	movs	r2, #0
 8009638:	701a      	strb	r2, [r3, #0]
		wifi_command=20;
 800963a:	4b16      	ldr	r3, [pc, #88]	; (8009694 <_ZN7ESP826612Send_WifiCmdEv+0x30c>)
 800963c:	2214      	movs	r2, #20
 800963e:	701a      	strb	r2, [r3, #0]
	}
	break;
 8009640:	e269      	b.n	8009b16 <_ZN7ESP826612Send_WifiCmdEv+0x78e>
	case 14:
	NoOfdata_byte=4;
 8009642:	4b16      	ldr	r3, [pc, #88]	; (800969c <_ZN7ESP826612Send_WifiCmdEv+0x314>)
 8009644:	2204      	movs	r2, #4
 8009646:	801a      	strh	r2, [r3, #0]
	Rxseqdecoder=8;
 8009648:	4b18      	ldr	r3, [pc, #96]	; (80096ac <_ZN7ESP826612Send_WifiCmdEv+0x324>)
 800964a:	2208      	movs	r2, #8
 800964c:	701a      	strb	r2, [r3, #0]
	wifi_command=20;//default wait 30sec
 800964e:	4b11      	ldr	r3, [pc, #68]	; (8009694 <_ZN7ESP826612Send_WifiCmdEv+0x30c>)
 8009650:	2214      	movs	r2, #20
 8009652:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 8009654:	4b12      	ldr	r3, [pc, #72]	; (80096a0 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 8009656:	2200      	movs	r2, #0
 8009658:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDATok,NoOfdata_byte);
 800965a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965c:	331e      	adds	r3, #30
 800965e:	4a0f      	ldr	r2, [pc, #60]	; (800969c <_ZN7ESP826612Send_WifiCmdEv+0x314>)
 8009660:	8812      	ldrh	r2, [r2, #0]
 8009662:	4619      	mov	r1, r3
 8009664:	4810      	ldr	r0, [pc, #64]	; (80096a8 <_ZN7ESP826612Send_WifiCmdEv+0x320>)
 8009666:	f003 fe2b 	bl	800d2c0 <HAL_UART_Transmit_IT>
	break;
 800966a:	e26b      	b.n	8009b44 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	case 15:
	if(++Timerdelay >2)
 800966c:	4b0c      	ldr	r3, [pc, #48]	; (80096a0 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	3301      	adds	r3, #1
 8009672:	b2da      	uxtb	r2, r3
 8009674:	4b0a      	ldr	r3, [pc, #40]	; (80096a0 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 8009676:	701a      	strb	r2, [r3, #0]
 8009678:	4b09      	ldr	r3, [pc, #36]	; (80096a0 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	2b02      	cmp	r3, #2
 800967e:	bf8c      	ite	hi
 8009680:	2301      	movhi	r3, #1
 8009682:	2300      	movls	r3, #0
 8009684:	b2db      	uxtb	r3, r3
 8009686:	2b00      	cmp	r3, #0
 8009688:	f000 8247 	beq.w	8009b1a <_ZN7ESP826612Send_WifiCmdEv+0x792>
	{
		Timerdelay=0;
 800968c:	4b04      	ldr	r3, [pc, #16]	; (80096a0 <_ZN7ESP826612Send_WifiCmdEv+0x318>)
 800968e:	2200      	movs	r2, #0
 8009690:	701a      	strb	r2, [r3, #0]
	}
	break;
 8009692:	e242      	b.n	8009b1a <_ZN7ESP826612Send_WifiCmdEv+0x792>
 8009694:	20000734 	.word	0x20000734
 8009698:	48000400 	.word	0x48000400
 800969c:	20000836 	.word	0x20000836
 80096a0:	20000838 	.word	0x20000838
 80096a4:	20000832 	.word	0x20000832
 80096a8:	2000028c 	.word	0x2000028c
 80096ac:	20000833 	.word	0x20000833
	case 20:   //CWMODE		//hardrest sequce//1.0 for wifi reset
	NoOfdata_byte=13;
 80096b0:	4b9b      	ldr	r3, [pc, #620]	; (8009920 <_ZN7ESP826612Send_WifiCmdEv+0x598>)
 80096b2:	220d      	movs	r2, #13
 80096b4:	801a      	strh	r2, [r3, #0]
	Rxseqdecoder=1;	  //add retry
 80096b6:	4b9b      	ldr	r3, [pc, #620]	; (8009924 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 80096b8:	2201      	movs	r2, #1
 80096ba:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 80096bc:	4b9a      	ldr	r3, [pc, #616]	; (8009928 <_ZN7ESP826612Send_WifiCmdEv+0x5a0>)
 80096be:	2200      	movs	r2, #0
 80096c0:	701a      	strb	r2, [r3, #0]
	bufferptr=0;
 80096c2:	4b9a      	ldr	r3, [pc, #616]	; (800992c <_ZN7ESP826612Send_WifiCmdEv+0x5a4>)
 80096c4:	2200      	movs	r2, #0
 80096c6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDATCWMODE,NoOfdata_byte);
 80096c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ca:	3324      	adds	r3, #36	; 0x24
 80096cc:	4a94      	ldr	r2, [pc, #592]	; (8009920 <_ZN7ESP826612Send_WifiCmdEv+0x598>)
 80096ce:	8812      	ldrh	r2, [r2, #0]
 80096d0:	4619      	mov	r1, r3
 80096d2:	4897      	ldr	r0, [pc, #604]	; (8009930 <_ZN7ESP826612Send_WifiCmdEv+0x5a8>)
 80096d4:	f003 fdf4 	bl	800d2c0 <HAL_UART_Transmit_IT>
	Check_CWMODE_For_Hang = Check_CWMODE_For_Hang+1;
 80096d8:	4b96      	ldr	r3, [pc, #600]	; (8009934 <_ZN7ESP826612Send_WifiCmdEv+0x5ac>)
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	3301      	adds	r3, #1
 80096de:	b2da      	uxtb	r2, r3
 80096e0:	4b94      	ldr	r3, [pc, #592]	; (8009934 <_ZN7ESP826612Send_WifiCmdEv+0x5ac>)
 80096e2:	701a      	strb	r2, [r3, #0]
	wifi_command=21;
 80096e4:	4b94      	ldr	r3, [pc, #592]	; (8009938 <_ZN7ESP826612Send_WifiCmdEv+0x5b0>)
 80096e6:	2215      	movs	r2, #21
 80096e8:	701a      	strb	r2, [r3, #0]

	break;
 80096ea:	e22b      	b.n	8009b44 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	case 21:	//waiting for Ok  && if above 30 seconds resend command
	if(++Timerdelay >10)
 80096ec:	4b8e      	ldr	r3, [pc, #568]	; (8009928 <_ZN7ESP826612Send_WifiCmdEv+0x5a0>)
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	3301      	adds	r3, #1
 80096f2:	b2da      	uxtb	r2, r3
 80096f4:	4b8c      	ldr	r3, [pc, #560]	; (8009928 <_ZN7ESP826612Send_WifiCmdEv+0x5a0>)
 80096f6:	701a      	strb	r2, [r3, #0]
 80096f8:	4b8b      	ldr	r3, [pc, #556]	; (8009928 <_ZN7ESP826612Send_WifiCmdEv+0x5a0>)
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	2b0a      	cmp	r3, #10
 80096fe:	bf8c      	ite	hi
 8009700:	2301      	movhi	r3, #1
 8009702:	2300      	movls	r3, #0
 8009704:	b2db      	uxtb	r3, r3
 8009706:	2b00      	cmp	r3, #0
 8009708:	f000 8209 	beq.w	8009b1e <_ZN7ESP826612Send_WifiCmdEv+0x796>
	{
		Timerdelay=0;
 800970c:	4b86      	ldr	r3, [pc, #536]	; (8009928 <_ZN7ESP826612Send_WifiCmdEv+0x5a0>)
 800970e:	2200      	movs	r2, #0
 8009710:	701a      	strb	r2, [r3, #0]
		if(5 ==  Check_CWMODE_For_Hang)
 8009712:	4b88      	ldr	r3, [pc, #544]	; (8009934 <_ZN7ESP826612Send_WifiCmdEv+0x5ac>)
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	2b05      	cmp	r3, #5
 8009718:	d106      	bne.n	8009728 <_ZN7ESP826612Send_WifiCmdEv+0x3a0>
		{
			wifi_command=5;	 //Hardware reset
 800971a:	4b87      	ldr	r3, [pc, #540]	; (8009938 <_ZN7ESP826612Send_WifiCmdEv+0x5b0>)
 800971c:	2205      	movs	r2, #5
 800971e:	701a      	strb	r2, [r3, #0]
			Check_CWMODE_For_Hang = 0;
 8009720:	4b84      	ldr	r3, [pc, #528]	; (8009934 <_ZN7ESP826612Send_WifiCmdEv+0x5ac>)
 8009722:	2200      	movs	r2, #0
 8009724:	701a      	strb	r2, [r3, #0]
		else
		{
			wifi_command=10;
		}
	}
	break;
 8009726:	e1fa      	b.n	8009b1e <_ZN7ESP826612Send_WifiCmdEv+0x796>
			wifi_command=10;
 8009728:	4b83      	ldr	r3, [pc, #524]	; (8009938 <_ZN7ESP826612Send_WifiCmdEv+0x5b0>)
 800972a:	220a      	movs	r2, #10
 800972c:	701a      	strb	r2, [r3, #0]
	break;
 800972e:	e1f6      	b.n	8009b1e <_ZN7ESP826612Send_WifiCmdEv+0x796>
	case 30:   //CWJAP	   //userid-9digit,psw 8digit  //userid-5digit,psw 8digit
	NoOfdata_byte=41;//32;
 8009730:	4b7b      	ldr	r3, [pc, #492]	; (8009920 <_ZN7ESP826612Send_WifiCmdEv+0x598>)
 8009732:	2229      	movs	r2, #41	; 0x29
 8009734:	801a      	strh	r2, [r3, #0]
	Rxseqdecoder=2;
 8009736:	4b7b      	ldr	r3, [pc, #492]	; (8009924 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 8009738:	2202      	movs	r2, #2
 800973a:	701a      	strb	r2, [r3, #0]
	wifi_command=41;
 800973c:	4b7e      	ldr	r3, [pc, #504]	; (8009938 <_ZN7ESP826612Send_WifiCmdEv+0x5b0>)
 800973e:	2229      	movs	r2, #41	; 0x29
 8009740:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 8009742:	4b79      	ldr	r3, [pc, #484]	; (8009928 <_ZN7ESP826612Send_WifiCmdEv+0x5a0>)
 8009744:	2200      	movs	r2, #0
 8009746:	701a      	strb	r2, [r3, #0]
	bufferptr=0;
 8009748:	4b78      	ldr	r3, [pc, #480]	; (800992c <_ZN7ESP826612Send_WifiCmdEv+0x5a4>)
 800974a:	2200      	movs	r2, #0
 800974c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDATCWJAPUsernamePsw,NoOfdata_byte);
 800974e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009750:	3333      	adds	r3, #51	; 0x33
 8009752:	4a73      	ldr	r2, [pc, #460]	; (8009920 <_ZN7ESP826612Send_WifiCmdEv+0x598>)
 8009754:	8812      	ldrh	r2, [r2, #0]
 8009756:	4619      	mov	r1, r3
 8009758:	4875      	ldr	r0, [pc, #468]	; (8009930 <_ZN7ESP826612Send_WifiCmdEv+0x5a8>)
 800975a:	f003 fdb1 	bl	800d2c0 <HAL_UART_Transmit_IT>
	break;		   //add retry
 800975e:	e1f1      	b.n	8009b44 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	case 41:	   //resend if o replay
	if(++Timerdelay >15)
 8009760:	4b71      	ldr	r3, [pc, #452]	; (8009928 <_ZN7ESP826612Send_WifiCmdEv+0x5a0>)
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	3301      	adds	r3, #1
 8009766:	b2da      	uxtb	r2, r3
 8009768:	4b6f      	ldr	r3, [pc, #444]	; (8009928 <_ZN7ESP826612Send_WifiCmdEv+0x5a0>)
 800976a:	701a      	strb	r2, [r3, #0]
 800976c:	4b6e      	ldr	r3, [pc, #440]	; (8009928 <_ZN7ESP826612Send_WifiCmdEv+0x5a0>)
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	2b0f      	cmp	r3, #15
 8009772:	bf8c      	ite	hi
 8009774:	2301      	movhi	r3, #1
 8009776:	2300      	movls	r3, #0
 8009778:	b2db      	uxtb	r3, r3
 800977a:	2b00      	cmp	r3, #0
 800977c:	f000 81d1 	beq.w	8009b22 <_ZN7ESP826612Send_WifiCmdEv+0x79a>
	{
		Timerdelay=0;
 8009780:	4b69      	ldr	r3, [pc, #420]	; (8009928 <_ZN7ESP826612Send_WifiCmdEv+0x5a0>)
 8009782:	2200      	movs	r2, #0
 8009784:	701a      	strb	r2, [r3, #0]
		wifi_command=10;	//41
 8009786:	4b6c      	ldr	r3, [pc, #432]	; (8009938 <_ZN7ESP826612Send_WifiCmdEv+0x5b0>)
 8009788:	220a      	movs	r2, #10
 800978a:	701a      	strb	r2, [r3, #0]
	}
	break;
 800978c:	e1c9      	b.n	8009b22 <_ZN7ESP826612Send_WifiCmdEv+0x79a>
	case 49:
	if(++Timerdelay >8)
 800978e:	4b66      	ldr	r3, [pc, #408]	; (8009928 <_ZN7ESP826612Send_WifiCmdEv+0x5a0>)
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	3301      	adds	r3, #1
 8009794:	b2da      	uxtb	r2, r3
 8009796:	4b64      	ldr	r3, [pc, #400]	; (8009928 <_ZN7ESP826612Send_WifiCmdEv+0x5a0>)
 8009798:	701a      	strb	r2, [r3, #0]
 800979a:	4b63      	ldr	r3, [pc, #396]	; (8009928 <_ZN7ESP826612Send_WifiCmdEv+0x5a0>)
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	2b08      	cmp	r3, #8
 80097a0:	bf8c      	ite	hi
 80097a2:	2301      	movhi	r3, #1
 80097a4:	2300      	movls	r3, #0
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	f000 81bc 	beq.w	8009b26 <_ZN7ESP826612Send_WifiCmdEv+0x79e>
	{
		Timerdelay=0;
 80097ae:	4b5e      	ldr	r3, [pc, #376]	; (8009928 <_ZN7ESP826612Send_WifiCmdEv+0x5a0>)
 80097b0:	2200      	movs	r2, #0
 80097b2:	701a      	strb	r2, [r3, #0]
		wifi_command=50;
 80097b4:	4b60      	ldr	r3, [pc, #384]	; (8009938 <_ZN7ESP826612Send_WifiCmdEv+0x5b0>)
 80097b6:	2232      	movs	r2, #50	; 0x32
 80097b8:	701a      	strb	r2, [r3, #0]
	}
	break;
 80097ba:	e1b4      	b.n	8009b26 <_ZN7ESP826612Send_WifiCmdEv+0x79e>
	case 50:   //CWJAP

	NoOfdata_byte=11;
 80097bc:	4b58      	ldr	r3, [pc, #352]	; (8009920 <_ZN7ESP826612Send_WifiCmdEv+0x598>)
 80097be:	220b      	movs	r2, #11
 80097c0:	801a      	strh	r2, [r3, #0]
	wifi_command=51;
 80097c2:	4b5d      	ldr	r3, [pc, #372]	; (8009938 <_ZN7ESP826612Send_WifiCmdEv+0x5b0>)
 80097c4:	2233      	movs	r2, #51	; 0x33
 80097c6:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=3;
 80097c8:	4b56      	ldr	r3, [pc, #344]	; (8009924 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 80097ca:	2203      	movs	r2, #3
 80097cc:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 80097ce:	4b56      	ldr	r3, [pc, #344]	; (8009928 <_ZN7ESP826612Send_WifiCmdEv+0x5a0>)
 80097d0:	2200      	movs	r2, #0
 80097d2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CMDATCwjapRead,NoOfdata_byte);
 80097d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d6:	3360      	adds	r3, #96	; 0x60
 80097d8:	4a51      	ldr	r2, [pc, #324]	; (8009920 <_ZN7ESP826612Send_WifiCmdEv+0x598>)
 80097da:	8812      	ldrh	r2, [r2, #0]
 80097dc:	4619      	mov	r1, r3
 80097de:	4854      	ldr	r0, [pc, #336]	; (8009930 <_ZN7ESP826612Send_WifiCmdEv+0x5a8>)
 80097e0:	f003 fd6e 	bl	800d2c0 <HAL_UART_Transmit_IT>
	break;
 80097e4:	e1ae      	b.n	8009b44 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	case 51:
	if(++Timerdelay >15)
 80097e6:	4b50      	ldr	r3, [pc, #320]	; (8009928 <_ZN7ESP826612Send_WifiCmdEv+0x5a0>)
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	3301      	adds	r3, #1
 80097ec:	b2da      	uxtb	r2, r3
 80097ee:	4b4e      	ldr	r3, [pc, #312]	; (8009928 <_ZN7ESP826612Send_WifiCmdEv+0x5a0>)
 80097f0:	701a      	strb	r2, [r3, #0]
 80097f2:	4b4d      	ldr	r3, [pc, #308]	; (8009928 <_ZN7ESP826612Send_WifiCmdEv+0x5a0>)
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	2b0f      	cmp	r3, #15
 80097f8:	bf8c      	ite	hi
 80097fa:	2301      	movhi	r3, #1
 80097fc:	2300      	movls	r3, #0
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	2b00      	cmp	r3, #0
 8009802:	f000 8192 	beq.w	8009b2a <_ZN7ESP826612Send_WifiCmdEv+0x7a2>
	{
		Timerdelay=0;
 8009806:	4b48      	ldr	r3, [pc, #288]	; (8009928 <_ZN7ESP826612Send_WifiCmdEv+0x5a0>)
 8009808:	2200      	movs	r2, #0
 800980a:	701a      	strb	r2, [r3, #0]
		wifi_command=10; //50
 800980c:	4b4a      	ldr	r3, [pc, #296]	; (8009938 <_ZN7ESP826612Send_WifiCmdEv+0x5b0>)
 800980e:	220a      	movs	r2, #10
 8009810:	701a      	strb	r2, [r3, #0]
	}

	break;
 8009812:	e18a      	b.n	8009b2a <_ZN7ESP826612Send_WifiCmdEv+0x7a2>
	case 70:   //CIPMUX

	NoOfdata_byte=13;
 8009814:	4b42      	ldr	r3, [pc, #264]	; (8009920 <_ZN7ESP826612Send_WifiCmdEv+0x598>)
 8009816:	220d      	movs	r2, #13
 8009818:	801a      	strh	r2, [r3, #0]
	wifi_command=71;
 800981a:	4b47      	ldr	r3, [pc, #284]	; (8009938 <_ZN7ESP826612Send_WifiCmdEv+0x5b0>)
 800981c:	2247      	movs	r2, #71	; 0x47
 800981e:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=4;
 8009820:	4b40      	ldr	r3, [pc, #256]	; (8009924 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 8009822:	2204      	movs	r2, #4
 8009824:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 8009826:	4b40      	ldr	r3, [pc, #256]	; (8009928 <_ZN7ESP826612Send_WifiCmdEv+0x5a0>)
 8009828:	2200      	movs	r2, #0
 800982a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CmdATCipmuxWrite,NoOfdata_byte);
 800982c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982e:	336d      	adds	r3, #109	; 0x6d
 8009830:	4a3b      	ldr	r2, [pc, #236]	; (8009920 <_ZN7ESP826612Send_WifiCmdEv+0x598>)
 8009832:	8812      	ldrh	r2, [r2, #0]
 8009834:	4619      	mov	r1, r3
 8009836:	483e      	ldr	r0, [pc, #248]	; (8009930 <_ZN7ESP826612Send_WifiCmdEv+0x5a8>)
 8009838:	f003 fd42 	bl	800d2c0 <HAL_UART_Transmit_IT>
	break;	  //2sec
 800983c:	e182      	b.n	8009b44 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	case 71:
	if(++Timerdelay >15)
 800983e:	4b3a      	ldr	r3, [pc, #232]	; (8009928 <_ZN7ESP826612Send_WifiCmdEv+0x5a0>)
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	3301      	adds	r3, #1
 8009844:	b2da      	uxtb	r2, r3
 8009846:	4b38      	ldr	r3, [pc, #224]	; (8009928 <_ZN7ESP826612Send_WifiCmdEv+0x5a0>)
 8009848:	701a      	strb	r2, [r3, #0]
 800984a:	4b37      	ldr	r3, [pc, #220]	; (8009928 <_ZN7ESP826612Send_WifiCmdEv+0x5a0>)
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	2b0f      	cmp	r3, #15
 8009850:	bf8c      	ite	hi
 8009852:	2301      	movhi	r3, #1
 8009854:	2300      	movls	r3, #0
 8009856:	b2db      	uxtb	r3, r3
 8009858:	2b00      	cmp	r3, #0
 800985a:	f000 8168 	beq.w	8009b2e <_ZN7ESP826612Send_WifiCmdEv+0x7a6>
	{
		Timerdelay=0;
 800985e:	4b32      	ldr	r3, [pc, #200]	; (8009928 <_ZN7ESP826612Send_WifiCmdEv+0x5a0>)
 8009860:	2200      	movs	r2, #0
 8009862:	701a      	strb	r2, [r3, #0]
		wifi_command=10;   //70
 8009864:	4b34      	ldr	r3, [pc, #208]	; (8009938 <_ZN7ESP826612Send_WifiCmdEv+0x5b0>)
 8009866:	220a      	movs	r2, #10
 8009868:	701a      	strb	r2, [r3, #0]
	}
	break;
 800986a:	e160      	b.n	8009b2e <_ZN7ESP826612Send_WifiCmdEv+0x7a6>
	case 80:
	NoOfdata_byte=49;//41;
 800986c:	4b2c      	ldr	r3, [pc, #176]	; (8009920 <_ZN7ESP826612Send_WifiCmdEv+0x598>)
 800986e:	2231      	movs	r2, #49	; 0x31
 8009870:	801a      	strh	r2, [r3, #0]
	wifi_command=81;
 8009872:	4b31      	ldr	r3, [pc, #196]	; (8009938 <_ZN7ESP826612Send_WifiCmdEv+0x5b0>)
 8009874:	2251      	movs	r2, #81	; 0x51
 8009876:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=5;
 8009878:	4b2a      	ldr	r3, [pc, #168]	; (8009924 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 800987a:	2205      	movs	r2, #5
 800987c:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 800987e:	4b2a      	ldr	r3, [pc, #168]	; (8009928 <_ZN7ESP826612Send_WifiCmdEv+0x5a0>)
 8009880:	2200      	movs	r2, #0
 8009882:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CmdAtCipStartWrite,NoOfdata_byte);
 8009884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009886:	337c      	adds	r3, #124	; 0x7c
 8009888:	4a25      	ldr	r2, [pc, #148]	; (8009920 <_ZN7ESP826612Send_WifiCmdEv+0x598>)
 800988a:	8812      	ldrh	r2, [r2, #0]
 800988c:	4619      	mov	r1, r3
 800988e:	4828      	ldr	r0, [pc, #160]	; (8009930 <_ZN7ESP826612Send_WifiCmdEv+0x5a8>)
 8009890:	f003 fd16 	bl	800d2c0 <HAL_UART_Transmit_IT>
	break;
 8009894:	e156      	b.n	8009b44 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	case 81:					//5sec
	if(++Timerdelay >20)
 8009896:	4b24      	ldr	r3, [pc, #144]	; (8009928 <_ZN7ESP826612Send_WifiCmdEv+0x5a0>)
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	3301      	adds	r3, #1
 800989c:	b2da      	uxtb	r2, r3
 800989e:	4b22      	ldr	r3, [pc, #136]	; (8009928 <_ZN7ESP826612Send_WifiCmdEv+0x5a0>)
 80098a0:	701a      	strb	r2, [r3, #0]
 80098a2:	4b21      	ldr	r3, [pc, #132]	; (8009928 <_ZN7ESP826612Send_WifiCmdEv+0x5a0>)
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	2b14      	cmp	r3, #20
 80098a8:	bf8c      	ite	hi
 80098aa:	2301      	movhi	r3, #1
 80098ac:	2300      	movls	r3, #0
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	f000 813e 	beq.w	8009b32 <_ZN7ESP826612Send_WifiCmdEv+0x7aa>
	{
		Timerdelay=0;
 80098b6:	4b1c      	ldr	r3, [pc, #112]	; (8009928 <_ZN7ESP826612Send_WifiCmdEv+0x5a0>)
 80098b8:	2200      	movs	r2, #0
 80098ba:	701a      	strb	r2, [r3, #0]
		wifi_command=10;
 80098bc:	4b1e      	ldr	r3, [pc, #120]	; (8009938 <_ZN7ESP826612Send_WifiCmdEv+0x5b0>)
 80098be:	220a      	movs	r2, #10
 80098c0:	701a      	strb	r2, [r3, #0]
	}
	break;
 80098c2:	e136      	b.n	8009b32 <_ZN7ESP826612Send_WifiCmdEv+0x7aa>
	case 90:   //CIPSEND

	NoOfdata_byte	= 18;
 80098c4:	4b16      	ldr	r3, [pc, #88]	; (8009920 <_ZN7ESP826612Send_WifiCmdEv+0x598>)
 80098c6:	2212      	movs	r2, #18
 80098c8:	801a      	strh	r2, [r3, #0]
	//lenOfURl = sprintf(PostUrl_CharFormat,"GET /isc1-lab.acceedo.in:9009/logs?mac=01&t=373&h=972&W=01&U=01&x=0\r\nHOST:usm2-ht.acceedo.in:9009\r\n\r\n");
	sprintf(SendData_charFormat,"AT+CIPSEND=1,%d\r\n",lenOfURl);
 80098ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098cc:	33c2      	adds	r3, #194	; 0xc2
 80098ce:	4a1b      	ldr	r2, [pc, #108]	; (800993c <_ZN7ESP826612Send_WifiCmdEv+0x5b4>)
 80098d0:	8812      	ldrh	r2, [r2, #0]
 80098d2:	491b      	ldr	r1, [pc, #108]	; (8009940 <_ZN7ESP826612Send_WifiCmdEv+0x5b8>)
 80098d4:	4618      	mov	r0, r3
 80098d6:	f005 f989 	bl	800ebec <siprintf>
	memcpy(SendData_uintFormat,SendData_charFormat,NoOfdata_byte);
 80098da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098dc:	f103 00ae 	add.w	r0, r3, #174	; 0xae
 80098e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e2:	33c2      	adds	r3, #194	; 0xc2
 80098e4:	4a0e      	ldr	r2, [pc, #56]	; (8009920 <_ZN7ESP826612Send_WifiCmdEv+0x598>)
 80098e6:	8812      	ldrh	r2, [r2, #0]
 80098e8:	4619      	mov	r1, r3
 80098ea:	f005 f879 	bl	800e9e0 <memcpy>
	HAL_UART_Transmit_IT(&hlpuart1,SendData_uintFormat,NoOfdata_byte);
 80098ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f0:	33ae      	adds	r3, #174	; 0xae
 80098f2:	4a0b      	ldr	r2, [pc, #44]	; (8009920 <_ZN7ESP826612Send_WifiCmdEv+0x598>)
 80098f4:	8812      	ldrh	r2, [r2, #0]
 80098f6:	4619      	mov	r1, r3
 80098f8:	480d      	ldr	r0, [pc, #52]	; (8009930 <_ZN7ESP826612Send_WifiCmdEv+0x5a8>)
 80098fa:	f003 fce1 	bl	800d2c0 <HAL_UART_Transmit_IT>
	wifi_command=91;
 80098fe:	4b0e      	ldr	r3, [pc, #56]	; (8009938 <_ZN7ESP826612Send_WifiCmdEv+0x5b0>)
 8009900:	225b      	movs	r2, #91	; 0x5b
 8009902:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=6;
 8009904:	4b07      	ldr	r3, [pc, #28]	; (8009924 <_ZN7ESP826612Send_WifiCmdEv+0x59c>)
 8009906:	2206      	movs	r2, #6
 8009908:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 800990a:	4b07      	ldr	r3, [pc, #28]	; (8009928 <_ZN7ESP826612Send_WifiCmdEv+0x5a0>)
 800990c:	2200      	movs	r2, #0
 800990e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,ESP8266TXData,NoOfdata_byte);
 8009910:	4b03      	ldr	r3, [pc, #12]	; (8009920 <_ZN7ESP826612Send_WifiCmdEv+0x598>)
 8009912:	881b      	ldrh	r3, [r3, #0]
 8009914:	461a      	mov	r2, r3
 8009916:	490b      	ldr	r1, [pc, #44]	; (8009944 <_ZN7ESP826612Send_WifiCmdEv+0x5bc>)
 8009918:	4805      	ldr	r0, [pc, #20]	; (8009930 <_ZN7ESP826612Send_WifiCmdEv+0x5a8>)
 800991a:	f003 fcd1 	bl	800d2c0 <HAL_UART_Transmit_IT>
	break;
 800991e:	e111      	b.n	8009b44 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
 8009920:	20000836 	.word	0x20000836
 8009924:	20000833 	.word	0x20000833
 8009928:	20000838 	.word	0x20000838
 800992c:	20000832 	.word	0x20000832
 8009930:	2000028c 	.word	0x2000028c
 8009934:	20000834 	.word	0x20000834
 8009938:	20000734 	.word	0x20000734
 800993c:	2000083c 	.word	0x2000083c
 8009940:	0800f5c0 	.word	0x0800f5c0
 8009944:	20000738 	.word	0x20000738
	case 91:
	if(++Timerdelay >15)
 8009948:	4b80      	ldr	r3, [pc, #512]	; (8009b4c <_ZN7ESP826612Send_WifiCmdEv+0x7c4>)
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	3301      	adds	r3, #1
 800994e:	b2da      	uxtb	r2, r3
 8009950:	4b7e      	ldr	r3, [pc, #504]	; (8009b4c <_ZN7ESP826612Send_WifiCmdEv+0x7c4>)
 8009952:	701a      	strb	r2, [r3, #0]
 8009954:	4b7d      	ldr	r3, [pc, #500]	; (8009b4c <_ZN7ESP826612Send_WifiCmdEv+0x7c4>)
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	2b0f      	cmp	r3, #15
 800995a:	bf8c      	ite	hi
 800995c:	2301      	movhi	r3, #1
 800995e:	2300      	movls	r3, #0
 8009960:	b2db      	uxtb	r3, r3
 8009962:	2b00      	cmp	r3, #0
 8009964:	f000 80e7 	beq.w	8009b36 <_ZN7ESP826612Send_WifiCmdEv+0x7ae>
	{
		Timerdelay=0;
 8009968:	4b78      	ldr	r3, [pc, #480]	; (8009b4c <_ZN7ESP826612Send_WifiCmdEv+0x7c4>)
 800996a:	2200      	movs	r2, #0
 800996c:	701a      	strb	r2, [r3, #0]
		wifi_command=10;
 800996e:	4b78      	ldr	r3, [pc, #480]	; (8009b50 <_ZN7ESP826612Send_WifiCmdEv+0x7c8>)
 8009970:	220a      	movs	r2, #10
 8009972:	701a      	strb	r2, [r3, #0]
	}
	break;
 8009974:	e0df      	b.n	8009b36 <_ZN7ESP826612Send_WifiCmdEv+0x7ae>
	case 100:
	lenOfURl = sprintf(PostUrl_CharFormat,"GET /set_temp?u=4&p=%d&tm=%d&tl=%d&th=%d&"
 8009976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009978:	f103 00d6 	add.w	r0, r3, #214	; 0xd6
 800997c:	4b75      	ldr	r3, [pc, #468]	; (8009b54 <_ZN7ESP826612Send_WifiCmdEv+0x7cc>)
 800997e:	881b      	ldrh	r3, [r3, #0]
 8009980:	469c      	mov	ip, r3
 8009982:	4b75      	ldr	r3, [pc, #468]	; (8009b58 <_ZN7ESP826612Send_WifiCmdEv+0x7d0>)
 8009984:	881b      	ldrh	r3, [r3, #0]
 8009986:	469e      	mov	lr, r3
 8009988:	4b74      	ldr	r3, [pc, #464]	; (8009b5c <_ZN7ESP826612Send_WifiCmdEv+0x7d4>)
 800998a:	881b      	ldrh	r3, [r3, #0]
 800998c:	461d      	mov	r5, r3
 800998e:	4b74      	ldr	r3, [pc, #464]	; (8009b60 <_ZN7ESP826612Send_WifiCmdEv+0x7d8>)
 8009990:	881b      	ldrh	r3, [r3, #0]
 8009992:	461e      	mov	r6, r3
 8009994:	4b73      	ldr	r3, [pc, #460]	; (8009b64 <_ZN7ESP826612Send_WifiCmdEv+0x7dc>)
 8009996:	881b      	ldrh	r3, [r3, #0]
 8009998:	623b      	str	r3, [r7, #32]
 800999a:	4b73      	ldr	r3, [pc, #460]	; (8009b68 <_ZN7ESP826612Send_WifiCmdEv+0x7e0>)
 800999c:	881b      	ldrh	r3, [r3, #0]
 800999e:	61fb      	str	r3, [r7, #28]
 80099a0:	4b72      	ldr	r3, [pc, #456]	; (8009b6c <_ZN7ESP826612Send_WifiCmdEv+0x7e4>)
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	61bb      	str	r3, [r7, #24]
 80099a6:	4b72      	ldr	r3, [pc, #456]	; (8009b70 <_ZN7ESP826612Send_WifiCmdEv+0x7e8>)
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	617b      	str	r3, [r7, #20]
 80099ac:	4b71      	ldr	r3, [pc, #452]	; (8009b74 <_ZN7ESP826612Send_WifiCmdEv+0x7ec>)
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	613b      	str	r3, [r7, #16]
 80099b2:	4b71      	ldr	r3, [pc, #452]	; (8009b78 <_ZN7ESP826612Send_WifiCmdEv+0x7f0>)
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	60fb      	str	r3, [r7, #12]
 80099b8:	4b70      	ldr	r3, [pc, #448]	; (8009b7c <_ZN7ESP826612Send_WifiCmdEv+0x7f4>)
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	60bb      	str	r3, [r7, #8]
 80099be:	4b70      	ldr	r3, [pc, #448]	; (8009b80 <_ZN7ESP826612Send_WifiCmdEv+0x7f8>)
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	607b      	str	r3, [r7, #4]
 80099c4:	4b6f      	ldr	r3, [pc, #444]	; (8009b84 <_ZN7ESP826612Send_WifiCmdEv+0x7fc>)
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	461c      	mov	r4, r3
 80099ca:	4b6f      	ldr	r3, [pc, #444]	; (8009b88 <_ZN7ESP826612Send_WifiCmdEv+0x800>)
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	4619      	mov	r1, r3
 80099d0:	4b6e      	ldr	r3, [pc, #440]	; (8009b8c <_ZN7ESP826612Send_WifiCmdEv+0x804>)
 80099d2:	881b      	ldrh	r3, [r3, #0]
 80099d4:	461a      	mov	r2, r3
 80099d6:	4b6e      	ldr	r3, [pc, #440]	; (8009b90 <_ZN7ESP826612Send_WifiCmdEv+0x808>)
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	9311      	str	r3, [sp, #68]	; 0x44
 80099dc:	2364      	movs	r3, #100	; 0x64
 80099de:	9310      	str	r3, [sp, #64]	; 0x40
 80099e0:	2364      	movs	r3, #100	; 0x64
 80099e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80099e4:	2364      	movs	r3, #100	; 0x64
 80099e6:	930e      	str	r3, [sp, #56]	; 0x38
 80099e8:	2301      	movs	r3, #1
 80099ea:	930d      	str	r3, [sp, #52]	; 0x34
 80099ec:	920c      	str	r2, [sp, #48]	; 0x30
 80099ee:	910b      	str	r1, [sp, #44]	; 0x2c
 80099f0:	940a      	str	r4, [sp, #40]	; 0x28
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	9209      	str	r2, [sp, #36]	; 0x24
 80099f6:	68ba      	ldr	r2, [r7, #8]
 80099f8:	9208      	str	r2, [sp, #32]
 80099fa:	68fa      	ldr	r2, [r7, #12]
 80099fc:	9207      	str	r2, [sp, #28]
 80099fe:	693a      	ldr	r2, [r7, #16]
 8009a00:	9206      	str	r2, [sp, #24]
 8009a02:	697a      	ldr	r2, [r7, #20]
 8009a04:	9205      	str	r2, [sp, #20]
 8009a06:	69ba      	ldr	r2, [r7, #24]
 8009a08:	9204      	str	r2, [sp, #16]
 8009a0a:	69fa      	ldr	r2, [r7, #28]
 8009a0c:	9203      	str	r2, [sp, #12]
 8009a0e:	6a3b      	ldr	r3, [r7, #32]
 8009a10:	9302      	str	r3, [sp, #8]
 8009a12:	9601      	str	r6, [sp, #4]
 8009a14:	9500      	str	r5, [sp, #0]
 8009a16:	4673      	mov	r3, lr
 8009a18:	4662      	mov	r2, ip
 8009a1a:	495e      	ldr	r1, [pc, #376]	; (8009b94 <_ZN7ESP826612Send_WifiCmdEv+0x80c>)
 8009a1c:	f005 f8e6 	bl	800ebec <siprintf>
 8009a20:	4603      	mov	r3, r0
 8009a22:	b29a      	uxth	r2, r3
 8009a24:	4b5c      	ldr	r3, [pc, #368]	; (8009b98 <_ZN7ESP826612Send_WifiCmdEv+0x810>)
 8009a26:	801a      	strh	r2, [r3, #0]
						"h=%d&l=%d&ht=%d%&lt=%%d&rv=%%d&bv=%d&yv=%d&rc=%d"
						"&bc=%d&yc=%d&k=%d&x=%d\r\nHost:usm4-ht.acceedo.in:9012\r\n\r\n",
						ProcessId_Value,act_temperature_c1,act_temperature_c2,act_temperature_c3,
						Seq1temperature,Seq2temperature,Seq1durationHr,Seq1durationMin,Seq2durationHr,Seq2durationMin,seq1_remaining_time_Hr,seq1_remaining_time_min,
						seq2_remaining_time_Hr,seq2_remaining_time_min,act_temperature_c4,1,100,100,100,status_to_server);
	memcpy(PostUrl_uintFormat,PostUrl_CharFormat,lenOfURl);
 8009a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2a:	f503 70d9 	add.w	r0, r3, #434	; 0x1b2
 8009a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a30:	33d6      	adds	r3, #214	; 0xd6
 8009a32:	4a59      	ldr	r2, [pc, #356]	; (8009b98 <_ZN7ESP826612Send_WifiCmdEv+0x810>)
 8009a34:	8812      	ldrh	r2, [r2, #0]
 8009a36:	4619      	mov	r1, r3
 8009a38:	f004 ffd2 	bl	800e9e0 <memcpy>
	wifi_command	=	101;
 8009a3c:	4b44      	ldr	r3, [pc, #272]	; (8009b50 <_ZN7ESP826612Send_WifiCmdEv+0x7c8>)
 8009a3e:	2265      	movs	r2, #101	; 0x65
 8009a40:	701a      	strb	r2, [r3, #0]
	Rxseqdecoder=7;
 8009a42:	4b56      	ldr	r3, [pc, #344]	; (8009b9c <_ZN7ESP826612Send_WifiCmdEv+0x814>)
 8009a44:	2207      	movs	r2, #7
 8009a46:	701a      	strb	r2, [r3, #0]
	Timerdelay=0;
 8009a48:	4b40      	ldr	r3, [pc, #256]	; (8009b4c <_ZN7ESP826612Send_WifiCmdEv+0x7c4>)
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit_IT(&hlpuart1,PostUrl_uintFormat,lenOfURl);
 8009a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a50:	f503 73d9 	add.w	r3, r3, #434	; 0x1b2
 8009a54:	4a50      	ldr	r2, [pc, #320]	; (8009b98 <_ZN7ESP826612Send_WifiCmdEv+0x810>)
 8009a56:	8812      	ldrh	r2, [r2, #0]
 8009a58:	4619      	mov	r1, r3
 8009a5a:	4851      	ldr	r0, [pc, #324]	; (8009ba0 <_ZN7ESP826612Send_WifiCmdEv+0x818>)
 8009a5c:	f003 fc30 	bl	800d2c0 <HAL_UART_Transmit_IT>
	break;
 8009a60:	e070      	b.n	8009b44 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	case 101:
		if(++Timerdelay>10)
 8009a62:	4b3a      	ldr	r3, [pc, #232]	; (8009b4c <_ZN7ESP826612Send_WifiCmdEv+0x7c4>)
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	3301      	adds	r3, #1
 8009a68:	b2da      	uxtb	r2, r3
 8009a6a:	4b38      	ldr	r3, [pc, #224]	; (8009b4c <_ZN7ESP826612Send_WifiCmdEv+0x7c4>)
 8009a6c:	701a      	strb	r2, [r3, #0]
 8009a6e:	4b37      	ldr	r3, [pc, #220]	; (8009b4c <_ZN7ESP826612Send_WifiCmdEv+0x7c4>)
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	2b0a      	cmp	r3, #10
 8009a74:	bf8c      	ite	hi
 8009a76:	2301      	movhi	r3, #1
 8009a78:	2300      	movls	r3, #0
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d05c      	beq.n	8009b3a <_ZN7ESP826612Send_WifiCmdEv+0x7b2>
		{
			Timerdelay=0;
 8009a80:	4b32      	ldr	r3, [pc, #200]	; (8009b4c <_ZN7ESP826612Send_WifiCmdEv+0x7c4>)
 8009a82:	2200      	movs	r2, #0
 8009a84:	701a      	strb	r2, [r3, #0]
			wifi_command=10;
 8009a86:	4b32      	ldr	r3, [pc, #200]	; (8009b50 <_ZN7ESP826612Send_WifiCmdEv+0x7c8>)
 8009a88:	220a      	movs	r2, #10
 8009a8a:	701a      	strb	r2, [r3, #0]
		}
	break;
 8009a8c:	e055      	b.n	8009b3a <_ZN7ESP826612Send_WifiCmdEv+0x7b2>
	case 102:
	   if(++Timerdelay>2)
 8009a8e:	4b2f      	ldr	r3, [pc, #188]	; (8009b4c <_ZN7ESP826612Send_WifiCmdEv+0x7c4>)
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	3301      	adds	r3, #1
 8009a94:	b2da      	uxtb	r2, r3
 8009a96:	4b2d      	ldr	r3, [pc, #180]	; (8009b4c <_ZN7ESP826612Send_WifiCmdEv+0x7c4>)
 8009a98:	701a      	strb	r2, [r3, #0]
 8009a9a:	4b2c      	ldr	r3, [pc, #176]	; (8009b4c <_ZN7ESP826612Send_WifiCmdEv+0x7c4>)
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	bf8c      	ite	hi
 8009aa2:	2301      	movhi	r3, #1
 8009aa4:	2300      	movls	r3, #0
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d048      	beq.n	8009b3e <_ZN7ESP826612Send_WifiCmdEv+0x7b6>
	   {
		Timerdelay=0;
 8009aac:	4b27      	ldr	r3, [pc, #156]	; (8009b4c <_ZN7ESP826612Send_WifiCmdEv+0x7c4>)
 8009aae:	2200      	movs	r2, #0
 8009ab0:	701a      	strb	r2, [r3, #0]
		wifi_command=50;
 8009ab2:	4b27      	ldr	r3, [pc, #156]	; (8009b50 <_ZN7ESP826612Send_WifiCmdEv+0x7c8>)
 8009ab4:	2232      	movs	r2, #50	; 0x32
 8009ab6:	701a      	strb	r2, [r3, #0]
	   }
	break;
 8009ab8:	e041      	b.n	8009b3e <_ZN7ESP826612Send_WifiCmdEv+0x7b6>
	case 103:
	   if(++Timerdelay>2)
 8009aba:	4b24      	ldr	r3, [pc, #144]	; (8009b4c <_ZN7ESP826612Send_WifiCmdEv+0x7c4>)
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	3301      	adds	r3, #1
 8009ac0:	b2da      	uxtb	r2, r3
 8009ac2:	4b22      	ldr	r3, [pc, #136]	; (8009b4c <_ZN7ESP826612Send_WifiCmdEv+0x7c4>)
 8009ac4:	701a      	strb	r2, [r3, #0]
 8009ac6:	4b21      	ldr	r3, [pc, #132]	; (8009b4c <_ZN7ESP826612Send_WifiCmdEv+0x7c4>)
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	2b02      	cmp	r3, #2
 8009acc:	bf8c      	ite	hi
 8009ace:	2301      	movhi	r3, #1
 8009ad0:	2300      	movls	r3, #0
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d034      	beq.n	8009b42 <_ZN7ESP826612Send_WifiCmdEv+0x7ba>
	   {
		Timerdelay=0;
 8009ad8:	4b1c      	ldr	r3, [pc, #112]	; (8009b4c <_ZN7ESP826612Send_WifiCmdEv+0x7c4>)
 8009ada:	2200      	movs	r2, #0
 8009adc:	701a      	strb	r2, [r3, #0]
		wifi_command=10;
 8009ade:	4b1c      	ldr	r3, [pc, #112]	; (8009b50 <_ZN7ESP826612Send_WifiCmdEv+0x7c8>)
 8009ae0:	220a      	movs	r2, #10
 8009ae2:	701a      	strb	r2, [r3, #0]
	   }
	break;
 8009ae4:	e02d      	b.n	8009b42 <_ZN7ESP826612Send_WifiCmdEv+0x7ba>
	case 110:
	NoOfdata_byte=12;
 8009ae6:	4b2f      	ldr	r3, [pc, #188]	; (8009ba4 <_ZN7ESP826612Send_WifiCmdEv+0x81c>)
 8009ae8:	220c      	movs	r2, #12
 8009aea:	801a      	strh	r2, [r3, #0]
	wifi_command=50;
 8009aec:	4b18      	ldr	r3, [pc, #96]	; (8009b50 <_ZN7ESP826612Send_WifiCmdEv+0x7c8>)
 8009aee:	2232      	movs	r2, #50	; 0x32
 8009af0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&hlpuart1,CmdCipClose,NoOfdata_byte);
 8009af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af4:	f203 238e 	addw	r3, r3, #654	; 0x28e
 8009af8:	4a2a      	ldr	r2, [pc, #168]	; (8009ba4 <_ZN7ESP826612Send_WifiCmdEv+0x81c>)
 8009afa:	8812      	ldrh	r2, [r2, #0]
 8009afc:	4619      	mov	r1, r3
 8009afe:	4828      	ldr	r0, [pc, #160]	; (8009ba0 <_ZN7ESP826612Send_WifiCmdEv+0x818>)
 8009b00:	f003 fbde 	bl	800d2c0 <HAL_UART_Transmit_IT>
	break;
 8009b04:	e01e      	b.n	8009b44 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	case 120:
	break;
	default:
	wifi_command=5;
 8009b06:	4b12      	ldr	r3, [pc, #72]	; (8009b50 <_ZN7ESP826612Send_WifiCmdEv+0x7c8>)
 8009b08:	2205      	movs	r2, #5
 8009b0a:	701a      	strb	r2, [r3, #0]
	break;
 8009b0c:	e01a      	b.n	8009b44 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	break;
 8009b0e:	bf00      	nop
 8009b10:	e018      	b.n	8009b44 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	break;
 8009b12:	bf00      	nop
 8009b14:	e016      	b.n	8009b44 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	break;
 8009b16:	bf00      	nop
 8009b18:	e014      	b.n	8009b44 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	break;
 8009b1a:	bf00      	nop
 8009b1c:	e012      	b.n	8009b44 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	break;
 8009b1e:	bf00      	nop
 8009b20:	e010      	b.n	8009b44 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	break;
 8009b22:	bf00      	nop
 8009b24:	e00e      	b.n	8009b44 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	break;
 8009b26:	bf00      	nop
 8009b28:	e00c      	b.n	8009b44 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	break;
 8009b2a:	bf00      	nop
 8009b2c:	e00a      	b.n	8009b44 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	break;
 8009b2e:	bf00      	nop
 8009b30:	e008      	b.n	8009b44 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	break;
 8009b32:	bf00      	nop
 8009b34:	e006      	b.n	8009b44 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	break;
 8009b36:	bf00      	nop
 8009b38:	e004      	b.n	8009b44 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	break;
 8009b3a:	bf00      	nop
 8009b3c:	e002      	b.n	8009b44 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	break;
 8009b3e:	bf00      	nop
 8009b40:	e000      	b.n	8009b44 <_ZN7ESP826612Send_WifiCmdEv+0x7bc>
	break;
 8009b42:	bf00      	nop
 }
}
 8009b44:	bf00      	nop
 8009b46:	372c      	adds	r7, #44	; 0x2c
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b4c:	20000838 	.word	0x20000838
 8009b50:	20000734 	.word	0x20000734
 8009b54:	20000612 	.word	0x20000612
 8009b58:	2000061e 	.word	0x2000061e
 8009b5c:	20000620 	.word	0x20000620
 8009b60:	20000622 	.word	0x20000622
 8009b64:	20000614 	.word	0x20000614
 8009b68:	20000616 	.word	0x20000616
 8009b6c:	20000618 	.word	0x20000618
 8009b70:	20000619 	.word	0x20000619
 8009b74:	2000061a 	.word	0x2000061a
 8009b78:	2000061b 	.word	0x2000061b
 8009b7c:	200000fe 	.word	0x200000fe
 8009b80:	200000ff 	.word	0x200000ff
 8009b84:	20000100 	.word	0x20000100
 8009b88:	20000101 	.word	0x20000101
 8009b8c:	20000624 	.word	0x20000624
 8009b90:	20000610 	.word	0x20000610
 8009b94:	0800f5d4 	.word	0x0800f5d4
 8009b98:	2000083c 	.word	0x2000083c
 8009b9c:	20000833 	.word	0x20000833
 8009ba0:	2000028c 	.word	0x2000028c
 8009ba4:	20000836 	.word	0x20000836

08009ba8 <_ZN7ESP82664InitEv>:

	}
}

void ESP8266::Init(void)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b090      	sub	sp, #64	; 0x40
 8009bac:	af0e      	add	r7, sp, #56	; 0x38
 8009bae:	6078      	str	r0, [r7, #4]
	sprintf(dummydata,"%c%02d,%04d,%04d,%03d,%03d,%02d:%02d:%02d %02d/%02d/%02d,%04d,%03d,%03d%c",'"',0,0,
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f203 20a6 	addw	r0, r3, #678	; 0x2a6
 8009bb6:	2322      	movs	r3, #34	; 0x22
 8009bb8:	930d      	str	r3, [sp, #52]	; 0x34
 8009bba:	2300      	movs	r3, #0
 8009bbc:	930c      	str	r3, [sp, #48]	; 0x30
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	930a      	str	r3, [sp, #40]	; 0x28
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8009bca:	2300      	movs	r3, #0
 8009bcc:	9308      	str	r3, [sp, #32]
 8009bce:	2300      	movs	r3, #0
 8009bd0:	9307      	str	r3, [sp, #28]
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	9306      	str	r3, [sp, #24]
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	9305      	str	r3, [sp, #20]
 8009bda:	2300      	movs	r3, #0
 8009bdc:	9304      	str	r3, [sp, #16]
 8009bde:	2300      	movs	r3, #0
 8009be0:	9303      	str	r3, [sp, #12]
 8009be2:	2300      	movs	r3, #0
 8009be4:	9302      	str	r3, [sp, #8]
 8009be6:	2300      	movs	r3, #0
 8009be8:	9301      	str	r3, [sp, #4]
 8009bea:	2300      	movs	r3, #0
 8009bec:	9300      	str	r3, [sp, #0]
 8009bee:	2300      	movs	r3, #0
 8009bf0:	2222      	movs	r2, #34	; 0x22
 8009bf2:	4908      	ldr	r1, [pc, #32]	; (8009c14 <_ZN7ESP82664InitEv+0x6c>)
 8009bf4:	f004 fffa 	bl	800ebec <siprintf>
				0,0,0,0,0,0,0,0,0,0,0,0,'"');
	powercycleRefresh=1;
 8009bf8:	4b07      	ldr	r3, [pc, #28]	; (8009c18 <_ZN7ESP82664InitEv+0x70>)
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	701a      	strb	r2, [r3, #0]
	wifi_command=5;
 8009bfe:	4b07      	ldr	r3, [pc, #28]	; (8009c1c <_ZN7ESP82664InitEv+0x74>)
 8009c00:	2205      	movs	r2, #5
 8009c02:	701a      	strb	r2, [r3, #0]
	RefreshBlockInfo=0;
 8009c04:	4b06      	ldr	r3, [pc, #24]	; (8009c20 <_ZN7ESP82664InitEv+0x78>)
 8009c06:	2200      	movs	r2, #0
 8009c08:	701a      	strb	r2, [r3, #0]
}
 8009c0a:	bf00      	nop
 8009c0c:	3708      	adds	r7, #8
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	0800f668 	.word	0x0800f668
 8009c18:	2000083a 	.word	0x2000083a
 8009c1c:	20000734 	.word	0x20000734
 8009c20:	20000839 	.word	0x20000839

08009c24 <cppMain>:
  * @brief  The application entry point for cpp
  * @retval int
  */
//TIM_HandleTypeDef htim6;
void cppMain()
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	f5ad 5dcd 	sub.w	sp, sp, #6560	; 0x19a0
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
	GLCD glcd;
 8009c2e:	f607 73a4 	addw	r3, r7, #4004	; 0xfa4
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7f9 ff80 	bl	8003b38 <_ZN4GLCDC1Ev>
	Modbusrtu ModbusInst;
 8009c38:	f607 5388 	addw	r3, r7, #3464	; 0xd88
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f7fe fdd9 	bl	80087f4 <_ZN9ModbusrtuC1Ev>
	DisplayRoutine displayRoutineInst;
 8009c42:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8009c46:	3b10      	subs	r3, #16
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f7f9 fd67 	bl	800371c <_ZN14DisplayRoutineC1Ev>
	Heattreatment heattreatmentInst;
 8009c4e:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8009c52:	3b1c      	subs	r3, #28
 8009c54:	4618      	mov	r0, r3
 8009c56:	f7fe fa6d 	bl	8008134 <_ZN13HeattreatmentC1Ev>
	OfflineStorage offlineStorageInst;
 8009c5a:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8009c5e:	3b08      	subs	r3, #8
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7fe ffbf 	bl	8008be4 <_ZN14OfflineStorageC1Ev>
	ESP8266 esp8266Inst;
 8009c66:	f107 0308 	add.w	r3, r7, #8
 8009c6a:	3b04      	subs	r3, #4
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7ff f97f 	bl	8008f70 <_ZN7ESP8266C1Ev>
//	SHIFT shiftInst;

	displayRoutineInst.Init();
 8009c72:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8009c76:	3b10      	subs	r3, #16
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7f9 ff25 	bl	8003ac8 <_ZN14DisplayRoutine4InitEv>
	offlineStorageInst.ReadOfflinedataInit();
 8009c7e:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8009c82:	3b08      	subs	r3, #8
 8009c84:	4618      	mov	r0, r3
 8009c86:	f7ff f961 	bl	8008f4c <_ZN14OfflineStorage19ReadOfflinedataInitEv>
	esp8266Inst.Init();
 8009c8a:	f107 0308 	add.w	r3, r7, #8
 8009c8e:	3b04      	subs	r3, #4
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7ff ff89 	bl	8009ba8 <_ZN7ESP82664InitEv>
	ReadOnlineData();
 8009c96:	f7f6 feab 	bl	80009f0 <ReadOnlineData>
	TxSeqComplete=1;
 8009c9a:	4b1c      	ldr	r3, [pc, #112]	; (8009d0c <cppMain+0xe8>)
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	701a      	strb	r2, [r3, #0]


	while(1)
	{

		if(Flag1MS)
 8009ca0:	4b1b      	ldr	r3, [pc, #108]	; (8009d10 <cppMain+0xec>)
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d008      	beq.n	8009cba <cppMain+0x96>
		{
			Flag1MS=0;
 8009ca8:	4b19      	ldr	r3, [pc, #100]	; (8009d10 <cppMain+0xec>)
 8009caa:	2200      	movs	r2, #0
 8009cac:	701a      	strb	r2, [r3, #0]
			heattreatmentInst.run();
 8009cae:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8009cb2:	3b1c      	subs	r3, #28
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7fe fa6d 	bl	8008194 <_ZN13Heattreatment3runEv>

		}
		if(Flag100milliSeconds)
 8009cba:	4b16      	ldr	r3, [pc, #88]	; (8009d14 <cppMain+0xf0>)
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d00d      	beq.n	8009cde <cppMain+0xba>
		{
			Flag100milliSeconds=0;
 8009cc2:	4b14      	ldr	r3, [pc, #80]	; (8009d14 <cppMain+0xf0>)
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	701a      	strb	r2, [r3, #0]
			offlineStorageInst.run();
 8009cc8:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8009ccc:	3b08      	subs	r3, #8
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7fe ffb8 	bl	8008c44 <_ZN14OfflineStorage3runEv>
			ModbusInst.ModbusReadTransaction();
 8009cd4:	f607 5388 	addw	r3, r7, #3464	; 0xd88
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f7fe fdd5 	bl	8008888 <_ZN9Modbusrtu21ModbusReadTransactionEv>

		}
		if(Flag1Second)
 8009cde:	4b0e      	ldr	r3, [pc, #56]	; (8009d18 <cppMain+0xf4>)
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d00e      	beq.n	8009d04 <cppMain+0xe0>
		{
			Flag1Second=0;
 8009ce6:	4b0c      	ldr	r3, [pc, #48]	; (8009d18 <cppMain+0xf4>)
 8009ce8:	2200      	movs	r2, #0
 8009cea:	701a      	strb	r2, [r3, #0]
			displayRoutineInst.run();
 8009cec:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8009cf0:	3b10      	subs	r3, #16
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7f9 fdc4 	bl	8003880 <_ZN14DisplayRoutine3runEv>
			//ethernetHTTPRoutine();
			esp8266Inst.run();
 8009cf8:	f107 0308 	add.w	r3, r7, #8
 8009cfc:	3b04      	subs	r3, #4
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7ff fb37 	bl	8009372 <_ZN7ESP82663runEv>
		}
		ESPRXDataSeg();
 8009d04:	f7f6 fc36 	bl	8000574 <ESPRXDataSeg>
		if(Flag1MS)
 8009d08:	e7ca      	b.n	8009ca0 <cppMain+0x7c>
 8009d0a:	bf00      	nop
 8009d0c:	2000072f 	.word	0x2000072f
 8009d10:	200000ed 	.word	0x200000ed
 8009d14:	200000ef 	.word	0x200000ef
 8009d18:	200000ee 	.word	0x200000ee

08009d1c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b082      	sub	sp, #8
 8009d20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009d22:	2300      	movs	r3, #0
 8009d24:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009d26:	2003      	movs	r0, #3
 8009d28:	f000 f960 	bl	8009fec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009d2c:	200f      	movs	r0, #15
 8009d2e:	f000 f80d 	bl	8009d4c <HAL_InitTick>
 8009d32:	4603      	mov	r3, r0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d002      	beq.n	8009d3e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	71fb      	strb	r3, [r7, #7]
 8009d3c:	e001      	b.n	8009d42 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009d3e:	f7f8 fda9 	bl	8002894 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009d42:	79fb      	ldrb	r3, [r7, #7]
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3708      	adds	r7, #8
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009d54:	2300      	movs	r3, #0
 8009d56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8009d58:	4b17      	ldr	r3, [pc, #92]	; (8009db8 <HAL_InitTick+0x6c>)
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d023      	beq.n	8009da8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8009d60:	4b16      	ldr	r3, [pc, #88]	; (8009dbc <HAL_InitTick+0x70>)
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	4b14      	ldr	r3, [pc, #80]	; (8009db8 <HAL_InitTick+0x6c>)
 8009d66:	781b      	ldrb	r3, [r3, #0]
 8009d68:	4619      	mov	r1, r3
 8009d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d76:	4618      	mov	r0, r3
 8009d78:	f000 f96d 	bl	800a056 <HAL_SYSTICK_Config>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d10f      	bne.n	8009da2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2b0f      	cmp	r3, #15
 8009d86:	d809      	bhi.n	8009d9c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009d88:	2200      	movs	r2, #0
 8009d8a:	6879      	ldr	r1, [r7, #4]
 8009d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d90:	f000 f937 	bl	800a002 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009d94:	4a0a      	ldr	r2, [pc, #40]	; (8009dc0 <HAL_InitTick+0x74>)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6013      	str	r3, [r2, #0]
 8009d9a:	e007      	b.n	8009dac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	73fb      	strb	r3, [r7, #15]
 8009da0:	e004      	b.n	8009dac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	73fb      	strb	r3, [r7, #15]
 8009da6:	e001      	b.n	8009dac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8009da8:	2301      	movs	r3, #1
 8009daa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8009dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	20000008 	.word	0x20000008
 8009dbc:	20000000 	.word	0x20000000
 8009dc0:	20000004 	.word	0x20000004

08009dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009dc8:	4b06      	ldr	r3, [pc, #24]	; (8009de4 <HAL_IncTick+0x20>)
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	461a      	mov	r2, r3
 8009dce:	4b06      	ldr	r3, [pc, #24]	; (8009de8 <HAL_IncTick+0x24>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4413      	add	r3, r2
 8009dd4:	4a04      	ldr	r2, [pc, #16]	; (8009de8 <HAL_IncTick+0x24>)
 8009dd6:	6013      	str	r3, [r2, #0]
}
 8009dd8:	bf00      	nop
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr
 8009de2:	bf00      	nop
 8009de4:	20000008 	.word	0x20000008
 8009de8:	20000840 	.word	0x20000840

08009dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009dec:	b480      	push	{r7}
 8009dee:	af00      	add	r7, sp, #0
  return uwTick;
 8009df0:	4b03      	ldr	r3, [pc, #12]	; (8009e00 <HAL_GetTick+0x14>)
 8009df2:	681b      	ldr	r3, [r3, #0]
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	20000840 	.word	0x20000840

08009e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009e0c:	f7ff ffee 	bl	8009dec <HAL_GetTick>
 8009e10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e1c:	d005      	beq.n	8009e2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8009e1e:	4b0a      	ldr	r3, [pc, #40]	; (8009e48 <HAL_Delay+0x44>)
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	461a      	mov	r2, r3
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	4413      	add	r3, r2
 8009e28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009e2a:	bf00      	nop
 8009e2c:	f7ff ffde 	bl	8009dec <HAL_GetTick>
 8009e30:	4602      	mov	r2, r0
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	1ad3      	subs	r3, r2, r3
 8009e36:	68fa      	ldr	r2, [r7, #12]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d8f7      	bhi.n	8009e2c <HAL_Delay+0x28>
  {
  }
}
 8009e3c:	bf00      	nop
 8009e3e:	bf00      	nop
 8009e40:	3710      	adds	r7, #16
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	20000008 	.word	0x20000008

08009e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f003 0307 	and.w	r3, r3, #7
 8009e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009e5c:	4b0c      	ldr	r3, [pc, #48]	; (8009e90 <__NVIC_SetPriorityGrouping+0x44>)
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009e62:	68ba      	ldr	r2, [r7, #8]
 8009e64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009e68:	4013      	ands	r3, r2
 8009e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009e74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009e7e:	4a04      	ldr	r2, [pc, #16]	; (8009e90 <__NVIC_SetPriorityGrouping+0x44>)
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	60d3      	str	r3, [r2, #12]
}
 8009e84:	bf00      	nop
 8009e86:	3714      	adds	r7, #20
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr
 8009e90:	e000ed00 	.word	0xe000ed00

08009e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009e94:	b480      	push	{r7}
 8009e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009e98:	4b04      	ldr	r3, [pc, #16]	; (8009eac <__NVIC_GetPriorityGrouping+0x18>)
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	0a1b      	lsrs	r3, r3, #8
 8009e9e:	f003 0307 	and.w	r3, r3, #7
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr
 8009eac:	e000ed00 	.word	0xe000ed00

08009eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	db0b      	blt.n	8009eda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009ec2:	79fb      	ldrb	r3, [r7, #7]
 8009ec4:	f003 021f 	and.w	r2, r3, #31
 8009ec8:	4907      	ldr	r1, [pc, #28]	; (8009ee8 <__NVIC_EnableIRQ+0x38>)
 8009eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ece:	095b      	lsrs	r3, r3, #5
 8009ed0:	2001      	movs	r0, #1
 8009ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8009ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009eda:	bf00      	nop
 8009edc:	370c      	adds	r7, #12
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr
 8009ee6:	bf00      	nop
 8009ee8:	e000e100 	.word	0xe000e100

08009eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	6039      	str	r1, [r7, #0]
 8009ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	db0a      	blt.n	8009f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	b2da      	uxtb	r2, r3
 8009f04:	490c      	ldr	r1, [pc, #48]	; (8009f38 <__NVIC_SetPriority+0x4c>)
 8009f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f0a:	0112      	lsls	r2, r2, #4
 8009f0c:	b2d2      	uxtb	r2, r2
 8009f0e:	440b      	add	r3, r1
 8009f10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009f14:	e00a      	b.n	8009f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	b2da      	uxtb	r2, r3
 8009f1a:	4908      	ldr	r1, [pc, #32]	; (8009f3c <__NVIC_SetPriority+0x50>)
 8009f1c:	79fb      	ldrb	r3, [r7, #7]
 8009f1e:	f003 030f 	and.w	r3, r3, #15
 8009f22:	3b04      	subs	r3, #4
 8009f24:	0112      	lsls	r2, r2, #4
 8009f26:	b2d2      	uxtb	r2, r2
 8009f28:	440b      	add	r3, r1
 8009f2a:	761a      	strb	r2, [r3, #24]
}
 8009f2c:	bf00      	nop
 8009f2e:	370c      	adds	r7, #12
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr
 8009f38:	e000e100 	.word	0xe000e100
 8009f3c:	e000ed00 	.word	0xe000ed00

08009f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b089      	sub	sp, #36	; 0x24
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f003 0307 	and.w	r3, r3, #7
 8009f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009f54:	69fb      	ldr	r3, [r7, #28]
 8009f56:	f1c3 0307 	rsb	r3, r3, #7
 8009f5a:	2b04      	cmp	r3, #4
 8009f5c:	bf28      	it	cs
 8009f5e:	2304      	movcs	r3, #4
 8009f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009f62:	69fb      	ldr	r3, [r7, #28]
 8009f64:	3304      	adds	r3, #4
 8009f66:	2b06      	cmp	r3, #6
 8009f68:	d902      	bls.n	8009f70 <NVIC_EncodePriority+0x30>
 8009f6a:	69fb      	ldr	r3, [r7, #28]
 8009f6c:	3b03      	subs	r3, #3
 8009f6e:	e000      	b.n	8009f72 <NVIC_EncodePriority+0x32>
 8009f70:	2300      	movs	r3, #0
 8009f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009f74:	f04f 32ff 	mov.w	r2, #4294967295
 8009f78:	69bb      	ldr	r3, [r7, #24]
 8009f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8009f7e:	43da      	mvns	r2, r3
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	401a      	ands	r2, r3
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009f88:	f04f 31ff 	mov.w	r1, #4294967295
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8009f92:	43d9      	mvns	r1, r3
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009f98:	4313      	orrs	r3, r2
         );
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3724      	adds	r7, #36	; 0x24
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr
	...

08009fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	3b01      	subs	r3, #1
 8009fb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009fb8:	d301      	bcc.n	8009fbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009fba:	2301      	movs	r3, #1
 8009fbc:	e00f      	b.n	8009fde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009fbe:	4a0a      	ldr	r2, [pc, #40]	; (8009fe8 <SysTick_Config+0x40>)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	3b01      	subs	r3, #1
 8009fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009fc6:	210f      	movs	r1, #15
 8009fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fcc:	f7ff ff8e 	bl	8009eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009fd0:	4b05      	ldr	r3, [pc, #20]	; (8009fe8 <SysTick_Config+0x40>)
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009fd6:	4b04      	ldr	r3, [pc, #16]	; (8009fe8 <SysTick_Config+0x40>)
 8009fd8:	2207      	movs	r2, #7
 8009fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009fdc:	2300      	movs	r3, #0
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3708      	adds	r7, #8
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	e000e010 	.word	0xe000e010

08009fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f7ff ff29 	bl	8009e4c <__NVIC_SetPriorityGrouping>
}
 8009ffa:	bf00      	nop
 8009ffc:	3708      	adds	r7, #8
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a002:	b580      	push	{r7, lr}
 800a004:	b086      	sub	sp, #24
 800a006:	af00      	add	r7, sp, #0
 800a008:	4603      	mov	r3, r0
 800a00a:	60b9      	str	r1, [r7, #8]
 800a00c:	607a      	str	r2, [r7, #4]
 800a00e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800a010:	2300      	movs	r3, #0
 800a012:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a014:	f7ff ff3e 	bl	8009e94 <__NVIC_GetPriorityGrouping>
 800a018:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	68b9      	ldr	r1, [r7, #8]
 800a01e:	6978      	ldr	r0, [r7, #20]
 800a020:	f7ff ff8e 	bl	8009f40 <NVIC_EncodePriority>
 800a024:	4602      	mov	r2, r0
 800a026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a02a:	4611      	mov	r1, r2
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7ff ff5d 	bl	8009eec <__NVIC_SetPriority>
}
 800a032:	bf00      	nop
 800a034:	3718      	adds	r7, #24
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b082      	sub	sp, #8
 800a03e:	af00      	add	r7, sp, #0
 800a040:	4603      	mov	r3, r0
 800a042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a048:	4618      	mov	r0, r3
 800a04a:	f7ff ff31 	bl	8009eb0 <__NVIC_EnableIRQ>
}
 800a04e:	bf00      	nop
 800a050:	3708      	adds	r7, #8
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}

0800a056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a056:	b580      	push	{r7, lr}
 800a058:	b082      	sub	sp, #8
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f7ff ffa2 	bl	8009fa8 <SysTick_Config>
 800a064:	4603      	mov	r3, r0
}
 800a066:	4618      	mov	r0, r3
 800a068:	3708      	adds	r7, #8
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}

0800a06e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a06e:	b480      	push	{r7}
 800a070:	b085      	sub	sp, #20
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a076:	2300      	movs	r3, #0
 800a078:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a080:	b2db      	uxtb	r3, r3
 800a082:	2b02      	cmp	r3, #2
 800a084:	d008      	beq.n	800a098 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2204      	movs	r2, #4
 800a08a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a094:	2301      	movs	r3, #1
 800a096:	e022      	b.n	800a0de <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	681a      	ldr	r2, [r3, #0]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f022 020e 	bic.w	r2, r2, #14
 800a0a6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f022 0201 	bic.w	r2, r2, #1
 800a0b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0bc:	f003 021c 	and.w	r2, r3, #28
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c4:	2101      	movs	r1, #1
 800a0c6:	fa01 f202 	lsl.w	r2, r1, r2
 800a0ca:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800a0dc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3714      	adds	r7, #20
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr

0800a0ea <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a0ea:	b580      	push	{r7, lr}
 800a0ec:	b084      	sub	sp, #16
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a0fc:	b2db      	uxtb	r3, r3
 800a0fe:	2b02      	cmp	r3, #2
 800a100:	d005      	beq.n	800a10e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2204      	movs	r2, #4
 800a106:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800a108:	2301      	movs	r3, #1
 800a10a:	73fb      	strb	r3, [r7, #15]
 800a10c:	e029      	b.n	800a162 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f022 020e 	bic.w	r2, r2, #14
 800a11c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f022 0201 	bic.w	r2, r2, #1
 800a12c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a132:	f003 021c 	and.w	r2, r3, #28
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a13a:	2101      	movs	r1, #1
 800a13c:	fa01 f202 	lsl.w	r2, r1, r2
 800a140:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2201      	movs	r2, #1
 800a146:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a156:	2b00      	cmp	r3, #0
 800a158:	d003      	beq.n	800a162 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	4798      	blx	r3
    }
  }
  return status;
 800a162:	7bfb      	ldrb	r3, [r7, #15]
}
 800a164:	4618      	mov	r0, r3
 800a166:	3710      	adds	r7, #16
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b087      	sub	sp, #28
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a176:	2300      	movs	r3, #0
 800a178:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a17a:	e154      	b.n	800a426 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	2101      	movs	r1, #1
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	fa01 f303 	lsl.w	r3, r1, r3
 800a188:	4013      	ands	r3, r2
 800a18a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	f000 8146 	beq.w	800a420 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	f003 0303 	and.w	r3, r3, #3
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d005      	beq.n	800a1ac <HAL_GPIO_Init+0x40>
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	f003 0303 	and.w	r3, r3, #3
 800a1a8:	2b02      	cmp	r3, #2
 800a1aa:	d130      	bne.n	800a20e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	689b      	ldr	r3, [r3, #8]
 800a1b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	005b      	lsls	r3, r3, #1
 800a1b6:	2203      	movs	r2, #3
 800a1b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a1bc:	43db      	mvns	r3, r3
 800a1be:	693a      	ldr	r2, [r7, #16]
 800a1c0:	4013      	ands	r3, r2
 800a1c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	68da      	ldr	r2, [r3, #12]
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	005b      	lsls	r3, r3, #1
 800a1cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a1d0:	693a      	ldr	r2, [r7, #16]
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	693a      	ldr	r2, [r7, #16]
 800a1da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ea:	43db      	mvns	r3, r3
 800a1ec:	693a      	ldr	r2, [r7, #16]
 800a1ee:	4013      	ands	r3, r2
 800a1f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	091b      	lsrs	r3, r3, #4
 800a1f8:	f003 0201 	and.w	r2, r3, #1
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	fa02 f303 	lsl.w	r3, r2, r3
 800a202:	693a      	ldr	r2, [r7, #16]
 800a204:	4313      	orrs	r3, r2
 800a206:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	693a      	ldr	r2, [r7, #16]
 800a20c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	f003 0303 	and.w	r3, r3, #3
 800a216:	2b03      	cmp	r3, #3
 800a218:	d017      	beq.n	800a24a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	68db      	ldr	r3, [r3, #12]
 800a21e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	005b      	lsls	r3, r3, #1
 800a224:	2203      	movs	r2, #3
 800a226:	fa02 f303 	lsl.w	r3, r2, r3
 800a22a:	43db      	mvns	r3, r3
 800a22c:	693a      	ldr	r2, [r7, #16]
 800a22e:	4013      	ands	r3, r2
 800a230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	689a      	ldr	r2, [r3, #8]
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	005b      	lsls	r3, r3, #1
 800a23a:	fa02 f303 	lsl.w	r3, r2, r3
 800a23e:	693a      	ldr	r2, [r7, #16]
 800a240:	4313      	orrs	r3, r2
 800a242:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	693a      	ldr	r2, [r7, #16]
 800a248:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	f003 0303 	and.w	r3, r3, #3
 800a252:	2b02      	cmp	r3, #2
 800a254:	d123      	bne.n	800a29e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	08da      	lsrs	r2, r3, #3
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	3208      	adds	r2, #8
 800a25e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a262:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	f003 0307 	and.w	r3, r3, #7
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	220f      	movs	r2, #15
 800a26e:	fa02 f303 	lsl.w	r3, r2, r3
 800a272:	43db      	mvns	r3, r3
 800a274:	693a      	ldr	r2, [r7, #16]
 800a276:	4013      	ands	r3, r2
 800a278:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	691a      	ldr	r2, [r3, #16]
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	f003 0307 	and.w	r3, r3, #7
 800a284:	009b      	lsls	r3, r3, #2
 800a286:	fa02 f303 	lsl.w	r3, r2, r3
 800a28a:	693a      	ldr	r2, [r7, #16]
 800a28c:	4313      	orrs	r3, r2
 800a28e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	08da      	lsrs	r2, r3, #3
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	3208      	adds	r2, #8
 800a298:	6939      	ldr	r1, [r7, #16]
 800a29a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	005b      	lsls	r3, r3, #1
 800a2a8:	2203      	movs	r2, #3
 800a2aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ae:	43db      	mvns	r3, r3
 800a2b0:	693a      	ldr	r2, [r7, #16]
 800a2b2:	4013      	ands	r3, r2
 800a2b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	f003 0203 	and.w	r2, r3, #3
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	005b      	lsls	r3, r3, #1
 800a2c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a2c6:	693a      	ldr	r2, [r7, #16]
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	693a      	ldr	r2, [r7, #16]
 800a2d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	f000 80a0 	beq.w	800a420 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a2e0:	4b58      	ldr	r3, [pc, #352]	; (800a444 <HAL_GPIO_Init+0x2d8>)
 800a2e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2e4:	4a57      	ldr	r2, [pc, #348]	; (800a444 <HAL_GPIO_Init+0x2d8>)
 800a2e6:	f043 0301 	orr.w	r3, r3, #1
 800a2ea:	6613      	str	r3, [r2, #96]	; 0x60
 800a2ec:	4b55      	ldr	r3, [pc, #340]	; (800a444 <HAL_GPIO_Init+0x2d8>)
 800a2ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2f0:	f003 0301 	and.w	r3, r3, #1
 800a2f4:	60bb      	str	r3, [r7, #8]
 800a2f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800a2f8:	4a53      	ldr	r2, [pc, #332]	; (800a448 <HAL_GPIO_Init+0x2dc>)
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	089b      	lsrs	r3, r3, #2
 800a2fe:	3302      	adds	r3, #2
 800a300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a304:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	f003 0303 	and.w	r3, r3, #3
 800a30c:	009b      	lsls	r3, r3, #2
 800a30e:	220f      	movs	r2, #15
 800a310:	fa02 f303 	lsl.w	r3, r2, r3
 800a314:	43db      	mvns	r3, r3
 800a316:	693a      	ldr	r2, [r7, #16]
 800a318:	4013      	ands	r3, r2
 800a31a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a322:	d019      	beq.n	800a358 <HAL_GPIO_Init+0x1ec>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	4a49      	ldr	r2, [pc, #292]	; (800a44c <HAL_GPIO_Init+0x2e0>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d013      	beq.n	800a354 <HAL_GPIO_Init+0x1e8>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	4a48      	ldr	r2, [pc, #288]	; (800a450 <HAL_GPIO_Init+0x2e4>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d00d      	beq.n	800a350 <HAL_GPIO_Init+0x1e4>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	4a47      	ldr	r2, [pc, #284]	; (800a454 <HAL_GPIO_Init+0x2e8>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d007      	beq.n	800a34c <HAL_GPIO_Init+0x1e0>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4a46      	ldr	r2, [pc, #280]	; (800a458 <HAL_GPIO_Init+0x2ec>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d101      	bne.n	800a348 <HAL_GPIO_Init+0x1dc>
 800a344:	2304      	movs	r3, #4
 800a346:	e008      	b.n	800a35a <HAL_GPIO_Init+0x1ee>
 800a348:	2307      	movs	r3, #7
 800a34a:	e006      	b.n	800a35a <HAL_GPIO_Init+0x1ee>
 800a34c:	2303      	movs	r3, #3
 800a34e:	e004      	b.n	800a35a <HAL_GPIO_Init+0x1ee>
 800a350:	2302      	movs	r3, #2
 800a352:	e002      	b.n	800a35a <HAL_GPIO_Init+0x1ee>
 800a354:	2301      	movs	r3, #1
 800a356:	e000      	b.n	800a35a <HAL_GPIO_Init+0x1ee>
 800a358:	2300      	movs	r3, #0
 800a35a:	697a      	ldr	r2, [r7, #20]
 800a35c:	f002 0203 	and.w	r2, r2, #3
 800a360:	0092      	lsls	r2, r2, #2
 800a362:	4093      	lsls	r3, r2
 800a364:	693a      	ldr	r2, [r7, #16]
 800a366:	4313      	orrs	r3, r2
 800a368:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a36a:	4937      	ldr	r1, [pc, #220]	; (800a448 <HAL_GPIO_Init+0x2dc>)
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	089b      	lsrs	r3, r3, #2
 800a370:	3302      	adds	r3, #2
 800a372:	693a      	ldr	r2, [r7, #16]
 800a374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a378:	4b38      	ldr	r3, [pc, #224]	; (800a45c <HAL_GPIO_Init+0x2f0>)
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	43db      	mvns	r3, r3
 800a382:	693a      	ldr	r2, [r7, #16]
 800a384:	4013      	ands	r3, r2
 800a386:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a390:	2b00      	cmp	r3, #0
 800a392:	d003      	beq.n	800a39c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800a394:	693a      	ldr	r2, [r7, #16]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	4313      	orrs	r3, r2
 800a39a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a39c:	4a2f      	ldr	r2, [pc, #188]	; (800a45c <HAL_GPIO_Init+0x2f0>)
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a3a2:	4b2e      	ldr	r3, [pc, #184]	; (800a45c <HAL_GPIO_Init+0x2f0>)
 800a3a4:	68db      	ldr	r3, [r3, #12]
 800a3a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	43db      	mvns	r3, r3
 800a3ac:	693a      	ldr	r2, [r7, #16]
 800a3ae:	4013      	ands	r3, r2
 800a3b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d003      	beq.n	800a3c6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800a3be:	693a      	ldr	r2, [r7, #16]
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a3c6:	4a25      	ldr	r2, [pc, #148]	; (800a45c <HAL_GPIO_Init+0x2f0>)
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800a3cc:	4b23      	ldr	r3, [pc, #140]	; (800a45c <HAL_GPIO_Init+0x2f0>)
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	43db      	mvns	r3, r3
 800a3d6:	693a      	ldr	r2, [r7, #16]
 800a3d8:	4013      	ands	r3, r2
 800a3da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d003      	beq.n	800a3f0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800a3e8:	693a      	ldr	r2, [r7, #16]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a3f0:	4a1a      	ldr	r2, [pc, #104]	; (800a45c <HAL_GPIO_Init+0x2f0>)
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800a3f6:	4b19      	ldr	r3, [pc, #100]	; (800a45c <HAL_GPIO_Init+0x2f0>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	43db      	mvns	r3, r3
 800a400:	693a      	ldr	r2, [r7, #16]
 800a402:	4013      	ands	r3, r2
 800a404:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d003      	beq.n	800a41a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800a412:	693a      	ldr	r2, [r7, #16]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	4313      	orrs	r3, r2
 800a418:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a41a:	4a10      	ldr	r2, [pc, #64]	; (800a45c <HAL_GPIO_Init+0x2f0>)
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	3301      	adds	r3, #1
 800a424:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	fa22 f303 	lsr.w	r3, r2, r3
 800a430:	2b00      	cmp	r3, #0
 800a432:	f47f aea3 	bne.w	800a17c <HAL_GPIO_Init+0x10>
  }
}
 800a436:	bf00      	nop
 800a438:	bf00      	nop
 800a43a:	371c      	adds	r7, #28
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr
 800a444:	40021000 	.word	0x40021000
 800a448:	40010000 	.word	0x40010000
 800a44c:	48000400 	.word	0x48000400
 800a450:	48000800 	.word	0x48000800
 800a454:	48000c00 	.word	0x48000c00
 800a458:	48001000 	.word	0x48001000
 800a45c:	40010400 	.word	0x40010400

0800a460 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a460:	b480      	push	{r7}
 800a462:	b085      	sub	sp, #20
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	460b      	mov	r3, r1
 800a46a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	691a      	ldr	r2, [r3, #16]
 800a470:	887b      	ldrh	r3, [r7, #2]
 800a472:	4013      	ands	r3, r2
 800a474:	2b00      	cmp	r3, #0
 800a476:	d002      	beq.n	800a47e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a478:	2301      	movs	r3, #1
 800a47a:	73fb      	strb	r3, [r7, #15]
 800a47c:	e001      	b.n	800a482 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a47e:	2300      	movs	r3, #0
 800a480:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a482:	7bfb      	ldrb	r3, [r7, #15]
}
 800a484:	4618      	mov	r0, r3
 800a486:	3714      	adds	r7, #20
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr

0800a490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a490:	b480      	push	{r7}
 800a492:	b083      	sub	sp, #12
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	460b      	mov	r3, r1
 800a49a:	807b      	strh	r3, [r7, #2]
 800a49c:	4613      	mov	r3, r2
 800a49e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a4a0:	787b      	ldrb	r3, [r7, #1]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d003      	beq.n	800a4ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a4a6:	887a      	ldrh	r2, [r7, #2]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a4ac:	e002      	b.n	800a4b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a4ae:	887a      	ldrh	r2, [r7, #2]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a4b4:	bf00      	nop
 800a4b6:	370c      	adds	r7, #12
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b085      	sub	sp, #20
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	695b      	ldr	r3, [r3, #20]
 800a4d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a4d2:	887a      	ldrh	r2, [r7, #2]
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	4013      	ands	r3, r2
 800a4d8:	041a      	lsls	r2, r3, #16
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	43d9      	mvns	r1, r3
 800a4de:	887b      	ldrh	r3, [r7, #2]
 800a4e0:	400b      	ands	r3, r1
 800a4e2:	431a      	orrs	r2, r3
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	619a      	str	r2, [r3, #24]
}
 800a4e8:	bf00      	nop
 800a4ea:	3714      	adds	r7, #20
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr

0800a4f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b082      	sub	sp, #8
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d101      	bne.n	800a506 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a502:	2301      	movs	r3, #1
 800a504:	e081      	b.n	800a60a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d106      	bne.n	800a520 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2200      	movs	r2, #0
 800a516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f7f8 f9de 	bl	80028dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2224      	movs	r2, #36	; 0x24
 800a524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f022 0201 	bic.w	r2, r2, #1
 800a536:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	685a      	ldr	r2, [r3, #4]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a544:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	689a      	ldr	r2, [r3, #8]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a554:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d107      	bne.n	800a56e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	689a      	ldr	r2, [r3, #8]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a56a:	609a      	str	r2, [r3, #8]
 800a56c:	e006      	b.n	800a57c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	689a      	ldr	r2, [r3, #8]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a57a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	2b02      	cmp	r3, #2
 800a582:	d104      	bne.n	800a58e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a58c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	6812      	ldr	r2, [r2, #0]
 800a598:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a59c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	68da      	ldr	r2, [r3, #12]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a5b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	691a      	ldr	r2, [r3, #16]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	695b      	ldr	r3, [r3, #20]
 800a5ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	699b      	ldr	r3, [r3, #24]
 800a5c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	430a      	orrs	r2, r1
 800a5ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	69d9      	ldr	r1, [r3, #28]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6a1a      	ldr	r2, [r3, #32]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	430a      	orrs	r2, r1
 800a5da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	681a      	ldr	r2, [r3, #0]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f042 0201 	orr.w	r2, r2, #1
 800a5ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2220      	movs	r2, #32
 800a5f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3708      	adds	r7, #8
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}

0800a612 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a612:	b480      	push	{r7}
 800a614:	b083      	sub	sp, #12
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
 800a61a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a622:	b2db      	uxtb	r3, r3
 800a624:	2b20      	cmp	r3, #32
 800a626:	d138      	bne.n	800a69a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a62e:	2b01      	cmp	r3, #1
 800a630:	d101      	bne.n	800a636 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a632:	2302      	movs	r3, #2
 800a634:	e032      	b.n	800a69c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2201      	movs	r2, #1
 800a63a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2224      	movs	r2, #36	; 0x24
 800a642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	681a      	ldr	r2, [r3, #0]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f022 0201 	bic.w	r2, r2, #1
 800a654:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a664:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	6819      	ldr	r1, [r3, #0]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	683a      	ldr	r2, [r7, #0]
 800a672:	430a      	orrs	r2, r1
 800a674:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f042 0201 	orr.w	r2, r2, #1
 800a684:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2220      	movs	r2, #32
 800a68a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a696:	2300      	movs	r3, #0
 800a698:	e000      	b.n	800a69c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a69a:	2302      	movs	r3, #2
  }
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	370c      	adds	r7, #12
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b085      	sub	sp, #20
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a6b8:	b2db      	uxtb	r3, r3
 800a6ba:	2b20      	cmp	r3, #32
 800a6bc:	d139      	bne.n	800a732 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d101      	bne.n	800a6cc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a6c8:	2302      	movs	r3, #2
 800a6ca:	e033      	b.n	800a734 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2224      	movs	r2, #36	; 0x24
 800a6d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	681a      	ldr	r2, [r3, #0]
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f022 0201 	bic.w	r2, r2, #1
 800a6ea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a6fa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	021b      	lsls	r3, r3, #8
 800a700:	68fa      	ldr	r2, [r7, #12]
 800a702:	4313      	orrs	r3, r2
 800a704:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	68fa      	ldr	r2, [r7, #12]
 800a70c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	681a      	ldr	r2, [r3, #0]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f042 0201 	orr.w	r2, r2, #1
 800a71c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2220      	movs	r2, #32
 800a722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2200      	movs	r2, #0
 800a72a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a72e:	2300      	movs	r3, #0
 800a730:	e000      	b.n	800a734 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a732:	2302      	movs	r3, #2
  }
}
 800a734:	4618      	mov	r0, r3
 800a736:	3714      	adds	r7, #20
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr

0800a740 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a740:	b480      	push	{r7}
 800a742:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800a744:	4b04      	ldr	r3, [pc, #16]	; (800a758 <HAL_PWREx_GetVoltageRange+0x18>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr
 800a756:	bf00      	nop
 800a758:	40007000 	.word	0x40007000

0800a75c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b085      	sub	sp, #20
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a76a:	d130      	bne.n	800a7ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800a76c:	4b23      	ldr	r3, [pc, #140]	; (800a7fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a778:	d038      	beq.n	800a7ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a77a:	4b20      	ldr	r3, [pc, #128]	; (800a7fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a782:	4a1e      	ldr	r2, [pc, #120]	; (800a7fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a784:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a788:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a78a:	4b1d      	ldr	r3, [pc, #116]	; (800a800 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	2232      	movs	r2, #50	; 0x32
 800a790:	fb02 f303 	mul.w	r3, r2, r3
 800a794:	4a1b      	ldr	r2, [pc, #108]	; (800a804 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800a796:	fba2 2303 	umull	r2, r3, r2, r3
 800a79a:	0c9b      	lsrs	r3, r3, #18
 800a79c:	3301      	adds	r3, #1
 800a79e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a7a0:	e002      	b.n	800a7a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	3b01      	subs	r3, #1
 800a7a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a7a8:	4b14      	ldr	r3, [pc, #80]	; (800a7fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a7aa:	695b      	ldr	r3, [r3, #20]
 800a7ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7b4:	d102      	bne.n	800a7bc <HAL_PWREx_ControlVoltageScaling+0x60>
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d1f2      	bne.n	800a7a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a7bc:	4b0f      	ldr	r3, [pc, #60]	; (800a7fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a7be:	695b      	ldr	r3, [r3, #20]
 800a7c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7c8:	d110      	bne.n	800a7ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	e00f      	b.n	800a7ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800a7ce:	4b0b      	ldr	r3, [pc, #44]	; (800a7fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a7d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7da:	d007      	beq.n	800a7ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a7dc:	4b07      	ldr	r3, [pc, #28]	; (800a7fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a7e4:	4a05      	ldr	r2, [pc, #20]	; (800a7fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a7e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a7ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3714      	adds	r7, #20
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr
 800a7fa:	bf00      	nop
 800a7fc:	40007000 	.word	0x40007000
 800a800:	20000000 	.word	0x20000000
 800a804:	431bde83 	.word	0x431bde83

0800a808 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b088      	sub	sp, #32
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d102      	bne.n	800a81c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a816:	2301      	movs	r3, #1
 800a818:	f000 bc02 	b.w	800b020 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a81c:	4b96      	ldr	r3, [pc, #600]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800a81e:	689b      	ldr	r3, [r3, #8]
 800a820:	f003 030c 	and.w	r3, r3, #12
 800a824:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a826:	4b94      	ldr	r3, [pc, #592]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800a828:	68db      	ldr	r3, [r3, #12]
 800a82a:	f003 0303 	and.w	r3, r3, #3
 800a82e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f003 0310 	and.w	r3, r3, #16
 800a838:	2b00      	cmp	r3, #0
 800a83a:	f000 80e4 	beq.w	800aa06 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a83e:	69bb      	ldr	r3, [r7, #24]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d007      	beq.n	800a854 <HAL_RCC_OscConfig+0x4c>
 800a844:	69bb      	ldr	r3, [r7, #24]
 800a846:	2b0c      	cmp	r3, #12
 800a848:	f040 808b 	bne.w	800a962 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	2b01      	cmp	r3, #1
 800a850:	f040 8087 	bne.w	800a962 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a854:	4b88      	ldr	r3, [pc, #544]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f003 0302 	and.w	r3, r3, #2
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d005      	beq.n	800a86c <HAL_RCC_OscConfig+0x64>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	699b      	ldr	r3, [r3, #24]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d101      	bne.n	800a86c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800a868:	2301      	movs	r3, #1
 800a86a:	e3d9      	b.n	800b020 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6a1a      	ldr	r2, [r3, #32]
 800a870:	4b81      	ldr	r3, [pc, #516]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f003 0308 	and.w	r3, r3, #8
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d004      	beq.n	800a886 <HAL_RCC_OscConfig+0x7e>
 800a87c:	4b7e      	ldr	r3, [pc, #504]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a884:	e005      	b.n	800a892 <HAL_RCC_OscConfig+0x8a>
 800a886:	4b7c      	ldr	r3, [pc, #496]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800a888:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a88c:	091b      	lsrs	r3, r3, #4
 800a88e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a892:	4293      	cmp	r3, r2
 800a894:	d223      	bcs.n	800a8de <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6a1b      	ldr	r3, [r3, #32]
 800a89a:	4618      	mov	r0, r3
 800a89c:	f000 fd8c 	bl	800b3b8 <RCC_SetFlashLatencyFromMSIRange>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d001      	beq.n	800a8aa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e3ba      	b.n	800b020 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a8aa:	4b73      	ldr	r3, [pc, #460]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	4a72      	ldr	r2, [pc, #456]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800a8b0:	f043 0308 	orr.w	r3, r3, #8
 800a8b4:	6013      	str	r3, [r2, #0]
 800a8b6:	4b70      	ldr	r3, [pc, #448]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6a1b      	ldr	r3, [r3, #32]
 800a8c2:	496d      	ldr	r1, [pc, #436]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a8c8:	4b6b      	ldr	r3, [pc, #428]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	69db      	ldr	r3, [r3, #28]
 800a8d4:	021b      	lsls	r3, r3, #8
 800a8d6:	4968      	ldr	r1, [pc, #416]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	604b      	str	r3, [r1, #4]
 800a8dc:	e025      	b.n	800a92a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a8de:	4b66      	ldr	r3, [pc, #408]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	4a65      	ldr	r2, [pc, #404]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800a8e4:	f043 0308 	orr.w	r3, r3, #8
 800a8e8:	6013      	str	r3, [r2, #0]
 800a8ea:	4b63      	ldr	r3, [pc, #396]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6a1b      	ldr	r3, [r3, #32]
 800a8f6:	4960      	ldr	r1, [pc, #384]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a8fc:	4b5e      	ldr	r3, [pc, #376]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	69db      	ldr	r3, [r3, #28]
 800a908:	021b      	lsls	r3, r3, #8
 800a90a:	495b      	ldr	r1, [pc, #364]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800a90c:	4313      	orrs	r3, r2
 800a90e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a910:	69bb      	ldr	r3, [r7, #24]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d109      	bne.n	800a92a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6a1b      	ldr	r3, [r3, #32]
 800a91a:	4618      	mov	r0, r3
 800a91c:	f000 fd4c 	bl	800b3b8 <RCC_SetFlashLatencyFromMSIRange>
 800a920:	4603      	mov	r3, r0
 800a922:	2b00      	cmp	r3, #0
 800a924:	d001      	beq.n	800a92a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800a926:	2301      	movs	r3, #1
 800a928:	e37a      	b.n	800b020 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a92a:	f000 fc81 	bl	800b230 <HAL_RCC_GetSysClockFreq>
 800a92e:	4602      	mov	r2, r0
 800a930:	4b51      	ldr	r3, [pc, #324]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800a932:	689b      	ldr	r3, [r3, #8]
 800a934:	091b      	lsrs	r3, r3, #4
 800a936:	f003 030f 	and.w	r3, r3, #15
 800a93a:	4950      	ldr	r1, [pc, #320]	; (800aa7c <HAL_RCC_OscConfig+0x274>)
 800a93c:	5ccb      	ldrb	r3, [r1, r3]
 800a93e:	f003 031f 	and.w	r3, r3, #31
 800a942:	fa22 f303 	lsr.w	r3, r2, r3
 800a946:	4a4e      	ldr	r2, [pc, #312]	; (800aa80 <HAL_RCC_OscConfig+0x278>)
 800a948:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a94a:	4b4e      	ldr	r3, [pc, #312]	; (800aa84 <HAL_RCC_OscConfig+0x27c>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4618      	mov	r0, r3
 800a950:	f7ff f9fc 	bl	8009d4c <HAL_InitTick>
 800a954:	4603      	mov	r3, r0
 800a956:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800a958:	7bfb      	ldrb	r3, [r7, #15]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d052      	beq.n	800aa04 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800a95e:	7bfb      	ldrb	r3, [r7, #15]
 800a960:	e35e      	b.n	800b020 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	699b      	ldr	r3, [r3, #24]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d032      	beq.n	800a9d0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a96a:	4b43      	ldr	r3, [pc, #268]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4a42      	ldr	r2, [pc, #264]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800a970:	f043 0301 	orr.w	r3, r3, #1
 800a974:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a976:	f7ff fa39 	bl	8009dec <HAL_GetTick>
 800a97a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a97c:	e008      	b.n	800a990 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a97e:	f7ff fa35 	bl	8009dec <HAL_GetTick>
 800a982:	4602      	mov	r2, r0
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	1ad3      	subs	r3, r2, r3
 800a988:	2b02      	cmp	r3, #2
 800a98a:	d901      	bls.n	800a990 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800a98c:	2303      	movs	r3, #3
 800a98e:	e347      	b.n	800b020 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a990:	4b39      	ldr	r3, [pc, #228]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f003 0302 	and.w	r3, r3, #2
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d0f0      	beq.n	800a97e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a99c:	4b36      	ldr	r3, [pc, #216]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4a35      	ldr	r2, [pc, #212]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800a9a2:	f043 0308 	orr.w	r3, r3, #8
 800a9a6:	6013      	str	r3, [r2, #0]
 800a9a8:	4b33      	ldr	r3, [pc, #204]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6a1b      	ldr	r3, [r3, #32]
 800a9b4:	4930      	ldr	r1, [pc, #192]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a9ba:	4b2f      	ldr	r3, [pc, #188]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	69db      	ldr	r3, [r3, #28]
 800a9c6:	021b      	lsls	r3, r3, #8
 800a9c8:	492b      	ldr	r1, [pc, #172]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	604b      	str	r3, [r1, #4]
 800a9ce:	e01a      	b.n	800aa06 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a9d0:	4b29      	ldr	r3, [pc, #164]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a28      	ldr	r2, [pc, #160]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800a9d6:	f023 0301 	bic.w	r3, r3, #1
 800a9da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a9dc:	f7ff fa06 	bl	8009dec <HAL_GetTick>
 800a9e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a9e2:	e008      	b.n	800a9f6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a9e4:	f7ff fa02 	bl	8009dec <HAL_GetTick>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	1ad3      	subs	r3, r2, r3
 800a9ee:	2b02      	cmp	r3, #2
 800a9f0:	d901      	bls.n	800a9f6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800a9f2:	2303      	movs	r3, #3
 800a9f4:	e314      	b.n	800b020 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a9f6:	4b20      	ldr	r3, [pc, #128]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f003 0302 	and.w	r3, r3, #2
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d1f0      	bne.n	800a9e4 <HAL_RCC_OscConfig+0x1dc>
 800aa02:	e000      	b.n	800aa06 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800aa04:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f003 0301 	and.w	r3, r3, #1
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d073      	beq.n	800aafa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800aa12:	69bb      	ldr	r3, [r7, #24]
 800aa14:	2b08      	cmp	r3, #8
 800aa16:	d005      	beq.n	800aa24 <HAL_RCC_OscConfig+0x21c>
 800aa18:	69bb      	ldr	r3, [r7, #24]
 800aa1a:	2b0c      	cmp	r3, #12
 800aa1c:	d10e      	bne.n	800aa3c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	2b03      	cmp	r3, #3
 800aa22:	d10b      	bne.n	800aa3c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa24:	4b14      	ldr	r3, [pc, #80]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d063      	beq.n	800aaf8 <HAL_RCC_OscConfig+0x2f0>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d15f      	bne.n	800aaf8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	e2f1      	b.n	800b020 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa44:	d106      	bne.n	800aa54 <HAL_RCC_OscConfig+0x24c>
 800aa46:	4b0c      	ldr	r3, [pc, #48]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4a0b      	ldr	r2, [pc, #44]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800aa4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa50:	6013      	str	r3, [r2, #0]
 800aa52:	e025      	b.n	800aaa0 <HAL_RCC_OscConfig+0x298>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aa5c:	d114      	bne.n	800aa88 <HAL_RCC_OscConfig+0x280>
 800aa5e:	4b06      	ldr	r3, [pc, #24]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	4a05      	ldr	r2, [pc, #20]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800aa64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aa68:	6013      	str	r3, [r2, #0]
 800aa6a:	4b03      	ldr	r3, [pc, #12]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a02      	ldr	r2, [pc, #8]	; (800aa78 <HAL_RCC_OscConfig+0x270>)
 800aa70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa74:	6013      	str	r3, [r2, #0]
 800aa76:	e013      	b.n	800aaa0 <HAL_RCC_OscConfig+0x298>
 800aa78:	40021000 	.word	0x40021000
 800aa7c:	0800f6b4 	.word	0x0800f6b4
 800aa80:	20000000 	.word	0x20000000
 800aa84:	20000004 	.word	0x20000004
 800aa88:	4ba0      	ldr	r3, [pc, #640]	; (800ad0c <HAL_RCC_OscConfig+0x504>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4a9f      	ldr	r2, [pc, #636]	; (800ad0c <HAL_RCC_OscConfig+0x504>)
 800aa8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa92:	6013      	str	r3, [r2, #0]
 800aa94:	4b9d      	ldr	r3, [pc, #628]	; (800ad0c <HAL_RCC_OscConfig+0x504>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4a9c      	ldr	r2, [pc, #624]	; (800ad0c <HAL_RCC_OscConfig+0x504>)
 800aa9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aa9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d013      	beq.n	800aad0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aaa8:	f7ff f9a0 	bl	8009dec <HAL_GetTick>
 800aaac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800aaae:	e008      	b.n	800aac2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aab0:	f7ff f99c 	bl	8009dec <HAL_GetTick>
 800aab4:	4602      	mov	r2, r0
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	1ad3      	subs	r3, r2, r3
 800aaba:	2b64      	cmp	r3, #100	; 0x64
 800aabc:	d901      	bls.n	800aac2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800aabe:	2303      	movs	r3, #3
 800aac0:	e2ae      	b.n	800b020 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800aac2:	4b92      	ldr	r3, [pc, #584]	; (800ad0c <HAL_RCC_OscConfig+0x504>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d0f0      	beq.n	800aab0 <HAL_RCC_OscConfig+0x2a8>
 800aace:	e014      	b.n	800aafa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aad0:	f7ff f98c 	bl	8009dec <HAL_GetTick>
 800aad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800aad6:	e008      	b.n	800aaea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aad8:	f7ff f988 	bl	8009dec <HAL_GetTick>
 800aadc:	4602      	mov	r2, r0
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	1ad3      	subs	r3, r2, r3
 800aae2:	2b64      	cmp	r3, #100	; 0x64
 800aae4:	d901      	bls.n	800aaea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800aae6:	2303      	movs	r3, #3
 800aae8:	e29a      	b.n	800b020 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800aaea:	4b88      	ldr	r3, [pc, #544]	; (800ad0c <HAL_RCC_OscConfig+0x504>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d1f0      	bne.n	800aad8 <HAL_RCC_OscConfig+0x2d0>
 800aaf6:	e000      	b.n	800aafa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aaf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f003 0302 	and.w	r3, r3, #2
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d060      	beq.n	800abc8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800ab06:	69bb      	ldr	r3, [r7, #24]
 800ab08:	2b04      	cmp	r3, #4
 800ab0a:	d005      	beq.n	800ab18 <HAL_RCC_OscConfig+0x310>
 800ab0c:	69bb      	ldr	r3, [r7, #24]
 800ab0e:	2b0c      	cmp	r3, #12
 800ab10:	d119      	bne.n	800ab46 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	2b02      	cmp	r3, #2
 800ab16:	d116      	bne.n	800ab46 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ab18:	4b7c      	ldr	r3, [pc, #496]	; (800ad0c <HAL_RCC_OscConfig+0x504>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d005      	beq.n	800ab30 <HAL_RCC_OscConfig+0x328>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	68db      	ldr	r3, [r3, #12]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d101      	bne.n	800ab30 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	e277      	b.n	800b020 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab30:	4b76      	ldr	r3, [pc, #472]	; (800ad0c <HAL_RCC_OscConfig+0x504>)
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	691b      	ldr	r3, [r3, #16]
 800ab3c:	061b      	lsls	r3, r3, #24
 800ab3e:	4973      	ldr	r1, [pc, #460]	; (800ad0c <HAL_RCC_OscConfig+0x504>)
 800ab40:	4313      	orrs	r3, r2
 800ab42:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ab44:	e040      	b.n	800abc8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	68db      	ldr	r3, [r3, #12]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d023      	beq.n	800ab96 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ab4e:	4b6f      	ldr	r3, [pc, #444]	; (800ad0c <HAL_RCC_OscConfig+0x504>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	4a6e      	ldr	r2, [pc, #440]	; (800ad0c <HAL_RCC_OscConfig+0x504>)
 800ab54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab5a:	f7ff f947 	bl	8009dec <HAL_GetTick>
 800ab5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ab60:	e008      	b.n	800ab74 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ab62:	f7ff f943 	bl	8009dec <HAL_GetTick>
 800ab66:	4602      	mov	r2, r0
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	1ad3      	subs	r3, r2, r3
 800ab6c:	2b02      	cmp	r3, #2
 800ab6e:	d901      	bls.n	800ab74 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800ab70:	2303      	movs	r3, #3
 800ab72:	e255      	b.n	800b020 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ab74:	4b65      	ldr	r3, [pc, #404]	; (800ad0c <HAL_RCC_OscConfig+0x504>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d0f0      	beq.n	800ab62 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab80:	4b62      	ldr	r3, [pc, #392]	; (800ad0c <HAL_RCC_OscConfig+0x504>)
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	691b      	ldr	r3, [r3, #16]
 800ab8c:	061b      	lsls	r3, r3, #24
 800ab8e:	495f      	ldr	r1, [pc, #380]	; (800ad0c <HAL_RCC_OscConfig+0x504>)
 800ab90:	4313      	orrs	r3, r2
 800ab92:	604b      	str	r3, [r1, #4]
 800ab94:	e018      	b.n	800abc8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ab96:	4b5d      	ldr	r3, [pc, #372]	; (800ad0c <HAL_RCC_OscConfig+0x504>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4a5c      	ldr	r2, [pc, #368]	; (800ad0c <HAL_RCC_OscConfig+0x504>)
 800ab9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aba0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aba2:	f7ff f923 	bl	8009dec <HAL_GetTick>
 800aba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800aba8:	e008      	b.n	800abbc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800abaa:	f7ff f91f 	bl	8009dec <HAL_GetTick>
 800abae:	4602      	mov	r2, r0
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	1ad3      	subs	r3, r2, r3
 800abb4:	2b02      	cmp	r3, #2
 800abb6:	d901      	bls.n	800abbc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800abb8:	2303      	movs	r3, #3
 800abba:	e231      	b.n	800b020 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800abbc:	4b53      	ldr	r3, [pc, #332]	; (800ad0c <HAL_RCC_OscConfig+0x504>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d1f0      	bne.n	800abaa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f003 0308 	and.w	r3, r3, #8
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d03c      	beq.n	800ac4e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	695b      	ldr	r3, [r3, #20]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d01c      	beq.n	800ac16 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800abdc:	4b4b      	ldr	r3, [pc, #300]	; (800ad0c <HAL_RCC_OscConfig+0x504>)
 800abde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800abe2:	4a4a      	ldr	r2, [pc, #296]	; (800ad0c <HAL_RCC_OscConfig+0x504>)
 800abe4:	f043 0301 	orr.w	r3, r3, #1
 800abe8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abec:	f7ff f8fe 	bl	8009dec <HAL_GetTick>
 800abf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800abf2:	e008      	b.n	800ac06 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800abf4:	f7ff f8fa 	bl	8009dec <HAL_GetTick>
 800abf8:	4602      	mov	r2, r0
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	1ad3      	subs	r3, r2, r3
 800abfe:	2b02      	cmp	r3, #2
 800ac00:	d901      	bls.n	800ac06 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800ac02:	2303      	movs	r3, #3
 800ac04:	e20c      	b.n	800b020 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ac06:	4b41      	ldr	r3, [pc, #260]	; (800ad0c <HAL_RCC_OscConfig+0x504>)
 800ac08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ac0c:	f003 0302 	and.w	r3, r3, #2
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d0ef      	beq.n	800abf4 <HAL_RCC_OscConfig+0x3ec>
 800ac14:	e01b      	b.n	800ac4e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ac16:	4b3d      	ldr	r3, [pc, #244]	; (800ad0c <HAL_RCC_OscConfig+0x504>)
 800ac18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ac1c:	4a3b      	ldr	r2, [pc, #236]	; (800ad0c <HAL_RCC_OscConfig+0x504>)
 800ac1e:	f023 0301 	bic.w	r3, r3, #1
 800ac22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac26:	f7ff f8e1 	bl	8009dec <HAL_GetTick>
 800ac2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ac2c:	e008      	b.n	800ac40 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ac2e:	f7ff f8dd 	bl	8009dec <HAL_GetTick>
 800ac32:	4602      	mov	r2, r0
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	1ad3      	subs	r3, r2, r3
 800ac38:	2b02      	cmp	r3, #2
 800ac3a:	d901      	bls.n	800ac40 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800ac3c:	2303      	movs	r3, #3
 800ac3e:	e1ef      	b.n	800b020 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ac40:	4b32      	ldr	r3, [pc, #200]	; (800ad0c <HAL_RCC_OscConfig+0x504>)
 800ac42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ac46:	f003 0302 	and.w	r3, r3, #2
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d1ef      	bne.n	800ac2e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f003 0304 	and.w	r3, r3, #4
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	f000 80a6 	beq.w	800ada8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800ac60:	4b2a      	ldr	r3, [pc, #168]	; (800ad0c <HAL_RCC_OscConfig+0x504>)
 800ac62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d10d      	bne.n	800ac88 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ac6c:	4b27      	ldr	r3, [pc, #156]	; (800ad0c <HAL_RCC_OscConfig+0x504>)
 800ac6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac70:	4a26      	ldr	r2, [pc, #152]	; (800ad0c <HAL_RCC_OscConfig+0x504>)
 800ac72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac76:	6593      	str	r3, [r2, #88]	; 0x58
 800ac78:	4b24      	ldr	r3, [pc, #144]	; (800ad0c <HAL_RCC_OscConfig+0x504>)
 800ac7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac80:	60bb      	str	r3, [r7, #8]
 800ac82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ac84:	2301      	movs	r3, #1
 800ac86:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ac88:	4b21      	ldr	r3, [pc, #132]	; (800ad10 <HAL_RCC_OscConfig+0x508>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d118      	bne.n	800acc6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ac94:	4b1e      	ldr	r3, [pc, #120]	; (800ad10 <HAL_RCC_OscConfig+0x508>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4a1d      	ldr	r2, [pc, #116]	; (800ad10 <HAL_RCC_OscConfig+0x508>)
 800ac9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aca0:	f7ff f8a4 	bl	8009dec <HAL_GetTick>
 800aca4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aca6:	e008      	b.n	800acba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aca8:	f7ff f8a0 	bl	8009dec <HAL_GetTick>
 800acac:	4602      	mov	r2, r0
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	1ad3      	subs	r3, r2, r3
 800acb2:	2b02      	cmp	r3, #2
 800acb4:	d901      	bls.n	800acba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800acb6:	2303      	movs	r3, #3
 800acb8:	e1b2      	b.n	800b020 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800acba:	4b15      	ldr	r3, [pc, #84]	; (800ad10 <HAL_RCC_OscConfig+0x508>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d0f0      	beq.n	800aca8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	689b      	ldr	r3, [r3, #8]
 800acca:	2b01      	cmp	r3, #1
 800accc:	d108      	bne.n	800ace0 <HAL_RCC_OscConfig+0x4d8>
 800acce:	4b0f      	ldr	r3, [pc, #60]	; (800ad0c <HAL_RCC_OscConfig+0x504>)
 800acd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acd4:	4a0d      	ldr	r2, [pc, #52]	; (800ad0c <HAL_RCC_OscConfig+0x504>)
 800acd6:	f043 0301 	orr.w	r3, r3, #1
 800acda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800acde:	e029      	b.n	800ad34 <HAL_RCC_OscConfig+0x52c>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	689b      	ldr	r3, [r3, #8]
 800ace4:	2b05      	cmp	r3, #5
 800ace6:	d115      	bne.n	800ad14 <HAL_RCC_OscConfig+0x50c>
 800ace8:	4b08      	ldr	r3, [pc, #32]	; (800ad0c <HAL_RCC_OscConfig+0x504>)
 800acea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acee:	4a07      	ldr	r2, [pc, #28]	; (800ad0c <HAL_RCC_OscConfig+0x504>)
 800acf0:	f043 0304 	orr.w	r3, r3, #4
 800acf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800acf8:	4b04      	ldr	r3, [pc, #16]	; (800ad0c <HAL_RCC_OscConfig+0x504>)
 800acfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acfe:	4a03      	ldr	r2, [pc, #12]	; (800ad0c <HAL_RCC_OscConfig+0x504>)
 800ad00:	f043 0301 	orr.w	r3, r3, #1
 800ad04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ad08:	e014      	b.n	800ad34 <HAL_RCC_OscConfig+0x52c>
 800ad0a:	bf00      	nop
 800ad0c:	40021000 	.word	0x40021000
 800ad10:	40007000 	.word	0x40007000
 800ad14:	4b9a      	ldr	r3, [pc, #616]	; (800af80 <HAL_RCC_OscConfig+0x778>)
 800ad16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad1a:	4a99      	ldr	r2, [pc, #612]	; (800af80 <HAL_RCC_OscConfig+0x778>)
 800ad1c:	f023 0301 	bic.w	r3, r3, #1
 800ad20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ad24:	4b96      	ldr	r3, [pc, #600]	; (800af80 <HAL_RCC_OscConfig+0x778>)
 800ad26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad2a:	4a95      	ldr	r2, [pc, #596]	; (800af80 <HAL_RCC_OscConfig+0x778>)
 800ad2c:	f023 0304 	bic.w	r3, r3, #4
 800ad30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	689b      	ldr	r3, [r3, #8]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d016      	beq.n	800ad6a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad3c:	f7ff f856 	bl	8009dec <HAL_GetTick>
 800ad40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ad42:	e00a      	b.n	800ad5a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad44:	f7ff f852 	bl	8009dec <HAL_GetTick>
 800ad48:	4602      	mov	r2, r0
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	1ad3      	subs	r3, r2, r3
 800ad4e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d901      	bls.n	800ad5a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800ad56:	2303      	movs	r3, #3
 800ad58:	e162      	b.n	800b020 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ad5a:	4b89      	ldr	r3, [pc, #548]	; (800af80 <HAL_RCC_OscConfig+0x778>)
 800ad5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad60:	f003 0302 	and.w	r3, r3, #2
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d0ed      	beq.n	800ad44 <HAL_RCC_OscConfig+0x53c>
 800ad68:	e015      	b.n	800ad96 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad6a:	f7ff f83f 	bl	8009dec <HAL_GetTick>
 800ad6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ad70:	e00a      	b.n	800ad88 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad72:	f7ff f83b 	bl	8009dec <HAL_GetTick>
 800ad76:	4602      	mov	r2, r0
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	1ad3      	subs	r3, r2, r3
 800ad7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d901      	bls.n	800ad88 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800ad84:	2303      	movs	r3, #3
 800ad86:	e14b      	b.n	800b020 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ad88:	4b7d      	ldr	r3, [pc, #500]	; (800af80 <HAL_RCC_OscConfig+0x778>)
 800ad8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad8e:	f003 0302 	and.w	r3, r3, #2
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d1ed      	bne.n	800ad72 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ad96:	7ffb      	ldrb	r3, [r7, #31]
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d105      	bne.n	800ada8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ad9c:	4b78      	ldr	r3, [pc, #480]	; (800af80 <HAL_RCC_OscConfig+0x778>)
 800ad9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ada0:	4a77      	ldr	r2, [pc, #476]	; (800af80 <HAL_RCC_OscConfig+0x778>)
 800ada2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ada6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f003 0320 	and.w	r3, r3, #32
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d03c      	beq.n	800ae2e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d01c      	beq.n	800adf6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800adbc:	4b70      	ldr	r3, [pc, #448]	; (800af80 <HAL_RCC_OscConfig+0x778>)
 800adbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800adc2:	4a6f      	ldr	r2, [pc, #444]	; (800af80 <HAL_RCC_OscConfig+0x778>)
 800adc4:	f043 0301 	orr.w	r3, r3, #1
 800adc8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800adcc:	f7ff f80e 	bl	8009dec <HAL_GetTick>
 800add0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800add2:	e008      	b.n	800ade6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800add4:	f7ff f80a 	bl	8009dec <HAL_GetTick>
 800add8:	4602      	mov	r2, r0
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	1ad3      	subs	r3, r2, r3
 800adde:	2b02      	cmp	r3, #2
 800ade0:	d901      	bls.n	800ade6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800ade2:	2303      	movs	r3, #3
 800ade4:	e11c      	b.n	800b020 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800ade6:	4b66      	ldr	r3, [pc, #408]	; (800af80 <HAL_RCC_OscConfig+0x778>)
 800ade8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800adec:	f003 0302 	and.w	r3, r3, #2
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d0ef      	beq.n	800add4 <HAL_RCC_OscConfig+0x5cc>
 800adf4:	e01b      	b.n	800ae2e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800adf6:	4b62      	ldr	r3, [pc, #392]	; (800af80 <HAL_RCC_OscConfig+0x778>)
 800adf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800adfc:	4a60      	ldr	r2, [pc, #384]	; (800af80 <HAL_RCC_OscConfig+0x778>)
 800adfe:	f023 0301 	bic.w	r3, r3, #1
 800ae02:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae06:	f7fe fff1 	bl	8009dec <HAL_GetTick>
 800ae0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ae0c:	e008      	b.n	800ae20 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ae0e:	f7fe ffed 	bl	8009dec <HAL_GetTick>
 800ae12:	4602      	mov	r2, r0
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	1ad3      	subs	r3, r2, r3
 800ae18:	2b02      	cmp	r3, #2
 800ae1a:	d901      	bls.n	800ae20 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800ae1c:	2303      	movs	r3, #3
 800ae1e:	e0ff      	b.n	800b020 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ae20:	4b57      	ldr	r3, [pc, #348]	; (800af80 <HAL_RCC_OscConfig+0x778>)
 800ae22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ae26:	f003 0302 	and.w	r3, r3, #2
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d1ef      	bne.n	800ae0e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	f000 80f3 	beq.w	800b01e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae3c:	2b02      	cmp	r3, #2
 800ae3e:	f040 80c9 	bne.w	800afd4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800ae42:	4b4f      	ldr	r3, [pc, #316]	; (800af80 <HAL_RCC_OscConfig+0x778>)
 800ae44:	68db      	ldr	r3, [r3, #12]
 800ae46:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	f003 0203 	and.w	r2, r3, #3
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d12c      	bne.n	800aeb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae60:	3b01      	subs	r3, #1
 800ae62:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d123      	bne.n	800aeb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae72:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d11b      	bne.n	800aeb0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae82:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d113      	bne.n	800aeb0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae92:	085b      	lsrs	r3, r3, #1
 800ae94:	3b01      	subs	r3, #1
 800ae96:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d109      	bne.n	800aeb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aea6:	085b      	lsrs	r3, r3, #1
 800aea8:	3b01      	subs	r3, #1
 800aeaa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d06b      	beq.n	800af88 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800aeb0:	69bb      	ldr	r3, [r7, #24]
 800aeb2:	2b0c      	cmp	r3, #12
 800aeb4:	d062      	beq.n	800af7c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800aeb6:	4b32      	ldr	r3, [pc, #200]	; (800af80 <HAL_RCC_OscConfig+0x778>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d001      	beq.n	800aec6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800aec2:	2301      	movs	r3, #1
 800aec4:	e0ac      	b.n	800b020 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800aec6:	4b2e      	ldr	r3, [pc, #184]	; (800af80 <HAL_RCC_OscConfig+0x778>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	4a2d      	ldr	r2, [pc, #180]	; (800af80 <HAL_RCC_OscConfig+0x778>)
 800aecc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aed0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800aed2:	f7fe ff8b 	bl	8009dec <HAL_GetTick>
 800aed6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aed8:	e008      	b.n	800aeec <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aeda:	f7fe ff87 	bl	8009dec <HAL_GetTick>
 800aede:	4602      	mov	r2, r0
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	1ad3      	subs	r3, r2, r3
 800aee4:	2b02      	cmp	r3, #2
 800aee6:	d901      	bls.n	800aeec <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800aee8:	2303      	movs	r3, #3
 800aeea:	e099      	b.n	800b020 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aeec:	4b24      	ldr	r3, [pc, #144]	; (800af80 <HAL_RCC_OscConfig+0x778>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d1f0      	bne.n	800aeda <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aef8:	4b21      	ldr	r3, [pc, #132]	; (800af80 <HAL_RCC_OscConfig+0x778>)
 800aefa:	68da      	ldr	r2, [r3, #12]
 800aefc:	4b21      	ldr	r3, [pc, #132]	; (800af84 <HAL_RCC_OscConfig+0x77c>)
 800aefe:	4013      	ands	r3, r2
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800af08:	3a01      	subs	r2, #1
 800af0a:	0112      	lsls	r2, r2, #4
 800af0c:	4311      	orrs	r1, r2
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800af12:	0212      	lsls	r2, r2, #8
 800af14:	4311      	orrs	r1, r2
 800af16:	687a      	ldr	r2, [r7, #4]
 800af18:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800af1a:	0852      	lsrs	r2, r2, #1
 800af1c:	3a01      	subs	r2, #1
 800af1e:	0552      	lsls	r2, r2, #21
 800af20:	4311      	orrs	r1, r2
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800af26:	0852      	lsrs	r2, r2, #1
 800af28:	3a01      	subs	r2, #1
 800af2a:	0652      	lsls	r2, r2, #25
 800af2c:	4311      	orrs	r1, r2
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800af32:	06d2      	lsls	r2, r2, #27
 800af34:	430a      	orrs	r2, r1
 800af36:	4912      	ldr	r1, [pc, #72]	; (800af80 <HAL_RCC_OscConfig+0x778>)
 800af38:	4313      	orrs	r3, r2
 800af3a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800af3c:	4b10      	ldr	r3, [pc, #64]	; (800af80 <HAL_RCC_OscConfig+0x778>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4a0f      	ldr	r2, [pc, #60]	; (800af80 <HAL_RCC_OscConfig+0x778>)
 800af42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800af46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800af48:	4b0d      	ldr	r3, [pc, #52]	; (800af80 <HAL_RCC_OscConfig+0x778>)
 800af4a:	68db      	ldr	r3, [r3, #12]
 800af4c:	4a0c      	ldr	r2, [pc, #48]	; (800af80 <HAL_RCC_OscConfig+0x778>)
 800af4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800af52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800af54:	f7fe ff4a 	bl	8009dec <HAL_GetTick>
 800af58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800af5a:	e008      	b.n	800af6e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af5c:	f7fe ff46 	bl	8009dec <HAL_GetTick>
 800af60:	4602      	mov	r2, r0
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	1ad3      	subs	r3, r2, r3
 800af66:	2b02      	cmp	r3, #2
 800af68:	d901      	bls.n	800af6e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800af6a:	2303      	movs	r3, #3
 800af6c:	e058      	b.n	800b020 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800af6e:	4b04      	ldr	r3, [pc, #16]	; (800af80 <HAL_RCC_OscConfig+0x778>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af76:	2b00      	cmp	r3, #0
 800af78:	d0f0      	beq.n	800af5c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800af7a:	e050      	b.n	800b01e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800af7c:	2301      	movs	r3, #1
 800af7e:	e04f      	b.n	800b020 <HAL_RCC_OscConfig+0x818>
 800af80:	40021000 	.word	0x40021000
 800af84:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800af88:	4b27      	ldr	r3, [pc, #156]	; (800b028 <HAL_RCC_OscConfig+0x820>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af90:	2b00      	cmp	r3, #0
 800af92:	d144      	bne.n	800b01e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800af94:	4b24      	ldr	r3, [pc, #144]	; (800b028 <HAL_RCC_OscConfig+0x820>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4a23      	ldr	r2, [pc, #140]	; (800b028 <HAL_RCC_OscConfig+0x820>)
 800af9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800af9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800afa0:	4b21      	ldr	r3, [pc, #132]	; (800b028 <HAL_RCC_OscConfig+0x820>)
 800afa2:	68db      	ldr	r3, [r3, #12]
 800afa4:	4a20      	ldr	r2, [pc, #128]	; (800b028 <HAL_RCC_OscConfig+0x820>)
 800afa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800afaa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800afac:	f7fe ff1e 	bl	8009dec <HAL_GetTick>
 800afb0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800afb2:	e008      	b.n	800afc6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800afb4:	f7fe ff1a 	bl	8009dec <HAL_GetTick>
 800afb8:	4602      	mov	r2, r0
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	1ad3      	subs	r3, r2, r3
 800afbe:	2b02      	cmp	r3, #2
 800afc0:	d901      	bls.n	800afc6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800afc2:	2303      	movs	r3, #3
 800afc4:	e02c      	b.n	800b020 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800afc6:	4b18      	ldr	r3, [pc, #96]	; (800b028 <HAL_RCC_OscConfig+0x820>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d0f0      	beq.n	800afb4 <HAL_RCC_OscConfig+0x7ac>
 800afd2:	e024      	b.n	800b01e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800afd4:	69bb      	ldr	r3, [r7, #24]
 800afd6:	2b0c      	cmp	r3, #12
 800afd8:	d01f      	beq.n	800b01a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800afda:	4b13      	ldr	r3, [pc, #76]	; (800b028 <HAL_RCC_OscConfig+0x820>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4a12      	ldr	r2, [pc, #72]	; (800b028 <HAL_RCC_OscConfig+0x820>)
 800afe0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800afe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afe6:	f7fe ff01 	bl	8009dec <HAL_GetTick>
 800afea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800afec:	e008      	b.n	800b000 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800afee:	f7fe fefd 	bl	8009dec <HAL_GetTick>
 800aff2:	4602      	mov	r2, r0
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	1ad3      	subs	r3, r2, r3
 800aff8:	2b02      	cmp	r3, #2
 800affa:	d901      	bls.n	800b000 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800affc:	2303      	movs	r3, #3
 800affe:	e00f      	b.n	800b020 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b000:	4b09      	ldr	r3, [pc, #36]	; (800b028 <HAL_RCC_OscConfig+0x820>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d1f0      	bne.n	800afee <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800b00c:	4b06      	ldr	r3, [pc, #24]	; (800b028 <HAL_RCC_OscConfig+0x820>)
 800b00e:	68da      	ldr	r2, [r3, #12]
 800b010:	4905      	ldr	r1, [pc, #20]	; (800b028 <HAL_RCC_OscConfig+0x820>)
 800b012:	4b06      	ldr	r3, [pc, #24]	; (800b02c <HAL_RCC_OscConfig+0x824>)
 800b014:	4013      	ands	r3, r2
 800b016:	60cb      	str	r3, [r1, #12]
 800b018:	e001      	b.n	800b01e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800b01a:	2301      	movs	r3, #1
 800b01c:	e000      	b.n	800b020 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800b01e:	2300      	movs	r3, #0
}
 800b020:	4618      	mov	r0, r3
 800b022:	3720      	adds	r7, #32
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}
 800b028:	40021000 	.word	0x40021000
 800b02c:	feeefffc 	.word	0xfeeefffc

0800b030 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b084      	sub	sp, #16
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d101      	bne.n	800b044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b040:	2301      	movs	r3, #1
 800b042:	e0e7      	b.n	800b214 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b044:	4b75      	ldr	r3, [pc, #468]	; (800b21c <HAL_RCC_ClockConfig+0x1ec>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f003 0307 	and.w	r3, r3, #7
 800b04c:	683a      	ldr	r2, [r7, #0]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d910      	bls.n	800b074 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b052:	4b72      	ldr	r3, [pc, #456]	; (800b21c <HAL_RCC_ClockConfig+0x1ec>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f023 0207 	bic.w	r2, r3, #7
 800b05a:	4970      	ldr	r1, [pc, #448]	; (800b21c <HAL_RCC_ClockConfig+0x1ec>)
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	4313      	orrs	r3, r2
 800b060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b062:	4b6e      	ldr	r3, [pc, #440]	; (800b21c <HAL_RCC_ClockConfig+0x1ec>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f003 0307 	and.w	r3, r3, #7
 800b06a:	683a      	ldr	r2, [r7, #0]
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d001      	beq.n	800b074 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b070:	2301      	movs	r3, #1
 800b072:	e0cf      	b.n	800b214 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f003 0302 	and.w	r3, r3, #2
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d010      	beq.n	800b0a2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	689a      	ldr	r2, [r3, #8]
 800b084:	4b66      	ldr	r3, [pc, #408]	; (800b220 <HAL_RCC_ClockConfig+0x1f0>)
 800b086:	689b      	ldr	r3, [r3, #8]
 800b088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d908      	bls.n	800b0a2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b090:	4b63      	ldr	r3, [pc, #396]	; (800b220 <HAL_RCC_ClockConfig+0x1f0>)
 800b092:	689b      	ldr	r3, [r3, #8]
 800b094:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	689b      	ldr	r3, [r3, #8]
 800b09c:	4960      	ldr	r1, [pc, #384]	; (800b220 <HAL_RCC_ClockConfig+0x1f0>)
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f003 0301 	and.w	r3, r3, #1
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d04c      	beq.n	800b148 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	2b03      	cmp	r3, #3
 800b0b4:	d107      	bne.n	800b0c6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b0b6:	4b5a      	ldr	r3, [pc, #360]	; (800b220 <HAL_RCC_ClockConfig+0x1f0>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d121      	bne.n	800b106 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e0a6      	b.n	800b214 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	2b02      	cmp	r3, #2
 800b0cc:	d107      	bne.n	800b0de <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b0ce:	4b54      	ldr	r3, [pc, #336]	; (800b220 <HAL_RCC_ClockConfig+0x1f0>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d115      	bne.n	800b106 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	e09a      	b.n	800b214 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d107      	bne.n	800b0f6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b0e6:	4b4e      	ldr	r3, [pc, #312]	; (800b220 <HAL_RCC_ClockConfig+0x1f0>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f003 0302 	and.w	r3, r3, #2
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d109      	bne.n	800b106 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	e08e      	b.n	800b214 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b0f6:	4b4a      	ldr	r3, [pc, #296]	; (800b220 <HAL_RCC_ClockConfig+0x1f0>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d101      	bne.n	800b106 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b102:	2301      	movs	r3, #1
 800b104:	e086      	b.n	800b214 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b106:	4b46      	ldr	r3, [pc, #280]	; (800b220 <HAL_RCC_ClockConfig+0x1f0>)
 800b108:	689b      	ldr	r3, [r3, #8]
 800b10a:	f023 0203 	bic.w	r2, r3, #3
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	4943      	ldr	r1, [pc, #268]	; (800b220 <HAL_RCC_ClockConfig+0x1f0>)
 800b114:	4313      	orrs	r3, r2
 800b116:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b118:	f7fe fe68 	bl	8009dec <HAL_GetTick>
 800b11c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b11e:	e00a      	b.n	800b136 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b120:	f7fe fe64 	bl	8009dec <HAL_GetTick>
 800b124:	4602      	mov	r2, r0
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	1ad3      	subs	r3, r2, r3
 800b12a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b12e:	4293      	cmp	r3, r2
 800b130:	d901      	bls.n	800b136 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800b132:	2303      	movs	r3, #3
 800b134:	e06e      	b.n	800b214 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b136:	4b3a      	ldr	r3, [pc, #232]	; (800b220 <HAL_RCC_ClockConfig+0x1f0>)
 800b138:	689b      	ldr	r3, [r3, #8]
 800b13a:	f003 020c 	and.w	r2, r3, #12
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	009b      	lsls	r3, r3, #2
 800b144:	429a      	cmp	r2, r3
 800b146:	d1eb      	bne.n	800b120 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f003 0302 	and.w	r3, r3, #2
 800b150:	2b00      	cmp	r3, #0
 800b152:	d010      	beq.n	800b176 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	689a      	ldr	r2, [r3, #8]
 800b158:	4b31      	ldr	r3, [pc, #196]	; (800b220 <HAL_RCC_ClockConfig+0x1f0>)
 800b15a:	689b      	ldr	r3, [r3, #8]
 800b15c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b160:	429a      	cmp	r2, r3
 800b162:	d208      	bcs.n	800b176 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b164:	4b2e      	ldr	r3, [pc, #184]	; (800b220 <HAL_RCC_ClockConfig+0x1f0>)
 800b166:	689b      	ldr	r3, [r3, #8]
 800b168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	689b      	ldr	r3, [r3, #8]
 800b170:	492b      	ldr	r1, [pc, #172]	; (800b220 <HAL_RCC_ClockConfig+0x1f0>)
 800b172:	4313      	orrs	r3, r2
 800b174:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b176:	4b29      	ldr	r3, [pc, #164]	; (800b21c <HAL_RCC_ClockConfig+0x1ec>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f003 0307 	and.w	r3, r3, #7
 800b17e:	683a      	ldr	r2, [r7, #0]
 800b180:	429a      	cmp	r2, r3
 800b182:	d210      	bcs.n	800b1a6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b184:	4b25      	ldr	r3, [pc, #148]	; (800b21c <HAL_RCC_ClockConfig+0x1ec>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f023 0207 	bic.w	r2, r3, #7
 800b18c:	4923      	ldr	r1, [pc, #140]	; (800b21c <HAL_RCC_ClockConfig+0x1ec>)
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	4313      	orrs	r3, r2
 800b192:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b194:	4b21      	ldr	r3, [pc, #132]	; (800b21c <HAL_RCC_ClockConfig+0x1ec>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f003 0307 	and.w	r3, r3, #7
 800b19c:	683a      	ldr	r2, [r7, #0]
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d001      	beq.n	800b1a6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	e036      	b.n	800b214 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f003 0304 	and.w	r3, r3, #4
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d008      	beq.n	800b1c4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b1b2:	4b1b      	ldr	r3, [pc, #108]	; (800b220 <HAL_RCC_ClockConfig+0x1f0>)
 800b1b4:	689b      	ldr	r3, [r3, #8]
 800b1b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	4918      	ldr	r1, [pc, #96]	; (800b220 <HAL_RCC_ClockConfig+0x1f0>)
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f003 0308 	and.w	r3, r3, #8
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d009      	beq.n	800b1e4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b1d0:	4b13      	ldr	r3, [pc, #76]	; (800b220 <HAL_RCC_ClockConfig+0x1f0>)
 800b1d2:	689b      	ldr	r3, [r3, #8]
 800b1d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	691b      	ldr	r3, [r3, #16]
 800b1dc:	00db      	lsls	r3, r3, #3
 800b1de:	4910      	ldr	r1, [pc, #64]	; (800b220 <HAL_RCC_ClockConfig+0x1f0>)
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b1e4:	f000 f824 	bl	800b230 <HAL_RCC_GetSysClockFreq>
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	4b0d      	ldr	r3, [pc, #52]	; (800b220 <HAL_RCC_ClockConfig+0x1f0>)
 800b1ec:	689b      	ldr	r3, [r3, #8]
 800b1ee:	091b      	lsrs	r3, r3, #4
 800b1f0:	f003 030f 	and.w	r3, r3, #15
 800b1f4:	490b      	ldr	r1, [pc, #44]	; (800b224 <HAL_RCC_ClockConfig+0x1f4>)
 800b1f6:	5ccb      	ldrb	r3, [r1, r3]
 800b1f8:	f003 031f 	and.w	r3, r3, #31
 800b1fc:	fa22 f303 	lsr.w	r3, r2, r3
 800b200:	4a09      	ldr	r2, [pc, #36]	; (800b228 <HAL_RCC_ClockConfig+0x1f8>)
 800b202:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800b204:	4b09      	ldr	r3, [pc, #36]	; (800b22c <HAL_RCC_ClockConfig+0x1fc>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	4618      	mov	r0, r3
 800b20a:	f7fe fd9f 	bl	8009d4c <HAL_InitTick>
 800b20e:	4603      	mov	r3, r0
 800b210:	72fb      	strb	r3, [r7, #11]

  return status;
 800b212:	7afb      	ldrb	r3, [r7, #11]
}
 800b214:	4618      	mov	r0, r3
 800b216:	3710      	adds	r7, #16
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	40022000 	.word	0x40022000
 800b220:	40021000 	.word	0x40021000
 800b224:	0800f6b4 	.word	0x0800f6b4
 800b228:	20000000 	.word	0x20000000
 800b22c:	20000004 	.word	0x20000004

0800b230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b230:	b480      	push	{r7}
 800b232:	b089      	sub	sp, #36	; 0x24
 800b234:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800b236:	2300      	movs	r3, #0
 800b238:	61fb      	str	r3, [r7, #28]
 800b23a:	2300      	movs	r3, #0
 800b23c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b23e:	4b3e      	ldr	r3, [pc, #248]	; (800b338 <HAL_RCC_GetSysClockFreq+0x108>)
 800b240:	689b      	ldr	r3, [r3, #8]
 800b242:	f003 030c 	and.w	r3, r3, #12
 800b246:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b248:	4b3b      	ldr	r3, [pc, #236]	; (800b338 <HAL_RCC_GetSysClockFreq+0x108>)
 800b24a:	68db      	ldr	r3, [r3, #12]
 800b24c:	f003 0303 	and.w	r3, r3, #3
 800b250:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d005      	beq.n	800b264 <HAL_RCC_GetSysClockFreq+0x34>
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	2b0c      	cmp	r3, #12
 800b25c:	d121      	bne.n	800b2a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2b01      	cmp	r3, #1
 800b262:	d11e      	bne.n	800b2a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800b264:	4b34      	ldr	r3, [pc, #208]	; (800b338 <HAL_RCC_GetSysClockFreq+0x108>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f003 0308 	and.w	r3, r3, #8
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d107      	bne.n	800b280 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800b270:	4b31      	ldr	r3, [pc, #196]	; (800b338 <HAL_RCC_GetSysClockFreq+0x108>)
 800b272:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b276:	0a1b      	lsrs	r3, r3, #8
 800b278:	f003 030f 	and.w	r3, r3, #15
 800b27c:	61fb      	str	r3, [r7, #28]
 800b27e:	e005      	b.n	800b28c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800b280:	4b2d      	ldr	r3, [pc, #180]	; (800b338 <HAL_RCC_GetSysClockFreq+0x108>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	091b      	lsrs	r3, r3, #4
 800b286:	f003 030f 	and.w	r3, r3, #15
 800b28a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b28c:	4a2b      	ldr	r2, [pc, #172]	; (800b33c <HAL_RCC_GetSysClockFreq+0x10c>)
 800b28e:	69fb      	ldr	r3, [r7, #28]
 800b290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b294:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d10d      	bne.n	800b2b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b29c:	69fb      	ldr	r3, [r7, #28]
 800b29e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b2a0:	e00a      	b.n	800b2b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	2b04      	cmp	r3, #4
 800b2a6:	d102      	bne.n	800b2ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b2a8:	4b25      	ldr	r3, [pc, #148]	; (800b340 <HAL_RCC_GetSysClockFreq+0x110>)
 800b2aa:	61bb      	str	r3, [r7, #24]
 800b2ac:	e004      	b.n	800b2b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	2b08      	cmp	r3, #8
 800b2b2:	d101      	bne.n	800b2b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b2b4:	4b23      	ldr	r3, [pc, #140]	; (800b344 <HAL_RCC_GetSysClockFreq+0x114>)
 800b2b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	2b0c      	cmp	r3, #12
 800b2bc:	d134      	bne.n	800b328 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b2be:	4b1e      	ldr	r3, [pc, #120]	; (800b338 <HAL_RCC_GetSysClockFreq+0x108>)
 800b2c0:	68db      	ldr	r3, [r3, #12]
 800b2c2:	f003 0303 	and.w	r3, r3, #3
 800b2c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	2b02      	cmp	r3, #2
 800b2cc:	d003      	beq.n	800b2d6 <HAL_RCC_GetSysClockFreq+0xa6>
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	2b03      	cmp	r3, #3
 800b2d2:	d003      	beq.n	800b2dc <HAL_RCC_GetSysClockFreq+0xac>
 800b2d4:	e005      	b.n	800b2e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800b2d6:	4b1a      	ldr	r3, [pc, #104]	; (800b340 <HAL_RCC_GetSysClockFreq+0x110>)
 800b2d8:	617b      	str	r3, [r7, #20]
      break;
 800b2da:	e005      	b.n	800b2e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800b2dc:	4b19      	ldr	r3, [pc, #100]	; (800b344 <HAL_RCC_GetSysClockFreq+0x114>)
 800b2de:	617b      	str	r3, [r7, #20]
      break;
 800b2e0:	e002      	b.n	800b2e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800b2e2:	69fb      	ldr	r3, [r7, #28]
 800b2e4:	617b      	str	r3, [r7, #20]
      break;
 800b2e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b2e8:	4b13      	ldr	r3, [pc, #76]	; (800b338 <HAL_RCC_GetSysClockFreq+0x108>)
 800b2ea:	68db      	ldr	r3, [r3, #12]
 800b2ec:	091b      	lsrs	r3, r3, #4
 800b2ee:	f003 0307 	and.w	r3, r3, #7
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800b2f6:	4b10      	ldr	r3, [pc, #64]	; (800b338 <HAL_RCC_GetSysClockFreq+0x108>)
 800b2f8:	68db      	ldr	r3, [r3, #12]
 800b2fa:	0a1b      	lsrs	r3, r3, #8
 800b2fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b300:	697a      	ldr	r2, [r7, #20]
 800b302:	fb03 f202 	mul.w	r2, r3, r2
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	fbb2 f3f3 	udiv	r3, r2, r3
 800b30c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b30e:	4b0a      	ldr	r3, [pc, #40]	; (800b338 <HAL_RCC_GetSysClockFreq+0x108>)
 800b310:	68db      	ldr	r3, [r3, #12]
 800b312:	0e5b      	lsrs	r3, r3, #25
 800b314:	f003 0303 	and.w	r3, r3, #3
 800b318:	3301      	adds	r3, #1
 800b31a:	005b      	lsls	r3, r3, #1
 800b31c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800b31e:	697a      	ldr	r2, [r7, #20]
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	fbb2 f3f3 	udiv	r3, r2, r3
 800b326:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800b328:	69bb      	ldr	r3, [r7, #24]
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3724      	adds	r7, #36	; 0x24
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr
 800b336:	bf00      	nop
 800b338:	40021000 	.word	0x40021000
 800b33c:	0800f6cc 	.word	0x0800f6cc
 800b340:	00f42400 	.word	0x00f42400
 800b344:	007a1200 	.word	0x007a1200

0800b348 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b348:	b480      	push	{r7}
 800b34a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b34c:	4b03      	ldr	r3, [pc, #12]	; (800b35c <HAL_RCC_GetHCLKFreq+0x14>)
 800b34e:	681b      	ldr	r3, [r3, #0]
}
 800b350:	4618      	mov	r0, r3
 800b352:	46bd      	mov	sp, r7
 800b354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b358:	4770      	bx	lr
 800b35a:	bf00      	nop
 800b35c:	20000000 	.word	0x20000000

0800b360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b364:	f7ff fff0 	bl	800b348 <HAL_RCC_GetHCLKFreq>
 800b368:	4602      	mov	r2, r0
 800b36a:	4b06      	ldr	r3, [pc, #24]	; (800b384 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b36c:	689b      	ldr	r3, [r3, #8]
 800b36e:	0a1b      	lsrs	r3, r3, #8
 800b370:	f003 0307 	and.w	r3, r3, #7
 800b374:	4904      	ldr	r1, [pc, #16]	; (800b388 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b376:	5ccb      	ldrb	r3, [r1, r3]
 800b378:	f003 031f 	and.w	r3, r3, #31
 800b37c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b380:	4618      	mov	r0, r3
 800b382:	bd80      	pop	{r7, pc}
 800b384:	40021000 	.word	0x40021000
 800b388:	0800f6c4 	.word	0x0800f6c4

0800b38c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b390:	f7ff ffda 	bl	800b348 <HAL_RCC_GetHCLKFreq>
 800b394:	4602      	mov	r2, r0
 800b396:	4b06      	ldr	r3, [pc, #24]	; (800b3b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b398:	689b      	ldr	r3, [r3, #8]
 800b39a:	0adb      	lsrs	r3, r3, #11
 800b39c:	f003 0307 	and.w	r3, r3, #7
 800b3a0:	4904      	ldr	r1, [pc, #16]	; (800b3b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b3a2:	5ccb      	ldrb	r3, [r1, r3]
 800b3a4:	f003 031f 	and.w	r3, r3, #31
 800b3a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	bd80      	pop	{r7, pc}
 800b3b0:	40021000 	.word	0x40021000
 800b3b4:	0800f6c4 	.word	0x0800f6c4

0800b3b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b086      	sub	sp, #24
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b3c4:	4b2a      	ldr	r3, [pc, #168]	; (800b470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b3c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d003      	beq.n	800b3d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b3d0:	f7ff f9b6 	bl	800a740 <HAL_PWREx_GetVoltageRange>
 800b3d4:	6178      	str	r0, [r7, #20]
 800b3d6:	e014      	b.n	800b402 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b3d8:	4b25      	ldr	r3, [pc, #148]	; (800b470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b3da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3dc:	4a24      	ldr	r2, [pc, #144]	; (800b470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b3de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3e2:	6593      	str	r3, [r2, #88]	; 0x58
 800b3e4:	4b22      	ldr	r3, [pc, #136]	; (800b470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b3e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3ec:	60fb      	str	r3, [r7, #12]
 800b3ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b3f0:	f7ff f9a6 	bl	800a740 <HAL_PWREx_GetVoltageRange>
 800b3f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b3f6:	4b1e      	ldr	r3, [pc, #120]	; (800b470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b3f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3fa:	4a1d      	ldr	r2, [pc, #116]	; (800b470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b3fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b400:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b408:	d10b      	bne.n	800b422 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2b80      	cmp	r3, #128	; 0x80
 800b40e:	d919      	bls.n	800b444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2ba0      	cmp	r3, #160	; 0xa0
 800b414:	d902      	bls.n	800b41c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b416:	2302      	movs	r3, #2
 800b418:	613b      	str	r3, [r7, #16]
 800b41a:	e013      	b.n	800b444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b41c:	2301      	movs	r3, #1
 800b41e:	613b      	str	r3, [r7, #16]
 800b420:	e010      	b.n	800b444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2b80      	cmp	r3, #128	; 0x80
 800b426:	d902      	bls.n	800b42e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800b428:	2303      	movs	r3, #3
 800b42a:	613b      	str	r3, [r7, #16]
 800b42c:	e00a      	b.n	800b444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2b80      	cmp	r3, #128	; 0x80
 800b432:	d102      	bne.n	800b43a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b434:	2302      	movs	r3, #2
 800b436:	613b      	str	r3, [r7, #16]
 800b438:	e004      	b.n	800b444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2b70      	cmp	r3, #112	; 0x70
 800b43e:	d101      	bne.n	800b444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b440:	2301      	movs	r3, #1
 800b442:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b444:	4b0b      	ldr	r3, [pc, #44]	; (800b474 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f023 0207 	bic.w	r2, r3, #7
 800b44c:	4909      	ldr	r1, [pc, #36]	; (800b474 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	4313      	orrs	r3, r2
 800b452:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800b454:	4b07      	ldr	r3, [pc, #28]	; (800b474 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f003 0307 	and.w	r3, r3, #7
 800b45c:	693a      	ldr	r2, [r7, #16]
 800b45e:	429a      	cmp	r2, r3
 800b460:	d001      	beq.n	800b466 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800b462:	2301      	movs	r3, #1
 800b464:	e000      	b.n	800b468 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800b466:	2300      	movs	r3, #0
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3718      	adds	r7, #24
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	40021000 	.word	0x40021000
 800b474:	40022000 	.word	0x40022000

0800b478 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b086      	sub	sp, #24
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b480:	2300      	movs	r3, #0
 800b482:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b484:	2300      	movs	r3, #0
 800b486:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b490:	2b00      	cmp	r3, #0
 800b492:	d031      	beq.n	800b4f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b498:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b49c:	d01a      	beq.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800b49e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b4a2:	d814      	bhi.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d009      	beq.n	800b4bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b4a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b4ac:	d10f      	bne.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800b4ae:	4b5d      	ldr	r3, [pc, #372]	; (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b4b0:	68db      	ldr	r3, [r3, #12]
 800b4b2:	4a5c      	ldr	r2, [pc, #368]	; (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b4b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b4b8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b4ba:	e00c      	b.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	3304      	adds	r3, #4
 800b4c0:	2100      	movs	r1, #0
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f000 fa22 	bl	800b90c <RCCEx_PLLSAI1_Config>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b4cc:	e003      	b.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	74fb      	strb	r3, [r7, #19]
      break;
 800b4d2:	e000      	b.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800b4d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b4d6:	7cfb      	ldrb	r3, [r7, #19]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d10b      	bne.n	800b4f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b4dc:	4b51      	ldr	r3, [pc, #324]	; (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b4de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4ea:	494e      	ldr	r1, [pc, #312]	; (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b4f2:	e001      	b.n	800b4f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4f4:	7cfb      	ldrb	r3, [r7, #19]
 800b4f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b500:	2b00      	cmp	r3, #0
 800b502:	f000 809e 	beq.w	800b642 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b506:	2300      	movs	r3, #0
 800b508:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b50a:	4b46      	ldr	r3, [pc, #280]	; (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b50c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b50e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b512:	2b00      	cmp	r3, #0
 800b514:	d101      	bne.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800b516:	2301      	movs	r3, #1
 800b518:	e000      	b.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800b51a:	2300      	movs	r3, #0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d00d      	beq.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b520:	4b40      	ldr	r3, [pc, #256]	; (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b524:	4a3f      	ldr	r2, [pc, #252]	; (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b52a:	6593      	str	r3, [r2, #88]	; 0x58
 800b52c:	4b3d      	ldr	r3, [pc, #244]	; (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b52e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b534:	60bb      	str	r3, [r7, #8]
 800b536:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b538:	2301      	movs	r3, #1
 800b53a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b53c:	4b3a      	ldr	r3, [pc, #232]	; (800b628 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a39      	ldr	r2, [pc, #228]	; (800b628 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800b542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b546:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b548:	f7fe fc50 	bl	8009dec <HAL_GetTick>
 800b54c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b54e:	e009      	b.n	800b564 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b550:	f7fe fc4c 	bl	8009dec <HAL_GetTick>
 800b554:	4602      	mov	r2, r0
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	1ad3      	subs	r3, r2, r3
 800b55a:	2b02      	cmp	r3, #2
 800b55c:	d902      	bls.n	800b564 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800b55e:	2303      	movs	r3, #3
 800b560:	74fb      	strb	r3, [r7, #19]
        break;
 800b562:	e005      	b.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b564:	4b30      	ldr	r3, [pc, #192]	; (800b628 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d0ef      	beq.n	800b550 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800b570:	7cfb      	ldrb	r3, [r7, #19]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d15a      	bne.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b576:	4b2b      	ldr	r3, [pc, #172]	; (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b57c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b580:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d01e      	beq.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b58c:	697a      	ldr	r2, [r7, #20]
 800b58e:	429a      	cmp	r2, r3
 800b590:	d019      	beq.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b592:	4b24      	ldr	r3, [pc, #144]	; (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b59c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b59e:	4b21      	ldr	r3, [pc, #132]	; (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b5a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5a4:	4a1f      	ldr	r2, [pc, #124]	; (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b5a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b5aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b5ae:	4b1d      	ldr	r3, [pc, #116]	; (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b5b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5b4:	4a1b      	ldr	r2, [pc, #108]	; (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b5b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b5ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b5be:	4a19      	ldr	r2, [pc, #100]	; (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	f003 0301 	and.w	r3, r3, #1
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d016      	beq.n	800b5fe <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5d0:	f7fe fc0c 	bl	8009dec <HAL_GetTick>
 800b5d4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b5d6:	e00b      	b.n	800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b5d8:	f7fe fc08 	bl	8009dec <HAL_GetTick>
 800b5dc:	4602      	mov	r2, r0
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	1ad3      	subs	r3, r2, r3
 800b5e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d902      	bls.n	800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800b5ea:	2303      	movs	r3, #3
 800b5ec:	74fb      	strb	r3, [r7, #19]
            break;
 800b5ee:	e006      	b.n	800b5fe <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b5f0:	4b0c      	ldr	r3, [pc, #48]	; (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b5f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5f6:	f003 0302 	and.w	r3, r3, #2
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d0ec      	beq.n	800b5d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800b5fe:	7cfb      	ldrb	r3, [r7, #19]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d10b      	bne.n	800b61c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b604:	4b07      	ldr	r3, [pc, #28]	; (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b60a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b612:	4904      	ldr	r1, [pc, #16]	; (800b624 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b614:	4313      	orrs	r3, r2
 800b616:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b61a:	e009      	b.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b61c:	7cfb      	ldrb	r3, [r7, #19]
 800b61e:	74bb      	strb	r3, [r7, #18]
 800b620:	e006      	b.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800b622:	bf00      	nop
 800b624:	40021000 	.word	0x40021000
 800b628:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b62c:	7cfb      	ldrb	r3, [r7, #19]
 800b62e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b630:	7c7b      	ldrb	r3, [r7, #17]
 800b632:	2b01      	cmp	r3, #1
 800b634:	d105      	bne.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b636:	4b8d      	ldr	r3, [pc, #564]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b63a:	4a8c      	ldr	r2, [pc, #560]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b63c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b640:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f003 0301 	and.w	r3, r3, #1
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d00a      	beq.n	800b664 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b64e:	4b87      	ldr	r3, [pc, #540]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b654:	f023 0203 	bic.w	r2, r3, #3
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6a1b      	ldr	r3, [r3, #32]
 800b65c:	4983      	ldr	r1, [pc, #524]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b65e:	4313      	orrs	r3, r2
 800b660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	f003 0302 	and.w	r3, r3, #2
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d00a      	beq.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b670:	4b7e      	ldr	r3, [pc, #504]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b676:	f023 020c 	bic.w	r2, r3, #12
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b67e:	497b      	ldr	r1, [pc, #492]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b680:	4313      	orrs	r3, r2
 800b682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f003 0304 	and.w	r3, r3, #4
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d00a      	beq.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b692:	4b76      	ldr	r3, [pc, #472]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b698:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6a0:	4972      	ldr	r1, [pc, #456]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f003 0320 	and.w	r3, r3, #32
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d00a      	beq.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b6b4:	4b6d      	ldr	r3, [pc, #436]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b6b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c2:	496a      	ldr	r1, [pc, #424]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b6c4:	4313      	orrs	r3, r2
 800b6c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00a      	beq.n	800b6ec <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b6d6:	4b65      	ldr	r3, [pc, #404]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b6d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6e4:	4961      	ldr	r1, [pc, #388]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d00a      	beq.n	800b70e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b6f8:	4b5c      	ldr	r3, [pc, #368]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b6fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b706:	4959      	ldr	r1, [pc, #356]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b708:	4313      	orrs	r3, r2
 800b70a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b716:	2b00      	cmp	r3, #0
 800b718:	d00a      	beq.n	800b730 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b71a:	4b54      	ldr	r3, [pc, #336]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b71c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b720:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b728:	4950      	ldr	r1, [pc, #320]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b72a:	4313      	orrs	r3, r2
 800b72c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d00a      	beq.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b73c:	4b4b      	ldr	r3, [pc, #300]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b73e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b742:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b74a:	4948      	ldr	r1, [pc, #288]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b74c:	4313      	orrs	r3, r2
 800b74e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d00a      	beq.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b75e:	4b43      	ldr	r3, [pc, #268]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b764:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b76c:	493f      	ldr	r1, [pc, #252]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b76e:	4313      	orrs	r3, r2
 800b770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d028      	beq.n	800b7d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b780:	4b3a      	ldr	r3, [pc, #232]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b786:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b78e:	4937      	ldr	r1, [pc, #220]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b790:	4313      	orrs	r3, r2
 800b792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b79a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b79e:	d106      	bne.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b7a0:	4b32      	ldr	r3, [pc, #200]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b7a2:	68db      	ldr	r3, [r3, #12]
 800b7a4:	4a31      	ldr	r2, [pc, #196]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b7a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7aa:	60d3      	str	r3, [r2, #12]
 800b7ac:	e011      	b.n	800b7d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b7b6:	d10c      	bne.n	800b7d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	3304      	adds	r3, #4
 800b7bc:	2101      	movs	r1, #1
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f000 f8a4 	bl	800b90c <RCCEx_PLLSAI1_Config>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800b7c8:	7cfb      	ldrb	r3, [r7, #19]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d001      	beq.n	800b7d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800b7ce:	7cfb      	ldrb	r3, [r7, #19]
 800b7d0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d028      	beq.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b7de:	4b23      	ldr	r3, [pc, #140]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b7e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7ec:	491f      	ldr	r1, [pc, #124]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b7fc:	d106      	bne.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b7fe:	4b1b      	ldr	r3, [pc, #108]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b800:	68db      	ldr	r3, [r3, #12]
 800b802:	4a1a      	ldr	r2, [pc, #104]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b804:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b808:	60d3      	str	r3, [r2, #12]
 800b80a:	e011      	b.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b810:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b814:	d10c      	bne.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	3304      	adds	r3, #4
 800b81a:	2101      	movs	r1, #1
 800b81c:	4618      	mov	r0, r3
 800b81e:	f000 f875 	bl	800b90c <RCCEx_PLLSAI1_Config>
 800b822:	4603      	mov	r3, r0
 800b824:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b826:	7cfb      	ldrb	r3, [r7, #19]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d001      	beq.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800b82c:	7cfb      	ldrb	r3, [r7, #19]
 800b82e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d02b      	beq.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b83c:	4b0b      	ldr	r3, [pc, #44]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b83e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b842:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b84a:	4908      	ldr	r1, [pc, #32]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b84c:	4313      	orrs	r3, r2
 800b84e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b856:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b85a:	d109      	bne.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b85c:	4b03      	ldr	r3, [pc, #12]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b85e:	68db      	ldr	r3, [r3, #12]
 800b860:	4a02      	ldr	r2, [pc, #8]	; (800b86c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800b862:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b866:	60d3      	str	r3, [r2, #12]
 800b868:	e014      	b.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800b86a:	bf00      	nop
 800b86c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b874:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b878:	d10c      	bne.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	3304      	adds	r3, #4
 800b87e:	2101      	movs	r1, #1
 800b880:	4618      	mov	r0, r3
 800b882:	f000 f843 	bl	800b90c <RCCEx_PLLSAI1_Config>
 800b886:	4603      	mov	r3, r0
 800b888:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b88a:	7cfb      	ldrb	r3, [r7, #19]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d001      	beq.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 800b890:	7cfb      	ldrb	r3, [r7, #19]
 800b892:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d01c      	beq.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b8a0:	4b19      	ldr	r3, [pc, #100]	; (800b908 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b8a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8ae:	4916      	ldr	r1, [pc, #88]	; (800b908 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8be:	d10c      	bne.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	3304      	adds	r3, #4
 800b8c4:	2102      	movs	r1, #2
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f000 f820 	bl	800b90c <RCCEx_PLLSAI1_Config>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b8d0:	7cfb      	ldrb	r3, [r7, #19]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d001      	beq.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 800b8d6:	7cfb      	ldrb	r3, [r7, #19]
 800b8d8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d00a      	beq.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b8e6:	4b08      	ldr	r3, [pc, #32]	; (800b908 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b8e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8ec:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8f4:	4904      	ldr	r1, [pc, #16]	; (800b908 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800b8fc:	7cbb      	ldrb	r3, [r7, #18]
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3718      	adds	r7, #24
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}
 800b906:	bf00      	nop
 800b908:	40021000 	.word	0x40021000

0800b90c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b084      	sub	sp, #16
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b916:	2300      	movs	r3, #0
 800b918:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b91a:	4b74      	ldr	r3, [pc, #464]	; (800baec <RCCEx_PLLSAI1_Config+0x1e0>)
 800b91c:	68db      	ldr	r3, [r3, #12]
 800b91e:	f003 0303 	and.w	r3, r3, #3
 800b922:	2b00      	cmp	r3, #0
 800b924:	d018      	beq.n	800b958 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b926:	4b71      	ldr	r3, [pc, #452]	; (800baec <RCCEx_PLLSAI1_Config+0x1e0>)
 800b928:	68db      	ldr	r3, [r3, #12]
 800b92a:	f003 0203 	and.w	r2, r3, #3
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	429a      	cmp	r2, r3
 800b934:	d10d      	bne.n	800b952 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
       ||
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d009      	beq.n	800b952 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800b93e:	4b6b      	ldr	r3, [pc, #428]	; (800baec <RCCEx_PLLSAI1_Config+0x1e0>)
 800b940:	68db      	ldr	r3, [r3, #12]
 800b942:	091b      	lsrs	r3, r3, #4
 800b944:	f003 0307 	and.w	r3, r3, #7
 800b948:	1c5a      	adds	r2, r3, #1
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	685b      	ldr	r3, [r3, #4]
       ||
 800b94e:	429a      	cmp	r2, r3
 800b950:	d047      	beq.n	800b9e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800b952:	2301      	movs	r3, #1
 800b954:	73fb      	strb	r3, [r7, #15]
 800b956:	e044      	b.n	800b9e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	2b03      	cmp	r3, #3
 800b95e:	d018      	beq.n	800b992 <RCCEx_PLLSAI1_Config+0x86>
 800b960:	2b03      	cmp	r3, #3
 800b962:	d825      	bhi.n	800b9b0 <RCCEx_PLLSAI1_Config+0xa4>
 800b964:	2b01      	cmp	r3, #1
 800b966:	d002      	beq.n	800b96e <RCCEx_PLLSAI1_Config+0x62>
 800b968:	2b02      	cmp	r3, #2
 800b96a:	d009      	beq.n	800b980 <RCCEx_PLLSAI1_Config+0x74>
 800b96c:	e020      	b.n	800b9b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b96e:	4b5f      	ldr	r3, [pc, #380]	; (800baec <RCCEx_PLLSAI1_Config+0x1e0>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f003 0302 	and.w	r3, r3, #2
 800b976:	2b00      	cmp	r3, #0
 800b978:	d11d      	bne.n	800b9b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800b97a:	2301      	movs	r3, #1
 800b97c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b97e:	e01a      	b.n	800b9b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b980:	4b5a      	ldr	r3, [pc, #360]	; (800baec <RCCEx_PLLSAI1_Config+0x1e0>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d116      	bne.n	800b9ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800b98c:	2301      	movs	r3, #1
 800b98e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b990:	e013      	b.n	800b9ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b992:	4b56      	ldr	r3, [pc, #344]	; (800baec <RCCEx_PLLSAI1_Config+0x1e0>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d10f      	bne.n	800b9be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b99e:	4b53      	ldr	r3, [pc, #332]	; (800baec <RCCEx_PLLSAI1_Config+0x1e0>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d109      	bne.n	800b9be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b9ae:	e006      	b.n	800b9be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	73fb      	strb	r3, [r7, #15]
      break;
 800b9b4:	e004      	b.n	800b9c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b9b6:	bf00      	nop
 800b9b8:	e002      	b.n	800b9c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b9ba:	bf00      	nop
 800b9bc:	e000      	b.n	800b9c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b9be:	bf00      	nop
    }

    if(status == HAL_OK)
 800b9c0:	7bfb      	ldrb	r3, [r7, #15]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d10d      	bne.n	800b9e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b9c6:	4b49      	ldr	r3, [pc, #292]	; (800baec <RCCEx_PLLSAI1_Config+0x1e0>)
 800b9c8:	68db      	ldr	r3, [r3, #12]
 800b9ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6819      	ldr	r1, [r3, #0]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	3b01      	subs	r3, #1
 800b9d8:	011b      	lsls	r3, r3, #4
 800b9da:	430b      	orrs	r3, r1
 800b9dc:	4943      	ldr	r1, [pc, #268]	; (800baec <RCCEx_PLLSAI1_Config+0x1e0>)
 800b9de:	4313      	orrs	r3, r2
 800b9e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800b9e2:	7bfb      	ldrb	r3, [r7, #15]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d17c      	bne.n	800bae2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b9e8:	4b40      	ldr	r3, [pc, #256]	; (800baec <RCCEx_PLLSAI1_Config+0x1e0>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4a3f      	ldr	r2, [pc, #252]	; (800baec <RCCEx_PLLSAI1_Config+0x1e0>)
 800b9ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b9f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9f4:	f7fe f9fa 	bl	8009dec <HAL_GetTick>
 800b9f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b9fa:	e009      	b.n	800ba10 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b9fc:	f7fe f9f6 	bl	8009dec <HAL_GetTick>
 800ba00:	4602      	mov	r2, r0
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	1ad3      	subs	r3, r2, r3
 800ba06:	2b02      	cmp	r3, #2
 800ba08:	d902      	bls.n	800ba10 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800ba0a:	2303      	movs	r3, #3
 800ba0c:	73fb      	strb	r3, [r7, #15]
        break;
 800ba0e:	e005      	b.n	800ba1c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ba10:	4b36      	ldr	r3, [pc, #216]	; (800baec <RCCEx_PLLSAI1_Config+0x1e0>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d1ef      	bne.n	800b9fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800ba1c:	7bfb      	ldrb	r3, [r7, #15]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d15f      	bne.n	800bae2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d110      	bne.n	800ba4a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ba28:	4b30      	ldr	r3, [pc, #192]	; (800baec <RCCEx_PLLSAI1_Config+0x1e0>)
 800ba2a:	691b      	ldr	r3, [r3, #16]
 800ba2c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800ba30:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ba34:	687a      	ldr	r2, [r7, #4]
 800ba36:	6892      	ldr	r2, [r2, #8]
 800ba38:	0211      	lsls	r1, r2, #8
 800ba3a:	687a      	ldr	r2, [r7, #4]
 800ba3c:	68d2      	ldr	r2, [r2, #12]
 800ba3e:	06d2      	lsls	r2, r2, #27
 800ba40:	430a      	orrs	r2, r1
 800ba42:	492a      	ldr	r1, [pc, #168]	; (800baec <RCCEx_PLLSAI1_Config+0x1e0>)
 800ba44:	4313      	orrs	r3, r2
 800ba46:	610b      	str	r3, [r1, #16]
 800ba48:	e027      	b.n	800ba9a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d112      	bne.n	800ba76 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ba50:	4b26      	ldr	r3, [pc, #152]	; (800baec <RCCEx_PLLSAI1_Config+0x1e0>)
 800ba52:	691b      	ldr	r3, [r3, #16]
 800ba54:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800ba58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ba5c:	687a      	ldr	r2, [r7, #4]
 800ba5e:	6892      	ldr	r2, [r2, #8]
 800ba60:	0211      	lsls	r1, r2, #8
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	6912      	ldr	r2, [r2, #16]
 800ba66:	0852      	lsrs	r2, r2, #1
 800ba68:	3a01      	subs	r2, #1
 800ba6a:	0552      	lsls	r2, r2, #21
 800ba6c:	430a      	orrs	r2, r1
 800ba6e:	491f      	ldr	r1, [pc, #124]	; (800baec <RCCEx_PLLSAI1_Config+0x1e0>)
 800ba70:	4313      	orrs	r3, r2
 800ba72:	610b      	str	r3, [r1, #16]
 800ba74:	e011      	b.n	800ba9a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ba76:	4b1d      	ldr	r3, [pc, #116]	; (800baec <RCCEx_PLLSAI1_Config+0x1e0>)
 800ba78:	691b      	ldr	r3, [r3, #16]
 800ba7a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800ba7e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	6892      	ldr	r2, [r2, #8]
 800ba86:	0211      	lsls	r1, r2, #8
 800ba88:	687a      	ldr	r2, [r7, #4]
 800ba8a:	6952      	ldr	r2, [r2, #20]
 800ba8c:	0852      	lsrs	r2, r2, #1
 800ba8e:	3a01      	subs	r2, #1
 800ba90:	0652      	lsls	r2, r2, #25
 800ba92:	430a      	orrs	r2, r1
 800ba94:	4915      	ldr	r1, [pc, #84]	; (800baec <RCCEx_PLLSAI1_Config+0x1e0>)
 800ba96:	4313      	orrs	r3, r2
 800ba98:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800ba9a:	4b14      	ldr	r3, [pc, #80]	; (800baec <RCCEx_PLLSAI1_Config+0x1e0>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	4a13      	ldr	r2, [pc, #76]	; (800baec <RCCEx_PLLSAI1_Config+0x1e0>)
 800baa0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800baa4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800baa6:	f7fe f9a1 	bl	8009dec <HAL_GetTick>
 800baaa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800baac:	e009      	b.n	800bac2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800baae:	f7fe f99d 	bl	8009dec <HAL_GetTick>
 800bab2:	4602      	mov	r2, r0
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	1ad3      	subs	r3, r2, r3
 800bab8:	2b02      	cmp	r3, #2
 800baba:	d902      	bls.n	800bac2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800babc:	2303      	movs	r3, #3
 800babe:	73fb      	strb	r3, [r7, #15]
          break;
 800bac0:	e005      	b.n	800bace <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800bac2:	4b0a      	ldr	r3, [pc, #40]	; (800baec <RCCEx_PLLSAI1_Config+0x1e0>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d0ef      	beq.n	800baae <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800bace:	7bfb      	ldrb	r3, [r7, #15]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d106      	bne.n	800bae2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800bad4:	4b05      	ldr	r3, [pc, #20]	; (800baec <RCCEx_PLLSAI1_Config+0x1e0>)
 800bad6:	691a      	ldr	r2, [r3, #16]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	699b      	ldr	r3, [r3, #24]
 800badc:	4903      	ldr	r1, [pc, #12]	; (800baec <RCCEx_PLLSAI1_Config+0x1e0>)
 800bade:	4313      	orrs	r3, r2
 800bae0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800bae2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3710      	adds	r7, #16
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}
 800baec:	40021000 	.word	0x40021000

0800baf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d101      	bne.n	800bb02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bafe:	2301      	movs	r3, #1
 800bb00:	e095      	b.n	800bc2e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d108      	bne.n	800bb1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	685b      	ldr	r3, [r3, #4]
 800bb0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bb12:	d009      	beq.n	800bb28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2200      	movs	r2, #0
 800bb18:	61da      	str	r2, [r3, #28]
 800bb1a:	e005      	b.n	800bb28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2200      	movs	r2, #0
 800bb26:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bb34:	b2db      	uxtb	r3, r3
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d106      	bne.n	800bb48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f7f7 f81c 	bl	8002b80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2202      	movs	r2, #2
 800bb4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	681a      	ldr	r2, [r3, #0]
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb5e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	68db      	ldr	r3, [r3, #12]
 800bb64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bb68:	d902      	bls.n	800bb70 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	60fb      	str	r3, [r7, #12]
 800bb6e:	e002      	b.n	800bb76 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bb70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb74:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	68db      	ldr	r3, [r3, #12]
 800bb7a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bb7e:	d007      	beq.n	800bb90 <HAL_SPI_Init+0xa0>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bb88:	d002      	beq.n	800bb90 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	689b      	ldr	r3, [r3, #8]
 800bb9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800bba0:	431a      	orrs	r2, r3
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	691b      	ldr	r3, [r3, #16]
 800bba6:	f003 0302 	and.w	r3, r3, #2
 800bbaa:	431a      	orrs	r2, r3
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	695b      	ldr	r3, [r3, #20]
 800bbb0:	f003 0301 	and.w	r3, r3, #1
 800bbb4:	431a      	orrs	r2, r3
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	699b      	ldr	r3, [r3, #24]
 800bbba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bbbe:	431a      	orrs	r2, r3
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	69db      	ldr	r3, [r3, #28]
 800bbc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bbc8:	431a      	orrs	r2, r3
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6a1b      	ldr	r3, [r3, #32]
 800bbce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbd2:	ea42 0103 	orr.w	r1, r2, r3
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbda:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	430a      	orrs	r2, r1
 800bbe4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	699b      	ldr	r3, [r3, #24]
 800bbea:	0c1b      	lsrs	r3, r3, #16
 800bbec:	f003 0204 	and.w	r2, r3, #4
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf4:	f003 0310 	and.w	r3, r3, #16
 800bbf8:	431a      	orrs	r2, r3
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbfe:	f003 0308 	and.w	r3, r3, #8
 800bc02:	431a      	orrs	r2, r3
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	68db      	ldr	r3, [r3, #12]
 800bc08:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800bc0c:	ea42 0103 	orr.w	r1, r2, r3
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	430a      	orrs	r2, r1
 800bc1c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2200      	movs	r2, #0
 800bc22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2201      	movs	r2, #1
 800bc28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800bc2c:	2300      	movs	r3, #0
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3710      	adds	r7, #16
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}

0800bc36 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc36:	b580      	push	{r7, lr}
 800bc38:	b088      	sub	sp, #32
 800bc3a:	af00      	add	r7, sp, #0
 800bc3c:	60f8      	str	r0, [r7, #12]
 800bc3e:	60b9      	str	r1, [r7, #8]
 800bc40:	603b      	str	r3, [r7, #0]
 800bc42:	4613      	mov	r3, r2
 800bc44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bc46:	2300      	movs	r3, #0
 800bc48:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bc50:	2b01      	cmp	r3, #1
 800bc52:	d101      	bne.n	800bc58 <HAL_SPI_Transmit+0x22>
 800bc54:	2302      	movs	r3, #2
 800bc56:	e158      	b.n	800bf0a <HAL_SPI_Transmit+0x2d4>
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bc60:	f7fe f8c4 	bl	8009dec <HAL_GetTick>
 800bc64:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800bc66:	88fb      	ldrh	r3, [r7, #6]
 800bc68:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bc70:	b2db      	uxtb	r3, r3
 800bc72:	2b01      	cmp	r3, #1
 800bc74:	d002      	beq.n	800bc7c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800bc76:	2302      	movs	r3, #2
 800bc78:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bc7a:	e13d      	b.n	800bef8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d002      	beq.n	800bc88 <HAL_SPI_Transmit+0x52>
 800bc82:	88fb      	ldrh	r3, [r7, #6]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d102      	bne.n	800bc8e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800bc88:	2301      	movs	r3, #1
 800bc8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bc8c:	e134      	b.n	800bef8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	2203      	movs	r2, #3
 800bc92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	68ba      	ldr	r2, [r7, #8]
 800bca0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	88fa      	ldrh	r2, [r7, #6]
 800bca6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	88fa      	ldrh	r2, [r7, #6]
 800bcac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2200      	movs	r2, #0
 800bcce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	689b      	ldr	r3, [r3, #8]
 800bcd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcd8:	d10f      	bne.n	800bcfa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	681a      	ldr	r2, [r3, #0]
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bce8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	681a      	ldr	r2, [r3, #0]
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bcf8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd04:	2b40      	cmp	r3, #64	; 0x40
 800bd06:	d007      	beq.n	800bd18 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	68db      	ldr	r3, [r3, #12]
 800bd1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bd20:	d94b      	bls.n	800bdba <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	685b      	ldr	r3, [r3, #4]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d002      	beq.n	800bd30 <HAL_SPI_Transmit+0xfa>
 800bd2a:	8afb      	ldrh	r3, [r7, #22]
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	d13e      	bne.n	800bdae <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd34:	881a      	ldrh	r2, [r3, #0]
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd40:	1c9a      	adds	r2, r3, #2
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd4a:	b29b      	uxth	r3, r3
 800bd4c:	3b01      	subs	r3, #1
 800bd4e:	b29a      	uxth	r2, r3
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800bd54:	e02b      	b.n	800bdae <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	689b      	ldr	r3, [r3, #8]
 800bd5c:	f003 0302 	and.w	r3, r3, #2
 800bd60:	2b02      	cmp	r3, #2
 800bd62:	d112      	bne.n	800bd8a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd68:	881a      	ldrh	r2, [r3, #0]
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd74:	1c9a      	adds	r2, r3, #2
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd7e:	b29b      	uxth	r3, r3
 800bd80:	3b01      	subs	r3, #1
 800bd82:	b29a      	uxth	r2, r3
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bd88:	e011      	b.n	800bdae <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd8a:	f7fe f82f 	bl	8009dec <HAL_GetTick>
 800bd8e:	4602      	mov	r2, r0
 800bd90:	69bb      	ldr	r3, [r7, #24]
 800bd92:	1ad3      	subs	r3, r2, r3
 800bd94:	683a      	ldr	r2, [r7, #0]
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d803      	bhi.n	800bda2 <HAL_SPI_Transmit+0x16c>
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bda0:	d102      	bne.n	800bda8 <HAL_SPI_Transmit+0x172>
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d102      	bne.n	800bdae <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800bda8:	2303      	movs	r3, #3
 800bdaa:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bdac:	e0a4      	b.n	800bef8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bdb2:	b29b      	uxth	r3, r3
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d1ce      	bne.n	800bd56 <HAL_SPI_Transmit+0x120>
 800bdb8:	e07c      	b.n	800beb4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d002      	beq.n	800bdc8 <HAL_SPI_Transmit+0x192>
 800bdc2:	8afb      	ldrh	r3, [r7, #22]
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d170      	bne.n	800beaa <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bdcc:	b29b      	uxth	r3, r3
 800bdce:	2b01      	cmp	r3, #1
 800bdd0:	d912      	bls.n	800bdf8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdd6:	881a      	ldrh	r2, [r3, #0]
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bde2:	1c9a      	adds	r2, r3, #2
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	3b02      	subs	r3, #2
 800bdf0:	b29a      	uxth	r2, r3
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bdf6:	e058      	b.n	800beaa <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	330c      	adds	r3, #12
 800be02:	7812      	ldrb	r2, [r2, #0]
 800be04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be0a:	1c5a      	adds	r2, r3, #1
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be14:	b29b      	uxth	r3, r3
 800be16:	3b01      	subs	r3, #1
 800be18:	b29a      	uxth	r2, r3
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800be1e:	e044      	b.n	800beaa <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	689b      	ldr	r3, [r3, #8]
 800be26:	f003 0302 	and.w	r3, r3, #2
 800be2a:	2b02      	cmp	r3, #2
 800be2c:	d12b      	bne.n	800be86 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be32:	b29b      	uxth	r3, r3
 800be34:	2b01      	cmp	r3, #1
 800be36:	d912      	bls.n	800be5e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be3c:	881a      	ldrh	r2, [r3, #0]
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be48:	1c9a      	adds	r2, r3, #2
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be52:	b29b      	uxth	r3, r3
 800be54:	3b02      	subs	r3, #2
 800be56:	b29a      	uxth	r2, r3
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800be5c:	e025      	b.n	800beaa <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	330c      	adds	r3, #12
 800be68:	7812      	ldrb	r2, [r2, #0]
 800be6a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be70:	1c5a      	adds	r2, r3, #1
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be7a:	b29b      	uxth	r3, r3
 800be7c:	3b01      	subs	r3, #1
 800be7e:	b29a      	uxth	r2, r3
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	87da      	strh	r2, [r3, #62]	; 0x3e
 800be84:	e011      	b.n	800beaa <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be86:	f7fd ffb1 	bl	8009dec <HAL_GetTick>
 800be8a:	4602      	mov	r2, r0
 800be8c:	69bb      	ldr	r3, [r7, #24]
 800be8e:	1ad3      	subs	r3, r2, r3
 800be90:	683a      	ldr	r2, [r7, #0]
 800be92:	429a      	cmp	r2, r3
 800be94:	d803      	bhi.n	800be9e <HAL_SPI_Transmit+0x268>
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be9c:	d102      	bne.n	800bea4 <HAL_SPI_Transmit+0x26e>
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d102      	bne.n	800beaa <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800bea4:	2303      	movs	r3, #3
 800bea6:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bea8:	e026      	b.n	800bef8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800beae:	b29b      	uxth	r3, r3
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d1b5      	bne.n	800be20 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800beb4:	69ba      	ldr	r2, [r7, #24]
 800beb6:	6839      	ldr	r1, [r7, #0]
 800beb8:	68f8      	ldr	r0, [r7, #12]
 800beba:	f000 fce3 	bl	800c884 <SPI_EndRxTxTransaction>
 800bebe:	4603      	mov	r3, r0
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d002      	beq.n	800beca <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	2220      	movs	r2, #32
 800bec8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	689b      	ldr	r3, [r3, #8]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d10a      	bne.n	800bee8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bed2:	2300      	movs	r3, #0
 800bed4:	613b      	str	r3, [r7, #16]
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	68db      	ldr	r3, [r3, #12]
 800bedc:	613b      	str	r3, [r7, #16]
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	689b      	ldr	r3, [r3, #8]
 800bee4:	613b      	str	r3, [r7, #16]
 800bee6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800beec:	2b00      	cmp	r3, #0
 800beee:	d002      	beq.n	800bef6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800bef0:	2301      	movs	r3, #1
 800bef2:	77fb      	strb	r3, [r7, #31]
 800bef4:	e000      	b.n	800bef8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800bef6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	2201      	movs	r2, #1
 800befc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2200      	movs	r2, #0
 800bf04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800bf08:	7ffb      	ldrb	r3, [r7, #31]
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3720      	adds	r7, #32
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}

0800bf12 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bf12:	b580      	push	{r7, lr}
 800bf14:	b088      	sub	sp, #32
 800bf16:	af02      	add	r7, sp, #8
 800bf18:	60f8      	str	r0, [r7, #12]
 800bf1a:	60b9      	str	r1, [r7, #8]
 800bf1c:	603b      	str	r3, [r7, #0]
 800bf1e:	4613      	mov	r3, r2
 800bf20:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bf22:	2300      	movs	r3, #0
 800bf24:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bf2e:	d112      	bne.n	800bf56 <HAL_SPI_Receive+0x44>
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	689b      	ldr	r3, [r3, #8]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d10e      	bne.n	800bf56 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	2204      	movs	r2, #4
 800bf3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800bf40:	88fa      	ldrh	r2, [r7, #6]
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	9300      	str	r3, [sp, #0]
 800bf46:	4613      	mov	r3, r2
 800bf48:	68ba      	ldr	r2, [r7, #8]
 800bf4a:	68b9      	ldr	r1, [r7, #8]
 800bf4c:	68f8      	ldr	r0, [r7, #12]
 800bf4e:	f000 f910 	bl	800c172 <HAL_SPI_TransmitReceive>
 800bf52:	4603      	mov	r3, r0
 800bf54:	e109      	b.n	800c16a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bf5c:	2b01      	cmp	r3, #1
 800bf5e:	d101      	bne.n	800bf64 <HAL_SPI_Receive+0x52>
 800bf60:	2302      	movs	r3, #2
 800bf62:	e102      	b.n	800c16a <HAL_SPI_Receive+0x258>
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	2201      	movs	r2, #1
 800bf68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bf6c:	f7fd ff3e 	bl	8009dec <HAL_GetTick>
 800bf70:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bf78:	b2db      	uxtb	r3, r3
 800bf7a:	2b01      	cmp	r3, #1
 800bf7c:	d002      	beq.n	800bf84 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800bf7e:	2302      	movs	r3, #2
 800bf80:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bf82:	e0e9      	b.n	800c158 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d002      	beq.n	800bf90 <HAL_SPI_Receive+0x7e>
 800bf8a:	88fb      	ldrh	r3, [r7, #6]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d102      	bne.n	800bf96 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800bf90:	2301      	movs	r3, #1
 800bf92:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bf94:	e0e0      	b.n	800c158 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2204      	movs	r2, #4
 800bf9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	68ba      	ldr	r2, [r7, #8]
 800bfa8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	88fa      	ldrh	r2, [r7, #6]
 800bfae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	88fa      	ldrh	r2, [r7, #6]
 800bfb6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	68db      	ldr	r3, [r3, #12]
 800bfdc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bfe0:	d908      	bls.n	800bff4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	685a      	ldr	r2, [r3, #4]
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bff0:	605a      	str	r2, [r3, #4]
 800bff2:	e007      	b.n	800c004 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	685a      	ldr	r2, [r3, #4]
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c002:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	689b      	ldr	r3, [r3, #8]
 800c008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c00c:	d10f      	bne.n	800c02e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	681a      	ldr	r2, [r3, #0]
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c01c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	681a      	ldr	r2, [r3, #0]
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c02c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c038:	2b40      	cmp	r3, #64	; 0x40
 800c03a:	d007      	beq.n	800c04c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	681a      	ldr	r2, [r3, #0]
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c04a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	68db      	ldr	r3, [r3, #12]
 800c050:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c054:	d867      	bhi.n	800c126 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c056:	e030      	b.n	800c0ba <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	689b      	ldr	r3, [r3, #8]
 800c05e:	f003 0301 	and.w	r3, r3, #1
 800c062:	2b01      	cmp	r3, #1
 800c064:	d117      	bne.n	800c096 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f103 020c 	add.w	r2, r3, #12
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c072:	7812      	ldrb	r2, [r2, #0]
 800c074:	b2d2      	uxtb	r2, r2
 800c076:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c07c:	1c5a      	adds	r2, r3, #1
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c088:	b29b      	uxth	r3, r3
 800c08a:	3b01      	subs	r3, #1
 800c08c:	b29a      	uxth	r2, r3
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800c094:	e011      	b.n	800c0ba <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c096:	f7fd fea9 	bl	8009dec <HAL_GetTick>
 800c09a:	4602      	mov	r2, r0
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	1ad3      	subs	r3, r2, r3
 800c0a0:	683a      	ldr	r2, [r7, #0]
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	d803      	bhi.n	800c0ae <HAL_SPI_Receive+0x19c>
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ac:	d102      	bne.n	800c0b4 <HAL_SPI_Receive+0x1a2>
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d102      	bne.n	800c0ba <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800c0b4:	2303      	movs	r3, #3
 800c0b6:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c0b8:	e04e      	b.n	800c158 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d1c8      	bne.n	800c058 <HAL_SPI_Receive+0x146>
 800c0c6:	e034      	b.n	800c132 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	689b      	ldr	r3, [r3, #8]
 800c0ce:	f003 0301 	and.w	r3, r3, #1
 800c0d2:	2b01      	cmp	r3, #1
 800c0d4:	d115      	bne.n	800c102 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	68da      	ldr	r2, [r3, #12]
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0e0:	b292      	uxth	r2, r2
 800c0e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0e8:	1c9a      	adds	r2, r3, #2
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c0f4:	b29b      	uxth	r3, r3
 800c0f6:	3b01      	subs	r3, #1
 800c0f8:	b29a      	uxth	r2, r3
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800c100:	e011      	b.n	800c126 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c102:	f7fd fe73 	bl	8009dec <HAL_GetTick>
 800c106:	4602      	mov	r2, r0
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	1ad3      	subs	r3, r2, r3
 800c10c:	683a      	ldr	r2, [r7, #0]
 800c10e:	429a      	cmp	r2, r3
 800c110:	d803      	bhi.n	800c11a <HAL_SPI_Receive+0x208>
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c118:	d102      	bne.n	800c120 <HAL_SPI_Receive+0x20e>
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d102      	bne.n	800c126 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800c120:	2303      	movs	r3, #3
 800c122:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c124:	e018      	b.n	800c158 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c12c:	b29b      	uxth	r3, r3
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d1ca      	bne.n	800c0c8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c132:	693a      	ldr	r2, [r7, #16]
 800c134:	6839      	ldr	r1, [r7, #0]
 800c136:	68f8      	ldr	r0, [r7, #12]
 800c138:	f000 fb4c 	bl	800c7d4 <SPI_EndRxTransaction>
 800c13c:	4603      	mov	r3, r0
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d002      	beq.n	800c148 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2220      	movs	r2, #32
 800c146:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d002      	beq.n	800c156 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800c150:	2301      	movs	r3, #1
 800c152:	75fb      	strb	r3, [r7, #23]
 800c154:	e000      	b.n	800c158 <HAL_SPI_Receive+0x246>
  }

error :
 800c156:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	2201      	movs	r2, #1
 800c15c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	2200      	movs	r2, #0
 800c164:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c168:	7dfb      	ldrb	r3, [r7, #23]
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3718      	adds	r7, #24
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}

0800c172 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c172:	b580      	push	{r7, lr}
 800c174:	b08a      	sub	sp, #40	; 0x28
 800c176:	af00      	add	r7, sp, #0
 800c178:	60f8      	str	r0, [r7, #12]
 800c17a:	60b9      	str	r1, [r7, #8]
 800c17c:	607a      	str	r2, [r7, #4]
 800c17e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c180:	2301      	movs	r3, #1
 800c182:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c184:	2300      	movs	r3, #0
 800c186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c190:	2b01      	cmp	r3, #1
 800c192:	d101      	bne.n	800c198 <HAL_SPI_TransmitReceive+0x26>
 800c194:	2302      	movs	r3, #2
 800c196:	e1fb      	b.n	800c590 <HAL_SPI_TransmitReceive+0x41e>
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2201      	movs	r2, #1
 800c19c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c1a0:	f7fd fe24 	bl	8009dec <HAL_GetTick>
 800c1a4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c1ac:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	685b      	ldr	r3, [r3, #4]
 800c1b2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800c1b4:	887b      	ldrh	r3, [r7, #2]
 800c1b6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800c1b8:	887b      	ldrh	r3, [r7, #2]
 800c1ba:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c1bc:	7efb      	ldrb	r3, [r7, #27]
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	d00e      	beq.n	800c1e0 <HAL_SPI_TransmitReceive+0x6e>
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c1c8:	d106      	bne.n	800c1d8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	689b      	ldr	r3, [r3, #8]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d102      	bne.n	800c1d8 <HAL_SPI_TransmitReceive+0x66>
 800c1d2:	7efb      	ldrb	r3, [r7, #27]
 800c1d4:	2b04      	cmp	r3, #4
 800c1d6:	d003      	beq.n	800c1e0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800c1d8:	2302      	movs	r3, #2
 800c1da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800c1de:	e1cd      	b.n	800c57c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d005      	beq.n	800c1f2 <HAL_SPI_TransmitReceive+0x80>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d002      	beq.n	800c1f2 <HAL_SPI_TransmitReceive+0x80>
 800c1ec:	887b      	ldrh	r3, [r7, #2]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d103      	bne.n	800c1fa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800c1f8:	e1c0      	b.n	800c57c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c200:	b2db      	uxtb	r3, r3
 800c202:	2b04      	cmp	r3, #4
 800c204:	d003      	beq.n	800c20e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	2205      	movs	r2, #5
 800c20a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2200      	movs	r2, #0
 800c212:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	687a      	ldr	r2, [r7, #4]
 800c218:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	887a      	ldrh	r2, [r7, #2]
 800c21e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	887a      	ldrh	r2, [r7, #2]
 800c226:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	68ba      	ldr	r2, [r7, #8]
 800c22e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	887a      	ldrh	r2, [r7, #2]
 800c234:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	887a      	ldrh	r2, [r7, #2]
 800c23a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	2200      	movs	r2, #0
 800c240:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	2200      	movs	r2, #0
 800c246:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	68db      	ldr	r3, [r3, #12]
 800c24c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c250:	d802      	bhi.n	800c258 <HAL_SPI_TransmitReceive+0xe6>
 800c252:	8a3b      	ldrh	r3, [r7, #16]
 800c254:	2b01      	cmp	r3, #1
 800c256:	d908      	bls.n	800c26a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	685a      	ldr	r2, [r3, #4]
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c266:	605a      	str	r2, [r3, #4]
 800c268:	e007      	b.n	800c27a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	685a      	ldr	r2, [r3, #4]
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c278:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c284:	2b40      	cmp	r3, #64	; 0x40
 800c286:	d007      	beq.n	800c298 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	681a      	ldr	r2, [r3, #0]
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c296:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	68db      	ldr	r3, [r3, #12]
 800c29c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c2a0:	d97c      	bls.n	800c39c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	685b      	ldr	r3, [r3, #4]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d002      	beq.n	800c2b0 <HAL_SPI_TransmitReceive+0x13e>
 800c2aa:	8a7b      	ldrh	r3, [r7, #18]
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d169      	bne.n	800c384 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2b4:	881a      	ldrh	r2, [r3, #0]
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2c0:	1c9a      	adds	r2, r3, #2
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2ca:	b29b      	uxth	r3, r3
 800c2cc:	3b01      	subs	r3, #1
 800c2ce:	b29a      	uxth	r2, r3
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c2d4:	e056      	b.n	800c384 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	689b      	ldr	r3, [r3, #8]
 800c2dc:	f003 0302 	and.w	r3, r3, #2
 800c2e0:	2b02      	cmp	r3, #2
 800c2e2:	d11b      	bne.n	800c31c <HAL_SPI_TransmitReceive+0x1aa>
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2e8:	b29b      	uxth	r3, r3
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d016      	beq.n	800c31c <HAL_SPI_TransmitReceive+0x1aa>
 800c2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	d113      	bne.n	800c31c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2f8:	881a      	ldrh	r2, [r3, #0]
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c304:	1c9a      	adds	r2, r3, #2
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c30e:	b29b      	uxth	r3, r3
 800c310:	3b01      	subs	r3, #1
 800c312:	b29a      	uxth	r2, r3
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c318:	2300      	movs	r3, #0
 800c31a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	689b      	ldr	r3, [r3, #8]
 800c322:	f003 0301 	and.w	r3, r3, #1
 800c326:	2b01      	cmp	r3, #1
 800c328:	d11c      	bne.n	800c364 <HAL_SPI_TransmitReceive+0x1f2>
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c330:	b29b      	uxth	r3, r3
 800c332:	2b00      	cmp	r3, #0
 800c334:	d016      	beq.n	800c364 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	68da      	ldr	r2, [r3, #12]
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c340:	b292      	uxth	r2, r2
 800c342:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c348:	1c9a      	adds	r2, r3, #2
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c354:	b29b      	uxth	r3, r3
 800c356:	3b01      	subs	r3, #1
 800c358:	b29a      	uxth	r2, r3
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c360:	2301      	movs	r3, #1
 800c362:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c364:	f7fd fd42 	bl	8009dec <HAL_GetTick>
 800c368:	4602      	mov	r2, r0
 800c36a:	69fb      	ldr	r3, [r7, #28]
 800c36c:	1ad3      	subs	r3, r2, r3
 800c36e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c370:	429a      	cmp	r2, r3
 800c372:	d807      	bhi.n	800c384 <HAL_SPI_TransmitReceive+0x212>
 800c374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c37a:	d003      	beq.n	800c384 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800c37c:	2303      	movs	r3, #3
 800c37e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800c382:	e0fb      	b.n	800c57c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c388:	b29b      	uxth	r3, r3
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d1a3      	bne.n	800c2d6 <HAL_SPI_TransmitReceive+0x164>
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c394:	b29b      	uxth	r3, r3
 800c396:	2b00      	cmp	r3, #0
 800c398:	d19d      	bne.n	800c2d6 <HAL_SPI_TransmitReceive+0x164>
 800c39a:	e0df      	b.n	800c55c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d003      	beq.n	800c3ac <HAL_SPI_TransmitReceive+0x23a>
 800c3a4:	8a7b      	ldrh	r3, [r7, #18]
 800c3a6:	2b01      	cmp	r3, #1
 800c3a8:	f040 80cb 	bne.w	800c542 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3b0:	b29b      	uxth	r3, r3
 800c3b2:	2b01      	cmp	r3, #1
 800c3b4:	d912      	bls.n	800c3dc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3ba:	881a      	ldrh	r2, [r3, #0]
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3c6:	1c9a      	adds	r2, r3, #2
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3d0:	b29b      	uxth	r3, r3
 800c3d2:	3b02      	subs	r3, #2
 800c3d4:	b29a      	uxth	r2, r3
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c3da:	e0b2      	b.n	800c542 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	330c      	adds	r3, #12
 800c3e6:	7812      	ldrb	r2, [r2, #0]
 800c3e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3ee:	1c5a      	adds	r2, r3, #1
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3f8:	b29b      	uxth	r3, r3
 800c3fa:	3b01      	subs	r3, #1
 800c3fc:	b29a      	uxth	r2, r3
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c402:	e09e      	b.n	800c542 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	689b      	ldr	r3, [r3, #8]
 800c40a:	f003 0302 	and.w	r3, r3, #2
 800c40e:	2b02      	cmp	r3, #2
 800c410:	d134      	bne.n	800c47c <HAL_SPI_TransmitReceive+0x30a>
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c416:	b29b      	uxth	r3, r3
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d02f      	beq.n	800c47c <HAL_SPI_TransmitReceive+0x30a>
 800c41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c41e:	2b01      	cmp	r3, #1
 800c420:	d12c      	bne.n	800c47c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c426:	b29b      	uxth	r3, r3
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d912      	bls.n	800c452 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c430:	881a      	ldrh	r2, [r3, #0]
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c43c:	1c9a      	adds	r2, r3, #2
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c446:	b29b      	uxth	r3, r3
 800c448:	3b02      	subs	r3, #2
 800c44a:	b29a      	uxth	r2, r3
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c450:	e012      	b.n	800c478 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	330c      	adds	r3, #12
 800c45c:	7812      	ldrb	r2, [r2, #0]
 800c45e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c464:	1c5a      	adds	r2, r3, #1
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c46e:	b29b      	uxth	r3, r3
 800c470:	3b01      	subs	r3, #1
 800c472:	b29a      	uxth	r2, r3
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c478:	2300      	movs	r3, #0
 800c47a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	689b      	ldr	r3, [r3, #8]
 800c482:	f003 0301 	and.w	r3, r3, #1
 800c486:	2b01      	cmp	r3, #1
 800c488:	d148      	bne.n	800c51c <HAL_SPI_TransmitReceive+0x3aa>
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c490:	b29b      	uxth	r3, r3
 800c492:	2b00      	cmp	r3, #0
 800c494:	d042      	beq.n	800c51c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c49c:	b29b      	uxth	r3, r3
 800c49e:	2b01      	cmp	r3, #1
 800c4a0:	d923      	bls.n	800c4ea <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	68da      	ldr	r2, [r3, #12]
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4ac:	b292      	uxth	r2, r2
 800c4ae:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4b4:	1c9a      	adds	r2, r3, #2
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c4c0:	b29b      	uxth	r3, r3
 800c4c2:	3b02      	subs	r3, #2
 800c4c4:	b29a      	uxth	r2, r3
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c4d2:	b29b      	uxth	r3, r3
 800c4d4:	2b01      	cmp	r3, #1
 800c4d6:	d81f      	bhi.n	800c518 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	685a      	ldr	r2, [r3, #4]
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c4e6:	605a      	str	r2, [r3, #4]
 800c4e8:	e016      	b.n	800c518 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f103 020c 	add.w	r2, r3, #12
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4f6:	7812      	ldrb	r2, [r2, #0]
 800c4f8:	b2d2      	uxtb	r2, r2
 800c4fa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c500:	1c5a      	adds	r2, r3, #1
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c50c:	b29b      	uxth	r3, r3
 800c50e:	3b01      	subs	r3, #1
 800c510:	b29a      	uxth	r2, r3
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c518:	2301      	movs	r3, #1
 800c51a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c51c:	f7fd fc66 	bl	8009dec <HAL_GetTick>
 800c520:	4602      	mov	r2, r0
 800c522:	69fb      	ldr	r3, [r7, #28]
 800c524:	1ad3      	subs	r3, r2, r3
 800c526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c528:	429a      	cmp	r2, r3
 800c52a:	d803      	bhi.n	800c534 <HAL_SPI_TransmitReceive+0x3c2>
 800c52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c532:	d102      	bne.n	800c53a <HAL_SPI_TransmitReceive+0x3c8>
 800c534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c536:	2b00      	cmp	r3, #0
 800c538:	d103      	bne.n	800c542 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800c53a:	2303      	movs	r3, #3
 800c53c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800c540:	e01c      	b.n	800c57c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c546:	b29b      	uxth	r3, r3
 800c548:	2b00      	cmp	r3, #0
 800c54a:	f47f af5b 	bne.w	800c404 <HAL_SPI_TransmitReceive+0x292>
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c554:	b29b      	uxth	r3, r3
 800c556:	2b00      	cmp	r3, #0
 800c558:	f47f af54 	bne.w	800c404 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c55c:	69fa      	ldr	r2, [r7, #28]
 800c55e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c560:	68f8      	ldr	r0, [r7, #12]
 800c562:	f000 f98f 	bl	800c884 <SPI_EndRxTxTransaction>
 800c566:	4603      	mov	r3, r0
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d006      	beq.n	800c57a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800c56c:	2301      	movs	r3, #1
 800c56e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	2220      	movs	r2, #32
 800c576:	661a      	str	r2, [r3, #96]	; 0x60
 800c578:	e000      	b.n	800c57c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800c57a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	2201      	movs	r2, #1
 800c580:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	2200      	movs	r2, #0
 800c588:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c58c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800c590:	4618      	mov	r0, r3
 800c592:	3728      	adds	r7, #40	; 0x28
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}

0800c598 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b088      	sub	sp, #32
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	60f8      	str	r0, [r7, #12]
 800c5a0:	60b9      	str	r1, [r7, #8]
 800c5a2:	603b      	str	r3, [r7, #0]
 800c5a4:	4613      	mov	r3, r2
 800c5a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c5a8:	f7fd fc20 	bl	8009dec <HAL_GetTick>
 800c5ac:	4602      	mov	r2, r0
 800c5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b0:	1a9b      	subs	r3, r3, r2
 800c5b2:	683a      	ldr	r2, [r7, #0]
 800c5b4:	4413      	add	r3, r2
 800c5b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c5b8:	f7fd fc18 	bl	8009dec <HAL_GetTick>
 800c5bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c5be:	4b39      	ldr	r3, [pc, #228]	; (800c6a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	015b      	lsls	r3, r3, #5
 800c5c4:	0d1b      	lsrs	r3, r3, #20
 800c5c6:	69fa      	ldr	r2, [r7, #28]
 800c5c8:	fb02 f303 	mul.w	r3, r2, r3
 800c5cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c5ce:	e054      	b.n	800c67a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5d6:	d050      	beq.n	800c67a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c5d8:	f7fd fc08 	bl	8009dec <HAL_GetTick>
 800c5dc:	4602      	mov	r2, r0
 800c5de:	69bb      	ldr	r3, [r7, #24]
 800c5e0:	1ad3      	subs	r3, r2, r3
 800c5e2:	69fa      	ldr	r2, [r7, #28]
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d902      	bls.n	800c5ee <SPI_WaitFlagStateUntilTimeout+0x56>
 800c5e8:	69fb      	ldr	r3, [r7, #28]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d13d      	bne.n	800c66a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	685a      	ldr	r2, [r3, #4]
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c5fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	685b      	ldr	r3, [r3, #4]
 800c602:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c606:	d111      	bne.n	800c62c <SPI_WaitFlagStateUntilTimeout+0x94>
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	689b      	ldr	r3, [r3, #8]
 800c60c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c610:	d004      	beq.n	800c61c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	689b      	ldr	r3, [r3, #8]
 800c616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c61a:	d107      	bne.n	800c62c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	681a      	ldr	r2, [r3, #0]
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c62a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c630:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c634:	d10f      	bne.n	800c656 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	681a      	ldr	r2, [r3, #0]
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c644:	601a      	str	r2, [r3, #0]
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	681a      	ldr	r2, [r3, #0]
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c654:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	2201      	movs	r2, #1
 800c65a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	2200      	movs	r2, #0
 800c662:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c666:	2303      	movs	r3, #3
 800c668:	e017      	b.n	800c69a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c66a:	697b      	ldr	r3, [r7, #20]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d101      	bne.n	800c674 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c670:	2300      	movs	r3, #0
 800c672:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	3b01      	subs	r3, #1
 800c678:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	689a      	ldr	r2, [r3, #8]
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	4013      	ands	r3, r2
 800c684:	68ba      	ldr	r2, [r7, #8]
 800c686:	429a      	cmp	r2, r3
 800c688:	bf0c      	ite	eq
 800c68a:	2301      	moveq	r3, #1
 800c68c:	2300      	movne	r3, #0
 800c68e:	b2db      	uxtb	r3, r3
 800c690:	461a      	mov	r2, r3
 800c692:	79fb      	ldrb	r3, [r7, #7]
 800c694:	429a      	cmp	r2, r3
 800c696:	d19b      	bne.n	800c5d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c698:	2300      	movs	r3, #0
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3720      	adds	r7, #32
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}
 800c6a2:	bf00      	nop
 800c6a4:	20000000 	.word	0x20000000

0800c6a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b08a      	sub	sp, #40	; 0x28
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	60f8      	str	r0, [r7, #12]
 800c6b0:	60b9      	str	r1, [r7, #8]
 800c6b2:	607a      	str	r2, [r7, #4]
 800c6b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800c6ba:	f7fd fb97 	bl	8009dec <HAL_GetTick>
 800c6be:	4602      	mov	r2, r0
 800c6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c2:	1a9b      	subs	r3, r3, r2
 800c6c4:	683a      	ldr	r2, [r7, #0]
 800c6c6:	4413      	add	r3, r2
 800c6c8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800c6ca:	f7fd fb8f 	bl	8009dec <HAL_GetTick>
 800c6ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	330c      	adds	r3, #12
 800c6d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800c6d8:	4b3d      	ldr	r3, [pc, #244]	; (800c7d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800c6da:	681a      	ldr	r2, [r3, #0]
 800c6dc:	4613      	mov	r3, r2
 800c6de:	009b      	lsls	r3, r3, #2
 800c6e0:	4413      	add	r3, r2
 800c6e2:	00da      	lsls	r2, r3, #3
 800c6e4:	1ad3      	subs	r3, r2, r3
 800c6e6:	0d1b      	lsrs	r3, r3, #20
 800c6e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6ea:	fb02 f303 	mul.w	r3, r2, r3
 800c6ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800c6f0:	e060      	b.n	800c7b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c6f8:	d107      	bne.n	800c70a <SPI_WaitFifoStateUntilTimeout+0x62>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d104      	bne.n	800c70a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800c700:	69fb      	ldr	r3, [r7, #28]
 800c702:	781b      	ldrb	r3, [r3, #0]
 800c704:	b2db      	uxtb	r3, r3
 800c706:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800c708:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c710:	d050      	beq.n	800c7b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c712:	f7fd fb6b 	bl	8009dec <HAL_GetTick>
 800c716:	4602      	mov	r2, r0
 800c718:	6a3b      	ldr	r3, [r7, #32]
 800c71a:	1ad3      	subs	r3, r2, r3
 800c71c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c71e:	429a      	cmp	r2, r3
 800c720:	d902      	bls.n	800c728 <SPI_WaitFifoStateUntilTimeout+0x80>
 800c722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c724:	2b00      	cmp	r3, #0
 800c726:	d13d      	bne.n	800c7a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	685a      	ldr	r2, [r3, #4]
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c736:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	685b      	ldr	r3, [r3, #4]
 800c73c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c740:	d111      	bne.n	800c766 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	689b      	ldr	r3, [r3, #8]
 800c746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c74a:	d004      	beq.n	800c756 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	689b      	ldr	r3, [r3, #8]
 800c750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c754:	d107      	bne.n	800c766 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	681a      	ldr	r2, [r3, #0]
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c764:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c76a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c76e:	d10f      	bne.n	800c790 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	681a      	ldr	r2, [r3, #0]
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c77e:	601a      	str	r2, [r3, #0]
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	681a      	ldr	r2, [r3, #0]
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c78e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2201      	movs	r2, #1
 800c794:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	2200      	movs	r2, #0
 800c79c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800c7a0:	2303      	movs	r3, #3
 800c7a2:	e010      	b.n	800c7c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c7a4:	69bb      	ldr	r3, [r7, #24]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d101      	bne.n	800c7ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800c7ae:	69bb      	ldr	r3, [r7, #24]
 800c7b0:	3b01      	subs	r3, #1
 800c7b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	689a      	ldr	r2, [r3, #8]
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	4013      	ands	r3, r2
 800c7be:	687a      	ldr	r2, [r7, #4]
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	d196      	bne.n	800c6f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800c7c4:	2300      	movs	r3, #0
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3728      	adds	r7, #40	; 0x28
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
 800c7ce:	bf00      	nop
 800c7d0:	20000000 	.word	0x20000000

0800c7d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b086      	sub	sp, #24
 800c7d8:	af02      	add	r7, sp, #8
 800c7da:	60f8      	str	r0, [r7, #12]
 800c7dc:	60b9      	str	r1, [r7, #8]
 800c7de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	685b      	ldr	r3, [r3, #4]
 800c7e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c7e8:	d111      	bne.n	800c80e <SPI_EndRxTransaction+0x3a>
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	689b      	ldr	r3, [r3, #8]
 800c7ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c7f2:	d004      	beq.n	800c7fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	689b      	ldr	r3, [r3, #8]
 800c7f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c7fc:	d107      	bne.n	800c80e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	681a      	ldr	r2, [r3, #0]
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c80c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	9300      	str	r3, [sp, #0]
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	2200      	movs	r2, #0
 800c816:	2180      	movs	r1, #128	; 0x80
 800c818:	68f8      	ldr	r0, [r7, #12]
 800c81a:	f7ff febd 	bl	800c598 <SPI_WaitFlagStateUntilTimeout>
 800c81e:	4603      	mov	r3, r0
 800c820:	2b00      	cmp	r3, #0
 800c822:	d007      	beq.n	800c834 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c828:	f043 0220 	orr.w	r2, r3, #32
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c830:	2303      	movs	r3, #3
 800c832:	e023      	b.n	800c87c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	685b      	ldr	r3, [r3, #4]
 800c838:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c83c:	d11d      	bne.n	800c87a <SPI_EndRxTransaction+0xa6>
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	689b      	ldr	r3, [r3, #8]
 800c842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c846:	d004      	beq.n	800c852 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	689b      	ldr	r3, [r3, #8]
 800c84c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c850:	d113      	bne.n	800c87a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	9300      	str	r3, [sp, #0]
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	2200      	movs	r2, #0
 800c85a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c85e:	68f8      	ldr	r0, [r7, #12]
 800c860:	f7ff ff22 	bl	800c6a8 <SPI_WaitFifoStateUntilTimeout>
 800c864:	4603      	mov	r3, r0
 800c866:	2b00      	cmp	r3, #0
 800c868:	d007      	beq.n	800c87a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c86e:	f043 0220 	orr.w	r2, r3, #32
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800c876:	2303      	movs	r3, #3
 800c878:	e000      	b.n	800c87c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800c87a:	2300      	movs	r3, #0
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3710      	adds	r7, #16
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}

0800c884 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b086      	sub	sp, #24
 800c888:	af02      	add	r7, sp, #8
 800c88a:	60f8      	str	r0, [r7, #12]
 800c88c:	60b9      	str	r1, [r7, #8]
 800c88e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	9300      	str	r3, [sp, #0]
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	2200      	movs	r2, #0
 800c898:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800c89c:	68f8      	ldr	r0, [r7, #12]
 800c89e:	f7ff ff03 	bl	800c6a8 <SPI_WaitFifoStateUntilTimeout>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d007      	beq.n	800c8b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c8ac:	f043 0220 	orr.w	r2, r3, #32
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c8b4:	2303      	movs	r3, #3
 800c8b6:	e027      	b.n	800c908 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	9300      	str	r3, [sp, #0]
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	2180      	movs	r1, #128	; 0x80
 800c8c2:	68f8      	ldr	r0, [r7, #12]
 800c8c4:	f7ff fe68 	bl	800c598 <SPI_WaitFlagStateUntilTimeout>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d007      	beq.n	800c8de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c8d2:	f043 0220 	orr.w	r2, r3, #32
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c8da:	2303      	movs	r3, #3
 800c8dc:	e014      	b.n	800c908 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	9300      	str	r3, [sp, #0]
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c8ea:	68f8      	ldr	r0, [r7, #12]
 800c8ec:	f7ff fedc 	bl	800c6a8 <SPI_WaitFifoStateUntilTimeout>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d007      	beq.n	800c906 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c8fa:	f043 0220 	orr.w	r2, r3, #32
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c902:	2303      	movs	r3, #3
 800c904:	e000      	b.n	800c908 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c906:	2300      	movs	r3, #0
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3710      	adds	r7, #16
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}

0800c910 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b082      	sub	sp, #8
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d101      	bne.n	800c922 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c91e:	2301      	movs	r3, #1
 800c920:	e049      	b.n	800c9b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c928:	b2db      	uxtb	r3, r3
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d106      	bne.n	800c93c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2200      	movs	r2, #0
 800c932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f7f6 f998 	bl	8002c6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2202      	movs	r2, #2
 800c940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681a      	ldr	r2, [r3, #0]
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	3304      	adds	r3, #4
 800c94c:	4619      	mov	r1, r3
 800c94e:	4610      	mov	r0, r2
 800c950:	f000 fae6 	bl	800cf20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2201      	movs	r2, #1
 800c958:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2201      	movs	r2, #1
 800c960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2201      	movs	r2, #1
 800c968:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2201      	movs	r2, #1
 800c970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2201      	movs	r2, #1
 800c978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2201      	movs	r2, #1
 800c980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2201      	movs	r2, #1
 800c988:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2201      	movs	r2, #1
 800c990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2201      	movs	r2, #1
 800c998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2201      	movs	r2, #1
 800c9a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2201      	movs	r2, #1
 800c9b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c9b4:	2300      	movs	r3, #0
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3708      	adds	r7, #8
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}
	...

0800c9c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b085      	sub	sp, #20
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9ce:	b2db      	uxtb	r3, r3
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	d001      	beq.n	800c9d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	e033      	b.n	800ca40 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2202      	movs	r2, #2
 800c9dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	4a19      	ldr	r2, [pc, #100]	; (800ca4c <HAL_TIM_Base_Start+0x8c>)
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d009      	beq.n	800c9fe <HAL_TIM_Base_Start+0x3e>
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9f2:	d004      	beq.n	800c9fe <HAL_TIM_Base_Start+0x3e>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4a15      	ldr	r2, [pc, #84]	; (800ca50 <HAL_TIM_Base_Start+0x90>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d115      	bne.n	800ca2a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	689a      	ldr	r2, [r3, #8]
 800ca04:	4b13      	ldr	r3, [pc, #76]	; (800ca54 <HAL_TIM_Base_Start+0x94>)
 800ca06:	4013      	ands	r3, r2
 800ca08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2b06      	cmp	r3, #6
 800ca0e:	d015      	beq.n	800ca3c <HAL_TIM_Base_Start+0x7c>
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca16:	d011      	beq.n	800ca3c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	681a      	ldr	r2, [r3, #0]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f042 0201 	orr.w	r2, r2, #1
 800ca26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca28:	e008      	b.n	800ca3c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	681a      	ldr	r2, [r3, #0]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	f042 0201 	orr.w	r2, r2, #1
 800ca38:	601a      	str	r2, [r3, #0]
 800ca3a:	e000      	b.n	800ca3e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ca3e:	2300      	movs	r3, #0
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3714      	adds	r7, #20
 800ca44:	46bd      	mov	sp, r7
 800ca46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4a:	4770      	bx	lr
 800ca4c:	40012c00 	.word	0x40012c00
 800ca50:	40014000 	.word	0x40014000
 800ca54:	00010007 	.word	0x00010007

0800ca58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b085      	sub	sp, #20
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca66:	b2db      	uxtb	r3, r3
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d001      	beq.n	800ca70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	e03b      	b.n	800cae8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2202      	movs	r2, #2
 800ca74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	68da      	ldr	r2, [r3, #12]
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f042 0201 	orr.w	r2, r2, #1
 800ca86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	4a19      	ldr	r2, [pc, #100]	; (800caf4 <HAL_TIM_Base_Start_IT+0x9c>)
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	d009      	beq.n	800caa6 <HAL_TIM_Base_Start_IT+0x4e>
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca9a:	d004      	beq.n	800caa6 <HAL_TIM_Base_Start_IT+0x4e>
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	4a15      	ldr	r2, [pc, #84]	; (800caf8 <HAL_TIM_Base_Start_IT+0xa0>)
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d115      	bne.n	800cad2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	689a      	ldr	r2, [r3, #8]
 800caac:	4b13      	ldr	r3, [pc, #76]	; (800cafc <HAL_TIM_Base_Start_IT+0xa4>)
 800caae:	4013      	ands	r3, r2
 800cab0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	2b06      	cmp	r3, #6
 800cab6:	d015      	beq.n	800cae4 <HAL_TIM_Base_Start_IT+0x8c>
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cabe:	d011      	beq.n	800cae4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	681a      	ldr	r2, [r3, #0]
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f042 0201 	orr.w	r2, r2, #1
 800cace:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cad0:	e008      	b.n	800cae4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	681a      	ldr	r2, [r3, #0]
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	f042 0201 	orr.w	r2, r2, #1
 800cae0:	601a      	str	r2, [r3, #0]
 800cae2:	e000      	b.n	800cae6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cae4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cae6:	2300      	movs	r3, #0
}
 800cae8:	4618      	mov	r0, r3
 800caea:	3714      	adds	r7, #20
 800caec:	46bd      	mov	sp, r7
 800caee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf2:	4770      	bx	lr
 800caf4:	40012c00 	.word	0x40012c00
 800caf8:	40014000 	.word	0x40014000
 800cafc:	00010007 	.word	0x00010007

0800cb00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b082      	sub	sp, #8
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	691b      	ldr	r3, [r3, #16]
 800cb0e:	f003 0302 	and.w	r3, r3, #2
 800cb12:	2b02      	cmp	r3, #2
 800cb14:	d122      	bne.n	800cb5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	68db      	ldr	r3, [r3, #12]
 800cb1c:	f003 0302 	and.w	r3, r3, #2
 800cb20:	2b02      	cmp	r3, #2
 800cb22:	d11b      	bne.n	800cb5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	f06f 0202 	mvn.w	r2, #2
 800cb2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2201      	movs	r2, #1
 800cb32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	699b      	ldr	r3, [r3, #24]
 800cb3a:	f003 0303 	and.w	r3, r3, #3
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d003      	beq.n	800cb4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f000 f9ce 	bl	800cee4 <HAL_TIM_IC_CaptureCallback>
 800cb48:	e005      	b.n	800cb56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f000 f9c0 	bl	800ced0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f000 f9d1 	bl	800cef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2200      	movs	r2, #0
 800cb5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	691b      	ldr	r3, [r3, #16]
 800cb62:	f003 0304 	and.w	r3, r3, #4
 800cb66:	2b04      	cmp	r3, #4
 800cb68:	d122      	bne.n	800cbb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	68db      	ldr	r3, [r3, #12]
 800cb70:	f003 0304 	and.w	r3, r3, #4
 800cb74:	2b04      	cmp	r3, #4
 800cb76:	d11b      	bne.n	800cbb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	f06f 0204 	mvn.w	r2, #4
 800cb80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2202      	movs	r2, #2
 800cb86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	699b      	ldr	r3, [r3, #24]
 800cb8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d003      	beq.n	800cb9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f000 f9a4 	bl	800cee4 <HAL_TIM_IC_CaptureCallback>
 800cb9c:	e005      	b.n	800cbaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f000 f996 	bl	800ced0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f000 f9a7 	bl	800cef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2200      	movs	r2, #0
 800cbae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	691b      	ldr	r3, [r3, #16]
 800cbb6:	f003 0308 	and.w	r3, r3, #8
 800cbba:	2b08      	cmp	r3, #8
 800cbbc:	d122      	bne.n	800cc04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	68db      	ldr	r3, [r3, #12]
 800cbc4:	f003 0308 	and.w	r3, r3, #8
 800cbc8:	2b08      	cmp	r3, #8
 800cbca:	d11b      	bne.n	800cc04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	f06f 0208 	mvn.w	r2, #8
 800cbd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2204      	movs	r2, #4
 800cbda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	69db      	ldr	r3, [r3, #28]
 800cbe2:	f003 0303 	and.w	r3, r3, #3
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d003      	beq.n	800cbf2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f000 f97a 	bl	800cee4 <HAL_TIM_IC_CaptureCallback>
 800cbf0:	e005      	b.n	800cbfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f000 f96c 	bl	800ced0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f000 f97d 	bl	800cef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2200      	movs	r2, #0
 800cc02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	691b      	ldr	r3, [r3, #16]
 800cc0a:	f003 0310 	and.w	r3, r3, #16
 800cc0e:	2b10      	cmp	r3, #16
 800cc10:	d122      	bne.n	800cc58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	68db      	ldr	r3, [r3, #12]
 800cc18:	f003 0310 	and.w	r3, r3, #16
 800cc1c:	2b10      	cmp	r3, #16
 800cc1e:	d11b      	bne.n	800cc58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f06f 0210 	mvn.w	r2, #16
 800cc28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	2208      	movs	r2, #8
 800cc2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	69db      	ldr	r3, [r3, #28]
 800cc36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d003      	beq.n	800cc46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f000 f950 	bl	800cee4 <HAL_TIM_IC_CaptureCallback>
 800cc44:	e005      	b.n	800cc52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f000 f942 	bl	800ced0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f000 f953 	bl	800cef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2200      	movs	r2, #0
 800cc56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	691b      	ldr	r3, [r3, #16]
 800cc5e:	f003 0301 	and.w	r3, r3, #1
 800cc62:	2b01      	cmp	r3, #1
 800cc64:	d10e      	bne.n	800cc84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	68db      	ldr	r3, [r3, #12]
 800cc6c:	f003 0301 	and.w	r3, r3, #1
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	d107      	bne.n	800cc84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f06f 0201 	mvn.w	r2, #1
 800cc7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f7f5 f868 	bl	8001d54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	691b      	ldr	r3, [r3, #16]
 800cc8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc8e:	2b80      	cmp	r3, #128	; 0x80
 800cc90:	d10e      	bne.n	800ccb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	68db      	ldr	r3, [r3, #12]
 800cc98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc9c:	2b80      	cmp	r3, #128	; 0x80
 800cc9e:	d107      	bne.n	800ccb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f000 faa6 	bl	800d1fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	691b      	ldr	r3, [r3, #16]
 800ccb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ccbe:	d10e      	bne.n	800ccde <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	68db      	ldr	r3, [r3, #12]
 800ccc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccca:	2b80      	cmp	r3, #128	; 0x80
 800cccc:	d107      	bne.n	800ccde <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ccd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f000 fa99 	bl	800d210 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	691b      	ldr	r3, [r3, #16]
 800cce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cce8:	2b40      	cmp	r3, #64	; 0x40
 800ccea:	d10e      	bne.n	800cd0a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	68db      	ldr	r3, [r3, #12]
 800ccf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccf6:	2b40      	cmp	r3, #64	; 0x40
 800ccf8:	d107      	bne.n	800cd0a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cd02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f000 f901 	bl	800cf0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	691b      	ldr	r3, [r3, #16]
 800cd10:	f003 0320 	and.w	r3, r3, #32
 800cd14:	2b20      	cmp	r3, #32
 800cd16:	d10e      	bne.n	800cd36 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	68db      	ldr	r3, [r3, #12]
 800cd1e:	f003 0320 	and.w	r3, r3, #32
 800cd22:	2b20      	cmp	r3, #32
 800cd24:	d107      	bne.n	800cd36 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f06f 0220 	mvn.w	r2, #32
 800cd2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f000 fa59 	bl	800d1e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cd36:	bf00      	nop
 800cd38:	3708      	adds	r7, #8
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}

0800cd3e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cd3e:	b580      	push	{r7, lr}
 800cd40:	b084      	sub	sp, #16
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	6078      	str	r0, [r7, #4]
 800cd46:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd52:	2b01      	cmp	r3, #1
 800cd54:	d101      	bne.n	800cd5a <HAL_TIM_ConfigClockSource+0x1c>
 800cd56:	2302      	movs	r3, #2
 800cd58:	e0b6      	b.n	800cec8 <HAL_TIM_ConfigClockSource+0x18a>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2201      	movs	r2, #1
 800cd5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2202      	movs	r2, #2
 800cd66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	689b      	ldr	r3, [r3, #8]
 800cd70:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd78:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800cd7c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cd84:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	68ba      	ldr	r2, [r7, #8]
 800cd8c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd96:	d03e      	beq.n	800ce16 <HAL_TIM_ConfigClockSource+0xd8>
 800cd98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd9c:	f200 8087 	bhi.w	800ceae <HAL_TIM_ConfigClockSource+0x170>
 800cda0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cda4:	f000 8086 	beq.w	800ceb4 <HAL_TIM_ConfigClockSource+0x176>
 800cda8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdac:	d87f      	bhi.n	800ceae <HAL_TIM_ConfigClockSource+0x170>
 800cdae:	2b70      	cmp	r3, #112	; 0x70
 800cdb0:	d01a      	beq.n	800cde8 <HAL_TIM_ConfigClockSource+0xaa>
 800cdb2:	2b70      	cmp	r3, #112	; 0x70
 800cdb4:	d87b      	bhi.n	800ceae <HAL_TIM_ConfigClockSource+0x170>
 800cdb6:	2b60      	cmp	r3, #96	; 0x60
 800cdb8:	d050      	beq.n	800ce5c <HAL_TIM_ConfigClockSource+0x11e>
 800cdba:	2b60      	cmp	r3, #96	; 0x60
 800cdbc:	d877      	bhi.n	800ceae <HAL_TIM_ConfigClockSource+0x170>
 800cdbe:	2b50      	cmp	r3, #80	; 0x50
 800cdc0:	d03c      	beq.n	800ce3c <HAL_TIM_ConfigClockSource+0xfe>
 800cdc2:	2b50      	cmp	r3, #80	; 0x50
 800cdc4:	d873      	bhi.n	800ceae <HAL_TIM_ConfigClockSource+0x170>
 800cdc6:	2b40      	cmp	r3, #64	; 0x40
 800cdc8:	d058      	beq.n	800ce7c <HAL_TIM_ConfigClockSource+0x13e>
 800cdca:	2b40      	cmp	r3, #64	; 0x40
 800cdcc:	d86f      	bhi.n	800ceae <HAL_TIM_ConfigClockSource+0x170>
 800cdce:	2b30      	cmp	r3, #48	; 0x30
 800cdd0:	d064      	beq.n	800ce9c <HAL_TIM_ConfigClockSource+0x15e>
 800cdd2:	2b30      	cmp	r3, #48	; 0x30
 800cdd4:	d86b      	bhi.n	800ceae <HAL_TIM_ConfigClockSource+0x170>
 800cdd6:	2b20      	cmp	r3, #32
 800cdd8:	d060      	beq.n	800ce9c <HAL_TIM_ConfigClockSource+0x15e>
 800cdda:	2b20      	cmp	r3, #32
 800cddc:	d867      	bhi.n	800ceae <HAL_TIM_ConfigClockSource+0x170>
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d05c      	beq.n	800ce9c <HAL_TIM_ConfigClockSource+0x15e>
 800cde2:	2b10      	cmp	r3, #16
 800cde4:	d05a      	beq.n	800ce9c <HAL_TIM_ConfigClockSource+0x15e>
 800cde6:	e062      	b.n	800ceae <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6818      	ldr	r0, [r3, #0]
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	6899      	ldr	r1, [r3, #8]
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	685a      	ldr	r2, [r3, #4]
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	68db      	ldr	r3, [r3, #12]
 800cdf8:	f000 f970 	bl	800d0dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	689b      	ldr	r3, [r3, #8]
 800ce02:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ce0a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	68ba      	ldr	r2, [r7, #8]
 800ce12:	609a      	str	r2, [r3, #8]
      break;
 800ce14:	e04f      	b.n	800ceb6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6818      	ldr	r0, [r3, #0]
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	6899      	ldr	r1, [r3, #8]
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	685a      	ldr	r2, [r3, #4]
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	68db      	ldr	r3, [r3, #12]
 800ce26:	f000 f959 	bl	800d0dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	689a      	ldr	r2, [r3, #8]
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ce38:	609a      	str	r2, [r3, #8]
      break;
 800ce3a:	e03c      	b.n	800ceb6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6818      	ldr	r0, [r3, #0]
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	6859      	ldr	r1, [r3, #4]
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	68db      	ldr	r3, [r3, #12]
 800ce48:	461a      	mov	r2, r3
 800ce4a:	f000 f8cd 	bl	800cfe8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	2150      	movs	r1, #80	; 0x50
 800ce54:	4618      	mov	r0, r3
 800ce56:	f000 f926 	bl	800d0a6 <TIM_ITRx_SetConfig>
      break;
 800ce5a:	e02c      	b.n	800ceb6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6818      	ldr	r0, [r3, #0]
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	6859      	ldr	r1, [r3, #4]
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	68db      	ldr	r3, [r3, #12]
 800ce68:	461a      	mov	r2, r3
 800ce6a:	f000 f8ec 	bl	800d046 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	2160      	movs	r1, #96	; 0x60
 800ce74:	4618      	mov	r0, r3
 800ce76:	f000 f916 	bl	800d0a6 <TIM_ITRx_SetConfig>
      break;
 800ce7a:	e01c      	b.n	800ceb6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6818      	ldr	r0, [r3, #0]
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	6859      	ldr	r1, [r3, #4]
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	68db      	ldr	r3, [r3, #12]
 800ce88:	461a      	mov	r2, r3
 800ce8a:	f000 f8ad 	bl	800cfe8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	2140      	movs	r1, #64	; 0x40
 800ce94:	4618      	mov	r0, r3
 800ce96:	f000 f906 	bl	800d0a6 <TIM_ITRx_SetConfig>
      break;
 800ce9a:	e00c      	b.n	800ceb6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681a      	ldr	r2, [r3, #0]
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	4619      	mov	r1, r3
 800cea6:	4610      	mov	r0, r2
 800cea8:	f000 f8fd 	bl	800d0a6 <TIM_ITRx_SetConfig>
      break;
 800ceac:	e003      	b.n	800ceb6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800ceae:	2301      	movs	r3, #1
 800ceb0:	73fb      	strb	r3, [r7, #15]
      break;
 800ceb2:	e000      	b.n	800ceb6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800ceb4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2201      	movs	r2, #1
 800ceba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2200      	movs	r2, #0
 800cec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cec6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3710      	adds	r7, #16
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}

0800ced0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ced0:	b480      	push	{r7}
 800ced2:	b083      	sub	sp, #12
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ced8:	bf00      	nop
 800ceda:	370c      	adds	r7, #12
 800cedc:	46bd      	mov	sp, r7
 800cede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee2:	4770      	bx	lr

0800cee4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cee4:	b480      	push	{r7}
 800cee6:	b083      	sub	sp, #12
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ceec:	bf00      	nop
 800ceee:	370c      	adds	r7, #12
 800cef0:	46bd      	mov	sp, r7
 800cef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef6:	4770      	bx	lr

0800cef8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b083      	sub	sp, #12
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cf00:	bf00      	nop
 800cf02:	370c      	adds	r7, #12
 800cf04:	46bd      	mov	sp, r7
 800cf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0a:	4770      	bx	lr

0800cf0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b083      	sub	sp, #12
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cf14:	bf00      	nop
 800cf16:	370c      	adds	r7, #12
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1e:	4770      	bx	lr

0800cf20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cf20:	b480      	push	{r7}
 800cf22:	b085      	sub	sp, #20
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	4a2a      	ldr	r2, [pc, #168]	; (800cfdc <TIM_Base_SetConfig+0xbc>)
 800cf34:	4293      	cmp	r3, r2
 800cf36:	d003      	beq.n	800cf40 <TIM_Base_SetConfig+0x20>
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf3e:	d108      	bne.n	800cf52 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	685b      	ldr	r3, [r3, #4]
 800cf4c:	68fa      	ldr	r2, [r7, #12]
 800cf4e:	4313      	orrs	r3, r2
 800cf50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	4a21      	ldr	r2, [pc, #132]	; (800cfdc <TIM_Base_SetConfig+0xbc>)
 800cf56:	4293      	cmp	r3, r2
 800cf58:	d00b      	beq.n	800cf72 <TIM_Base_SetConfig+0x52>
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf60:	d007      	beq.n	800cf72 <TIM_Base_SetConfig+0x52>
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	4a1e      	ldr	r2, [pc, #120]	; (800cfe0 <TIM_Base_SetConfig+0xc0>)
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d003      	beq.n	800cf72 <TIM_Base_SetConfig+0x52>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	4a1d      	ldr	r2, [pc, #116]	; (800cfe4 <TIM_Base_SetConfig+0xc4>)
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	d108      	bne.n	800cf84 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	68db      	ldr	r3, [r3, #12]
 800cf7e:	68fa      	ldr	r2, [r7, #12]
 800cf80:	4313      	orrs	r3, r2
 800cf82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	695b      	ldr	r3, [r3, #20]
 800cf8e:	4313      	orrs	r3, r2
 800cf90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	68fa      	ldr	r2, [r7, #12]
 800cf96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	689a      	ldr	r2, [r3, #8]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	681a      	ldr	r2, [r3, #0]
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	4a0c      	ldr	r2, [pc, #48]	; (800cfdc <TIM_Base_SetConfig+0xbc>)
 800cfac:	4293      	cmp	r3, r2
 800cfae:	d007      	beq.n	800cfc0 <TIM_Base_SetConfig+0xa0>
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	4a0b      	ldr	r2, [pc, #44]	; (800cfe0 <TIM_Base_SetConfig+0xc0>)
 800cfb4:	4293      	cmp	r3, r2
 800cfb6:	d003      	beq.n	800cfc0 <TIM_Base_SetConfig+0xa0>
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	4a0a      	ldr	r2, [pc, #40]	; (800cfe4 <TIM_Base_SetConfig+0xc4>)
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	d103      	bne.n	800cfc8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	691a      	ldr	r2, [r3, #16]
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2201      	movs	r2, #1
 800cfcc:	615a      	str	r2, [r3, #20]
}
 800cfce:	bf00      	nop
 800cfd0:	3714      	adds	r7, #20
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd8:	4770      	bx	lr
 800cfda:	bf00      	nop
 800cfdc:	40012c00 	.word	0x40012c00
 800cfe0:	40014000 	.word	0x40014000
 800cfe4:	40014400 	.word	0x40014400

0800cfe8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cfe8:	b480      	push	{r7}
 800cfea:	b087      	sub	sp, #28
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	60f8      	str	r0, [r7, #12]
 800cff0:	60b9      	str	r1, [r7, #8]
 800cff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	6a1b      	ldr	r3, [r3, #32]
 800cff8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	6a1b      	ldr	r3, [r3, #32]
 800cffe:	f023 0201 	bic.w	r2, r3, #1
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	699b      	ldr	r3, [r3, #24]
 800d00a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	011b      	lsls	r3, r3, #4
 800d018:	693a      	ldr	r2, [r7, #16]
 800d01a:	4313      	orrs	r3, r2
 800d01c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	f023 030a 	bic.w	r3, r3, #10
 800d024:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d026:	697a      	ldr	r2, [r7, #20]
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	4313      	orrs	r3, r2
 800d02c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	693a      	ldr	r2, [r7, #16]
 800d032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	697a      	ldr	r2, [r7, #20]
 800d038:	621a      	str	r2, [r3, #32]
}
 800d03a:	bf00      	nop
 800d03c:	371c      	adds	r7, #28
 800d03e:	46bd      	mov	sp, r7
 800d040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d044:	4770      	bx	lr

0800d046 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d046:	b480      	push	{r7}
 800d048:	b087      	sub	sp, #28
 800d04a:	af00      	add	r7, sp, #0
 800d04c:	60f8      	str	r0, [r7, #12]
 800d04e:	60b9      	str	r1, [r7, #8]
 800d050:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	6a1b      	ldr	r3, [r3, #32]
 800d056:	f023 0210 	bic.w	r2, r3, #16
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	699b      	ldr	r3, [r3, #24]
 800d062:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	6a1b      	ldr	r3, [r3, #32]
 800d068:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d070:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	031b      	lsls	r3, r3, #12
 800d076:	697a      	ldr	r2, [r7, #20]
 800d078:	4313      	orrs	r3, r2
 800d07a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d07c:	693b      	ldr	r3, [r7, #16]
 800d07e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d082:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	011b      	lsls	r3, r3, #4
 800d088:	693a      	ldr	r2, [r7, #16]
 800d08a:	4313      	orrs	r3, r2
 800d08c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	697a      	ldr	r2, [r7, #20]
 800d092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	693a      	ldr	r2, [r7, #16]
 800d098:	621a      	str	r2, [r3, #32]
}
 800d09a:	bf00      	nop
 800d09c:	371c      	adds	r7, #28
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a4:	4770      	bx	lr

0800d0a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d0a6:	b480      	push	{r7}
 800d0a8:	b085      	sub	sp, #20
 800d0aa:	af00      	add	r7, sp, #0
 800d0ac:	6078      	str	r0, [r7, #4]
 800d0ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	689b      	ldr	r3, [r3, #8]
 800d0b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d0be:	683a      	ldr	r2, [r7, #0]
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	4313      	orrs	r3, r2
 800d0c4:	f043 0307 	orr.w	r3, r3, #7
 800d0c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	68fa      	ldr	r2, [r7, #12]
 800d0ce:	609a      	str	r2, [r3, #8]
}
 800d0d0:	bf00      	nop
 800d0d2:	3714      	adds	r7, #20
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0da:	4770      	bx	lr

0800d0dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d0dc:	b480      	push	{r7}
 800d0de:	b087      	sub	sp, #28
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	60f8      	str	r0, [r7, #12]
 800d0e4:	60b9      	str	r1, [r7, #8]
 800d0e6:	607a      	str	r2, [r7, #4]
 800d0e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	689b      	ldr	r3, [r3, #8]
 800d0ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d0f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	021a      	lsls	r2, r3, #8
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	431a      	orrs	r2, r3
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	4313      	orrs	r3, r2
 800d104:	697a      	ldr	r2, [r7, #20]
 800d106:	4313      	orrs	r3, r2
 800d108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	697a      	ldr	r2, [r7, #20]
 800d10e:	609a      	str	r2, [r3, #8]
}
 800d110:	bf00      	nop
 800d112:	371c      	adds	r7, #28
 800d114:	46bd      	mov	sp, r7
 800d116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11a:	4770      	bx	lr

0800d11c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d11c:	b480      	push	{r7}
 800d11e:	b085      	sub	sp, #20
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	d101      	bne.n	800d134 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d130:	2302      	movs	r3, #2
 800d132:	e04f      	b.n	800d1d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2201      	movs	r2, #1
 800d138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2202      	movs	r2, #2
 800d140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	685b      	ldr	r3, [r3, #4]
 800d14a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	689b      	ldr	r3, [r3, #8]
 800d152:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4a21      	ldr	r2, [pc, #132]	; (800d1e0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800d15a:	4293      	cmp	r3, r2
 800d15c:	d108      	bne.n	800d170 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d164:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	685b      	ldr	r3, [r3, #4]
 800d16a:	68fa      	ldr	r2, [r7, #12]
 800d16c:	4313      	orrs	r3, r2
 800d16e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d176:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	68fa      	ldr	r2, [r7, #12]
 800d17e:	4313      	orrs	r3, r2
 800d180:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	68fa      	ldr	r2, [r7, #12]
 800d188:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	4a14      	ldr	r2, [pc, #80]	; (800d1e0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800d190:	4293      	cmp	r3, r2
 800d192:	d009      	beq.n	800d1a8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d19c:	d004      	beq.n	800d1a8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	4a10      	ldr	r2, [pc, #64]	; (800d1e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800d1a4:	4293      	cmp	r3, r2
 800d1a6:	d10c      	bne.n	800d1c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d1ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	689b      	ldr	r3, [r3, #8]
 800d1b4:	68ba      	ldr	r2, [r7, #8]
 800d1b6:	4313      	orrs	r3, r2
 800d1b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	68ba      	ldr	r2, [r7, #8]
 800d1c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d1d2:	2300      	movs	r3, #0
}
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	3714      	adds	r7, #20
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1de:	4770      	bx	lr
 800d1e0:	40012c00 	.word	0x40012c00
 800d1e4:	40014000 	.word	0x40014000

0800d1e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b083      	sub	sp, #12
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d1f0:	bf00      	nop
 800d1f2:	370c      	adds	r7, #12
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fa:	4770      	bx	lr

0800d1fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d1fc:	b480      	push	{r7}
 800d1fe:	b083      	sub	sp, #12
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d204:	bf00      	nop
 800d206:	370c      	adds	r7, #12
 800d208:	46bd      	mov	sp, r7
 800d20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20e:	4770      	bx	lr

0800d210 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d210:	b480      	push	{r7}
 800d212:	b083      	sub	sp, #12
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d218:	bf00      	nop
 800d21a:	370c      	adds	r7, #12
 800d21c:	46bd      	mov	sp, r7
 800d21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d222:	4770      	bx	lr

0800d224 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b082      	sub	sp, #8
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d101      	bne.n	800d236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d232:	2301      	movs	r3, #1
 800d234:	e040      	b.n	800d2b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d106      	bne.n	800d24c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2200      	movs	r2, #0
 800d242:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f7f5 fba4 	bl	8002994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2224      	movs	r2, #36	; 0x24
 800d250:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	681a      	ldr	r2, [r3, #0]
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	f022 0201 	bic.w	r2, r2, #1
 800d260:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f000 fbe8 	bl	800da38 <UART_SetConfig>
 800d268:	4603      	mov	r3, r0
 800d26a:	2b01      	cmp	r3, #1
 800d26c:	d101      	bne.n	800d272 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d26e:	2301      	movs	r3, #1
 800d270:	e022      	b.n	800d2b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d276:	2b00      	cmp	r3, #0
 800d278:	d002      	beq.n	800d280 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f000 fe36 	bl	800deec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	685a      	ldr	r2, [r3, #4]
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d28e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	689a      	ldr	r2, [r3, #8]
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d29e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	681a      	ldr	r2, [r3, #0]
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f042 0201 	orr.w	r2, r2, #1
 800d2ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d2b0:	6878      	ldr	r0, [r7, #4]
 800d2b2:	f000 febd 	bl	800e030 <UART_CheckIdleState>
 800d2b6:	4603      	mov	r3, r0
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	3708      	adds	r7, #8
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}

0800d2c0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d2c0:	b480      	push	{r7}
 800d2c2:	b08b      	sub	sp, #44	; 0x2c
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	60f8      	str	r0, [r7, #12]
 800d2c8:	60b9      	str	r1, [r7, #8]
 800d2ca:	4613      	mov	r3, r2
 800d2cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d2d2:	2b20      	cmp	r3, #32
 800d2d4:	d156      	bne.n	800d384 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d002      	beq.n	800d2e2 <HAL_UART_Transmit_IT+0x22>
 800d2dc:	88fb      	ldrh	r3, [r7, #6]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d101      	bne.n	800d2e6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	e04f      	b.n	800d386 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d2ec:	2b01      	cmp	r3, #1
 800d2ee:	d101      	bne.n	800d2f4 <HAL_UART_Transmit_IT+0x34>
 800d2f0:	2302      	movs	r3, #2
 800d2f2:	e048      	b.n	800d386 <HAL_UART_Transmit_IT+0xc6>
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	68ba      	ldr	r2, [r7, #8]
 800d300:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	88fa      	ldrh	r2, [r7, #6]
 800d306:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	88fa      	ldrh	r2, [r7, #6]
 800d30e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	2200      	movs	r2, #0
 800d316:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	2200      	movs	r2, #0
 800d31c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	2221      	movs	r2, #33	; 0x21
 800d324:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	689b      	ldr	r3, [r3, #8]
 800d32a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d32e:	d107      	bne.n	800d340 <HAL_UART_Transmit_IT+0x80>
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	691b      	ldr	r3, [r3, #16]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d103      	bne.n	800d340 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	4a16      	ldr	r2, [pc, #88]	; (800d394 <HAL_UART_Transmit_IT+0xd4>)
 800d33c:	669a      	str	r2, [r3, #104]	; 0x68
 800d33e:	e002      	b.n	800d346 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	4a15      	ldr	r2, [pc, #84]	; (800d398 <HAL_UART_Transmit_IT+0xd8>)
 800d344:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	2200      	movs	r2, #0
 800d34a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	e853 3f00 	ldrex	r3, [r3]
 800d35a:	613b      	str	r3, [r7, #16]
   return(result);
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d362:	627b      	str	r3, [r7, #36]	; 0x24
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	461a      	mov	r2, r3
 800d36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d36c:	623b      	str	r3, [r7, #32]
 800d36e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d370:	69f9      	ldr	r1, [r7, #28]
 800d372:	6a3a      	ldr	r2, [r7, #32]
 800d374:	e841 2300 	strex	r3, r2, [r1]
 800d378:	61bb      	str	r3, [r7, #24]
   return(result);
 800d37a:	69bb      	ldr	r3, [r7, #24]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d1e6      	bne.n	800d34e <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800d380:	2300      	movs	r3, #0
 800d382:	e000      	b.n	800d386 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800d384:	2302      	movs	r3, #2
  }
}
 800d386:	4618      	mov	r0, r3
 800d388:	372c      	adds	r7, #44	; 0x2c
 800d38a:	46bd      	mov	sp, r7
 800d38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d390:	4770      	bx	lr
 800d392:	bf00      	nop
 800d394:	0800e58b 	.word	0x0800e58b
 800d398:	0800e4d3 	.word	0x0800e4d3

0800d39c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b08a      	sub	sp, #40	; 0x28
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	60f8      	str	r0, [r7, #12]
 800d3a4:	60b9      	str	r1, [r7, #8]
 800d3a6:	4613      	mov	r3, r2
 800d3a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3ae:	2b20      	cmp	r3, #32
 800d3b0:	d142      	bne.n	800d438 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d002      	beq.n	800d3be <HAL_UART_Receive_IT+0x22>
 800d3b8:	88fb      	ldrh	r3, [r7, #6]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d101      	bne.n	800d3c2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800d3be:	2301      	movs	r3, #1
 800d3c0:	e03b      	b.n	800d43a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d3c8:	2b01      	cmp	r3, #1
 800d3ca:	d101      	bne.n	800d3d0 <HAL_UART_Receive_IT+0x34>
 800d3cc:	2302      	movs	r3, #2
 800d3ce:	e034      	b.n	800d43a <HAL_UART_Receive_IT+0x9e>
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	2201      	movs	r2, #1
 800d3d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	4a18      	ldr	r2, [pc, #96]	; (800d444 <HAL_UART_Receive_IT+0xa8>)
 800d3e4:	4293      	cmp	r3, r2
 800d3e6:	d01f      	beq.n	800d428 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	685b      	ldr	r3, [r3, #4]
 800d3ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d018      	beq.n	800d428 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3fc:	697b      	ldr	r3, [r7, #20]
 800d3fe:	e853 3f00 	ldrex	r3, [r3]
 800d402:	613b      	str	r3, [r7, #16]
   return(result);
 800d404:	693b      	ldr	r3, [r7, #16]
 800d406:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d40a:	627b      	str	r3, [r7, #36]	; 0x24
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	461a      	mov	r2, r3
 800d412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d414:	623b      	str	r3, [r7, #32]
 800d416:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d418:	69f9      	ldr	r1, [r7, #28]
 800d41a:	6a3a      	ldr	r2, [r7, #32]
 800d41c:	e841 2300 	strex	r3, r2, [r1]
 800d420:	61bb      	str	r3, [r7, #24]
   return(result);
 800d422:	69bb      	ldr	r3, [r7, #24]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d1e6      	bne.n	800d3f6 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d428:	88fb      	ldrh	r3, [r7, #6]
 800d42a:	461a      	mov	r2, r3
 800d42c:	68b9      	ldr	r1, [r7, #8]
 800d42e:	68f8      	ldr	r0, [r7, #12]
 800d430:	f000 ff0c 	bl	800e24c <UART_Start_Receive_IT>
 800d434:	4603      	mov	r3, r0
 800d436:	e000      	b.n	800d43a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800d438:	2302      	movs	r3, #2
  }
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	3728      	adds	r7, #40	; 0x28
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}
 800d442:	bf00      	nop
 800d444:	40008000 	.word	0x40008000

0800d448 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b0ba      	sub	sp, #232	; 0xe8
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	69db      	ldr	r3, [r3, #28]
 800d456:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	689b      	ldr	r3, [r3, #8]
 800d46a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d46e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d472:	f640 030f 	movw	r3, #2063	; 0x80f
 800d476:	4013      	ands	r3, r2
 800d478:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d47c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d480:	2b00      	cmp	r3, #0
 800d482:	d115      	bne.n	800d4b0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800d484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d488:	f003 0320 	and.w	r3, r3, #32
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d00f      	beq.n	800d4b0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800d490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d494:	f003 0320 	and.w	r3, r3, #32
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d009      	beq.n	800d4b0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	f000 82a6 	beq.w	800d9f2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	4798      	blx	r3
      }
      return;
 800d4ae:	e2a0      	b.n	800d9f2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800d4b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	f000 8117 	beq.w	800d6e8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800d4ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d4be:	f003 0301 	and.w	r3, r3, #1
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d106      	bne.n	800d4d4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800d4c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d4ca:	4b85      	ldr	r3, [pc, #532]	; (800d6e0 <HAL_UART_IRQHandler+0x298>)
 800d4cc:	4013      	ands	r3, r2
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	f000 810a 	beq.w	800d6e8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d4d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4d8:	f003 0301 	and.w	r3, r3, #1
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d011      	beq.n	800d504 <HAL_UART_IRQHandler+0xbc>
 800d4e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d00b      	beq.n	800d504 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	2201      	movs	r2, #1
 800d4f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4fa:	f043 0201 	orr.w	r2, r3, #1
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d508:	f003 0302 	and.w	r3, r3, #2
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d011      	beq.n	800d534 <HAL_UART_IRQHandler+0xec>
 800d510:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d514:	f003 0301 	and.w	r3, r3, #1
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d00b      	beq.n	800d534 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	2202      	movs	r2, #2
 800d522:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d52a:	f043 0204 	orr.w	r2, r3, #4
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d538:	f003 0304 	and.w	r3, r3, #4
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d011      	beq.n	800d564 <HAL_UART_IRQHandler+0x11c>
 800d540:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d544:	f003 0301 	and.w	r3, r3, #1
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d00b      	beq.n	800d564 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	2204      	movs	r2, #4
 800d552:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d55a:	f043 0202 	orr.w	r2, r3, #2
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d568:	f003 0308 	and.w	r3, r3, #8
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d017      	beq.n	800d5a0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800d570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d574:	f003 0320 	and.w	r3, r3, #32
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d105      	bne.n	800d588 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800d57c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d580:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800d584:	2b00      	cmp	r3, #0
 800d586:	d00b      	beq.n	800d5a0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	2208      	movs	r2, #8
 800d58e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d596:	f043 0208 	orr.w	r2, r3, #8
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d5a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d012      	beq.n	800d5d2 <HAL_UART_IRQHandler+0x18a>
 800d5ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d00c      	beq.n	800d5d2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d5c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5c8:	f043 0220 	orr.w	r2, r3, #32
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	f000 820c 	beq.w	800d9f6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800d5de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5e2:	f003 0320 	and.w	r3, r3, #32
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d00d      	beq.n	800d606 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800d5ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5ee:	f003 0320 	and.w	r3, r3, #32
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d007      	beq.n	800d606 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d003      	beq.n	800d606 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d60c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	689b      	ldr	r3, [r3, #8]
 800d616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d61a:	2b40      	cmp	r3, #64	; 0x40
 800d61c:	d005      	beq.n	800d62a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d61e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d622:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d626:	2b00      	cmp	r3, #0
 800d628:	d04f      	beq.n	800d6ca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f000 fed8 	bl	800e3e0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	689b      	ldr	r3, [r3, #8]
 800d636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d63a:	2b40      	cmp	r3, #64	; 0x40
 800d63c:	d141      	bne.n	800d6c2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	3308      	adds	r3, #8
 800d644:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d648:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d64c:	e853 3f00 	ldrex	r3, [r3]
 800d650:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d654:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d65c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	3308      	adds	r3, #8
 800d666:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d66a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d66e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d672:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d676:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d67a:	e841 2300 	strex	r3, r2, [r1]
 800d67e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d682:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d686:	2b00      	cmp	r3, #0
 800d688:	d1d9      	bne.n	800d63e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d013      	beq.n	800d6ba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d696:	4a13      	ldr	r2, [pc, #76]	; (800d6e4 <HAL_UART_IRQHandler+0x29c>)
 800d698:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f7fc fd23 	bl	800a0ea <HAL_DMA_Abort_IT>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d017      	beq.n	800d6da <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6b0:	687a      	ldr	r2, [r7, #4]
 800d6b2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800d6b4:	4610      	mov	r0, r2
 800d6b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6b8:	e00f      	b.n	800d6da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d6ba:	6878      	ldr	r0, [r7, #4]
 800d6bc:	f000 f9a6 	bl	800da0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6c0:	e00b      	b.n	800d6da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	f000 f9a2 	bl	800da0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6c8:	e007      	b.n	800d6da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f000 f99e 	bl	800da0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800d6d8:	e18d      	b.n	800d9f6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6da:	bf00      	nop
    return;
 800d6dc:	e18b      	b.n	800d9f6 <HAL_UART_IRQHandler+0x5ae>
 800d6de:	bf00      	nop
 800d6e0:	04000120 	.word	0x04000120
 800d6e4:	0800e4a7 	.word	0x0800e4a7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d6ec:	2b01      	cmp	r3, #1
 800d6ee:	f040 8146 	bne.w	800d97e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d6f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d6f6:	f003 0310 	and.w	r3, r3, #16
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	f000 813f 	beq.w	800d97e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d704:	f003 0310 	and.w	r3, r3, #16
 800d708:	2b00      	cmp	r3, #0
 800d70a:	f000 8138 	beq.w	800d97e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	2210      	movs	r2, #16
 800d714:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	689b      	ldr	r3, [r3, #8]
 800d71c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d720:	2b40      	cmp	r3, #64	; 0x40
 800d722:	f040 80b4 	bne.w	800d88e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	685b      	ldr	r3, [r3, #4]
 800d72e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d732:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d736:	2b00      	cmp	r3, #0
 800d738:	f000 815f 	beq.w	800d9fa <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d742:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d746:	429a      	cmp	r2, r3
 800d748:	f080 8157 	bcs.w	800d9fa <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d752:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	f003 0320 	and.w	r3, r3, #32
 800d762:	2b00      	cmp	r3, #0
 800d764:	f040 8085 	bne.w	800d872 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d770:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d774:	e853 3f00 	ldrex	r3, [r3]
 800d778:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d77c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d784:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	461a      	mov	r2, r3
 800d78e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d792:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d796:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d79a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d79e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d7a2:	e841 2300 	strex	r3, r2, [r1]
 800d7a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d7aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d1da      	bne.n	800d768 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	3308      	adds	r3, #8
 800d7b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d7bc:	e853 3f00 	ldrex	r3, [r3]
 800d7c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d7c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d7c4:	f023 0301 	bic.w	r3, r3, #1
 800d7c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	3308      	adds	r3, #8
 800d7d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d7d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d7da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d7de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d7e2:	e841 2300 	strex	r3, r2, [r1]
 800d7e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d7e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d1e1      	bne.n	800d7b2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	3308      	adds	r3, #8
 800d7f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d7f8:	e853 3f00 	ldrex	r3, [r3]
 800d7fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d7fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d804:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	3308      	adds	r3, #8
 800d80e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d812:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d814:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d816:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d818:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d81a:	e841 2300 	strex	r3, r2, [r1]
 800d81e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d820:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d822:	2b00      	cmp	r3, #0
 800d824:	d1e3      	bne.n	800d7ee <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2220      	movs	r2, #32
 800d82a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2200      	movs	r2, #0
 800d830:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d83a:	e853 3f00 	ldrex	r3, [r3]
 800d83e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d842:	f023 0310 	bic.w	r3, r3, #16
 800d846:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	461a      	mov	r2, r3
 800d850:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d854:	65bb      	str	r3, [r7, #88]	; 0x58
 800d856:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d858:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d85a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d85c:	e841 2300 	strex	r3, r2, [r1]
 800d860:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d864:	2b00      	cmp	r3, #0
 800d866:	d1e4      	bne.n	800d832 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d86c:	4618      	mov	r0, r3
 800d86e:	f7fc fbfe 	bl	800a06e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d87e:	b29b      	uxth	r3, r3
 800d880:	1ad3      	subs	r3, r2, r3
 800d882:	b29b      	uxth	r3, r3
 800d884:	4619      	mov	r1, r3
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f000 f8ca 	bl	800da20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d88c:	e0b5      	b.n	800d9fa <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d89a:	b29b      	uxth	r3, r3
 800d89c:	1ad3      	subs	r3, r2, r3
 800d89e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d8a8:	b29b      	uxth	r3, r3
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	f000 80a7 	beq.w	800d9fe <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800d8b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	f000 80a2 	beq.w	800d9fe <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c2:	e853 3f00 	ldrex	r3, [r3]
 800d8c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d8c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d8ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	461a      	mov	r2, r3
 800d8d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d8dc:	647b      	str	r3, [r7, #68]	; 0x44
 800d8de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d8e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d8e4:	e841 2300 	strex	r3, r2, [r1]
 800d8e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d8ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d1e4      	bne.n	800d8ba <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	3308      	adds	r3, #8
 800d8f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fa:	e853 3f00 	ldrex	r3, [r3]
 800d8fe:	623b      	str	r3, [r7, #32]
   return(result);
 800d900:	6a3b      	ldr	r3, [r7, #32]
 800d902:	f023 0301 	bic.w	r3, r3, #1
 800d906:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	3308      	adds	r3, #8
 800d910:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d914:	633a      	str	r2, [r7, #48]	; 0x30
 800d916:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d918:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d91a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d91c:	e841 2300 	strex	r3, r2, [r1]
 800d920:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d924:	2b00      	cmp	r3, #0
 800d926:	d1e3      	bne.n	800d8f0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2220      	movs	r2, #32
 800d92c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2200      	movs	r2, #0
 800d932:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2200      	movs	r2, #0
 800d938:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	e853 3f00 	ldrex	r3, [r3]
 800d946:	60fb      	str	r3, [r7, #12]
   return(result);
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	f023 0310 	bic.w	r3, r3, #16
 800d94e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	461a      	mov	r2, r3
 800d958:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d95c:	61fb      	str	r3, [r7, #28]
 800d95e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d960:	69b9      	ldr	r1, [r7, #24]
 800d962:	69fa      	ldr	r2, [r7, #28]
 800d964:	e841 2300 	strex	r3, r2, [r1]
 800d968:	617b      	str	r3, [r7, #20]
   return(result);
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d1e4      	bne.n	800d93a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d970:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d974:	4619      	mov	r1, r3
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f000 f852 	bl	800da20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d97c:	e03f      	b.n	800d9fe <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d97e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d986:	2b00      	cmp	r3, #0
 800d988:	d00e      	beq.n	800d9a8 <HAL_UART_IRQHandler+0x560>
 800d98a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d98e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d992:	2b00      	cmp	r3, #0
 800d994:	d008      	beq.n	800d9a8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d99e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d9a0:	6878      	ldr	r0, [r7, #4]
 800d9a2:	f000 ffdc 	bl	800e95e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d9a6:	e02d      	b.n	800da04 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800d9a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d00e      	beq.n	800d9d2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800d9b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d9b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d008      	beq.n	800d9d2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d01c      	beq.n	800da02 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	4798      	blx	r3
    }
    return;
 800d9d0:	e017      	b.n	800da02 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d9d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d012      	beq.n	800da04 <HAL_UART_IRQHandler+0x5bc>
 800d9de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d9e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d00c      	beq.n	800da04 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f000 fe2d 	bl	800e64a <UART_EndTransmit_IT>
    return;
 800d9f0:	e008      	b.n	800da04 <HAL_UART_IRQHandler+0x5bc>
      return;
 800d9f2:	bf00      	nop
 800d9f4:	e006      	b.n	800da04 <HAL_UART_IRQHandler+0x5bc>
    return;
 800d9f6:	bf00      	nop
 800d9f8:	e004      	b.n	800da04 <HAL_UART_IRQHandler+0x5bc>
      return;
 800d9fa:	bf00      	nop
 800d9fc:	e002      	b.n	800da04 <HAL_UART_IRQHandler+0x5bc>
      return;
 800d9fe:	bf00      	nop
 800da00:	e000      	b.n	800da04 <HAL_UART_IRQHandler+0x5bc>
    return;
 800da02:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800da04:	37e8      	adds	r7, #232	; 0xe8
 800da06:	46bd      	mov	sp, r7
 800da08:	bd80      	pop	{r7, pc}
 800da0a:	bf00      	nop

0800da0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800da0c:	b480      	push	{r7}
 800da0e:	b083      	sub	sp, #12
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800da14:	bf00      	nop
 800da16:	370c      	adds	r7, #12
 800da18:	46bd      	mov	sp, r7
 800da1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1e:	4770      	bx	lr

0800da20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800da20:	b480      	push	{r7}
 800da22:	b083      	sub	sp, #12
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
 800da28:	460b      	mov	r3, r1
 800da2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800da2c:	bf00      	nop
 800da2e:	370c      	adds	r7, #12
 800da30:	46bd      	mov	sp, r7
 800da32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da36:	4770      	bx	lr

0800da38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800da38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800da3c:	b08a      	sub	sp, #40	; 0x28
 800da3e:	af00      	add	r7, sp, #0
 800da40:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800da42:	2300      	movs	r3, #0
 800da44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	689a      	ldr	r2, [r3, #8]
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	691b      	ldr	r3, [r3, #16]
 800da50:	431a      	orrs	r2, r3
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	695b      	ldr	r3, [r3, #20]
 800da56:	431a      	orrs	r2, r3
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	69db      	ldr	r3, [r3, #28]
 800da5c:	4313      	orrs	r3, r2
 800da5e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	681a      	ldr	r2, [r3, #0]
 800da66:	4b9e      	ldr	r3, [pc, #632]	; (800dce0 <UART_SetConfig+0x2a8>)
 800da68:	4013      	ands	r3, r2
 800da6a:	68fa      	ldr	r2, [r7, #12]
 800da6c:	6812      	ldr	r2, [r2, #0]
 800da6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da70:	430b      	orrs	r3, r1
 800da72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	685b      	ldr	r3, [r3, #4]
 800da7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	68da      	ldr	r2, [r3, #12]
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	430a      	orrs	r2, r1
 800da88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	699b      	ldr	r3, [r3, #24]
 800da8e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4a93      	ldr	r2, [pc, #588]	; (800dce4 <UART_SetConfig+0x2ac>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d004      	beq.n	800daa4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	6a1b      	ldr	r3, [r3, #32]
 800da9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800daa0:	4313      	orrs	r3, r2
 800daa2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	689b      	ldr	r3, [r3, #8]
 800daaa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dab4:	430a      	orrs	r2, r1
 800dab6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	4a8a      	ldr	r2, [pc, #552]	; (800dce8 <UART_SetConfig+0x2b0>)
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d126      	bne.n	800db10 <UART_SetConfig+0xd8>
 800dac2:	4b8a      	ldr	r3, [pc, #552]	; (800dcec <UART_SetConfig+0x2b4>)
 800dac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dac8:	f003 0303 	and.w	r3, r3, #3
 800dacc:	2b03      	cmp	r3, #3
 800dace:	d81b      	bhi.n	800db08 <UART_SetConfig+0xd0>
 800dad0:	a201      	add	r2, pc, #4	; (adr r2, 800dad8 <UART_SetConfig+0xa0>)
 800dad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dad6:	bf00      	nop
 800dad8:	0800dae9 	.word	0x0800dae9
 800dadc:	0800daf9 	.word	0x0800daf9
 800dae0:	0800daf1 	.word	0x0800daf1
 800dae4:	0800db01 	.word	0x0800db01
 800dae8:	2301      	movs	r3, #1
 800daea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800daee:	e0ab      	b.n	800dc48 <UART_SetConfig+0x210>
 800daf0:	2302      	movs	r3, #2
 800daf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800daf6:	e0a7      	b.n	800dc48 <UART_SetConfig+0x210>
 800daf8:	2304      	movs	r3, #4
 800dafa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dafe:	e0a3      	b.n	800dc48 <UART_SetConfig+0x210>
 800db00:	2308      	movs	r3, #8
 800db02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800db06:	e09f      	b.n	800dc48 <UART_SetConfig+0x210>
 800db08:	2310      	movs	r3, #16
 800db0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800db0e:	e09b      	b.n	800dc48 <UART_SetConfig+0x210>
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	4a76      	ldr	r2, [pc, #472]	; (800dcf0 <UART_SetConfig+0x2b8>)
 800db16:	4293      	cmp	r3, r2
 800db18:	d138      	bne.n	800db8c <UART_SetConfig+0x154>
 800db1a:	4b74      	ldr	r3, [pc, #464]	; (800dcec <UART_SetConfig+0x2b4>)
 800db1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db20:	f003 030c 	and.w	r3, r3, #12
 800db24:	2b0c      	cmp	r3, #12
 800db26:	d82d      	bhi.n	800db84 <UART_SetConfig+0x14c>
 800db28:	a201      	add	r2, pc, #4	; (adr r2, 800db30 <UART_SetConfig+0xf8>)
 800db2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db2e:	bf00      	nop
 800db30:	0800db65 	.word	0x0800db65
 800db34:	0800db85 	.word	0x0800db85
 800db38:	0800db85 	.word	0x0800db85
 800db3c:	0800db85 	.word	0x0800db85
 800db40:	0800db75 	.word	0x0800db75
 800db44:	0800db85 	.word	0x0800db85
 800db48:	0800db85 	.word	0x0800db85
 800db4c:	0800db85 	.word	0x0800db85
 800db50:	0800db6d 	.word	0x0800db6d
 800db54:	0800db85 	.word	0x0800db85
 800db58:	0800db85 	.word	0x0800db85
 800db5c:	0800db85 	.word	0x0800db85
 800db60:	0800db7d 	.word	0x0800db7d
 800db64:	2300      	movs	r3, #0
 800db66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800db6a:	e06d      	b.n	800dc48 <UART_SetConfig+0x210>
 800db6c:	2302      	movs	r3, #2
 800db6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800db72:	e069      	b.n	800dc48 <UART_SetConfig+0x210>
 800db74:	2304      	movs	r3, #4
 800db76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800db7a:	e065      	b.n	800dc48 <UART_SetConfig+0x210>
 800db7c:	2308      	movs	r3, #8
 800db7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800db82:	e061      	b.n	800dc48 <UART_SetConfig+0x210>
 800db84:	2310      	movs	r3, #16
 800db86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800db8a:	e05d      	b.n	800dc48 <UART_SetConfig+0x210>
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	4a58      	ldr	r2, [pc, #352]	; (800dcf4 <UART_SetConfig+0x2bc>)
 800db92:	4293      	cmp	r3, r2
 800db94:	d125      	bne.n	800dbe2 <UART_SetConfig+0x1aa>
 800db96:	4b55      	ldr	r3, [pc, #340]	; (800dcec <UART_SetConfig+0x2b4>)
 800db98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db9c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800dba0:	2b30      	cmp	r3, #48	; 0x30
 800dba2:	d016      	beq.n	800dbd2 <UART_SetConfig+0x19a>
 800dba4:	2b30      	cmp	r3, #48	; 0x30
 800dba6:	d818      	bhi.n	800dbda <UART_SetConfig+0x1a2>
 800dba8:	2b20      	cmp	r3, #32
 800dbaa:	d00a      	beq.n	800dbc2 <UART_SetConfig+0x18a>
 800dbac:	2b20      	cmp	r3, #32
 800dbae:	d814      	bhi.n	800dbda <UART_SetConfig+0x1a2>
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d002      	beq.n	800dbba <UART_SetConfig+0x182>
 800dbb4:	2b10      	cmp	r3, #16
 800dbb6:	d008      	beq.n	800dbca <UART_SetConfig+0x192>
 800dbb8:	e00f      	b.n	800dbda <UART_SetConfig+0x1a2>
 800dbba:	2300      	movs	r3, #0
 800dbbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dbc0:	e042      	b.n	800dc48 <UART_SetConfig+0x210>
 800dbc2:	2302      	movs	r3, #2
 800dbc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dbc8:	e03e      	b.n	800dc48 <UART_SetConfig+0x210>
 800dbca:	2304      	movs	r3, #4
 800dbcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dbd0:	e03a      	b.n	800dc48 <UART_SetConfig+0x210>
 800dbd2:	2308      	movs	r3, #8
 800dbd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dbd8:	e036      	b.n	800dc48 <UART_SetConfig+0x210>
 800dbda:	2310      	movs	r3, #16
 800dbdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dbe0:	e032      	b.n	800dc48 <UART_SetConfig+0x210>
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	4a3f      	ldr	r2, [pc, #252]	; (800dce4 <UART_SetConfig+0x2ac>)
 800dbe8:	4293      	cmp	r3, r2
 800dbea:	d12a      	bne.n	800dc42 <UART_SetConfig+0x20a>
 800dbec:	4b3f      	ldr	r3, [pc, #252]	; (800dcec <UART_SetConfig+0x2b4>)
 800dbee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dbf2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800dbf6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800dbfa:	d01a      	beq.n	800dc32 <UART_SetConfig+0x1fa>
 800dbfc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800dc00:	d81b      	bhi.n	800dc3a <UART_SetConfig+0x202>
 800dc02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc06:	d00c      	beq.n	800dc22 <UART_SetConfig+0x1ea>
 800dc08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc0c:	d815      	bhi.n	800dc3a <UART_SetConfig+0x202>
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d003      	beq.n	800dc1a <UART_SetConfig+0x1e2>
 800dc12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dc16:	d008      	beq.n	800dc2a <UART_SetConfig+0x1f2>
 800dc18:	e00f      	b.n	800dc3a <UART_SetConfig+0x202>
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dc20:	e012      	b.n	800dc48 <UART_SetConfig+0x210>
 800dc22:	2302      	movs	r3, #2
 800dc24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dc28:	e00e      	b.n	800dc48 <UART_SetConfig+0x210>
 800dc2a:	2304      	movs	r3, #4
 800dc2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dc30:	e00a      	b.n	800dc48 <UART_SetConfig+0x210>
 800dc32:	2308      	movs	r3, #8
 800dc34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dc38:	e006      	b.n	800dc48 <UART_SetConfig+0x210>
 800dc3a:	2310      	movs	r3, #16
 800dc3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800dc40:	e002      	b.n	800dc48 <UART_SetConfig+0x210>
 800dc42:	2310      	movs	r3, #16
 800dc44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	4a25      	ldr	r2, [pc, #148]	; (800dce4 <UART_SetConfig+0x2ac>)
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	f040 808a 	bne.w	800dd68 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dc54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dc58:	2b08      	cmp	r3, #8
 800dc5a:	d824      	bhi.n	800dca6 <UART_SetConfig+0x26e>
 800dc5c:	a201      	add	r2, pc, #4	; (adr r2, 800dc64 <UART_SetConfig+0x22c>)
 800dc5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc62:	bf00      	nop
 800dc64:	0800dc89 	.word	0x0800dc89
 800dc68:	0800dca7 	.word	0x0800dca7
 800dc6c:	0800dc91 	.word	0x0800dc91
 800dc70:	0800dca7 	.word	0x0800dca7
 800dc74:	0800dc97 	.word	0x0800dc97
 800dc78:	0800dca7 	.word	0x0800dca7
 800dc7c:	0800dca7 	.word	0x0800dca7
 800dc80:	0800dca7 	.word	0x0800dca7
 800dc84:	0800dc9f 	.word	0x0800dc9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dc88:	f7fd fb6a 	bl	800b360 <HAL_RCC_GetPCLK1Freq>
 800dc8c:	61f8      	str	r0, [r7, #28]
        break;
 800dc8e:	e010      	b.n	800dcb2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dc90:	4b19      	ldr	r3, [pc, #100]	; (800dcf8 <UART_SetConfig+0x2c0>)
 800dc92:	61fb      	str	r3, [r7, #28]
        break;
 800dc94:	e00d      	b.n	800dcb2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dc96:	f7fd facb 	bl	800b230 <HAL_RCC_GetSysClockFreq>
 800dc9a:	61f8      	str	r0, [r7, #28]
        break;
 800dc9c:	e009      	b.n	800dcb2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dc9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dca2:	61fb      	str	r3, [r7, #28]
        break;
 800dca4:	e005      	b.n	800dcb2 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800dca6:	2300      	movs	r3, #0
 800dca8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800dcaa:	2301      	movs	r3, #1
 800dcac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800dcb0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dcb2:	69fb      	ldr	r3, [r7, #28]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	f000 8109 	beq.w	800decc <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	685a      	ldr	r2, [r3, #4]
 800dcbe:	4613      	mov	r3, r2
 800dcc0:	005b      	lsls	r3, r3, #1
 800dcc2:	4413      	add	r3, r2
 800dcc4:	69fa      	ldr	r2, [r7, #28]
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	d305      	bcc.n	800dcd6 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	685b      	ldr	r3, [r3, #4]
 800dcce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800dcd0:	69fa      	ldr	r2, [r7, #28]
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	d912      	bls.n	800dcfc <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800dcd6:	2301      	movs	r3, #1
 800dcd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800dcdc:	e0f6      	b.n	800decc <UART_SetConfig+0x494>
 800dcde:	bf00      	nop
 800dce0:	efff69f3 	.word	0xefff69f3
 800dce4:	40008000 	.word	0x40008000
 800dce8:	40013800 	.word	0x40013800
 800dcec:	40021000 	.word	0x40021000
 800dcf0:	40004400 	.word	0x40004400
 800dcf4:	40004800 	.word	0x40004800
 800dcf8:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800dcfc:	69fb      	ldr	r3, [r7, #28]
 800dcfe:	2200      	movs	r2, #0
 800dd00:	461c      	mov	r4, r3
 800dd02:	4615      	mov	r5, r2
 800dd04:	f04f 0200 	mov.w	r2, #0
 800dd08:	f04f 0300 	mov.w	r3, #0
 800dd0c:	022b      	lsls	r3, r5, #8
 800dd0e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800dd12:	0222      	lsls	r2, r4, #8
 800dd14:	68f9      	ldr	r1, [r7, #12]
 800dd16:	6849      	ldr	r1, [r1, #4]
 800dd18:	0849      	lsrs	r1, r1, #1
 800dd1a:	2000      	movs	r0, #0
 800dd1c:	4688      	mov	r8, r1
 800dd1e:	4681      	mov	r9, r0
 800dd20:	eb12 0a08 	adds.w	sl, r2, r8
 800dd24:	eb43 0b09 	adc.w	fp, r3, r9
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	685b      	ldr	r3, [r3, #4]
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	603b      	str	r3, [r7, #0]
 800dd30:	607a      	str	r2, [r7, #4]
 800dd32:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd36:	4650      	mov	r0, sl
 800dd38:	4659      	mov	r1, fp
 800dd3a:	f7f2 fa99 	bl	8000270 <__aeabi_uldivmod>
 800dd3e:	4602      	mov	r2, r0
 800dd40:	460b      	mov	r3, r1
 800dd42:	4613      	mov	r3, r2
 800dd44:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dd46:	69bb      	ldr	r3, [r7, #24]
 800dd48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dd4c:	d308      	bcc.n	800dd60 <UART_SetConfig+0x328>
 800dd4e:	69bb      	ldr	r3, [r7, #24]
 800dd50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dd54:	d204      	bcs.n	800dd60 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	69ba      	ldr	r2, [r7, #24]
 800dd5c:	60da      	str	r2, [r3, #12]
 800dd5e:	e0b5      	b.n	800decc <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800dd60:	2301      	movs	r3, #1
 800dd62:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800dd66:	e0b1      	b.n	800decc <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	69db      	ldr	r3, [r3, #28]
 800dd6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd70:	d15d      	bne.n	800de2e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800dd72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dd76:	2b08      	cmp	r3, #8
 800dd78:	d827      	bhi.n	800ddca <UART_SetConfig+0x392>
 800dd7a:	a201      	add	r2, pc, #4	; (adr r2, 800dd80 <UART_SetConfig+0x348>)
 800dd7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd80:	0800dda5 	.word	0x0800dda5
 800dd84:	0800ddad 	.word	0x0800ddad
 800dd88:	0800ddb5 	.word	0x0800ddb5
 800dd8c:	0800ddcb 	.word	0x0800ddcb
 800dd90:	0800ddbb 	.word	0x0800ddbb
 800dd94:	0800ddcb 	.word	0x0800ddcb
 800dd98:	0800ddcb 	.word	0x0800ddcb
 800dd9c:	0800ddcb 	.word	0x0800ddcb
 800dda0:	0800ddc3 	.word	0x0800ddc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dda4:	f7fd fadc 	bl	800b360 <HAL_RCC_GetPCLK1Freq>
 800dda8:	61f8      	str	r0, [r7, #28]
        break;
 800ddaa:	e014      	b.n	800ddd6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ddac:	f7fd faee 	bl	800b38c <HAL_RCC_GetPCLK2Freq>
 800ddb0:	61f8      	str	r0, [r7, #28]
        break;
 800ddb2:	e010      	b.n	800ddd6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ddb4:	4b4c      	ldr	r3, [pc, #304]	; (800dee8 <UART_SetConfig+0x4b0>)
 800ddb6:	61fb      	str	r3, [r7, #28]
        break;
 800ddb8:	e00d      	b.n	800ddd6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ddba:	f7fd fa39 	bl	800b230 <HAL_RCC_GetSysClockFreq>
 800ddbe:	61f8      	str	r0, [r7, #28]
        break;
 800ddc0:	e009      	b.n	800ddd6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ddc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ddc6:	61fb      	str	r3, [r7, #28]
        break;
 800ddc8:	e005      	b.n	800ddd6 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ddce:	2301      	movs	r3, #1
 800ddd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ddd4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ddd6:	69fb      	ldr	r3, [r7, #28]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d077      	beq.n	800decc <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800dddc:	69fb      	ldr	r3, [r7, #28]
 800ddde:	005a      	lsls	r2, r3, #1
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	685b      	ldr	r3, [r3, #4]
 800dde4:	085b      	lsrs	r3, r3, #1
 800dde6:	441a      	add	r2, r3
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	685b      	ldr	r3, [r3, #4]
 800ddec:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddf0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ddf2:	69bb      	ldr	r3, [r7, #24]
 800ddf4:	2b0f      	cmp	r3, #15
 800ddf6:	d916      	bls.n	800de26 <UART_SetConfig+0x3ee>
 800ddf8:	69bb      	ldr	r3, [r7, #24]
 800ddfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ddfe:	d212      	bcs.n	800de26 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800de00:	69bb      	ldr	r3, [r7, #24]
 800de02:	b29b      	uxth	r3, r3
 800de04:	f023 030f 	bic.w	r3, r3, #15
 800de08:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800de0a:	69bb      	ldr	r3, [r7, #24]
 800de0c:	085b      	lsrs	r3, r3, #1
 800de0e:	b29b      	uxth	r3, r3
 800de10:	f003 0307 	and.w	r3, r3, #7
 800de14:	b29a      	uxth	r2, r3
 800de16:	8afb      	ldrh	r3, [r7, #22]
 800de18:	4313      	orrs	r3, r2
 800de1a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	8afa      	ldrh	r2, [r7, #22]
 800de22:	60da      	str	r2, [r3, #12]
 800de24:	e052      	b.n	800decc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800de26:	2301      	movs	r3, #1
 800de28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800de2c:	e04e      	b.n	800decc <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800de2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800de32:	2b08      	cmp	r3, #8
 800de34:	d827      	bhi.n	800de86 <UART_SetConfig+0x44e>
 800de36:	a201      	add	r2, pc, #4	; (adr r2, 800de3c <UART_SetConfig+0x404>)
 800de38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de3c:	0800de61 	.word	0x0800de61
 800de40:	0800de69 	.word	0x0800de69
 800de44:	0800de71 	.word	0x0800de71
 800de48:	0800de87 	.word	0x0800de87
 800de4c:	0800de77 	.word	0x0800de77
 800de50:	0800de87 	.word	0x0800de87
 800de54:	0800de87 	.word	0x0800de87
 800de58:	0800de87 	.word	0x0800de87
 800de5c:	0800de7f 	.word	0x0800de7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800de60:	f7fd fa7e 	bl	800b360 <HAL_RCC_GetPCLK1Freq>
 800de64:	61f8      	str	r0, [r7, #28]
        break;
 800de66:	e014      	b.n	800de92 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800de68:	f7fd fa90 	bl	800b38c <HAL_RCC_GetPCLK2Freq>
 800de6c:	61f8      	str	r0, [r7, #28]
        break;
 800de6e:	e010      	b.n	800de92 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800de70:	4b1d      	ldr	r3, [pc, #116]	; (800dee8 <UART_SetConfig+0x4b0>)
 800de72:	61fb      	str	r3, [r7, #28]
        break;
 800de74:	e00d      	b.n	800de92 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800de76:	f7fd f9db 	bl	800b230 <HAL_RCC_GetSysClockFreq>
 800de7a:	61f8      	str	r0, [r7, #28]
        break;
 800de7c:	e009      	b.n	800de92 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de82:	61fb      	str	r3, [r7, #28]
        break;
 800de84:	e005      	b.n	800de92 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800de86:	2300      	movs	r3, #0
 800de88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800de8a:	2301      	movs	r3, #1
 800de8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800de90:	bf00      	nop
    }

    if (pclk != 0U)
 800de92:	69fb      	ldr	r3, [r7, #28]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d019      	beq.n	800decc <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	685b      	ldr	r3, [r3, #4]
 800de9c:	085a      	lsrs	r2, r3, #1
 800de9e:	69fb      	ldr	r3, [r7, #28]
 800dea0:	441a      	add	r2, r3
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	685b      	ldr	r3, [r3, #4]
 800dea6:	fbb2 f3f3 	udiv	r3, r2, r3
 800deaa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800deac:	69bb      	ldr	r3, [r7, #24]
 800deae:	2b0f      	cmp	r3, #15
 800deb0:	d909      	bls.n	800dec6 <UART_SetConfig+0x48e>
 800deb2:	69bb      	ldr	r3, [r7, #24]
 800deb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800deb8:	d205      	bcs.n	800dec6 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800deba:	69bb      	ldr	r3, [r7, #24]
 800debc:	b29a      	uxth	r2, r3
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	60da      	str	r2, [r3, #12]
 800dec4:	e002      	b.n	800decc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800dec6:	2301      	movs	r3, #1
 800dec8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	2200      	movs	r2, #0
 800ded0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	2200      	movs	r2, #0
 800ded6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800ded8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3728      	adds	r7, #40	; 0x28
 800dee0:	46bd      	mov	sp, r7
 800dee2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dee6:	bf00      	nop
 800dee8:	00f42400 	.word	0x00f42400

0800deec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800deec:	b480      	push	{r7}
 800deee:	b083      	sub	sp, #12
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800def8:	f003 0301 	and.w	r3, r3, #1
 800defc:	2b00      	cmp	r3, #0
 800defe:	d00a      	beq.n	800df16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	685b      	ldr	r3, [r3, #4]
 800df06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	430a      	orrs	r2, r1
 800df14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df1a:	f003 0302 	and.w	r3, r3, #2
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d00a      	beq.n	800df38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	685b      	ldr	r3, [r3, #4]
 800df28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	430a      	orrs	r2, r1
 800df36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df3c:	f003 0304 	and.w	r3, r3, #4
 800df40:	2b00      	cmp	r3, #0
 800df42:	d00a      	beq.n	800df5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	685b      	ldr	r3, [r3, #4]
 800df4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	430a      	orrs	r2, r1
 800df58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df5e:	f003 0308 	and.w	r3, r3, #8
 800df62:	2b00      	cmp	r3, #0
 800df64:	d00a      	beq.n	800df7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	685b      	ldr	r3, [r3, #4]
 800df6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	430a      	orrs	r2, r1
 800df7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df80:	f003 0310 	and.w	r3, r3, #16
 800df84:	2b00      	cmp	r3, #0
 800df86:	d00a      	beq.n	800df9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	689b      	ldr	r3, [r3, #8]
 800df8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	430a      	orrs	r2, r1
 800df9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfa2:	f003 0320 	and.w	r3, r3, #32
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d00a      	beq.n	800dfc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	689b      	ldr	r3, [r3, #8]
 800dfb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	430a      	orrs	r2, r1
 800dfbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d01a      	beq.n	800e002 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	685b      	ldr	r3, [r3, #4]
 800dfd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	430a      	orrs	r2, r1
 800dfe0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dfea:	d10a      	bne.n	800e002 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	685b      	ldr	r3, [r3, #4]
 800dff2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	430a      	orrs	r2, r1
 800e000:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d00a      	beq.n	800e024 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	685b      	ldr	r3, [r3, #4]
 800e014:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	430a      	orrs	r2, r1
 800e022:	605a      	str	r2, [r3, #4]
  }
}
 800e024:	bf00      	nop
 800e026:	370c      	adds	r7, #12
 800e028:	46bd      	mov	sp, r7
 800e02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02e:	4770      	bx	lr

0800e030 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b086      	sub	sp, #24
 800e034:	af02      	add	r7, sp, #8
 800e036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2200      	movs	r2, #0
 800e03c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e040:	f7fb fed4 	bl	8009dec <HAL_GetTick>
 800e044:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	f003 0308 	and.w	r3, r3, #8
 800e050:	2b08      	cmp	r3, #8
 800e052:	d10e      	bne.n	800e072 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e054:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e058:	9300      	str	r3, [sp, #0]
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	2200      	movs	r2, #0
 800e05e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	f000 f82d 	bl	800e0c2 <UART_WaitOnFlagUntilTimeout>
 800e068:	4603      	mov	r3, r0
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d001      	beq.n	800e072 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e06e:	2303      	movs	r3, #3
 800e070:	e023      	b.n	800e0ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	f003 0304 	and.w	r3, r3, #4
 800e07c:	2b04      	cmp	r3, #4
 800e07e:	d10e      	bne.n	800e09e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e080:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e084:	9300      	str	r3, [sp, #0]
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	2200      	movs	r2, #0
 800e08a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e08e:	6878      	ldr	r0, [r7, #4]
 800e090:	f000 f817 	bl	800e0c2 <UART_WaitOnFlagUntilTimeout>
 800e094:	4603      	mov	r3, r0
 800e096:	2b00      	cmp	r3, #0
 800e098:	d001      	beq.n	800e09e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e09a:	2303      	movs	r3, #3
 800e09c:	e00d      	b.n	800e0ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	2220      	movs	r2, #32
 800e0a2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2220      	movs	r2, #32
 800e0a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800e0b8:	2300      	movs	r3, #0
}
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	3710      	adds	r7, #16
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}

0800e0c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e0c2:	b580      	push	{r7, lr}
 800e0c4:	b09c      	sub	sp, #112	; 0x70
 800e0c6:	af00      	add	r7, sp, #0
 800e0c8:	60f8      	str	r0, [r7, #12]
 800e0ca:	60b9      	str	r1, [r7, #8]
 800e0cc:	603b      	str	r3, [r7, #0]
 800e0ce:	4613      	mov	r3, r2
 800e0d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e0d2:	e0a5      	b.n	800e220 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e0d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e0d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0da:	f000 80a1 	beq.w	800e220 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e0de:	f7fb fe85 	bl	8009dec <HAL_GetTick>
 800e0e2:	4602      	mov	r2, r0
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	1ad3      	subs	r3, r2, r3
 800e0e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	d302      	bcc.n	800e0f4 <UART_WaitOnFlagUntilTimeout+0x32>
 800e0ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d13e      	bne.n	800e172 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0fc:	e853 3f00 	ldrex	r3, [r3]
 800e100:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e104:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e108:	667b      	str	r3, [r7, #100]	; 0x64
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	461a      	mov	r2, r3
 800e110:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e112:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e114:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e116:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e118:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e11a:	e841 2300 	strex	r3, r2, [r1]
 800e11e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e120:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e122:	2b00      	cmp	r3, #0
 800e124:	d1e6      	bne.n	800e0f4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	3308      	adds	r3, #8
 800e12c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e12e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e130:	e853 3f00 	ldrex	r3, [r3]
 800e134:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e138:	f023 0301 	bic.w	r3, r3, #1
 800e13c:	663b      	str	r3, [r7, #96]	; 0x60
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	3308      	adds	r3, #8
 800e144:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e146:	64ba      	str	r2, [r7, #72]	; 0x48
 800e148:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e14a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e14c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e14e:	e841 2300 	strex	r3, r2, [r1]
 800e152:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e156:	2b00      	cmp	r3, #0
 800e158:	d1e5      	bne.n	800e126 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	2220      	movs	r2, #32
 800e15e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	2220      	movs	r2, #32
 800e164:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	2200      	movs	r2, #0
 800e16a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800e16e:	2303      	movs	r3, #3
 800e170:	e067      	b.n	800e242 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	f003 0304 	and.w	r3, r3, #4
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d04f      	beq.n	800e220 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	69db      	ldr	r3, [r3, #28]
 800e186:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e18a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e18e:	d147      	bne.n	800e220 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e198:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1a2:	e853 3f00 	ldrex	r3, [r3]
 800e1a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e1ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	461a      	mov	r2, r3
 800e1b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e1b8:	637b      	str	r3, [r7, #52]	; 0x34
 800e1ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e1be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e1c0:	e841 2300 	strex	r3, r2, [r1]
 800e1c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d1e6      	bne.n	800e19a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	3308      	adds	r3, #8
 800e1d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	e853 3f00 	ldrex	r3, [r3]
 800e1da:	613b      	str	r3, [r7, #16]
   return(result);
 800e1dc:	693b      	ldr	r3, [r7, #16]
 800e1de:	f023 0301 	bic.w	r3, r3, #1
 800e1e2:	66bb      	str	r3, [r7, #104]	; 0x68
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	3308      	adds	r3, #8
 800e1ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e1ec:	623a      	str	r2, [r7, #32]
 800e1ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1f0:	69f9      	ldr	r1, [r7, #28]
 800e1f2:	6a3a      	ldr	r2, [r7, #32]
 800e1f4:	e841 2300 	strex	r3, r2, [r1]
 800e1f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800e1fa:	69bb      	ldr	r3, [r7, #24]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d1e5      	bne.n	800e1cc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	2220      	movs	r2, #32
 800e204:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	2220      	movs	r2, #32
 800e20a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	2220      	movs	r2, #32
 800e210:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	2200      	movs	r2, #0
 800e218:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800e21c:	2303      	movs	r3, #3
 800e21e:	e010      	b.n	800e242 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	69da      	ldr	r2, [r3, #28]
 800e226:	68bb      	ldr	r3, [r7, #8]
 800e228:	4013      	ands	r3, r2
 800e22a:	68ba      	ldr	r2, [r7, #8]
 800e22c:	429a      	cmp	r2, r3
 800e22e:	bf0c      	ite	eq
 800e230:	2301      	moveq	r3, #1
 800e232:	2300      	movne	r3, #0
 800e234:	b2db      	uxtb	r3, r3
 800e236:	461a      	mov	r2, r3
 800e238:	79fb      	ldrb	r3, [r7, #7]
 800e23a:	429a      	cmp	r2, r3
 800e23c:	f43f af4a 	beq.w	800e0d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e240:	2300      	movs	r3, #0
}
 800e242:	4618      	mov	r0, r3
 800e244:	3770      	adds	r7, #112	; 0x70
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}
	...

0800e24c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e24c:	b480      	push	{r7}
 800e24e:	b097      	sub	sp, #92	; 0x5c
 800e250:	af00      	add	r7, sp, #0
 800e252:	60f8      	str	r0, [r7, #12]
 800e254:	60b9      	str	r1, [r7, #8]
 800e256:	4613      	mov	r3, r2
 800e258:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	68ba      	ldr	r2, [r7, #8]
 800e25e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	88fa      	ldrh	r2, [r7, #6]
 800e264:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	88fa      	ldrh	r2, [r7, #6]
 800e26c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	2200      	movs	r2, #0
 800e274:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	689b      	ldr	r3, [r3, #8]
 800e27a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e27e:	d10e      	bne.n	800e29e <UART_Start_Receive_IT+0x52>
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	691b      	ldr	r3, [r3, #16]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d105      	bne.n	800e294 <UART_Start_Receive_IT+0x48>
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e28e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e292:	e02d      	b.n	800e2f0 <UART_Start_Receive_IT+0xa4>
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	22ff      	movs	r2, #255	; 0xff
 800e298:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e29c:	e028      	b.n	800e2f0 <UART_Start_Receive_IT+0xa4>
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	689b      	ldr	r3, [r3, #8]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d10d      	bne.n	800e2c2 <UART_Start_Receive_IT+0x76>
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	691b      	ldr	r3, [r3, #16]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d104      	bne.n	800e2b8 <UART_Start_Receive_IT+0x6c>
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	22ff      	movs	r2, #255	; 0xff
 800e2b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e2b6:	e01b      	b.n	800e2f0 <UART_Start_Receive_IT+0xa4>
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	227f      	movs	r2, #127	; 0x7f
 800e2bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e2c0:	e016      	b.n	800e2f0 <UART_Start_Receive_IT+0xa4>
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	689b      	ldr	r3, [r3, #8]
 800e2c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e2ca:	d10d      	bne.n	800e2e8 <UART_Start_Receive_IT+0x9c>
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	691b      	ldr	r3, [r3, #16]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d104      	bne.n	800e2de <UART_Start_Receive_IT+0x92>
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	227f      	movs	r2, #127	; 0x7f
 800e2d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e2dc:	e008      	b.n	800e2f0 <UART_Start_Receive_IT+0xa4>
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	223f      	movs	r2, #63	; 0x3f
 800e2e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800e2e6:	e003      	b.n	800e2f0 <UART_Start_Receive_IT+0xa4>
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	2222      	movs	r2, #34	; 0x22
 800e2fc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	3308      	adds	r3, #8
 800e304:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e308:	e853 3f00 	ldrex	r3, [r3]
 800e30c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e310:	f043 0301 	orr.w	r3, r3, #1
 800e314:	657b      	str	r3, [r7, #84]	; 0x54
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	3308      	adds	r3, #8
 800e31c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e31e:	64ba      	str	r2, [r7, #72]	; 0x48
 800e320:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e322:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e324:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e326:	e841 2300 	strex	r3, r2, [r1]
 800e32a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e32c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d1e5      	bne.n	800e2fe <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	689b      	ldr	r3, [r3, #8]
 800e336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e33a:	d107      	bne.n	800e34c <UART_Start_Receive_IT+0x100>
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	691b      	ldr	r3, [r3, #16]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d103      	bne.n	800e34c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	4a24      	ldr	r2, [pc, #144]	; (800e3d8 <UART_Start_Receive_IT+0x18c>)
 800e348:	665a      	str	r2, [r3, #100]	; 0x64
 800e34a:	e002      	b.n	800e352 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	4a23      	ldr	r2, [pc, #140]	; (800e3dc <UART_Start_Receive_IT+0x190>)
 800e350:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	2200      	movs	r2, #0
 800e356:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	691b      	ldr	r3, [r3, #16]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d019      	beq.n	800e396 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e36a:	e853 3f00 	ldrex	r3, [r3]
 800e36e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e372:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800e376:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	461a      	mov	r2, r3
 800e37e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e380:	637b      	str	r3, [r7, #52]	; 0x34
 800e382:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e384:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e386:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e388:	e841 2300 	strex	r3, r2, [r1]
 800e38c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e390:	2b00      	cmp	r3, #0
 800e392:	d1e6      	bne.n	800e362 <UART_Start_Receive_IT+0x116>
 800e394:	e018      	b.n	800e3c8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e39c:	697b      	ldr	r3, [r7, #20]
 800e39e:	e853 3f00 	ldrex	r3, [r3]
 800e3a2:	613b      	str	r3, [r7, #16]
   return(result);
 800e3a4:	693b      	ldr	r3, [r7, #16]
 800e3a6:	f043 0320 	orr.w	r3, r3, #32
 800e3aa:	653b      	str	r3, [r7, #80]	; 0x50
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	461a      	mov	r2, r3
 800e3b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3b4:	623b      	str	r3, [r7, #32]
 800e3b6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3b8:	69f9      	ldr	r1, [r7, #28]
 800e3ba:	6a3a      	ldr	r2, [r7, #32]
 800e3bc:	e841 2300 	strex	r3, r2, [r1]
 800e3c0:	61bb      	str	r3, [r7, #24]
   return(result);
 800e3c2:	69bb      	ldr	r3, [r7, #24]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d1e6      	bne.n	800e396 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800e3c8:	2300      	movs	r3, #0
}
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	375c      	adds	r7, #92	; 0x5c
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d4:	4770      	bx	lr
 800e3d6:	bf00      	nop
 800e3d8:	0800e7ff 	.word	0x0800e7ff
 800e3dc:	0800e69f 	.word	0x0800e69f

0800e3e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e3e0:	b480      	push	{r7}
 800e3e2:	b095      	sub	sp, #84	; 0x54
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3f0:	e853 3f00 	ldrex	r3, [r3]
 800e3f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e3fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	461a      	mov	r2, r3
 800e404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e406:	643b      	str	r3, [r7, #64]	; 0x40
 800e408:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e40a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e40c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e40e:	e841 2300 	strex	r3, r2, [r1]
 800e412:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e416:	2b00      	cmp	r3, #0
 800e418:	d1e6      	bne.n	800e3e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	3308      	adds	r3, #8
 800e420:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e422:	6a3b      	ldr	r3, [r7, #32]
 800e424:	e853 3f00 	ldrex	r3, [r3]
 800e428:	61fb      	str	r3, [r7, #28]
   return(result);
 800e42a:	69fb      	ldr	r3, [r7, #28]
 800e42c:	f023 0301 	bic.w	r3, r3, #1
 800e430:	64bb      	str	r3, [r7, #72]	; 0x48
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	3308      	adds	r3, #8
 800e438:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e43a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e43c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e43e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e440:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e442:	e841 2300 	strex	r3, r2, [r1]
 800e446:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d1e5      	bne.n	800e41a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e452:	2b01      	cmp	r3, #1
 800e454:	d118      	bne.n	800e488 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	e853 3f00 	ldrex	r3, [r3]
 800e462:	60bb      	str	r3, [r7, #8]
   return(result);
 800e464:	68bb      	ldr	r3, [r7, #8]
 800e466:	f023 0310 	bic.w	r3, r3, #16
 800e46a:	647b      	str	r3, [r7, #68]	; 0x44
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	461a      	mov	r2, r3
 800e472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e474:	61bb      	str	r3, [r7, #24]
 800e476:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e478:	6979      	ldr	r1, [r7, #20]
 800e47a:	69ba      	ldr	r2, [r7, #24]
 800e47c:	e841 2300 	strex	r3, r2, [r1]
 800e480:	613b      	str	r3, [r7, #16]
   return(result);
 800e482:	693b      	ldr	r3, [r7, #16]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d1e6      	bne.n	800e456 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2220      	movs	r2, #32
 800e48c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	2200      	movs	r2, #0
 800e492:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2200      	movs	r2, #0
 800e498:	665a      	str	r2, [r3, #100]	; 0x64
}
 800e49a:	bf00      	nop
 800e49c:	3754      	adds	r7, #84	; 0x54
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a4:	4770      	bx	lr

0800e4a6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e4a6:	b580      	push	{r7, lr}
 800e4a8:	b084      	sub	sp, #16
 800e4aa:	af00      	add	r7, sp, #0
 800e4ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	2200      	movs	r2, #0
 800e4c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e4c4:	68f8      	ldr	r0, [r7, #12]
 800e4c6:	f7ff faa1 	bl	800da0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e4ca:	bf00      	nop
 800e4cc:	3710      	adds	r7, #16
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}

0800e4d2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e4d2:	b480      	push	{r7}
 800e4d4:	b08f      	sub	sp, #60	; 0x3c
 800e4d6:	af00      	add	r7, sp, #0
 800e4d8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e4de:	2b21      	cmp	r3, #33	; 0x21
 800e4e0:	d14d      	bne.n	800e57e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e4e8:	b29b      	uxth	r3, r3
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d132      	bne.n	800e554 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4f4:	6a3b      	ldr	r3, [r7, #32]
 800e4f6:	e853 3f00 	ldrex	r3, [r3]
 800e4fa:	61fb      	str	r3, [r7, #28]
   return(result);
 800e4fc:	69fb      	ldr	r3, [r7, #28]
 800e4fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e502:	637b      	str	r3, [r7, #52]	; 0x34
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	461a      	mov	r2, r3
 800e50a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e50c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e50e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e510:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e514:	e841 2300 	strex	r3, r2, [r1]
 800e518:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d1e6      	bne.n	800e4ee <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	e853 3f00 	ldrex	r3, [r3]
 800e52c:	60bb      	str	r3, [r7, #8]
   return(result);
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e534:	633b      	str	r3, [r7, #48]	; 0x30
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	461a      	mov	r2, r3
 800e53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e53e:	61bb      	str	r3, [r7, #24]
 800e540:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e542:	6979      	ldr	r1, [r7, #20]
 800e544:	69ba      	ldr	r2, [r7, #24]
 800e546:	e841 2300 	strex	r3, r2, [r1]
 800e54a:	613b      	str	r3, [r7, #16]
   return(result);
 800e54c:	693b      	ldr	r3, [r7, #16]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d1e6      	bne.n	800e520 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800e552:	e014      	b.n	800e57e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e558:	781a      	ldrb	r2, [r3, #0]
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	b292      	uxth	r2, r2
 800e560:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e566:	1c5a      	adds	r2, r3, #1
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e572:	b29b      	uxth	r3, r3
 800e574:	3b01      	subs	r3, #1
 800e576:	b29a      	uxth	r2, r3
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800e57e:	bf00      	nop
 800e580:	373c      	adds	r7, #60	; 0x3c
 800e582:	46bd      	mov	sp, r7
 800e584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e588:	4770      	bx	lr

0800e58a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e58a:	b480      	push	{r7}
 800e58c:	b091      	sub	sp, #68	; 0x44
 800e58e:	af00      	add	r7, sp, #0
 800e590:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e596:	2b21      	cmp	r3, #33	; 0x21
 800e598:	d151      	bne.n	800e63e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e5a0:	b29b      	uxth	r3, r3
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d132      	bne.n	800e60c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ae:	e853 3f00 	ldrex	r3, [r3]
 800e5b2:	623b      	str	r3, [r7, #32]
   return(result);
 800e5b4:	6a3b      	ldr	r3, [r7, #32]
 800e5b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e5ba:	63bb      	str	r3, [r7, #56]	; 0x38
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	461a      	mov	r2, r3
 800e5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5c4:	633b      	str	r3, [r7, #48]	; 0x30
 800e5c6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e5ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5cc:	e841 2300 	strex	r3, r2, [r1]
 800e5d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d1e6      	bne.n	800e5a6 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5de:	693b      	ldr	r3, [r7, #16]
 800e5e0:	e853 3f00 	ldrex	r3, [r3]
 800e5e4:	60fb      	str	r3, [r7, #12]
   return(result);
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5ec:	637b      	str	r3, [r7, #52]	; 0x34
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	461a      	mov	r2, r3
 800e5f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5f6:	61fb      	str	r3, [r7, #28]
 800e5f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5fa:	69b9      	ldr	r1, [r7, #24]
 800e5fc:	69fa      	ldr	r2, [r7, #28]
 800e5fe:	e841 2300 	strex	r3, r2, [r1]
 800e602:	617b      	str	r3, [r7, #20]
   return(result);
 800e604:	697b      	ldr	r3, [r7, #20]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d1e6      	bne.n	800e5d8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800e60a:	e018      	b.n	800e63e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e610:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800e612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e614:	881a      	ldrh	r2, [r3, #0]
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e61e:	b292      	uxth	r2, r2
 800e620:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e626:	1c9a      	adds	r2, r3, #2
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e632:	b29b      	uxth	r3, r3
 800e634:	3b01      	subs	r3, #1
 800e636:	b29a      	uxth	r2, r3
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800e63e:	bf00      	nop
 800e640:	3744      	adds	r7, #68	; 0x44
 800e642:	46bd      	mov	sp, r7
 800e644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e648:	4770      	bx	lr

0800e64a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e64a:	b580      	push	{r7, lr}
 800e64c:	b088      	sub	sp, #32
 800e64e:	af00      	add	r7, sp, #0
 800e650:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	e853 3f00 	ldrex	r3, [r3]
 800e65e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e666:	61fb      	str	r3, [r7, #28]
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	461a      	mov	r2, r3
 800e66e:	69fb      	ldr	r3, [r7, #28]
 800e670:	61bb      	str	r3, [r7, #24]
 800e672:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e674:	6979      	ldr	r1, [r7, #20]
 800e676:	69ba      	ldr	r2, [r7, #24]
 800e678:	e841 2300 	strex	r3, r2, [r1]
 800e67c:	613b      	str	r3, [r7, #16]
   return(result);
 800e67e:	693b      	ldr	r3, [r7, #16]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d1e6      	bne.n	800e652 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2220      	movs	r2, #32
 800e688:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2200      	movs	r2, #0
 800e68e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e690:	6878      	ldr	r0, [r7, #4]
 800e692:	f7fa fa5b 	bl	8008b4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e696:	bf00      	nop
 800e698:	3720      	adds	r7, #32
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}

0800e69e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e69e:	b580      	push	{r7, lr}
 800e6a0:	b096      	sub	sp, #88	; 0x58
 800e6a2:	af00      	add	r7, sp, #0
 800e6a4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e6ac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6b4:	2b22      	cmp	r3, #34	; 0x22
 800e6b6:	f040 8094 	bne.w	800e7e2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e6c0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e6c4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800e6c8:	b2d9      	uxtb	r1, r3
 800e6ca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e6ce:	b2da      	uxtb	r2, r3
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6d4:	400a      	ands	r2, r1
 800e6d6:	b2d2      	uxtb	r2, r2
 800e6d8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6de:	1c5a      	adds	r2, r3, #1
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e6ea:	b29b      	uxth	r3, r3
 800e6ec:	3b01      	subs	r3, #1
 800e6ee:	b29a      	uxth	r2, r3
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e6fc:	b29b      	uxth	r3, r3
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d179      	bne.n	800e7f6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e70a:	e853 3f00 	ldrex	r3, [r3]
 800e70e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e712:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e716:	653b      	str	r3, [r7, #80]	; 0x50
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	461a      	mov	r2, r3
 800e71e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e720:	647b      	str	r3, [r7, #68]	; 0x44
 800e722:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e724:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e726:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e728:	e841 2300 	strex	r3, r2, [r1]
 800e72c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e72e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e730:	2b00      	cmp	r3, #0
 800e732:	d1e6      	bne.n	800e702 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	3308      	adds	r3, #8
 800e73a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e73e:	e853 3f00 	ldrex	r3, [r3]
 800e742:	623b      	str	r3, [r7, #32]
   return(result);
 800e744:	6a3b      	ldr	r3, [r7, #32]
 800e746:	f023 0301 	bic.w	r3, r3, #1
 800e74a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	3308      	adds	r3, #8
 800e752:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e754:	633a      	str	r2, [r7, #48]	; 0x30
 800e756:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e758:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e75a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e75c:	e841 2300 	strex	r3, r2, [r1]
 800e760:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e764:	2b00      	cmp	r3, #0
 800e766:	d1e5      	bne.n	800e734 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2220      	movs	r2, #32
 800e76c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2200      	movs	r2, #0
 800e772:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e778:	2b01      	cmp	r3, #1
 800e77a:	d12e      	bne.n	800e7da <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2200      	movs	r2, #0
 800e780:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e788:	693b      	ldr	r3, [r7, #16]
 800e78a:	e853 3f00 	ldrex	r3, [r3]
 800e78e:	60fb      	str	r3, [r7, #12]
   return(result);
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	f023 0310 	bic.w	r3, r3, #16
 800e796:	64bb      	str	r3, [r7, #72]	; 0x48
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	461a      	mov	r2, r3
 800e79e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7a0:	61fb      	str	r3, [r7, #28]
 800e7a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7a4:	69b9      	ldr	r1, [r7, #24]
 800e7a6:	69fa      	ldr	r2, [r7, #28]
 800e7a8:	e841 2300 	strex	r3, r2, [r1]
 800e7ac:	617b      	str	r3, [r7, #20]
   return(result);
 800e7ae:	697b      	ldr	r3, [r7, #20]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d1e6      	bne.n	800e782 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	69db      	ldr	r3, [r3, #28]
 800e7ba:	f003 0310 	and.w	r3, r3, #16
 800e7be:	2b10      	cmp	r3, #16
 800e7c0:	d103      	bne.n	800e7ca <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	2210      	movs	r2, #16
 800e7c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e7d0:	4619      	mov	r1, r3
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	f7ff f924 	bl	800da20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e7d8:	e00d      	b.n	800e7f6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f7f3 fc1a 	bl	8002014 <HAL_UART_RxCpltCallback>
}
 800e7e0:	e009      	b.n	800e7f6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	8b1b      	ldrh	r3, [r3, #24]
 800e7e8:	b29a      	uxth	r2, r3
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	f042 0208 	orr.w	r2, r2, #8
 800e7f2:	b292      	uxth	r2, r2
 800e7f4:	831a      	strh	r2, [r3, #24]
}
 800e7f6:	bf00      	nop
 800e7f8:	3758      	adds	r7, #88	; 0x58
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}

0800e7fe <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e7fe:	b580      	push	{r7, lr}
 800e800:	b096      	sub	sp, #88	; 0x58
 800e802:	af00      	add	r7, sp, #0
 800e804:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e80c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e814:	2b22      	cmp	r3, #34	; 0x22
 800e816:	f040 8094 	bne.w	800e942 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e820:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e828:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800e82a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800e82e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e832:	4013      	ands	r3, r2
 800e834:	b29a      	uxth	r2, r3
 800e836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e838:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e83e:	1c9a      	adds	r2, r3, #2
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e84a:	b29b      	uxth	r3, r3
 800e84c:	3b01      	subs	r3, #1
 800e84e:	b29a      	uxth	r2, r3
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e85c:	b29b      	uxth	r3, r3
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d179      	bne.n	800e956 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e86a:	e853 3f00 	ldrex	r3, [r3]
 800e86e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e872:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e876:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	461a      	mov	r2, r3
 800e87e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e880:	643b      	str	r3, [r7, #64]	; 0x40
 800e882:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e884:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e886:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e888:	e841 2300 	strex	r3, r2, [r1]
 800e88c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e890:	2b00      	cmp	r3, #0
 800e892:	d1e6      	bne.n	800e862 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	3308      	adds	r3, #8
 800e89a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e89c:	6a3b      	ldr	r3, [r7, #32]
 800e89e:	e853 3f00 	ldrex	r3, [r3]
 800e8a2:	61fb      	str	r3, [r7, #28]
   return(result);
 800e8a4:	69fb      	ldr	r3, [r7, #28]
 800e8a6:	f023 0301 	bic.w	r3, r3, #1
 800e8aa:	64bb      	str	r3, [r7, #72]	; 0x48
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	3308      	adds	r3, #8
 800e8b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e8b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e8b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e8ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8bc:	e841 2300 	strex	r3, r2, [r1]
 800e8c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d1e5      	bne.n	800e894 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2220      	movs	r2, #32
 800e8cc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e8d8:	2b01      	cmp	r3, #1
 800e8da:	d12e      	bne.n	800e93a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2200      	movs	r2, #0
 800e8e0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	e853 3f00 	ldrex	r3, [r3]
 800e8ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800e8f0:	68bb      	ldr	r3, [r7, #8]
 800e8f2:	f023 0310 	bic.w	r3, r3, #16
 800e8f6:	647b      	str	r3, [r7, #68]	; 0x44
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	461a      	mov	r2, r3
 800e8fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e900:	61bb      	str	r3, [r7, #24]
 800e902:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e904:	6979      	ldr	r1, [r7, #20]
 800e906:	69ba      	ldr	r2, [r7, #24]
 800e908:	e841 2300 	strex	r3, r2, [r1]
 800e90c:	613b      	str	r3, [r7, #16]
   return(result);
 800e90e:	693b      	ldr	r3, [r7, #16]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d1e6      	bne.n	800e8e2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	69db      	ldr	r3, [r3, #28]
 800e91a:	f003 0310 	and.w	r3, r3, #16
 800e91e:	2b10      	cmp	r3, #16
 800e920:	d103      	bne.n	800e92a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	2210      	movs	r2, #16
 800e928:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e930:	4619      	mov	r1, r3
 800e932:	6878      	ldr	r0, [r7, #4]
 800e934:	f7ff f874 	bl	800da20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e938:	e00d      	b.n	800e956 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f7f3 fb6a 	bl	8002014 <HAL_UART_RxCpltCallback>
}
 800e940:	e009      	b.n	800e956 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	8b1b      	ldrh	r3, [r3, #24]
 800e948:	b29a      	uxth	r2, r3
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	f042 0208 	orr.w	r2, r2, #8
 800e952:	b292      	uxth	r2, r2
 800e954:	831a      	strh	r2, [r3, #24]
}
 800e956:	bf00      	nop
 800e958:	3758      	adds	r7, #88	; 0x58
 800e95a:	46bd      	mov	sp, r7
 800e95c:	bd80      	pop	{r7, pc}

0800e95e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e95e:	b480      	push	{r7}
 800e960:	b083      	sub	sp, #12
 800e962:	af00      	add	r7, sp, #0
 800e964:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e966:	bf00      	nop
 800e968:	370c      	adds	r7, #12
 800e96a:	46bd      	mov	sp, r7
 800e96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e970:	4770      	bx	lr

0800e972 <_ZdlPvj>:
 800e972:	f000 b800 	b.w	800e976 <_ZdlPv>

0800e976 <_ZdlPv>:
 800e976:	f000 b82b 	b.w	800e9d0 <free>
	...

0800e97c <__errno>:
 800e97c:	4b01      	ldr	r3, [pc, #4]	; (800e984 <__errno+0x8>)
 800e97e:	6818      	ldr	r0, [r3, #0]
 800e980:	4770      	bx	lr
 800e982:	bf00      	nop
 800e984:	2000000c 	.word	0x2000000c

0800e988 <__libc_init_array>:
 800e988:	b570      	push	{r4, r5, r6, lr}
 800e98a:	4d0d      	ldr	r5, [pc, #52]	; (800e9c0 <__libc_init_array+0x38>)
 800e98c:	4c0d      	ldr	r4, [pc, #52]	; (800e9c4 <__libc_init_array+0x3c>)
 800e98e:	1b64      	subs	r4, r4, r5
 800e990:	10a4      	asrs	r4, r4, #2
 800e992:	2600      	movs	r6, #0
 800e994:	42a6      	cmp	r6, r4
 800e996:	d109      	bne.n	800e9ac <__libc_init_array+0x24>
 800e998:	4d0b      	ldr	r5, [pc, #44]	; (800e9c8 <__libc_init_array+0x40>)
 800e99a:	4c0c      	ldr	r4, [pc, #48]	; (800e9cc <__libc_init_array+0x44>)
 800e99c:	f000 fc96 	bl	800f2cc <_init>
 800e9a0:	1b64      	subs	r4, r4, r5
 800e9a2:	10a4      	asrs	r4, r4, #2
 800e9a4:	2600      	movs	r6, #0
 800e9a6:	42a6      	cmp	r6, r4
 800e9a8:	d105      	bne.n	800e9b6 <__libc_init_array+0x2e>
 800e9aa:	bd70      	pop	{r4, r5, r6, pc}
 800e9ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9b0:	4798      	blx	r3
 800e9b2:	3601      	adds	r6, #1
 800e9b4:	e7ee      	b.n	800e994 <__libc_init_array+0xc>
 800e9b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9ba:	4798      	blx	r3
 800e9bc:	3601      	adds	r6, #1
 800e9be:	e7f2      	b.n	800e9a6 <__libc_init_array+0x1e>
 800e9c0:	0800f818 	.word	0x0800f818
 800e9c4:	0800f818 	.word	0x0800f818
 800e9c8:	0800f818 	.word	0x0800f818
 800e9cc:	0800f820 	.word	0x0800f820

0800e9d0 <free>:
 800e9d0:	4b02      	ldr	r3, [pc, #8]	; (800e9dc <free+0xc>)
 800e9d2:	4601      	mov	r1, r0
 800e9d4:	6818      	ldr	r0, [r3, #0]
 800e9d6:	f000 b819 	b.w	800ea0c <_free_r>
 800e9da:	bf00      	nop
 800e9dc:	2000000c 	.word	0x2000000c

0800e9e0 <memcpy>:
 800e9e0:	440a      	add	r2, r1
 800e9e2:	4291      	cmp	r1, r2
 800e9e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800e9e8:	d100      	bne.n	800e9ec <memcpy+0xc>
 800e9ea:	4770      	bx	lr
 800e9ec:	b510      	push	{r4, lr}
 800e9ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e9f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e9f6:	4291      	cmp	r1, r2
 800e9f8:	d1f9      	bne.n	800e9ee <memcpy+0xe>
 800e9fa:	bd10      	pop	{r4, pc}

0800e9fc <memset>:
 800e9fc:	4402      	add	r2, r0
 800e9fe:	4603      	mov	r3, r0
 800ea00:	4293      	cmp	r3, r2
 800ea02:	d100      	bne.n	800ea06 <memset+0xa>
 800ea04:	4770      	bx	lr
 800ea06:	f803 1b01 	strb.w	r1, [r3], #1
 800ea0a:	e7f9      	b.n	800ea00 <memset+0x4>

0800ea0c <_free_r>:
 800ea0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea0e:	2900      	cmp	r1, #0
 800ea10:	d044      	beq.n	800ea9c <_free_r+0x90>
 800ea12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea16:	9001      	str	r0, [sp, #4]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	f1a1 0404 	sub.w	r4, r1, #4
 800ea1e:	bfb8      	it	lt
 800ea20:	18e4      	addlt	r4, r4, r3
 800ea22:	f000 f905 	bl	800ec30 <__malloc_lock>
 800ea26:	4a1e      	ldr	r2, [pc, #120]	; (800eaa0 <_free_r+0x94>)
 800ea28:	9801      	ldr	r0, [sp, #4]
 800ea2a:	6813      	ldr	r3, [r2, #0]
 800ea2c:	b933      	cbnz	r3, 800ea3c <_free_r+0x30>
 800ea2e:	6063      	str	r3, [r4, #4]
 800ea30:	6014      	str	r4, [r2, #0]
 800ea32:	b003      	add	sp, #12
 800ea34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea38:	f000 b900 	b.w	800ec3c <__malloc_unlock>
 800ea3c:	42a3      	cmp	r3, r4
 800ea3e:	d908      	bls.n	800ea52 <_free_r+0x46>
 800ea40:	6825      	ldr	r5, [r4, #0]
 800ea42:	1961      	adds	r1, r4, r5
 800ea44:	428b      	cmp	r3, r1
 800ea46:	bf01      	itttt	eq
 800ea48:	6819      	ldreq	r1, [r3, #0]
 800ea4a:	685b      	ldreq	r3, [r3, #4]
 800ea4c:	1949      	addeq	r1, r1, r5
 800ea4e:	6021      	streq	r1, [r4, #0]
 800ea50:	e7ed      	b.n	800ea2e <_free_r+0x22>
 800ea52:	461a      	mov	r2, r3
 800ea54:	685b      	ldr	r3, [r3, #4]
 800ea56:	b10b      	cbz	r3, 800ea5c <_free_r+0x50>
 800ea58:	42a3      	cmp	r3, r4
 800ea5a:	d9fa      	bls.n	800ea52 <_free_r+0x46>
 800ea5c:	6811      	ldr	r1, [r2, #0]
 800ea5e:	1855      	adds	r5, r2, r1
 800ea60:	42a5      	cmp	r5, r4
 800ea62:	d10b      	bne.n	800ea7c <_free_r+0x70>
 800ea64:	6824      	ldr	r4, [r4, #0]
 800ea66:	4421      	add	r1, r4
 800ea68:	1854      	adds	r4, r2, r1
 800ea6a:	42a3      	cmp	r3, r4
 800ea6c:	6011      	str	r1, [r2, #0]
 800ea6e:	d1e0      	bne.n	800ea32 <_free_r+0x26>
 800ea70:	681c      	ldr	r4, [r3, #0]
 800ea72:	685b      	ldr	r3, [r3, #4]
 800ea74:	6053      	str	r3, [r2, #4]
 800ea76:	4421      	add	r1, r4
 800ea78:	6011      	str	r1, [r2, #0]
 800ea7a:	e7da      	b.n	800ea32 <_free_r+0x26>
 800ea7c:	d902      	bls.n	800ea84 <_free_r+0x78>
 800ea7e:	230c      	movs	r3, #12
 800ea80:	6003      	str	r3, [r0, #0]
 800ea82:	e7d6      	b.n	800ea32 <_free_r+0x26>
 800ea84:	6825      	ldr	r5, [r4, #0]
 800ea86:	1961      	adds	r1, r4, r5
 800ea88:	428b      	cmp	r3, r1
 800ea8a:	bf04      	itt	eq
 800ea8c:	6819      	ldreq	r1, [r3, #0]
 800ea8e:	685b      	ldreq	r3, [r3, #4]
 800ea90:	6063      	str	r3, [r4, #4]
 800ea92:	bf04      	itt	eq
 800ea94:	1949      	addeq	r1, r1, r5
 800ea96:	6021      	streq	r1, [r4, #0]
 800ea98:	6054      	str	r4, [r2, #4]
 800ea9a:	e7ca      	b.n	800ea32 <_free_r+0x26>
 800ea9c:	b003      	add	sp, #12
 800ea9e:	bd30      	pop	{r4, r5, pc}
 800eaa0:	20000844 	.word	0x20000844

0800eaa4 <sbrk_aligned>:
 800eaa4:	b570      	push	{r4, r5, r6, lr}
 800eaa6:	4e0e      	ldr	r6, [pc, #56]	; (800eae0 <sbrk_aligned+0x3c>)
 800eaa8:	460c      	mov	r4, r1
 800eaaa:	6831      	ldr	r1, [r6, #0]
 800eaac:	4605      	mov	r5, r0
 800eaae:	b911      	cbnz	r1, 800eab6 <sbrk_aligned+0x12>
 800eab0:	f000 f88c 	bl	800ebcc <_sbrk_r>
 800eab4:	6030      	str	r0, [r6, #0]
 800eab6:	4621      	mov	r1, r4
 800eab8:	4628      	mov	r0, r5
 800eaba:	f000 f887 	bl	800ebcc <_sbrk_r>
 800eabe:	1c43      	adds	r3, r0, #1
 800eac0:	d00a      	beq.n	800ead8 <sbrk_aligned+0x34>
 800eac2:	1cc4      	adds	r4, r0, #3
 800eac4:	f024 0403 	bic.w	r4, r4, #3
 800eac8:	42a0      	cmp	r0, r4
 800eaca:	d007      	beq.n	800eadc <sbrk_aligned+0x38>
 800eacc:	1a21      	subs	r1, r4, r0
 800eace:	4628      	mov	r0, r5
 800ead0:	f000 f87c 	bl	800ebcc <_sbrk_r>
 800ead4:	3001      	adds	r0, #1
 800ead6:	d101      	bne.n	800eadc <sbrk_aligned+0x38>
 800ead8:	f04f 34ff 	mov.w	r4, #4294967295
 800eadc:	4620      	mov	r0, r4
 800eade:	bd70      	pop	{r4, r5, r6, pc}
 800eae0:	20000848 	.word	0x20000848

0800eae4 <_malloc_r>:
 800eae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eae8:	1ccd      	adds	r5, r1, #3
 800eaea:	f025 0503 	bic.w	r5, r5, #3
 800eaee:	3508      	adds	r5, #8
 800eaf0:	2d0c      	cmp	r5, #12
 800eaf2:	bf38      	it	cc
 800eaf4:	250c      	movcc	r5, #12
 800eaf6:	2d00      	cmp	r5, #0
 800eaf8:	4607      	mov	r7, r0
 800eafa:	db01      	blt.n	800eb00 <_malloc_r+0x1c>
 800eafc:	42a9      	cmp	r1, r5
 800eafe:	d905      	bls.n	800eb0c <_malloc_r+0x28>
 800eb00:	230c      	movs	r3, #12
 800eb02:	603b      	str	r3, [r7, #0]
 800eb04:	2600      	movs	r6, #0
 800eb06:	4630      	mov	r0, r6
 800eb08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb0c:	4e2e      	ldr	r6, [pc, #184]	; (800ebc8 <_malloc_r+0xe4>)
 800eb0e:	f000 f88f 	bl	800ec30 <__malloc_lock>
 800eb12:	6833      	ldr	r3, [r6, #0]
 800eb14:	461c      	mov	r4, r3
 800eb16:	bb34      	cbnz	r4, 800eb66 <_malloc_r+0x82>
 800eb18:	4629      	mov	r1, r5
 800eb1a:	4638      	mov	r0, r7
 800eb1c:	f7ff ffc2 	bl	800eaa4 <sbrk_aligned>
 800eb20:	1c43      	adds	r3, r0, #1
 800eb22:	4604      	mov	r4, r0
 800eb24:	d14d      	bne.n	800ebc2 <_malloc_r+0xde>
 800eb26:	6834      	ldr	r4, [r6, #0]
 800eb28:	4626      	mov	r6, r4
 800eb2a:	2e00      	cmp	r6, #0
 800eb2c:	d140      	bne.n	800ebb0 <_malloc_r+0xcc>
 800eb2e:	6823      	ldr	r3, [r4, #0]
 800eb30:	4631      	mov	r1, r6
 800eb32:	4638      	mov	r0, r7
 800eb34:	eb04 0803 	add.w	r8, r4, r3
 800eb38:	f000 f848 	bl	800ebcc <_sbrk_r>
 800eb3c:	4580      	cmp	r8, r0
 800eb3e:	d13a      	bne.n	800ebb6 <_malloc_r+0xd2>
 800eb40:	6821      	ldr	r1, [r4, #0]
 800eb42:	3503      	adds	r5, #3
 800eb44:	1a6d      	subs	r5, r5, r1
 800eb46:	f025 0503 	bic.w	r5, r5, #3
 800eb4a:	3508      	adds	r5, #8
 800eb4c:	2d0c      	cmp	r5, #12
 800eb4e:	bf38      	it	cc
 800eb50:	250c      	movcc	r5, #12
 800eb52:	4629      	mov	r1, r5
 800eb54:	4638      	mov	r0, r7
 800eb56:	f7ff ffa5 	bl	800eaa4 <sbrk_aligned>
 800eb5a:	3001      	adds	r0, #1
 800eb5c:	d02b      	beq.n	800ebb6 <_malloc_r+0xd2>
 800eb5e:	6823      	ldr	r3, [r4, #0]
 800eb60:	442b      	add	r3, r5
 800eb62:	6023      	str	r3, [r4, #0]
 800eb64:	e00e      	b.n	800eb84 <_malloc_r+0xa0>
 800eb66:	6822      	ldr	r2, [r4, #0]
 800eb68:	1b52      	subs	r2, r2, r5
 800eb6a:	d41e      	bmi.n	800ebaa <_malloc_r+0xc6>
 800eb6c:	2a0b      	cmp	r2, #11
 800eb6e:	d916      	bls.n	800eb9e <_malloc_r+0xba>
 800eb70:	1961      	adds	r1, r4, r5
 800eb72:	42a3      	cmp	r3, r4
 800eb74:	6025      	str	r5, [r4, #0]
 800eb76:	bf18      	it	ne
 800eb78:	6059      	strne	r1, [r3, #4]
 800eb7a:	6863      	ldr	r3, [r4, #4]
 800eb7c:	bf08      	it	eq
 800eb7e:	6031      	streq	r1, [r6, #0]
 800eb80:	5162      	str	r2, [r4, r5]
 800eb82:	604b      	str	r3, [r1, #4]
 800eb84:	4638      	mov	r0, r7
 800eb86:	f104 060b 	add.w	r6, r4, #11
 800eb8a:	f000 f857 	bl	800ec3c <__malloc_unlock>
 800eb8e:	f026 0607 	bic.w	r6, r6, #7
 800eb92:	1d23      	adds	r3, r4, #4
 800eb94:	1af2      	subs	r2, r6, r3
 800eb96:	d0b6      	beq.n	800eb06 <_malloc_r+0x22>
 800eb98:	1b9b      	subs	r3, r3, r6
 800eb9a:	50a3      	str	r3, [r4, r2]
 800eb9c:	e7b3      	b.n	800eb06 <_malloc_r+0x22>
 800eb9e:	6862      	ldr	r2, [r4, #4]
 800eba0:	42a3      	cmp	r3, r4
 800eba2:	bf0c      	ite	eq
 800eba4:	6032      	streq	r2, [r6, #0]
 800eba6:	605a      	strne	r2, [r3, #4]
 800eba8:	e7ec      	b.n	800eb84 <_malloc_r+0xa0>
 800ebaa:	4623      	mov	r3, r4
 800ebac:	6864      	ldr	r4, [r4, #4]
 800ebae:	e7b2      	b.n	800eb16 <_malloc_r+0x32>
 800ebb0:	4634      	mov	r4, r6
 800ebb2:	6876      	ldr	r6, [r6, #4]
 800ebb4:	e7b9      	b.n	800eb2a <_malloc_r+0x46>
 800ebb6:	230c      	movs	r3, #12
 800ebb8:	603b      	str	r3, [r7, #0]
 800ebba:	4638      	mov	r0, r7
 800ebbc:	f000 f83e 	bl	800ec3c <__malloc_unlock>
 800ebc0:	e7a1      	b.n	800eb06 <_malloc_r+0x22>
 800ebc2:	6025      	str	r5, [r4, #0]
 800ebc4:	e7de      	b.n	800eb84 <_malloc_r+0xa0>
 800ebc6:	bf00      	nop
 800ebc8:	20000844 	.word	0x20000844

0800ebcc <_sbrk_r>:
 800ebcc:	b538      	push	{r3, r4, r5, lr}
 800ebce:	4d06      	ldr	r5, [pc, #24]	; (800ebe8 <_sbrk_r+0x1c>)
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	4604      	mov	r4, r0
 800ebd4:	4608      	mov	r0, r1
 800ebd6:	602b      	str	r3, [r5, #0]
 800ebd8:	f7f4 f8f0 	bl	8002dbc <_sbrk>
 800ebdc:	1c43      	adds	r3, r0, #1
 800ebde:	d102      	bne.n	800ebe6 <_sbrk_r+0x1a>
 800ebe0:	682b      	ldr	r3, [r5, #0]
 800ebe2:	b103      	cbz	r3, 800ebe6 <_sbrk_r+0x1a>
 800ebe4:	6023      	str	r3, [r4, #0]
 800ebe6:	bd38      	pop	{r3, r4, r5, pc}
 800ebe8:	20000850 	.word	0x20000850

0800ebec <siprintf>:
 800ebec:	b40e      	push	{r1, r2, r3}
 800ebee:	b500      	push	{lr}
 800ebf0:	b09c      	sub	sp, #112	; 0x70
 800ebf2:	ab1d      	add	r3, sp, #116	; 0x74
 800ebf4:	9002      	str	r0, [sp, #8]
 800ebf6:	9006      	str	r0, [sp, #24]
 800ebf8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ebfc:	4809      	ldr	r0, [pc, #36]	; (800ec24 <siprintf+0x38>)
 800ebfe:	9107      	str	r1, [sp, #28]
 800ec00:	9104      	str	r1, [sp, #16]
 800ec02:	4909      	ldr	r1, [pc, #36]	; (800ec28 <siprintf+0x3c>)
 800ec04:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec08:	9105      	str	r1, [sp, #20]
 800ec0a:	6800      	ldr	r0, [r0, #0]
 800ec0c:	9301      	str	r3, [sp, #4]
 800ec0e:	a902      	add	r1, sp, #8
 800ec10:	f000 f876 	bl	800ed00 <_svfiprintf_r>
 800ec14:	9b02      	ldr	r3, [sp, #8]
 800ec16:	2200      	movs	r2, #0
 800ec18:	701a      	strb	r2, [r3, #0]
 800ec1a:	b01c      	add	sp, #112	; 0x70
 800ec1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec20:	b003      	add	sp, #12
 800ec22:	4770      	bx	lr
 800ec24:	2000000c 	.word	0x2000000c
 800ec28:	ffff0208 	.word	0xffff0208

0800ec2c <__retarget_lock_acquire_recursive>:
 800ec2c:	4770      	bx	lr

0800ec2e <__retarget_lock_release_recursive>:
 800ec2e:	4770      	bx	lr

0800ec30 <__malloc_lock>:
 800ec30:	4801      	ldr	r0, [pc, #4]	; (800ec38 <__malloc_lock+0x8>)
 800ec32:	f7ff bffb 	b.w	800ec2c <__retarget_lock_acquire_recursive>
 800ec36:	bf00      	nop
 800ec38:	2000084c 	.word	0x2000084c

0800ec3c <__malloc_unlock>:
 800ec3c:	4801      	ldr	r0, [pc, #4]	; (800ec44 <__malloc_unlock+0x8>)
 800ec3e:	f7ff bff6 	b.w	800ec2e <__retarget_lock_release_recursive>
 800ec42:	bf00      	nop
 800ec44:	2000084c 	.word	0x2000084c

0800ec48 <__ssputs_r>:
 800ec48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec4c:	688e      	ldr	r6, [r1, #8]
 800ec4e:	429e      	cmp	r6, r3
 800ec50:	4682      	mov	sl, r0
 800ec52:	460c      	mov	r4, r1
 800ec54:	4690      	mov	r8, r2
 800ec56:	461f      	mov	r7, r3
 800ec58:	d838      	bhi.n	800eccc <__ssputs_r+0x84>
 800ec5a:	898a      	ldrh	r2, [r1, #12]
 800ec5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ec60:	d032      	beq.n	800ecc8 <__ssputs_r+0x80>
 800ec62:	6825      	ldr	r5, [r4, #0]
 800ec64:	6909      	ldr	r1, [r1, #16]
 800ec66:	eba5 0901 	sub.w	r9, r5, r1
 800ec6a:	6965      	ldr	r5, [r4, #20]
 800ec6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ec70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ec74:	3301      	adds	r3, #1
 800ec76:	444b      	add	r3, r9
 800ec78:	106d      	asrs	r5, r5, #1
 800ec7a:	429d      	cmp	r5, r3
 800ec7c:	bf38      	it	cc
 800ec7e:	461d      	movcc	r5, r3
 800ec80:	0553      	lsls	r3, r2, #21
 800ec82:	d531      	bpl.n	800ece8 <__ssputs_r+0xa0>
 800ec84:	4629      	mov	r1, r5
 800ec86:	f7ff ff2d 	bl	800eae4 <_malloc_r>
 800ec8a:	4606      	mov	r6, r0
 800ec8c:	b950      	cbnz	r0, 800eca4 <__ssputs_r+0x5c>
 800ec8e:	230c      	movs	r3, #12
 800ec90:	f8ca 3000 	str.w	r3, [sl]
 800ec94:	89a3      	ldrh	r3, [r4, #12]
 800ec96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec9a:	81a3      	strh	r3, [r4, #12]
 800ec9c:	f04f 30ff 	mov.w	r0, #4294967295
 800eca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eca4:	6921      	ldr	r1, [r4, #16]
 800eca6:	464a      	mov	r2, r9
 800eca8:	f7ff fe9a 	bl	800e9e0 <memcpy>
 800ecac:	89a3      	ldrh	r3, [r4, #12]
 800ecae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ecb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecb6:	81a3      	strh	r3, [r4, #12]
 800ecb8:	6126      	str	r6, [r4, #16]
 800ecba:	6165      	str	r5, [r4, #20]
 800ecbc:	444e      	add	r6, r9
 800ecbe:	eba5 0509 	sub.w	r5, r5, r9
 800ecc2:	6026      	str	r6, [r4, #0]
 800ecc4:	60a5      	str	r5, [r4, #8]
 800ecc6:	463e      	mov	r6, r7
 800ecc8:	42be      	cmp	r6, r7
 800ecca:	d900      	bls.n	800ecce <__ssputs_r+0x86>
 800eccc:	463e      	mov	r6, r7
 800ecce:	6820      	ldr	r0, [r4, #0]
 800ecd0:	4632      	mov	r2, r6
 800ecd2:	4641      	mov	r1, r8
 800ecd4:	f000 faa8 	bl	800f228 <memmove>
 800ecd8:	68a3      	ldr	r3, [r4, #8]
 800ecda:	1b9b      	subs	r3, r3, r6
 800ecdc:	60a3      	str	r3, [r4, #8]
 800ecde:	6823      	ldr	r3, [r4, #0]
 800ece0:	4433      	add	r3, r6
 800ece2:	6023      	str	r3, [r4, #0]
 800ece4:	2000      	movs	r0, #0
 800ece6:	e7db      	b.n	800eca0 <__ssputs_r+0x58>
 800ece8:	462a      	mov	r2, r5
 800ecea:	f000 fab7 	bl	800f25c <_realloc_r>
 800ecee:	4606      	mov	r6, r0
 800ecf0:	2800      	cmp	r0, #0
 800ecf2:	d1e1      	bne.n	800ecb8 <__ssputs_r+0x70>
 800ecf4:	6921      	ldr	r1, [r4, #16]
 800ecf6:	4650      	mov	r0, sl
 800ecf8:	f7ff fe88 	bl	800ea0c <_free_r>
 800ecfc:	e7c7      	b.n	800ec8e <__ssputs_r+0x46>
	...

0800ed00 <_svfiprintf_r>:
 800ed00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed04:	4698      	mov	r8, r3
 800ed06:	898b      	ldrh	r3, [r1, #12]
 800ed08:	061b      	lsls	r3, r3, #24
 800ed0a:	b09d      	sub	sp, #116	; 0x74
 800ed0c:	4607      	mov	r7, r0
 800ed0e:	460d      	mov	r5, r1
 800ed10:	4614      	mov	r4, r2
 800ed12:	d50e      	bpl.n	800ed32 <_svfiprintf_r+0x32>
 800ed14:	690b      	ldr	r3, [r1, #16]
 800ed16:	b963      	cbnz	r3, 800ed32 <_svfiprintf_r+0x32>
 800ed18:	2140      	movs	r1, #64	; 0x40
 800ed1a:	f7ff fee3 	bl	800eae4 <_malloc_r>
 800ed1e:	6028      	str	r0, [r5, #0]
 800ed20:	6128      	str	r0, [r5, #16]
 800ed22:	b920      	cbnz	r0, 800ed2e <_svfiprintf_r+0x2e>
 800ed24:	230c      	movs	r3, #12
 800ed26:	603b      	str	r3, [r7, #0]
 800ed28:	f04f 30ff 	mov.w	r0, #4294967295
 800ed2c:	e0d1      	b.n	800eed2 <_svfiprintf_r+0x1d2>
 800ed2e:	2340      	movs	r3, #64	; 0x40
 800ed30:	616b      	str	r3, [r5, #20]
 800ed32:	2300      	movs	r3, #0
 800ed34:	9309      	str	r3, [sp, #36]	; 0x24
 800ed36:	2320      	movs	r3, #32
 800ed38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed40:	2330      	movs	r3, #48	; 0x30
 800ed42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800eeec <_svfiprintf_r+0x1ec>
 800ed46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed4a:	f04f 0901 	mov.w	r9, #1
 800ed4e:	4623      	mov	r3, r4
 800ed50:	469a      	mov	sl, r3
 800ed52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed56:	b10a      	cbz	r2, 800ed5c <_svfiprintf_r+0x5c>
 800ed58:	2a25      	cmp	r2, #37	; 0x25
 800ed5a:	d1f9      	bne.n	800ed50 <_svfiprintf_r+0x50>
 800ed5c:	ebba 0b04 	subs.w	fp, sl, r4
 800ed60:	d00b      	beq.n	800ed7a <_svfiprintf_r+0x7a>
 800ed62:	465b      	mov	r3, fp
 800ed64:	4622      	mov	r2, r4
 800ed66:	4629      	mov	r1, r5
 800ed68:	4638      	mov	r0, r7
 800ed6a:	f7ff ff6d 	bl	800ec48 <__ssputs_r>
 800ed6e:	3001      	adds	r0, #1
 800ed70:	f000 80aa 	beq.w	800eec8 <_svfiprintf_r+0x1c8>
 800ed74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed76:	445a      	add	r2, fp
 800ed78:	9209      	str	r2, [sp, #36]	; 0x24
 800ed7a:	f89a 3000 	ldrb.w	r3, [sl]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	f000 80a2 	beq.w	800eec8 <_svfiprintf_r+0x1c8>
 800ed84:	2300      	movs	r3, #0
 800ed86:	f04f 32ff 	mov.w	r2, #4294967295
 800ed8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed8e:	f10a 0a01 	add.w	sl, sl, #1
 800ed92:	9304      	str	r3, [sp, #16]
 800ed94:	9307      	str	r3, [sp, #28]
 800ed96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed9a:	931a      	str	r3, [sp, #104]	; 0x68
 800ed9c:	4654      	mov	r4, sl
 800ed9e:	2205      	movs	r2, #5
 800eda0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eda4:	4851      	ldr	r0, [pc, #324]	; (800eeec <_svfiprintf_r+0x1ec>)
 800eda6:	f7f1 fa13 	bl	80001d0 <memchr>
 800edaa:	9a04      	ldr	r2, [sp, #16]
 800edac:	b9d8      	cbnz	r0, 800ede6 <_svfiprintf_r+0xe6>
 800edae:	06d0      	lsls	r0, r2, #27
 800edb0:	bf44      	itt	mi
 800edb2:	2320      	movmi	r3, #32
 800edb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800edb8:	0711      	lsls	r1, r2, #28
 800edba:	bf44      	itt	mi
 800edbc:	232b      	movmi	r3, #43	; 0x2b
 800edbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800edc2:	f89a 3000 	ldrb.w	r3, [sl]
 800edc6:	2b2a      	cmp	r3, #42	; 0x2a
 800edc8:	d015      	beq.n	800edf6 <_svfiprintf_r+0xf6>
 800edca:	9a07      	ldr	r2, [sp, #28]
 800edcc:	4654      	mov	r4, sl
 800edce:	2000      	movs	r0, #0
 800edd0:	f04f 0c0a 	mov.w	ip, #10
 800edd4:	4621      	mov	r1, r4
 800edd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edda:	3b30      	subs	r3, #48	; 0x30
 800eddc:	2b09      	cmp	r3, #9
 800edde:	d94e      	bls.n	800ee7e <_svfiprintf_r+0x17e>
 800ede0:	b1b0      	cbz	r0, 800ee10 <_svfiprintf_r+0x110>
 800ede2:	9207      	str	r2, [sp, #28]
 800ede4:	e014      	b.n	800ee10 <_svfiprintf_r+0x110>
 800ede6:	eba0 0308 	sub.w	r3, r0, r8
 800edea:	fa09 f303 	lsl.w	r3, r9, r3
 800edee:	4313      	orrs	r3, r2
 800edf0:	9304      	str	r3, [sp, #16]
 800edf2:	46a2      	mov	sl, r4
 800edf4:	e7d2      	b.n	800ed9c <_svfiprintf_r+0x9c>
 800edf6:	9b03      	ldr	r3, [sp, #12]
 800edf8:	1d19      	adds	r1, r3, #4
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	9103      	str	r1, [sp, #12]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	bfbb      	ittet	lt
 800ee02:	425b      	neglt	r3, r3
 800ee04:	f042 0202 	orrlt.w	r2, r2, #2
 800ee08:	9307      	strge	r3, [sp, #28]
 800ee0a:	9307      	strlt	r3, [sp, #28]
 800ee0c:	bfb8      	it	lt
 800ee0e:	9204      	strlt	r2, [sp, #16]
 800ee10:	7823      	ldrb	r3, [r4, #0]
 800ee12:	2b2e      	cmp	r3, #46	; 0x2e
 800ee14:	d10c      	bne.n	800ee30 <_svfiprintf_r+0x130>
 800ee16:	7863      	ldrb	r3, [r4, #1]
 800ee18:	2b2a      	cmp	r3, #42	; 0x2a
 800ee1a:	d135      	bne.n	800ee88 <_svfiprintf_r+0x188>
 800ee1c:	9b03      	ldr	r3, [sp, #12]
 800ee1e:	1d1a      	adds	r2, r3, #4
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	9203      	str	r2, [sp, #12]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	bfb8      	it	lt
 800ee28:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee2c:	3402      	adds	r4, #2
 800ee2e:	9305      	str	r3, [sp, #20]
 800ee30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800eefc <_svfiprintf_r+0x1fc>
 800ee34:	7821      	ldrb	r1, [r4, #0]
 800ee36:	2203      	movs	r2, #3
 800ee38:	4650      	mov	r0, sl
 800ee3a:	f7f1 f9c9 	bl	80001d0 <memchr>
 800ee3e:	b140      	cbz	r0, 800ee52 <_svfiprintf_r+0x152>
 800ee40:	2340      	movs	r3, #64	; 0x40
 800ee42:	eba0 000a 	sub.w	r0, r0, sl
 800ee46:	fa03 f000 	lsl.w	r0, r3, r0
 800ee4a:	9b04      	ldr	r3, [sp, #16]
 800ee4c:	4303      	orrs	r3, r0
 800ee4e:	3401      	adds	r4, #1
 800ee50:	9304      	str	r3, [sp, #16]
 800ee52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee56:	4826      	ldr	r0, [pc, #152]	; (800eef0 <_svfiprintf_r+0x1f0>)
 800ee58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee5c:	2206      	movs	r2, #6
 800ee5e:	f7f1 f9b7 	bl	80001d0 <memchr>
 800ee62:	2800      	cmp	r0, #0
 800ee64:	d038      	beq.n	800eed8 <_svfiprintf_r+0x1d8>
 800ee66:	4b23      	ldr	r3, [pc, #140]	; (800eef4 <_svfiprintf_r+0x1f4>)
 800ee68:	bb1b      	cbnz	r3, 800eeb2 <_svfiprintf_r+0x1b2>
 800ee6a:	9b03      	ldr	r3, [sp, #12]
 800ee6c:	3307      	adds	r3, #7
 800ee6e:	f023 0307 	bic.w	r3, r3, #7
 800ee72:	3308      	adds	r3, #8
 800ee74:	9303      	str	r3, [sp, #12]
 800ee76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee78:	4433      	add	r3, r6
 800ee7a:	9309      	str	r3, [sp, #36]	; 0x24
 800ee7c:	e767      	b.n	800ed4e <_svfiprintf_r+0x4e>
 800ee7e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee82:	460c      	mov	r4, r1
 800ee84:	2001      	movs	r0, #1
 800ee86:	e7a5      	b.n	800edd4 <_svfiprintf_r+0xd4>
 800ee88:	2300      	movs	r3, #0
 800ee8a:	3401      	adds	r4, #1
 800ee8c:	9305      	str	r3, [sp, #20]
 800ee8e:	4619      	mov	r1, r3
 800ee90:	f04f 0c0a 	mov.w	ip, #10
 800ee94:	4620      	mov	r0, r4
 800ee96:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee9a:	3a30      	subs	r2, #48	; 0x30
 800ee9c:	2a09      	cmp	r2, #9
 800ee9e:	d903      	bls.n	800eea8 <_svfiprintf_r+0x1a8>
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d0c5      	beq.n	800ee30 <_svfiprintf_r+0x130>
 800eea4:	9105      	str	r1, [sp, #20]
 800eea6:	e7c3      	b.n	800ee30 <_svfiprintf_r+0x130>
 800eea8:	fb0c 2101 	mla	r1, ip, r1, r2
 800eeac:	4604      	mov	r4, r0
 800eeae:	2301      	movs	r3, #1
 800eeb0:	e7f0      	b.n	800ee94 <_svfiprintf_r+0x194>
 800eeb2:	ab03      	add	r3, sp, #12
 800eeb4:	9300      	str	r3, [sp, #0]
 800eeb6:	462a      	mov	r2, r5
 800eeb8:	4b0f      	ldr	r3, [pc, #60]	; (800eef8 <_svfiprintf_r+0x1f8>)
 800eeba:	a904      	add	r1, sp, #16
 800eebc:	4638      	mov	r0, r7
 800eebe:	f3af 8000 	nop.w
 800eec2:	1c42      	adds	r2, r0, #1
 800eec4:	4606      	mov	r6, r0
 800eec6:	d1d6      	bne.n	800ee76 <_svfiprintf_r+0x176>
 800eec8:	89ab      	ldrh	r3, [r5, #12]
 800eeca:	065b      	lsls	r3, r3, #25
 800eecc:	f53f af2c 	bmi.w	800ed28 <_svfiprintf_r+0x28>
 800eed0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eed2:	b01d      	add	sp, #116	; 0x74
 800eed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eed8:	ab03      	add	r3, sp, #12
 800eeda:	9300      	str	r3, [sp, #0]
 800eedc:	462a      	mov	r2, r5
 800eede:	4b06      	ldr	r3, [pc, #24]	; (800eef8 <_svfiprintf_r+0x1f8>)
 800eee0:	a904      	add	r1, sp, #16
 800eee2:	4638      	mov	r0, r7
 800eee4:	f000 f87a 	bl	800efdc <_printf_i>
 800eee8:	e7eb      	b.n	800eec2 <_svfiprintf_r+0x1c2>
 800eeea:	bf00      	nop
 800eeec:	0800f7dc 	.word	0x0800f7dc
 800eef0:	0800f7e6 	.word	0x0800f7e6
 800eef4:	00000000 	.word	0x00000000
 800eef8:	0800ec49 	.word	0x0800ec49
 800eefc:	0800f7e2 	.word	0x0800f7e2

0800ef00 <_printf_common>:
 800ef00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef04:	4616      	mov	r6, r2
 800ef06:	4699      	mov	r9, r3
 800ef08:	688a      	ldr	r2, [r1, #8]
 800ef0a:	690b      	ldr	r3, [r1, #16]
 800ef0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ef10:	4293      	cmp	r3, r2
 800ef12:	bfb8      	it	lt
 800ef14:	4613      	movlt	r3, r2
 800ef16:	6033      	str	r3, [r6, #0]
 800ef18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ef1c:	4607      	mov	r7, r0
 800ef1e:	460c      	mov	r4, r1
 800ef20:	b10a      	cbz	r2, 800ef26 <_printf_common+0x26>
 800ef22:	3301      	adds	r3, #1
 800ef24:	6033      	str	r3, [r6, #0]
 800ef26:	6823      	ldr	r3, [r4, #0]
 800ef28:	0699      	lsls	r1, r3, #26
 800ef2a:	bf42      	ittt	mi
 800ef2c:	6833      	ldrmi	r3, [r6, #0]
 800ef2e:	3302      	addmi	r3, #2
 800ef30:	6033      	strmi	r3, [r6, #0]
 800ef32:	6825      	ldr	r5, [r4, #0]
 800ef34:	f015 0506 	ands.w	r5, r5, #6
 800ef38:	d106      	bne.n	800ef48 <_printf_common+0x48>
 800ef3a:	f104 0a19 	add.w	sl, r4, #25
 800ef3e:	68e3      	ldr	r3, [r4, #12]
 800ef40:	6832      	ldr	r2, [r6, #0]
 800ef42:	1a9b      	subs	r3, r3, r2
 800ef44:	42ab      	cmp	r3, r5
 800ef46:	dc26      	bgt.n	800ef96 <_printf_common+0x96>
 800ef48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ef4c:	1e13      	subs	r3, r2, #0
 800ef4e:	6822      	ldr	r2, [r4, #0]
 800ef50:	bf18      	it	ne
 800ef52:	2301      	movne	r3, #1
 800ef54:	0692      	lsls	r2, r2, #26
 800ef56:	d42b      	bmi.n	800efb0 <_printf_common+0xb0>
 800ef58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ef5c:	4649      	mov	r1, r9
 800ef5e:	4638      	mov	r0, r7
 800ef60:	47c0      	blx	r8
 800ef62:	3001      	adds	r0, #1
 800ef64:	d01e      	beq.n	800efa4 <_printf_common+0xa4>
 800ef66:	6823      	ldr	r3, [r4, #0]
 800ef68:	68e5      	ldr	r5, [r4, #12]
 800ef6a:	6832      	ldr	r2, [r6, #0]
 800ef6c:	f003 0306 	and.w	r3, r3, #6
 800ef70:	2b04      	cmp	r3, #4
 800ef72:	bf08      	it	eq
 800ef74:	1aad      	subeq	r5, r5, r2
 800ef76:	68a3      	ldr	r3, [r4, #8]
 800ef78:	6922      	ldr	r2, [r4, #16]
 800ef7a:	bf0c      	ite	eq
 800ef7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ef80:	2500      	movne	r5, #0
 800ef82:	4293      	cmp	r3, r2
 800ef84:	bfc4      	itt	gt
 800ef86:	1a9b      	subgt	r3, r3, r2
 800ef88:	18ed      	addgt	r5, r5, r3
 800ef8a:	2600      	movs	r6, #0
 800ef8c:	341a      	adds	r4, #26
 800ef8e:	42b5      	cmp	r5, r6
 800ef90:	d11a      	bne.n	800efc8 <_printf_common+0xc8>
 800ef92:	2000      	movs	r0, #0
 800ef94:	e008      	b.n	800efa8 <_printf_common+0xa8>
 800ef96:	2301      	movs	r3, #1
 800ef98:	4652      	mov	r2, sl
 800ef9a:	4649      	mov	r1, r9
 800ef9c:	4638      	mov	r0, r7
 800ef9e:	47c0      	blx	r8
 800efa0:	3001      	adds	r0, #1
 800efa2:	d103      	bne.n	800efac <_printf_common+0xac>
 800efa4:	f04f 30ff 	mov.w	r0, #4294967295
 800efa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efac:	3501      	adds	r5, #1
 800efae:	e7c6      	b.n	800ef3e <_printf_common+0x3e>
 800efb0:	18e1      	adds	r1, r4, r3
 800efb2:	1c5a      	adds	r2, r3, #1
 800efb4:	2030      	movs	r0, #48	; 0x30
 800efb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800efba:	4422      	add	r2, r4
 800efbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800efc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800efc4:	3302      	adds	r3, #2
 800efc6:	e7c7      	b.n	800ef58 <_printf_common+0x58>
 800efc8:	2301      	movs	r3, #1
 800efca:	4622      	mov	r2, r4
 800efcc:	4649      	mov	r1, r9
 800efce:	4638      	mov	r0, r7
 800efd0:	47c0      	blx	r8
 800efd2:	3001      	adds	r0, #1
 800efd4:	d0e6      	beq.n	800efa4 <_printf_common+0xa4>
 800efd6:	3601      	adds	r6, #1
 800efd8:	e7d9      	b.n	800ef8e <_printf_common+0x8e>
	...

0800efdc <_printf_i>:
 800efdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800efe0:	7e0f      	ldrb	r7, [r1, #24]
 800efe2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800efe4:	2f78      	cmp	r7, #120	; 0x78
 800efe6:	4691      	mov	r9, r2
 800efe8:	4680      	mov	r8, r0
 800efea:	460c      	mov	r4, r1
 800efec:	469a      	mov	sl, r3
 800efee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800eff2:	d807      	bhi.n	800f004 <_printf_i+0x28>
 800eff4:	2f62      	cmp	r7, #98	; 0x62
 800eff6:	d80a      	bhi.n	800f00e <_printf_i+0x32>
 800eff8:	2f00      	cmp	r7, #0
 800effa:	f000 80d8 	beq.w	800f1ae <_printf_i+0x1d2>
 800effe:	2f58      	cmp	r7, #88	; 0x58
 800f000:	f000 80a3 	beq.w	800f14a <_printf_i+0x16e>
 800f004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f008:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f00c:	e03a      	b.n	800f084 <_printf_i+0xa8>
 800f00e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f012:	2b15      	cmp	r3, #21
 800f014:	d8f6      	bhi.n	800f004 <_printf_i+0x28>
 800f016:	a101      	add	r1, pc, #4	; (adr r1, 800f01c <_printf_i+0x40>)
 800f018:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f01c:	0800f075 	.word	0x0800f075
 800f020:	0800f089 	.word	0x0800f089
 800f024:	0800f005 	.word	0x0800f005
 800f028:	0800f005 	.word	0x0800f005
 800f02c:	0800f005 	.word	0x0800f005
 800f030:	0800f005 	.word	0x0800f005
 800f034:	0800f089 	.word	0x0800f089
 800f038:	0800f005 	.word	0x0800f005
 800f03c:	0800f005 	.word	0x0800f005
 800f040:	0800f005 	.word	0x0800f005
 800f044:	0800f005 	.word	0x0800f005
 800f048:	0800f195 	.word	0x0800f195
 800f04c:	0800f0b9 	.word	0x0800f0b9
 800f050:	0800f177 	.word	0x0800f177
 800f054:	0800f005 	.word	0x0800f005
 800f058:	0800f005 	.word	0x0800f005
 800f05c:	0800f1b7 	.word	0x0800f1b7
 800f060:	0800f005 	.word	0x0800f005
 800f064:	0800f0b9 	.word	0x0800f0b9
 800f068:	0800f005 	.word	0x0800f005
 800f06c:	0800f005 	.word	0x0800f005
 800f070:	0800f17f 	.word	0x0800f17f
 800f074:	682b      	ldr	r3, [r5, #0]
 800f076:	1d1a      	adds	r2, r3, #4
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	602a      	str	r2, [r5, #0]
 800f07c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f080:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f084:	2301      	movs	r3, #1
 800f086:	e0a3      	b.n	800f1d0 <_printf_i+0x1f4>
 800f088:	6820      	ldr	r0, [r4, #0]
 800f08a:	6829      	ldr	r1, [r5, #0]
 800f08c:	0606      	lsls	r6, r0, #24
 800f08e:	f101 0304 	add.w	r3, r1, #4
 800f092:	d50a      	bpl.n	800f0aa <_printf_i+0xce>
 800f094:	680e      	ldr	r6, [r1, #0]
 800f096:	602b      	str	r3, [r5, #0]
 800f098:	2e00      	cmp	r6, #0
 800f09a:	da03      	bge.n	800f0a4 <_printf_i+0xc8>
 800f09c:	232d      	movs	r3, #45	; 0x2d
 800f09e:	4276      	negs	r6, r6
 800f0a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0a4:	485e      	ldr	r0, [pc, #376]	; (800f220 <_printf_i+0x244>)
 800f0a6:	230a      	movs	r3, #10
 800f0a8:	e019      	b.n	800f0de <_printf_i+0x102>
 800f0aa:	680e      	ldr	r6, [r1, #0]
 800f0ac:	602b      	str	r3, [r5, #0]
 800f0ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f0b2:	bf18      	it	ne
 800f0b4:	b236      	sxthne	r6, r6
 800f0b6:	e7ef      	b.n	800f098 <_printf_i+0xbc>
 800f0b8:	682b      	ldr	r3, [r5, #0]
 800f0ba:	6820      	ldr	r0, [r4, #0]
 800f0bc:	1d19      	adds	r1, r3, #4
 800f0be:	6029      	str	r1, [r5, #0]
 800f0c0:	0601      	lsls	r1, r0, #24
 800f0c2:	d501      	bpl.n	800f0c8 <_printf_i+0xec>
 800f0c4:	681e      	ldr	r6, [r3, #0]
 800f0c6:	e002      	b.n	800f0ce <_printf_i+0xf2>
 800f0c8:	0646      	lsls	r6, r0, #25
 800f0ca:	d5fb      	bpl.n	800f0c4 <_printf_i+0xe8>
 800f0cc:	881e      	ldrh	r6, [r3, #0]
 800f0ce:	4854      	ldr	r0, [pc, #336]	; (800f220 <_printf_i+0x244>)
 800f0d0:	2f6f      	cmp	r7, #111	; 0x6f
 800f0d2:	bf0c      	ite	eq
 800f0d4:	2308      	moveq	r3, #8
 800f0d6:	230a      	movne	r3, #10
 800f0d8:	2100      	movs	r1, #0
 800f0da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f0de:	6865      	ldr	r5, [r4, #4]
 800f0e0:	60a5      	str	r5, [r4, #8]
 800f0e2:	2d00      	cmp	r5, #0
 800f0e4:	bfa2      	ittt	ge
 800f0e6:	6821      	ldrge	r1, [r4, #0]
 800f0e8:	f021 0104 	bicge.w	r1, r1, #4
 800f0ec:	6021      	strge	r1, [r4, #0]
 800f0ee:	b90e      	cbnz	r6, 800f0f4 <_printf_i+0x118>
 800f0f0:	2d00      	cmp	r5, #0
 800f0f2:	d04d      	beq.n	800f190 <_printf_i+0x1b4>
 800f0f4:	4615      	mov	r5, r2
 800f0f6:	fbb6 f1f3 	udiv	r1, r6, r3
 800f0fa:	fb03 6711 	mls	r7, r3, r1, r6
 800f0fe:	5dc7      	ldrb	r7, [r0, r7]
 800f100:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f104:	4637      	mov	r7, r6
 800f106:	42bb      	cmp	r3, r7
 800f108:	460e      	mov	r6, r1
 800f10a:	d9f4      	bls.n	800f0f6 <_printf_i+0x11a>
 800f10c:	2b08      	cmp	r3, #8
 800f10e:	d10b      	bne.n	800f128 <_printf_i+0x14c>
 800f110:	6823      	ldr	r3, [r4, #0]
 800f112:	07de      	lsls	r6, r3, #31
 800f114:	d508      	bpl.n	800f128 <_printf_i+0x14c>
 800f116:	6923      	ldr	r3, [r4, #16]
 800f118:	6861      	ldr	r1, [r4, #4]
 800f11a:	4299      	cmp	r1, r3
 800f11c:	bfde      	ittt	le
 800f11e:	2330      	movle	r3, #48	; 0x30
 800f120:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f124:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f128:	1b52      	subs	r2, r2, r5
 800f12a:	6122      	str	r2, [r4, #16]
 800f12c:	f8cd a000 	str.w	sl, [sp]
 800f130:	464b      	mov	r3, r9
 800f132:	aa03      	add	r2, sp, #12
 800f134:	4621      	mov	r1, r4
 800f136:	4640      	mov	r0, r8
 800f138:	f7ff fee2 	bl	800ef00 <_printf_common>
 800f13c:	3001      	adds	r0, #1
 800f13e:	d14c      	bne.n	800f1da <_printf_i+0x1fe>
 800f140:	f04f 30ff 	mov.w	r0, #4294967295
 800f144:	b004      	add	sp, #16
 800f146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f14a:	4835      	ldr	r0, [pc, #212]	; (800f220 <_printf_i+0x244>)
 800f14c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f150:	6829      	ldr	r1, [r5, #0]
 800f152:	6823      	ldr	r3, [r4, #0]
 800f154:	f851 6b04 	ldr.w	r6, [r1], #4
 800f158:	6029      	str	r1, [r5, #0]
 800f15a:	061d      	lsls	r5, r3, #24
 800f15c:	d514      	bpl.n	800f188 <_printf_i+0x1ac>
 800f15e:	07df      	lsls	r7, r3, #31
 800f160:	bf44      	itt	mi
 800f162:	f043 0320 	orrmi.w	r3, r3, #32
 800f166:	6023      	strmi	r3, [r4, #0]
 800f168:	b91e      	cbnz	r6, 800f172 <_printf_i+0x196>
 800f16a:	6823      	ldr	r3, [r4, #0]
 800f16c:	f023 0320 	bic.w	r3, r3, #32
 800f170:	6023      	str	r3, [r4, #0]
 800f172:	2310      	movs	r3, #16
 800f174:	e7b0      	b.n	800f0d8 <_printf_i+0xfc>
 800f176:	6823      	ldr	r3, [r4, #0]
 800f178:	f043 0320 	orr.w	r3, r3, #32
 800f17c:	6023      	str	r3, [r4, #0]
 800f17e:	2378      	movs	r3, #120	; 0x78
 800f180:	4828      	ldr	r0, [pc, #160]	; (800f224 <_printf_i+0x248>)
 800f182:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f186:	e7e3      	b.n	800f150 <_printf_i+0x174>
 800f188:	0659      	lsls	r1, r3, #25
 800f18a:	bf48      	it	mi
 800f18c:	b2b6      	uxthmi	r6, r6
 800f18e:	e7e6      	b.n	800f15e <_printf_i+0x182>
 800f190:	4615      	mov	r5, r2
 800f192:	e7bb      	b.n	800f10c <_printf_i+0x130>
 800f194:	682b      	ldr	r3, [r5, #0]
 800f196:	6826      	ldr	r6, [r4, #0]
 800f198:	6961      	ldr	r1, [r4, #20]
 800f19a:	1d18      	adds	r0, r3, #4
 800f19c:	6028      	str	r0, [r5, #0]
 800f19e:	0635      	lsls	r5, r6, #24
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	d501      	bpl.n	800f1a8 <_printf_i+0x1cc>
 800f1a4:	6019      	str	r1, [r3, #0]
 800f1a6:	e002      	b.n	800f1ae <_printf_i+0x1d2>
 800f1a8:	0670      	lsls	r0, r6, #25
 800f1aa:	d5fb      	bpl.n	800f1a4 <_printf_i+0x1c8>
 800f1ac:	8019      	strh	r1, [r3, #0]
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	6123      	str	r3, [r4, #16]
 800f1b2:	4615      	mov	r5, r2
 800f1b4:	e7ba      	b.n	800f12c <_printf_i+0x150>
 800f1b6:	682b      	ldr	r3, [r5, #0]
 800f1b8:	1d1a      	adds	r2, r3, #4
 800f1ba:	602a      	str	r2, [r5, #0]
 800f1bc:	681d      	ldr	r5, [r3, #0]
 800f1be:	6862      	ldr	r2, [r4, #4]
 800f1c0:	2100      	movs	r1, #0
 800f1c2:	4628      	mov	r0, r5
 800f1c4:	f7f1 f804 	bl	80001d0 <memchr>
 800f1c8:	b108      	cbz	r0, 800f1ce <_printf_i+0x1f2>
 800f1ca:	1b40      	subs	r0, r0, r5
 800f1cc:	6060      	str	r0, [r4, #4]
 800f1ce:	6863      	ldr	r3, [r4, #4]
 800f1d0:	6123      	str	r3, [r4, #16]
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1d8:	e7a8      	b.n	800f12c <_printf_i+0x150>
 800f1da:	6923      	ldr	r3, [r4, #16]
 800f1dc:	462a      	mov	r2, r5
 800f1de:	4649      	mov	r1, r9
 800f1e0:	4640      	mov	r0, r8
 800f1e2:	47d0      	blx	sl
 800f1e4:	3001      	adds	r0, #1
 800f1e6:	d0ab      	beq.n	800f140 <_printf_i+0x164>
 800f1e8:	6823      	ldr	r3, [r4, #0]
 800f1ea:	079b      	lsls	r3, r3, #30
 800f1ec:	d413      	bmi.n	800f216 <_printf_i+0x23a>
 800f1ee:	68e0      	ldr	r0, [r4, #12]
 800f1f0:	9b03      	ldr	r3, [sp, #12]
 800f1f2:	4298      	cmp	r0, r3
 800f1f4:	bfb8      	it	lt
 800f1f6:	4618      	movlt	r0, r3
 800f1f8:	e7a4      	b.n	800f144 <_printf_i+0x168>
 800f1fa:	2301      	movs	r3, #1
 800f1fc:	4632      	mov	r2, r6
 800f1fe:	4649      	mov	r1, r9
 800f200:	4640      	mov	r0, r8
 800f202:	47d0      	blx	sl
 800f204:	3001      	adds	r0, #1
 800f206:	d09b      	beq.n	800f140 <_printf_i+0x164>
 800f208:	3501      	adds	r5, #1
 800f20a:	68e3      	ldr	r3, [r4, #12]
 800f20c:	9903      	ldr	r1, [sp, #12]
 800f20e:	1a5b      	subs	r3, r3, r1
 800f210:	42ab      	cmp	r3, r5
 800f212:	dcf2      	bgt.n	800f1fa <_printf_i+0x21e>
 800f214:	e7eb      	b.n	800f1ee <_printf_i+0x212>
 800f216:	2500      	movs	r5, #0
 800f218:	f104 0619 	add.w	r6, r4, #25
 800f21c:	e7f5      	b.n	800f20a <_printf_i+0x22e>
 800f21e:	bf00      	nop
 800f220:	0800f7ed 	.word	0x0800f7ed
 800f224:	0800f7fe 	.word	0x0800f7fe

0800f228 <memmove>:
 800f228:	4288      	cmp	r0, r1
 800f22a:	b510      	push	{r4, lr}
 800f22c:	eb01 0402 	add.w	r4, r1, r2
 800f230:	d902      	bls.n	800f238 <memmove+0x10>
 800f232:	4284      	cmp	r4, r0
 800f234:	4623      	mov	r3, r4
 800f236:	d807      	bhi.n	800f248 <memmove+0x20>
 800f238:	1e43      	subs	r3, r0, #1
 800f23a:	42a1      	cmp	r1, r4
 800f23c:	d008      	beq.n	800f250 <memmove+0x28>
 800f23e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f242:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f246:	e7f8      	b.n	800f23a <memmove+0x12>
 800f248:	4402      	add	r2, r0
 800f24a:	4601      	mov	r1, r0
 800f24c:	428a      	cmp	r2, r1
 800f24e:	d100      	bne.n	800f252 <memmove+0x2a>
 800f250:	bd10      	pop	{r4, pc}
 800f252:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f256:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f25a:	e7f7      	b.n	800f24c <memmove+0x24>

0800f25c <_realloc_r>:
 800f25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f260:	4680      	mov	r8, r0
 800f262:	4614      	mov	r4, r2
 800f264:	460e      	mov	r6, r1
 800f266:	b921      	cbnz	r1, 800f272 <_realloc_r+0x16>
 800f268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f26c:	4611      	mov	r1, r2
 800f26e:	f7ff bc39 	b.w	800eae4 <_malloc_r>
 800f272:	b92a      	cbnz	r2, 800f280 <_realloc_r+0x24>
 800f274:	f7ff fbca 	bl	800ea0c <_free_r>
 800f278:	4625      	mov	r5, r4
 800f27a:	4628      	mov	r0, r5
 800f27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f280:	f000 f81b 	bl	800f2ba <_malloc_usable_size_r>
 800f284:	4284      	cmp	r4, r0
 800f286:	4607      	mov	r7, r0
 800f288:	d802      	bhi.n	800f290 <_realloc_r+0x34>
 800f28a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f28e:	d812      	bhi.n	800f2b6 <_realloc_r+0x5a>
 800f290:	4621      	mov	r1, r4
 800f292:	4640      	mov	r0, r8
 800f294:	f7ff fc26 	bl	800eae4 <_malloc_r>
 800f298:	4605      	mov	r5, r0
 800f29a:	2800      	cmp	r0, #0
 800f29c:	d0ed      	beq.n	800f27a <_realloc_r+0x1e>
 800f29e:	42bc      	cmp	r4, r7
 800f2a0:	4622      	mov	r2, r4
 800f2a2:	4631      	mov	r1, r6
 800f2a4:	bf28      	it	cs
 800f2a6:	463a      	movcs	r2, r7
 800f2a8:	f7ff fb9a 	bl	800e9e0 <memcpy>
 800f2ac:	4631      	mov	r1, r6
 800f2ae:	4640      	mov	r0, r8
 800f2b0:	f7ff fbac 	bl	800ea0c <_free_r>
 800f2b4:	e7e1      	b.n	800f27a <_realloc_r+0x1e>
 800f2b6:	4635      	mov	r5, r6
 800f2b8:	e7df      	b.n	800f27a <_realloc_r+0x1e>

0800f2ba <_malloc_usable_size_r>:
 800f2ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f2be:	1f18      	subs	r0, r3, #4
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	bfbc      	itt	lt
 800f2c4:	580b      	ldrlt	r3, [r1, r0]
 800f2c6:	18c0      	addlt	r0, r0, r3
 800f2c8:	4770      	bx	lr
	...

0800f2cc <_init>:
 800f2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2ce:	bf00      	nop
 800f2d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2d2:	bc08      	pop	{r3}
 800f2d4:	469e      	mov	lr, r3
 800f2d6:	4770      	bx	lr

0800f2d8 <_fini>:
 800f2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2da:	bf00      	nop
 800f2dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2de:	bc08      	pop	{r3}
 800f2e0:	469e      	mov	lr, r3
 800f2e2:	4770      	bx	lr
